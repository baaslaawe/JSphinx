%!PS-Adobe-2.0
%%Title: PhDThesis.mss
%%DocumentFonts: (atend)
%%Creator: William A. Rozzi and Scribe 7(1700)
%%CreationDate: 10 May 1991 10:41
%%Pages: (atend)
%%EndComments
% PostScript Prelude for Scribe.
/BS {/SV save def 0.0 792.0 translate .01 -.01 scale} bind def
/ES {showpage SV restore} bind def
/SC {setrgbcolor} bind def
/FMTX matrix def
/RDF {WFT SLT 0.0 eq 
  {SSZ 0.0 0.0 SSZ neg 0.0 0.0 FMTX astore}
  {SSZ 0.0 SLT neg sin SLT cos div SSZ mul SSZ neg 0.0 0.0 FMTX astore}
  ifelse makefont setfont} bind def
/SLT 0.0 def
/SI { /SLT exch cvr def RDF} bind def
/WFT /Courier findfont def
/SF { /WFT exch findfont def RDF} bind def
/SSZ 1000.0 def
/SS { /SSZ exch 100.0 mul def RDF} bind def
/AF { /WFT exch findfont def /SSZ exch 100.0 mul def RDF} bind def
/MT /moveto load def
/XM {currentpoint exch pop moveto} bind def
/UL {gsave newpath moveto dup 2.0 div 0.0 exch rmoveto
   setlinewidth 0.0 rlineto stroke grestore} bind def
/LH {gsave newpath moveto setlinewidth
   0.0 rlineto
   gsave stroke grestore} bind def
/LV {gsave newpath moveto setlinewidth
   0.0 exch rlineto
   gsave stroke grestore} bind def
/BX {gsave newpath moveto setlinewidth
   exch
   dup 0.0 rlineto
   exch 0.0 exch neg rlineto
   neg 0.0 rlineto
   closepath
   gsave stroke grestore} bind def
/BX1 {grestore} bind def
/BX2 {setlinewidth 1 setgray stroke grestore} bind def
/PB {/PV save def newpath translate
    100.0 -100.0 scale pop /showpage {} def} bind def
/PE {PV restore} bind def
/GB {/PV save def newpath translate rotate
    div dup scale 100.0 -100.0 scale /showpage {} def} bind def
/GE {PV restore} bind def
/FB {dict dup /FontMapDict exch def begin} bind def
/FM {cvn exch cvn exch def} bind def
/FE {end /original-findfont /findfont load def  /findfont
   {dup FontMapDict exch known{FontMapDict exch get} if
   original-findfont} def} bind def
/BC {gsave moveto dup 0 exch rlineto exch 0 rlineto neg 0 exch rlineto closepath clip} bind def
/EC /grestore load def
/SH /show load def
/MX {exch show 0.0 rmoveto} bind def
/W {0 32 4 -1 roll widthshow} bind def
/WX {0 32 5 -1 roll widthshow 0.0 rmoveto} bind def
%%EndProlog
%%Page: 0 1
BS
0 SI
11 /Times-Bold AF
15743 13697 MT
(SPEAKER ADAPTATION IN CONTINUOUS SPEECH RECOGNITION)SH
19044 15436 MT
(VIA ESTIMATION OF CORRELATED MEAN VECTORS)SH
9 SS 
29462 35267 MT
(A DISSERTATION)SH
24050 36463 MT
(SUBMITTED TO THE GRADUATE SCHOOL)SH
21637 37659 MT
(IN PARTIAL FULFILLMENT OF THE REQUIREMENTS)SH
11 /Times-Roman AF
30247 40051 MT
(for the degree)SH
9 /Times-Bold AF
27475 42443 MT
(DOCTOR OF PHILOSOPHY)SH
11 /Times-Roman AF
32872 43639 MT
(in)SH
9 /Times-Bold AF
23137 44835 MT
(ELECTRICAL AND COMPUTER ENGINEERING)SH
11 /Times-Roman AF
32750 47227 MT
(by)SH
26074 49619 MT
(William Anthony Michael Rozzi)SH
27129 52011 MT
(Carnegie Mellon University)SH
27830 53207 MT
(Pittsburgh, Pennsylvania)SH
30901 54403 MT
(April 1991)SH
25089 58480 MT
(Copyright)SH
/Symbol SF
29826 XM
(\323)SH
/Times-Roman SF
30970 XM
(1991 William)
275 W( A. Rozzi)SH
ES
%%Page: 1 2
BS
0 SI
10 /Times-Roman AF
55300 4286 MT
(1)SH
15 /Times-Bold AF
10800 15405 MT
(Abstract)SH
11 /Times-Roman AF
13300 19760 MT
(The present study addressed the problem of speaker adaptation in both)
284 W( feature-based and)283 W
10800 21499 MT
(stochastic model-based continuous speech recognition systems.)
535 W( Effective speaker adaptation)536 W
10800 23238 MT
(procedures must be able to adapt to the characteristics of a new speaker given speaker-specific)
50 W( train-)49 W
10800 24977 MT
(ing data in quantities which are well below)
134 W( those required for training speaker-dependent systems.)135 W
10800 26716 MT
(The adaptation algorithm must be computationally efficient)
97 W( to allow for a short enrollment process.)96 W
10800 28455 MT
(Since the basic recognition unit in continuous speech)
126 W( recognition systems is at the sub-word level,)127 W
10800 30194 MT
(user feedback of)
89 W( unit labels is impractical.  The adaptation algorithm should therefore operate in an)88 W
10800 31933 MT
(unsupervised mode.)SH
13300 34918 MT
(The approach taken in)
141 W( this thesis was to use multivariate parameter estimation procedures to)142 W
10800 36657 MT
(update the mean values of the)
147 W( component densities which comprise a feature-based system's clas-)146 W
10800 38396 MT
(sifiers, or a stochastic model-based system's codebook.)
6 W( Emphasis)
289 W( was placed on obtaining low initial)7 W
10800 40135 MT
(estimation error with a computationally efficient)
113 W( algorithm.  Adaptive filtering techniques were ex-)112 W
10800 41874 MT
(ploited to derive an estimator which met these conditions.)
65 W( The)
406 W( Bayesian optimal \050EMAP\051 estimator)66 W
10800 43613 MT
(was first shown to be equivalent to a minimum mean-square error \050MMSE\051 adaptive filter)
37 W( with time-)36 W
10800 45352 MT
(varying data statistics.  A stochastic gradient approximation of the MMSE formulation)
87 W( resulted in a)88 W
10800 47091 MT
(least mean-square estimator, called)
39 W( LMS-C, which with proper initialization produced a faster rate of)38 W
10800 48830 MT
(convergence than the Bayesian)
132 W( estimator.  Computational requirements of the LMS-C estimate are)133 W
10800 50569 MT
(approximately one-third of those)
110 W( of the EMAP estimate.  Unlike the EMAP estimate, however, the)109 W
10800 52308 MT
(LMS-C estimate is asymptotically biased.  This misadjustment is negligible in the context of)
187 W( the)188 W
10800 54047 MT
(speaker adaptation problem.)SH
13300 57032 MT
(Expressions which define the LMS-C algorithm and its mean-square)
240 W( estimation error were)239 W
10800 58771 MT
(derived and analyzed assuming correlated, jointly-gaussian)
83 W( data distributions.  Compared with max-)84 W
10800 60510 MT
(imum likelihood \050ML\051 estimation, the additional expense required)
46 W( for LMS-C \050or EMAP\051 estimation)45 W
10800 62249 MT
(was shown to be)
91 W( justified when the dogmatism of the data is neither very large nor very small, and)92 W
10800 63988 MT
(training data)
178 W( is limited.  Relative gains of LMS-C and EMAP estimates over ML estimates were)177 W
10800 65727 MT
(shown to increase with increasing)
8 W( correlation between the data means and with increasing skew in the)9 W
10800 67466 MT
(class' prior probabilities.)SH
13300 70451 MT
(The general limitations of LMS-C, EMAP,)
53 W( and ML adaptation procedures were assessed in the)52 W
ES
%%Page: 2 3
BS
0 SI
10 /Times-Roman AF
55300 4286 MT
(2)SH
11 SS 
10800 7955 MT
(context of unsupervised speaker adaptation in the Carnegie Mellon)111 W
9 SS 
41521 XM
(ANGEL)SH
11 SS 
44958 XM
(system, a novel feature-)112 W
10800 9694 MT
(based system called)161 W
9 SS 
20294 XM
(PROPHET)SH
11 SS 
(, and a semi-continuous version of the CMU)161 W
9 SS 
45408 XM
(SPHINX)SH
11 SS 
49093 XM
(system. Com-)595 W
10800 11433 MT
(parisons between the)75 W
9 SS 
20524 XM
(ANGEL)SH
11 SS 
23924 XM
(and)SH
9 SS 
25862 XM
(PROPHET)SH
11 SS 
30212 XM
(systems indicated the necessity for the adaptation data to)75 W
10800 13172 MT
(obey the)
27 W( gaussian assumptions made in derivation of the estimation algorithms.  When these assump-)26 W
10800 14911 MT
(tions were met \050using computer-generated data\051, adaptation using the LMS-C)
117 W( or EMAP algorithms)118 W
10800 16650 MT
(reduced front vowel classification error)
91 W( rates by 28% after the presentation of 10 unlabeled training)90 W
10800 18389 MT
(samples. Five)
623 W( iterations)
174 W( through the training data were shown to reduce the error rate by an ad-)175 W
10800 20128 MT
(ditional 10% over the one-iteration rate.)SH
13300 23113 MT
(Unsupervised adaptation experiments with a)
240 W( synthetic HMM indicated that the EMAP and)239 W
10800 24852 MT
(LMS-C estimates were able to produce an estimation error)
17 W( lower than the ML estimate only when the)18 W
10800 26591 MT
(dogmatism of the data was low.  It was shown that)
26 W( the unsupervised ML estimate, as specified by the)25 W
10800 28330 MT
(HMM reestimation procedure,)
49 W( produced an estimation error which was initially much larger than the)50 W
10800 30069 MT
(supervised form of this estimate.  Due to)
60 W( the dependence of the EMAP and LMS-C estimates on the)59 W
10800 31808 MT
(ML, performance of)
216 W( these two algorithms was also reduced.  Repeated iteration of the forward-)217 W
10800 33547 MT
(backward algorithm eventually reduced the)
104 W( unsupervised level of error to that of the supervised es-)103 W
10800 35286 MT
(timate. It)
679 W( was also shown that the unsupervised form of the ML estimate)
202 W( implicitly models the)203 W
10800 37025 MT
(correlation of the data means which serves to reduce estimation error)
26 W( as the data means become more)25 W
10800 38764 MT
(correlated.)SH
13300 41749 MT
(Mean vector adaptation in)84 W
9 SS 
25426 XM
(SPHINX)SH
11 SS 
29036 XM
(was less successful than with the feature-based systems be-)85 W
10800 43488 MT
(cause the)
119 W( dogmatism of the data in)118 W
9 SS 
27176 XM
(SPHINX)SH
11 SS 
30819 XM
(was more than twice that of the feature-based systems.)118 W
10800 45227 MT
(The)SH
9 SS 
12848 XM
(SPHINX)SH
11 SS 
16436 XM
(system's performance using LMS-C, EMAP, and ML codebook mean vector adaptation)63 W
10800 46966 MT
(methods was compared with the system using no adaptation.  Results showed an)
43 W( overall reduction of)42 W
10800 48705 MT
(2.0 to 3.4% in word error rate due to adaptation for a set of 11 speakers from)
84 W( the DARPA resource)85 W
10800 50444 MT
(management task.  Using)
83 W( a distance metric applied to the adapted codebooks, word error rates were)82 W
10800 52183 MT
(reduced on average by 15% for those)
68 W( speakers automatically identified as good candidates for adap-)69 W
10800 53922 MT
(tation.)SH
ES
%%Page: 3 4
BS
0 SI
10 /Times-Roman AF
55300 4286 MT
(3)SH
15 /Times-Bold AF
27091 15405 MT
(Acknowledgements)SH
11 /Times-Roman AF
13300 19760 MT
(I am)
268 W( sincerely grateful to my advisor, Prof. Richard Stern, for his patience and guidance)267 W
10800 21499 MT
(throughout the extended duration of this work.  I also)
191 W( thank Prof. Virginia Stonick, Prof. Vijaya)192 W
10800 23238 MT
(Kumar, and Prof. Raj Reddy for serving as members of my thesis committee.)SH
13300 26223 MT
(I wish to thank the CMU Speech group for providing a stimulating work environment, and in)100 W
10800 27962 MT
(particular Bob Weide and Ron Cole for many lessons about the characteristics)
284 W( of speech, and)285 W
10800 29701 MT
(Xuedong Huang for his help and guidance with the semi-continuous)SH
9 SS 
41104 XM
(SPHINX)SH
11 SS 
44629 XM
(system.)SH
13300 32686 MT
(I thank Bob Wohlford at Ameritech Services)
69 W( for his encouragement and support of portions of)68 W
10800 34425 MT
(this work.)SH
13300 37410 MT
(I am indebted to my parents for the sacrifices they have made for their children.)SH
13300 40395 MT
(Finally, I wish to thank Sharon for providing me with the environment, encouragement and)179 W
10800 42134 MT
(emotional support necessary to produce this document.)SH
ES
%%Page: 4 5
BS
0 SI
10 /Times-Roman AF
55300 4286 MT
(4)SH
15 /Times-Bold AF
30071 15405 MT
(Chapter 1)SH
29215 18058 MT
(Introduction)SH
13 SS 
10800 22529 MT
(1.1. Background)SH
11 /Times-Roman AF
13300 25444 MT
(Speech is)
119 W( the most natural form of communication.  This communication is facilitated by the)118 W
10800 27183 MT
(human capacity to readily adapt to differences in individuals' speech)
96 W( production.  Variability in the)97 W
10800 28922 MT
(structure of the vocal apparatus affect)
102 W( the acoustic realization of speech sounds, while other factors)101 W
10800 30661 MT
(cause the inclusion, deletion,)
223 W( or substitution of "normal" speech sounds.  While speech input to)224 W
10800 32400 MT
(machines would)
98 W( make the most effective use of human communicative abilities, speech recognition)97 W
10800 34139 MT
(systems are not as flexible as humans in adapting to the characteristics of unfamiliar speakers.)
50 W( Even)376 W
10800 35878 MT
(with extensive training, current speaker-independent recognition)
215 W( systems may perform poorly for)214 W
10800 37617 MT
(those speakers whose data are not well-modeled by the)
55 W( system parameters.  Some form of automatic)56 W
10800 39356 MT
(speaker adaptation is required for truly speaker-independent recognition.)SH
13300 42341 MT
(Speaker adaptive recognition implies limits on the amount of available speaker-specific training)23 W
10800 44080 MT
(data and the time allowed for the adaptation process.  To)
193 W( allow a fast enrollment procedure, the)194 W
10800 45819 MT
(adaptation algorithms must be able to operate on a relatively small)
64 W( amount of speaker-specific train-)63 W
10800 47558 MT
(ing data, and they must)
118 W( not incur a large computational load.  The data requirements must be kept)119 W
10800 49297 MT
(well below those for training speaker-dependent)
68 W( systems to justify the use of adaptation.  Given this)67 W
10800 51036 MT
(limited set of observations, the adaptation algorithm should be able to exploit)
26 W( any and all information)27 W
10800 52775 MT
(available in the data quickly, and without sacrificing accuracy for speed.)SH
13300 55760 MT
(A second restriction on)
102 W( the adaptation algorithm is imposed by the continuous speaking style.)101 W
10800 57499 MT
(With continuous speech, user feedback of)
135 W( phonetic or other subword recognition unit labels is un-)136 W
10800 59238 MT
(realistic, if not impossible.  The adaptation algorithm must therefore operate)
226 W( in an unsupervised)225 W
10800 60977 MT
(mode.)SH
13300 63962 MT
(A brief)
124 W( overview of adaptation methods reported in the literature follows.  This review is in-)125 W
10800 65701 MT
(tended to be a representative sample of the techniques applied to speaker)
62 W( adaptation, and not a com-)61 W
10800 67440 MT
(prehensive list or discussion.  Note that adaptation methods are strongly tied to the particular system's)2 W
10800 69179 MT
(architecture, whether it be a template matching,)
50 W( stochastic model-based, feature-based, or neural net-)49 W
10800 70918 MT
(work system.  Differences in the baseline systems,)
41 W( plus differences in the degree of speaker indepen-)42 W
10800 72657 MT
(dence of these systems make it difficult to directly compare performance gains due to adaptation.)SH
ES
%%Page: 5 6
BS
0 SI
10 /Times-Roman AF
55300 4286 MT
(5)SH
12 /Times-Bold AF
10800 8004 MT
(1.1.1. Methods of Speaker Adaptation)SH
11 /Times-Roman AF
13300 10919 MT
(Approaches to speaker adaptation fall into two broad categories, speaker mapping)
65 W( or selection,)64 W
10800 12658 MT
(and parameter)
40 W( modification.  Speaker selection and mapping techniques form a new speaker's recog-)41 W
10800 14397 MT
(nition parameters by combining)
281 W( the parameters of a set of reference speakers, or selecting the)280 W
10800 16136 MT
(parameters of a reference speaker whose parameters are close in some sense to the)
10 W( new speaker's.  As)11 W
10800 17875 MT
(opposed to forming the new speakers' parameters from the reference)
200 W( set, parameter modification)199 W
10800 19614 MT
(approaches use speaker-specific observations to update the reference set.)SH
/Times-Bold SF
10800 22511 MT
(1.1.1.1. Selection and Mapping Techniques)SH
/Times-Roman SF
13300 25066 MT
(The mapping approach attempts to find a)
62 W( transformation between a set of reference parameters)63 W
10800 26805 MT
(and the parameters obtained from a new speaker.  The transformation may be in the form of a)
89 W( con-)88 W
10800 28544 MT
(fusion matrix which)
91 W( maps individual templates onto the reference, or by cluster selection \050multiple-)92 W
10800 30283 MT
(template method\051 where a set of templates is selected)
117 W( based on minimum distance criteria.  Repre-)116 W
10800 32022 MT
(sentative selection and mapping techniques in hidden Markov model, dynamic time-warping, and)189 W
10800 33761 MT
(neural network recognitions are presented in the remainder of this section.)SH
13300 36746 MT
(In the)
63 W( BBN speaker-dependent continuous speech recognition system, Schwartz)62 W
/Times-Italic SF
49353 XM
(et al.)62 W
/Times-Roman SF
(, [1])
SH( used)62 W
10800 38485 MT
(a probabilistic spectral transformation to map parameters of context-dependent HMMs for)
3 W( a prototype)4 W
10800 40224 MT
(speaker to those of a new)
110 W( speaker.  The)109 W
9 SS 
29376 XM
(SPHINX)SH
11 SS 
33010 XM
(system uses a hidden Markov model \050HMM\051 with)109 W
10800 41963 MT
(discrete state output)
11 W( probability densities, where the output symbols are indices of vector quantization)12 W
10800 43702 MT
(\050VQ\051 codebook entries.  With)
21 W( 15 seconds of normalization data, they achieved word recognition rates)20 W
10800 45441 MT
(of 97%, a gain of 17% over the unadapted accuracy.  This method did not)
23 W( perform as well with a less)24 W
10800 47180 MT
(constrained grammar.  Feng,)95 W
/Times-Italic SF
24070 XM
(et al.)95 W
/Times-Roman SF
26640 XM
([2] subsequently improved performance)
95 W( in less constrained tasks)94 W
10800 48919 MT
(through the use of)
96 W( a text-dependent alignment of the reference and new speaker's speech.  Iterative)97 W
10800 50658 MT
(application of this alignment procedure was shown to reduce word error rates even further [3].)SH
13300 53643 MT
(Work by Nishimura)
188 W( and Sugawara)
187 W( [4])
SH( and Furui)
187 W( [5])
SH( has demonstrated the need for separate)187 W
10800 55382 MT
(modeling of male and female speakers.  Similar to the work of Feng,)36 W
/Times-Italic SF
41785 XM
(et al.)36 W
/Times-Roman SF
(, Nishimura and Sugawara)37 W
10800 57121 MT
(applied a spectral mapping procedure to an isolated word recognition)
39 W( task using a discrete HMM.  In)38 W
10800 58860 MT
(cross-speaker adaptation of their speaker-dependent system, they noted that females used only 70%)
3 W( of)4 W
10800 60599 MT
(the VQ codebook entries from male reference)
122 W( speakers.  parameters for male and female speakers.)121 W
10800 62338 MT
(Furui [5])
SH( also performed codebook mapping in a discrete HMM, using separate)
52 W( codebooks for males)53 W
10800 64077 MT
(and females.  In a 150-word isolated city name recognition task, codebook adaptation)
86 W( reduced error)85 W
10800 65816 MT
(rates from 4.9% to 2.9% after presentation of 10 speaker-specific training tokens.)SH
13300 68801 MT
(Lee [6, 7])
SH( investigated speaker adaptation in the)424 W
9 SS 
37255 XM
(SPHINX)SH
11 SS 
41205 XM
(recognition system, which has)425 W
10800 70540 MT
(demonstrated a speaker-independent word accuracy of better than 94% on a 1000-word task)
108 W( with a)107 W
ES
%%Page: 6 7
BS
0 SI
10 /Times-Roman AF
55300 4286 MT
(6)SH
9 SS 
17826 7817 MT
(1)SH
11 SS 
10800 8180 MT
(perplexity of 60)SH
18276 XM
(. Adaptation)
276 W( was attempted using codebook and model selection as well as reestima-)1 W
10800 9919 MT
(tion of model parameters.)
139 W( Due)
552 W( to the speaker-independent nature of the system parameters, adap-)138 W
10800 11658 MT
(tation via the selection method showed no improvement.  The reestimation method)
26 W( provided a 5-10%)27 W
10800 13397 MT
(reduction in word error rate for the no-grammar case; with a grammar the improvement was smaller.)SH
13300 16382 MT
(Adaptation by template selection is most appropriate for recognition)
39 W( systems based on template)38 W
10800 18121 MT
(matching algorithms.  Template matching algorithms)
178 W( seek to find the correspondence between an)179 W
10800 19860 MT
(input utterance and a set of)
24 W( reference templates.  Comparisons between spectra are made via dynamic)23 W
10800 21599 MT
(time-warping \050DTW\051 on a frame by frame basis.)
169 W( Adaptation)
614 W( may be achieved by using multiple)170 W
10800 23338 MT
(reference templates for each word)
41 W( [8].)
SH( Rabiner,)356 W
/Times-Italic SF
32459 XM
(et al.)40 W
/Times-Roman SF
34974 XM
([9] applied clustering techniques on a database)40 W
10800 25077 MT
(of consisting of instances of isolated words from many speakers.  The multiple clusters)
4 W( per word were)5 W
10800 26816 MT
(assumed to represent the acoustic variability between speakers.  Kijima,)29 W
/Times-Italic SF
43040 XM
(et al.)29 W
/Times-Roman SF
45544 XM
([10] used)
29 W( a recognition)28 W
10800 28555 MT
(rate criterion to select a set of)
63 W( speakers with characteristics similar to the new speaker.  The adapted)64 W
10800 30294 MT
(reference templates were formed by an average the templates of the selected)
12 W( reference speakers, or by)11 W
10800 32033 MT
(the union of their templates.  Use of averaged templates was shown)
38 W( to produce lower error rates than)39 W
10800 33772 MT
(using multiple templates per word.)SH
13300 36757 MT
(Other adaptation methods for template-based systems involve codebook mapping or spectral)175 W
10800 38496 MT
(transformation. In)
480 W( an LPC vector-quantization-based isolated word recognition system, Shikano,)103 W
/Times-Italic SF
55006 XM
(et)SH
10800 40235 MT
(al.)SH
/Times-Roman SF
12206 XM
([11] performed adaptation by substitution of)
91 W( a reference speaker's codebook vectors for the vec-)90 W
10800 41974 MT
(tors in the input)
340 W( speaker's codebook.  Various substitution and learning algorithms were im-)341 W
10800 43713 MT
(plemented; the best combination raised the recognition rate from 64% to 83%.)
145 W( Higuchi)
564 W( and Yato)144 W
11075 45452 MT
([12] performed adaptation by estimating frequency-axis)
270 W( scale factors which transformed a new)271 W
10800 47191 MT
(speakers' vowel spectra onto the reference speaker's)
204 W( templates.  As expected, gains were largest)203 W
10800 48930 MT
(when the scale factors were much larger or smaller than 1.0.)SH
13300 51915 MT
(Mapping techniques have also been applied to neural network phonetic)
72 W( classifiers.  Hampshire)73 W
10800 53654 MT
(and Waibel)
82 W( [13])
SH( demonstrated a time-delay neural)
82 W( network \050TDNN\051 stop consonant classifier which)81 W
10800 55393 MT
(learned to form weighted combinations)
28 W( of six reference classifier outputs to obtain recognition scores)29 W
10800 57132 MT
(for new speakers.  The adaptive recognition rate was significantly)
170 W( improved over that of a single)169 W
10800 58871 MT
(TDNN trained on the speech from the six reference speakers.)SH
10800 50 10800 70172 UL
7 SS 
11700 71673 MT
(1)SH
9 SS 
12050 72000 MT
(Perplexity can be thought of as the average branching factor of the grammar.)SH
ES
%%Page: 7 8
BS
0 SI
10 /Times-Roman AF
55300 4286 MT
(7)SH
11 /Times-Bold AF
10800 7937 MT
(1.1.1.2. Parameter Modification Techniques)SH
/Times-Roman SF
13300 10492 MT
(The techniques described above are)
33 W( used to select or build parameters for a new speaker from a)34 W
10800 12231 MT
(set of reference parameters.  Parameter modification approaches to speaker adaptation, on the)
100 W( other)99 W
10800 13970 MT
(hand, update the current system parameters based on the observations.  Interpolation between)324 W
10800 15709 MT
(speaker-independent and speaker-specific parameters is a common theme)
443 W( amongst parameter)442 W
10800 17448 MT
(modification approaches.  Interpolation provides a certain degree of robustness to the new parameters)22 W
10800 19187 MT
(by reducing)
45 W( the effects of insufficient training data.  Adaptation by parameter modification in hidden)44 W
10800 20926 MT
(Markov model and feature-based recognition systems is reviewed in the following.)SH
13300 23911 MT
(Parameters in hidden Markov model-based systems represent)
28 W( statistically both the temporal and)29 W
10800 25650 MT
(spectral variations between speakers.  Hon and Huang)
95 W( [14])
SH( have shown that)
95 W( HMM word error rates)94 W
10800 27389 MT
(are insensitive to changes in transition \050temporal\051 probabilities.)
74 W( Adaptation)
425 W( of the spectral or obser-)75 W
10800 29128 MT
(vation parameters, however, has been shown to provide a significant reduction in word error)
123 W( rates.)122 W
10800 30867 MT
(For discrete HMMs, the observation densities are represented by the locations of)
9 W( the codebook entries)10 W
10800 32606 MT
(and the)
148 W( state-dependent probabilities assigned to them.  In continuous-density HMMs \050CDHMMs\051)147 W
10800 34345 MT
(using a gaussian model, the observation densities are represented)
120 W( by state-dependent mean vectors,)121 W
10800 36084 MT
(covariance matrices, and mixture coefficients.  Results reported in the literature)
202 W( demonstrate that)201 W
10800 37823 MT
(adaptation of the densities')
217 W( covariance matrices has little effect on recognition accuracy)
218 W( [15, 16].)SH
10800 39562 MT
(Parameter adaptation in HMMs has therefore focused)
208 W( mainly on adaptation of mean vectors and)207 W
10800 41301 MT
(mixture coefficients [15, 17, 16, 18].)SH
13300 44286 MT
(HMM parameter modification typically involves)
17 W( incremental training followed by interpolation.)18 W
10800 46025 MT
(Incremental training continues the)
201 W( reestimation process to locally adjust system parameters given)200 W
10800 47764 MT
(speaker-specific observations.  Interpolation)
55 W( methods may be based on Bayesian techniques)
56 W( [16, 17],)SH
10800 49503 MT
(or additional iterations of the forward-backward algorithm, as)
612 W( is the case with deleted)611 W
10800 51242 MT
(interpolation [6].)
SH( For)
839 W( example, C-H)
282 W( Lee)
283 W( [16])
SH( used a Bayesian procedure to update means and)283 W
10800 52981 MT
(covariance matrices in a CDHMM.  This isolated-word system used 5-state word)
175 W( models with as)174 W
10800 54720 MT
(many as 9 mixture components per state for a 39 word task.  Diagonal covariance matrices were used)24 W
10800 56459 MT
(to reduce the number of)
49 W( parameters to be estimated.  For telephone bandwidth speech, a reduction in)48 W
10800 58198 MT
(error rate of approximately 1/3 was obtained after)
50 W( one observation \050a single word\051, and the error rate)51 W
10800 59937 MT
(after 7 tokens approached speaker dependent performance.)SH
13300 62922 MT
(In a 35-word, isolated-utterance recognition task, Martin)167 W
/Times-Italic SF
39668 XM
(et al.)167 W
/Times-Roman SF
42310 XM
([19] adapted means and tran-)166 W
10800 64661 MT
(sition probabilities in a cross-speaker, supervised)
122 W( adaptation task.  In separate experiments, models)123 W
10800 66400 MT
(were adapted after correct recognition of an)
69 W( utterance or after any utterance.  Since adaptation using)68 W
10800 68139 MT
(only correctly-recognized utterances did)
97 W( not allow large modifications to the reference models, per-)98 W
10800 69878 MT
(formance improvements in this case were limited.  When adapting after all input tokens,)
139 W( the large)138 W
10800 71617 MT
(model changes \050necessary in cross-speaker adaptation\051 allowed performance to)
188 W( approach speaker-)189 W
10800 73356 MT
(dependent levels after observation of 1-2 tokens.)SH
ES
%%Page: 8 9
BS
0 SI
10 /Times-Roman AF
55300 4286 MT
(8)SH
11 SS 
13300 7955 MT
(Rtischev [17])
SH( and Huang)
109 W( [20])
SH( have investigated)
109 W( an alternate HMM architecture which bridges)108 W
10800 9694 MT
(the gap between discrete and continuous HMMs.  In this semi-continuous HMM \050SCHMM\051,)
50 W( the VQ)51 W
10800 11433 MT
(codebook entries become the mean vectors)
327 W( of mixture density components, and an associated)326 W
10800 13172 MT
(covariance matrix is computed.  In each)
32 W( state of the SCHMM, the continuous output density function)33 W
10800 14911 MT
(is modeled as a mixture density where the)
43 W( continuous codebook's component densities are combined)42 W
10800 16650 MT
(using the discrete HMM's output pdf as the mixture coefficients.  The)
SH( semi-continuous HMM reduces)1 W
10800 18389 MT
(the number of parameters to be estimated with respect to the full CDHMM, but allows more)
31 W( accurate)30 W
10800 20128 MT
(modeling of the states' output pdfs than the discrete HMM.)SH
13300 23113 MT
(In adaptation experiments with a semi-continuous HMM, Rtischev)
297 W( [17])
SH( used)
297 W( the forward-)298 W
10800 24852 MT
(backward algorithm to modify the prior)
256 W( codebook parameters after obtaining new speaker data.)255 W
10800 26591 MT
(Using the SCHMM for adaptive training and the 5000 word,)
68 W( speaker-dependent CDHMM IBM sys-)69 W
10800 28330 MT
(tem for decoding, Rtischev)
72 W( achieved appreciable reductions in error rate \050)71 W
/Symbol SF
(\273)SH
/Times-Roman SF
44866 XM
(50%\051 when adapting the)71 W
10800 30069 MT
(reference speaker's models to the new speaker.  Rtischev also investigated Bayesian)
144 W( adaptation of)145 W
10800 31808 MT
(codebook parameters and obtained results \050)164 W
/Symbol SF
(\273)SH
/Times-Roman SF
31752 XM
(40% reduction in error rate\051 almost as good as)
164 W( with)163 W
10800 33547 MT
(re-estimation. He also observed that continuous)
68 W( adaptation produced about the same results as adap-)69 W
10800 35286 MT
(tation after observation of all training data.)SH
13300 38271 MT
(Huang,)SH
/Times-Italic SF
16967 XM
(et al.)185 W
/Times-Roman SF
19627 XM
([18] have)
185 W( investigated adaptation of codebook mean vectors and state mixture)184 W
10800 40010 MT
(coefficients in a semi-continuous HMM version of the)
106 W( speaker-independent)107 W
9 SS 
45325 XM
(SPHINX)SH
11 SS 
48957 XM
(system. Adap-)489 W
10800 41749 MT
(tation was performed by using the)
157 W( forward-backward algorithm to update the speaker-independent)156 W
10800 43488 MT
(parameters given the speaker-specific observations.)
3 W( Speaker-adaptive)
283 W( word error rates on the order of)4 W
10800 45227 MT
(3% have)
223 W( been obtained after observation of 40 adaptation training sentences, for a test set of 4)222 W
10800 46966 MT
(speakers. This)
362 W( represented a reduction in word error rate of 25% over the baseline system.  Separate)44 W
10800 48705 MT
(speaker-independent parameters for male and female speakers were used in)
32 W( the baseline system.  Use)31 W
10800 50444 MT
(of these gender-specific models was claimed)
41 W( to reduce the baseline system error rates by 30% before)42 W
10800 52183 MT
(adaptation [21].)SH
13300 55168 MT
(Brown)SH
/Times-Italic SF
16728 XM
(et al.)159 W
/Times-Roman SF
(, [22])
SH( used Bayesian)
159 W( estimation procedures to adapt HMM parameters in a con-)158 W
10800 56907 MT
(tinuous digit recognition system.  Compared with)
81 W( maximum likelihood updating in tests on variable)82 W
10800 58646 MT
(length digit strings, the Bayesian update reduced the error rate)
17 W( by 18% for isolated-digit training data,)16 W
10800 60385 MT
(but raised it by 0.3% for digit-triplet training data.  No)
17 W( reasons for this counterintuitive behavior were)18 W
10800 62124 MT
(determined. Brown)561 W
/Times-Italic SF
20271 XM
(et al.)143 W
/Times-Roman SF
23032 XM
(also reported)
143 W( that performance was better for initialization with speaker)142 W
10800 63863 MT
(independent parameters than with parameters derived)
145 W( from a short speaker-dependent training ses-)146 W
10800 65602 MT
(sion.)SH
13300 68587 MT
(In a feature-based)
59 W( English letter recognition system called)58 W
9 SS 
39606 XM
(FEATURE)SH
11 SS 
(, Stern and Lasry)
58 W( [23])
SH( used)58 W
10800 70326 MT
(Bayesian techniques to update classifier parameters.  The features were assumed to)
149 W( be samples of)150 W
ES
%%Page: 9 10
BS
0 SI
10 /Times-Roman AF
55300 4286 MT
(9)SH
11 SS 
10800 7955 MT
(jointly Gaussian random variables, and Gaussian)
46 W( classifiers in a decision-tree structure were used for)45 W
10800 9694 MT
(classification. Extended)
505 W( MAP \050EMAP\051 estimates)
115 W( [24])
SH( of classifier mean vectors were)
115 W( computed at)116 W
10800 11433 MT
(each node visited during classification of an)
75 W( utterance.  The term extended refers to the fact that the)74 W
10800 13172 MT
(EMAP algorithm exploits)
122 W( the covariance between classes to update all classes at a node after each)123 W
10800 14911 MT
(observation. This)
285 W( reduced)
5 W( the error rate by 49% after a supervised training session, and by 31% when)4 W
10800 16650 MT
(used in an unsupervised mode.)SH
13 /Times-Bold AF
10800 20401 MT
(1.2. Research Objectives)SH
11 /Times-Roman AF
13300 23316 MT
(The present)
199 W( work adopted the parameter modification approach to speaker adaptation.  The)200 W
10800 25055 MT
(objective of this effort was to develop an accurate and efficient approximation)
119 W( of the EMAP mean)118 W
10800 26794 MT
(vector estimation algorithm, and to determine its effectiveness)
35 W( in reducing error rates in both feature-)36 W
10800 28533 MT
(based and stochastic model-based continuous speech recognition systems.)SH
13300 31518 MT
(Prior work with)
47 W( the)46 W
9 SS 
22346 XM
(FEATURE)SH
11 SS 
26717 XM
(system [23])
SH( and continuous-density hidden Markov model recog-)46 W
10800 33257 MT
(nition systems)
269 W( [16], [18], [15], [17])
SH( demonstrated that)
269 W( a large portion of the differences between)270 W
10800 34996 MT
(speakers may be modeled by a shift in the system mean values.)
55 W( Mean)
383 W( vectors are also less sensitive)54 W
10800 36735 MT
(than other parameters \050such as covariance matrices\051 to the effects of)
90 W( training on limited numbers of)91 W
10800 38474 MT
(speaker-specific training data)
9 W( [15].)
SH( The)
293 W( work with)9 W
9 SS 
33494 XM
(FEATURE)SH
11 SS 
37828 XM
(also demonstrated)
9 W( that the EMAP proce-)8 W
10800 40213 MT
(dure possessed a number of desirable properties such as fast convergence.  The cost)
296 W( of these)297 W
10800 41952 MT
(properties was greater storage)
164 W( requirements and computational complexity.  To satisfy the limited)163 W
10800 43691 MT
(computation time)
30 W( and data constraints of speaker adaptive recognition, a faster implementation of the)31 W
10800 45430 MT
(EMAP procedure was necessary.)SH
13300 48415 MT
(Motivated by a desire to better understand the relationships between parameter estimation and)90 W
10800 50154 MT
(adaptive filtering techniques, the specific goal of the)
10 W( present work was to recast the EMAP estimation)11 W
10800 51893 MT
(procedure as an adaptive filtering problem to obtain)
75 W( a more efficient implementation.  From estima-)74 W
10800 53632 MT
(tion theory it is well-known)
141 W( that MAP and minimum mean square error \050MMSE\051 estimation tech-)142 W
10800 55371 MT
(niques are equivalent for normally-distributed data)
1 W( [25].  In adaptive filter theory, the computationally)SH
10800 57110 MT
(efficient least mean square \050LMS\051 transversal filter is derived as an approximation of)
151 W( MMSE for-)152 W
10800 58849 MT
(mulations. Expressing)
427 W( the Bayesian estimate)
76 W( as an MMSE adaptive filter led to the development of)75 W
10800 60588 MT
(an estimation method \050called LMS-C\051)
109 W( which was more computationally efficient than the Bayesian)110 W
10800 62327 MT
(optimal estimate and yet retained the desirable properties of the latter.)SH
13300 65312 MT
(Initial work toward)
107 W( the goals of the present study involved extending the)106 W
9 SS 
46834 XM
(FEATURE)SH
11 SS 
51265 XM
(results for)106 W
10800 67051 MT
(isolated word recognition to the continuous speech case, in the context of)
153 W( the feature-based CMU)154 W
9 SS 
10800 68790 MT
(ANGEL)SH
11 SS 
14192 XM
(system. Continuous)
409 W( speech is subject to a host of coarticulation and end-of-utterance effects)66 W
10800 70529 MT
(not present in isolated speech.  The number of words in an utterance and the temporal locations of)110 W
ES
%%Page: 10 11
BS
0 SI
10 /Times-Roman AF
54800 4286 MT
(10)SH
11 SS 
10800 7955 MT
(word boundaries, if any, are also unknown.  The)64 W
9 SS 
32940 XM
(ANGEL)SH
11 SS 
36329 XM
(system therefore used)
64 W( the phoneme, not the)63 W
10800 9694 MT
(word, as the basic recognition unit, and a lexicon which described how words are composed from)139 W
10800 11433 MT
(these units.)
248 W( The)
769 W( features used for phonetic classification in)247 W
9 SS 
39632 XM
(ANGEL)SH
11 SS 
43204 XM
(were similar to those from)247 W
9 SS 
10800 13172 MT
(FEATURE)SH
11 SS 
(, but they tended to exhibit much greater variability due)
160 W( to the effects which are charac-)161 W
10800 14911 MT
(teristic of)
24 W( connected speech.  The effectiveness of mean vector adaptation was investigated in light of)23 W
10800 16650 MT
(these differences.  When the)117 W
9 SS 
24149 XM
(ANGEL)SH
11 SS 
27591 XM
(system was retired in 1989, the focus of the feature-based ap-)118 W
10800 18389 MT
(plications shifted to applying LMS-C)
85 W( adaptation techniques in the context of alternate feature-based)84 W
10800 20128 MT
(phonetic classifiers developed by the author.)SH
13300 23113 MT
(The LMS-C algorithm was conceived in the context)
12 W( of feature-based recognition systems, and it)13 W
10800 24852 MT
(is most easily described and understood in the context of)
50 W( such classification problems.  With a slight)49 W
10800 26591 MT
(change of perspective it is clear that)
200 W( the LMS-C algorithm may also be applied to adaptation in)201 W
10800 28330 MT
(continuous-density hidden Markov model-based systems.  In the HMM)
64 W( context, the component den-)63 W
10800 30069 MT
(sities of gaussian mixtures replace the)
132 W( decision classes of the gaussian classifier.  Since the HMM)133 W
10800 31808 MT
(reestimation procedure)
76 W( computes maximum likelihood estimates of the HMM parameters, EMAP or)75 W
10800 33547 MT
(LMS-C techniques)
89 W( can be used to interpolate these ML parameters with the speaker-independent or)90 W
10800 35286 MT
(reference parameters.)SH
13300 38271 MT
(The semi-continuous HMM reduces)
105 W( the number of parameters to be estimated with respect to)104 W
10800 40010 MT
(the full continuous-density HMM.  Because mixture components)
183 W( are shared among all states, the)184 W
10800 41749 MT
(SCHMM can)
141 W( makes more effective use of training data.  Previous research in SCHMM codebook)140 W
10800 43488 MT
(adaptation used incremental training)
164 W( with maximum likelihood techniques, or Bayesian estimation)165 W
10800 45227 MT
(with diagonal covariance matrices which ignore correlation information.)
148 W( Using)
569 W( a semi-continuous)147 W
10800 46966 MT
(version of)87 W
9 SS 
15678 XM
(SPHINX)SH
11 SS 
19290 XM
(as the baseline system, the present work investigates the use)
87 W( of correlation infor-)88 W
10800 48705 MT
(mation and the LMS-C algorithm in the reestimation of codebook mean vectors.)SH
13 /Times-Bold AF
10800 52456 MT
(1.3. Dissertation Outline)SH
11 /Times-Roman AF
13300 55371 MT
(In Chapter 2, a fast multivariate parameter estimation procedure, in the form of an adaptive)169 W
10800 57110 MT
(filter, is derived.  The result is a least)
5 W( mean square algorithm, referred to as LMS-C, which produces a)6 W
10800 58849 MT
(faster rate of convergence than the Bayesian MAP estimator at)
55 W( the expense of a finite bias or misad-)54 W
10800 60588 MT
(justment. Expressions)
297 W( that specify the LMS-C adaptive estimate, as well as analytical expressions for)11 W
10800 62327 MT
(the expected mean-square error and misadjustment are derived.  LMS-C)
210 W( parameter values which)209 W
10800 64066 MT
(allow this estimate to incorporate)61 W
/Times-Italic SF
26044 XM
(a priori)61 W
/Times-Roman SF
29834 XM
(statistics of the data are also specified.  The ability of)
61 W( this)62 W
10800 65805 MT
(adaptive filter implementation)
146 W( to estimate the mean values of normally distributed random vectors)145 W
10800 67544 MT
(which are drawn from one of several possibly correlated classes is then evaluated.  LMS-C learning)76 W
10800 69283 MT
(curves are)
143 W( compared to the learning curves specified by analytical expressions of the mean-square)142 W
10800 71022 MT
(error of both the EMAP and maximum likelihood \050ML\051 estimators.  The performance)
153 W( of each es-)154 W
ES
%%Page: 11 12
BS
0 SI
10 /Times-Roman AF
54800 4286 MT
(11)SH
11 SS 
10800 7955 MT
(timator is then demonstrated empirically using synthetic,)
25 W( normally distributed data exhibiting varying)24 W
10800 9694 MT
(degrees of correlation and dogmatism.  The computational)
120 W( requirements of each algorithm are also)121 W
10800 11433 MT
(discussed.)SH
13300 14418 MT
(The analysis in Chapter 2 assumes data are labeled,)164 W
/Times-Italic SF
37684 XM
(i.e.)SH
/Times-Roman SF
39905 XM
(supervised adaptation.  The results)163 W
10800 16157 MT
(demonstrate that the LMS-C estimation algorithm can improve estimation)
155 W( accuracy with the same)156 W
10800 17896 MT
(number or fewer)
199 W( observations than previous methods.  Chapters 3 and 4 describe the effects the)198 W
10800 19635 MT
(LMS-C estimation procedure has on the accuracy of both feature-based and)
100 W( stochastic model-based)101 W
10800 21374 MT
(systems when)
158 W( operated in an unsupervised mode.  Enabling these systems to quickly estimate the)157 W
10800 23113 MT
(parameters that describe the acoustical characteristics of)
184 W( individual speakers should increase clas-)185 W
10800 24852 MT
(sification accuracy.)SH
13300 27837 MT
(Chapter 3 describes adaptation at the phonetic classification level)
118 W( in feature-based continuous)117 W
10800 29576 MT
(recognition systems.  The chapter begins by briefly reviewing)
59 W( spectrogram reading and the Carnegie)60 W
10800 31315 MT
(Mellon)SH
9 SS 
14323 XM
(FEATURE)SH
11 SS 
18718 XM
(and)SH
9 SS 
20651 XM
(ANGEL)SH
11 SS 
24045 XM
(recognition systems.  The)69 W
9 SS 
35900 XM
(ANGEL)SH
11 SS 
39294 XM
(system attempted to extend the work)69 W
10800 33054 MT
(of the isolated-word)172 W
9 SS 
20449 XM
(FEATURE)SH
11 SS 
24946 XM
(system to the continuous speech case.  Chapter 3 continues)
172 W( with a)173 W
10800 34793 MT
(description of our adaptation methodology in the context)
198 W( of feature-based phonetic classification.)197 W
10800 36532 MT
(This is followed by a brief empirical)
143 W( study on the effect of adaptation on classification rate under)144 W
10800 38271 MT
(various data conditions using a synthetic model from Chapter 2.)
57 W( Results)
387 W( from supervised adaptation)56 W
10800 40010 MT
(of front vowel features)
57 W( in the)58 W
9 SS 
24217 XM
(ANGEL)SH
11 SS 
27600 XM
(system are presented, along with a description of limitations of)58 W
10800 41749 MT
(the)SH
9 SS 
12427 XM
(ANGEL)SH
11 SS 
15760 XM
(classification procedure.  To address these limitations and demonstrate the effectiveness of)8 W
10800 43488 MT
(LMS-C adaptation, an alternate classification structure, called)74 W
9 SS 
38840 XM
(PROPHET)SH
11 SS 
(, is proposed.)75 W
9 SS 
49556 XM
(PROPHET)SH
11 SS 
53906 XM
(uses)SH
10800 45227 MT
(simple rules derived from spectrogram reading combined)
84 W( with statistical classification techniques to)83 W
10800 46966 MT
(make classification decisions.  Unsupervised adaptation within)142 W
9 SS 
39716 XM
(PROPHET)SH
11 SS 
(, using real and)
142 W( computer-)143 W
10800 48705 MT
(generated data, is described.)SH
13300 51690 MT
(Chapter 4)
81 W( extends the application of the LMS-C algorithm to adaptation of continuous density)80 W
10800 53429 MT
(hidden Markov models.  Described are adaptation experiments with a)
40 W( semi-continuous version of the)41 W
10800 55168 MT
(CMU)SH
9 SS 
13648 XM
(SPHINX)SH
11 SS 
17240 XM
(system, called)67 W
9 SS 
23881 XM
(SPHINX-SC)SH
11 SS 
(. These)
409 W( experiments determine)
67 W( the extent to which the word)66 W
10800 56907 MT
(error rate can be reduced by applying mean vector estimation techniques to)
37 W( adaptation of the mixture)38 W
10800 58646 MT
(components in the semi-continuous codebook.  Evaluations are based)
3 W( on the change in word error rate)2 W
10800 60385 MT
(between the adapted and unadapted systems.  The change in)
293 W( error rate varies widely between)294 W
10800 62124 MT
(speakers. Methods)
461 W( are)
93 W( described which may be used to select the adapted codebooks of only those)92 W
10800 63863 MT
(speakers expected to benefit from adaptation.)
290 W( Finally,)
856 W( to obtain a better understanding of the)291 W
9 SS 
10800 65602 MT
(SPHINX-SC)SH
11 SS 
15739 XM
(results, experiments with a synthetic hidden Markov)
14 W( model using computer-generated data)13 W
10800 67341 MT
(are described.)SH
13300 70326 MT
(Chapter 5 summarizes the results of this dissertation, and its conclusions.  Suggestions for)221 W
10800 72065 MT
(future research are also presented.)SH
ES
%%Page: 12 13
BS
0 SI
10 /Times-Roman AF
54800 4286 MT
(12)SH
15 /Times-Bold AF
30071 15405 MT
(Chapter 2)SH
14652 18058 MT
(Fast Estimation of Mean Vectors Using Adaptive Filtering)SH
13 SS 
10800 22529 MT
(2.1. Overview)SH
11 /Times-Roman AF
13300 25444 MT
(Estimation of mean vectors is an essential)
104 W( procedure in the training of both feature-based and)103 W
10800 27183 MT
(stochastic model-based speech recognition systems.  In both types, knowledge of the data's)400 W
10800 28922 MT
(probabilistic structure is typically incomplete.  In order)
143 W( to model this structure, the data is usually)142 W
10800 30661 MT
(assumed to obey a particular set of parametric density functions based on general)
90 W( knowledge of the)91 W
10800 32400 MT
(problem. Feature-based)
329 W( systems may use Gaussian or other)
27 W( parametric classifiers to analyze acoustic)26 W
10800 34139 MT
(cues or)
148 W( feature vectors, while recognizers incorporating hidden Markov models often make use of)149 W
10800 35878 MT
(continuous normal mixture densities to model the)
7 W( states' output probability distributions.  Given these)6 W
10800 37617 MT
(assumptions, the problem of accurately modeling the data reduces to one of reliably estimating)
118 W( the)119 W
10800 39356 MT
(parameters of the assumed densities.)SH
13300 42341 MT
(Current mean vector estimation algorithms trade accuracy or convergence rate for computa-)185 W
10800 44080 MT
(tional efficiency.  While the maximum likelihood \050ML\051 estimate of a multivariate mean vector is)
51 W( the)52 W
10800 45819 MT
(most computationally)
57 W( efficient, it ignores information which may be available through knowledge of)56 W
10800 47558 MT
(the correlation between decision classes.)
18 W( The)
313 W( extended MAP \050EMAP\051 algorithm)
19 W( [24])
SH( increases adap-)19 W
10800 49297 MT
(tation speed by using this information to)
102 W( update the means for all classes after an observation from)101 W
10800 51036 MT
(any class.)
157 W( Unfortunately,)
591 W( the EMAP algorithm is computationally expensive, especially when the)158 W
10800 52775 MT
(product of the)
71 W( number of classes and dimensions is large.  Given the constraints of limited time and)70 W
10800 54514 MT
(limited training imposed by the speaker)
16 W( adaptation problem, a more computationally efficient form of)17 W
10800 56253 MT
(the EMAP procedure is desired.)SH
13300 59238 MT
(The learning and tracking abilities of adaptive filtering techniques make them attractive for)197 W
10800 60977 MT
(estimation problems.)
35 W( The)
347 W( least mean-square \050LMS\051 algorithm)
36 W( [26],)
SH( which is a stochastic approxima-)36 W
10800 62716 MT
(tion of the minimum)
158 W( mean-square error \050MMSE\051 algorithm, is the simplest and most widely-used)157 W
10800 64455 MT
(algorithm for)
217 W( adjusting the weights in an adaptive system.  Its simplicity and computational ad-)218 W
10800 66194 MT
(vantages make the LMS algorithm the first to be)
31 W( examined in these types of problems.  Since MMSE)30 W
10800 67933 MT
(and MAP)
3 W( estimates are equivalent for normally distributed data, the MAP algorithm can be cast into a)4 W
10800 69672 MT
(form amenable to approximation by)
86 W( LMS techniques by deriving an MMSE estimate for mean vec-)85 W
10800 71411 MT
(tors. By)
285 W( judicious initialization of LMS parameters, it is possible to incorporate)5 W
/Times-Italic SF
46338 XM
(a priori)5 W
/Times-Roman SF
50017 XM
(statistics into)6 W
10800 73150 MT
(this algorithm, reducing the initial estimation error.)SH
ES
%%Page: 13 14
BS
0 SI
10 /Times-Roman AF
54800 4286 MT
(13)SH
11 SS 
13300 7955 MT
(In this chapter, a fast multivariate parameter estimation procedure in the form of an)
132 W( adaptive)131 W
10800 9694 MT
(filter is derived.  As a basis for)
111 W( comparison, expressions of the ML and EMAP estimates and their)112 W
10800 11433 MT
(mean-square error \050MSE\051 are derived)
109 W( in Secs. 2.4 and 2.5.  .  The EMAP algorithm is recast as an)108 W
10800 13172 MT
(MMSE adaptive filter)
81 W( by deriving the MMSE mean estimate and proving that it is equivalent to the)82 W
10800 14911 MT
(EMAP expression in Sec. 2.6.  This MMSE implementation is then)
51 W( approximated by an LMS proce-)50 W
10800 16650 MT
(dure in)
21 W( Sec. 2.7.  Expressions for the LMS MSE are derived, and methods for selection of parameters)22 W
10800 18389 MT
(required by the LMS procedure are also discussed)
184 W( in this section.  In Sec. 2.8 the ability of this)183 W
10800 20128 MT
(adaptive filter implementation to estimate the mean values of normally distributed)
145 W( random vectors)146 W
10800 21867 MT
(which are drawn from one of several possibly correlated classes is evaluated.  Its performance is)174 W
10800 23606 MT
(compared with the ML and optimal estimates, using computer-generated normally-distributed)
159 W( data)160 W
10800 25345 MT
(exhibiting varying degrees)
34 W( of correlation and dogmatism.  Finally, the computational requirements of)33 W
10800 27084 MT
(each algorithm are compared in Sec. 2.9.)SH
13300 30069 MT
(Derivation and analysis of the)
138 W( adaptive estimator are preceded by a review of basic adaptive)139 W
10800 31808 MT
(filtering principles.  Readers familiar with these concepts may wish to skip to Sec. 2.3.)SH
13 /Times-Bold AF
10800 35559 MT
(2.2. Review of Adaptive Filtering Principles)SH
11 /Times-Roman AF
13300 38474 MT
(An adaptive filter can be specified by a)
135 W( filter structure and an adaptation algorithm.  For the)134 W
10800 40213 MT
(purposes of the present study, the filter structure will be limited to the class)
84 W( of discrete-time, linear,)85 W
10800 41952 MT
(shift-invariant systems.  Such a structure)
97 W( typically has a finite number of internal parameters which)96 W
10800 43691 MT
(can be modified to control the transfer function)
35 W( of the system.  In Figure 2-1, which depicts a type of)36 W
10800 45430 MT
(adaptive filter known as a joint process estimator,)
202 W( the internal parameters are represented by the)201 W
10800 47169 MT
(matrix)SH
/Times-Bold SF
14016 XM
(H)SH
/Times-Roman SF
(. The)
413 W( adaptation algorithm allows the filter to track some measure of the external)
69 W( environ-)70 W
10800 48908 MT
(ment, which in this example is the signal)102 W
/Times-Bold SF
29857 XM
(a)SH
/Times-Roman SF
30762 XM
(. In)
479 W( a joint process estimator, the coefficients in)102 W
/Times-Bold SF
53226 XM
(H)SH
/Times-Roman SF
54458 XM
(are)SH
8 /Times-Italic AF
30407 49253 MT
(k)SH
/Symbol SF
47903 50068 MT
(\331)SH
11 /Times-Roman AF
10800 50758 MT
(adjusted so as to minimize the difference between the output of the linear system,)69 W
/Symbol SF
47903 XM
(m)SH
/Times-Roman SF
48385 XM
(, and the desired)69 W
10800 52497 MT
(output)SH
/Times-Bold SF
13930 XM
(d)SH
/Times-Roman SF
14897 XM
(. In)
361 W( other words, the filter is adjusted to)
43 W( generate an estimate of)42 W
/Times-Bold SF
43840 XM
(d)SH
/Times-Roman SF
45124 XM
(based on the samples of)42 W
8 /Times-Italic AF
14542 52842 MT
(k)SH
44452 XM
(k)SH
11 /Times-Bold AF
10800 54236 MT
(a)SH
/Times-Roman SF
11705 XM
(.)SH
8 /Times-Italic AF
11350 54581 MT
(k)SH
11 /Times-Roman AF
13300 57221 MT
(Consider a 1-dimensional example of a joint process estimator.  In this case, the error signal)135 W
8 /Symbol AF
23855 58270 MT
(\331)SH
27675 XM
(\331)SH
11 /Times-Roman AF
10800 58960 MT
(may be expressed as)51 W
/Symbol SF
20288 XM
(e)SH
/Times-Roman SF
21276 XM
(=)
150 MX(d)SH
/Symbol SF
23101 XM
(-)
150 MX(m)SH
/Times-Roman SF
24663 XM
(where)SH
/Symbol SF
27675 XM
(m)SH
/Times-Roman SF
28307 XM
(=)
150 MX(h)SH
29982 XM
(a)SH
30825 XM
(. It)
377 W( is usually assumed that the quantities)50 W
/Symbol SF
49671 XM
(e)SH
/Times-Roman SF
50509 XM
(, d)480 W
52444 XM
(, and a)50 W
8 /Times-Italic AF
20771 59305 MT
(k)SH
22596 XM
(k)SH
29627 XM
(k)SH
30470 XM
(k)SH
50154 XM
(k)SH
52089 XM
(k)SH
55445 XM
(k)SH
/Times-Roman SF
38769 60137 MT
(2)SH
11 SS 
10800 60699 MT
(are statistically stationary.  Define the mean-square error as)SH
/Times-Italic SF
37248 XM
(E)SH
/Times-Roman SF
([)SH
/Symbol SF
(e)SH
/Times-Roman SF
39169 XM
(]. The)
275 W( MSE may be rewritten as)SH
8 /Times-Italic AF
38769 61061 MT
(k)SH
/Times-Roman SF
16721 62145 MT
(2)SH
19995 XM
(2)SH
22231 XM
(2)SH
24157 XM
(2)SH
11 /Times-Italic AF
15200 62707 MT
(E)SH
/Times-Roman SF
([)SH
/Symbol SF
(e)SH
/Times-Roman SF
17121 XM
(])
150 MX(=)SH
/Times-Italic SF
18407 XM
(E)SH
/Times-Roman SF
([d ])
150 125 WX(+)
150 MX(h)SH
/Times-Italic SF
22631 XM
(E)SH
/Times-Roman SF
([a ])125 W
/Symbol SF
25073 XM
(-)SH
/Times-Roman SF
25827 XM
(2)SH
/Times-Italic SF
(E)SH
/Times-Roman SF
([d)SH
28320 XM
(a)SH
29163 XM
(]h)SH
53693 XM
(\0502.1\051)SH
8 /Times-Italic AF
27965 63052 MT
(k)SH
28808 XM
(k)SH
30079 XM
(k)SH
16721 63069 MT
(k)SH
19995 XM
(k)SH
22231 XM
(k)SH
24157 XM
(k)SH
/Times-Roman SF
19995 63793 MT
(2)SH
22231 XM
(2)SH
11 SS 
17637 64355 MT
(=)SH
/Times-Italic SF
18407 XM
(E)SH
/Times-Roman SF
([d ])
150 125 WX(+)
150 MX(h R)125 W
/Symbol SF
23515 XM
(-)SH
/Times-Roman SF
24269 XM
(2Ph)SH
8 /Times-Italic AF
19995 64717 MT
(k)SH
22231 XM
(k)SH
/Times-Roman SF
17067 65801 MT
(2)SH
11 SS 
10800 66363 MT
(where R)
150 126 WX(=)SH
/Times-Italic SF
15541 XM
(E)SH
/Times-Roman SF
([a ])
125 W( and P)
150 126 WX(=)SH
/Times-Italic SF
21755 XM
(E)SH
/Times-Roman SF
([d)SH
23698 XM
(a)SH
24541 XM
(]. The)
527 W( MSE expression)
126 W( is a quadratic function of the coefficient h)127 W
55525 XM
(.)SH
8 /Times-Italic AF
23343 66708 MT
(k)SH
24186 XM
(k)SH
55170 XM
(k)SH
17067 66725 MT
(k)SH
11 /Times-Roman AF
10800 68102 MT
(The MSE as a function of the filter coefficients is known as the performance)
188 W( surface.  Adaptive)187 W
9 /Symbol AF
52293 69478 MT
(*)SH
11 /Times-Roman AF
10800 69841 MT
(algorithms specify methods of searching the performance surface for the)
93 W( coefficient value h)94 W
53112 XM
(which)SH
10800 71580 MT
(produces the minimum error.)SH
ES
%%Page: 14 15
BS
0 SI
10 /Times-Roman AF
54800 4286 MT
(14)SH
11 SS 
642 1000 0 18000 24213 GB 
%%BeginDocument: /usr0/rozzi/Documentation/PhDThesis/Chapter2/AdFilter2.eps
%!PS-Adobe-2.0 EPSF-2.0
%%Title: 
%%Creator: TopDraw
%%CreationDate: Tue Apr 16 19:22:37 1991
%%For: rozzi
%%DocumentFonts: (atend)
%%%Pages: 0 1
%%BoundingBox: 0 0 476 265
%%EndComments

%%BeginDocument: /usr/lib/NextStep/printPackage.ps
%!PS-Adobe-2.0
%%Title: Printing Package
%%EndComments
%Version: 2.0
%Copyright: 1988, NeXT, Inc.

/__NXdef{1 index where{pop pop pop}{def}ifelse}bind def
/__NXbdef{1 index where{pop pop pop}{bind def}ifelse}bind def
/UserObjects 10 array __NXdef
/defineuserobject{
        exch dup 1 add dup UserObjects length gt{
                array dup 0 UserObjects putinterval
                /UserObjects exch def
        }{pop}ifelse UserObjects exch 3 -1 roll put
}__NXbdef
/undefineuserobject{UserObjects exch null put}__NXbdef
/execuserobject{UserObjects exch get exec}__NXbdef
/__NXRectPath{4 2 roll moveto 1 index 0 rlineto
0 exch rlineto neg 0 rlineto closepath}__NXbdef
/__NXProcessRectArgs{
        1 index type /arraytype eq{
                exch 0 4 2 index length 1 sub{
                        dup 3 add 1 exch{1 index exch get exch}for
                        5 1 roll 5 index exec
                }for pop pop
        }{exec}ifelse
}__NXbdef
/rectfill{gsave newpath {__NXRectPath fill} __NXProcessRectArgs grestore}__NXbdef
/rectclip{newpath {__NXRectPath} __NXProcessRectArgs clip newpath}__NXbdef
/rectstroke{
        gsave newpath dup type /arraytype eq{dup length 6 eq}{false}ifelse{
                {gsave __NXRectPath null concat stroke grestore}
                dup length array cvx copy dup 2 4 -1 roll put __NXProcessRectArgs
        }{{__NXRectPath stroke} __NXProcessRectArgs}ifelse grestore
}__NXbdef
/xyshow{
        0 1 3 index length 1 sub{
                currentpoint 4 index 3 index 1 getinterval show
                3 index 3 index 2 mul 1 add get add exch
                3 index 3 index 2 mul get add exch moveto pop
        }for pop pop
}__NXbdef
/xshow{
        0 1 3 index length 1 sub{
                currentpoint 4 index 3 index 1 getinterval show
                exch 3 index 3 index get add exch moveto pop
        }for pop pop
}__NXbdef
/yshow{
        0 1 3 index length 1 sub{
                currentpoint 4 index 3 index 1 getinterval show
                3 index 3 index get add moveto pop
        }for pop pop
}__NXbdef
/arct{arcto pop pop pop pop}__NXbdef
/setbbox{pop pop pop pop}__NXbdef
/ucache{}__NXbdef
/ucachestatus{mark 0 0 0 0 0}__NXbdef
/setucacheparams{cleartomark}__NXbdef
/uappend{systemdict begin cvx exec end}__NXbdef
/ueofill{gsave newpath uappend eofill grestore}__NXbdef
/ufill{gsave newpath uappend fill grestore}__NXbdef
/ustroke{
        gsave newpath dup length 6 eq
        {exch uappend concat}{uappend}ifelse
        stroke grestore
}__NXbdef
/__NXustrokepathMatrix dup where {pop pop}{matrix def}ifelse
/ustrokepath{
        newpath dup length 6 eq{
                exch uappend __NXustrokepathMatrix currentmatrix exch concat
                strokepath setmatrix
        }{uappend strokepath}ifelse
} __NXbdef
/upath{
        [exch {/ucache cvx}if pathbbox /setbbox cvx
         {/moveto cvx}{/lineto cvx}{/curveto cvx}{/closepath cvx}pathforall]cvx
} __NXbdef
/setstrokeadjust{pop}__NXbdef
/currentstrokeadjust{false}__NXbdef
/selectfont{exch findfont exch
dup type /arraytype eq {makefont}{scalefont}ifelse setfont}__NXbdef
/_NXCombineArrays{
        counttomark dup 2 add index dup length 3 -1 roll {
                2 index length sub dup 4 1 roll 1 index exch 4 -1 roll putinterval exch
        }repeat pop pop pop
}__NXbdef
/setcmykcolor{
        1.0 exch sub dup dup 6 -1 roll
        sub dup 0 lt{pop 0}if 5 1 roll
        4 -1 roll sub dup 0 lt{pop 0}if 3 1 roll
        exch sub dup 0 lt{pop 0}if setrgbcolor
}__NXbdef
/currentcmykcolor{currentrgbcolor 3{1.0 exch sub 3 1 roll}repeat 0}__NXbdef
/flushgraphics{}def
/setwindowtype{pop pop}def
/currentwindowtype{pop 0}def
/setalpha{pop}def
/currentalpha{1.0}def
/hidecursor{}def
/obscurecursor{}def
/revealcursor{}def
/setcursor{4 {pop}repeat}bind def
/showcursor{}def
/NextStepEncoding where not{
/NextStepEncoding StandardEncoding 256 array copy def
0 [129/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/Ccedilla/Egrave
/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex/Idieresis
/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis/Ugrave/Uacute
/Ucircumflex/Udieresis/Yacute/Thorn/mu/multiply/divide/copyright
176/registered 181/brokenbar 190/logicalnot 192/onesuperior 201/twosuperior
204/threesuperior 209/plusminus/onequarter/onehalf/threequarters/agrave
/aacute/acircumflex/atilde/adieresis/aring/ccedilla/egrave/eacute
/ecircumflex/edieresis/igrave 226/iacute 228/icircumflex/idieresis/eth
/ntilde 236/ograve/oacute/ocircumflex/otilde/odieresis 242/ugrave/uacute
/ucircumflex 246/udieresis/yacute 252/thorn/ydieresis]
{dup type /nametype eq
 {NextStepEncoding 2 index 2 index put pop 1 add}{exch pop}ifelse
}forall pop
/NextStepEncoding NextStepEncoding readonly def   
/_NXfstr 128 string dup 0 (_NX) putinterval def   
/findfont{
 % Because we can never let NextStepEncoding get into
 % SharedFontDirectory, we cannot reencode a font to NextStepEncoding
 % if we are in shared mode.  So if currentshared is true,
 % we call the normal findfont and return that
 /currentshared where {pop currentshared} {false} ifelse
 {//findfont exec}
 {dup _NXfstr 3 125 getinterval cvs length 3 add _NXfstr 0 3 -1 roll
  getinterval cvn exch FontDirectory 2 index known 
  {pop FontDirectory exch get}
  {//findfont exec dup /Encoding get StandardEncoding eq
   {    dup length dict exch
        {1 index /FID ne {2 index 3 1 roll put}{pop pop}ifelse}forall
         dup /Encoding NextStepEncoding put definefont
        }{exch pop} ifelse
   }ifelse
 }ifelse
}bind def
}{pop}ifelse
/_NXProcArray 5 array __NXdef
/_NXChannels 0 __NXdef
/_NXTotalBytes 0 __NXdef
/_NXDoImageOp{
        1 index{dup}{1}ifelse /_NXChannels exch store
        _NXChannels 2 add 2 roll _NXProcArray 0 _NXChannels getinterval astore pop
        5 index 4 index mul 2 index{1 sub 8 idiv 1 add mul}{mul 1 sub 8 idiv 1 add}ifelse
        4 index mul /_NXTotalBytes exch store pop exch pop
        gsave matrix invertmatrix concat 0.5 setgray 0 0 4 2 roll rectfill grestore
        {       0 1 _NXChannels 1 sub{
                        _NXProcArray exch get exec
                        length _NXTotalBytes exch sub /_NXTotalBytes exch store}for
                _NXTotalBytes 0 le{exit}if
        }loop /_NXProcArray 5 array def
}__NXbdef
/colorimage{_NXDoImageOp}__NXbdef
/alphaimage{1 add _NXDoImageOp}def
%%EndDocument

gsave
 /__NXbasematrix matrix currentmatrix def
grestore
%%EndProlog
%%BeginSetup
/TopDrawDict 200 dict def
/xyshow {
    mark exch aload length -2 2 {
        2 roll
    } for counttomark dup 2 add -1 roll pop 1 add -1 roll gsave {
        pop pop grestore rmoveto gsave
    } exch kshow grestore rmoveto
} bind def /currentalpha {
    1
} def /setalpha {
    pop
} bind def
TopDrawDict begin /prt_stack {
    (***Top of Stack\012) print pstack (---Bottom of Stack\012) print flush
} def /prt_top {
    (top item of stack) == dup == flush
} def /prtmat matrix def /prt_ctm {
    (current transformation matrix: ) print prtmat currentmatrix == flush
} def /tmmat matrix def /obmat matrix def /strmat matrix def /pgmat matrix def /idmat matrix def /sc1mt matrix def /sc2mt matrix def /sc3mt matrix def /sc4mt matrix def /sc5mt matrix def /sc6mt matrix def /sc7mt matrix def /inmat matrix def /ctmmt matrix def /octmmt matrix def /clpmt matrix def /weglet_mat matrix def /crlinw 1 def crlinw setlinewidth /crlinjn 0 def crlinjn setlinejoin /crlincp 0 def crlincp setlinecap /crmtrlmt currentmiterlimit def /crstrpat 0 def /crfilpat 0 def /crflat currentflat def /dftflat currentflat def /strinclr false def /crlingry 0 def /crlinred 0 def /crlingrn 0 def /crlinblu 0 def /crlinalph 1 def /filinclr false def /crfilgry 0 def /crfilred 0 def /crfilgrn 0 def /crfilblu 0 def /crfilalph 1 def /crfilstyl 0 def /txtdraw true def /txtinclr false def /txtwpat false def /txtwittrans false def /crtxtgry 0 def /crtxtred 0 def /crtxtgrn 0 def /crtxtblu 0 def /crtxtalph 1 def /crtxtpat 0 def /txlndraw true def /txlninclr false def /txlnwpat false def /txlnwittrans false def /crtxlngry 0 def /crtxlnred 0 def /crtxlngrn 0 def /crtxlnblu 0 def /crtxlnalph 1 def /crtxlnpat 0 def /hilittxt false def /strdsh [2 2] def /dshpatoff 0 def /usedash false def /filwpat false def /strwpat false def /filwittrans false def /strwittrans false def /crfrtarw false def /crendarw false def /rsave 0 def /esave 0 def /sslsave 0 def /lsave 0 def /clpsave 0 def /pathsave 0 def /tpatstr 10 string def /ptdist {
    sub dup mul 3 1 roll sub dup mul add sqrt
} bind def /dodrawctm {
    octmmt currentmatrix pop idmat obmat concatmatrix ctmmt currentmatrix sc1mt concatmatrix setmatrix
} bind def /undrawctm {
    obmat inmat invertmatrix ctmmt currentmatrix sc1mt concatmatrix setmatrix
} bind def /undrawmat {
    obmat aload pop 7 -1 roll astore
} bind def /unpagectm {
    octmmt setmatrix
} bind def /unpagemat {
    pgmat aload pop 7 -1 roll astore
} bind def /drtan {
    gsave 1 setalpha 0 setlinewidth 0.333333 setgray moveto lineto stroke grestore
} bind def /drdgrdln {
    gsave 1 setalpha 0 setlinewidth [1 2] 0 setdash setgray moveto lineto stroke grestore
} bind def /drgrdln {
    gsave 1 setalpha 0 setlinewidth setgray moveto lineto stroke grestore
} bind def end
TopDrawDict begin /rpath {
    newpath moveto dup 0 exch rlineto exch 0 rlineto 0 exch neg rlineto closepath
} bind def /rfpath {
    /rad3 exch def /hh3 exch def /ww3 exch def /yy1 exch def /xx1 exch def /xx2 xx1 ww3 add def /yy2 yy1 hh3 add def ww3 0.5 mul rad3 lt {
        /rad3 ww3 0.5 mul def
    } if hh3 0.5 mul rad3 lt {
        /rad3 hh3 0.5 mul def
    } if newpath xx1 yy1 hh3 0.5 mul add moveto xx1 yy2 xx2 yy2 rad3 arcto 4 {
        pop
    } repeat xx2 yy2 xx2 yy1 rad3 arcto 4 {
        pop
    } repeat xx2 yy1 xx1 yy1 rad3 arcto 4 {
        pop
    } repeat xx1 yy1 xx1 yy2 rad3 arcto 4 {
        pop
    } repeat closepath
} bind def /rfill {
    gsave dodrawctm crfilalph setalpha filinclr {
        crfilred crfilgrn crfilblu setrgbcolor
    } {
        crfilgry setgray
    } ifelse filwpat {
        4 2 roll rpath crfilpat findfont filwittrans {
            trpatfil
        } {
            oppatfil
        } ifelse
    } {
        rectfill
    } ifelse grestore
} bind def /rstroke {
    gsave dodrawctm crlinalph setalpha crlinw setlinewidth crlincp setlinecap crlinjn setlinejoin crmtrlmt setmiterlimit usedash {
        strdsh dshpatoff setdash
    } if strinclr {
        crlinred crlingrn crlinblu setrgbcolor
    } {
        crlingry setgray
    } ifelse 4 2 roll rpath unpagectm concat strwpat {
        crstrpat findfont strwittrans {
            trpatstrk
        } {
            oppatstrk
        } ifelse
    } {
        stroke
    } ifelse grestore
} bind def /mkrpath {
    dodrawctm rpath unpagectm
} bind def end
TopDrawDict begin /p1x 0 def /p1y 0 def /p2x 0 def /p2y 0 def /ssl {
    gsave dodrawctm crfrtarw crendarw or {
        /p1y 1 index def /p1x 2 index def /p2y 1 index 4 index add def /p2x 2 index 5 index add def newpath moveto rlineto
    } {
        newpath moveto rlineto
    } ifelse crlinalph setalpha crlinw setlinewidth crlincp setlinecap usedash {
        strdsh dshpatoff setdash
    } if strinclr {
        crlinred crlingrn crlinblu setrgbcolor
    } {
        crlingry setgray
    } ifelse aload pop strmat astore crfrtarw {
        currentlinewidth strmat p2x p2y p1x p1y arow
    } if crendarw {
        currentlinewidth strmat p1x p1y p2x p2y arow
    } if unpagectm concat strwpat {
        crstrpat findfont strwittrans {
            trpatstrk
        } {
            oppatstrk
        } ifelse
    } {
        stroke
    } ifelse grestore
} bind def end
TopDrawDict begin /elli {
    gsave dodrawctm translate scale newpath dup dup 0 360 arc closepath unpagectm {
        crfilalph setalpha filinclr {
            crfilred crfilgrn crfilblu setrgbcolor
        } {
            crfilgry setgray
        } ifelse gsave filwpat {
            crfilpat findfont filwittrans {
                trpatfil
            } {
                oppatfil
            } ifelse
        } {
            fill
        } ifelse grestore
    } if {
        crlinalph setalpha crlinw setlinewidth usedash {
            strdsh dshpatoff setdash
        } if strinclr {
            crlinred crlingrn crlinblu setrgbcolor
        } {
            crlingry setgray
        } ifelse concat strwpat {
            crstrpat findfont strwittrans {
                trpatstrk
            } {
                oppatstrk
            } ifelse
        } {
            stroke
        } ifelse
    } {
        pop
    } ifelse grestore
} bind def /estroke {
    gsave dodrawctm translate scale newpath dup dup 0 360 arc closepath crlinalph setalpha crlinw setlinewidth usedash {
        strdsh dshpatoff setdash
    } if strinclr {
        crlinred crlingrn crlinblu setrgbcolor
    } {
        crlingry setgray
    } ifelse unpagectm concat strwpat {
        crstrpat findfont strwittrans {
            trpatstrk
        } {
            oppatstrk
        } ifelse
    } {
        stroke
    } ifelse grestore
} bind def /efill {
    gsave dodrawctm translate scale newpath dup dup 0 360 arc closepath unpagectm crfilalph setalpha filinclr {
        crfilred crfilgrn crfilblu setrgbcolor
    } {
        crfilgry setgray
    } ifelse filwpat {
        crfilpat findfont filwittrans {
            trpatfil
        } {
            oppatfil
        } ifelse
    } {
        fill
    } ifelse grestore
} bind def /apstroke {
    gsave dodrawctm /pie exch def /radius exch def /yscale exch def /xscale exch def /yy exch def /xx exch def /angle2 exch def /angle1 exch def /closed exch def xx yy translate xscale yscale scale newpath pie {
        radius dup moveto
    } if radius dup dup angle1 angle2 arc closed pie or {
        closepath
    } if crlinalph setalpha closed not pie not and {
        crfrtarw {
            dup crlinw exch gsave newpath angle1 1 add cos radius mul radius add angle1 1 add sin radius mul radius add moveto angle1 cos radius mul radius add angle1 sin radius mul radius add lineto unpagectm {
                
            } {
                
            } {
                
            } {
                
            } pathforall arow grestore
        } if crendarw {
            dup crlinw exch gsave newpath angle2 1 sub cos radius mul radius add angle2 1 sub sin radius mul radius add moveto angle2 cos radius mul radius add angle2 sin radius mul radius add lineto unpagectm {
                
            } {
                
            } {
                
            } {
                
            } pathforall arow grestore
        } if
    } if crlincp setlinecap crlinalph setalpha crlinw setlinewidth usedash {
        strdsh dshpatoff setdash
    } if strinclr {
        crlinred crlingrn crlinblu setrgbcolor
    } {
        crlingry setgray
    } ifelse unpagectm concat strwpat {
        crstrpat findfont strwittrans {
            trpatstrk
        } {
            oppatstrk
        } ifelse
    } {
        stroke
    } ifelse grestore
} bind def /apfill {
    gsave dodrawctm /pie exch def /radius exch def /yscale exch def /xscale exch def /yy exch def /xx exch def xx yy translate xscale yscale scale newpath pie {
        radius dup moveto
    } if radius dup dup 5 -2 roll arc pie or {
        closepath
    } if 1 xscale div 1 yscale div scale crfilalph setalpha filinclr {
        crfilred crfilgrn crfilblu setrgbcolor
    } {
        crfilgry setgray
    } ifelse filwpat {
        crfilpat findfont filwittrans {
            trpatfil
        } {
            oppatfil
        } ifelse
    } {
        fill
    } ifelse grestore
} bind def /mkepath {
    dodrawctm /pie exch def /radius exch def /yscale exch def /xscale exch def /yy exch def /xx exch def /angle2 exch def /angle1 exch def /closed exch def xx yy translate xscale yscale scale newpath pie {
        radius dup moveto
    } if radius dup dup angle1 angle2 arc closed pie or {
        closepath
    } if unpagectm
} bind def end
TopDrawDict begin /closedspl false def /nspans 0 def /sstrt {
    gsave dodrawctm /closedspl exch def /nspans 0 def newpath
} bind def /sstrtpath {
    dodrawctm /closedspl exch def /nspans 0 def newpath
} bind def /sadd {
    nspans 0 eq {
        moveto
    } {
        pop pop
    } ifelse curveto /nspans nspans 1 add def
} bind def /splstroke {
    nspans 0 gt {
        unpagectm concat closedspl {
            closepath
        } if crlincp setlinecap crlinjn setlinejoin crlinalph setalpha crlinw setlinewidth crmtrlmt setmiterlimit usedash {
            strdsh dshpatoff setdash
        } if strinclr {
            crlinred crlingrn crlinblu setrgbcolor
        } {
            crlingry setgray
        } ifelse strwpat {
            flattenpath crstrpat findfont strwittrans {
                trpatstrk
            } {
                oppatstrk
            } ifelse
        } {
            stroke
        } ifelse
    } {
        pop
    } ifelse grestore
} bind def /splfill {
    nspans 0 gt {
        closedspl {
            closepath
        } if crfilalph setalpha filinclr {
            crfilred crfilgrn crfilblu setrgbcolor
        } {
            crfilgry setgray
        } ifelse filwpat {
            flattenpath crfilpat findfont crfilstyl 0 eq {
                filwittrans {
                    trpateofil
                } {
                    oppateofil
                } ifelse
            } {
                filwittrans {
                    trpatfil
                } {
                    oppatfil
                } ifelse
            } ifelse
        } {
            crfilstyl 0 eq {
                eofill
            } {
                fill
            } ifelse
        } ifelse
    } if grestore
} bind def /mksplpath {
    nspans 0 gt {
        closedspl {
            closepath
        } if
    } if
} bind def end
TopDrawDict begin /dotx {
    gsave txtdraw {
        concat selectfont txtinclr {
            crtxtred crtxtgrn crtxtblu setrgbcolor
        } {
            crtxtgry setgray
        } ifelse crtxtalph setalpha moveto xyshow
    } {
        pop pop pop pop pop pop pop
    } ifelse grestore
} bind def /txtlin {
    gsave txlndraw {
        concat txlninclr {
            crtxlnred crtxlngrn crtxlnblu setrgbcolor
        } {
            crtxlngry setgray
        } ifelse crtxlnalph setalpha setlinewidth 0 setlinecap newpath moveto 0 rlineto stroke
    } {
        pop pop pop pop pop
    } ifelse grestore
} bind def end
%%EndSetup
gsave
0 0 476 265 rectclip
-156.576004 -111 translate
156.576004 111 475.424011 264.791992 rectclip
gsave
TopDrawDict begin
/invpats true def
/crlincp 0 def
/crlinjn 0 def
/crmtrlmt 10 def
/crlinw 2 def
/crlinalph 1 def
/crlinred 0 def /crlingrn 0 def /crlinblu 0 def /strinclr true def
/crfilalph 1 def
/crfilred 1 def /crfilgrn 1 def /crfilblu 1 def /filinclr true def
/filwpat false def
TopDrawDict /piddict known TopDrawDict /ipiddict known or {
    1 getpat /crfilpat exch def
} if
/filwittrans false def
/strwpat false def
TopDrawDict /piddict known TopDrawDict /ipiddict known or {
    1 getpat /crstrpat exch def
} if
/strwittrans false def
/usedash false def
/strdsh [2 2] def /dshpatoff 0 def
/crendarw false def
/crfrtarw false def
/txtdraw false def
/crtxtalph 1 def
/crtxtred 0 def /crtxtgrn 0 def /crtxtblu 0 def /txtinclr true def
/txtwpat false def
/txtwittrans false def
/txlndraw false def
/crtxlnalph 1 def
/crtxlnred 0 def /crtxlngrn 0 def /crtxlnblu 0 def /txlninclr true def
/txlnwittrans false def
/txlnwpat false def
1 0 0 1 21 -41 sc5mt astore 0 -54 532 389 1 0 0 1 21 -41 sc6mt astore ssl
1 0 0 1 21 -41 sc5mt astore 610 324 -525 -127 0.845714 0 0 1 115.114319 -41 sc6mt astore rstroke
/crlinw 0 def
/crlinred 1 def /crlingrn 1 def /crlinblu 1 def /strinclr true def
59 323 290 -132 0.682759 0 0 1 131.717255 -41 sc6mt astore rfill
1 0 0 1 21 -41 sc5mt astore 59 323 290 -132 0.682759 0 0 1 131.717255 -41 sc6mt astore rstroke
/crlinw 2 def
/crlinred 0 def /crlingrn 0 def /crlinblu 0 def /strinclr true def
false [1 0 0 1 21 -41] sstrt
systemdict
begin
246 191 572 395 setbbox
369 197 moveto
369 197 247 197 247 197 curveto
247 197 376 395 376 395 curveto
end
/nspans 2 def [1 0 0 1 21 -41] splstroke
256 406 137 -82 1 0 0 1 16 -83 sc6mt astore rfill
1 0 0 1 16 -83 sc5mt astore 256 406 137 -82 1 0 0 1 16 -83 sc6mt astore rstroke
/txtdraw true def
/txlndraw true def
(m) [0 0] 308 375 /Symbol [ 18 1 mul 0 0 18 0 0 ] [1 0 0 1 3 -109] dotx
/txtdraw true def
/txlndraw true def
(k) [0 0] 318.368011 368.600006 /Helvetica [ 16 1 mul 0 0 16 0 0 ] [1 0 0 1 3 -109] dotx
/txtdraw true def
/txlndraw true def
(= H) [9.343994 0 4.447998 0 0 0] 326.368011 375 /Helvetica [ 16 1 mul 0 0 16 0 0 ] [1 0 0 1 3 -109] dotx
/txtdraw true def
/txlndraw true def
(T) [0 0] 351.712006 380.600006 /Helvetica [ 14 1 mul 0 0 14 0 0 ] [1 0 0 1 3 -109] dotx
/txtdraw true def
/txlndraw true def
(a) [0 0] 358.585999 375 /Helvetica [ 14 1 mul 0 0 14 0 0 ] [1 0 0 1 3 -109] dotx
/txtdraw true def
/txlndraw true def
(k ) [7 0 0 0] 366.369995 369.399994 /Helvetica [ 14 1 mul 0 0 14 0 0 ] [1 0 0 1 3 -109] dotx
/txtdraw true def
/txlndraw true def
(Estimator ) [10.671997 0 8 0 4.447998 0 3.552002 0 13.328003 0 8.895996 0 4.447998 0 8.895996 0 5.328003 0 0 0] 302 382 /Helvetica [ 16 1 mul 0 0 16 0 0 ] [1 0 0 1 5 -89] dotx
(^ ) [7.503998 0 0 0] 282 356 /Helvetica [ 16 1 mul 0 0 16 0 0 ] [1 0 0 1 29.5 -84.5] dotx
23 1.021739 -1 497 349 0.919118 0 0 0.939114 75.099457 -22.151123 sc5mt astore efill
0.919118 0 0 0.939114 75.099457 -22.151123 sc6mt astore 23 1.021739 -1 497 349 0.919118 0 0 0.939114 75.099457 -22.151123 sc5mt astore estroke
/txtdraw true def
/txlndraw true def
(S ) [17.76001 0 0 0] 503 327 /Symbol [ 30 1 mul 0 0 30 0 0 ] [1 0 0 1 42 -53] dotx
257 405 193 -85 0.709845 0 0 0.964706 179.569962 -196.705872 sc6mt astore rfill
1 0 0 1 105 -211 sc5mt astore 257 405 193 -85 0.709845 0 0 0.964706 179.569962 -196.705872 sc6mt astore rstroke
/txtdraw true def
/txlndraw true def
(Adaptive Algorithm ) [10.671997 0 8.895996 0 8.895996 0 8.895996 0 4.447998 0 3.552002 0 7.600006 0 8.895996 0 -61.855988 -18.496002 10.671997 0 3.552002 0 8.895996 0 8.895996 0 5.567993 0 3.552002 0 4.447998 0 8.895996 0 13.328003 0 0 0] 301 236 /Helvetica [ 16 1 mul 0 0 16 0 0 ] [1 0 0 1 95 -77] dotx
4 1 -1 68 331 1 0 0 1 110 -44 sc5mt astore efill
1 0 0 1 110 -44 sc6mt astore 4 1 -1 68 331 1 0 0 1 110 -44 sc5mt astore estroke
4 1 -1 68 331 1 0 0 0.999992 481 20.002487 sc5mt astore efill
1 0 0 1 449 20 sc6mt astore 4 1 -1 68 331 1 0 0 0.999992 481 20.002487 sc5mt astore estroke
(Input a) [4.448002 0 8.896 0 8.896004 0 8.896004 0 4.447998 0 -35.584007 -18.496002 0 0] 47 327 /Helvetica [ 16 1 mul 0 0 16 0 0 ] [1 0 0 1 109 -28] dotx
/txtdraw true def
/txlndraw true def
(k) [0 0] 55.896 302.104004 /Helvetica [ 16 1 mul 0 0 16 0 0 ] [1 0 0 1 109 -28] dotx
/txtdraw true def
/txlndraw true def
(    ) [4.448002 0 4.447998 0 4.447998 0 0 0] 63.896 308.503998 /Helvetica [ 16 1 mul 0 0 16 0 0 ] [1 0 0 1 109 -28] dotx
(Desired Output     d) [11.552002 0 8.895996 0 8 0 3.552002 0 5.328003 0 8.895996 0 8.895996 0 4.447998 0 12.447998 0 8.895996 0 4.447998 0 8.895996 0 8.895996 0 4.447998 0 -107.599976 -18.496002 4.447998 0 4.447998 0 4.447998 0 4.447998 0 0 0] 149 106 /Helvetica [ 16 1 mul 0 0 16 0 0 ] [1 0 0 1 356 258] dotx
/txtdraw true def
/txlndraw true def
(k ) [8 0 0 0] 175.687988 81.103996 /Helvetica [ 16 1 mul 0 0 16 0 0 ] [1 0 0 1 356 258] dotx
/txtdraw true def
/txlndraw true def
(+ ) [9.343994 0 0 0] 269 65 /Helvetica [ 16 1 mul 0 0 16 0 0 ] [1 0 0 1 267 244] dotx
(- ) [5.328003 0 0 0] 500 330 /Helvetica [ 16 1 mul 0 0 16 0 0 ] [1 0 0 1 21 -41] dotx
/txtdraw true def
/txlndraw true def
(m) [0 0] 413 345 /Symbol [ 18 1 mul 0 0 18 0 0 ] [1 0 0 1 17 -53] dotx
/txtdraw true def
/txlndraw true def
(k ) [8 0 0 0] 423.368011 338.600006 /Helvetica [ 16 1 mul 0 0 16 0 0 ] [1 0 0 1 17 -53] dotx
/txtdraw true def
/txlndraw true def
(Error Signal   ) [10.671997 0 5.328003 0 5.328003 0 8.895996 0 5.328003 0 4.447998 0 10.671997 0 3.552002 0 8.895996 0 8.895996 0 8.895996 0 3.552002 0 -84.463989 -21.779999 4.447998 0 0 0] 159 98 /Helvetica [ 16 1 mul 0 0 16 0 0 ] [1 0 0 1 365 92] dotx
/txtdraw true def
/txlndraw true def
( e) [4.5 0 0 0] 167.895996 76.220001 /Symbol [ 18 1 mul 0 0 18 0 0 ] [1 0 0 1 365 92] dotx
/txtdraw true def
/txlndraw true def
(k ) [8 0 0 0] 180.297989 69.82 /Helvetica [ 16 1 mul 0 0 16 0 0 ] [1 0 0 1 365 92] dotx
/crfilred 0 def /crfilgrn 0 def /crfilblu 0 def /filinclr true def
false [0.312205 -0.207732 0.553953 0.832548 328.061981 309.285431] sstrt
systemdict
begin
72 63 98 99 setbbox
74 64 moveto
74 64 84.666664 86 84.666664 86 curveto
84.666664 86 98 64 98 64 curveto
end
/nspans 2 def splfill
false [0.312205 -0.207732 0.553953 0.832548 328.061981 309.285431] sstrt
systemdict
begin
72 63 98 99 setbbox
74 64 moveto
74 64 84.666664 86 84.666664 86 curveto
84.666664 86 98 64 98 64 curveto
end
/nspans 2 def [0.832548 -0.553953 0.553953 0.832548 289.556641 334.905762] splstroke
false [0.375 -3.278354e-08 -8.742278e-08 -1 521.25 394.500031] sstrt
systemdict
begin
72 63 98 99 setbbox
74 64 moveto
74 64 84.666664 86 84.666664 86 curveto
84.666664 86 98 64 98 64 curveto
end
/nspans 2 def splfill
false [0.375 -3.278354e-08 -8.742278e-08 -1 521.25 394.500031] sstrt
systemdict
begin
72 63 98 99 setbbox
74 64 moveto
74 64 84.666664 86 84.666664 86 curveto
84.666664 86 98 64 98 64 curveto
end
/nspans 2 def [1 -8.742278e-08 -8.742278e-08 -1 466.000031 394.500031] splstroke
false [-1.639177e-08 0.375 -1 -4.371139e-08 587.255249 123.999664] sstrt
systemdict
begin
72 63 98 99 setbbox
74 64 moveto
74 64 84.666664 86 84.666664 86 curveto
84.666664 86 98 64 98 64 curveto
end
/nspans 2 def splfill
false [-1.639177e-08 0.375 -1 -4.371139e-08 587.255249 123.999664] sstrt
systemdict
begin
72 63 98 99 setbbox
74 64 moveto
74 64 84.666664 86 84.666664 86 curveto
84.666664 86 98 64 98 64 curveto
end
/nspans 2 def [-4.371139e-08 1 -1 -4.371139e-08 587.255249 50.749664] splstroke
false [-1.639177e-08 -0.375 1 -4.371139e-08 443.25119 315.006042] sstrt
systemdict
begin
72 63 98 99 setbbox
74 64 moveto
74 64 84.666664 86 84.666664 86 curveto
84.666664 86 98 64 98 64 curveto
end
/nspans 2 def splfill
false [-1.639177e-08 -0.375 1 -4.371139e-08 443.25119 315.006042] sstrt
systemdict
begin
72 63 98 99 setbbox
74 64 moveto
74 64 84.666664 86 84.666664 86 curveto
84.666664 86 98 64 98 64 curveto
end
/nspans 2 def [-4.371139e-08 -1 1 -4.371139e-08 425.251221 379.256042] splstroke
false [-1.639177e-08 -0.375 1 -4.371139e-08 182.75119 315.006042] sstrt
systemdict
begin
72 63 98 99 setbbox
74 64 moveto
74 64 84.666664 86 84.666664 86 curveto
84.666664 86 98 64 98 64 curveto
end
/nspans 2 def splfill
false [-1.639177e-08 -0.375 1 -4.371139e-08 182.75119 315.006042] sstrt
systemdict
begin
72 63 98 99 setbbox
74 64 moveto
74 64 84.666664 86 84.666664 86 curveto
84.666664 86 98 64 98 64 curveto
end
/nspans 2 def [-4.371139e-08 -1 1 -4.371139e-08 155.751221 379.256042] splstroke
/txtdraw true def
/txlndraw true def
(^) [0 0] 438 317 /Helvetica [ 16 1 mul 0 0 16 0 0 ] [1 0 0 1 -7 -21] dotx
/txtdraw true def
/txlndraw true def
( ) [0 0] 445.503998 317 /Symbol [ 18 1 mul 0 0 18 0 0 ] [1 0 0 1 -7 -21] dotx
end
grestore
grestore
%%Trailer

%%EndDocument
 GE /Times-Bold SF
21554 25965 MT
(Figure 2-1:)SH
/Times-Roman SF
27327 XM
(A joint process estimator adaptive filter.)SH
9 /Symbol AF
55075 28587 MT
(*)SH
11 /Times-Roman AF
13300 28950 MT
(If the ensemble statistics R and)
34 W( P are known, then Equation \0502.1\051 may be solved directly for h)33 W
55525 XM
(.)SH
8 /Symbol AF
17785 30344 MT
(*)SH
19839 XM
(-)SH
/Times-Roman SF
(1)SH
11 SS 
10800 30689 MT
(This solution, h)54 W
18335 XM
(=)
150 MX(R)SH
20678 XM
(P, is the minimum mean-square error)
54 W( \050MMSE\051 solution.  An alternate method,)55 W
10800 32428 MT
(the MMSE gradient algorithm, performs a gradient search for the optimal coefficient.  The gradient)90 W
10800 34167 MT
(algorithm updates the coefficient h)SH
26764 XM
(according to)SH
8 /Times-Italic AF
26134 34512 MT
(k)SH
/Times-Roman SF
23499 35812 MT
(2)SH
11 /Symbol AF
19685 35819 MT
(b)SH
604 50 19685 36129 UL
/Times-Roman SF
15200 36374 MT
(h)SH
17106 XM
(=)
150 MX(h)SH
/Symbol SF
18931 XM
(- \321)479 W
/Times-Italic SF
21978 XM
(E)SH
/Times-Roman SF
([)SH
/Symbol SF
(e)SH
/Times-Roman SF
23899 XM
(])SH
53693 XM
(\0502.2\051)SH
8 /Times-Italic AF
15750 36719 MT
(k)SH
/Times-Roman SF
(+1)SH
/Times-Italic SF
18426 XM
(k)SH
21073 XM
(h)SH
23499 36736 MT
(k)SH
21473 37064 MT
(k)SH
11 /Times-Roman AF
19712 37125 MT
(2)SH
10800 38864 MT
(where)SH
/Symbol SF
13927 XM
(b)SH
/Times-Roman SF
14972 XM
(an adaptation constant which limits the change in h)167 W
39651 XM
(at each step.  It can be shown that)167 W
8 /Times-Italic AF
38854 39209 MT
(k)SH
11 /Times-Roman AF
10800 40603 MT
(equation \0502.2\051 is stable and convergent)
136 W( for)135 W
/Symbol SF
30626 XM
(b)SH
/Times-Roman SF
31380 XM
(<)
150 MX(2/)SH
/Symbol SF
(l)SH
/Times-Roman SF
35353 XM
(where)SH
/Symbol SF
38449 XM
(l)SH
/Times-Roman SF
40796 XM
(is the maximum eigenvalue of R)135 W
8 /Times-Italic AF
33610 40948 MT
(max)SH
39053 XM
(max)SH
11 /Times-Roman AF
10800 42342 MT
(\050equal to R in the 1-D case\051.)SH
13300 45327 MT
(If ensemble statistics R)
78 W( and P are unavailable, then the MMSE solution must be approximated)79 W
10800 47066 MT
(in some)
171 W( fashion.  The simplest and most common approximation is the least mean-square \050LMS\051)170 W
10800 48805 MT
(algorithm. The)
301 W( LMS algorithm substitutes instantaneous values for the gradient in)
13 W( \0502.2\051, which effec-)14 W
10800 50544 MT
(tively replaces ensemble averages with time averages.  The LMS coefficient update equation is)SH
8 SS 
22461 52189 MT
(2)SH
11 /Symbol AF
19685 52196 MT
(b)SH
604 50 19685 52506 UL
/Times-Roman SF
15200 52751 MT
(h)SH
17106 XM
(=)
150 MX(h)SH
/Symbol SF
18931 XM
(- \321)479 W
21978 XM
(e)SH
/Times-Roman SF
53693 XM
(\0502.3\051)SH
8 /Times-Italic AF
15750 53096 MT
(k)SH
/Times-Roman SF
(+1)SH
/Times-Italic SF
18426 XM
(k)SH
21073 XM
(h)SH
22461 53113 MT
(k)SH
21473 53441 MT
(k)SH
11 /Times-Roman AF
19712 53502 MT
(2)SH
8 SS 
20788 54292 MT
(2)SH
11 SS 
17106 54854 MT
(=)
150 MX(\0501)SH
/Symbol SF
18942 XM
(-)
150 MX(b)SH
/Times-Roman SF
(a \051h)125 W
22609 XM
(+)SH
/Symbol SF
23379 XM
(b)SH
/Times-Roman SF
(a)SH
24826 XM
(d)SH
8 /Times-Italic AF
22104 55199 MT
(k)SH
24471 XM
(k)SH
25376 XM
(k)SH
20788 55216 MT
(k)SH
11 /Times-Roman AF
10800 56593 MT
(The convergence of the expected value of the LMS coefficients)
146 W( is identical to that of the MMSE.)145 W
10800 58332 MT
(Individual coefficient trajectories)
18 W( \050on the performance surface\051 exhibit a random fluctuation about the)19 W
10800 60071 MT
(optimal due to the random driving term in \0502.3\051.  This misadjustment)
11 W( can be controlled by varying the)10 W
10800 61810 MT
(step size)SH
/Symbol SF
14832 XM
(b)SH
/Times-Roman SF
(.)SH
13300 64795 MT
(An example of the behavior of the LMS algorithm is shown)
296 W( in Figure 2-2 for the one-)297 W
10800 66534 MT
(dimensional example.  The parabolic performance surface)
211 W( is the MSE as a function of the filter)210 W
8 /Symbol AF
31680 67928 MT
(*)SH
11 /Times-Roman AF
10800 68273 MT
(coefficient h, and the minimum occurs at h)286 W
32230 XM
(=)
150 MX(1.0. The)
847 W( coefficient trajectory \050the zigzag)
286 W( line\051)287 W
10800 70012 MT
(represents the time history of the coefficient as it searches for)
143 W( the optimal value.  When the coef-)142 W
8 /Symbol AF
18217 71406 MT
(*)SH
11 /Times-Roman AF
10800 71751 MT
(ficient is near h)202 W
18617 XM
(, the stochastic update)
202 W( specified by \0502.3\051 causes it to vary randomly around the)203 W
10800 73490 MT
(optimal value.)SH
ES
%%Page: 15 16
BS
0 SI
10 /Times-Roman AF
54800 4286 MT
(15)SH
11 SS 
720 1000 0 18000 26424 GB 
%%BeginDocument: /usr0/rozzi/Documentation/PhDThesis/Chapter2/AdSearch.eps
%!PS-Adobe-2.0 EPSF-2.0
%%Title: 
%%Creator: TopDraw
%%CreationDate: Tue Apr 16 20:46:13 1991
%%For: rozzi
%%DocumentFonts: (atend)
%%%Pages: 0 1
%%BoundingBox: 0 0 425 267
%%EndComments

%%BeginDocument: /usr/lib/NextStep/printPackage.ps
%!PS-Adobe-2.0
%%Title: Printing Package
%%EndComments
%Version: 2.0
%Copyright: 1988, NeXT, Inc.

/__NXdef{1 index where{pop pop pop}{def}ifelse}bind def
/__NXbdef{1 index where{pop pop pop}{bind def}ifelse}bind def
/UserObjects 10 array __NXdef
/defineuserobject{
        exch dup 1 add dup UserObjects length gt{
                array dup 0 UserObjects putinterval
                /UserObjects exch def
        }{pop}ifelse UserObjects exch 3 -1 roll put
}__NXbdef
/undefineuserobject{UserObjects exch null put}__NXbdef
/execuserobject{UserObjects exch get exec}__NXbdef
/__NXRectPath{4 2 roll moveto 1 index 0 rlineto
0 exch rlineto neg 0 rlineto closepath}__NXbdef
/__NXProcessRectArgs{
        1 index type /arraytype eq{
                exch 0 4 2 index length 1 sub{
                        dup 3 add 1 exch{1 index exch get exch}for
                        5 1 roll 5 index exec
                }for pop pop
        }{exec}ifelse
}__NXbdef
/rectfill{gsave newpath {__NXRectPath fill} __NXProcessRectArgs grestore}__NXbdef
/rectclip{newpath {__NXRectPath} __NXProcessRectArgs clip newpath}__NXbdef
/rectstroke{
        gsave newpath dup type /arraytype eq{dup length 6 eq}{false}ifelse{
                {gsave __NXRectPath null concat stroke grestore}
                dup length array cvx copy dup 2 4 -1 roll put __NXProcessRectArgs
        }{{__NXRectPath stroke} __NXProcessRectArgs}ifelse grestore
}__NXbdef
/xyshow{
        0 1 3 index length 1 sub{
                currentpoint 4 index 3 index 1 getinterval show
                3 index 3 index 2 mul 1 add get add exch
                3 index 3 index 2 mul get add exch moveto pop
        }for pop pop
}__NXbdef
/xshow{
        0 1 3 index length 1 sub{
                currentpoint 4 index 3 index 1 getinterval show
                exch 3 index 3 index get add exch moveto pop
        }for pop pop
}__NXbdef
/yshow{
        0 1 3 index length 1 sub{
                currentpoint 4 index 3 index 1 getinterval show
                3 index 3 index get add moveto pop
        }for pop pop
}__NXbdef
/arct{arcto pop pop pop pop}__NXbdef
/setbbox{pop pop pop pop}__NXbdef
/ucache{}__NXbdef
/ucachestatus{mark 0 0 0 0 0}__NXbdef
/setucacheparams{cleartomark}__NXbdef
/uappend{systemdict begin cvx exec end}__NXbdef
/ueofill{gsave newpath uappend eofill grestore}__NXbdef
/ufill{gsave newpath uappend fill grestore}__NXbdef
/ustroke{
        gsave newpath dup length 6 eq
        {exch uappend concat}{uappend}ifelse
        stroke grestore
}__NXbdef
/__NXustrokepathMatrix dup where {pop pop}{matrix def}ifelse
/ustrokepath{
        newpath dup length 6 eq{
                exch uappend __NXustrokepathMatrix currentmatrix exch concat
                strokepath setmatrix
        }{uappend strokepath}ifelse
} __NXbdef
/upath{
        [exch {/ucache cvx}if pathbbox /setbbox cvx
         {/moveto cvx}{/lineto cvx}{/curveto cvx}{/closepath cvx}pathforall]cvx
} __NXbdef
/setstrokeadjust{pop}__NXbdef
/currentstrokeadjust{false}__NXbdef
/selectfont{exch findfont exch
dup type /arraytype eq {makefont}{scalefont}ifelse setfont}__NXbdef
/_NXCombineArrays{
        counttomark dup 2 add index dup length 3 -1 roll {
                2 index length sub dup 4 1 roll 1 index exch 4 -1 roll putinterval exch
        }repeat pop pop pop
}__NXbdef
/setcmykcolor{
        1.0 exch sub dup dup 6 -1 roll
        sub dup 0 lt{pop 0}if 5 1 roll
        4 -1 roll sub dup 0 lt{pop 0}if 3 1 roll
        exch sub dup 0 lt{pop 0}if setrgbcolor
}__NXbdef
/currentcmykcolor{currentrgbcolor 3{1.0 exch sub 3 1 roll}repeat 0}__NXbdef
/flushgraphics{}def
/setwindowtype{pop pop}def
/currentwindowtype{pop 0}def
/setalpha{pop}def
/currentalpha{1.0}def
/hidecursor{}def
/obscurecursor{}def
/revealcursor{}def
/setcursor{4 {pop}repeat}bind def
/showcursor{}def
/NextStepEncoding where not{
/NextStepEncoding StandardEncoding 256 array copy def
0 [129/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/Ccedilla/Egrave
/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex/Idieresis
/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis/Ugrave/Uacute
/Ucircumflex/Udieresis/Yacute/Thorn/mu/multiply/divide/copyright
176/registered 181/brokenbar 190/logicalnot 192/onesuperior 201/twosuperior
204/threesuperior 209/plusminus/onequarter/onehalf/threequarters/agrave
/aacute/acircumflex/atilde/adieresis/aring/ccedilla/egrave/eacute
/ecircumflex/edieresis/igrave 226/iacute 228/icircumflex/idieresis/eth
/ntilde 236/ograve/oacute/ocircumflex/otilde/odieresis 242/ugrave/uacute
/ucircumflex 246/udieresis/yacute 252/thorn/ydieresis]
{dup type /nametype eq
 {NextStepEncoding 2 index 2 index put pop 1 add}{exch pop}ifelse
}forall pop
/NextStepEncoding NextStepEncoding readonly def   
/_NXfstr 128 string dup 0 (_NX) putinterval def   
/findfont{
 % Because we can never let NextStepEncoding get into
 % SharedFontDirectory, we cannot reencode a font to NextStepEncoding
 % if we are in shared mode.  So if currentshared is true,
 % we call the normal findfont and return that
 /currentshared where {pop currentshared} {false} ifelse
 {//findfont exec}
 {dup _NXfstr 3 125 getinterval cvs length 3 add _NXfstr 0 3 -1 roll
  getinterval cvn exch FontDirectory 2 index known 
  {pop FontDirectory exch get}
  {//findfont exec dup /Encoding get StandardEncoding eq
   {    dup length dict exch
        {1 index /FID ne {2 index 3 1 roll put}{pop pop}ifelse}forall
         dup /Encoding NextStepEncoding put definefont
        }{exch pop} ifelse
   }ifelse
 }ifelse
}bind def
}{pop}ifelse
/_NXProcArray 5 array __NXdef
/_NXChannels 0 __NXdef
/_NXTotalBytes 0 __NXdef
/_NXDoImageOp{
        1 index{dup}{1}ifelse /_NXChannels exch store
        _NXChannels 2 add 2 roll _NXProcArray 0 _NXChannels getinterval astore pop
        5 index 4 index mul 2 index{1 sub 8 idiv 1 add mul}{mul 1 sub 8 idiv 1 add}ifelse
        4 index mul /_NXTotalBytes exch store pop exch pop
        gsave matrix invertmatrix concat 0.5 setgray 0 0 4 2 roll rectfill grestore
        {       0 1 _NXChannels 1 sub{
                        _NXProcArray exch get exec
                        length _NXTotalBytes exch sub /_NXTotalBytes exch store}for
                _NXTotalBytes 0 le{exit}if
        }loop /_NXProcArray 5 array def
}__NXbdef
/colorimage{_NXDoImageOp}__NXbdef
/alphaimage{1 add _NXDoImageOp}def
%%EndDocument

gsave
 /__NXbasematrix matrix currentmatrix def
grestore
%%EndProlog
%%BeginSetup
/TopDrawDict 200 dict def
/xyshow {
    mark exch aload length -2 2 {
        2 roll
    } for counttomark dup 2 add -1 roll pop 1 add -1 roll gsave {
        pop pop grestore rmoveto gsave
    } exch kshow grestore rmoveto
} bind def /currentalpha {
    1
} def /setalpha {
    pop
} bind def
TopDrawDict begin /prt_stack {
    (***Top of Stack\012) print pstack (---Bottom of Stack\012) print flush
} def /prt_top {
    (top item of stack) == dup == flush
} def /prtmat matrix def /prt_ctm {
    (current transformation matrix: ) print prtmat currentmatrix == flush
} def /tmmat matrix def /obmat matrix def /strmat matrix def /pgmat matrix def /idmat matrix def /sc1mt matrix def /sc2mt matrix def /sc3mt matrix def /sc4mt matrix def /sc5mt matrix def /sc6mt matrix def /sc7mt matrix def /inmat matrix def /ctmmt matrix def /octmmt matrix def /clpmt matrix def /weglet_mat matrix def /crlinw 1 def crlinw setlinewidth /crlinjn 0 def crlinjn setlinejoin /crlincp 0 def crlincp setlinecap /crmtrlmt currentmiterlimit def /crstrpat 0 def /crfilpat 0 def /crflat currentflat def /dftflat currentflat def /strinclr false def /crlingry 0 def /crlinred 0 def /crlingrn 0 def /crlinblu 0 def /crlinalph 1 def /filinclr false def /crfilgry 0 def /crfilred 0 def /crfilgrn 0 def /crfilblu 0 def /crfilalph 1 def /crfilstyl 0 def /txtdraw true def /txtinclr false def /txtwpat false def /txtwittrans false def /crtxtgry 0 def /crtxtred 0 def /crtxtgrn 0 def /crtxtblu 0 def /crtxtalph 1 def /crtxtpat 0 def /txlndraw true def /txlninclr false def /txlnwpat false def /txlnwittrans false def /crtxlngry 0 def /crtxlnred 0 def /crtxlngrn 0 def /crtxlnblu 0 def /crtxlnalph 1 def /crtxlnpat 0 def /hilittxt false def /strdsh [2 2] def /dshpatoff 0 def /usedash false def /filwpat false def /strwpat false def /filwittrans false def /strwittrans false def /crfrtarw false def /crendarw false def /rsave 0 def /esave 0 def /sslsave 0 def /lsave 0 def /clpsave 0 def /pathsave 0 def /tpatstr 10 string def /ptdist {
    sub dup mul 3 1 roll sub dup mul add sqrt
} bind def /dodrawctm {
    octmmt currentmatrix pop idmat obmat concatmatrix ctmmt currentmatrix sc1mt concatmatrix setmatrix
} bind def /undrawctm {
    obmat inmat invertmatrix ctmmt currentmatrix sc1mt concatmatrix setmatrix
} bind def /undrawmat {
    obmat aload pop 7 -1 roll astore
} bind def /unpagectm {
    octmmt setmatrix
} bind def /unpagemat {
    pgmat aload pop 7 -1 roll astore
} bind def /drtan {
    gsave 1 setalpha 0 setlinewidth 0.333333 setgray moveto lineto stroke grestore
} bind def /drdgrdln {
    gsave 1 setalpha 0 setlinewidth [1 2] 0 setdash setgray moveto lineto stroke grestore
} bind def /drgrdln {
    gsave 1 setalpha 0 setlinewidth setgray moveto lineto stroke grestore
} bind def end
TopDrawDict begin /TDeps_dict 20 dict def TDeps_dict begin /showpage {
    
} def /copypage {
    
} def /grestoreall {
    
} def /erasepage {
    
} def /nulldevice {
    
} def /exitserver {
    
} def /initgraphics {
    
} def /renderbands {
    
} def /initmatrix {
    
} def /banddevice {
    
} def /setpageparams {
    
} def /framedevice {
    
} def /note {
    
} def end end
TopDrawDict begin /rpath {
    newpath moveto dup 0 exch rlineto exch 0 rlineto 0 exch neg rlineto closepath
} bind def /rfpath {
    /rad3 exch def /hh3 exch def /ww3 exch def /yy1 exch def /xx1 exch def /xx2 xx1 ww3 add def /yy2 yy1 hh3 add def ww3 0.5 mul rad3 lt {
        /rad3 ww3 0.5 mul def
    } if hh3 0.5 mul rad3 lt {
        /rad3 hh3 0.5 mul def
    } if newpath xx1 yy1 hh3 0.5 mul add moveto xx1 yy2 xx2 yy2 rad3 arcto 4 {
        pop
    } repeat xx2 yy2 xx2 yy1 rad3 arcto 4 {
        pop
    } repeat xx2 yy1 xx1 yy1 rad3 arcto 4 {
        pop
    } repeat xx1 yy1 xx1 yy2 rad3 arcto 4 {
        pop
    } repeat closepath
} bind def /rfill {
    gsave dodrawctm crfilalph setalpha filinclr {
        crfilred crfilgrn crfilblu setrgbcolor
    } {
        crfilgry setgray
    } ifelse filwpat {
        4 2 roll rpath crfilpat findfont filwittrans {
            trpatfil
        } {
            oppatfil
        } ifelse
    } {
        rectfill
    } ifelse grestore
} bind def /rstroke {
    gsave dodrawctm crlinalph setalpha crlinw setlinewidth crlincp setlinecap crlinjn setlinejoin crmtrlmt setmiterlimit usedash {
        strdsh dshpatoff setdash
    } if strinclr {
        crlinred crlingrn crlinblu setrgbcolor
    } {
        crlingry setgray
    } ifelse 4 2 roll rpath unpagectm concat strwpat {
        crstrpat findfont strwittrans {
            trpatstrk
        } {
            oppatstrk
        } ifelse
    } {
        stroke
    } ifelse grestore
} bind def /mkrpath {
    dodrawctm rpath unpagectm
} bind def end
TopDrawDict begin /closedspl false def /nspans 0 def /sstrt {
    gsave dodrawctm /closedspl exch def /nspans 0 def newpath
} bind def /sstrtpath {
    dodrawctm /closedspl exch def /nspans 0 def newpath
} bind def /sadd {
    nspans 0 eq {
        moveto
    } {
        pop pop
    } ifelse curveto /nspans nspans 1 add def
} bind def /splstroke {
    nspans 0 gt {
        unpagectm concat closedspl {
            closepath
        } if crlincp setlinecap crlinjn setlinejoin crlinalph setalpha crlinw setlinewidth crmtrlmt setmiterlimit usedash {
            strdsh dshpatoff setdash
        } if strinclr {
            crlinred crlingrn crlinblu setrgbcolor
        } {
            crlingry setgray
        } ifelse strwpat {
            flattenpath crstrpat findfont strwittrans {
                trpatstrk
            } {
                oppatstrk
            } ifelse
        } {
            stroke
        } ifelse
    } {
        pop
    } ifelse grestore
} bind def /splfill {
    nspans 0 gt {
        closedspl {
            closepath
        } if crfilalph setalpha filinclr {
            crfilred crfilgrn crfilblu setrgbcolor
        } {
            crfilgry setgray
        } ifelse filwpat {
            flattenpath crfilpat findfont crfilstyl 0 eq {
                filwittrans {
                    trpateofil
                } {
                    oppateofil
                } ifelse
            } {
                filwittrans {
                    trpatfil
                } {
                    oppatfil
                } ifelse
            } ifelse
        } {
            crfilstyl 0 eq {
                eofill
            } {
                fill
            } ifelse
        } ifelse
    } if grestore
} bind def /mksplpath {
    nspans 0 gt {
        closedspl {
            closepath
        } if
    } if
} bind def end
%%EndSetup
gsave
0 0 425 267 rectclip
-4 -30 translate
4 30 425 267 rectclip
gsave
TopDrawDict begin
/invpats true def
/crlincp 0 def
/crlinjn 0 def
/crmtrlmt 10 def
/crlinw 1 def
/crlinalph 1 def
/crlinred 0.1111 def /crlingrn 0.1111 def /crlinblu 0.1111 def /strinclr true def
/crfilalph 1 def
/crfilred 1 def /crfilgrn 1 def /crfilblu 1 def /filinclr true def
/filwpat false def
TopDrawDict /piddict known TopDrawDict /ipiddict known or {
    1 getpat /crfilpat exch def
} if
/filwittrans false def
/strwpat false def
TopDrawDict /piddict known TopDrawDict /ipiddict known or {
    1 getpat /crstrpat exch def
} if
/strwittrans false def
/usedash false def
/strdsh [2 2] def /dshpatoff 0 def
/crendarw false def
/crfrtarw false def
/txtdraw false def
/crtxtalph 1 def
/crtxtred 0 def /crtxtgrn 0 def /crtxtblu 0 def /txtinclr true def
/txtwpat false def
/txtwittrans false def
/txlndraw false def
/crtxlnalph 1 def
/crtxlnred 0 def /crtxlngrn 0 def /crtxlnblu 0 def /txlninclr true def
/txlnwittrans false def
/txlnwpat false def
/crlinred 0 def /crlingrn 0 def /crlinblu 0 def /strinclr true def
gsave clpmt currentmatrix pop newpath
424 253 4 35.5 [1 0 0 1.047431 0 -6.183802] mkrpath
clip
newpath
clpmt setmatrix
gsave
/epssave save def TDeps_dict begin userdict begin
[1 0 0 1 0 0] dodrawctm
4 35.5 translate
%%BeginFile: /tmp/topdraw_eps_790_49
%!PS-Adobe-2.0 EPSF-1.2
%%BoundingBox: 0 0 424 253
%%Creator: Mathematica
%%Title: Clipboard
%%CreationDate: Never Never
%%EndComments
50 dict begin
/Mnodistort true def
/pageDashArray [4] def
/nullDashArray [] def

% Compute the minimum of two numbers.
/Mmin {         % p q Mmin min(p,q)
        2 copy          % p q p q
        gt              % p q p>q?
        { exch } if     % min(p,q) max(p,q)
        pop             % min(p,q)
} bind def


% Compute the maximum of two numbers.
/Mmax {         % p q Mmax max(p,q)
        2 copy          % p q p q
        lt              % p q p<q?
        { exch } if     % max(p,q) min(p,q)
        pop             % max(p,q)
} bind def

/Mpstart {
    MathPictureStart
} bind def
/Mpend {
    MathPictureEnd
} bind def
/Mscale {
    0 1 0 1
    5 -1 roll
    MathScale
} bind def
/Plain
        /Courier findfont
def
/Bold
        /Courier-Bold findfont
def
/Italic
        /Courier-Oblique findfont
def
/MathPictureStart {
        gsave
        newpath
        /Mtmatrix
        matrix currentmatrix
        def
        Plain
        Mfontsize scalefont
        setfont
0 setgray 0 setlinewidth
} bind def
/MathPictureEnd {
        grestore
} bind def
/Mdot {
        moveto
        0 0 rlineto
        stroke
} def
/Mtetra {
        moveto
        lineto
        lineto
        lineto
        fill
} def
/Metetra {
        moveto
        lineto
        lineto
        lineto
        closepath
        gsave
        fill
        grestore
        0 setgray
        stroke
} def
/Mistroke {
        flattenpath
        0 0 0
        {
        4 2 roll
        pop pop
        }
        {
        4 -1 roll
        2 index
        sub dup mul
        4 -1 roll
        2 index
        sub dup mul
        add sqrt
        4 -1 roll
        add
        3 1 roll
        }
        {
        stop
        }
        {
        stop
        }
        pathforall
        pop pop
        currentpoint
        stroke
        moveto
        currentdash
        3 -1 roll
        add
        setdash
} def
/Mfstroke {
        stroke
        currentdash
        pop 0
        setdash
} def
/Msboxa {
        newpath
        5 -1 roll
        Mvboxa
        pop
        6 -1 roll
        5 -1 roll
        4 -1 roll
        Msboxa1
        5 -3 roll
        Msboxa1
        [
        7 -2 roll
        [ 2 index 2 index
        10 -1 roll
        9 -1 roll
        ]
        6 1 roll
        5 -2 roll
        ]
} bind def
        
/Msboxa1 {
        sub
        2 div
        dup
        2 index
        1 add
        mul
        3 -1 roll
        -1 add
        3 -1 roll
        mul
} bind def
/Mvboxa {
        gsave
        newpath
        [ true
        3 -1 roll
        {
        Mbbox
        5 -1 roll
        {
        0
        5 1 roll
        }
        {
        7 -1 roll
        exch sub
        (m) stringwidth pop
        .3 mul
        sub
        7 1 roll
        6 -1 roll
        4 -1 roll
        Mmin
        3 -1 roll
        5 index
        add
        5 -1 roll
        4 -1 roll
        Mmax
        4 -1 roll
        }
        ifelse
        false
        }
        forall
        { stop } if
        counttomark
        1 add
        4 roll
        ]
        grestore
} bind def
/Mbbox {
        0 0 moveto
        false charpath
        flattenpath
        pathbbox
        newpath
} bind def
/Mmin {
        2 copy
        gt
        { exch } if
        pop
} bind def
/Mmax {
        2 copy
        lt
        { exch } if
        pop
} bind def
/Mshowa {
        4 -2 roll
        moveto
        2 index
        Mtmatrix setmatrix
        Mvboxa
        7 1 roll
        6 -1 roll
        5 -1 roll
        4 -1 roll
        Mshowa1
        4 1 roll
        Mshowa1
        rmoveto
        currentpoint
        0 1
        4 index length
        -1 add
        {
        2 index
        4 index
        2 index
        get
        3 index
        add
        moveto
        4 index
        exch get
        show
        } for
        pop pop pop pop
        Mgmatrix setmatrix
} bind def
/Mshowa1 {
        2 copy
        add
        4 1 roll
        sub
        mul
        sub
        -2 div
} bind def
/MathScale {
        Mwidth
        Mheight
        Mlp
        translate
        scale
        /Mgmatrix
        matrix currentmatrix
        def
        /Msaveaa exch def
        /Msavebb exch def
        /Msavecc exch def
        /Msavedd exch def
} bind def
/Mlp {
        3 copy
        Mlpfirst
        {
        Mnodistort
        {
        Mmin
        dup
        } if
        4 index
        2 index
        2 index
        Mlprun
        11 index
        11 -1 roll
        10 -4 roll
        Mlp1
        8 index
        9 -5 roll
        Mlp1
        4 -1 roll
        and
        { exit } if
        3 -1 roll
        pop pop
        } loop
        exch
        3 1 roll
        7 -3 roll
        pop pop pop
} bind def
/Mlpfirst {
        3 -1 roll
        dup length
        2 copy
        -2 add
        get
        aload
        pop pop pop
        4 -2 roll
        -1 add
        get
        aload
        pop pop pop
        6 -1 roll
        3 -1 roll
        5 -1 roll
        sub
        dup /MsaveAx exch def
        div
        4 1 roll
        exch sub
        dup /MsaveAy exch def
        div
} bind def
/Mlprun {
        2 copy
        4 index
        0 get
        dup
        4 1 roll
        Mlprun1
        3 copy
        8 -2 roll
        9 -1 roll
        {
        3 copy
        Mlprun1
        3 copy
        11 -3 roll
        /gt Mlpminmax
        8 3 roll
        11 -3 roll
        /lt Mlpminmax
        8 3 roll
        } forall
        pop pop pop pop
        3 1 roll
        pop pop
        aload pop
        5 -1 roll
        aload pop
        exch
        6 -1 roll
        Mlprun2
        8 2 roll
        4 -1 roll
        Mlprun2
        6 2 roll
        3 -1 roll
        Mlprun2
        4 2 roll
        exch
        Mlprun2
        6 2 roll
} bind def
/Mlprun1 {
        aload pop
        exch
        6 -1 roll
        5 -1 roll
        mul add
        4 -2 roll
        mul
        3 -1 roll
        add
} bind def
/Mlprun2 {
        2 copy
        add 2 div
        3 1 roll
        exch sub
} bind def
/Mlpminmax {
        cvx
        2 index
        6 index
        2 index
        exec
        {
        7 -3 roll
        4 -1 roll
        } if
        1 index
        5 index
        3 -1 roll
        exec
        {
        4 1 roll
        pop
        5 -1 roll
        aload
        pop pop
        4 -1 roll
        aload pop
        [
        8 -2 roll
        pop
        5 -2 roll
        pop
        6 -2 roll
        pop
        5 -1 roll
        ]
        4 1 roll
        pop
        }
        {
        pop pop pop
        } ifelse
} bind def
/Mlp1 {
        5 index
        3 index sub
        5 index
        2 index mul
        1 index
        le
        1 index
        0 le
        or
        dup
        not
        {
        1 index
        3 index div
        .99999 mul
        8 -1 roll
        pop
        7 1 roll
        }
        if
        8 -1 roll
        2 div
        7 -2 roll
        pop sub
        5 index
        6 -3 roll
        pop pop
        mul sub
        exch
} bind def
/Mfontsize      12 def
/Mleft          0.000000 def
/Mbottom        253.000000 def
/Mwidth         424.000000 def
/Mheight        253.000000 def
/Courier findfont 12 scalefont setfont
%!
%%Creator: Mathematica
%%AspectRatio: 0.61803 
MathPictureStart
% Scaling calculations
0.2619 0.2381 0.01472 0.5886 [
[(-1)] 0.02381 0.00222 0 1 Msboxa
[(1)] 0.5 0.00222 0 1 Msboxa
[(2)] 0.7381 0.00222 0 1 Msboxa
[(3)] 0.97619 0.00222 0 1 Msboxa
[( h)] 1.00625 0.01472 -1 0 Msboxa
[(0.2)] 0.2494 0.13244 1 0 Msboxa
[(0.4)] 0.2494 0.25016 1 0 Msboxa
[(0.6)] 0.2494 0.36788 1 0 Msboxa
[(0.8)] 0.2494 0.4856 1 0 Msboxa
[(1)] 0.2494 0.60332 1 0 Msboxa
[(MSE)] 0.2619 0.62428 0 -1 Msboxa
[ -0.001 -0.001 0 0 ]
[ 1.001 0.61903 0 0 ]
] MathScale
% Start of Graphics
1 setlinecap
1 setlinejoin
newpath
%%Object: Graphics
[ ] 0 setdash
0 setgray
gsave
gsave
0.002 setlinewidth
0 0.01472 moveto
1 0.01472 lineto
stroke
0.02381 0.00847 moveto
0.02381 0.02097 lineto
stroke
0 setgray
[(-1)] 0.02381 0.00222 0 1 Mshowa
0.5 0.00847 moveto
0.5 0.02097 lineto
stroke
0 setgray
[(1)] 0.5 0.00222 0 1 Mshowa
0.7381 0.00847 moveto
0.7381 0.02097 lineto
stroke
0 setgray
[(2)] 0.7381 0.00222 0 1 Mshowa
0.97619 0.00847 moveto
0.97619 0.02097 lineto
stroke
0 setgray
[(3)] 0.97619 0.00222 0 1 Mshowa
0 setgray
[( h)] 1.00625 0.01472 -1 0 Mshowa
0.2619 0 moveto
0.2619 0.61803 lineto
stroke
0.25565 0.13244 moveto
0.26815 0.13244 lineto
stroke
0 setgray
[(0.2)] 0.2494 0.13244 1 0 Mshowa
0.25565 0.25016 moveto
0.26815 0.25016 lineto
stroke
0 setgray
[(0.4)] 0.2494 0.25016 1 0 Mshowa
0.25565 0.36788 moveto
0.26815 0.36788 lineto
stroke
0 setgray
[(0.6)] 0.2494 0.36788 1 0 Mshowa
0.25565 0.4856 moveto
0.26815 0.4856 lineto
stroke
0 setgray
[(0.8)] 0.2494 0.4856 1 0 Mshowa
0.25565 0.60332 moveto
0.26815 0.60332 lineto
stroke
0 setgray
[(1)] 0.2494 0.60332 1 0 Mshowa
0 setgray
[(MSE)] 0.2619 0.62428 0 -1 Mshowa
grestore
grestore
0 0 moveto
1 0 lineto
1 0.618034 lineto
0 0.618034 lineto
closepath
clip
newpath
0 setgray
gsave
gsave
0.004 setlinewidth
0.02381 0.60332 moveto
0.06349 0.50931 lineto
0.10317 0.42347 lineto
0.14286 0.3458 lineto
0.18254 0.27632 lineto
0.22222 0.215 lineto
0.2619 0.16187 lineto
0.30159 0.1169 lineto
0.34127 0.08012 lineto
0.38095 0.0515 lineto
0.40079 0.04026 lineto
0.42063 0.03107 lineto
0.44048 0.02391 lineto
0.4504 0.0211 lineto
0.46032 0.0188 lineto
0.47024 0.01701 lineto
0.4752 0.01631 lineto
0.48016 0.01574 lineto
0.48512 0.01529 lineto
0.4876 0.01511 lineto
0.49008 0.01497 lineto
0.49256 0.01486 lineto
0.4938 0.01481 lineto
0.49504 0.01478 lineto
0.49628 0.01475 lineto
0.49752 0.01473 lineto
0.49876 0.01472 lineto
0.5 0.01472 lineto
0.50124 0.01472 lineto
0.50248 0.01473 lineto
0.50372 0.01475 lineto
0.50496 0.01478 lineto
0.50744 0.01486 lineto
0.50992 0.01497 lineto
0.5124 0.01511 lineto
0.51488 0.01529 lineto
0.51984 0.01574 lineto
0.5248 0.01631 lineto
0.52976 0.01701 lineto
0.53968 0.0188 lineto
0.5496 0.0211 lineto
0.55952 0.02391 lineto
0.57937 0.03107 lineto
0.59921 0.04026 lineto
0.61905 0.0515 lineto
0.65873 0.08012 lineto
0.69841 0.1169 lineto
0.7381 0.16187 lineto
0.77778 0.215 lineto
0.81746 0.27632 lineto
Mistroke
0.85714 0.3458 lineto
0.89683 0.42347 lineto
0.93651 0.50931 lineto
0.97619 0.60332 lineto
Mfstroke
grestore
grestore
% End of Graphics
MathPictureEnd
%%EPS Trailer
end
%%EndFile
end end epssave restore
grestore
grestore
1 0 0 1 0 0 sc5mt astore 4 35.5 424 253 1 0 0 1.047431 0 -6.183802 sc6mt astore rstroke
/crlinred 0.1111 def /crlingrn 0.1111 def /crlinblu 0.1111 def /strinclr true def
false [1 0 0 1 0 0] sstrt
systemdict
begin
48 48 340 273 setbbox
157 273 moveto
157 273 49 229.5 49 229.5 curveto
49 229.5 340 160 340 160 curveto
340 160 134 89.5 134 89.5 curveto
134 89.5 269 71 269 71 curveto
269 71 190 51 190 51 curveto
190 51 225 50 225 50 curveto
225 50 200 48 200 48 curveto
200 48 240 54 240 54 curveto
240 54 188 52 188 52 curveto
end
/nspans 9 def [1 0 0 1 0 0] splstroke
end
grestore
grestore
%%Trailer

%%EndDocument
 GE /Times-Bold SF
16091 28176 MT
(Figure 2-2:)SH
/Times-Roman SF
21864 XM
(Example performance surface and an LMS coefficient trajectory.)SH
13300 31161 MT
(Note that when the statistics R and P are constant, the performance surface)
105 W( and optimal coef-)104 W
10800 32900 MT
(ficient value are also constant.  It will be shown in Section 2.6 that the EMAP procedure is equivalent)12 W
10800 34639 MT
(to MMSE adaptive filtering with a time-varying optimal)
57 W( coefficient matrix and performance surface.)56 W
10800 36378 MT
(Then, in Section 2.7, an)
71 W( LMS procedure which performs a stochastic gradient search over this time-)72 W
10800 38117 MT
(varying surface is derived.)SH
13 /Times-Bold AF
10800 41868 MT
(2.3. Problem Statement and Assumptions)SH
11 /Times-Roman AF
13300 44783 MT
(Consider a)
272 W( pattern-classification problem with C decision classes and D features, or a C-)271 W
9 /Times-Italic AF
42413 46159 MT
(th)SH
/Times-Roman SF
55075 XM
(2)SH
11 SS 
10800 46522 MT
(component mixture in D dimensions.  Let the set of input data for the)28 W
/Times-Italic SF
41957 XM
(j)SH
/Times-Roman SF
43416 XM
(class be)
28 W( {)29 W
/Times-Bold SF
(x)SH
/Times-Roman SF
49202 XM
(,)SH
/Times-Bold SF
49752 XM
(x)SH
/Times-Roman SF
51227 XM
(,...,)SH
/Times-Bold SF
52877 XM
(x)SH
/Times-Roman SF
54547 XM
(})SH
55525 XM
(.)SH
9 /Times-Italic AF
48277 46882 MT
(j,1)SH
50302 XM
(j,2)SH
53427 XM
(j,n)SH
7 SS 
54352 47207 MT
(j)SH
11 /Times-Roman AF
10800 48261 MT
(The data may be cepstral coefficients derived from a)
133 W( portion of the speech waveform in an HMM)132 W
10800 50000 MT
(system, or)
75 W( it may be an acoustic feature vector in a feature-based recognition system.  It is assumed)76 W
10800 51739 MT
(that the random vector)48 W
/Times-Bold SF
21194 XM
(x)SH
/Times-Roman SF
22317 XM
(is normally distributed about a mean vector)48 W
/Symbol SF
42052 XM
(m)SH
/Times-Roman SF
43258 XM
(with a covariance matrix)47 W
/Symbol SF
54624 XM
(S)SH
/Times-Roman SF
55525 XM
(,)SH
9 /Times-Italic AF
21744 52099 MT
(j)SH
42686 XM
(j)SH
55275 XM
(j)SH
11 SS 
10800 53478 MT
(i.e. p)133 W
/Times-Roman SF
(\050)SH
/Times-Bold SF
(x)SH
/Times-Roman SF
14268 XM
(|)SH
/Symbol SF
(m)SH
/Times-Roman SF
15372 XM
(\051)SH
/Symbol SF
16013 XM
(\273)SH
/Times-Italic SF
16892 XM
(N)SH
/Times-Roman SF
(\050)SH
/Symbol SF
(m)SH
/Times-Roman SF
18876 XM
(,)SH
/Symbol SF
(S)SH
/Times-Roman SF
20052 XM
(\051, and that all data samples are independent.  The class mean vectors {)133 W
/Symbol SF
(m)SH
/Times-Roman SF
53522 XM
(} are)133 W
9 /Times-Italic AF
14018 53838 MT
(j)SH
15122 XM
(j)SH
18626 XM
(j)SH
19802 XM
(j)SH
53272 XM
(j)SH
11 /Times-Roman AF
10800 55217 MT
(assumed to be jointly Gaussian random variables which are correlated across decision)
14 W( classes.  Defin-)13 W
9 /Times-Italic AF
27780 56593 MT
(T)SH
29914 XM
(T)SH
33298 XM
(T)SH
34164 XM
(T)SH
11 /Times-Roman AF
10800 56956 MT
(ing the overall mean vector)
129 W( as)130 W
/Symbol SF
25076 XM
(m)SH
/Times-Roman SF
(=[)SH
/Symbol SF
(m)SH
/Times-Roman SF
28280 XM
(,)SH
/Symbol SF
28830 XM
(m)SH
/Times-Roman SF
30414 XM
(,...,)SH
/Symbol SF
32064 XM
(m)SH
/Times-Roman SF
33798 XM
(])SH
34664 XM
(, this CD-dimensional vector is assumed to be)130 W
9 /Times-Italic AF
27330 57316 MT
(1)SH
29464 XM
(2)SH
32698 XM
(C)SH
11 /Times-Roman AF
10800 58695 MT
(normally distributed around the)233 W
/Times-Italic SF
25908 XM
(a priori)233 W
/Times-Roman SF
30042 XM
(mean vector)232 W
/Symbol SF
36186 XM
(m)SH
/Times-Roman SF
37777 XM
(with CD)232 W
/Times-Italic SF
(x)SH
/Times-Roman SF
(CD covariance matrix)232 W
/Symbol SF
52939 XM
(S)SH
/Times-Roman SF
54040 XM
(, so)232 W
9 /Times-Italic AF
36820 59055 MT
(o)SH
53590 XM
(o)SH
11 /Times-Roman AF
10800 60434 MT
(p\050)SH
/Symbol SF
(m)SH
/Times-Roman SF
(\051)SH
/Symbol SF
12991 XM
(\273)SH
/Times-Roman SF
13870 XM
(N\050)SH
/Symbol SF
(m)SH
/Times-Roman SF
16114 XM
(,)SH
/Symbol SF
(S)SH
/Times-Roman SF
17490 XM
(\051. The)
431 W( statistics {)78 W
/Symbol SF
(S)SH
/Times-Roman SF
26472 XM
(},)SH
/Symbol SF
27628 XM
(S)SH
/Times-Roman SF
28729 XM
(, and)78 W
/Symbol SF
31298 XM
(m)SH
/Times-Roman SF
32735 XM
(are assumed to be known,)
78 W( or they can be estimated)79 W
9 /Times-Italic AF
15664 60794 MT
(o)SH
17040 XM
(o)SH
26222 XM
(j)SH
28279 XM
(o)SH
31932 XM
(o)SH
11 /Times-Roman AF
10800 62173 MT
(from a)
280 W( larger body of training data.  Denote the set of observations from a single speaker as)279 W
/Symbol SF
10800 63912 MT
(c)SH
/Times-Roman SF
(={)SH
/Times-Bold SF
(x)SH
/Times-Roman SF
14227 XM
(,...,)SH
/Times-Bold SF
15877 XM
(x)SH
/Times-Roman SF
17902 XM
(,)SH
/Times-Bold SF
18452 XM
(x)SH
/Times-Roman SF
20127 XM
(,...,)SH
/Times-Bold SF
21777 XM
(x)SH
/Times-Roman SF
23802 XM
(,)SH
/Times-Bold SF
24352 XM
(x)SH
/Times-Roman SF
26177 XM
(,...,)SH
/Times-Bold SF
27827 XM
(x)SH
/Times-Roman SF
30119 XM
(}. The)
507 W( parameter estimation)
116 W( problem considered here is)117 W
9 /Times-Italic AF
13102 64272 MT
(1,1)SH
16427 XM
(1,n)SH
19002 XM
(2,1)SH
22327 XM
(2,n)SH
24902 XM
(C,1)SH
28377 XM
(C,n)SH
7 SS 
17552 64597 MT
(1)SH
23452 XM
(2)SH
29652 XM
(C)SH
11 /Times-Roman AF
10800 65651 MT
(the production of)
20 W( reliable estimates of the parameter)19 W
/Symbol SF
34228 XM
(m)SH
/Times-Roman SF
35156 XM
(given the information provided by the samples)19 W
10800 67390 MT
(in)SH
/Symbol SF
11931 XM
(c)SH
/Times-Roman SF
12810 XM
(and the)SH
/Times-Italic SF
16292 XM
(a priori)SH
/Times-Roman SF
19960 XM
(statistics {)SH
/Symbol SF
(S)SH
/Times-Roman SF
25454 XM
(},)SH
/Symbol SF
26532 XM
(S)SH
/Times-Roman SF
27633 XM
(, and)SH
/Symbol SF
30046 XM
(m)SH
/Times-Roman SF
31130 XM
(.)SH
9 /Times-Italic AF
25204 67750 MT
(j)SH
27183 XM
(o)SH
30680 XM
(o)SH
10800 50 10800 70172 UL
7 /Times-Roman AF
11700 71673 MT
(2)SH
9 SS 
12050 72000 MT
(All notational conventions used in the present study are summarized in the Nomenclature section at the end of the thesis.)SH
ES
%%Page: 16 17
BS
0 SI
10 /Times-Roman AF
54800 4286 MT
(16)SH
11 SS 
1014 1000 0 11700 37721 GB 
%%BeginDocument: /usr0/rozzi/Documentation/PhDThesis/Chapter2/DataDist.eps
%!PS-Adobe-2.0 EPSF-2.0
%%Title: 
%%Creator: TopDraw
%%CreationDate: Mon Apr 15 12:05:18 1991
%%For: rozzi
%%DocumentFonts: (atend)
%%%Pages: 0 1
%%BoundingBox: 0 0 426 301
%%EndComments

%%BeginDocument: /usr/lib/NextStep/printPackage.ps
%!PS-Adobe-2.0
%%Title: Printing Package
%%EndComments
%Version: 2.0
%Copyright: 1988, NeXT, Inc.

/__NXdef{1 index where{pop pop pop}{def}ifelse}bind def
/__NXbdef{1 index where{pop pop pop}{bind def}ifelse}bind def
/UserObjects 10 array __NXdef
/defineuserobject{
        exch dup 1 add dup UserObjects length gt{
                array dup 0 UserObjects putinterval
                /UserObjects exch def
        }{pop}ifelse UserObjects exch 3 -1 roll put
}__NXbdef
/undefineuserobject{UserObjects exch null put}__NXbdef
/execuserobject{UserObjects exch get exec}__NXbdef
/__NXRectPath{4 2 roll moveto 1 index 0 rlineto
0 exch rlineto neg 0 rlineto closepath}__NXbdef
/__NXProcessRectArgs{
        1 index type /arraytype eq{
                exch 0 4 2 index length 1 sub{
                        dup 3 add 1 exch{1 index exch get exch}for
                        5 1 roll 5 index exec
                }for pop pop
        }{exec}ifelse
}__NXbdef
/rectfill{gsave newpath {__NXRectPath fill} __NXProcessRectArgs grestore}__NXbdef
/rectclip{newpath {__NXRectPath} __NXProcessRectArgs clip newpath}__NXbdef
/rectstroke{
        gsave newpath dup type /arraytype eq{dup length 6 eq}{false}ifelse{
                {gsave __NXRectPath null concat stroke grestore}
                dup length array cvx copy dup 2 4 -1 roll put __NXProcessRectArgs
        }{{__NXRectPath stroke} __NXProcessRectArgs}ifelse grestore
}__NXbdef
/xyshow{
        0 1 3 index length 1 sub{
                currentpoint 4 index 3 index 1 getinterval show
                3 index 3 index 2 mul 1 add get add exch
                3 index 3 index 2 mul get add exch moveto pop
        }for pop pop
}__NXbdef
/xshow{
        0 1 3 index length 1 sub{
                currentpoint 4 index 3 index 1 getinterval show
                exch 3 index 3 index get add exch moveto pop
        }for pop pop
}__NXbdef
/yshow{
        0 1 3 index length 1 sub{
                currentpoint 4 index 3 index 1 getinterval show
                3 index 3 index get add moveto pop
        }for pop pop
}__NXbdef
/arct{arcto pop pop pop pop}__NXbdef
/setbbox{pop pop pop pop}__NXbdef
/ucache{}__NXbdef
/ucachestatus{mark 0 0 0 0 0}__NXbdef
/setucacheparams{cleartomark}__NXbdef
/uappend{systemdict begin cvx exec end}__NXbdef
/ueofill{gsave newpath uappend eofill grestore}__NXbdef
/ufill{gsave newpath uappend fill grestore}__NXbdef
/ustroke{
        gsave newpath dup length 6 eq
        {exch uappend concat}{uappend}ifelse
        stroke grestore
}__NXbdef
/__NXustrokepathMatrix dup where {pop pop}{matrix def}ifelse
/ustrokepath{
        newpath dup length 6 eq{
                exch uappend __NXustrokepathMatrix currentmatrix exch concat
                strokepath setmatrix
        }{uappend strokepath}ifelse
} __NXbdef
/upath{
        [exch {/ucache cvx}if pathbbox /setbbox cvx
         {/moveto cvx}{/lineto cvx}{/curveto cvx}{/closepath cvx}pathforall]cvx
} __NXbdef
/setstrokeadjust{pop}__NXbdef
/currentstrokeadjust{false}__NXbdef
/selectfont{exch findfont exch
dup type /arraytype eq {makefont}{scalefont}ifelse setfont}__NXbdef
/_NXCombineArrays{
        counttomark dup 2 add index dup length 3 -1 roll {
                2 index length sub dup 4 1 roll 1 index exch 4 -1 roll putinterval exch
        }repeat pop pop pop
}__NXbdef
/setcmykcolor{
        1.0 exch sub dup dup 6 -1 roll
        sub dup 0 lt{pop 0}if 5 1 roll
        4 -1 roll sub dup 0 lt{pop 0}if 3 1 roll
        exch sub dup 0 lt{pop 0}if setrgbcolor
}__NXbdef
/currentcmykcolor{currentrgbcolor 3{1.0 exch sub 3 1 roll}repeat 0}__NXbdef
/flushgraphics{}def
/setwindowtype{pop pop}def
/currentwindowtype{pop 0}def
/setalpha{pop}def
/currentalpha{1.0}def
/hidecursor{}def
/obscurecursor{}def
/revealcursor{}def
/setcursor{4 {pop}repeat}bind def
/showcursor{}def
/NextStepEncoding where not{
/NextStepEncoding StandardEncoding 256 array copy def
0 [129/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/Ccedilla/Egrave
/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex/Idieresis
/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis/Ugrave/Uacute
/Ucircumflex/Udieresis/Yacute/Thorn/mu/multiply/divide/copyright
176/registered 181/brokenbar 190/logicalnot 192/onesuperior 201/twosuperior
204/threesuperior 209/plusminus/onequarter/onehalf/threequarters/agrave
/aacute/acircumflex/atilde/adieresis/aring/ccedilla/egrave/eacute
/ecircumflex/edieresis/igrave 226/iacute 228/icircumflex/idieresis/eth
/ntilde 236/ograve/oacute/ocircumflex/otilde/odieresis 242/ugrave/uacute
/ucircumflex 246/udieresis/yacute 252/thorn/ydieresis]
{dup type /nametype eq
 {NextStepEncoding 2 index 2 index put pop 1 add}{exch pop}ifelse
}forall pop
/NextStepEncoding NextStepEncoding readonly def   
/_NXfstr 128 string dup 0 (_NX) putinterval def   
/findfont{
 % Because we can never let NextStepEncoding get into
 % SharedFontDirectory, we cannot reencode a font to NextStepEncoding
 % if we are in shared mode.  So if currentshared is true,
 % we call the normal findfont and return that
 /currentshared where {pop currentshared} {false} ifelse
 {//findfont exec}
 {dup _NXfstr 3 125 getinterval cvs length 3 add _NXfstr 0 3 -1 roll
  getinterval cvn exch FontDirectory 2 index known 
  {pop FontDirectory exch get}
  {//findfont exec dup /Encoding get StandardEncoding eq
   {    dup length dict exch
        {1 index /FID ne {2 index 3 1 roll put}{pop pop}ifelse}forall
         dup /Encoding NextStepEncoding put definefont
        }{exch pop} ifelse
   }ifelse
 }ifelse
}bind def
}{pop}ifelse
/_NXProcArray 5 array __NXdef
/_NXChannels 0 __NXdef
/_NXTotalBytes 0 __NXdef
/_NXDoImageOp{
        1 index{dup}{1}ifelse /_NXChannels exch store
        _NXChannels 2 add 2 roll _NXProcArray 0 _NXChannels getinterval astore pop
        5 index 4 index mul 2 index{1 sub 8 idiv 1 add mul}{mul 1 sub 8 idiv 1 add}ifelse
        4 index mul /_NXTotalBytes exch store pop exch pop
        gsave matrix invertmatrix concat 0.5 setgray 0 0 4 2 roll rectfill grestore
        {       0 1 _NXChannels 1 sub{
                        _NXProcArray exch get exec
                        length _NXTotalBytes exch sub /_NXTotalBytes exch store}for
                _NXTotalBytes 0 le{exit}if
        }loop /_NXProcArray 5 array def
}__NXbdef
/colorimage{_NXDoImageOp}__NXbdef
/alphaimage{1 add _NXDoImageOp}def
%%EndDocument

gsave
 /__NXbasematrix matrix currentmatrix def
grestore
%%EndProlog
%%BeginSetup
/TopDrawDict 200 dict def
/xyshow {
    mark exch aload length -2 2 {
        2 roll
    } for counttomark dup 2 add -1 roll pop 1 add -1 roll gsave {
        pop pop grestore rmoveto gsave
    } exch kshow grestore rmoveto
} bind def /currentalpha {
    1
} def /setalpha {
    pop
} bind def
TopDrawDict begin /prt_stack {
    (***Top of Stack\012) print pstack (---Bottom of Stack\012) print flush
} def /prt_top {
    (top item of stack) == dup == flush
} def /prtmat matrix def /prt_ctm {
    (current transformation matrix: ) print prtmat currentmatrix == flush
} def /tmmat matrix def /obmat matrix def /strmat matrix def /pgmat matrix def /idmat matrix def /sc1mt matrix def /sc2mt matrix def /sc3mt matrix def /sc4mt matrix def /sc5mt matrix def /sc6mt matrix def /sc7mt matrix def /inmat matrix def /ctmmt matrix def /octmmt matrix def /clpmt matrix def /weglet_mat matrix def /crlinw 1 def crlinw setlinewidth /crlinjn 0 def crlinjn setlinejoin /crlincp 0 def crlincp setlinecap /crmtrlmt currentmiterlimit def /crstrpat 0 def /crfilpat 0 def /crflat currentflat def /dftflat currentflat def /strinclr false def /crlingry 0 def /crlinred 0 def /crlingrn 0 def /crlinblu 0 def /crlinalph 1 def /filinclr false def /crfilgry 0 def /crfilred 0 def /crfilgrn 0 def /crfilblu 0 def /crfilalph 1 def /crfilstyl 0 def /txtdraw true def /txtinclr false def /txtwpat false def /txtwittrans false def /crtxtgry 0 def /crtxtred 0 def /crtxtgrn 0 def /crtxtblu 0 def /crtxtalph 1 def /crtxtpat 0 def /txlndraw true def /txlninclr false def /txlnwpat false def /txlnwittrans false def /crtxlngry 0 def /crtxlnred 0 def /crtxlngrn 0 def /crtxlnblu 0 def /crtxlnalph 1 def /crtxlnpat 0 def /hilittxt false def /strdsh [2 2] def /dshpatoff 0 def /usedash false def /filwpat false def /strwpat false def /filwittrans false def /strwittrans false def /crfrtarw false def /crendarw false def /rsave 0 def /esave 0 def /sslsave 0 def /lsave 0 def /clpsave 0 def /pathsave 0 def /tpatstr 10 string def /ptdist {
    sub dup mul 3 1 roll sub dup mul add sqrt
} bind def /dodrawctm {
    octmmt currentmatrix pop idmat obmat concatmatrix ctmmt currentmatrix sc1mt concatmatrix setmatrix
} bind def /undrawctm {
    obmat inmat invertmatrix ctmmt currentmatrix sc1mt concatmatrix setmatrix
} bind def /undrawmat {
    obmat aload pop 7 -1 roll astore
} bind def /unpagectm {
    octmmt setmatrix
} bind def /unpagemat {
    pgmat aload pop 7 -1 roll astore
} bind def /drtan {
    gsave 1 setalpha 0 setlinewidth 0.333333 setgray moveto lineto stroke grestore
} bind def /drdgrdln {
    gsave 1 setalpha 0 setlinewidth [1 2] 0 setdash setgray moveto lineto stroke grestore
} bind def /drgrdln {
    gsave 1 setalpha 0 setlinewidth setgray moveto lineto stroke grestore
} bind def end
TopDrawDict begin /elli {
    gsave dodrawctm translate scale newpath dup dup 0 360 arc closepath unpagectm {
        crfilalph setalpha filinclr {
            crfilred crfilgrn crfilblu setrgbcolor
        } {
            crfilgry setgray
        } ifelse gsave filwpat {
            crfilpat findfont filwittrans {
                trpatfil
            } {
                oppatfil
            } ifelse
        } {
            fill
        } ifelse grestore
    } if {
        crlinalph setalpha crlinw setlinewidth usedash {
            strdsh dshpatoff setdash
        } if strinclr {
            crlinred crlingrn crlinblu setrgbcolor
        } {
            crlingry setgray
        } ifelse concat strwpat {
            crstrpat findfont strwittrans {
                trpatstrk
            } {
                oppatstrk
            } ifelse
        } {
            stroke
        } ifelse
    } {
        pop
    } ifelse grestore
} bind def /estroke {
    gsave dodrawctm translate scale newpath dup dup 0 360 arc closepath crlinalph setalpha crlinw setlinewidth usedash {
        strdsh dshpatoff setdash
    } if strinclr {
        crlinred crlingrn crlinblu setrgbcolor
    } {
        crlingry setgray
    } ifelse unpagectm concat strwpat {
        crstrpat findfont strwittrans {
            trpatstrk
        } {
            oppatstrk
        } ifelse
    } {
        stroke
    } ifelse grestore
} bind def /efill {
    gsave dodrawctm translate scale newpath dup dup 0 360 arc closepath unpagectm crfilalph setalpha filinclr {
        crfilred crfilgrn crfilblu setrgbcolor
    } {
        crfilgry setgray
    } ifelse filwpat {
        crfilpat findfont filwittrans {
            trpatfil
        } {
            oppatfil
        } ifelse
    } {
        fill
    } ifelse grestore
} bind def /apstroke {
    gsave dodrawctm /pie exch def /radius exch def /yscale exch def /xscale exch def /yy exch def /xx exch def /angle2 exch def /angle1 exch def /closed exch def xx yy translate xscale yscale scale newpath pie {
        radius dup moveto
    } if radius dup dup angle1 angle2 arc closed pie or {
        closepath
    } if crlinalph setalpha closed not pie not and {
        crfrtarw {
            dup crlinw exch gsave newpath angle1 1 add cos radius mul radius add angle1 1 add sin radius mul radius add moveto angle1 cos radius mul radius add angle1 sin radius mul radius add lineto unpagectm {
                
            } {
                
            } {
                
            } {
                
            } pathforall arow grestore
        } if crendarw {
            dup crlinw exch gsave newpath angle2 1 sub cos radius mul radius add angle2 1 sub sin radius mul radius add moveto angle2 cos radius mul radius add angle2 sin radius mul radius add lineto unpagectm {
                
            } {
                
            } {
                
            } {
                
            } pathforall arow grestore
        } if
    } if crlincp setlinecap crlinalph setalpha crlinw setlinewidth usedash {
        strdsh dshpatoff setdash
    } if strinclr {
        crlinred crlingrn crlinblu setrgbcolor
    } {
        crlingry setgray
    } ifelse unpagectm concat strwpat {
        crstrpat findfont strwittrans {
            trpatstrk
        } {
            oppatstrk
        } ifelse
    } {
        stroke
    } ifelse grestore
} bind def /apfill {
    gsave dodrawctm /pie exch def /radius exch def /yscale exch def /xscale exch def /yy exch def /xx exch def xx yy translate xscale yscale scale newpath pie {
        radius dup moveto
    } if radius dup dup 5 -2 roll arc pie or {
        closepath
    } if 1 xscale div 1 yscale div scale crfilalph setalpha filinclr {
        crfilred crfilgrn crfilblu setrgbcolor
    } {
        crfilgry setgray
    } ifelse filwpat {
        crfilpat findfont filwittrans {
            trpatfil
        } {
            oppatfil
        } ifelse
    } {
        fill
    } ifelse grestore
} bind def /mkepath {
    dodrawctm /pie exch def /radius exch def /yscale exch def /xscale exch def /yy exch def /xx exch def /angle2 exch def /angle1 exch def /closed exch def xx yy translate xscale yscale scale newpath pie {
        radius dup moveto
    } if radius dup dup angle1 angle2 arc closed pie or {
        closepath
    } if unpagectm
} bind def end
TopDrawDict begin /dotx {
    gsave txtdraw {
        concat selectfont txtinclr {
            crtxtred crtxtgrn crtxtblu setrgbcolor
        } {
            crtxtgry setgray
        } ifelse crtxtalph setalpha moveto xyshow
    } {
        pop pop pop pop pop pop pop
    } ifelse grestore
} bind def /txtlin {
    gsave txlndraw {
        concat txlninclr {
            crtxlnred crtxlngrn crtxlnblu setrgbcolor
        } {
            crtxlngry setgray
        } ifelse crtxlnalph setalpha setlinewidth 0 setlinecap newpath moveto 0 rlineto stroke
    } {
        pop pop pop pop pop
    } ifelse grestore
} bind def end
%%EndSetup
gsave
0 0 426 302 rectclip
-3 -29.5 translate
3 29.5 425.5 301 rectclip
gsave
TopDrawDict begin
/invpats true def
/crlincp 0 def
/crlinjn 0 def
/crmtrlmt 10 def
/crlinw 2.5 def
/crlinalph 1 def
/crlinred 0 def /crlingrn 0 def /crlinblu 0 def /strinclr true def
/crfilalph 1 def
/crfilred 1 def /crfilgrn 1 def /crfilblu 1 def /filinclr true def
/filwpat false def
TopDrawDict /piddict known TopDrawDict /ipiddict known or {
    1 getpat /crfilpat exch def
} if
/filwittrans false def
/strwpat false def
TopDrawDict /piddict known TopDrawDict /ipiddict known or {
    1 getpat /crstrpat exch def
} if
/strwittrans false def
/usedash false def
/strdsh [2 2] def /dshpatoff 0 def
/crendarw false def
/crfrtarw false def
/txtdraw false def
/crtxtalph 1 def
/crtxtred 0 def /crtxtgrn 0 def /crtxtblu 0 def /txtinclr true def
/txtwpat false def
/txtwittrans false def
/txlndraw false def
/crtxlnalph 1 def
/crtxlnred 0 def /crtxlngrn 0 def /crtxlnblu 0 def /txlninclr true def
/txlnwittrans false def
/txlnwpat false def
0.338349 0.13338 -0.13338 0.338349 349.985138 17.212799 sc6mt astore 66 1.825758 -1 207 371 0.450712 0.177675 -0.201866 0.512078 286.347931 -60.378735 sc5mt astore estroke
0.338349 0.13338 -0.13338 0.338349 350.11853 16.874451 sc6mt astore 53 1.981132 -1 222 359 0.450712 0.177675 -0.201866 0.512078 286.549774 -60.890812 sc5mt astore estroke
0.338349 0.13338 -0.13338 0.338349 350.456879 17.00783 sc6mt astore 42 2.202381 -1 234 348 0.450712 0.177675 -0.201866 0.512078 287.000488 -60.713139 sc5mt astore estroke
0.338349 0.13338 -0.13338 0.338349 350.795227 17.141211 sc6mt astore 32 2.5625 -1 243 339 0.450712 0.177675 -0.201866 0.512078 287.451202 -60.535461 sc5mt astore estroke
0.338349 0.13338 -0.13338 0.338349 347.964844 18.371023 sc6mt astore 19.5 3.410256 -1 265 323 0.450712 0.177675 -0.227746 0.577729 291.895081 -79.734344 sc5mt astore estroke
/crfilred 0.333333 def /crfilgrn 0.333333 def /crfilblu 0.333333 def /filinclr true def
5.5 1 -1 315 313 0.450712 0.177675 -0.201866 0.512078 289.704773 -59.647087 sc5mt astore efill
0.338349 0.13338 -0.13338 0.338349 352.486969 17.808113 sc6mt astore 5.5 1 -1 315 313 0.450712 0.177675 -0.201866 0.512078 289.704773 -59.647087 sc5mt astore estroke
0.35038 0.09749 -0.09749 0.35038 278.187073 55.472412 sc6mt astore 66 1.825758 -1 207 371 0.518901 0.14438 -0.16772 0.602787 207.158112 -44.1675 sc5mt astore estroke
0.35038 0.09749 -0.09749 0.35038 278.284546 55.122032 sc6mt astore 53 1.981132 -1 222 359 0.518901 0.14438 -0.16772 0.602787 207.325836 -44.770287 sc5mt astore estroke
0.35038 0.09749 -0.09749 0.35038 278.634949 55.219524 sc6mt astore 42 2.202381 -1 234 348 0.518901 0.14438 -0.16772 0.602787 207.844742 -44.625904 sc5mt astore estroke
0.35038 0.09749 -0.09749 0.35038 278.985321 55.317013 sc6mt astore 32 2.5625 -1 243 339 0.518901 0.14438 -0.16772 0.602787 208.363632 -44.481525 sc5mt astore estroke
0.35038 0.09749 -0.09749 0.35038 276.298096 56.834351 sc6mt astore 19.5 3.410256 -1 265 323 0.518901 0.14438 -0.189223 0.680067 211.189255 -66.692642 sc5mt astore estroke
5.5 1 -1 315 313 0.518901 0.14438 -0.16772 0.602787 210.958145 -43.759624 sc5mt astore efill
0.35038 0.09749 -0.09749 0.35038 280.737213 55.804466 sc6mt astore 5.5 1 -1 315 313 0.518901 0.14438 -0.16772 0.602787 210.958145 -43.759624 sc5mt astore estroke
0.325164 0.162908 -0.162908 0.325164 250.005844 123.198769 sc6mt astore 66 1.825758 -1 207 371 0.458451 0.229686 -0.263641 0.526226 225.625198 -2.69842 sc5mt astore estroke
0.325164 0.162908 -0.162908 0.325164 250.168762 122.873604 sc6mt astore 53 1.981132 -1 222 359 0.458451 0.229686 -0.263641 0.526226 225.88884 -3.224646 sc5mt astore estroke
0.325164 0.162908 -0.162908 0.325164 250.493912 123.036514 sc6mt astore 42 2.202381 -1 234 348 0.458451 0.229686 -0.263641 0.526226 226.34729 -2.99496 sc5mt astore estroke
0.325164 0.162908 -0.162908 0.325164 250.819077 123.199417 sc6mt astore 32 2.5625 -1 243 339 0.458451 0.229686 -0.263641 0.526226 226.80574 -2.765274 sc5mt astore estroke
0.325164 0.162908 -0.162908 0.325164 247.890656 124.172951 sc6mt astore 19.5 3.410256 -1 265 323 0.458451 0.229686 -0.297441 0.59369 233.39064 -22.777184 sc5mt astore estroke
5.5 1 -1 315 313 0.458451 0.229686 -0.263641 0.526226 229.097992 -1.616844 sc5mt astore efill
0.325164 0.162908 -0.162908 0.325164 252.444901 124.013962 sc6mt astore 5.5 1 -1 315 313 0.458451 0.229686 -0.263641 0.526226 229.097992 -1.616844 sc5mt astore estroke
/crlinw 1.9 def
-0.315374 -0.161778 0.161778 -0.315374 187.479401 395.401123 sc6mt astore 30.5 2.459016 -1 71 563 -0.315374 -0.161778 0.161778 -0.315374 104.034584 399.944366 sc5mt astore estroke
-0.315374 -0.161778 0.161778 -0.315374 187.479401 395.401123 sc6mt astore 24.5 2.693877 -1 81 557 -0.315374 -0.161778 0.161778 -0.315374 104.034584 399.944366 sc5mt astore estroke
-0.315374 -0.161778 0.161778 -0.315374 187.479401 395.401123 sc6mt astore 19 3.078947 -1 89 552 -0.315374 -0.161778 0.161778 -0.315374 104.034584 399.944366 sc5mt astore estroke
-0.315374 -0.161778 0.161778 -0.315374 187.479401 395.401123 sc6mt astore 14.5 3.517241 -1 97 548 -0.315374 -0.161778 0.161778 -0.315374 104.034584 399.944366 sc5mt astore estroke
-0.315374 -0.161778 0.161778 -0.315374 186.056122 395.069397 sc6mt astore 10.5 3.904762 -1 103 545 -0.315374 -0.161778 0.161778 -0.315374 102.611313 399.61264 sc5mt astore estroke
/crfilred 0 def /crfilgrn 0 def /crfilblu 0 def /filinclr true def
1.5 1.333333 -1 146 536 -0.315374 -0.161778 0.161778 -0.315374 104.034584 399.944366 sc5mt astore efill
-0.315374 -0.161778 0.161778 -0.315374 187.479401 395.401123 sc6mt astore 1.5 1.333333 -1 146 536 -0.315374 -0.161778 0.161778 -0.315374 104.034584 399.944366 sc5mt astore estroke
-0.315374 -0.161778 0.161778 -0.315374 169.048126 387.24884 sc6mt astore 30.5 2.459016 -1 71 563 -0.315374 -0.161778 0.161778 -0.315374 82.413284 394.982117 sc5mt astore estroke
-0.315374 -0.161778 0.161778 -0.315374 169.048126 387.24884 sc6mt astore 24.5 2.693877 -1 81 557 -0.315374 -0.161778 0.161778 -0.315374 82.413284 394.982117 sc5mt astore estroke
-0.315374 -0.161778 0.161778 -0.315374 169.048126 387.24884 sc6mt astore 19 3.078947 -1 89 552 -0.315374 -0.161778 0.161778 -0.315374 82.413284 394.982117 sc5mt astore estroke
-0.315374 -0.161778 0.161778 -0.315374 169.048126 387.24884 sc6mt astore 14.5 3.517241 -1 97 548 -0.315374 -0.161778 0.161778 -0.315374 82.413284 394.982117 sc5mt astore estroke
-0.315374 -0.161778 0.161778 -0.315374 167.624847 386.917114 sc6mt astore 10.5 3.904762 -1 103 545 -0.315374 -0.161778 0.161778 -0.315374 80.990013 394.650391 sc5mt astore estroke
1.5 1.333333 -1 146 536 -0.315374 -0.161778 0.161778 -0.315374 82.413284 394.982117 sc5mt astore efill
-0.315374 -0.161778 0.161778 -0.315374 169.048126 387.24884 sc6mt astore 1.5 1.333333 -1 146 536 -0.315374 -0.161778 0.161778 -0.315374 82.413284 394.982117 sc5mt astore estroke
-0.315374 -0.161778 0.161778 -0.315374 233.557571 418.440216 sc6mt astore 30.5 2.459016 -1 71 563 -0.315374 -0.161778 0.161778 -0.315374 121.402512 421.920135 sc5mt astore estroke
-0.315374 -0.161778 0.161778 -0.315374 233.557571 418.440216 sc6mt astore 24.5 2.693877 -1 81 557 -0.315374 -0.161778 0.161778 -0.315374 121.402512 421.920135 sc5mt astore estroke
-0.315374 -0.161778 0.161778 -0.315374 233.557571 418.440216 sc6mt astore 19 3.078947 -1 89 552 -0.315374 -0.161778 0.161778 -0.315374 121.402512 421.920135 sc5mt astore estroke
-0.315374 -0.161778 0.161778 -0.315374 233.557571 418.440216 sc6mt astore 14.5 3.517241 -1 97 548 -0.315374 -0.161778 0.161778 -0.315374 121.402512 421.920135 sc5mt astore estroke
-0.315374 -0.161778 0.161778 -0.315374 232.134293 418.10849 sc6mt astore 10.5 3.904762 -1 103 545 -0.315374 -0.161778 0.161778 -0.315374 119.97924 421.588409 sc5mt astore estroke
1.5 1.333333 -1 146 536 -0.315374 -0.161778 0.161778 -0.315374 121.402512 421.920135 sc5mt astore efill
-0.315374 -0.161778 0.161778 -0.315374 233.557571 418.440216 sc6mt astore 1.5 1.333333 -1 146 536 -0.315374 -0.161778 0.161778 -0.315374 121.402512 421.920135 sc5mt astore estroke
-0.315374 -0.161778 0.161778 -0.315374 218.670776 395.755585 sc6mt astore 30.5 2.459016 -1 71 563 -0.315374 -0.161778 0.161778 -0.315374 128.845917 406.678864 sc5mt astore estroke
-0.315374 -0.161778 0.161778 -0.315374 218.670776 395.755585 sc6mt astore 24.5 2.693877 -1 81 557 -0.315374 -0.161778 0.161778 -0.315374 128.845917 406.678864 sc5mt astore estroke
-0.315374 -0.161778 0.161778 -0.315374 218.670776 395.755585 sc6mt astore 19 3.078947 -1 89 552 -0.315374 -0.161778 0.161778 -0.315374 128.845917 406.678864 sc5mt astore estroke
-0.315374 -0.161778 0.161778 -0.315374 218.670776 395.755585 sc6mt astore 14.5 3.517241 -1 97 548 -0.315374 -0.161778 0.161778 -0.315374 128.845917 406.678864 sc5mt astore estroke
-0.315374 -0.161778 0.161778 -0.315374 217.247498 395.423859 sc6mt astore 10.5 3.904762 -1 103 545 -0.315374 -0.161778 0.161778 -0.315374 127.422646 406.347137 sc5mt astore estroke
1.5 1.333333 -1 146 536 -0.315374 -0.161778 0.161778 -0.315374 128.845917 406.678864 sc5mt astore efill
-0.315374 -0.161778 0.161778 -0.315374 218.670776 395.755585 sc6mt astore 1.5 1.333333 -1 146 536 -0.315374 -0.161778 0.161778 -0.315374 128.845917 406.678864 sc5mt astore estroke
-0.315374 -0.161778 0.161778 -0.315374 157.351349 384.058807 sc6mt astore 30.5 2.459016 -1 71 563 -0.315374 -0.161778 0.161778 -0.315374 85.248856 409.868896 sc5mt astore estroke
-0.315374 -0.161778 0.161778 -0.315374 157.351349 384.058807 sc6mt astore 24.5 2.693877 -1 81 557 -0.315374 -0.161778 0.161778 -0.315374 85.248856 409.868896 sc5mt astore estroke
-0.315374 -0.161778 0.161778 -0.315374 157.351349 384.058807 sc6mt astore 19 3.078947 -1 89 552 -0.315374 -0.161778 0.161778 -0.315374 85.248856 409.868896 sc5mt astore estroke
-0.315374 -0.161778 0.161778 -0.315374 157.351349 384.058807 sc6mt astore 14.5 3.517241 -1 97 548 -0.315374 -0.161778 0.161778 -0.315374 85.248856 409.868896 sc5mt astore estroke
-0.315374 -0.161778 0.161778 -0.315374 155.92807 383.727081 sc6mt astore 10.5 3.904762 -1 103 545 -0.315374 -0.161778 0.161778 -0.315374 83.825584 409.53717 sc5mt astore estroke
1.5 1.333333 -1 146 536 -0.315374 -0.161778 0.161778 -0.315374 85.248856 409.868896 sc5mt astore efill
-0.315374 -0.161778 0.161778 -0.315374 157.351349 384.058807 sc6mt astore 1.5 1.333333 -1 146 536 -0.315374 -0.161778 0.161778 -0.315374 85.248856 409.868896 sc5mt astore estroke
-0.315374 -0.161778 0.161778 -0.315374 185.707153 403.553436 sc6mt astore 30.5 2.459016 -1 71 563 -0.315374 -0.161778 0.161778 -0.315374 98.71788 429.363525 sc5mt astore estroke
-0.315374 -0.161778 0.161778 -0.315374 185.707153 403.553436 sc6mt astore 24.5 2.693877 -1 81 557 -0.315374 -0.161778 0.161778 -0.315374 98.71788 429.363525 sc5mt astore estroke
-0.315374 -0.161778 0.161778 -0.315374 185.707153 403.553436 sc6mt astore 19 3.078947 -1 89 552 -0.315374 -0.161778 0.161778 -0.315374 98.71788 429.363525 sc5mt astore estroke
-0.315374 -0.161778 0.161778 -0.315374 185.707153 403.553436 sc6mt astore 14.5 3.517241 -1 97 548 -0.315374 -0.161778 0.161778 -0.315374 98.71788 429.363525 sc5mt astore estroke
-0.315374 -0.161778 0.161778 -0.315374 184.283875 403.22171 sc6mt astore 10.5 3.904762 -1 103 545 -0.315374 -0.161778 0.161778 -0.315374 97.294609 429.031799 sc5mt astore estroke
1.5 1.333333 -1 146 536 -0.315374 -0.161778 0.161778 -0.315374 98.71788 429.363525 sc5mt astore efill
-0.315374 -0.161778 0.161778 -0.315374 185.707153 403.553436 sc6mt astore 1.5 1.333333 -1 146 536 -0.315374 -0.161778 0.161778 -0.315374 98.71788 429.363525 sc5mt astore estroke
-0.315374 -0.161778 0.161778 -0.315374 149.199051 381.223236 sc6mt astore 30.5 2.459016 -1 71 563 -0.315374 -0.161778 0.161778 -0.315374 59.019749 410.223358 sc5mt astore estroke
-0.315374 -0.161778 0.161778 -0.315374 149.199051 381.223236 sc6mt astore 24.5 2.693877 -1 81 557 -0.315374 -0.161778 0.161778 -0.315374 59.019749 410.223358 sc5mt astore estroke
-0.315374 -0.161778 0.161778 -0.315374 149.199051 381.223236 sc6mt astore 19 3.078947 -1 89 552 -0.315374 -0.161778 0.161778 -0.315374 59.019749 410.223358 sc5mt astore estroke
-0.315374 -0.161778 0.161778 -0.315374 149.199051 381.223236 sc6mt astore 14.5 3.517241 -1 97 548 -0.315374 -0.161778 0.161778 -0.315374 59.019749 410.223358 sc5mt astore estroke
-0.315374 -0.161778 0.161778 -0.315374 147.775772 380.89151 sc6mt astore 10.5 3.904762 -1 103 545 -0.315374 -0.161778 0.161778 -0.315374 57.596474 409.891632 sc5mt astore estroke
1.5 1.333333 -1 146 536 -0.315374 -0.161778 0.161778 -0.315374 59.019749 410.223358 sc5mt astore efill
-0.315374 -0.161778 0.161778 -0.315374 149.199051 381.223236 sc6mt astore 1.5 1.333333 -1 146 536 -0.315374 -0.161778 0.161778 -0.315374 59.019749 410.223358 sc5mt astore estroke
0.315374 0.161778 -0.161778 0.315374 172.697449 116.8573 sc6mt astore 30.5 2.459016 -1 71 563 0.315374 0.161778 -0.161778 0.315374 92.442642 118.210526 sc5mt astore estroke
0.315374 0.161778 -0.161778 0.315374 172.697449 116.8573 sc6mt astore 24.5 2.693877 -1 81 557 0.315374 0.161778 -0.161778 0.315374 92.442642 118.210526 sc5mt astore estroke
0.315374 0.161778 -0.161778 0.315374 172.697449 116.8573 sc6mt astore 19 3.078947 -1 89 552 0.315374 0.161778 -0.161778 0.315374 92.442642 118.210526 sc5mt astore estroke
0.315374 0.161778 -0.161778 0.315374 172.697449 116.8573 sc6mt astore 14.5 3.517241 -1 97 548 0.315374 0.161778 -0.161778 0.315374 92.442642 118.210526 sc5mt astore estroke
0.315374 0.161778 -0.161778 0.315374 174.120728 117.189041 sc6mt astore 10.5 3.904762 -1 103 545 0.315374 0.161778 -0.161778 0.315374 93.865913 118.542267 sc5mt astore estroke
1.5 1.333333 -1 146 536 0.315374 0.161778 -0.161778 0.315374 92.442642 118.210526 sc5mt astore efill
0.315374 0.161778 -0.161778 0.315374 172.697449 116.8573 sc6mt astore 1.5 1.333333 -1 146 536 0.315374 0.161778 -0.161778 0.315374 92.442642 118.210526 sc5mt astore estroke
0.315374 0.161778 -0.161778 0.315374 191.128723 125.009598 sc6mt astore 30.5 2.459016 -1 71 563 0.315374 0.161778 -0.161778 0.315374 114.063942 123.172791 sc5mt astore estroke
0.315374 0.161778 -0.161778 0.315374 191.128723 125.009598 sc6mt astore 24.5 2.693877 -1 81 557 0.315374 0.161778 -0.161778 0.315374 114.063942 123.172791 sc5mt astore estroke
0.315374 0.161778 -0.161778 0.315374 191.128723 125.009598 sc6mt astore 19 3.078947 -1 89 552 0.315374 0.161778 -0.161778 0.315374 114.063942 123.172791 sc5mt astore estroke
0.315374 0.161778 -0.161778 0.315374 191.128723 125.009598 sc6mt astore 14.5 3.517241 -1 97 548 0.315374 0.161778 -0.161778 0.315374 114.063942 123.172791 sc5mt astore estroke
0.315374 0.161778 -0.161778 0.315374 192.552002 125.341339 sc6mt astore 10.5 3.904762 -1 103 545 0.315374 0.161778 -0.161778 0.315374 115.487213 123.504532 sc5mt astore estroke
1.5 1.333333 -1 146 536 0.315374 0.161778 -0.161778 0.315374 114.063942 123.172791 sc5mt astore efill
0.315374 0.161778 -0.161778 0.315374 191.128723 125.009598 sc6mt astore 1.5 1.333333 -1 146 536 0.315374 0.161778 -0.161778 0.315374 114.063942 123.172791 sc5mt astore estroke
0.315374 0.161778 -0.161778 0.315374 126.61927 93.818214 sc6mt astore 30.5 2.459016 -1 71 563 0.315374 0.161778 -0.161778 0.315374 75.074715 96.234779 sc5mt astore estroke
0.315374 0.161778 -0.161778 0.315374 126.61927 93.818214 sc6mt astore 24.5 2.693877 -1 81 557 0.315374 0.161778 -0.161778 0.315374 75.074715 96.234779 sc5mt astore estroke
0.315374 0.161778 -0.161778 0.315374 126.61927 93.818214 sc6mt astore 19 3.078947 -1 89 552 0.315374 0.161778 -0.161778 0.315374 75.074715 96.234779 sc5mt astore estroke
0.315374 0.161778 -0.161778 0.315374 126.61927 93.818214 sc6mt astore 14.5 3.517241 -1 97 548 0.315374 0.161778 -0.161778 0.315374 75.074715 96.234779 sc5mt astore estroke
0.315374 0.161778 -0.161778 0.315374 128.042542 94.149956 sc6mt astore 10.5 3.904762 -1 103 545 0.315374 0.161778 -0.161778 0.315374 76.497986 96.566521 sc5mt astore estroke
1.5 1.333333 -1 146 536 0.315374 0.161778 -0.161778 0.315374 75.074715 96.234779 sc5mt astore efill
0.315374 0.161778 -0.161778 0.315374 126.61927 93.818214 sc6mt astore 1.5 1.333333 -1 146 536 0.315374 0.161778 -0.161778 0.315374 75.074715 96.234779 sc5mt astore estroke
0.315374 0.161778 -0.161778 0.315374 141.506073 116.502853 sc6mt astore 30.5 2.459016 -1 71 563 0.315374 0.161778 -0.161778 0.315374 67.631317 111.476028 sc5mt astore estroke
0.315374 0.161778 -0.161778 0.315374 141.506073 116.502853 sc6mt astore 24.5 2.693877 -1 81 557 0.315374 0.161778 -0.161778 0.315374 67.631317 111.476028 sc5mt astore estroke
0.315374 0.161778 -0.161778 0.315374 141.506073 116.502853 sc6mt astore 19 3.078947 -1 89 552 0.315374 0.161778 -0.161778 0.315374 67.631317 111.476028 sc5mt astore estroke
0.315374 0.161778 -0.161778 0.315374 141.506073 116.502853 sc6mt astore 14.5 3.517241 -1 97 548 0.315374 0.161778 -0.161778 0.315374 67.631317 111.476028 sc5mt astore estroke
0.315374 0.161778 -0.161778 0.315374 142.929352 116.834595 sc6mt astore 10.5 3.904762 -1 103 545 0.315374 0.161778 -0.161778 0.315374 69.054588 111.80777 sc5mt astore estroke
1.5 1.333333 -1 146 536 0.315374 0.161778 -0.161778 0.315374 67.631317 111.476028 sc5mt astore efill
0.315374 0.161778 -0.161778 0.315374 141.506073 116.502853 sc6mt astore 1.5 1.333333 -1 146 536 0.315374 0.161778 -0.161778 0.315374 67.631317 111.476028 sc5mt astore estroke
0.315374 0.161778 -0.161778 0.315374 202.8255 128.199631 sc6mt astore 30.5 2.459016 -1 71 563 0.315374 0.161778 -0.161778 0.315374 111.228371 108.285995 sc5mt astore estroke
0.315374 0.161778 -0.161778 0.315374 202.8255 128.199631 sc6mt astore 24.5 2.693877 -1 81 557 0.315374 0.161778 -0.161778 0.315374 111.228371 108.285995 sc5mt astore estroke
0.315374 0.161778 -0.161778 0.315374 202.8255 128.199631 sc6mt astore 19 3.078947 -1 89 552 0.315374 0.161778 -0.161778 0.315374 111.228371 108.285995 sc5mt astore estroke
0.315374 0.161778 -0.161778 0.315374 202.8255 128.199631 sc6mt astore 14.5 3.517241 -1 97 548 0.315374 0.161778 -0.161778 0.315374 111.228371 108.285995 sc5mt astore estroke
0.315374 0.161778 -0.161778 0.315374 204.248779 128.531372 sc6mt astore 10.5 3.904762 -1 103 545 0.315374 0.161778 -0.161778 0.315374 112.651642 108.617737 sc5mt astore estroke
1.5 1.333333 -1 146 536 0.315374 0.161778 -0.161778 0.315374 111.228371 108.285995 sc5mt astore efill
0.315374 0.161778 -0.161778 0.315374 202.8255 128.199631 sc6mt astore 1.5 1.333333 -1 146 536 0.315374 0.161778 -0.161778 0.315374 111.228371 108.285995 sc5mt astore estroke
0.315374 0.161778 -0.161778 0.315374 174.469696 108.705009 sc6mt astore 30.5 2.459016 -1 71 563 0.315374 0.161778 -0.161778 0.315374 97.759354 88.791382 sc5mt astore estroke
0.315374 0.161778 -0.161778 0.315374 174.469696 108.705009 sc6mt astore 24.5 2.693877 -1 81 557 0.315374 0.161778 -0.161778 0.315374 97.759354 88.791382 sc5mt astore estroke
0.315374 0.161778 -0.161778 0.315374 174.469696 108.705009 sc6mt astore 19 3.078947 -1 89 552 0.315374 0.161778 -0.161778 0.315374 97.759354 88.791382 sc5mt astore estroke
0.315374 0.161778 -0.161778 0.315374 174.469696 108.705009 sc6mt astore 14.5 3.517241 -1 97 548 0.315374 0.161778 -0.161778 0.315374 97.759354 88.791382 sc5mt astore estroke
0.315374 0.161778 -0.161778 0.315374 175.892975 109.036751 sc6mt astore 10.5 3.904762 -1 103 545 0.315374 0.161778 -0.161778 0.315374 99.182625 89.123123 sc5mt astore estroke
1.5 1.333333 -1 146 536 0.315374 0.161778 -0.161778 0.315374 97.759354 88.791382 sc5mt astore efill
0.315374 0.161778 -0.161778 0.315374 174.469696 108.705009 sc6mt astore 1.5 1.333333 -1 146 536 0.315374 0.161778 -0.161778 0.315374 97.759354 88.791382 sc5mt astore estroke
0.315374 0.161778 -0.161778 0.315374 210.977783 131.035202 sc6mt astore 30.5 2.459016 -1 71 563 0.315374 0.161778 -0.161778 0.315374 137.457474 107.931549 sc5mt astore estroke
0.315374 0.161778 -0.161778 0.315374 210.977783 131.035202 sc6mt astore 24.5 2.693877 -1 81 557 0.315374 0.161778 -0.161778 0.315374 137.457474 107.931549 sc5mt astore estroke
0.315374 0.161778 -0.161778 0.315374 210.977783 131.035202 sc6mt astore 19 3.078947 -1 89 552 0.315374 0.161778 -0.161778 0.315374 137.457474 107.931549 sc5mt astore estroke
0.315374 0.161778 -0.161778 0.315374 210.977783 131.035202 sc6mt astore 14.5 3.517241 -1 97 548 0.315374 0.161778 -0.161778 0.315374 137.457474 107.931549 sc5mt astore estroke
0.315374 0.161778 -0.161778 0.315374 212.401062 131.366943 sc6mt astore 10.5 3.904762 -1 103 545 0.315374 0.161778 -0.161778 0.315374 138.880753 108.26329 sc5mt astore estroke
1.5 1.333333 -1 146 536 0.315374 0.161778 -0.161778 0.315374 137.457474 107.931549 sc5mt astore efill
0.315374 0.161778 -0.161778 0.315374 210.977783 131.035202 sc6mt astore 1.5 1.333333 -1 146 536 0.315374 0.161778 -0.161778 0.315374 137.457474 107.931549 sc5mt astore estroke
/crfilred 0.9167 def /crfilgrn 0.9167 def /crfilblu 0.9167 def /filinclr true def
30.5 2.459016 -1 71 563 0.351216 0.047755 0.047755 -0.351216 11.740492 419.595825 sc5mt astore efill
0.351216 0.047755 0.047755 -0.351216 95.976501 419.494049 sc6mt astore 30.5 2.459016 -1 71 563 0.351216 0.047755 0.047755 -0.351216 11.740492 419.595825 sc5mt astore estroke
24.5 2.693877 -1 81 557 0.351216 0.047755 0.047755 -0.351216 11.740492 419.595825 sc5mt astore efill
0.351216 0.047755 0.047755 -0.351216 95.976501 419.494049 sc6mt astore 24.5 2.693877 -1 81 557 0.351216 0.047755 0.047755 -0.351216 11.740492 419.595825 sc5mt astore estroke
19 3.078947 -1 89 552 0.351216 0.047755 0.047755 -0.351216 11.740492 419.595825 sc5mt astore efill
0.351216 0.047755 0.047755 -0.351216 95.976501 419.494049 sc6mt astore 19 3.078947 -1 89 552 0.351216 0.047755 0.047755 -0.351216 11.740492 419.595825 sc5mt astore estroke
14.5 3.517241 -1 97 548 0.351216 0.047755 0.047755 -0.351216 11.740492 419.595825 sc5mt astore efill
0.351216 0.047755 0.047755 -0.351216 95.976501 419.494049 sc6mt astore 14.5 3.517241 -1 97 548 0.351216 0.047755 0.047755 -0.351216 11.740492 419.595825 sc5mt astore estroke
10.5 3.904762 -1 103 545 0.351216 0.047755 0.047755 -0.351216 13.0976 420.138062 sc5mt astore efill
0.351216 0.047755 0.047755 -0.351216 97.333611 420.036285 sc6mt astore 10.5 3.904762 -1 103 545 0.351216 0.047755 0.047755 -0.351216 13.0976 420.138062 sc5mt astore estroke
1.5 1.333333 -1 146 536 0.351216 0.047755 0.047755 -0.351216 11.740492 419.595825 sc5mt astore efill
0.351216 0.047755 0.047755 -0.351216 95.976501 419.494049 sc6mt astore 1.5 1.333333 -1 146 536 0.351216 0.047755 0.047755 -0.351216 11.740492 419.595825 sc5mt astore estroke
30.5 2.459016 -1 71 563 0.351216 0.047755 0.047755 -0.351216 32.312435 427.896423 sc5mt astore efill
0.351216 0.047755 0.047755 -0.351216 115.757271 423.35318 sc6mt astore 30.5 2.459016 -1 71 563 0.351216 0.047755 0.047755 -0.351216 32.312435 427.896423 sc5mt astore estroke
24.5 2.693877 -1 81 557 0.351216 0.047755 0.047755 -0.351216 32.312435 427.896423 sc5mt astore efill
0.351216 0.047755 0.047755 -0.351216 115.757271 423.35318 sc6mt astore 24.5 2.693877 -1 81 557 0.351216 0.047755 0.047755 -0.351216 32.312435 427.896423 sc5mt astore estroke
19 3.078947 -1 89 552 0.351216 0.047755 0.047755 -0.351216 32.312435 427.896423 sc5mt astore efill
0.351216 0.047755 0.047755 -0.351216 115.757271 423.35318 sc6mt astore 19 3.078947 -1 89 552 0.351216 0.047755 0.047755 -0.351216 32.312435 427.896423 sc5mt astore estroke
14.5 3.517241 -1 97 548 0.351216 0.047755 0.047755 -0.351216 32.312435 427.896423 sc5mt astore efill
0.351216 0.047755 0.047755 -0.351216 115.757271 423.35318 sc6mt astore 14.5 3.517241 -1 97 548 0.351216 0.047755 0.047755 -0.351216 32.312435 427.896423 sc5mt astore estroke
10.5 3.904762 -1 103 545 0.351216 0.047755 0.047755 -0.351216 33.669544 428.43866 sc5mt astore efill
0.351216 0.047755 0.047755 -0.351216 117.11438 423.895416 sc6mt astore 10.5 3.904762 -1 103 545 0.351216 0.047755 0.047755 -0.351216 33.669544 428.43866 sc5mt astore estroke
1.5 1.333333 -1 146 536 0.351216 0.047755 0.047755 -0.351216 32.312435 427.896423 sc5mt astore efill
0.351216 0.047755 0.047755 -0.351216 115.757271 423.35318 sc6mt astore 1.5 1.333333 -1 146 536 0.351216 0.047755 0.047755 -0.351216 32.312435 427.896423 sc5mt astore estroke
30.5 2.459016 -1 71 563 0.351216 0.047755 0.047755 -0.351216 -15.077129 427.682495 sc5mt astore efill
0.351216 0.047755 0.047755 -0.351216 45.00362 412.02652 sc6mt astore 30.5 2.459016 -1 71 563 0.351216 0.047755 0.047755 -0.351216 -15.077129 427.682495 sc5mt astore estroke
24.5 2.693877 -1 81 557 0.351216 0.047755 0.047755 -0.351216 -15.077129 427.682495 sc5mt astore efill
0.351216 0.047755 0.047755 -0.351216 45.00362 412.02652 sc6mt astore 24.5 2.693877 -1 81 557 0.351216 0.047755 0.047755 -0.351216 -15.077129 427.682495 sc5mt astore estroke
19 3.078947 -1 89 552 0.351216 0.047755 0.047755 -0.351216 -15.077129 427.682495 sc5mt astore efill
0.351216 0.047755 0.047755 -0.351216 45.00362 412.02652 sc6mt astore 19 3.078947 -1 89 552 0.351216 0.047755 0.047755 -0.351216 -15.077129 427.682495 sc5mt astore estroke
14.5 3.517241 -1 97 548 0.351216 0.047755 0.047755 -0.351216 -15.077129 427.682495 sc5mt astore efill
0.351216 0.047755 0.047755 -0.351216 45.00362 412.02652 sc6mt astore 14.5 3.517241 -1 97 548 0.351216 0.047755 0.047755 -0.351216 -15.077129 427.682495 sc5mt astore estroke
10.5 3.904762 -1 103 545 0.351216 0.047755 0.047755 -0.351216 -13.720021 428.224731 sc5mt astore efill
0.351216 0.047755 0.047755 -0.351216 46.360729 412.568756 sc6mt astore 10.5 3.904762 -1 103 545 0.351216 0.047755 0.047755 -0.351216 -13.720021 428.224731 sc5mt astore estroke
1.5 1.333333 -1 146 536 0.351216 0.047755 0.047755 -0.351216 -15.077129 427.682495 sc5mt astore efill
0.351216 0.047755 0.047755 -0.351216 45.00362 412.02652 sc6mt astore 1.5 1.333333 -1 146 536 0.351216 0.047755 0.047755 -0.351216 -15.077129 427.682495 sc5mt astore estroke
30.5 2.459016 -1 71 563 0.351216 0.047755 0.047755 -0.351216 -12.461747 410.923615 sc5mt astore efill
0.351216 0.047755 0.047755 -0.351216 70.19191 401.938904 sc6mt astore 30.5 2.459016 -1 71 563 0.351216 0.047755 0.047755 -0.351216 -12.461747 410.923615 sc5mt astore estroke
24.5 2.693877 -1 81 557 0.351216 0.047755 0.047755 -0.351216 -12.461747 410.923615 sc5mt astore efill
0.351216 0.047755 0.047755 -0.351216 70.19191 401.938904 sc6mt astore 24.5 2.693877 -1 81 557 0.351216 0.047755 0.047755 -0.351216 -12.461747 410.923615 sc5mt astore estroke
19 3.078947 -1 89 552 0.351216 0.047755 0.047755 -0.351216 -12.461747 410.923615 sc5mt astore efill
0.351216 0.047755 0.047755 -0.351216 70.19191 401.938904 sc6mt astore 19 3.078947 -1 89 552 0.351216 0.047755 0.047755 -0.351216 -12.461747 410.923615 sc5mt astore estroke
14.5 3.517241 -1 97 548 0.351216 0.047755 0.047755 -0.351216 -12.461747 410.923615 sc5mt astore efill
0.351216 0.047755 0.047755 -0.351216 70.19191 401.938904 sc6mt astore 14.5 3.517241 -1 97 548 0.351216 0.047755 0.047755 -0.351216 -12.461747 410.923615 sc5mt astore estroke
10.5 3.904762 -1 103 545 0.351216 0.047755 0.047755 -0.351216 -11.104639 411.465851 sc5mt astore efill
0.351216 0.047755 0.047755 -0.351216 71.549019 402.48114 sc6mt astore 10.5 3.904762 -1 103 545 0.351216 0.047755 0.047755 -0.351216 -11.104639 411.465851 sc5mt astore estroke
1.5 1.333333 -1 146 536 0.351216 0.047755 0.047755 -0.351216 -12.461747 410.923615 sc5mt astore efill
0.351216 0.047755 0.047755 -0.351216 70.19191 401.938904 sc6mt astore 1.5 1.333333 -1 146 536 0.351216 0.047755 0.047755 -0.351216 -12.461747 410.923615 sc5mt astore estroke
30.5 2.459016 -1 71 563 0.351216 0.047755 0.047755 -0.351216 21.46949 438.483551 sc5mt astore efill
0.351216 0.047755 0.047755 -0.351216 127.175583 427.429047 sc6mt astore 30.5 2.459016 -1 71 563 0.351216 0.047755 0.047755 -0.351216 21.46949 438.483551 sc5mt astore estroke
24.5 2.693877 -1 81 557 0.351216 0.047755 0.047755 -0.351216 21.46949 438.483551 sc5mt astore efill
0.351216 0.047755 0.047755 -0.351216 127.175583 427.429047 sc6mt astore 24.5 2.693877 -1 81 557 0.351216 0.047755 0.047755 -0.351216 21.46949 438.483551 sc5mt astore estroke
19 3.078947 -1 89 552 0.351216 0.047755 0.047755 -0.351216 21.46949 438.483551 sc5mt astore efill
0.351216 0.047755 0.047755 -0.351216 127.175583 427.429047 sc6mt astore 19 3.078947 -1 89 552 0.351216 0.047755 0.047755 -0.351216 21.46949 438.483551 sc5mt astore estroke
14.5 3.517241 -1 97 548 0.351216 0.047755 0.047755 -0.351216 21.46949 438.483551 sc5mt astore efill
0.351216 0.047755 0.047755 -0.351216 127.175583 427.429047 sc6mt astore 14.5 3.517241 -1 97 548 0.351216 0.047755 0.047755 -0.351216 21.46949 438.483551 sc5mt astore estroke
10.5 3.904762 -1 103 545 0.351216 0.047755 0.047755 -0.351216 22.826599 439.025787 sc5mt astore efill
0.351216 0.047755 0.047755 -0.351216 128.532684 427.971283 sc6mt astore 10.5 3.904762 -1 103 545 0.351216 0.047755 0.047755 -0.351216 22.826599 439.025787 sc5mt astore estroke
1.5 1.333333 -1 146 536 0.351216 0.047755 0.047755 -0.351216 21.46949 438.483551 sc5mt astore efill
0.351216 0.047755 0.047755 -0.351216 127.175583 427.429047 sc6mt astore 1.5 1.333333 -1 146 536 0.351216 0.047755 0.047755 -0.351216 21.46949 438.483551 sc5mt astore estroke
30.5 2.459016 -1 71 563 0.351216 0.047755 0.047755 -0.351216 -0.730852 446.766022 sc5mt astore efill
0.351216 0.047755 0.047755 -0.351216 92.765755 427.194183 sc6mt astore 30.5 2.459016 -1 71 563 0.351216 0.047755 0.047755 -0.351216 -0.730852 446.766022 sc5mt astore estroke
24.5 2.693877 -1 81 557 0.351216 0.047755 0.047755 -0.351216 -0.730852 446.766022 sc5mt astore efill
0.351216 0.047755 0.047755 -0.351216 92.765755 427.194183 sc6mt astore 24.5 2.693877 -1 81 557 0.351216 0.047755 0.047755 -0.351216 -0.730852 446.766022 sc5mt astore estroke
19 3.078947 -1 89 552 0.351216 0.047755 0.047755 -0.351216 -0.730852 446.766022 sc5mt astore efill
0.351216 0.047755 0.047755 -0.351216 92.765755 427.194183 sc6mt astore 19 3.078947 -1 89 552 0.351216 0.047755 0.047755 -0.351216 -0.730852 446.766022 sc5mt astore estroke
14.5 3.517241 -1 97 548 0.351216 0.047755 0.047755 -0.351216 -0.730852 446.766022 sc5mt astore efill
0.351216 0.047755 0.047755 -0.351216 92.765755 427.194183 sc6mt astore 14.5 3.517241 -1 97 548 0.351216 0.047755 0.047755 -0.351216 -0.730852 446.766022 sc5mt astore estroke
10.5 3.904762 -1 103 545 0.351216 0.047755 0.047755 -0.351216 0.626256 447.308258 sc5mt astore efill
0.351216 0.047755 0.047755 -0.351216 94.122864 427.73642 sc6mt astore 10.5 3.904762 -1 103 545 0.351216 0.047755 0.047755 -0.351216 0.626256 447.308258 sc5mt astore estroke
1.5 1.333333 -1 146 536 0.351216 0.047755 0.047755 -0.351216 -0.730852 446.766022 sc5mt astore efill
0.351216 0.047755 0.047755 -0.351216 92.765755 427.194183 sc6mt astore 1.5 1.333333 -1 146 536 0.351216 0.047755 0.047755 -0.351216 -0.730852 446.766022 sc5mt astore estroke
30.5 2.459016 -1 71 563 0.351216 0.047755 0.047755 -0.351216 42.778664 453.780975 sc5mt astore efill
0.351216 0.047755 0.047755 -0.351216 135.484085 429.76767 sc6mt astore 30.5 2.459016 -1 71 563 0.351216 0.047755 0.047755 -0.351216 42.778664 453.780975 sc5mt astore estroke
24.5 2.693877 -1 81 557 0.351216 0.047755 0.047755 -0.351216 42.778664 453.780975 sc5mt astore efill
0.351216 0.047755 0.047755 -0.351216 135.484085 429.76767 sc6mt astore 24.5 2.693877 -1 81 557 0.351216 0.047755 0.047755 -0.351216 42.778664 453.780975 sc5mt astore estroke
19 3.078947 -1 89 552 0.351216 0.047755 0.047755 -0.351216 42.778664 453.780975 sc5mt astore efill
0.351216 0.047755 0.047755 -0.351216 135.484085 429.76767 sc6mt astore 19 3.078947 -1 89 552 0.351216 0.047755 0.047755 -0.351216 42.778664 453.780975 sc5mt astore estroke
14.5 3.517241 -1 97 548 0.351216 0.047755 0.047755 -0.351216 42.778664 453.780975 sc5mt astore efill
0.351216 0.047755 0.047755 -0.351216 135.484085 429.76767 sc6mt astore 14.5 3.517241 -1 97 548 0.351216 0.047755 0.047755 -0.351216 42.778664 453.780975 sc5mt astore estroke
10.5 3.904762 -1 103 545 0.351216 0.047755 0.047755 -0.351216 44.135773 454.323212 sc5mt astore efill
0.351216 0.047755 0.047755 -0.351216 136.841187 430.309906 sc6mt astore 10.5 3.904762 -1 103 545 0.351216 0.047755 0.047755 -0.351216 44.135773 454.323212 sc5mt astore estroke
1.5 1.333333 -1 146 536 0.351216 0.047755 0.047755 -0.351216 42.778664 453.780975 sc5mt astore efill
0.351216 0.047755 0.047755 -0.351216 135.484085 429.76767 sc6mt astore 1.5 1.333333 -1 146 536 0.351216 0.047755 0.047755 -0.351216 42.778664 453.780975 sc5mt astore estroke
/txtdraw true def
/txlndraw true def
( ) [0 0] 576 420 /Helvetica-Bold [ 18 1 mul 0 0 18 0 0 ] [0.770969 0 0 0.770969 -74.21154 -217.755127] dotx
( ) [0 0] 566 420 /Helvetica-Bold [ 18 1 mul 0 0 18 0 0 ] [-1.541937 0 0 -0.770969 1234.893188 429.858521] dotx
/txtdraw true def
/txlndraw true def
(    ) [5.559998 0 5.559998 0 5.559998 0 0 0] 421 499 /Helvetica-Bold [ 20 1 mul 0 0 20 0 0 ] [0.770969 0 0 0.770969 -71.898636 -187.687363] dotx
/crlinw 2.5 def
0.369273 0.145571 -0.145571 0.369273 131.886612 -144.834396 sc6mt astore 66 1.825758 -1 207 371 0.369273 0.145571 -0.145571 0.369273 75.528534 -100.456856 sc5mt astore estroke
0.369273 0.145571 -0.145571 0.369273 132.032181 -145.203674 sc6mt astore 53 1.981132 -1 222 359 0.369273 0.145571 -0.145571 0.369273 75.674103 -100.826126 sc5mt astore estroke
0.369273 0.145571 -0.145571 0.369273 132.401459 -145.058105 sc6mt astore 42 2.202381 -1 234 348 0.369273 0.145571 -0.145571 0.369273 76.043381 -100.680557 sc5mt astore estroke
0.369273 0.145571 -0.145571 0.369273 132.770737 -144.912537 sc6mt astore 32 2.5625 -1 243 339 0.369273 0.145571 -0.145571 0.369273 76.412651 -100.534981 sc5mt astore estroke
0.369273 0.145571 -0.145571 0.369273 129.681671 -143.570312 sc6mt astore 19.5 3.410256 -1 265 323 0.369273 0.145571 -0.164234 0.416616 79.351723 -114.484474 sc5mt astore estroke
/crfilred 0.333333 def /crfilgrn 0.333333 def /crfilblu 0.333333 def /filinclr true def
5.5 1 -1 315 313 0.369273 0.145571 -0.145571 0.369273 78.259018 -99.807129 sc5mt astore efill
0.369273 0.145571 -0.145571 0.369273 134.617096 -144.184677 sc6mt astore 5.5 1 -1 315 313 0.369273 0.145571 -0.145571 0.369273 78.259018 -99.807129 sc5mt astore estroke
0.394341 0.045266 -0.045266 0.394341 39.791527 -80.430305 sc6mt astore 66 1.825758 -1 207 371 0.394341 0.045266 -0.045266 0.394341 -13.287224 -40.322773 sc5mt astore estroke
0.394341 0.045266 -0.045266 0.394341 39.836792 -80.824646 sc6mt astore 53 1.981132 -1 222 359 0.394341 0.045266 -0.045266 0.394341 -13.241958 -40.717113 sc5mt astore estroke
0.394341 0.045266 -0.045266 0.394341 40.231133 -80.779381 sc6mt astore 42 2.202381 -1 234 348 0.394341 0.045266 -0.045266 0.394341 -12.847616 -40.671848 sc5mt astore estroke
0.394341 0.045266 -0.045266 0.394341 40.625473 -80.734116 sc6mt astore 32 2.5625 -1 243 339 0.394341 0.045266 -0.045266 0.394341 -12.453276 -40.626579 sc5mt astore estroke
0.394341 0.045266 -0.045266 0.394341 37.987831 -78.639664 sc6mt astore 19.5 3.410256 -1 265 323 0.394341 0.045266 -0.05107 0.444897 -13.21643 -54.861889 sc5mt astore estroke
5.5 1 -1 315 313 0.394341 0.045266 -0.045266 0.394341 -10.481573 -40.400249 sc5mt astore efill
0.394341 0.045266 -0.045266 0.394341 42.597176 -80.507782 sc6mt astore 5.5 1 -1 315 313 0.394341 0.045266 -0.045266 0.394341 -10.481573 -40.400249 sc5mt astore estroke
0.39693 0 0 0.39693 -11.009071 -11.948464 sc6mt astore 66 1.825758 -1 207 371 0.39693 0 0 0.39693 -61.283627 23.7253 sc5mt astore estroke
0.39693 0 0 0.39693 -11.009071 -12.345394 sc6mt astore 53 1.981132 -1 222 359 0.39693 0 0 0.39693 -61.283627 23.328369 sc5mt astore estroke
0.39693 0 0 0.39693 -10.612141 -12.345394 sc6mt astore 42 2.202381 -1 234 348 0.39693 0 0 0.39693 -60.886696 23.328369 sc5mt astore estroke
0.39693 0 0 0.39693 -10.215211 -12.345394 sc6mt astore 32 2.5625 -1 243 339 0.39693 0 0 0.39693 -60.489765 23.328369 sc5mt astore estroke
0.39693 0 0 0.39693 -12.596792 -9.963814 sc6mt astore 19.5 3.410256 -1 265 323 0.39693 0 0 0.447819 -62.871346 9.272963 sc5mt astore estroke
5.5 1 -1 315 313 0.39693 0 0 0.39693 -58.505116 23.328369 sc5mt astore efill
0.39693 0 0 0.39693 -8.23056 -12.345394 sc6mt astore 5.5 1 -1 315 313 0.39693 0 0 0.39693 -58.505116 23.328369 sc5mt astore estroke
/txtdraw true def
/txlndraw true def
(+ ) [15.768005 0 0 0] 166 557 /Helvetica [ 27 1 mul 0 0 27 0 0 ] [0.770969 0 0 0.770969 -34.624649 -256.696533] dotx
/txtdraw true def
/txlndraw true def
( ) [0 0] 182 556 /Helvetica [ 20 1 mul 0 0 20 0 0 ] [0.770969 0 0 0.770969 -23.06012 -252.070709] dotx
/txtdraw true def
/txlndraw true def
(= ) [14.600006 0 0 0] 304 587 /Helvetica [ 25 1 mul 0 0 25 0 0 ] [0.770969 0 0 0.770969 -25.373026 -279.825592] dotx
/txtdraw true def
/txlndraw true def
(N\() [10.108002 0 0 0] 134 296 /Helvetica [ 14 1 mul 0 0 14 0 0 ] [1 0 0 1 -1.5 4.5] dotx
/txtdraw true def
/txlndraw true def
(m) [0 0] 148.770004 296 /Symbol [ 14 1 mul 0 0 14 0 0 ] [1 0 0 1 -1.5 4.5] dotx
/txtdraw true def
/txlndraw true def
(js) [3.108002 0 0 0] 156.834 290.399994 /Helvetica [ 14 1 mul 0 0 14 0 0 ] [1 0 0 1 -1.5 4.5] dotx
/txtdraw true def
/txlndraw true def
(|) [0 0] 166.942001 296 /Helvetica [ 14 1 mul 0 0 14 0 0 ] [1 0 0 1 -1.5 4.5] dotx
/txtdraw true def
/txlndraw true def
(S) [0 0] 170.582001 296 /Symbol [ 14 1 mul 0 0 14 0 0 ] [1 0 0 1 -1.5 4.5] dotx
/txtdraw true def
/txlndraw true def
(j) [0 0] 178.869995 290.399994 /Helvetica [ 14 1 mul 0 0 14 0 0 ] [1 0 0 1 -1.5 4.5] dotx
/txtdraw true def
/txlndraw true def
(\)) [0 0] 181.977997 296 /Helvetica [ 14 1 mul 0 0 14 0 0 ] [1 0 0 1 -1.5 4.5] dotx
/txtdraw true def
/txlndraw true def
( ) [0 0] 186.639999 290.399994 /Helvetica [ 14 1 mul 0 0 14 0 0 ] [1 0 0 1 -1.5 4.5] dotx
/txtdraw true def
/txlndraw true def
(N\() [10.108002 0 0 0] 134 296 /Helvetica [ 14 1 mul 0 0 14 0 0 ] [1 0 0 1 -1 -171.5] dotx
/txtdraw true def
/txlndraw true def
(m) [0 0] 148.770004 296 /Symbol [ 14 1 mul 0 0 14 0 0 ] [1 0 0 1 -1 -171.5] dotx
/txtdraw true def
/txlndraw true def
(oj) [7.783997 0 0 0] 156.834 290.399994 /Helvetica [ 14 1 mul 0 0 14 0 0 ] [1 0 0 1 -1 -171.5] dotx
/txtdraw true def
/txlndraw true def
(|) [0 0] 167.725998 296 /Helvetica [ 14 1 mul 0 0 14 0 0 ] [1 0 0 1 -1 -171.5] dotx
/txtdraw true def
/txlndraw true def
(S) [0 0] 171.365997 296 /Symbol [ 14 1 mul 0 0 14 0 0 ] [1 0 0 1 -1 -171.5] dotx
/txtdraw true def
/txlndraw true def
(oj) [7.783997 0 0 0] 179.653992 290.399994 /Helvetica [ 14 1 mul 0 0 14 0 0 ] [1 0 0 1 -1 -171.5] dotx
/txtdraw true def
/txlndraw true def
(\)) [0 0] 190.54599 296 /Helvetica [ 14 1 mul 0 0 14 0 0 ] [1 0 0 1 -1 -171.5] dotx
/txtdraw true def
/txlndraw true def
( ) [0 0] 195.207993 290.399994 /Helvetica [ 14 1 mul 0 0 14 0 0 ] [1 0 0 1 -1 -171.5] dotx
end
grestore
grestore
%%Trailer

%%EndDocument
 GE /Times-Bold SF
16145 39473 MT
(Figure 2-3:)SH
/Times-Roman SF
21918 XM
(Schematic diagram illustrating assumed distributions of the data.)SH
13300 42458 MT
(The distributions of the data defined above are illustrated schematically in Figure)
175 W( 2-3.  The)176 W
10800 44197 MT
(upper left portion shows three classes \050)223 W
/Times-Italic SF
(j)SH
/Times-Roman SF
(\051 of data from multiple)
223 W( speakers \050)222 W
/Times-Italic SF
(s)SH
/Times-Roman SF
(\051, where each ellipse)222 W
10800 45936 MT
(represents)SH
/Times-Italic SF
15630 XM
(p)SH
/Times-Roman SF
(\050)SH
/Times-Bold SF
(x)SH
/Times-Roman SF
17696 XM
(|)SH
/Symbol SF
(m)SH
/Times-Roman SF
19150 XM
(\051. The)
469 W( lower left portion shows the distributions describing the dispersion of the)98 W
9 /Times-Italic AF
17096 46296 MT
(js)SH
18550 XM
(js)SH
11 /Times-Roman AF
10800 47675 MT
(speakers' means about)111 W
/Symbol SF
21364 XM
(m)SH
/Times-Roman SF
22698 XM
(. The righthand portion of the figure shows how the individual speakers')110 W
9 /Times-Italic AF
21998 48035 MT
(oj)SH
11 /Times-Roman AF
10800 49414 MT
(distributions combine with the mean distributions to form the pooled distribution)
103 W( ot the data.  Note)104 W
10800 51153 MT
(that speaker-independent classifiers are designed to minimize)
29 W( errors given only these pooled distribu-)28 W
10800 52892 MT
(tions which may poorly represent an individual's data.)SH
13300 55877 MT
(Knowledge of the correlation between decision classes is modeled)
29 W( by the mean crosscovariance)30 W
10800 57616 MT
(matrix)SH
/Symbol SF
13978 XM
(S)SH
/Times-Roman SF
15079 XM
(. In)
337 W( a phonetic classification task this matrix might,)
31 W( for example, describe how the acoustic)30 W
9 /Times-Italic AF
14629 57976 MT
(o)SH
/Times-Roman SF
29823 58992 MT
(3)SH
11 SS 
10800 59355 MT
(cues of the front vowels /)52 W
/Times-Italic SF
(iy)SH
/Times-Roman SF
(/, /)52 W
/Times-Italic SF
(ih)SH
/Times-Roman SF
(/, and /)53 W
/Times-Italic SF
(eh)SH
/Times-Roman SF
(/,)SH
30601 XM
(related due to similar positioning of the vocal apparatus,)53 W
10800 61094 MT
(manifest themselves in)
36 W( measures of those cues.  The matrices {)35 W
/Symbol SF
(S)SH
/Times-Roman SF
39858 XM
(} model the within-class correlation)35 W
9 /Times-Italic AF
39608 61454 MT
(j)SH
11 /Times-Roman AF
10800 62833 MT
(between features.  The matrix)43 W
/Symbol SF
24392 XM
(S)SH
/Times-Roman SF
25362 XM
(is defined as a CD-dimensional block diagonal matrix with)44 W
/Symbol SF
52001 XM
(S)SH
/Times-Roman SF
53221 XM
(as the)44 W
9 /Times-Italic AF
52652 63193 MT
(j)SH
/Times-Roman SF
11106 64209 MT
(th)SH
11 /Times-Italic AF
10800 64572 MT
(j)SH
/Times-Roman SF
12156 XM
(block.)SH
/Symbol SF
15575 XM
(S)SH
/Times-Roman SF
16576 XM
(is is block diagonal due to the assumption of independent observations. In the)
75 W( phonetic)74 W
10800 66311 MT
(classifier example, this assumption means that individual realizations of)
28 W( phonemes are not correlated.)29 W
10800 68050 MT
(The validity of)
156 W( this assumption depends on the degree to which contextual effects manifest them-)155 W
10800 69789 MT
(selves in the feature data.)SH
10800 50 10800 70744 UL
7 SS 
11700 72245 MT
(3)SH
9 SS 
12050 72572 MT
(All speech-related terms are given in Appendix B.)SH
ES
%%Page: 17 18
BS
0 SI
10 /Times-Roman AF
54800 4286 MT
(17)SH
11 SS 
13300 7955 MT
(Another property of the assumed distributions is)
35 W( dogmatism, which is of extreme importance to)36 W
10800 9694 MT
(the estimation methods described in this)
119 W( chapter.  Dogmatism is defined as the ratio of the within-)118 W
10800 11433 MT
(class variance \050)78 W
/Symbol SF
(S)SH
/Times-Roman SF
(\051 to the)
78 W( between-speaker variance \050)79 W
/Symbol SF
(S)SH
/Times-Roman SF
35298 XM
(\051. In)
433 W( the one-dimensional case, dogmatism is)79 W
9 /Times-Italic AF
34848 11793 MT
(o)SH
11 /Times-Roman AF
10800 13172 MT
(computed as)SH
/Symbol SF
16604 XM
(s)SH
/Times-Roman SF
(/)SH
/Symbol SF
(s)SH
/Times-Roman SF
18636 XM
(. For)
275 W( the D-dimensional cases in the present study, dogmatism will be computed as)SH
8 /Times-Italic AF
18236 13517 MT
(o)SH
1095 50 20311 14270 UL
18205 15076 MT
(CD)SH
-2 SI
11 /Symbol AF
19707 15266 MT
(\326)SH
0 SI
(S)SH
/Times-Roman SF
17152 15545 MT
(1)SH
8 /Times-Italic AF
20962 15611 MT
(ii)SH
1528 50 16663 15986 UL
2149 50 19482 15986 UL
11 /Symbol AF
15200 16231 MT
(d)SH
/Times-Roman SF
15893 XM
(=)SH
53693 XM
(\0502.4\051)SH
1545 50 20086 16428 UL
16 /Symbol AF
18191 16531 MT
(\345)SH
11 /Times-Italic AF
16663 16982 MT
(CD)SH
8 SS 
18650 17325 MT
(i)SH
-2 SI
11 /Symbol AF
19482 17424 MT
(\326)SH
0 SI
(S)SH
8 /Times-Italic AF
21187 17769 MT
(ii)SH
9 SS 
20737 17784 MT
(o)SH
11 /Times-Roman AF
10800 19163 MT
(Dogmatism is a strong indicator of the)
106 W( expected degree of success of adaptation, as will be shown.)105 W
10800 20902 MT
(Recall the pooled distributions of the data from Figure 2-3 and the)
38 W( 1-D representations in Figure 2-4.)39 W
10800 22641 MT
(These distributions are dependent on both)49 W
/Symbol SF
29790 XM
(S)SH
/Times-Roman SF
30765 XM
(and)SH
/Symbol SF
32677 XM
(S)SH
/Times-Roman SF
33778 XM
(. Consider)
372 W( the two extremes.  When)48 W
/Symbol SF
50475 XM
(S)SH
/Times-Roman SF
51276 XM
(<<)SH
/Symbol SF
52666 XM
(S)SH
/Times-Roman SF
54090 XM
(\050the)SH
9 /Times-Italic AF
33328 23001 MT
(o)SH
53317 XM
(o)SH
11 /Times-Roman AF
10800 24380 MT
(small-dogmatism case\051, most of the variation of the pooled data)
30 W( is due to the distribution of the mean)31 W
10800 26119 MT
(vectors; observations under this condition)
108 W( convey a great deal of information about the mean value)107 W
10800 27858 MT
(being estimated.  When)57 W
/Symbol SF
21690 XM
(S)SH
/Times-Roman SF
22491 XM
(>>)SH
/Symbol SF
23881 XM
(S)SH
/Times-Roman SF
25315 XM
(\050the large-dogmatism case\051, most of the pooled data variation is due)58 W
9 /Times-Italic AF
24532 28218 MT
(o)SH
11 /Times-Roman AF
10800 29597 MT
(to the within-class variance, and these)
448 W( observations provide little information regarding the)447 W
10800 31336 MT
(individual's mean.  Obviously as)
72 W( the dogmatism increases, adaptation becomes increasingly ineffec-)73 W
10800 33075 MT
(tive. It)
695 W( is actually advantageous to choose features in)
210 W( a speaker-independent recognition system)209 W
10800 34814 MT
(which exhibit large dogmatism.)
171 W( Since)
618 W( the speaker-independent classifier is built from the pooled)172 W
10800 36553 MT
(data, it is best if most of)
88 W( the variation of that data is accounted for by the within-class variance.  In)87 W
10800 38292 MT
(this case most speakers have very similar distributions of the data which are well-modeled by the)151 W
10800 40031 MT
(speaker-independent classifier.)SH
1021 1000 0 11700 65526 GB 
%%BeginDocument: /usr0/rozzi/Documentation/PhDThesis/Chapter2/dogmatism.eps
%!PS-Adobe-2.0 EPSF-2.0
%%Title: 
%%Creator: TopDraw
%%CreationDate: Sun Apr  7 17:24:52 1991
%%For: rozzi
%%DocumentFonts: (atend)
%%%Pages: 0 1
%%BoundingBox: 0 0 423 238
%%EndComments

%%BeginDocument: /usr/lib/NextStep/printPackage.ps
%!PS-Adobe-2.0
%%Title: Printing Package
%%EndComments
%Version: 2.0
%Copyright: 1988, NeXT, Inc.

/__NXdef{1 index where{pop pop pop}{def}ifelse}bind def
/__NXbdef{1 index where{pop pop pop}{bind def}ifelse}bind def
/UserObjects 10 array __NXdef
/defineuserobject{
        exch dup 1 add dup UserObjects length gt{
                array dup 0 UserObjects putinterval
                /UserObjects exch def
        }{pop}ifelse UserObjects exch 3 -1 roll put
}__NXbdef
/undefineuserobject{UserObjects exch null put}__NXbdef
/execuserobject{UserObjects exch get exec}__NXbdef
/__NXRectPath{4 2 roll moveto 1 index 0 rlineto
0 exch rlineto neg 0 rlineto closepath}__NXbdef
/__NXProcessRectArgs{
        1 index type /arraytype eq{
                exch 0 4 2 index length 1 sub{
                        dup 3 add 1 exch{1 index exch get exch}for
                        5 1 roll 5 index exec
                }for pop pop
        }{exec}ifelse
}__NXbdef
/rectfill{gsave newpath {__NXRectPath fill} __NXProcessRectArgs grestore}__NXbdef
/rectclip{newpath {__NXRectPath} __NXProcessRectArgs clip newpath}__NXbdef
/rectstroke{
        gsave newpath dup type /arraytype eq{dup length 6 eq}{false}ifelse{
                {gsave __NXRectPath null concat stroke grestore}
                dup length array cvx copy dup 2 4 -1 roll put __NXProcessRectArgs
        }{{__NXRectPath stroke} __NXProcessRectArgs}ifelse grestore
}__NXbdef
/xyshow{
        0 1 3 index length 1 sub{
                currentpoint 4 index 3 index 1 getinterval show
                3 index 3 index 2 mul 1 add get add exch
                3 index 3 index 2 mul get add exch moveto pop
        }for pop pop
}__NXbdef
/xshow{
        0 1 3 index length 1 sub{
                currentpoint 4 index 3 index 1 getinterval show
                exch 3 index 3 index get add exch moveto pop
        }for pop pop
}__NXbdef
/yshow{
        0 1 3 index length 1 sub{
                currentpoint 4 index 3 index 1 getinterval show
                3 index 3 index get add moveto pop
        }for pop pop
}__NXbdef
/arct{arcto pop pop pop pop}__NXbdef
/setbbox{pop pop pop pop}__NXbdef
/ucache{}__NXbdef
/ucachestatus{mark 0 0 0 0 0}__NXbdef
/setucacheparams{cleartomark}__NXbdef
/uappend{systemdict begin cvx exec end}__NXbdef
/ueofill{gsave newpath uappend eofill grestore}__NXbdef
/ufill{gsave newpath uappend fill grestore}__NXbdef
/ustroke{
        gsave newpath dup length 6 eq
        {exch uappend concat}{uappend}ifelse
        stroke grestore
}__NXbdef
/__NXustrokepathMatrix dup where {pop pop}{matrix def}ifelse
/ustrokepath{
        newpath dup length 6 eq{
                exch uappend __NXustrokepathMatrix currentmatrix exch concat
                strokepath setmatrix
        }{uappend strokepath}ifelse
} __NXbdef
/upath{
        [exch {/ucache cvx}if pathbbox /setbbox cvx
         {/moveto cvx}{/lineto cvx}{/curveto cvx}{/closepath cvx}pathforall]cvx
} __NXbdef
/setstrokeadjust{pop}__NXbdef
/currentstrokeadjust{false}__NXbdef
/selectfont{exch findfont exch
dup type /arraytype eq {makefont}{scalefont}ifelse setfont}__NXbdef
/_NXCombineArrays{
        counttomark dup 2 add index dup length 3 -1 roll {
                2 index length sub dup 4 1 roll 1 index exch 4 -1 roll putinterval exch
        }repeat pop pop pop
}__NXbdef
/setcmykcolor{
        1.0 exch sub dup dup 6 -1 roll
        sub dup 0 lt{pop 0}if 5 1 roll
        4 -1 roll sub dup 0 lt{pop 0}if 3 1 roll
        exch sub dup 0 lt{pop 0}if setrgbcolor
}__NXbdef
/currentcmykcolor{currentrgbcolor 3{1.0 exch sub 3 1 roll}repeat 0}__NXbdef
/flushgraphics{}def
/setwindowtype{pop pop}def
/currentwindowtype{pop 0}def
/setalpha{pop}def
/currentalpha{1.0}def
/hidecursor{}def
/obscurecursor{}def
/revealcursor{}def
/setcursor{4 {pop}repeat}bind def
/showcursor{}def
/NextStepEncoding where not{
/NextStepEncoding StandardEncoding 256 array copy def
0 [129/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/Ccedilla/Egrave
/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex/Idieresis
/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis/Ugrave/Uacute
/Ucircumflex/Udieresis/Yacute/Thorn/mu/multiply/divide/copyright
176/registered 181/brokenbar 190/logicalnot 192/onesuperior 201/twosuperior
204/threesuperior 209/plusminus/onequarter/onehalf/threequarters/agrave
/aacute/acircumflex/atilde/adieresis/aring/ccedilla/egrave/eacute
/ecircumflex/edieresis/igrave 226/iacute 228/icircumflex/idieresis/eth
/ntilde 236/ograve/oacute/ocircumflex/otilde/odieresis 242/ugrave/uacute
/ucircumflex 246/udieresis/yacute 252/thorn/ydieresis]
{dup type /nametype eq
 {NextStepEncoding 2 index 2 index put pop 1 add}{exch pop}ifelse
}forall pop
/NextStepEncoding NextStepEncoding readonly def   
/_NXfstr 128 string dup 0 (_NX) putinterval def   
/findfont{
 % Because we can never let NextStepEncoding get into
 % SharedFontDirectory, we cannot reencode a font to NextStepEncoding
 % if we are in shared mode.  So if currentshared is true,
 % we call the normal findfont and return that
 /currentshared where {pop currentshared} {false} ifelse
 {//findfont exec}
 {dup _NXfstr 3 125 getinterval cvs length 3 add _NXfstr 0 3 -1 roll
  getinterval cvn exch FontDirectory 2 index known 
  {pop FontDirectory exch get}
  {//findfont exec dup /Encoding get StandardEncoding eq
   {    dup length dict exch
        {1 index /FID ne {2 index 3 1 roll put}{pop pop}ifelse}forall
         dup /Encoding NextStepEncoding put definefont
        }{exch pop} ifelse
   }ifelse
 }ifelse
}bind def
}{pop}ifelse
/_NXProcArray 5 array __NXdef
/_NXChannels 0 __NXdef
/_NXTotalBytes 0 __NXdef
/_NXDoImageOp{
        1 index{dup}{1}ifelse /_NXChannels exch store
        _NXChannels 2 add 2 roll _NXProcArray 0 _NXChannels getinterval astore pop
        5 index 4 index mul 2 index{1 sub 8 idiv 1 add mul}{mul 1 sub 8 idiv 1 add}ifelse
        4 index mul /_NXTotalBytes exch store pop exch pop
        gsave matrix invertmatrix concat 0.5 setgray 0 0 4 2 roll rectfill grestore
        {       0 1 _NXChannels 1 sub{
                        _NXProcArray exch get exec
                        length _NXTotalBytes exch sub /_NXTotalBytes exch store}for
                _NXTotalBytes 0 le{exit}if
        }loop /_NXProcArray 5 array def
}__NXbdef
/colorimage{_NXDoImageOp}__NXbdef
/alphaimage{1 add _NXDoImageOp}def
%%EndDocument

gsave
 /__NXbasematrix matrix currentmatrix def
grestore
%%EndProlog
%%BeginSetup
/TopDrawDict 200 dict def
/xyshow {
    mark exch aload length -2 2 {
        2 roll
    } for counttomark dup 2 add -1 roll pop 1 add -1 roll gsave {
        pop pop grestore rmoveto gsave
    } exch kshow grestore rmoveto
} bind def /currentalpha {
    1
} def /setalpha {
    pop
} bind def
TopDrawDict begin /prt_stack {
    (***Top of Stack\012) print pstack (---Bottom of Stack\012) print flush
} def /prt_top {
    (top item of stack) == dup == flush
} def /prtmat matrix def /prt_ctm {
    (current transformation matrix: ) print prtmat currentmatrix == flush
} def /tmmat matrix def /obmat matrix def /strmat matrix def /pgmat matrix def /idmat matrix def /sc1mt matrix def /sc2mt matrix def /sc3mt matrix def /sc4mt matrix def /sc5mt matrix def /sc6mt matrix def /sc7mt matrix def /inmat matrix def /ctmmt matrix def /octmmt matrix def /clpmt matrix def /weglet_mat matrix def /crlinw 1 def crlinw setlinewidth /crlinjn 0 def crlinjn setlinejoin /crlincp 0 def crlincp setlinecap /crmtrlmt currentmiterlimit def /crstrpat 0 def /crfilpat 0 def /crflat currentflat def /dftflat currentflat def /strinclr false def /crlingry 0 def /crlinred 0 def /crlingrn 0 def /crlinblu 0 def /crlinalph 1 def /filinclr false def /crfilgry 0 def /crfilred 0 def /crfilgrn 0 def /crfilblu 0 def /crfilalph 1 def /crfilstyl 0 def /txtdraw true def /txtinclr false def /txtwpat false def /txtwittrans false def /crtxtgry 0 def /crtxtred 0 def /crtxtgrn 0 def /crtxtblu 0 def /crtxtalph 1 def /crtxtpat 0 def /txlndraw true def /txlninclr false def /txlnwpat false def /txlnwittrans false def /crtxlngry 0 def /crtxlnred 0 def /crtxlngrn 0 def /crtxlnblu 0 def /crtxlnalph 1 def /crtxlnpat 0 def /hilittxt false def /strdsh [2 2] def /dshpatoff 0 def /usedash false def /filwpat false def /strwpat false def /filwittrans false def /strwittrans false def /crfrtarw false def /crendarw false def /rsave 0 def /esave 0 def /sslsave 0 def /lsave 0 def /clpsave 0 def /pathsave 0 def /tpatstr 10 string def /ptdist {
    sub dup mul 3 1 roll sub dup mul add sqrt
} bind def /dodrawctm {
    octmmt currentmatrix pop idmat obmat concatmatrix ctmmt currentmatrix sc1mt concatmatrix setmatrix
} bind def /undrawctm {
    obmat inmat invertmatrix ctmmt currentmatrix sc1mt concatmatrix setmatrix
} bind def /undrawmat {
    obmat aload pop 7 -1 roll astore
} bind def /unpagectm {
    octmmt setmatrix
} bind def /unpagemat {
    pgmat aload pop 7 -1 roll astore
} bind def /drtan {
    gsave 1 setalpha 0 setlinewidth 0.333333 setgray moveto lineto stroke grestore
} bind def /drdgrdln {
    gsave 1 setalpha 0 setlinewidth [1 2] 0 setdash setgray moveto lineto stroke grestore
} bind def /drgrdln {
    gsave 1 setalpha 0 setlinewidth setgray moveto lineto stroke grestore
} bind def end
TopDrawDict begin /p1x 0 def /p1y 0 def /p2x 0 def /p2y 0 def /ssl {
    gsave dodrawctm crfrtarw crendarw or {
        /p1y 1 index def /p1x 2 index def /p2y 1 index 4 index add def /p2x 2 index 5 index add def newpath moveto rlineto
    } {
        newpath moveto rlineto
    } ifelse crlinalph setalpha crlinw setlinewidth crlincp setlinecap usedash {
        strdsh dshpatoff setdash
    } if strinclr {
        crlinred crlingrn crlinblu setrgbcolor
    } {
        crlingry setgray
    } ifelse aload pop strmat astore crfrtarw {
        currentlinewidth strmat p2x p2y p1x p1y arow
    } if crendarw {
        currentlinewidth strmat p1x p1y p2x p2y arow
    } if unpagectm concat strwpat {
        crstrpat findfont strwittrans {
            trpatstrk
        } {
            oppatstrk
        } ifelse
    } {
        stroke
    } ifelse grestore
} bind def end
TopDrawDict begin /closedspl false def /nspans 0 def /sstrt {
    gsave dodrawctm /closedspl exch def /nspans 0 def newpath
} bind def /sstrtpath {
    dodrawctm /closedspl exch def /nspans 0 def newpath
} bind def /sadd {
    nspans 0 eq {
        moveto
    } {
        pop pop
    } ifelse curveto /nspans nspans 1 add def
} bind def /splstroke {
    nspans 0 gt {
        unpagectm concat closedspl {
            closepath
        } if crlincp setlinecap crlinjn setlinejoin crlinalph setalpha crlinw setlinewidth crmtrlmt setmiterlimit usedash {
            strdsh dshpatoff setdash
        } if strinclr {
            crlinred crlingrn crlinblu setrgbcolor
        } {
            crlingry setgray
        } ifelse strwpat {
            flattenpath crstrpat findfont strwittrans {
                trpatstrk
            } {
                oppatstrk
            } ifelse
        } {
            stroke
        } ifelse
    } {
        pop
    } ifelse grestore
} bind def /splfill {
    nspans 0 gt {
        closedspl {
            closepath
        } if crfilalph setalpha filinclr {
            crfilred crfilgrn crfilblu setrgbcolor
        } {
            crfilgry setgray
        } ifelse filwpat {
            flattenpath crfilpat findfont crfilstyl 0 eq {
                filwittrans {
                    trpateofil
                } {
                    oppateofil
                } ifelse
            } {
                filwittrans {
                    trpatfil
                } {
                    oppatfil
                } ifelse
            } ifelse
        } {
            crfilstyl 0 eq {
                eofill
            } {
                fill
            } ifelse
        } ifelse
    } if grestore
} bind def /mksplpath {
    nspans 0 gt {
        closedspl {
            closepath
        } if
    } if
} bind def end
TopDrawDict begin /dotx {
    gsave txtdraw {
        concat selectfont txtinclr {
            crtxtred crtxtgrn crtxtblu setrgbcolor
        } {
            crtxtgry setgray
        } ifelse crtxtalph setalpha moveto xyshow
    } {
        pop pop pop pop pop pop pop
    } ifelse grestore
} bind def /txtlin {
    gsave txlndraw {
        concat txlninclr {
            crtxlnred crtxlngrn crtxlnblu setrgbcolor
        } {
            crtxlngry setgray
        } ifelse crtxlnalph setalpha setlinewidth 0 setlinecap newpath moveto 0 rlineto stroke
    } {
        pop pop pop pop pop
    } ifelse grestore
} bind def end
%%EndSetup
gsave
0 0 423 238 rectclip
-3.5 -63.066082 translate
3.5 63.066082 422.5 237.933914 rectclip
gsave
TopDrawDict begin
/invpats true def
/crlincp 0 def
/crlinjn 0 def
/crmtrlmt 10 def
/crlinw 1 def
/crlinalph 1 def
/crlinred 0 def /crlingrn 0 def /crlinblu 0 def /strinclr true def
/crfilalph 1 def
/crfilred 1 def /crfilgrn 1 def /crfilblu 1 def /filinclr true def
/filwpat false def
TopDrawDict /piddict known TopDrawDict /ipiddict known or {
    1 getpat /crfilpat exch def
} if
/filwittrans false def
/strwpat false def
TopDrawDict /piddict known TopDrawDict /ipiddict known or {
    1 getpat /crstrpat exch def
} if
/strwittrans false def
/usedash false def
/strdsh [2 2] def /dshpatoff 0 def
/crendarw false def
/crfrtarw false def
/txtdraw false def
/crtxtalph 1 def
/crtxtred 0.333333 def /crtxtgrn 0.333333 def /crtxtblu 0.333333 def /txtinclr true def
/txtwpat false def
/txtwittrans false def
/txlndraw false def
/crtxlnalph 1 def
/crtxlnred 0.333333 def /crtxlngrn 0.333333 def /crtxlnblu 0.333333 def /txlninclr true def
/txlnwittrans false def
/txlnwpat false def
/crlinw 1.8 def
0.674173 0 0 0.674173 107.68573 99.645584 sc5mt astore 621 0 20 162 0.674173 0 0 0.674173 -6.814278 -26.178284 sc6mt astore ssl
/txtdraw true def
/txlndraw true def
(m) [0 0] 312 141 /Symbol [ 20 1 mul 0 0 20 0 0 ] [0.674173 0 0 0.674173 -2.095065 -27.52663] dotx
/txtdraw true def
/txlndraw true def
(o ) [9.776001 0 0 0] 323.519989 134.600006 /Helvetica-Bold [ 16 1 mul 0 0 16 0 0 ] [0.674173 0 0 0.674173 -2.095065 -27.52663] dotx
/txtdraw true def
/txlndraw true def
/crtxlnred 0.4907 def /crtxlngrn 0.4907 def /crtxlnblu 0.4907 def /txlninclr true def
(m) [0 0] 312 141 /Symbol [ 20 1 mul 0 0 20 0 0 ] [0.674173 0 0 0.674173 -4.117584 112.027237] dotx
/txtdraw true def
/txlndraw true def
(o ) [9.776001 0 0 0] 323.519989 134.600006 /Helvetica-Bold [ 16 1 mul 0 0 16 0 0 ] [0.674173 0 0 0.674173 -4.117584 112.027237] dotx
0.674173 0 0 0.674173 95.68573 250.145584 sc5mt astore 621 0 20 162 0.674173 0 0 0.674173 -9.814278 115.321716 sc6mt astore ssl
/crlinw 1 def
false [0.478992 0 0 1 49.389828 2] sstrt
systemdict
begin
44 222.999985 135.859497 299.5 setbbox
44 223 moveto
44 223 52.553719 226.999985 52.553719 226.999985 curveto
52.553719 226.999985 58.457298 233 58.457298 233 curveto
58.457298 233 63.12812 242 63.12812 242 curveto
63.12812 242 71 261 71 261 curveto
71 261 75.983467 275 75.983467 275 curveto
75.983467 275 80 285 80 285 curveto
80 285 83.590759 293 83.590759 293 curveto
83.590759 293 87.038277 297.5 87.038277 297.5 curveto
87.038277 297.5 89.929733 298.5 89.929733 298.5 curveto
89.929733 298.5 92.376358 297.5 92.376358 297.5 curveto
92.376358 297.5 96.066116 294 96.066116 294 curveto
96.066116 294 100.900818 285 100.900818 285 curveto
100.900818 285 104.619827 275 104.619827 275 curveto
104.619827 275 109.082642 263 109.082642 263 curveto
109.082642 263 113.545441 249.999985 113.545441 249.999985 curveto
113.545441 249.999985 120 236 120 236 curveto
120 236 123.586777 230.999985 123.586777 230.999985 curveto
123.586777 230.999985 129.537186 225.999985 129.537186 225.999985 curveto
129.537186 225.999985 135.859497 222.999985 135.859497 222.999985 curveto
end
/nspans 19 def [1 0 0 1 -336 38] splstroke
false [3.111533 0 0 0.699092 -80.631577 -72.431351] sstrt
systemdict
begin
44 222.999985 135.859497 299.5 setbbox
44 223 moveto
44 223 52.553719 226.999985 52.553719 226.999985 curveto
52.553719 226.999985 58.457298 233 58.457298 233 curveto
58.457298 233 63.12812 242 63.12812 242 curveto
63.12812 242 71 261 71 261 curveto
71 261 75.983467 275 75.983467 275 curveto
75.983467 275 80 285 80 285 curveto
80 285 83.590759 293 83.590759 293 curveto
83.590759 293 87.038277 297.5 87.038277 297.5 curveto
87.038277 297.5 89.929733 298.5 89.929733 298.5 curveto
89.929733 298.5 92.376358 297.5 92.376358 297.5 curveto
92.376358 297.5 96.066116 294 96.066116 294 curveto
96.066116 294 100.900818 285 100.900818 285 curveto
100.900818 285 104.619827 275 104.619827 275 curveto
104.619827 275 109.082642 263 109.082642 263 curveto
109.082642 263 113.545441 249.999985 113.545441 249.999985 curveto
113.545441 249.999985 120 236 120 236 curveto
120 236 123.586777 230.999985 123.586777 230.999985 curveto
123.586777 230.999985 129.537186 225.999985 129.537186 225.999985 curveto
129.537186 225.999985 135.859497 222.999985 135.859497 222.999985 curveto
end
/nspans 19 def [1 0 0 1 -96 -103.5] splstroke
false [3.111533 0 0 0.699092 -86.131577 -72.431351] sstrt
systemdict
begin
44 222.999985 135.859497 299.5 setbbox
44 223 moveto
44 223 52.553719 226.999985 52.553719 226.999985 curveto
52.553719 226.999985 58.457298 233 58.457298 233 curveto
58.457298 233 63.12812 242 63.12812 242 curveto
63.12812 242 71 261 71 261 curveto
71 261 75.983467 275 75.983467 275 curveto
75.983467 275 80 285 80 285 curveto
80 285 83.590759 293 83.590759 293 curveto
83.590759 293 87.038277 297.5 87.038277 297.5 curveto
87.038277 297.5 89.929733 298.5 89.929733 298.5 curveto
89.929733 298.5 92.376358 297.5 92.376358 297.5 curveto
92.376358 297.5 96.066116 294 96.066116 294 curveto
96.066116 294 100.900818 285 100.900818 285 curveto
100.900818 285 104.619827 275 104.619827 275 curveto
104.619827 275 109.082642 263 109.082642 263 curveto
109.082642 263 113.545441 249.999985 113.545441 249.999985 curveto
113.545441 249.999985 120 236 120 236 curveto
120 236 123.586777 230.999985 123.586777 230.999985 curveto
123.586777 230.999985 129.537186 225.999985 129.537186 225.999985 curveto
129.537186 225.999985 135.859497 222.999985 135.859497 222.999985 curveto
end
/nspans 19 def [1 0 0 1 -110.5 -103.5] splstroke
false [3.111533 0 0 0.699092 -77.131577 -72.871201] sstrt
systemdict
begin
44 222.999985 135.859497 299.5 setbbox
44 223 moveto
44 223 52.553719 226.999985 52.553719 226.999985 curveto
52.553719 226.999985 58.457298 233 58.457298 233 curveto
58.457298 233 63.12812 242 63.12812 242 curveto
63.12812 242 71 261 71 261 curveto
71 261 75.983467 275 75.983467 275 curveto
75.983467 275 80 285 80 285 curveto
80 285 83.590759 293 83.590759 293 curveto
83.590759 293 87.038277 297.5 87.038277 297.5 curveto
87.038277 297.5 89.929733 298.5 89.929733 298.5 curveto
89.929733 298.5 92.376358 297.5 92.376358 297.5 curveto
92.376358 297.5 96.066116 294 96.066116 294 curveto
96.066116 294 100.900818 285 100.900818 285 curveto
100.900818 285 104.619827 275 104.619827 275 curveto
104.619827 275 109.082642 263 109.082642 263 curveto
109.082642 263 113.545441 249.999985 113.545441 249.999985 curveto
113.545441 249.999985 120 236 120 236 curveto
120 236 123.586777 230.999985 123.586777 230.999985 curveto
123.586777 230.999985 129.537186 225.999985 129.537186 225.999985 curveto
129.537186 225.999985 135.859497 222.999985 135.859497 222.999985 curveto
end
/nspans 19 def [1 0 0 1 -83.5 -112.5] splstroke
false [3.111533 0 0 0.699092 -68.131577 -72.871201] sstrt
systemdict
begin
44 222.999985 135.859497 299.5 setbbox
44 223 moveto
44 223 52.553719 226.999985 52.553719 226.999985 curveto
52.553719 226.999985 58.457298 233 58.457298 233 curveto
58.457298 233 63.12812 242 63.12812 242 curveto
63.12812 242 71 261 71 261 curveto
71 261 75.983467 275 75.983467 275 curveto
75.983467 275 80 285 80 285 curveto
80 285 83.590759 293 83.590759 293 curveto
83.590759 293 87.038277 297.5 87.038277 297.5 curveto
87.038277 297.5 89.929733 298.5 89.929733 298.5 curveto
89.929733 298.5 92.376358 297.5 92.376358 297.5 curveto
92.376358 297.5 96.066116 294 96.066116 294 curveto
96.066116 294 100.900818 285 100.900818 285 curveto
100.900818 285 104.619827 275 104.619827 275 curveto
104.619827 275 109.082642 263 109.082642 263 curveto
109.082642 263 113.545441 249.999985 113.545441 249.999985 curveto
113.545441 249.999985 120 236 120 236 curveto
120 236 123.586777 230.999985 123.586777 230.999985 curveto
123.586777 230.999985 129.537186 225.999985 129.537186 225.999985 curveto
129.537186 225.999985 135.859497 222.999985 135.859497 222.999985 curveto
end
/nspans 19 def [1 0 0 1 -74.5 -71.5] splstroke
false [3.111533 0 0 0.699092 -59.131577 -72.871201] sstrt
systemdict
begin
44 222.999985 135.859497 299.5 setbbox
44 223 moveto
44 223 52.553719 226.999985 52.553719 226.999985 curveto
52.553719 226.999985 58.457298 233 58.457298 233 curveto
58.457298 233 63.12812 242 63.12812 242 curveto
63.12812 242 71 261 71 261 curveto
71 261 75.983467 275 75.983467 275 curveto
75.983467 275 80 285 80 285 curveto
80 285 83.590759 293 83.590759 293 curveto
83.590759 293 87.038277 297.5 87.038277 297.5 curveto
87.038277 297.5 89.929733 298.5 89.929733 298.5 curveto
89.929733 298.5 92.376358 297.5 92.376358 297.5 curveto
92.376358 297.5 96.066116 294 96.066116 294 curveto
96.066116 294 100.900818 285 100.900818 285 curveto
100.900818 285 104.619827 275 104.619827 275 curveto
104.619827 275 109.082642 263 109.082642 263 curveto
109.082642 263 113.545441 249.999985 113.545441 249.999985 curveto
113.545441 249.999985 120 236 120 236 curveto
120 236 123.586777 230.999985 123.586777 230.999985 curveto
123.586777 230.999985 129.537186 225.999985 129.537186 225.999985 curveto
129.537186 225.999985 135.859497 222.999985 135.859497 222.999985 curveto
end
/nspans 19 def [1 0 0 1 -74.5 -71.5] splstroke
false [3.111533 0 0 0.699092 -50.131577 -72.871201] sstrt
systemdict
begin
44 222.999985 135.859497 299.5 setbbox
44 223 moveto
44 223 52.553719 226.999985 52.553719 226.999985 curveto
52.553719 226.999985 58.457298 233 58.457298 233 curveto
58.457298 233 63.12812 242 63.12812 242 curveto
63.12812 242 71 261 71 261 curveto
71 261 75.983467 275 75.983467 275 curveto
75.983467 275 80 285 80 285 curveto
80 285 83.590759 293 83.590759 293 curveto
83.590759 293 87.038277 297.5 87.038277 297.5 curveto
87.038277 297.5 89.929733 298.5 89.929733 298.5 curveto
89.929733 298.5 92.376358 297.5 92.376358 297.5 curveto
92.376358 297.5 96.066116 294 96.066116 294 curveto
96.066116 294 100.900818 285 100.900818 285 curveto
100.900818 285 104.619827 275 104.619827 275 curveto
104.619827 275 109.082642 263 109.082642 263 curveto
109.082642 263 113.545441 249.999985 113.545441 249.999985 curveto
113.545441 249.999985 120 236 120 236 curveto
120 236 123.586777 230.999985 123.586777 230.999985 curveto
123.586777 230.999985 129.537186 225.999985 129.537186 225.999985 curveto
129.537186 225.999985 135.859497 222.999985 135.859497 222.999985 curveto
end
/nspans 19 def [1 0 0 1 -74.5 -71.5] splstroke
false [3.111533 0 0 0.699092 -56.631577 -72.431351] sstrt
systemdict
begin
44 222.999985 135.859497 299.5 setbbox
44 223 moveto
44 223 52.553719 226.999985 52.553719 226.999985 curveto
52.553719 226.999985 58.457298 233 58.457298 233 curveto
58.457298 233 63.12812 242 63.12812 242 curveto
63.12812 242 71 261 71 261 curveto
71 261 75.983467 275 75.983467 275 curveto
75.983467 275 80 285 80 285 curveto
80 285 83.590759 293 83.590759 293 curveto
83.590759 293 87.038277 297.5 87.038277 297.5 curveto
87.038277 297.5 89.929733 298.5 89.929733 298.5 curveto
89.929733 298.5 92.376358 297.5 92.376358 297.5 curveto
92.376358 297.5 96.066116 294 96.066116 294 curveto
96.066116 294 100.900818 285 100.900818 285 curveto
100.900818 285 104.619827 275 104.619827 275 curveto
104.619827 275 109.082642 263 109.082642 263 curveto
109.082642 263 113.545441 249.999985 113.545441 249.999985 curveto
113.545441 249.999985 120 236 120 236 curveto
120 236 123.586777 230.999985 123.586777 230.999985 curveto
123.586777 230.999985 129.537186 225.999985 129.537186 225.999985 curveto
129.537186 225.999985 135.859497 222.999985 135.859497 222.999985 curveto
end
/nspans 19 def [1 0 0 1 -90 -71.5] splstroke
false [3.111533 0 0 0.699092 -63.631577 -72.431351] sstrt
systemdict
begin
44 222.999985 135.859497 299.5 setbbox
44 223 moveto
44 223 52.553719 226.999985 52.553719 226.999985 curveto
52.553719 226.999985 58.457298 233 58.457298 233 curveto
58.457298 233 63.12812 242 63.12812 242 curveto
63.12812 242 71 261 71 261 curveto
71 261 75.983467 275 75.983467 275 curveto
75.983467 275 80 285 80 285 curveto
80 285 83.590759 293 83.590759 293 curveto
83.590759 293 87.038277 297.5 87.038277 297.5 curveto
87.038277 297.5 89.929733 298.5 89.929733 298.5 curveto
89.929733 298.5 92.376358 297.5 92.376358 297.5 curveto
92.376358 297.5 96.066116 294 96.066116 294 curveto
96.066116 294 100.900818 285 100.900818 285 curveto
100.900818 285 104.619827 275 104.619827 275 curveto
104.619827 275 109.082642 263 109.082642 263 curveto
109.082642 263 113.545441 249.999985 113.545441 249.999985 curveto
113.545441 249.999985 120 236 120 236 curveto
120 236 123.586777 230.999985 123.586777 230.999985 curveto
123.586777 230.999985 129.537186 225.999985 129.537186 225.999985 curveto
129.537186 225.999985 135.859497 222.999985 135.859497 222.999985 curveto
end
/nspans 19 def [1 0 0 1 -106 -71.5] splstroke
false [3.111533 0 0 0.699092 -71.631577 -72.871201] sstrt
systemdict
begin
44 222.999985 135.859497 299.5 setbbox
44 223 moveto
44 223 52.553719 226.999985 52.553719 226.999985 curveto
52.553719 226.999985 58.457298 233 58.457298 233 curveto
58.457298 233 63.12812 242 63.12812 242 curveto
63.12812 242 71 261 71 261 curveto
71 261 75.983467 275 75.983467 275 curveto
75.983467 275 80 285 80 285 curveto
80 285 83.590759 293 83.590759 293 curveto
83.590759 293 87.038277 297.5 87.038277 297.5 curveto
87.038277 297.5 89.929733 298.5 89.929733 298.5 curveto
89.929733 298.5 92.376358 297.5 92.376358 297.5 curveto
92.376358 297.5 96.066116 294 96.066116 294 curveto
96.066116 294 100.900818 285 100.900818 285 curveto
100.900818 285 104.619827 275 104.619827 275 curveto
104.619827 275 109.082642 263 109.082642 263 curveto
109.082642 263 113.545441 249.999985 113.545441 249.999985 curveto
113.545441 249.999985 120 236 120 236 curveto
120 236 123.586777 230.999985 123.586777 230.999985 curveto
123.586777 230.999985 129.537186 225.999985 129.537186 225.999985 curveto
129.537186 225.999985 135.859497 222.999985 135.859497 222.999985 curveto
end
/nspans 19 def [1 0 0 1 -123 -71] splstroke
/crlinred 0.333333 def /crlingrn 0.333333 def /crlinblu 0.333333 def /strinclr true def
false [0.61507 0 0 1 154.392639 -139.5] sstrt
systemdict
begin
44 222.999985 135.859497 299.5 setbbox
44 223 moveto
44 223 52.553719 226.999985 52.553719 226.999985 curveto
52.553719 226.999985 58.457298 233 58.457298 233 curveto
58.457298 233 63.12812 242 63.12812 242 curveto
63.12812 242 71 261 71 261 curveto
71 261 75.983467 275 75.983467 275 curveto
75.983467 275 80 285 80 285 curveto
80 285 83.590759 293 83.590759 293 curveto
83.590759 293 87.038277 297.5 87.038277 297.5 curveto
87.038277 297.5 89.929733 298.5 89.929733 298.5 curveto
89.929733 298.5 92.376358 297.5 92.376358 297.5 curveto
92.376358 297.5 96.066116 294 96.066116 294 curveto
96.066116 294 100.900818 285 100.900818 285 curveto
100.900818 285 104.619827 275 104.619827 275 curveto
104.619827 275 109.082642 263 109.082642 263 curveto
109.082642 263 113.545441 249.999985 113.545441 249.999985 curveto
113.545441 249.999985 120 236 120 236 curveto
120 236 123.586777 230.999985 123.586777 230.999985 curveto
123.586777 230.999985 129.537186 225.999985 129.537186 225.999985 curveto
129.537186 225.999985 135.859497 222.999985 135.859497 222.999985 curveto
end
/nspans 19 def [1 0 0 1 -216 -112.5] splstroke
/crlinred 0 def /crlingrn 0 def /crlinblu 0 def /strinclr true def
false [0.478992 0 0 1 74.389832 2] sstrt
systemdict
begin
44 222.999985 135.859497 299.5 setbbox
44 223 moveto
44 223 52.553719 226.999985 52.553719 226.999985 curveto
52.553719 226.999985 58.457298 233 58.457298 233 curveto
58.457298 233 63.12812 242 63.12812 242 curveto
63.12812 242 71 261 71 261 curveto
71 261 75.983467 275 75.983467 275 curveto
75.983467 275 80 285 80 285 curveto
80 285 83.590759 293 83.590759 293 curveto
83.590759 293 87.038277 297.5 87.038277 297.5 curveto
87.038277 297.5 89.929733 298.5 89.929733 298.5 curveto
89.929733 298.5 92.376358 297.5 92.376358 297.5 curveto
92.376358 297.5 96.066116 294 96.066116 294 curveto
96.066116 294 100.900818 285 100.900818 285 curveto
100.900818 285 104.619827 275 104.619827 275 curveto
104.619827 275 109.082642 263 109.082642 263 curveto
109.082642 263 113.545441 249.999985 113.545441 249.999985 curveto
113.545441 249.999985 120 236 120 236 curveto
120 236 123.586777 230.999985 123.586777 230.999985 curveto
123.586777 230.999985 129.537186 225.999985 129.537186 225.999985 curveto
129.537186 225.999985 135.859497 222.999985 135.859497 222.999985 curveto
end
/nspans 19 def [1 0 0 1 -320 38] splstroke
false [0.478992 0 0 1 91.389832 2] sstrt
systemdict
begin
44 222.999985 135.859497 299.5 setbbox
44 223 moveto
44 223 52.553719 226.999985 52.553719 226.999985 curveto
52.553719 226.999985 58.457298 233 58.457298 233 curveto
58.457298 233 63.12812 242 63.12812 242 curveto
63.12812 242 71 261 71 261 curveto
71 261 75.983467 275 75.983467 275 curveto
75.983467 275 80 285 80 285 curveto
80 285 83.590759 293 83.590759 293 curveto
83.590759 293 87.038277 297.5 87.038277 297.5 curveto
87.038277 297.5 89.929733 298.5 89.929733 298.5 curveto
89.929733 298.5 92.376358 297.5 92.376358 297.5 curveto
92.376358 297.5 96.066116 294 96.066116 294 curveto
96.066116 294 100.900818 285 100.900818 285 curveto
100.900818 285 104.619827 275 104.619827 275 curveto
104.619827 275 109.082642 263 109.082642 263 curveto
109.082642 263 113.545441 249.999985 113.545441 249.999985 curveto
113.545441 249.999985 120 236 120 236 curveto
120 236 123.586777 230.999985 123.586777 230.999985 curveto
123.586777 230.999985 129.537186 225.999985 129.537186 225.999985 curveto
129.537186 225.999985 135.859497 222.999985 135.859497 222.999985 curveto
end
/nspans 19 def [1 0 0 1 -312 39] splstroke
false [0.478992 0 0 1 108.389816 1.5] sstrt
systemdict
begin
44 222.999985 135.859497 299.5 setbbox
44 223 moveto
44 223 52.553719 226.999985 52.553719 226.999985 curveto
52.553719 226.999985 58.457298 233 58.457298 233 curveto
58.457298 233 63.12812 242 63.12812 242 curveto
63.12812 242 71 261 71 261 curveto
71 261 75.983467 275 75.983467 275 curveto
75.983467 275 80 285 80 285 curveto
80 285 83.590759 293 83.590759 293 curveto
83.590759 293 87.038277 297.5 87.038277 297.5 curveto
87.038277 297.5 89.929733 298.5 89.929733 298.5 curveto
89.929733 298.5 92.376358 297.5 92.376358 297.5 curveto
92.376358 297.5 96.066116 294 96.066116 294 curveto
96.066116 294 100.900818 285 100.900818 285 curveto
100.900818 285 104.619827 275 104.619827 275 curveto
104.619827 275 109.082642 263 109.082642 263 curveto
109.082642 263 113.545441 249.999985 113.545441 249.999985 curveto
113.545441 249.999985 120 236 120 236 curveto
120 236 123.586777 230.999985 123.586777 230.999985 curveto
123.586777 230.999985 129.537186 225.999985 129.537186 225.999985 curveto
129.537186 225.999985 135.859497 222.999985 135.859497 222.999985 curveto
end
/nspans 19 def [1 0 0 1 -304 38.5] splstroke
false [0.478992 0 0 1 121.389816 2] sstrt
systemdict
begin
44 222.999985 135.859497 299.5 setbbox
44 223 moveto
44 223 52.553719 226.999985 52.553719 226.999985 curveto
52.553719 226.999985 58.457298 233 58.457298 233 curveto
58.457298 233 63.12812 242 63.12812 242 curveto
63.12812 242 71 261 71 261 curveto
71 261 75.983467 275 75.983467 275 curveto
75.983467 275 80 285 80 285 curveto
80 285 83.590759 293 83.590759 293 curveto
83.590759 293 87.038277 297.5 87.038277 297.5 curveto
87.038277 297.5 89.929733 298.5 89.929733 298.5 curveto
89.929733 298.5 92.376358 297.5 92.376358 297.5 curveto
92.376358 297.5 96.066116 294 96.066116 294 curveto
96.066116 294 100.900818 285 100.900818 285 curveto
100.900818 285 104.619827 275 104.619827 275 curveto
104.619827 275 109.082642 263 109.082642 263 curveto
109.082642 263 113.545441 249.999985 113.545441 249.999985 curveto
113.545441 249.999985 120 236 120 236 curveto
120 236 123.586777 230.999985 123.586777 230.999985 curveto
123.586777 230.999985 129.537186 225.999985 129.537186 225.999985 curveto
129.537186 225.999985 135.859497 222.999985 135.859497 222.999985 curveto
end
/nspans 19 def [1 0 0 1 -300 38] splstroke
false [0.478992 0 0 1 131.389816 1.5] sstrt
systemdict
begin
44 222.999985 135.859497 299.5 setbbox
44 223 moveto
44 223 52.553719 226.999985 52.553719 226.999985 curveto
52.553719 226.999985 58.457298 233 58.457298 233 curveto
58.457298 233 63.12812 242 63.12812 242 curveto
63.12812 242 71 261 71 261 curveto
71 261 75.983467 275 75.983467 275 curveto
75.983467 275 80 285 80 285 curveto
80 285 83.590759 293 83.590759 293 curveto
83.590759 293 87.038277 297.5 87.038277 297.5 curveto
87.038277 297.5 89.929733 298.5 89.929733 298.5 curveto
89.929733 298.5 92.376358 297.5 92.376358 297.5 curveto
92.376358 297.5 96.066116 294 96.066116 294 curveto
96.066116 294 100.900818 285 100.900818 285 curveto
100.900818 285 104.619827 275 104.619827 275 curveto
104.619827 275 109.082642 263 109.082642 263 curveto
109.082642 263 113.545441 249.999985 113.545441 249.999985 curveto
113.545441 249.999985 120 236 120 236 curveto
120 236 123.586777 230.999985 123.586777 230.999985 curveto
123.586777 230.999985 129.537186 225.999985 129.537186 225.999985 curveto
129.537186 225.999985 135.859497 222.999985 135.859497 222.999985 curveto
end
/nspans 19 def [1 0 0 1 -299 38.5] splstroke
false [0.478992 0 0 1 139.889816 1.5] sstrt
systemdict
begin
44 222.999985 135.859497 299.5 setbbox
44 223 moveto
44 223 52.553719 226.999985 52.553719 226.999985 curveto
52.553719 226.999985 58.457298 233 58.457298 233 curveto
58.457298 233 63.12812 242 63.12812 242 curveto
63.12812 242 71 261 71 261 curveto
71 261 75.983467 275 75.983467 275 curveto
75.983467 275 80 285 80 285 curveto
80 285 83.590759 293 83.590759 293 curveto
83.590759 293 87.038277 297.5 87.038277 297.5 curveto
87.038277 297.5 89.929733 298.5 89.929733 298.5 curveto
89.929733 298.5 92.376358 297.5 92.376358 297.5 curveto
92.376358 297.5 96.066116 294 96.066116 294 curveto
96.066116 294 100.900818 285 100.900818 285 curveto
100.900818 285 104.619827 275 104.619827 275 curveto
104.619827 275 109.082642 263 109.082642 263 curveto
109.082642 263 113.545441 249.999985 113.545441 249.999985 curveto
113.545441 249.999985 120 236 120 236 curveto
120 236 123.586777 230.999985 123.586777 230.999985 curveto
123.586777 230.999985 129.537186 225.999985 129.537186 225.999985 curveto
129.537186 225.999985 135.859497 222.999985 135.859497 222.999985 curveto
end
/nspans 19 def [1 0 0 1 -299.5 38.5] splstroke
false [0.478992 0 0 1 144.889816 1.5] sstrt
systemdict
begin
44 222.999985 135.859497 299.5 setbbox
44 223 moveto
44 223 52.553719 226.999985 52.553719 226.999985 curveto
52.553719 226.999985 58.457298 233 58.457298 233 curveto
58.457298 233 63.12812 242 63.12812 242 curveto
63.12812 242 71 261 71 261 curveto
71 261 75.983467 275 75.983467 275 curveto
75.983467 275 80 285 80 285 curveto
80 285 83.590759 293 83.590759 293 curveto
83.590759 293 87.038277 297.5 87.038277 297.5 curveto
87.038277 297.5 89.929733 298.5 89.929733 298.5 curveto
89.929733 298.5 92.376358 297.5 92.376358 297.5 curveto
92.376358 297.5 96.066116 294 96.066116 294 curveto
96.066116 294 100.900818 285 100.900818 285 curveto
100.900818 285 104.619827 275 104.619827 275 curveto
104.619827 275 109.082642 263 109.082642 263 curveto
109.082642 263 113.545441 249.999985 113.545441 249.999985 curveto
113.545441 249.999985 120 236 120 236 curveto
120 236 123.586777 230.999985 123.586777 230.999985 curveto
123.586777 230.999985 129.537186 225.999985 129.537186 225.999985 curveto
129.537186 225.999985 135.859497 222.999985 135.859497 222.999985 curveto
end
/nspans 19 def [1 0 0 1 -303.5 38.5] splstroke
false [0.478992 0 0 1 173.389816 1.5] sstrt
systemdict
begin
44 222.999985 135.859497 299.5 setbbox
44 223 moveto
44 223 52.553719 226.999985 52.553719 226.999985 curveto
52.553719 226.999985 58.457298 233 58.457298 233 curveto
58.457298 233 63.12812 242 63.12812 242 curveto
63.12812 242 71 261 71 261 curveto
71 261 75.983467 275 75.983467 275 curveto
75.983467 275 80 285 80 285 curveto
80 285 83.590759 293 83.590759 293 curveto
83.590759 293 87.038277 297.5 87.038277 297.5 curveto
87.038277 297.5 89.929733 298.5 89.929733 298.5 curveto
89.929733 298.5 92.376358 297.5 92.376358 297.5 curveto
92.376358 297.5 96.066116 294 96.066116 294 curveto
96.066116 294 100.900818 285 100.900818 285 curveto
100.900818 285 104.619827 275 104.619827 275 curveto
104.619827 275 109.082642 263 109.082642 263 curveto
109.082642 263 113.545441 249.999985 113.545441 249.999985 curveto
113.545441 249.999985 120 236 120 236 curveto
120 236 123.586777 230.999985 123.586777 230.999985 curveto
123.586777 230.999985 129.537186 225.999985 129.537186 225.999985 curveto
129.537186 225.999985 135.859497 222.999985 135.859497 222.999985 curveto
end
/nspans 19 def [1 0 0 1 -284 38.5] splstroke
false [0.478992 0 0 1 185.389816 1.5] sstrt
systemdict
begin
44 222.999985 135.859497 299.5 setbbox
44 223 moveto
44 223 52.553719 226.999985 52.553719 226.999985 curveto
52.553719 226.999985 58.457298 233 58.457298 233 curveto
58.457298 233 63.12812 242 63.12812 242 curveto
63.12812 242 71 261 71 261 curveto
71 261 75.983467 275 75.983467 275 curveto
75.983467 275 80 285 80 285 curveto
80 285 83.590759 293 83.590759 293 curveto
83.590759 293 87.038277 297.5 87.038277 297.5 curveto
87.038277 297.5 89.929733 298.5 89.929733 298.5 curveto
89.929733 298.5 92.376358 297.5 92.376358 297.5 curveto
92.376358 297.5 96.066116 294 96.066116 294 curveto
96.066116 294 100.900818 285 100.900818 285 curveto
100.900818 285 104.619827 275 104.619827 275 curveto
104.619827 275 109.082642 263 109.082642 263 curveto
109.082642 263 113.545441 249.999985 113.545441 249.999985 curveto
113.545441 249.999985 120 236 120 236 curveto
120 236 123.586777 230.999985 123.586777 230.999985 curveto
123.586777 230.999985 129.537186 225.999985 129.537186 225.999985 curveto
129.537186 225.999985 135.859497 222.999985 135.859497 222.999985 curveto
end
/nspans 19 def [1 0 0 1 -281 38.5] splstroke
false [0.478992 0 0 1 192.389816 1.5] sstrt
systemdict
begin
44 222.999985 135.859497 299.5 setbbox
44 223 moveto
44 223 52.553719 226.999985 52.553719 226.999985 curveto
52.553719 226.999985 58.457298 233 58.457298 233 curveto
58.457298 233 63.12812 242 63.12812 242 curveto
63.12812 242 71 261 71 261 curveto
71 261 75.983467 275 75.983467 275 curveto
75.983467 275 80 285 80 285 curveto
80 285 83.590759 293 83.590759 293 curveto
83.590759 293 87.038277 297.5 87.038277 297.5 curveto
87.038277 297.5 89.929733 298.5 89.929733 298.5 curveto
89.929733 298.5 92.376358 297.5 92.376358 297.5 curveto
92.376358 297.5 96.066116 294 96.066116 294 curveto
96.066116 294 100.900818 285 100.900818 285 curveto
100.900818 285 104.619827 275 104.619827 275 curveto
104.619827 275 109.082642 263 109.082642 263 curveto
109.082642 263 113.545441 249.999985 113.545441 249.999985 curveto
113.545441 249.999985 120 236 120 236 curveto
120 236 123.586777 230.999985 123.586777 230.999985 curveto
123.586777 230.999985 129.537186 225.999985 129.537186 225.999985 curveto
129.537186 225.999985 135.859497 222.999985 135.859497 222.999985 curveto
end
/nspans 19 def [1 0 0 1 -283 38.5] splstroke
false [0.478992 0 0 1 200.389816 1.5] sstrt
systemdict
begin
44 222.999985 135.859497 299.5 setbbox
44 223 moveto
44 223 52.553719 226.999985 52.553719 226.999985 curveto
52.553719 226.999985 58.457298 233 58.457298 233 curveto
58.457298 233 63.12812 242 63.12812 242 curveto
63.12812 242 71 261 71 261 curveto
71 261 75.983467 275 75.983467 275 curveto
75.983467 275 80 285 80 285 curveto
80 285 83.590759 293 83.590759 293 curveto
83.590759 293 87.038277 297.5 87.038277 297.5 curveto
87.038277 297.5 89.929733 298.5 89.929733 298.5 curveto
89.929733 298.5 92.376358 297.5 92.376358 297.5 curveto
92.376358 297.5 96.066116 294 96.066116 294 curveto
96.066116 294 100.900818 285 100.900818 285 curveto
100.900818 285 104.619827 275 104.619827 275 curveto
104.619827 275 109.082642 263 109.082642 263 curveto
109.082642 263 113.545441 249.999985 113.545441 249.999985 curveto
113.545441 249.999985 120 236 120 236 curveto
120 236 123.586777 230.999985 123.586777 230.999985 curveto
123.586777 230.999985 129.537186 225.999985 129.537186 225.999985 curveto
129.537186 225.999985 135.859497 222.999985 135.859497 222.999985 curveto
end
/nspans 19 def [1 0 0 1 -284 38.5] splstroke
false [0.478992 0 0 1 209.389816 1.5] sstrt
systemdict
begin
44 222.999985 135.859497 299.5 setbbox
44 223 moveto
44 223 52.553719 226.999985 52.553719 226.999985 curveto
52.553719 226.999985 58.457298 233 58.457298 233 curveto
58.457298 233 63.12812 242 63.12812 242 curveto
63.12812 242 71 261 71 261 curveto
71 261 75.983467 275 75.983467 275 curveto
75.983467 275 80 285 80 285 curveto
80 285 83.590759 293 83.590759 293 curveto
83.590759 293 87.038277 297.5 87.038277 297.5 curveto
87.038277 297.5 89.929733 298.5 89.929733 298.5 curveto
89.929733 298.5 92.376358 297.5 92.376358 297.5 curveto
92.376358 297.5 96.066116 294 96.066116 294 curveto
96.066116 294 100.900818 285 100.900818 285 curveto
100.900818 285 104.619827 275 104.619827 275 curveto
104.619827 275 109.082642 263 109.082642 263 curveto
109.082642 263 113.545441 249.999985 113.545441 249.999985 curveto
113.545441 249.999985 120 236 120 236 curveto
120 236 123.586777 230.999985 123.586777 230.999985 curveto
123.586777 230.999985 129.537186 225.999985 129.537186 225.999985 curveto
129.537186 225.999985 135.859497 222.999985 135.859497 222.999985 curveto
end
/nspans 19 def [1 0 0 1 -284 38.5] splstroke
false [0.478992 0 0 1 220.889816 1.5] sstrt
systemdict
begin
44 222.999985 135.859497 299.5 setbbox
44 223 moveto
44 223 52.553719 226.999985 52.553719 226.999985 curveto
52.553719 226.999985 58.457298 233 58.457298 233 curveto
58.457298 233 63.12812 242 63.12812 242 curveto
63.12812 242 71 261 71 261 curveto
71 261 75.983467 275 75.983467 275 curveto
75.983467 275 80 285 80 285 curveto
80 285 83.590759 293 83.590759 293 curveto
83.590759 293 87.038277 297.5 87.038277 297.5 curveto
87.038277 297.5 89.929733 298.5 89.929733 298.5 curveto
89.929733 298.5 92.376358 297.5 92.376358 297.5 curveto
92.376358 297.5 96.066116 294 96.066116 294 curveto
96.066116 294 100.900818 285 100.900818 285 curveto
100.900818 285 104.619827 275 104.619827 275 curveto
104.619827 275 109.082642 263 109.082642 263 curveto
109.082642 263 113.545441 249.999985 113.545441 249.999985 curveto
113.545441 249.999985 120 236 120 236 curveto
120 236 123.586777 230.999985 123.586777 230.999985 curveto
123.586777 230.999985 129.537186 225.999985 129.537186 225.999985 curveto
129.537186 225.999985 135.859497 222.999985 135.859497 222.999985 curveto
end
/nspans 19 def [1 0 0 1 -281.5 38.5] splstroke
false [0.478992 0 0 1 231.389832 2] sstrt
systemdict
begin
44 222.999985 135.859497 299.5 setbbox
44 223 moveto
44 223 52.553719 226.999985 52.553719 226.999985 curveto
52.553719 226.999985 58.457298 233 58.457298 233 curveto
58.457298 233 63.12812 242 63.12812 242 curveto
63.12812 242 71 261 71 261 curveto
71 261 75.983467 275 75.983467 275 curveto
75.983467 275 80 285 80 285 curveto
80 285 83.590759 293 83.590759 293 curveto
83.590759 293 87.038277 297.5 87.038277 297.5 curveto
87.038277 297.5 89.929733 298.5 89.929733 298.5 curveto
89.929733 298.5 92.376358 297.5 92.376358 297.5 curveto
92.376358 297.5 96.066116 294 96.066116 294 curveto
96.066116 294 100.900818 285 100.900818 285 curveto
100.900818 285 104.619827 275 104.619827 275 curveto
104.619827 275 109.082642 263 109.082642 263 curveto
109.082642 263 113.545441 249.999985 113.545441 249.999985 curveto
113.545441 249.999985 120 236 120 236 curveto
120 236 123.586777 230.999985 123.586777 230.999985 curveto
123.586777 230.999985 129.537186 225.999985 129.537186 225.999985 curveto
129.537186 225.999985 135.859497 222.999985 135.859497 222.999985 curveto
end
/nspans 19 def [1 0 0 1 -215 40] splstroke
false [0.478992 0 0 1 242.889816 2] sstrt
systemdict
begin
44 222.999985 135.859497 299.5 setbbox
44 223 moveto
44 223 52.553719 226.999985 52.553719 226.999985 curveto
52.553719 226.999985 58.457298 233 58.457298 233 curveto
58.457298 233 63.12812 242 63.12812 242 curveto
63.12812 242 71 261 71 261 curveto
71 261 75.983467 275 75.983467 275 curveto
75.983467 275 80 285 80 285 curveto
80 285 83.590759 293 83.590759 293 curveto
83.590759 293 87.038277 297.5 87.038277 297.5 curveto
87.038277 297.5 89.929733 298.5 89.929733 298.5 curveto
89.929733 298.5 92.376358 297.5 92.376358 297.5 curveto
92.376358 297.5 96.066116 294 96.066116 294 curveto
96.066116 294 100.900818 285 100.900818 285 curveto
100.900818 285 104.619827 275 104.619827 275 curveto
104.619827 275 109.082642 263 109.082642 263 curveto
109.082642 263 113.545441 249.999985 113.545441 249.999985 curveto
113.545441 249.999985 120 236 120 236 curveto
120 236 123.586777 230.999985 123.586777 230.999985 curveto
123.586777 230.999985 129.537186 225.999985 129.537186 225.999985 curveto
129.537186 225.999985 135.859497 222.999985 135.859497 222.999985 curveto
end
/nspans 19 def [1 0 0 1 -212.5 40] splstroke
false [0.478992 0 0 1 256.389832 2] sstrt
systemdict
begin
44 222.999985 135.859497 299.5 setbbox
44 223 moveto
44 223 52.553719 226.999985 52.553719 226.999985 curveto
52.553719 226.999985 58.457298 233 58.457298 233 curveto
58.457298 233 63.12812 242 63.12812 242 curveto
63.12812 242 71 261 71 261 curveto
71 261 75.983467 275 75.983467 275 curveto
75.983467 275 80 285 80 285 curveto
80 285 83.590759 293 83.590759 293 curveto
83.590759 293 87.038277 297.5 87.038277 297.5 curveto
87.038277 297.5 89.929733 298.5 89.929733 298.5 curveto
89.929733 298.5 92.376358 297.5 92.376358 297.5 curveto
92.376358 297.5 96.066116 294 96.066116 294 curveto
96.066116 294 100.900818 285 100.900818 285 curveto
100.900818 285 104.619827 275 104.619827 275 curveto
104.619827 275 109.082642 263 109.082642 263 curveto
109.082642 263 113.545441 249.999985 113.545441 249.999985 curveto
113.545441 249.999985 120 236 120 236 curveto
120 236 123.586777 230.999985 123.586777 230.999985 curveto
123.586777 230.999985 129.537186 225.999985 129.537186 225.999985 curveto
129.537186 225.999985 135.859497 222.999985 135.859497 222.999985 curveto
end
/nspans 19 def [1 0 0 1 -208 40] splstroke
false [0.478992 0 0 1 168.389832 1.5] sstrt
systemdict
begin
44 222.999985 135.859497 299.5 setbbox
44 223 moveto
44 223 52.553719 226.999985 52.553719 226.999985 curveto
52.553719 226.999985 58.457298 233 58.457298 233 curveto
58.457298 233 63.12812 242 63.12812 242 curveto
63.12812 242 71 261 71 261 curveto
71 261 75.983467 275 75.983467 275 curveto
75.983467 275 80 285 80 285 curveto
80 285 83.590759 293 83.590759 293 curveto
83.590759 293 87.038277 297.5 87.038277 297.5 curveto
87.038277 297.5 89.929733 298.5 89.929733 298.5 curveto
89.929733 298.5 92.376358 297.5 92.376358 297.5 curveto
92.376358 297.5 96.066116 294 96.066116 294 curveto
96.066116 294 100.900818 285 100.900818 285 curveto
100.900818 285 104.619827 275 104.619827 275 curveto
104.619827 275 109.082642 263 109.082642 263 curveto
109.082642 263 113.545441 249.999985 113.545441 249.999985 curveto
113.545441 249.999985 120 236 120 236 curveto
120 236 123.586777 230.999985 123.586777 230.999985 curveto
123.586777 230.999985 129.537186 225.999985 129.537186 225.999985 curveto
129.537186 225.999985 135.859497 222.999985 135.859497 222.999985 curveto
end
/nspans 19 def [1 0 0 1 -305 39.5] splstroke
false [0.478992 0 0 1 178.889832 1.5] sstrt
systemdict
begin
44 222.999985 135.859497 299.5 setbbox
44 223 moveto
44 223 52.553719 226.999985 52.553719 226.999985 curveto
52.553719 226.999985 58.457298 233 58.457298 233 curveto
58.457298 233 63.12812 242 63.12812 242 curveto
63.12812 242 71 261 71 261 curveto
71 261 75.983467 275 75.983467 275 curveto
75.983467 275 80 285 80 285 curveto
80 285 83.590759 293 83.590759 293 curveto
83.590759 293 87.038277 297.5 87.038277 297.5 curveto
87.038277 297.5 89.929733 298.5 89.929733 298.5 curveto
89.929733 298.5 92.376358 297.5 92.376358 297.5 curveto
92.376358 297.5 96.066116 294 96.066116 294 curveto
96.066116 294 100.900818 285 100.900818 285 curveto
100.900818 285 104.619827 275 104.619827 275 curveto
104.619827 275 109.082642 263 109.082642 263 curveto
109.082642 263 113.545441 249.999985 113.545441 249.999985 curveto
113.545441 249.999985 120 236 120 236 curveto
120 236 123.586777 230.999985 123.586777 230.999985 curveto
123.586777 230.999985 129.537186 225.999985 129.537186 225.999985 curveto
129.537186 225.999985 135.859497 222.999985 135.859497 222.999985 curveto
end
/nspans 19 def [1 0 0 1 -332.5 40] splstroke
false [0.478992 0 0 1 163.889832 1.5] sstrt
systemdict
begin
44 222.999985 135.859497 299.5 setbbox
44 223 moveto
44 223 52.553719 226.999985 52.553719 226.999985 curveto
52.553719 226.999985 58.457298 233 58.457298 233 curveto
58.457298 233 63.12812 242 63.12812 242 curveto
63.12812 242 71 261 71 261 curveto
71 261 75.983467 275 75.983467 275 curveto
75.983467 275 80 285 80 285 curveto
80 285 83.590759 293 83.590759 293 curveto
83.590759 293 87.038277 297.5 87.038277 297.5 curveto
87.038277 297.5 89.929733 298.5 89.929733 298.5 curveto
89.929733 298.5 92.376358 297.5 92.376358 297.5 curveto
92.376358 297.5 96.066116 294 96.066116 294 curveto
96.066116 294 100.900818 285 100.900818 285 curveto
100.900818 285 104.619827 275 104.619827 275 curveto
104.619827 275 109.082642 263 109.082642 263 curveto
109.082642 263 113.545441 249.999985 113.545441 249.999985 curveto
113.545441 249.999985 120 236 120 236 curveto
120 236 123.586777 230.999985 123.586777 230.999985 curveto
123.586777 230.999985 129.537186 225.999985 129.537186 225.999985 curveto
129.537186 225.999985 135.859497 222.999985 135.859497 222.999985 curveto
end
/nspans 19 def [1 0 0 1 -356.5 40] splstroke
false [0.478992 0 0 1 158.389832 1.5] sstrt
systemdict
begin
44 222.999985 135.859497 299.5 setbbox
44 223 moveto
44 223 52.553719 226.999985 52.553719 226.999985 curveto
52.553719 226.999985 58.457298 233 58.457298 233 curveto
58.457298 233 63.12812 242 63.12812 242 curveto
63.12812 242 71 261 71 261 curveto
71 261 75.983467 275 75.983467 275 curveto
75.983467 275 80 285 80 285 curveto
80 285 83.590759 293 83.590759 293 curveto
83.590759 293 87.038277 297.5 87.038277 297.5 curveto
87.038277 297.5 89.929733 298.5 89.929733 298.5 curveto
89.929733 298.5 92.376358 297.5 92.376358 297.5 curveto
92.376358 297.5 96.066116 294 96.066116 294 curveto
96.066116 294 100.900818 285 100.900818 285 curveto
100.900818 285 104.619827 275 104.619827 275 curveto
104.619827 275 109.082642 263 109.082642 263 curveto
109.082642 263 113.545441 249.999985 113.545441 249.999985 curveto
113.545441 249.999985 120 236 120 236 curveto
120 236 123.586777 230.999985 123.586777 230.999985 curveto
123.586777 230.999985 129.537186 225.999985 129.537186 225.999985 curveto
129.537186 225.999985 135.859497 222.999985 135.859497 222.999985 curveto
end
/nspans 19 def [1 0 0 1 -371 40] splstroke
false [0.478992 0 0 1 151.889832 2.000015] sstrt
systemdict
begin
44 222.999985 135.859497 299.5 setbbox
44 223 moveto
44 223 52.553719 226.999985 52.553719 226.999985 curveto
52.553719 226.999985 58.457298 233 58.457298 233 curveto
58.457298 233 63.12812 242 63.12812 242 curveto
63.12812 242 71 261 71 261 curveto
71 261 75.983467 275 75.983467 275 curveto
75.983467 275 80 285 80 285 curveto
80 285 83.590759 293 83.590759 293 curveto
83.590759 293 87.038277 297.5 87.038277 297.5 curveto
87.038277 297.5 89.929733 298.5 89.929733 298.5 curveto
89.929733 298.5 92.376358 297.5 92.376358 297.5 curveto
92.376358 297.5 96.066116 294 96.066116 294 curveto
96.066116 294 100.900818 285 100.900818 285 curveto
100.900818 285 104.619827 275 104.619827 275 curveto
104.619827 275 109.082642 263 109.082642 263 curveto
109.082642 263 113.545441 249.999985 113.545441 249.999985 curveto
113.545441 249.999985 120 236 120 236 curveto
120 236 123.586777 230.999985 123.586777 230.999985 curveto
123.586777 230.999985 129.537186 225.999985 129.537186 225.999985 curveto
129.537186 225.999985 135.859497 222.999985 135.859497 222.999985 curveto
end
/nspans 19 def [1 0 0 1 -386.5 40] splstroke
false [0.478992 0 0 1 273.889862 2.000015] sstrt
systemdict
begin
44 222.999985 135.859497 299.5 setbbox
44 223 moveto
44 223 52.553719 226.999985 52.553719 226.999985 curveto
52.553719 226.999985 58.457298 233 58.457298 233 curveto
58.457298 233 63.12812 242 63.12812 242 curveto
63.12812 242 71 261 71 261 curveto
71 261 75.983467 275 75.983467 275 curveto
75.983467 275 80 285 80 285 curveto
80 285 83.590759 293 83.590759 293 curveto
83.590759 293 87.038277 297.5 87.038277 297.5 curveto
87.038277 297.5 89.929733 298.5 89.929733 298.5 curveto
89.929733 298.5 92.376358 297.5 92.376358 297.5 curveto
92.376358 297.5 96.066116 294 96.066116 294 curveto
96.066116 294 100.900818 285 100.900818 285 curveto
100.900818 285 104.619827 275 104.619827 275 curveto
104.619827 275 109.082642 263 109.082642 263 curveto
109.082642 263 113.545441 249.999985 113.545441 249.999985 curveto
113.545441 249.999985 120 236 120 236 curveto
120 236 123.586777 230.999985 123.586777 230.999985 curveto
123.586777 230.999985 129.537186 225.999985 129.537186 225.999985 curveto
129.537186 225.999985 135.859497 222.999985 135.859497 222.999985 curveto
end
/nspans 19 def [1 0 0 1 -106 40] splstroke
false [0.478992 0 0 1 293.889832 1.5] sstrt
systemdict
begin
44 222.999985 135.859497 299.5 setbbox
44 223 moveto
44 223 52.553719 226.999985 52.553719 226.999985 curveto
52.553719 226.999985 58.457298 233 58.457298 233 curveto
58.457298 233 63.12812 242 63.12812 242 curveto
63.12812 242 71 261 71 261 curveto
71 261 75.983467 275 75.983467 275 curveto
75.983467 275 80 285 80 285 curveto
80 285 83.590759 293 83.590759 293 curveto
83.590759 293 87.038277 297.5 87.038277 297.5 curveto
87.038277 297.5 89.929733 298.5 89.929733 298.5 curveto
89.929733 298.5 92.376358 297.5 92.376358 297.5 curveto
92.376358 297.5 96.066116 294 96.066116 294 curveto
96.066116 294 100.900818 285 100.900818 285 curveto
100.900818 285 104.619827 275 104.619827 275 curveto
104.619827 275 109.082642 263 109.082642 263 curveto
109.082642 263 113.545441 249.999985 113.545441 249.999985 curveto
113.545441 249.999985 120 236 120 236 curveto
120 236 123.586777 230.999985 123.586777 230.999985 curveto
123.586777 230.999985 129.537186 225.999985 129.537186 225.999985 curveto
129.537186 225.999985 135.859497 222.999985 135.859497 222.999985 curveto
end
/nspans 19 def [1 0 0 1 -208 40] splstroke
/crlinred 0.333333 def /crlingrn 0.333333 def /crlinblu 0.333333 def /strinclr true def
false [4.495997 0 0 0.562914 -192.323822 99.470169] sstrt
systemdict
begin
44 222.999985 135.859497 299.5 setbbox
44 223 moveto
44 223 52.553719 226.999985 52.553719 226.999985 curveto
52.553719 226.999985 58.457298 233 58.457298 233 curveto
58.457298 233 63.12812 242 63.12812 242 curveto
63.12812 242 71 261 71 261 curveto
71 261 75.983467 275 75.983467 275 curveto
75.983467 275 80 285 80 285 curveto
80 285 83.590759 293 83.590759 293 curveto
83.590759 293 87.038277 297.5 87.038277 297.5 curveto
87.038277 297.5 89.929733 298.5 89.929733 298.5 curveto
89.929733 298.5 92.376358 297.5 92.376358 297.5 curveto
92.376358 297.5 96.066116 294 96.066116 294 curveto
96.066116 294 100.900818 285 100.900818 285 curveto
100.900818 285 104.619827 275 104.619827 275 curveto
104.619827 275 109.082642 263 109.082642 263 curveto
109.082642 263 113.545441 249.999985 113.545441 249.999985 curveto
113.545441 249.999985 120 236 120 236 curveto
120 236 123.586777 230.999985 123.586777 230.999985 curveto
123.586777 230.999985 129.537186 225.999985 129.537186 225.999985 curveto
129.537186 225.999985 135.859497 222.999985 135.859497 222.999985 curveto
end
/nspans 19 def [1 0 0 1 7.5 11] splstroke
/txtdraw true def
/crtxtred 0 def /crtxtgrn 0 def /crtxtblu 0 def /txtinclr true def
/txlndraw true def
/crtxlnred 0 def /crtxlngrn 0 def /crtxlnblu 0 def /txlninclr true def
(S <<) [10.656006 0 4.5 0 9.881989 0 0 0] 364 285.5 /Symbol [ 18 1 mul 0 0 18 0 0 ] [1 0 0 1 -7.5 -1] dotx
/txtdraw true def
/crtxtred 0.333333 def /crtxtgrn 0.333333 def /crtxtblu 0.333333 def /txtinclr true def
/txlndraw true def
/crtxlnred 0.333333 def /crtxlngrn 0.333333 def /crtxlnblu 0.333333 def /txlninclr true def
( S) [4.5 0 0 0] 398.919983 285.5 /Symbol [ 18 1 mul 0 0 18 0 0 ] [1 0 0 1 -7.5 -1] dotx
/txtdraw true def
/txlndraw true def
(o ) [6.588013 0 0 0] 414.075989 280.700012 /Symbol [ 12 1 mul 0 0 12 0 0 ] [1 0 0 1 -7.5 -1] dotx
/txtdraw true def
/txlndraw true def
( ) [0 0] 281 151.5 /Symbol [ 20 1 mul 0 0 20 0 0 ] [1 0 0 1 0 0] dotx
/txtdraw true def
/crtxtred 0 def /crtxtgrn 0 def /crtxtblu 0 def /txtinclr true def
/txlndraw true def
/crtxlnred 0 def /crtxlngrn 0 def /crtxlnblu 0 def /txlninclr true def
(S >>) [10.656006 0 4.5 0 9.881989 0 0 0] 364 285.5 /Symbol [ 18 1 mul 0 0 18 0 0 ] [1 0 0 1 -11.5 -140.5] dotx
/txtdraw true def
/crtxtred 0.333333 def /crtxtgrn 0.333333 def /crtxtblu 0.333333 def /txtinclr true def
/txlndraw true def
/crtxlnred 0.333333 def /crtxlngrn 0.333333 def /crtxlnblu 0.333333 def /txlninclr true def
( S) [4.5 0 0 0] 398.919983 285.5 /Symbol [ 18 1 mul 0 0 18 0 0 ] [1 0 0 1 -11.5 -140.5] dotx
/txtdraw true def
/txlndraw true def
(o ) [6.588013 0 0 0] 414.075989 280.700012 /Symbol [ 12 1 mul 0 0 12 0 0 ] [1 0 0 1 -11.5 -140.5] dotx
end
grestore
grestore
%%Trailer

%%EndDocument
 GE /Times-Bold SF
13456 67278 MT
(Figure 2-4:)SH
/Times-Roman SF
19229 XM
(Distributions of the data exhibiting  small and  large dogmatism, in the upper)SH
17842 68474 MT
(and lower panels, respectively.  The distributions in black represent distributions of)SH
17705 69670 MT
(the data of individual speakers while the lighter curves represent the distributions of)SH
27971 70866 MT
(the mean values of the speakers' data.)SH
ES
%%Page: 18 19
BS
0 SI
10 /Times-Roman AF
54800 4286 MT
(18)SH
13 /Times-Bold AF
10800 8071 MT
(2.4. Maximum Likelihood Estimation)SH
11 /Times-Roman AF
13300 10986 MT
(Maximum likelihood procedures)
101 W( treat the unknown parameters as fixed and seek to maximize)100 W
10800 12725 MT
(the probability of the)
138 W( observed data with respect to the parameters.  For mean vectors the ML es-)139 W
10800 14464 MT
(timate is)
68 W( the value of)67 W
/Symbol SF
20637 XM
(m)SH
/Times-Roman SF
21613 XM
(at which the likelihood function p\050)67 W
/Symbol SF
(c)SH
/Times-Roman SF
(|)SH
/Symbol SF
(m)SH
/Times-Roman SF
(\051 is greatest.  Given the assumption of)67 W
10800 16203 MT
(independent observations, this likelihood may be written as)SH
8 /Times-Italic AF
20702 17649 MT
(n)SH
19251 17905 MT
(C)SH
6 SS 
21102 17956 MT
(j)SH
11 SS 
15200 19060 MT
(p)SH
/Times-Roman SF
(\050)SH
/Symbol SF
(c)SH
/Times-Roman SF
(|)SH
/Symbol SF
(m)SH
/Times-Roman SF
(\051)
150 MX(=)SH
/Times-Italic SF
21794 XM
(p)SH
/Times-Roman SF
(\050)SH
/Times-Bold SF
(x)SH
/Times-Roman SF
24135 XM
(|)SH
/Symbol SF
(m)SH
/Times-Roman SF
25239 XM
(\051)SH
53693 XM
(\0502.5\051)SH
16 /Symbol AF
18860 19360 MT
(\325)SH
20327 XM
(\325)SH
9 /Times-Italic AF
23260 19420 MT
(j,k)SH
24989 XM
(j)SH
8 SS 
18982 20344 MT
(j)SH
/Times-Roman SF
(=1)SH
/Times-Italic SF
20382 XM
(k)SH
/Times-Roman SF
(=1)SH
11 SS 
10800 21449 MT
(Define the log-likelihood as)SH
/Times-Italic SF
23386 XM
(l)SH
/Times-Roman SF
(\050)SH
/Symbol SF
(m)SH
/Times-Roman SF
(\051)
150 MX(=)SH
/Times-Italic SF
25978 XM
(log)SH
/Times-Roman SF
([)SH
/Times-Italic SF
(p)SH
/Times-Roman SF
(\050)SH
/Symbol SF
(c)SH
/Times-Roman SF
(|)SH
/Symbol SF
(m)SH
/Times-Roman SF
(\051], or)SH
8 /Times-Italic AF
19402 22895 MT
(n)SH
18095 23151 MT
(C)SH
6 SS 
19802 23202 MT
(j)SH
11 SS 
15200 24306 MT
(l)SH
/Times-Roman SF
(\050)SH
/Symbol SF
(m)SH
/Times-Roman SF
(\051)
150 MX(=)SH
/Times-Italic SF
20439 XM
(log)SH
/Times-Roman SF
([)SH
/Times-Italic SF
(p)SH
/Times-Roman SF
(\050)SH
/Times-Bold SF
(x)SH
/Times-Roman SF
24552 XM
(|)SH
/Symbol SF
(m)SH
/Times-Roman SF
25656 XM
(\051])SH
53693 XM
(\0502.6\051)SH
16 /Symbol AF
17792 24606 MT
(\345)SH
19115 XM
(\345)SH
9 /Times-Italic AF
23677 24666 MT
(j,k)SH
25406 XM
(j)SH
8 SS 
17826 25400 MT
(j)SH
/Times-Roman SF
(=1)SH
/Times-Italic SF
19083 XM
(k)SH
/Times-Roman SF
(=1)SH
11 SS 
10800 26505 MT
(Taking the gradient with respect to)SH
/Symbol SF
26440 XM
(m)SH
/Times-Roman SF
27349 XM
(of)SH
/Times-Italic SF
28540 XM
(l)SH
/Times-Roman SF
(\050)SH
/Symbol SF
(m)SH
/Times-Roman SF
(\051 and dropping constants which are independent of)SH
/Symbol SF
52388 XM
(m)SH
/Times-Roman SF
53297 XM
(gives)SH
8 /Times-Italic AF
23160 27951 MT
(n)SH
21853 28207 MT
(C)SH
6 SS 
23560 28258 MT
(j)SH
11 /Times-Roman AF
19698 28676 MT
(1)SH
8 /Symbol AF
28993 28800 MT
(-)SH
/Times-Roman SF
(1)SH
9 /Times-Italic AF
27842 28999 MT
(T)SH
550 50 19698 29117 UL
11 /Symbol AF
15200 29362 MT
(\321)SH
/Times-Italic SF
16502 XM
(l)SH
/Times-Roman SF
(\050)SH
/Symbol SF
(m)SH
/Times-Roman SF
(\051)
150 MX(=)SH
/Symbol SF
19094 XM
(- \321)275 W
/Times-Roman SF
24197 XM
(\050)SH
/Times-Bold SF
(x)SH
/Symbol SF
25988 XM
(-m)SH
/Times-Roman SF
27476 XM
(\051)SH
/Symbol SF
28342 XM
(S)SH
/Times-Roman SF
29832 XM
(\050)SH
/Times-Bold SF
(x)SH
/Symbol SF
31623 XM
(-m)SH
/Times-Roman SF
33111 XM
(\051)SH
53693 XM
(\0502.7\051)SH
16 /Symbol AF
21550 29662 MT
(\345)SH
22873 XM
(\345)SH
9 SS 
15984 29722 MT
(m)SH
21032 XM
(m)SH
/Times-Italic SF
25113 XM
(j,k)SH
27226 XM
(j)SH
30748 XM
(j,k)SH
32861 XM
(j)SH
8 SS 
28993 29724 MT
(j)SH
11 /Times-Roman AF
19698 30113 MT
(2)SH
8 /Times-Italic AF
21584 30456 MT
(j)SH
/Times-Roman SF
(=1)SH
/Times-Italic SF
22841 XM
(k)SH
/Times-Roman SF
(=1)SH
11 SS 
10800 31890 MT
(Since)SH
/Symbol SF
13684 XM
(\321)SH
/Times-Roman SF
15136 XM
(=)
150 MX([)SH
/Symbol SF
(\321)SH
18074 XM
(\321)SH
/Times-Roman SF
19876 XM
(...)SH
/Symbol SF
20851 XM
(\321)SH
/Times-Roman SF
22620 XM
(], we can consider each class)165 W
/Times-Italic SF
36587 XM
(m)SH
/Times-Roman SF
37821 XM
(in turn.)
165 W( Looking)
606 W( at the double sum in)166 W
9 /Symbol AF
14468 32250 MT
(m)SH
17056 XM
(m)SH
18858 XM
(m)SH
21635 XM
(m)SH
7 /Times-Italic AF
17574 32575 MT
(1)SH
19376 XM
(2)SH
22153 XM
(C)SH
11 /Symbol AF
10800 33629 MT
(\321)SH
/Times-Italic SF
12607 XM
(l)SH
/Times-Roman SF
(\050)SH
/Symbol SF
(m)SH
/Times-Roman SF
(\051, the summand can be ignored except when)SH
/Times-Italic SF
33552 XM
(j)SH
/Times-Roman SF
34008 XM
(=)SH
/Times-Italic SF
34778 XM
(m)SH
/Times-Roman SF
(. In)
275 W( this case,)SH
9 /Symbol AF
11584 33989 MT
(m)SH
7 /Times-Italic AF
12102 34314 MT
(m)SH
8 SS 
22541 35075 MT
(n)SH
6 SS 
22941 35382 MT
(m)SH
11 /Times-Roman AF
20353 35800 MT
(1)SH
8 /Symbol AF
29307 35924 MT
(-)SH
/Times-Roman SF
(1)SH
9 /Times-Italic AF
28156 36123 MT
(T)SH
550 50 20353 36241 UL
11 /Symbol AF
15200 36486 MT
(\321)SH
/Times-Italic SF
17007 XM
(l)SH
/Times-Roman SF
(\050)SH
/Symbol SF
(m)SH
/Times-Roman SF
(\051)
150 MX(=)SH
/Symbol SF
19599 XM
(- \321)575 W
/Times-Roman SF
23711 XM
(\050)SH
/Times-Bold SF
(x)SH
/Symbol SF
25902 XM
(-m)SH
/Times-Roman SF
27790 XM
(\051)SH
/Symbol SF
28656 XM
(S)SH
/Times-Roman SF
30146 XM
(\050)SH
/Times-Bold SF
(x)SH
/Symbol SF
32337 XM
(-m)SH
/Times-Roman SF
34225 XM
(\051)SH
53693 XM
(\0502.8\051)SH
16 /Symbol AF
22387 36786 MT
(\345)SH
9 SS 
15984 36846 MT
(m)SH
21837 XM
(m)SH
/Times-Italic SF
24627 XM
(m,k)SH
27140 XM
(m)SH
31062 XM
(m,k)SH
33575 XM
(m)SH
8 SS 
29307 36848 MT
(m)SH
7 SS 
16502 37171 MT
(m)SH
11 /Times-Roman AF
20353 37237 MT
(2)SH
8 /Times-Italic AF
22355 37580 MT
(k)SH
/Times-Roman SF
(=1)SH
11 SS 
10800 38976 MT
(Setting this gradient to zero yields)SH
8 /Times-Italic AF
19785 40422 MT
(n)SH
6 SS 
20185 40729 MT
(m)SH
8 /Symbol AF
21606 41271 MT
(-)SH
/Times-Roman SF
(1)SH
11 /Symbol AF
15200 41833 MT
(\321)SH
/Times-Italic SF
17007 XM
(l)SH
/Times-Roman SF
(\050)SH
/Symbol SF
(m)SH
/Times-Roman SF
(\051)
150 MX(=)SH
/Symbol SF
20955 XM
(S)SH
/Times-Roman SF
22445 XM
(\050)SH
/Times-Bold SF
(x)SH
/Symbol SF
24636 XM
(-m)SH
/Times-Roman SF
26524 XM
(\051)SH
/Symbol SF
27190 XM
(\272)SH
/Times-Roman SF
28094 XM
(0)SH
53693 XM
(\0502.9\051)SH
16 /Symbol AF
19631 42133 MT
(\345)SH
9 SS 
15984 42193 MT
(m)SH
/Times-Italic SF
23361 XM
(m,k)SH
25874 XM
(m)SH
8 SS 
21606 42195 MT
(m)SH
7 SS 
16502 42518 MT
(m)SH
8 SS 
19599 42927 MT
(k)SH
/Times-Roman SF
(=1)SH
11 SS 
10800 44032 MT
(Solving for)SH
/Symbol SF
16056 XM
(m)SH
/Times-Roman SF
17615 XM
(results in the ML estimate)SH
9 /Times-Italic AF
16690 44392 MT
(m)SH
8 SS 
18938 45478 MT
(n)SH
6 SS 
19338 45785 MT
(m)SH
8 /Symbol AF
15200 46199 MT
(\331)SH
11 /Times-Roman AF
17577 46203 MT
(1)SH
1200 50 17252 46644 UL
/Symbol SF
15200 46889 MT
(m)SH
/Times-Roman SF
16482 XM
(=)SH
/Times-Bold SF
20108 XM
(x)SH
/Symbol SF
22233 XM
(\272)SH
/Times-Bold SF
23137 XM
(a)SH
/Times-Roman SF
53143 XM
(\0502.10\051)SH
16 /Symbol AF
18784 47189 MT
(\345)SH
8 /Times-Italic AF
23687 47234 MT
(m)SH
9 SS 
15682 47249 MT
(m)SH
20658 XM
(m,k)SH
11 SS 
17252 47640 MT
(n)SH
8 SS 
18752 47983 MT
(k)SH
/Times-Roman SF
(=1)SH
9 /Times-Italic AF
17802 48000 MT
(m)SH
11 /Times-Roman AF
10800 49379 MT
(Note that this estimate has the same form as the familiar)
4 W( case in which the class means are assumed to)3 W
10800 51118 MT
(be independent.  The ML estimate has the desirable statistical)
232 W( properties of being unbiased and)231 W
9 SS 
15475 52494 MT
(4)SH
11 SS 
10800 52857 MT
(consistent,)SH
16245 XM
(and it requires very little computation.  It also does not require the)
45 W( estimation of)46 W
/Times-Italic SF
52361 XM
(a priori)46 W
/Times-Roman SF
10800 54596 MT
(statistics. However, since each element of each class' mean vector is estimated)
27 W( independently, it does)26 W
10800 56335 MT
(not take advantage of information present given knowledge of the correlation between features and)109 W
10800 58074 MT
(classes. Consequently,)
351 W( under certain)
38 W( data conditions it may converge more slowly than more sophis-)37 W
10800 59813 MT
(ticated algorithms.)SH
13300 62798 MT
(It can be seen that the correlation does not contribute to convergence in the ML)
140 W( estimate by)141 W
10800 64537 MT
(inspection of the learning curves, which are defined as the mean-square error as a)
150 W( function of the)149 W
10800 66276 MT
(number of observations.  For the vector parameters considered here, the norm of the error vector will)37 W
10800 50 10800 69158 UL
7 SS 
11700 70659 MT
(4)SH
9 SS 
12050 70986 MT
(An estimator is unbiased if the expected value)
5 W( of the estimate is equal to the true parameter.  An estimator is consistent if)6 W
10800 72000 MT
(it converges to the true parameter as the number of observations increases.)SH
ES
%%Page: 19 20
BS
0 SI
10 /Times-Roman AF
54800 4286 MT
(19)SH
8 /Symbol AF
38394 7840 MT
(\331)SH
11 /Times-Roman AF
10800 8530 MT
(be minimized.  Defining the error vector as)710 W
/Symbol SF
35753 XM
(e)SH
/Times-Roman SF
36386 XM
(=)SH
/Symbol SF
37156 XM
(m-m)SH
/Times-Roman SF
38876 XM
(, the mean-square error)
710 W( is then)709 W
8 /Symbol AF
18139 9579 MT
(\331)SH
9 /Times-Roman AF
13363 9906 MT
(2)SH
19061 XM
(2)SH
11 /Times-Italic AF
10800 10269 MT
(E)SH
/Times-Roman SF
({)SH
/Symbol SF
(||e||)SH
/Times-Roman SF
13813 XM
(})
150 MX(=)SH
/Times-Italic SF
15261 XM
(E)SH
/Times-Roman SF
({)SH
/Symbol SF
(||m-m)SH
18621 XM
(||)SH
/Times-Roman SF
19511 XM
(}, which for the ML estimate can be written as)SH
9 /Times-Italic AF
24754 11783 MT
(T)SH
11 SS 
15200 12146 MT
(MSE)SH
/Times-Roman SF
18588 XM
(\050)SH
/Times-Bold SF
(N)SH
/Times-Roman SF
(\051)
150 MX(=)SH
/Times-Italic SF
21034 XM
(E)SH
/Times-Roman SF
({\050)SH
/Symbol SF
(m-)SH
/Times-Bold SF
(a)SH
/Times-Roman SF
(\051)SH
25254 XM
(\050)SH
/Symbol SF
(m-)SH
/Times-Bold SF
(a)SH
/Times-Roman SF
(\051})SH
9 /Times-Italic AF
17338 12506 MT
(ML)SH
22868 13308 MT
(T)SH
27818 XM
(T)SH
32066 XM
(T)SH
11 /Times-Roman AF
20264 13671 MT
(=)SH
/Times-Italic SF
21034 XM
(E)SH
/Times-Roman SF
({)SH
/Symbol SF
(m)SH
23368 XM
(m)SH
/Times-Roman SF
(})SH
/Symbol SF
24680 XM
(-)SH
/Times-Roman SF
25434 XM
(2)SH
/Times-Italic SF
(E)SH
/Times-Roman SF
({)SH
/Symbol SF
(m)SH
/Times-Bold SF
28318 XM
(a)SH
/Times-Roman SF
(})
150 MX(+)SH
/Times-Italic SF
30316 XM
(E)SH
/Times-Roman SF
({)SH
/Times-Bold SF
(a)SH
32566 XM
(a)SH
/Times-Roman SF
(})SH
9 /Times-Italic AF
24602 14529 MT
(T)SH
30934 XM
(T)SH
36648 XM
(T)SH
11 /Times-Roman AF
20264 14892 MT
(=)SH
/Times-Italic SF
21034 XM
(tr)SH
/Times-Roman SF
([)SH
/Times-Italic SF
(E)SH
/Times-Roman SF
({)SH
/Symbol SF
(mm)SH
/Times-Roman SF
25102 XM
(}])SH
/Symbol SF
26146 XM
(-)SH
/Times-Roman SF
26900 XM
(2)SH
/Times-Italic SF
(tr)SH
/Times-Roman SF
([)SH
/Times-Italic SF
(E)SH
/Times-Roman SF
({)SH
/Times-Bold SF
(a)SH
/Symbol SF
(m)SH
/Times-Roman SF
31434 XM
(}])
150 MX(+)SH
/Times-Italic SF
33248 XM
(tr)SH
/Times-Roman SF
([)SH
/Times-Italic SF
(E)SH
/Times-Roman SF
({)SH
/Times-Bold SF
(aa)SH
/Times-Roman SF
37148 XM
(}])SH
20264 16088 MT
(=)SH
/Times-Italic SF
21034 XM
(tr)SH
/Times-Roman SF
([)SH
/Symbol SF
(F)SH
/Times-Roman SF
24009 XM
(])SH
/Symbol SF
24525 XM
(-)SH
/Times-Roman SF
25279 XM
(2)SH
/Times-Italic SF
(tr)SH
/Times-Roman SF
([)SH
/Symbol SF
(F)SH
/Times-Roman SF
28736 XM
(])
150 MX(+)SH
/Times-Italic SF
30022 XM
(tr)SH
/Times-Roman SF
([)SH
/Symbol SF
(F)SH
/Times-Roman SF
32861 XM
(}])SH
53143 XM
(\0502.11\051)SH
9 /Symbol AF
22973 16448 MT
(mm)SH
/Times-Bold SF
27768 XM
(a)SH
/Symbol SF
(m)SH
/Times-Bold SF
31961 XM
(aa)SH
11 /Times-Roman AF
10800 17827 MT
(The matrix)140 W
/Times-Bold SF
16212 XM
(N)SH
/Times-Roman SF
17421 XM
(is defined as a diagonal matrix with the)
140 W( number of observations per class along the)141 W
10800 19566 MT
(diagonal, or in other words with n)246 W
/Times-Bold SF
27465 XM
(I)SH
/Times-Roman SF
28414 XM
(as the C diagonal blocks of dimension D. The correlation)246 W
9 /Times-Italic AF
27215 19926 MT
(j)SH
32610 20942 MT
(T)SH
36446 XM
(T)SH
42175 XM
(T)SH
11 /Times-Roman AF
10800 21305 MT
(matrices)SH
/Symbol SF
14914 XM
(F)SH
/Times-Roman SF
16653 XM
(,)SH
/Symbol SF
17316 XM
(F)SH
/Times-Roman SF
19579 XM
(and)SH
/Symbol SF
21555 XM
(F)SH
/Times-Roman SF
23750 XM
(are defined)
113 W( as)114 W
/Times-Italic SF
30472 XM
(E)SH
/Times-Roman SF
([)SH
/Times-Bold SF
(aa)SH
/Times-Roman SF
33110 XM
(],)SH
/Times-Italic SF
34140 XM
(E)SH
/Times-Roman SF
([)SH
/Symbol SF
(mm)SH
/Times-Roman SF
36946 XM
(], and)114 W
/Times-Italic SF
39953 XM
(E)SH
/Times-Roman SF
([)SH
/Times-Bold SF
(a)SH
/Symbol SF
(m)SH
/Times-Roman SF
42675 XM
(], respectively.  As shown in)114 W
9 /Times-Italic AF
15753 21665 MT
(aa)SH
/Symbol SF
18155 XM
(mm)SH
/Times-Italic SF
22394 XM
(a)SH
/Symbol SF
(m)SH
50342 22681 MT
(-)SH
/Times-Roman SF
(1)SH
/Times-Italic SF
55025 XM
(T)SH
11 /Times-Roman AF
10800 23044 MT
(Appendix A, these matrices may be expressed)
79 W( in terms of)78 W
/Symbol SF
37213 XM
(m)SH
/Times-Roman SF
38297 XM
(,)SH
/Symbol SF
38925 XM
(S)SH
/Times-Roman SF
40026 XM
(, and)78 W
/Symbol SF
42595 XM
(S)SH
/Times-Roman SF
43599 XM
(as)SH
/Symbol SF
44868 XM
(F)SH
/Times-Roman SF
46757 XM
(=)SH
/Symbol SF
47527 XM
(S)SH
/Times-Roman SF
48778 XM
(+)SH
/Times-Bold SF
49548 XM
(N)SH
/Symbol SF
51286 XM
(S)SH
/Times-Roman SF
52087 XM
(+)SH
/Symbol SF
52857 XM
(m)SH
53941 XM
(m)SH
/Times-Roman SF
55525 XM
(,)SH
9 /Times-Italic AF
37847 23404 MT
(o)SH
39576 XM
(o)SH
/Times-Bold SF
45707 XM
(aa)SH
/Times-Italic SF
48178 XM
(o)SH
53491 XM
(o)SH
54575 XM
(o)SH
17716 24420 MT
(T)SH
27613 XM
(T)SH
11 /Symbol AF
10800 24783 MT
(F)SH
/Times-Roman SF
12757 XM
(=)SH
/Symbol SF
13527 XM
(S)SH
/Times-Roman SF
14778 XM
(+)SH
/Symbol SF
15548 XM
(m)SH
16632 XM
(m)SH
/Times-Roman SF
18216 XM
(, and)SH
/Symbol SF
20629 XM
(F)SH
/Times-Roman SF
22654 XM
(=)SH
/Symbol SF
23424 XM
(S)SH
/Times-Roman SF
24675 XM
(+)SH
/Symbol SF
25445 XM
(m)SH
26529 XM
(m)SH
/Times-Roman SF
28113 XM
(, respectively.  Substituting these values into \0502.11\051 yields)SH
9 /Times-Bold AF
11639 25143 MT
(a)SH
/Symbol SF
(m)SH
/Times-Italic SF
14178 XM
(o)SH
16182 XM
(o)SH
17266 XM
(o)SH
/Symbol SF
21468 XM
(mm)SH
/Times-Italic SF
24075 XM
(o)SH
26079 XM
(o)SH
27163 XM
(o)SH
/Symbol SF
24949 26297 MT
(-)SH
/Times-Roman SF
(1)SH
/Times-Italic SF
29632 XM
(T)SH
35591 XM
(T)SH
11 SS 
15200 26660 MT
(MSE)SH
/Times-Roman SF
18588 XM
(\050)SH
/Times-Bold SF
(N)SH
/Times-Roman SF
(\051)
150 MX(=)SH
/Times-Italic SF
21034 XM
(tr)SH
/Times-Roman SF
([)SH
/Symbol SF
(S)SH
/Times-Roman SF
23385 XM
(+)SH
/Times-Bold SF
24155 XM
(N)SH
/Symbol SF
25893 XM
(S)SH
/Times-Roman SF
26694 XM
(+)SH
/Symbol SF
27464 XM
(m)SH
28548 XM
(m)SH
30282 XM
(-)SH
/Times-Roman SF
31036 XM
(\050)SH
/Symbol SF
(S)SH
/Times-Roman SF
32653 XM
(+)SH
/Symbol SF
33423 XM
(m)SH
34507 XM
(m)SH
/Times-Roman SF
36091 XM
(\051])SH
9 /Times-Italic AF
17338 27020 MT
(ML)SH
22785 XM
(o)SH
28098 XM
(o)SH
29182 XM
(o)SH
32053 XM
(o)SH
34057 XM
(o)SH
35141 XM
(o)SH
/Symbol SF
22928 27822 MT
(-)SH
/Times-Roman SF
(1)SH
11 SS 
20264 28185 MT
(=)SH
/Times-Italic SF
21034 XM
(tr)SH
/Times-Roman SF
([)SH
/Times-Bold SF
(N)SH
/Symbol SF
23872 XM
(S)SH
/Times-Roman SF
(])SH
53143 XM
(\0502.12\051)SH
10800 29924 MT
(which clearly shows that the between-class correlation \050)207 W
/Symbol SF
(S)SH
/Times-Roman SF
37997 XM
(\051 and within-class correlation \050the)
207 W( off-)208 W
9 /Times-Italic AF
37547 30284 MT
(o)SH
11 /Times-Roman AF
10800 31663 MT
(diagonal elements of)SH
/Symbol SF
20239 XM
(S)SH
/Times-Roman SF
(\051 do not contribute to reducing the mean-square error.)SH
13 /Times-Bold AF
10800 35441 MT
(2.5. Extended Maximum)SH
/Times-BoldItalic SF
24775 XM
(A Posteriori)SH
/Times-Bold SF
31564 XM
(Estimation)SH
11 /Times-Roman AF
13300 38356 MT
(In maximum)102 W
/Times-Italic SF
19432 XM
(a posteriori)102 W
/Times-Roman SF
25076 XM
(\050MAP\051 parameter estimation, the unknown parameter)
102 W( is treated as a)101 W
10800 40095 MT
(random quantity with a known)138 W
/Times-Italic SF
25269 XM
(a priori)138 W
/Times-Roman SF
29213 XM
(distribution and the probability)
138 W( of the parameter given the)139 W
10800 41834 MT
(data is maximized with respect to the parameter.  The term)138 W
/Times-Italic SF
38464 XM
(extended)SH
/Times-Roman SF
42785 XM
(is historical and was)
138 W( applied)137 W
10800 43573 MT
(specifically to the multi-class MAP mean vector estimate)
8 W( [24].)
SH( The)
291 W( EMAP estimate for)8 W
/Symbol SF
49854 XM
(m)SH
/Times-Roman SF
50772 XM
(is the value)9 W
10800 45312 MT
(at which the)SH
/Times-Italic SF
16451 XM
(a posteriori)SH
/Times-Roman SF
21891 XM
(probability)SH
/Times-Italic SF
18860 46964 MT
(p)SH
/Times-Roman SF
(\050)SH
/Symbol SF
(c)SH
/Times-Roman SF
(|)SH
/Symbol SF
(m)SH
/Times-Roman SF
(\051)SH
/Times-Italic SF
(p)SH
/Times-Roman SF
(\050)SH
/Symbol SF
(m)SH
/Times-Roman SF
(\051)SH
4656 50 18860 47405 UL
/Times-Italic SF
15200 47650 MT
(p)SH
/Times-Roman SF
(\050)SH
/Symbol SF
(m)SH
/Times-Roman SF
(|)SH
/Symbol SF
(c)SH
/Times-Roman SF
(\051)
150 MX(=)SH
53143 XM
(\0502.13\051)SH
/Times-Italic SF
20245 48401 MT
(p)SH
/Times-Roman SF
(\050)SH
/Symbol SF
(c)SH
/Times-Roman SF
(\051)SH
10800 50140 MT
(attains its maximum, where)98 W
/Symbol SF
23627 XM
(c)SH
/Times-Roman SF
24604 XM
(is the set of observations from)
98 W( a single speaker.  Taking the gradient)97 W
10800 51879 MT
(with respect to)SH
/Symbol SF
17551 XM
(m)SH
/Times-Roman SF
18460 XM
(of the natural logarithm of)SH
/Times-Italic SF
30343 XM
(p)SH
/Times-Roman SF
(\050)SH
/Symbol SF
(m)SH
/Times-Roman SF
(|)SH
/Symbol SF
(c)SH
/Times-Roman SF
(\051,)SH
/Symbol SF
15200 53656 MT
(\321)SH
/Times-Italic SF
16652 XM
(log)SH
/Times-Roman SF
([)SH
/Times-Italic SF
(p)SH
/Times-Roman SF
(\050)SH
/Symbol SF
(m)SH
/Times-Roman SF
(|)SH
/Symbol SF
(c)SH
/Times-Roman SF
(\051])
150 MX(=)SH
/Symbol SF
22450 XM
(\321)SH
/Times-Italic SF
23902 XM
(log)SH
/Times-Roman SF
([)SH
/Times-Italic SF
(p)SH
/Times-Roman SF
(\050)SH
/Symbol SF
(c)SH
/Times-Roman SF
(|)SH
/Symbol SF
(m)SH
/Times-Roman SF
(\051])
150 MX(+)SH
/Symbol SF
29700 XM
(\321)SH
/Times-Italic SF
31152 XM
(log)SH
/Times-Roman SF
([)SH
/Times-Italic SF
(p)SH
/Times-Roman SF
(\050)SH
/Symbol SF
(m)SH
/Times-Roman SF
(\051])SH
/Symbol SF
35356 XM
(-)
150 MX(\321)SH
/Times-Italic SF
37562 XM
(log)SH
/Times-Roman SF
([)SH
/Times-Italic SF
(p)SH
/Times-Roman SF
(\050)SH
/Symbol SF
(c)SH
/Times-Roman SF
(\051])SH
53143 XM
(\0502.14\051)SH
9 /Symbol AF
15984 54016 MT
(m)SH
23234 XM
(m)SH
30484 XM
(m)SH
36894 XM
(m)SH
11 /Times-Roman AF
10800 55395 MT
(The third term in \0502.14\051 is zero)
184 W( because)185 W
/Times-Italic SF
29897 XM
(log)SH
/Times-Roman SF
([)SH
/Times-Italic SF
(p)SH
/Times-Roman SF
(\050)SH
/Symbol SF
(c)SH
/Times-Roman SF
(\051] is independent of)185 W
/Symbol SF
42787 XM
(m)SH
/Times-Roman SF
(. The)
645 W( second term can be)185 W
10800 57134 MT
(written as \050ignoring constants independent of)SH
/Symbol SF
30962 XM
(m)SH
/Times-Roman SF
(\051)SH
22380 58786 MT
(1)SH
8 /Symbol AF
28737 58910 MT
(-)SH
/Times-Roman SF
(1)SH
9 /Times-Italic AF
27586 59109 MT
(T)SH
550 50 22380 59227 UL
11 /Symbol AF
15200 59472 MT
(\321)SH
/Times-Italic SF
16652 XM
(log)SH
/Times-Roman SF
([)SH
/Times-Italic SF
(p)SH
/Times-Roman SF
(\050)SH
/Symbol SF
(m)SH
/Times-Roman SF
(\051])
150 MX(=)SH
/Symbol SF
21626 XM
(- \321)575 W
/Times-Roman SF
24532 XM
(\050)SH
/Symbol SF
(m-m)SH
/Times-Roman SF
27220 XM
(\051)SH
/Symbol SF
28086 XM
(S)SH
/Times-Roman SF
29576 XM
(\050)SH
/Symbol SF
(m-m)SH
/Times-Roman SF
32264 XM
(\051)SH
9 /Symbol AF
15984 59832 MT
(m)SH
23864 XM
(m)SH
/Times-Italic SF
26770 XM
(o)SH
31814 XM
(o)SH
8 SS 
28737 59834 MT
(o)SH
11 /Times-Roman AF
22380 60223 MT
(2)SH
8 /Symbol AF
22881 61013 MT
(-)SH
/Times-Roman SF
(1)SH
11 SS 
20856 61575 MT
(=)SH
/Symbol SF
21626 XM
(-S)SH
/Times-Roman SF
23720 XM
(\050)SH
/Symbol SF
(m-m)SH
/Times-Roman SF
26408 XM
(\051)SH
53143 XM
(\0502.15\051)SH
9 /Times-Italic AF
25958 61935 MT
(o)SH
8 SS 
22881 61937 MT
(o)SH
11 /Times-Roman AF
10800 63314 MT
(The first term in \0502.14\051 is identical to \0502.7\051. Looking at each class)SH
/Times-Italic SF
39820 XM
(m)SH
/Times-Roman SF
40889 XM
(separately, \0502.9\051 gives)SH
8 /Times-Italic AF
22991 64760 MT
(n)SH
6 SS 
23391 65067 MT
(m)SH
8 /Symbol AF
24812 65609 MT
(-)SH
/Times-Roman SF
(1)SH
11 /Symbol AF
15200 66171 MT
(\321)SH
/Times-Italic SF
17007 XM
(log)SH
/Times-Roman SF
([)SH
/Times-Italic SF
(p)SH
/Times-Roman SF
(\050)SH
/Symbol SF
(c)SH
/Times-Roman SF
(|)SH
/Symbol SF
(m)SH
/Times-Roman SF
(\051])
150 MX(=)SH
/Symbol SF
24161 XM
(S)SH
/Times-Roman SF
25651 XM
(\050)SH
/Times-Bold SF
(x)SH
/Symbol SF
27842 XM
(-m)SH
/Times-Roman SF
29730 XM
(\051)SH
53143 XM
(\0502.16\051)SH
16 /Symbol AF
22837 66471 MT
(\345)SH
9 SS 
15984 66531 MT
(m)SH
/Times-Italic SF
26567 XM
(k,m)SH
29080 XM
(m)SH
8 SS 
24812 66533 MT
(m)SH
7 SS 
16502 66856 MT
(m)SH
8 SS 
22805 67265 MT
(k)SH
/Times-Roman SF
(=1)SH
/Symbol SF
23456 67989 MT
(-)SH
/Times-Roman SF
(1)SH
11 SS 
22035 68551 MT
(=)SH
/Symbol SF
22805 XM
(S)SH
/Times-Italic SF
24295 XM
(n)SH
/Times-Roman SF
25495 XM
(\050)SH
/Times-Bold SF
(a)SH
/Symbol SF
27061 XM
(-m)SH
/Times-Roman SF
28949 XM
(\051)SH
9 /Times-Italic AF
24845 68911 MT
(m)SH
26411 XM
(m)SH
28299 XM
(m)SH
8 SS 
23456 68913 MT
(m)SH
11 /Times-Roman AF
10800 70290 MT
(So, considering all classes again, \0502.16\051 gives)SH
ES
%%Page: 20 21
BS
0 SI
10 /Times-Roman AF
54800 4286 MT
(20)SH
9 /Symbol AF
22951 7817 MT
(-)SH
/Times-Roman SF
(1)SH
11 /Symbol AF
15200 8180 MT
(\321)SH
/Times-Italic SF
16502 XM
(log)SH
/Times-Roman SF
([)SH
/Times-Italic SF
(p)SH
/Times-Roman SF
(\050)SH
/Symbol SF
(c)SH
/Times-Roman SF
(|)SH
/Symbol SF
(m)SH
/Times-Roman SF
(\051])
150 MX(=)SH
/Symbol SF
22300 XM
(S)SH
/Times-Bold SF
23895 XM
(N)SH
/Times-Roman SF
(\050)SH
/Times-Bold SF
(a)SH
/Symbol SF
(-m)SH
/Times-Roman SF
(\051)SH
53143 XM
(\0502.17\051)SH
9 /Symbol AF
15984 8540 MT
(m)SH
11 /Times-Roman AF
10800 11115 MT
(Setting the sum of \0502.17\051 and \0502.15\051 equal to zero yields,)SH
8 /Symbol AF
28764 12561 MT
(-)SH
/Times-Roman SF
(1)SH
9 /Symbol AF
22951 12760 MT
(-)SH
/Times-Roman SF
(1)SH
11 /Symbol AF
15200 13123 MT
(\321)SH
/Times-Italic SF
16502 XM
(log)SH
/Times-Roman SF
([)SH
/Times-Italic SF
(p)SH
/Times-Roman SF
(\050)SH
/Symbol SF
(m)SH
/Times-Roman SF
(|)SH
/Symbol SF
(c)SH
/Times-Roman SF
(\051])
150 MX(=)SH
/Symbol SF
22300 XM
(S)SH
/Times-Bold SF
23895 XM
(N)SH
/Times-Roman SF
(\050)SH
/Times-Bold SF
(a)SH
/Symbol SF
(-m)SH
/Times-Roman SF
(\051)SH
/Symbol SF
27359 XM
(-)
150 MX(S)SH
/Times-Roman SF
29603 XM
(\050)SH
/Symbol SF
(m-m)SH
/Times-Roman SF
32291 XM
(\051)SH
/Symbol SF
32957 XM
(\272)SH
/Times-Roman SF
33861 XM
(0)SH
53143 XM
(\0502.18\051)SH
9 /Symbol AF
15984 13483 MT
(m)SH
/Times-Italic SF
31841 XM
(o)SH
8 SS 
28764 13485 MT
(o)SH
11 /Times-Roman AF
10800 14862 MT
(Solving for)SH
/Symbol SF
16056 XM
(m)SH
/Times-Roman SF
16965 XM
(results in the EMAP mean vector estimate:)SH
8 /Symbol AF
21680 16308 MT
(-)SH
/Times-Roman SF
(1)SH
9 /Symbol AF
15851 16507 MT
(-)SH
/Times-Roman SF
(1)SH
11 /Symbol AF
15200 16870 MT
(S)SH
/Times-Bold SF
16795 XM
(N)SH
/Times-Roman SF
(\050)SH
/Times-Bold SF
(a)SH
/Symbol SF
(-m)SH
/Times-Roman SF
(\051)
150 MX(=)SH
/Symbol SF
21029 XM
(S)SH
/Times-Roman SF
22519 XM
(\050)SH
/Symbol SF
(m-m)SH
/Times-Roman SF
25207 XM
(\051)SH
9 /Times-Italic AF
24757 17230 MT
(o)SH
8 SS 
21680 17232 MT
(o)SH
/Symbol SF
19226 17964 MT
(-)SH
/Times-Roman SF
(1)SH
/Symbol SF
26495 XM
(-)SH
/Times-Roman SF
(1)SH
9 /Symbol AF
16217 18163 MT
(-)SH
/Times-Roman SF
(1)SH
/Symbol SF
22636 XM
(-)SH
/Times-Roman SF
(1)SH
11 SS 
15200 18526 MT
(\050)SH
/Symbol SF
(S)SH
/Times-Bold SF
17161 XM
(N)SH
/Times-Roman SF
(+)SH
/Symbol SF
(S)SH
/Times-Roman SF
20065 XM
(\051)SH
/Symbol SF
(m)SH
/Times-Roman SF
21215 XM
(=)SH
/Symbol SF
21985 XM
(S)SH
/Times-Bold SF
23580 XM
(Na)SH
/Times-Roman SF
25074 XM
(+)SH
/Symbol SF
25844 XM
(S m)564 W
9 /Times-Italic AF
27968 18886 MT
(o)SH
8 SS 
19226 18888 MT
(o)SH
26495 XM
(o)SH
/Symbol SF
15200 19711 MT
(\331)SH
20628 19839 MT
(-)SH
/Times-Roman SF
(1)SH
/Symbol SF
22484 XM
(-)SH
/Times-Roman SF
(1)SH
/Symbol SF
29353 XM
(-)SH
/Times-Roman SF
(1)SH
9 /Symbol AF
17619 20038 MT
(-)SH
/Times-Roman SF
(1)SH
/Symbol SF
26344 XM
(-)SH
/Times-Roman SF
(1)SH
/Symbol SF
31209 XM
(-)SH
/Times-Roman SF
(1)SH
11 /Symbol AF
15200 20401 MT
(m)SH
/Times-Roman SF
15832 XM
(=)
150 MX(\050)SH
/Symbol SF
(S)SH
/Times-Bold SF
18563 XM
(N)SH
/Times-Roman SF
(+)SH
/Symbol SF
(S)SH
/Times-Roman SF
21467 XM
(\051)SH
/Symbol SF
(S m)564 W
/Times-Roman SF
24557 XM
(+)
150 MX(\050)SH
/Symbol SF
(S)SH
/Times-Bold SF
27288 XM
(N)SH
/Times-Roman SF
(+)SH
/Symbol SF
(S)SH
/Times-Roman SF
30192 XM
(\051)SH
/Symbol SF
(S)SH
/Times-Bold SF
32153 XM
(Na)SH
9 /Times-Italic AF
23957 20761 MT
(o)SH
8 SS 
20628 20763 MT
(o)SH
22484 XM
(o)SH
29353 XM
(o)SH
/Symbol SF
15200 21586 MT
(\331)SH
9 SS 
21151 21913 MT
(-)SH
/Times-Roman SF
(1)SH
/Symbol SF
29098 XM
(-)SH
/Times-Roman SF
(1)SH
11 /Symbol AF
15200 22276 MT
(m)SH
/Times-Roman SF
15832 XM
(=)SH
/Symbol SF
16602 XM
(S)SH
/Times-Roman SF
(\050)SH
/Symbol SF
(S)SH
/Times-Roman SF
(+)SH
/Times-Bold SF
(N)SH
/Symbol SF
(S)SH
/Times-Roman SF
20785 XM
(\051)SH
/Symbol SF
22095 XM
(m)SH
/Times-Roman SF
23329 XM
(+)SH
/Symbol SF
24099 XM
(S)SH
/Times-Roman SF
25200 XM
(\050)SH
/Symbol SF
(S)SH
/Times-Roman SF
(+)SH
/Times-Bold SF
(N)SH
/Symbol SF
(S)SH
/Times-Roman SF
28732 XM
(\051)SH
/Times-Bold SF
30042 XM
(Na)SH
/Times-Roman SF
53143 XM
(\0502.19\051)SH
9 /Times-Italic AF
20335 22636 MT
(o)SH
22729 XM
(o)SH
24750 XM
(o)SH
28282 XM
(o)SH
/Symbol SF
23324 23790 MT
(-)SH
/Times-Roman SF
(1)SH
/Symbol SF
25922 XM
(-)SH
/Times-Roman SF
(1)SH
/Symbol SF
27232 XM
(-)SH
/Times-Roman SF
(1)SH
/Symbol SF
33070 XM
(-)SH
/Times-Roman SF
(1)SH
11 SS 
10800 24153 MT
(where the matrix identity \050)SH
/Times-Bold SF
(A)SH
/Times-Roman SF
24418 XM
(+)SH
/Times-Bold SF
25188 XM
(B)SH
/Times-Roman SF
26866 XM
(\051)SH
28326 XM
(=)SH
/Times-Bold SF
29096 XM
(A)SH
/Times-Roman SF
(\050)SH
/Times-Bold SF
(A)SH
/Times-Roman SF
31200 XM
(+)SH
/Times-Bold SF
31970 XM
(B)SH
/Times-Roman SF
(\051)SH
/Times-Bold SF
34014 XM
(B)SH
/Times-Roman SF
35023 XM
(was used.)SH
13300 27138 MT
(The EMAP estimate is a linear combination of the prior)
105 W( mean)104 W
/Symbol SF
41916 XM
(m)SH
/Times-Roman SF
43379 XM
(and the observations \050in)104 W
/Times-Bold SF
54609 XM
(a)SH
/Times-Roman SF
(\051.)SH
9 /Times-Italic AF
42550 27498 MT
(o)SH
11 /Times-Roman AF
10800 28877 MT
(The weights specify the optimal combination of)15 W
/Times-Italic SF
32260 XM
(a priori)15 W
/Times-Roman SF
35958 XM
(information with the knowledge)
15 W( gained from)16 W
10800 30616 MT
(observations. Through)555 W
/Symbol SF
21668 XM
(S)SH
/Times-Roman SF
22769 XM
(, the EMAP estimate is able to)
140 W( update all classes after presentation of a)139 W
9 /Times-Italic AF
22319 30976 MT
(o)SH
8 /Symbol AF
48660 31801 MT
(\331)SH
11 /Times-Roman AF
10800 32491 MT
(sample from)
49 W( any class.  When there are few observations or the dogmatism is large,)50 W
/Symbol SF
48660 XM
(m)SH
49292 XM
(\273)
150 MX(m)SH
/Times-Roman SF
51130 XM
(. When)375 W
/Times-Bold SF
55006 XM
(N)SH
9 /Times-Italic AF
50680 32851 MT
(o)SH
11 /Times-Roman AF
10800 34230 MT
(becomes large \050after many observations\051, the)
133 W( sample mean dominates.  This estimate therefore be-)132 W
10800 35969 MT
(haves in an intuitively pleasing manner.)SH
13300 38954 MT
(Similar to the ML algorithm, the EMAP mean estimate)
16 W( is consistent and unbiased.  It converges)17 W
10800 40693 MT
(at least as fast as the ML estimates of the mean vectors, and, depending on data)
126 W( conditions, it can)125 W
9 SS 
20372 42069 MT
(5)SH
11 SS 
10800 42432 MT
(converge much faster)53 W
20822 XM
(. Drawbacks)
381 W( to this algorithm include estimation)
53 W( of the covariance matrix)54 W
/Symbol SF
54424 XM
(S)SH
/Times-Roman SF
55525 XM
(,)SH
9 /Times-Italic AF
55075 42792 MT
(o)SH
11 /Times-Roman AF
10800 44171 MT
(which requires)
47 W( data from more than C times D speakers to avoid singularity problems.  This require-)46 W
10800 45910 MT
(ment created difficulties for the CMU)62 W
9 SS 
28094 XM
(FEATURE)SH
11 SS 
32481 XM
(system. More)
62 W( importantly, the computation required)63 W
9 /Symbol AF
23784 47286 MT
(-)SH
/Times-Roman SF
(1)SH
11 SS 
10800 47649 MT
(to invert the matrix \050)87 W
/Symbol SF
(S)SH
/Times-Roman SF
(+)SH
/Times-Bold SF
(N)SH
/Symbol SF
(S)SH
/Times-Roman SF
23418 XM
(\051)SH
25090 XM
(after each observation may be prohibitive, especially)
87 W( in cases where)86 W
9 /Times-Italic AF
22968 48009 MT
(o)SH
11 /Times-Roman AF
10800 49388 MT
(the product of)
1 W( the number of features and classes is large.  By rederiving this estimate using minimum)2 W
10800 51127 MT
(mean-square error techniques, it is possible to express the EMAP estimate in)
6 W( a form which leads to an)5 W
10800 52866 MT
(approximation which is as accurate but computationally more efficient.)SH
13 /Times-Bold AF
10800 56617 MT
(2.6. Minimum Mean-Square Error Estimation)SH
11 /Times-Roman AF
13300 59532 MT
(The MMSE estimate minimizes the expected value of the squared error between the parameter)67 W
10800 61271 MT
(and its estimate.  As above, the norm of the error vector will)
50 W( be minimized for the vector parameters)49 W
10800 63010 MT
(case. Let)
275 W( the form of the MMSE estimate of)SH
/Symbol SF
30747 XM
(m)SH
/Times-Roman SF
31656 XM
(be)SH
8 /Symbol AF
15200 64547 MT
(\331)SH
9 /Times-Italic AF
17158 64874 MT
(T)SH
11 /Symbol AF
15200 65237 MT
(m)SH
/Times-Roman SF
15682 XM
(=)SH
/Times-Bold SF
(H)SH
17658 XM
(a)SH
/Times-Roman SF
53143 XM
(\0502.20\051)SH
10800 66976 MT
(where)SH
/Times-Bold SF
13761 XM
(H)SH
/Times-Roman SF
14892 XM
(is a CD)SH
/Times-Italic SF
(x)SH
/Times-Roman SF
(CD coefficient matrix to be determined.)SH
10800 50 10800 70172 UL
7 SS 
11700 71673 MT
(5)SH
9 SS 
12050 72000 MT
(Derivation of learning curves for the EMAP algorithm is deferred to Section 2.6 on MMSE estimation.)SH
ES
%%Page: 21 22
BS
0 SI
10 /Times-Roman AF
54800 4286 MT
(21)SH
8 /Symbol AF
34083 7840 MT
(\331)SH
9 /Times-Roman AF
29607 8167 MT
(2)SH
35005 XM
(2)SH
11 SS 
13300 8530 MT
(The mean-square error vector)108 W
/Times-Italic SF
27044 XM
(E)SH
/Times-Roman SF
({)SH
/Symbol SF
(||e||)SH
/Times-Roman SF
30057 XM
(}=)SH
/Times-Italic SF
(E)SH
/Times-Roman SF
({)SH
/Symbol SF
(||m-m)SH
34565 XM
(||)SH
/Times-Roman SF
35455 XM
(} is to)
108 W( be minimized with respect to)109 W
/Times-Bold SF
52313 XM
(H)SH
/Times-Roman SF
(. Ex-)493 W
10800 10269 MT
(pand this expression to obtain)SH
9 SS 
17763 11783 MT
(2)SH
/Times-Italic SF
21195 XM
(T)SH
25845 XM
(T)SH
27201 XM
(T)SH
31149 XM
(T)SH
33361 XM
(T)SH
11 SS 
15200 12146 MT
(E)SH
/Times-Roman SF
({)SH
/Symbol SF
(||e||)SH
/Times-Roman SF
18213 XM
(}=)SH
/Times-Italic SF
(E)SH
/Times-Roman SF
({)SH
/Symbol SF
(m)SH
21695 XM
(m)SH
/Times-Roman SF
(})SH
/Symbol SF
(-)SH
/Times-Roman SF
(2)SH
/Times-Italic SF
(E)SH
/Times-Roman SF
({)SH
/Symbol SF
(m)SH
/Times-Bold SF
26345 XM
(H)SH
27701 XM
(a)SH
/Times-Roman SF
(}+)SH
/Times-Italic SF
(E)SH
/Times-Roman SF
({)SH
/Times-Bold SF
(a)SH
31649 XM
(HH)SH
33861 XM
(a)SH
/Times-Roman SF
(})SH
53143 XM
(\0502.21\051)SH
9 SS 
23445 13660 MT
(2)SH
11 SS 
10800 14023 MT
(Setting the gradient of)SH
/Times-Italic SF
20882 XM
(E)SH
/Times-Roman SF
({)SH
/Symbol SF
(||e||)SH
/Times-Roman SF
23895 XM
(} with respect to)SH
/Times-Bold SF
31449 XM
(H)SH
/Times-Roman SF
32580 XM
(equal to zero yields)SH
9 SS 
19247 15537 MT
(2)SH
/Times-Italic SF
25983 XM
(T)SH
27339 XM
(T)SH
33503 XM
(T)SH
35715 XM
(T)SH
11 /Symbol AF
15200 15900 MT
(\321)SH
/Times-Italic SF
16684 XM
(E)SH
/Times-Roman SF
({)SH
/Symbol SF
(||e||)SH
/Times-Roman SF
19697 XM
(})
150 MX(=)SH
/Symbol SF
21145 XM
(-)SH
/Times-Roman SF
(2)SH
/Symbol SF
(\321)SH
/Times-Roman SF
23783 XM
([)SH
/Times-Italic SF
(E)SH
/Times-Roman SF
({)SH
/Symbol SF
(m)SH
/Times-Bold SF
26483 XM
(H)SH
27839 XM
(a)SH
/Times-Roman SF
(}]+)SH
/Symbol SF
(\321)SH
/Times-Roman SF
31387 XM
([)SH
/Times-Italic SF
(E)SH
/Times-Roman SF
({)SH
/Times-Bold SF
(a)SH
34003 XM
(HH)SH
36215 XM
(a)SH
/Times-Roman SF
(}])SH
/Symbol SF
37959 XM
(\272)SH
/Times-Roman SF
38863 XM
(0)SH
53143 XM
(\0502.22\051)SH
9 /Times-Bold AF
15984 16260 MT
(H)SH
23083 XM
(H)SH
30687 XM
(H)SH
/Times-Italic SF
48568 17414 MT
(T)SH
52800 XM
(T)SH
11 /Times-Roman AF
10800 17777 MT
(Taking the gradient inside the expectation and using the)
638 W( identities)637 W
/Symbol SF
46384 XM
(\321)SH
/Times-Bold SF
48018 XM
(a)SH
49068 XM
(Mb)SH
/Times-Roman SF
50868 XM
(=)SH
/Times-Bold SF
51638 XM
(ba)SH
/Times-Roman SF
54212 XM
(and)SH
9 /Times-Bold AF
47168 18137 MT
(M)SH
/Times-Italic SF
12984 19153 MT
(T)SH
14522 XM
(T)SH
19180 XM
(T)SH
11 /Symbol AF
10800 19516 MT
(\321)SH
/Times-Bold SF
12434 XM
(a)SH
13484 XM
(M)SH
15022 XM
(Ma)SH
/Times-Roman SF
16760 XM
(=)
150 MX(2)SH
/Times-Bold SF
(aa)SH
19680 XM
(M)SH
/Times-Roman SF
20993 XM
(results in)SH
9 /Times-Bold AF
11584 19876 MT
(M)SH
/Times-Italic SF
18188 21030 MT
(T)SH
22436 XM
(T)SH
11 /Symbol AF
15200 21393 MT
(-)SH
/Times-Italic SF
(E)SH
/Times-Roman SF
({)SH
/Times-Bold SF
(a)SH
/Symbol SF
(m)SH
/Times-Roman SF
18688 XM
(})
150 MX(+)SH
/Times-Italic SF
20136 XM
(E)SH
/Times-Roman SF
({)SH
/Times-Bold SF
(aa)SH
/Times-Roman SF
22936 XM
(})SH
/Times-Bold SF
(H)SH
/Times-Roman SF
24470 XM
(=)
150 MX(0)SH
53143 XM
(\0502.23\051)SH
10800 23132 MT
(which is easily solved for the optimal coefficient matrix)SH
8 /Symbol AF
17965 24578 MT
(-)SH
/Times-Roman SF
(1)SH
9 /Symbol AF
16056 24777 MT
(*)SH
11 /Times-Bold AF
15200 25140 MT
(H)SH
/Times-Roman SF
16506 XM
(=)SH
/Symbol SF
(F F)564 W
/Times-Roman SF
53143 XM
(\0502.24\051)SH
9 /Times-Bold AF
19643 25500 MT
(a)SH
/Symbol SF
(m)SH
8 /Times-Bold AF
17965 25502 MT
(aa)SH
11 /Times-Roman AF
13300 28125 MT
(The MMSE solution is in the form of)
48 W( the traditional Wiener-Hopf equation)
49 W( [26])
SH( except that the)49 W
9 /Symbol AF
25041 29501 MT
(*)SH
11 /Times-Roman AF
10800 29864 MT
(parameter)SH
/Symbol SF
15528 XM
(F)SH
/Times-Roman SF
17599 XM
(\050and therefore)57 W
/Times-Bold SF
24185 XM
(H)SH
/Times-Roman SF
25491 XM
(\051 varies with the number of data samples obtained.  It is)
57 W( this depen-)56 W
9 /Times-Italic AF
16367 30224 MT
(aa)SH
11 /Times-Roman AF
10800 31603 MT
(dence of the optimal coefficients on sample counts \050)6 W
/Times-Bold SF
(N)SH
/Times-Roman SF
(\051 that forms)
6 W( the basis of the differences between)7 W
10800 33342 MT
(standard adaptive filtering and our parameter estimation techniques.  It results in a)
219 W( time-varying)218 W
10800 35081 MT
(optimal solution and a time-varying performance surface and additional terms in the analysis)
94 W( of the)95 W
10800 36820 MT
(LMS approximation to the MMSE solution. The additional terms cause the LMS)
134 W( convergence and)133 W
10800 38559 MT
(stability properties to)
180 W( be dependent on the input data distribution in manners in which traditional)181 W
10800 40298 MT
(LMS has no dependence.  The differences between adaptive filtering and parameter)
1 W( estimation will be)SH
10800 42037 MT
(discussed further in Section 2.7.)SH
12 /Times-Bold AF
10800 45721 MT
(2.6.1. Equivalence of the EMAP and MMSE Estimates)SH
11 /Times-Roman AF
13300 48636 MT
(The MMSE estimate is the mean of the)29 W
/Times-Italic SF
31068 XM
(a posteriori)29 W
/Times-Roman SF
36566 XM
(density,)SH
/Times-Italic SF
40324 XM
(i.e.)SH
/Times-Roman SF
41973 XM
(the conditional mean of p\050)30 W
/Symbol SF
(m)SH
/Times-Roman SF
(|)SH
/Symbol SF
(c)SH
/Times-Roman SF
(\051.)SH
10800 50375 MT
(The EMAP estimate is the value)
80 W( of)79 W
/Symbol SF
27091 XM
(m)SH
/Times-Roman SF
28079 XM
(at which p\050)79 W
/Symbol SF
(m)SH
/Times-Roman SF
(|)SH
/Symbol SF
(c)SH
/Times-Roman SF
(\051 has its maximum.  If the)79 W
/Times-Italic SF
46806 XM
(a posteriori)79 W
/Times-Roman SF
52404 XM
(pdf is a)79 W
10800 52114 MT
(unimodal function which is symmetric about the conditional mean, as is the case with the multivariate)6 W
10800 53853 MT
(normal density, then)
93 W( these two estimates are equivalent)
92 W( [25].)
SH( To)
459 W( demonstrate this equivalence,)92 W
/Symbol SF
54061 XM
(F)SH
9 /Times-Italic AF
54900 54213 MT
(aa)SH
11 /Times-Roman AF
10800 55592 MT
(and)SH
/Symbol SF
12760 XM
(F)SH
/Times-Roman SF
14939 XM
(must be expressed in terms of)97 W
/Symbol SF
28901 XM
(S)SH
/Times-Roman SF
(,)SH
/Symbol SF
30199 XM
(S)SH
/Times-Roman SF
31300 XM
(, and)97 W
/Symbol SF
33908 XM
(m)SH
/Times-Roman SF
34992 XM
(. It)
471 W( was also found to be necessary for a bias)98 W
9 /Times-Italic AF
13599 55952 MT
(a)SH
/Symbol SF
(m)SH
/Times-Italic SF
30850 XM
(o)SH
34542 XM
(o)SH
11 /Times-Roman AF
10800 57331 MT
(term to be incorporated into the MMSE estimate to represent the)
102 W( contribution of the)101 W
/Symbol SF
49372 XM
(m)SH
/Times-Roman SF
50832 XM
(term in the)101 W
9 /Times-Italic AF
50006 57691 MT
(o)SH
11 /Times-Roman AF
10800 59070 MT
(EMAP expression.  Without this bias, it is not possible to show equivalence.)
221 W( By)
718 W( prepending a)222 W
8 /Times-Italic AF
34051 60464 MT
(T)SH
34862 XM
(T)SH
11 /Times-Roman AF
10800 60809 MT
(constant to the sample mean vector, so that)82 W
/Symbol SF
30671 XM
(a)SH
/Times-Roman SF
31515 XM
(=)
150 MX([1)SH
/Times-Bold SF
33501 XM
(a)SH
/Times-Roman SF
34496 XM
(])SH
35307 XM
(, the MMSE algorithm is)
82 W( allowed to compute)81 W
10800 62548 MT
(the optimal weight for this bias term.  The notation)55 W
/Symbol SF
34051 XM
(a)SH
/Times-Roman SF
35075 XM
(to represent the sample mean plus bias will)
55 W( be)56 W
10800 64287 MT
(used throughout the remainder of this thesis.)SH
13300 67272 MT
(With the addition of the bias term in)SH
/Symbol SF
29554 XM
(a)SH
/Times-Roman SF
(, the data statistics now become)SH
9 /Times-Italic AF
23199 68953 MT
(T)SH
34964 XM
(T)SH
11 /Times-Roman AF
19711 69316 MT
(1)SH
/Times-Italic SF
21611 XM
(E)SH
/Times-Roman SF
([)SH
/Times-Bold SF
(a)SH
/Times-Roman SF
23699 XM
(])SH
/Times-Italic SF
33292 XM
(E)SH
/Times-Roman SF
([)SH
/Symbol SF
(m)SH
/Times-Roman SF
35464 XM
(])SH
/Symbol SF
15200 69815 MT
(F)SH
/Times-Roman SF
17325 XM
(=)SH
/Times-Italic SF
26431 XM
(and)SH
/Symbol SF
29581 XM
(F)SH
/Times-Roman SF
31656 XM
(=)SH
53143 XM
(\0502.25\051)SH
9 /Symbol AF
16039 70175 MT
(aa)SH
30420 XM
(am)SH
26 SS 
18095 70249 MT
(\050)SH
24065 XM
(\051)SH
32426 XM
(\050)SH
35830 XM
(\051)SH
11 /Times-Italic AF
18991 70512 MT
(E)SH
/Times-Roman SF
([)SH
/Times-Bold SF
(a)SH
/Times-Roman SF
(])SH
/Symbol SF
22295 XM
(F)SH
33657 XM
(F)SH
9 /Times-Bold AF
23134 70872 MT
(aa)SH
34496 XM
(a)SH
/Symbol SF
(m)SH
11 /Times-Roman AF
10800 72251 MT
(In Appendix A,)SH
/Times-Italic SF
17948 XM
(E)SH
/Times-Roman SF
([)SH
/Times-Bold SF
(a)SH
/Times-Roman SF
(] is shown to be)SH
/Symbol SF
26777 XM
(m)SH
/Times-Roman SF
27861 XM
(, and)SH
/Times-Italic SF
30274 XM
(E)SH
/Times-Roman SF
([)SH
/Symbol SF
(m)SH
/Times-Roman SF
(]is)SH
/Symbol SF
33321 XM
(m)SH
/Times-Roman SF
34405 XM
(. Using)
275 W( the block matrix inversion identity:)SH
9 /Times-Italic AF
27411 72611 MT
(o)SH
33955 XM
(o)SH
ES
%%Page: 22 23
BS
0 SI
10 /Times-Roman AF
54800 4286 MT
(22)SH
9 /Times-Italic AF
18874 7984 MT
(T)SH
25338 XM
(T)SH
/Symbol SF
26572 XM
(-)SH
/Times-Roman SF
(1)SH
/Symbol SF
28676 XM
(-)SH
/Times-Roman SF
(1)SH
/Symbol SF
32218 XM
(-)SH
/Times-Roman SF
(1)SH
/Times-Italic SF
33956 XM
(T)SH
/Symbol SF
35129 XM
(-)SH
/Times-Roman SF
(1)SH
7 /Symbol AF
20260 8156 MT
(-)SH
/Times-Roman SF
(1)SH
11 /Times-Bold AF
16086 8347 MT
(A C)925 W
/Times-Roman SF
22780 XM
(\050)SH
/Times-Bold SF
(A)SH
/Symbol SF
(-)SH
/Times-Bold SF
(C)SH
25838 XM
(B)SH
27516 XM
(C)SH
/Times-Roman SF
(\051)SH
/Symbol SF
30820 XM
(-)SH
/Times-Bold SF
(A)SH
33162 XM
(C)SH
/Symbol SF
34456 XM
(D)SH
/Times-Roman SF
21144 8846 MT
(=)SH
53143 XM
(\0502.26\051)SH
9 /Symbol AF
26248 9205 MT
(-)SH
/Times-Roman SF
(1)SH
/Times-Italic SF
27926 XM
(T)SH
/Symbol SF
29220 XM
(-)SH
/Times-Roman SF
(1)SH
/Symbol SF
32937 XM
(-)SH
/Times-Roman SF
(1)SH
26 /Symbol AF
15200 9280 MT
(\050)SH
19394 XM
(\051)SH
21914 XM
(\050)SH
36073 XM
(\051)SH
11 /Times-Bold AF
16066 9543 MT
(C B)1525 W
/Symbol SF
24971 9568 MT
(-D)SH
/Times-Bold SF
27192 XM
(B)SH
28426 XM
(A)SH
/Symbol SF
32264 XM
(D)SH
8 /Times-Roman AF
24827 11014 MT
(-1)SH
9 /Symbol AF
14434 11213 MT
(-)SH
/Times-Roman SF
(1)SH
/Symbol SF
19890 XM
(-)SH
/Times-Roman SF
(1)SH
/Times-Italic SF
21628 XM
(T)SH
/Symbol SF
22494 XM
(-)SH
/Times-Roman SF
(1)SH
11 SS 
10800 11576 MT
(where)SH
/Symbol SF
13761 XM
(D)SH
/Times-Roman SF
15528 XM
(=)
150 MX(\050)SH
/Times-Bold SF
(B)SH
/Symbol SF
17548 XM
(-)SH
/Times-Bold SF
18302 XM
(CA)SH
20834 XM
(C)SH
/Times-Roman SF
22128 XM
(\051)SH
23438 XM
(,)SH
/Symbol SF
23988 XM
(F)SH
/Times-Roman SF
26112 XM
(becomes)SH
8 /Symbol AF
24827 11938 MT
(aa)SH
9 /Times-Italic AF
21089 13257 MT
(T)SH
/Symbol SF
22627 XM
(-)SH
/Times-Roman SF
(1)SH
/Times-Italic SF
27543 XM
(T)SH
/Symbol SF
29081 XM
(-)SH
/Times-Roman SF
(1)SH
8 /Symbol AF
16039 13557 MT
(-)SH
/Times-Roman SF
(1)SH
11 SS 
18835 13620 MT
(1+)SH
/Symbol SF
(m)SH
/Times-Bold SF
21589 XM
(M)SH
/Symbol SF
23571 XM
(m)SH
25855 XM
(-m)SH
/Times-Bold SF
28043 XM
(M)SH
9 /Times-Italic AF
20639 13980 MT
(o)SH
24205 XM
(o)SH
27093 XM
(o)SH
11 /Symbol AF
15200 14119 MT
(F)SH
/Times-Roman SF
17199 XM
(=)SH
53143 XM
(\0502.27\051)SH
8 /Symbol AF
16039 14481 MT
(aa)SH
26 SS 
17969 14553 MT
(\050)SH
30025 XM
(\051)SH
9 SS 
22646 14782 MT
(-)SH
/Times-Roman SF
(1)SH
/Symbol SF
26912 XM
(-)SH
/Times-Roman SF
(1)SH
11 /Symbol AF
21004 15145 MT
(-)SH
/Times-Bold SF
(M)SH
/Symbol SF
23590 XM
(m)SH
/Times-Bold SF
25874 XM
(M)SH
9 /Times-Italic AF
24224 15505 MT
(o)SH
/Symbol SF
19001 16659 MT
(-)SH
/Times-Roman SF
(1)SH
11 SS 
10800 17022 MT
(where)SH
/Times-Bold SF
13862 XM
(M)SH
/Times-Roman SF
15050 XM
(=)
150 MX(\050)SH
/Symbol SF
(S)SH
/Times-Roman SF
17437 XM
(+)SH
/Times-Bold SF
18207 XM
(N)SH
/Symbol SF
19945 XM
(S)SH
/Times-Roman SF
(\051. Substitution)
477 W( of Equation \0502.27\051 into the optimal)
101 W( coefficient equation \0502.24\051)100 W
9 /Times-Italic AF
16837 17382 MT
(o)SH
11 /Times-Roman AF
10800 18761 MT
(\050which holds for)SH
/Symbol SF
18345 XM
(a)SH
/Times-Roman SF
19314 XM
(as well as)SH
/Times-Bold SF
23865 XM
(a)SH
/Times-Roman SF
(\051 results in)SH
9 /Times-Italic AF
19376 20442 MT
(T)SH
/Symbol SF
22612 XM
(-)SH
/Times-Roman SF
(1)SH
11 /Symbol AF
18292 20805 MT
(m)SH
/Times-Roman SF
19876 XM
(\050)SH
/Times-Bold SF
(I)SH
/Symbol SF
20820 XM
(-)SH
/Times-Bold SF
21574 XM
(M)SH
/Symbol SF
23556 XM
(S)SH
/Times-Roman SF
24657 XM
(\051)SH
9 /Symbol AF
16056 20941 MT
(*)SH
/Times-Italic SF
18926 21165 MT
(o)SH
24207 XM
(o)SH
11 /Times-Bold AF
15200 21304 MT
(H)SH
/Times-Roman SF
16656 XM
(=)SH
53143 XM
(\0502.28\051)SH
26 /Symbol AF
17426 21738 MT
(\050)SH
25023 XM
(\051)SH
9 SS 
21154 21967 MT
(-)SH
/Times-Roman SF
(1)SH
11 /Times-Bold AF
20116 22330 MT
(M)SH
/Symbol SF
22098 XM
(S)SH
9 /Times-Italic AF
22749 22690 MT
(o)SH
11 /Times-Roman AF
10800 24069 MT
(Using this coefficient matrix in \0502.20\051 gives the expression for the MMSE estimate)SH
8 /Symbol AF
15200 25606 MT
(\331)SH
9 SS 
25733 25933 MT
(-)SH
/Times-Roman SF
(1)SH
11 /Symbol AF
15200 26296 MT
(m)SH
/Times-Roman SF
18732 XM
(=)SH
/Symbol SF
19902 XM
(S)SH
/Times-Bold SF
21278 XM
(N)SH
/Times-Roman SF
(\050)SH
/Symbol SF
(S)SH
/Times-Roman SF
23814 XM
(,)SH
/Times-Bold SF
(+)SH
/Symbol SF
(S)SH
/Times-Roman SF
(\051)SH
26952 XM
(\050)SH
/Times-Bold SF
(a)SH
/Symbol SF
28143 XM
(- m)SH
/Times-Roman SF
30106 XM
(\051 +)275 W
/Symbol SF
32192 XM
(m)SH
/Times-Roman SF
53143 XM
(\0502.29\051)SH
9 /Times-Italic AF
15682 26656 MT
(MMSE)SH
20553 XM
(o)SH
23089 XM
(o)SH
29656 XM
(o)SH
32826 XM
(o)SH
/Symbol SF
26541 27810 MT
(-)SH
/Times-Roman SF
(1)SH
/Symbol SF
33924 XM
(-)SH
/Times-Roman SF
(1)SH
11 SS 
10800 28173 MT
(It can be shown that)163 W
/Symbol SF
20748 XM
(S)SH
/Times-Bold SF
21849 XM
(N)SH
/Times-Roman SF
(\050)SH
/Symbol SF
(S)SH
/Times-Bold SF
24110 XM
(N)SH
/Times-Roman SF
(+)SH
/Symbol SF
(S)SH
/Times-Roman SF
(\051)SH
27635 XM
(=)SH
/Times-Italic SF
28405 XM
(I)SH
/Symbol SF
(-S)SH
/Times-Roman SF
(\050)SH
/Symbol SF
(S)SH
/Times-Bold SF
31493 XM
(N)SH
/Times-Roman SF
(+)SH
/Symbol SF
(S)SH
/Times-Roman SF
(\051)SH
34868 XM
(. Substitution)
603 W( of this identity into \0502.29\051 and)164 W
9 /Times-Italic AF
21399 28533 MT
(o)SH
23660 XM
(o)SH
31043 XM
(o)SH
11 /Times-Roman AF
10800 29912 MT
(rearranging gives the desired result, namely that the coefficients of)7 W
/Times-Bold SF
40527 XM
(a)SH
/Times-Roman SF
41358 XM
(and)SH
/Symbol SF
43227 XM
(m)SH
/Times-Roman SF
44592 XM
(in the MMSE and EMAP)6 W
9 /Times-Italic AF
43861 30272 MT
(o)SH
11 /Times-Roman AF
10800 31651 MT
(estimates are the same.  Due to the equivalence of these two)
168 W( estimators for the data distributions)169 W
10800 33390 MT
(considered here, analysis of the mean-square error or)
23 W( any approximations of either algorithm apply to)22 W
10800 35129 MT
(both.)SH
12 /Times-Bold AF
10800 38813 MT
(2.6.2. Mean-Square Error of the EMAP/MMSE estimate)SH
9 /Symbol AF
55350 41693 MT
(*)SH
11 /Times-Roman AF
13300 42056 MT
(The mean-square error of the EMAP and MMSE estimates can be)
75 W( obtained by substituting)76 W
/Times-Bold SF
54494 XM
(H)SH
/Times-Roman SF
10800 43795 MT
(for)SH
/Times-Bold SF
12357 XM
(H)SH
/Times-Roman SF
13488 XM
(in \0502.21\051, or)SH
9 /Times-Italic AF
23956 45412 MT
(T)SH
28582 XM
(T)SH
/Symbol SF
29938 XM
(*)SH
/Times-Italic SF
30538 XM
(T)SH
34450 XM
(T)SH
/Symbol SF
35806 XM
(*)SH
/Times-Italic SF
36406 XM
(T)SH
/Symbol SF
37762 XM
(*)SH
11 /Times-Italic AF
15200 45775 MT
(MSE)SH
/Times-Roman SF
19838 XM
(\050)SH
/Times-Bold SF
(N)SH
/Times-Roman SF
(\051)
150 MX(=)SH
/Times-Italic SF
22284 XM
(E)SH
/Times-Roman SF
([)SH
/Symbol SF
(m)SH
24456 XM
(m)SH
/Times-Roman SF
(])SH
/Symbol SF
25606 XM
(-)SH
/Times-Roman SF
26360 XM
(2)SH
/Times-Italic SF
(E)SH
/Times-Roman SF
([)SH
/Symbol SF
(m)SH
/Times-Bold SF
29082 XM
(H)SH
/Symbol SF
31038 XM
(a)SH
/Times-Roman SF
(]+)SH
/Times-Italic SF
(E)SH
/Times-Roman SF
([)SH
/Symbol SF
(a)SH
/Times-Bold SF
34950 XM
(H)SH
36906 XM
(H)SH
/Symbol SF
38212 XM
(a)SH
/Times-Roman SF
(])SH
53143 XM
(\0502.30\051)SH
9 /Times-Italic AF
17338 46135 MT
(MMSE)SH
11 /Times-Roman AF
10800 47514 MT
(Rearranging gives)SH
9 /Times-Italic AF
25218 49131 MT
(T)SH
/Symbol SF
31856 XM
(*)SH
/Times-Italic SF
32456 XM
(T)SH
34284 XM
(T)SH
/Symbol SF
39754 XM
(*)SH
/Times-Italic SF
40354 XM
(T)SH
42242 XM
(T)SH
/Symbol SF
43598 XM
(*)SH
11 /Times-Italic AF
15200 49494 MT
(MSE)SH
/Times-Roman SF
19838 XM
(\050)SH
/Times-Bold SF
(N)SH
/Times-Roman SF
(\051)
150 MX(=)SH
/Times-Italic SF
22284 XM
(E)SH
/Times-Roman SF
([)SH
/Times-Italic SF
(tr)SH
/Times-Roman SF
({)SH
/Symbol SF
(m)SH
25718 XM
(m)SH
/Times-Roman SF
(}])SH
/Symbol SF
27396 XM
(-)SH
/Times-Roman SF
28150 XM
(2)SH
/Times-Italic SF
(E)SH
/Times-Roman SF
([)SH
/Times-Italic SF
(tr)SH
/Times-Roman SF
({)SH
/Times-Bold SF
(H)SH
/Symbol SF
32956 XM
(am)SH
/Times-Roman SF
34784 XM
(}])
150 MX(+)SH
/Times-Italic SF
36598 XM
(E)SH
/Times-Roman SF
([)SH
/Times-Italic SF
(tr)SH
/Times-Roman SF
({)SH
/Times-Bold SF
(H)SH
/Symbol SF
40854 XM
(aa)SH
/Times-Bold SF
42742 XM
(H)SH
/Times-Roman SF
44048 XM
(}])SH
53143 XM
(\0502.31\051)SH
9 /Times-Italic AF
17338 49854 MT
(MMSE)SH
11 /Times-Roman AF
10800 51233 MT
(Taking the expectation inside the trace yields)SH
9 /Symbol AF
29221 52850 MT
(*)SH
/Times-Italic SF
29821 XM
(T)SH
/Symbol SF
35812 XM
(*)SH
/Times-Italic SF
36412 XM
(T)SH
/Symbol SF
39743 XM
(*)SH
11 /Times-Italic AF
15200 53213 MT
(MSE)SH
/Times-Roman SF
19838 XM
(\050)SH
/Times-Bold SF
(N)SH
/Times-Roman SF
(\051)
150 MX(=)SH
/Times-Italic SF
22284 XM
(tr)SH
/Times-Roman SF
({)SH
/Symbol SF
(F)SH
/Times-Roman SF
25421 XM
(})SH
/Symbol SF
(-)SH
/Times-Roman SF
(2)SH
/Times-Italic SF
(tr)SH
/Times-Roman SF
({)SH
/Times-Bold SF
(H)SH
/Symbol SF
30321 XM
(F)SH
/Times-Roman SF
32246 XM
(})
150 MX(+)SH
/Times-Italic SF
33694 XM
(tr)SH
/Times-Roman SF
({)SH
/Times-Bold SF
(H)SH
/Symbol SF
36912 XM
(F)SH
/Times-Bold SF
38887 XM
(H)SH
/Times-Roman SF
40193 XM
(})SH
53143 XM
(\0502.32\051)SH
9 /Times-Italic AF
17338 53573 MT
(MMSE)SH
/Symbol SF
24385 XM
(mm)SH
31160 XM
(am)SH
37751 XM
(aa)SH
21740 54830 MT
(*)SH
11 /Times-Roman AF
10800 55193 MT
(Substituting \0502.24\051 for)SH
/Times-Bold SF
20884 XM
(H)SH
/Times-Roman SF
22465 XM
(in the last term of \0502.32\051 results in)SH
9 /Symbol AF
28671 56810 MT
(*)SH
/Times-Italic SF
29271 XM
(T)SH
11 SS 
15200 57173 MT
(MSE)SH
/Times-Roman SF
19838 XM
(\050)SH
/Times-Bold SF
(N)SH
/Times-Roman SF
(\051)
150 MX(=)SH
/Times-Italic SF
22284 XM
(tr)SH
/Times-Roman SF
({)SH
/Symbol SF
(F)SH
/Times-Roman SF
25421 XM
(})SH
/Symbol SF
(-)SH
/Times-Italic SF
(tr)SH
/Times-Roman SF
({)SH
/Times-Bold SF
(H)SH
/Symbol SF
29771 XM
(F)SH
/Times-Roman SF
31696 XM
(})SH
53143 XM
(\0502.33\051)SH
9 /Times-Italic AF
17338 57533 MT
(MMSE)SH
/Symbol SF
24385 XM
(mm)SH
30610 XM
(am)SH
39502 58790 MT
(*)SH
11 /Times-Roman AF
10800 59153 MT
(Rewriting this in terms of)70 W
/Symbol SF
22731 XM
(S)SH
/Times-Roman SF
(,)SH
/Symbol SF
24002 XM
(S)SH
/Times-Roman SF
25103 XM
(, and)70 W
/Symbol SF
27656 XM
(m)SH
/Times-Roman SF
28740 XM
(, and using \0502.28\051 for)69 W
/Times-Bold SF
38646 XM
(H)SH
/Times-Roman SF
40296 XM
(leads to the final expression of the)69 W
9 /Times-Italic AF
24653 59513 MT
(o)SH
28290 XM
(o)SH
11 /Times-Roman AF
10800 60892 MT
(mean-square error as)SH
9 /Times-Italic AF
27735 62406 MT
(T)SH
32797 XM
(T)SH
/Symbol SF
40310 XM
(-)SH
/Times-Roman SF
(1)SH
11 /Times-Italic AF
15200 62769 MT
(MSE)SH
/Times-Roman SF
19838 XM
(\050)SH
/Times-Bold SF
(N)SH
/Times-Roman SF
(\051)
150 MX(=)SH
/Times-Italic SF
22284 XM
(tr)SH
/Times-Roman SF
({)SH
/Symbol SF
(S)SH
/Times-Roman SF
24797 XM
(+)SH
/Symbol SF
25567 XM
(m)SH
26651 XM
(m)SH
/Times-Roman SF
28235 XM
(})SH
/Symbol SF
(-)SH
/Times-Italic SF
(tr)SH
/Times-Roman SF
({)SH
/Symbol SF
(m)SH
31713 XM
(m)SH
/Times-Roman SF
33447 XM
(+)SH
/Symbol SF
34217 XM
(S)SH
/Times-Bold SF
35318 XM
(N)SH
/Times-Roman SF
(\050)SH
/Symbol SF
(S)SH
/Times-Bold SF
37579 XM
(N)SH
/Times-Roman SF
38523 XM
(+)SH
/Symbol SF
39293 XM
(S)SH
/Times-Roman SF
(\051)SH
/Symbol SF
41254 XM
(S)SH
/Times-Roman SF
42355 XM
(})SH
9 /Times-Italic AF
17338 63129 MT
(MMSE)SH
24197 XM
(o)SH
26201 XM
(o)SH
27285 XM
(o)SH
31263 XM
(o)SH
32347 XM
(o)SH
34868 XM
(o)SH
37129 XM
(o)SH
41905 XM
(o)SH
/Symbol SF
31644 63931 MT
(-)SH
/Times-Roman SF
(1)SH
11 SS 
21514 64294 MT
(=)SH
/Times-Italic SF
22284 XM
(tr)SH
/Times-Roman SF
({)SH
/Symbol SF
(S)SH
24797 XM
(-)
150 MX(S)SH
/Times-Bold SF
26652 XM
(N)SH
/Times-Roman SF
(\050)SH
/Symbol SF
(S)SH
/Times-Bold SF
28913 XM
(N)SH
/Times-Roman SF
29857 XM
(+)SH
/Symbol SF
30627 XM
(S)SH
/Times-Roman SF
(\051)SH
/Symbol SF
32588 XM
(S)SH
/Times-Roman SF
33689 XM
(})SH
9 /Times-Italic AF
24197 64654 MT
(o)SH
26202 XM
(o)SH
28463 XM
(o)SH
33239 XM
(o)SH
/Symbol SF
31337 65456 MT
(-)SH
/Times-Roman SF
(1)SH
11 SS 
21514 65819 MT
(=)SH
/Times-Italic SF
22284 XM
(tr)SH
/Times-Roman SF
({[)SH
/Times-Bold SF
(I)SH
/Symbol SF
24490 XM
(-)
150 MX(S)SH
/Times-Bold SF
26345 XM
(N)SH
/Times-Roman SF
(\050)SH
/Symbol SF
(S)SH
/Times-Bold SF
28606 XM
(N)SH
/Times-Roman SF
29550 XM
(+)SH
/Symbol SF
30320 XM
(S)SH
/Times-Roman SF
(\051)SH
/Symbol SF
32281 XM
(S)SH
/Times-Roman SF
33382 XM
(})SH
9 /Times-Italic AF
25895 66179 MT
(o)SH
28156 XM
(o)SH
32932 XM
(o)SH
/Symbol SF
28395 66981 MT
(-)SH
/Times-Roman SF
(1)SH
11 SS 
21514 67344 MT
(=)SH
/Times-Italic SF
22284 XM
(tr)SH
/Times-Roman SF
({)SH
/Symbol SF
(S)SH
/Times-Roman SF
(\050)SH
/Symbol SF
(S)SH
/Times-Bold SF
25664 XM
(N)SH
/Times-Roman SF
26608 XM
(+)SH
/Symbol SF
27378 XM
(S)SH
/Times-Roman SF
(\051)SH
/Symbol SF
29339 XM
(S)SH
/Times-Roman SF
30440 XM
(})SH
53143 XM
(\0502.34\051)SH
9 /Times-Italic AF
25214 67704 MT
(o)SH
29990 XM
(o)SH
11 /Times-Roman AF
10800 69083 MT
(which agrees with the result for)SH
/Times-Italic SF
24972 XM
(MSE)SH
/Times-Roman SF
29510 XM
(\050)SH
/Times-Bold SF
(N)SH
/Times-Roman SF
(\051 in [24].)SH
9 /Times-Italic AF
27110 69443 MT
(EMAP)SH
ES
%%Page: 23 24
BS
0 SI
10 /Times-Roman AF
54800 4286 MT
(23)SH
11 SS 
13300 7955 MT
(Analysis of this expression as a function of data correlation)
61 W( and dogmatism is given in Section)62 W
10800 9694 MT
(2.8. Briefly)
790 W( comparing the ML MSE expression in \0502.34\051 with \0502.12\051, it can be seen that the)257 W
10800 11433 MT
(EMAP/MMSE expression has additional terms which produce a lower mean-squared error)
64 W( given the)65 W
10800 13172 MT
(same number of samples.  This reduction is the benefit of the additional computation required)
157 W( by)156 W
10800 14911 MT
(these algorithms.  As will be seen, the computational load can be lightened by)
69 W( LMS approximations)70 W
10800 16650 MT
(to the MMSE gradient implementation.)SH
12 /Times-Bold AF
10800 20334 MT
(2.6.3. The MMSE Gradient Algorithm)SH
11 /Times-Roman AF
13300 23249 MT
(Conventional LMS)
57 W( adaptive filtering is derived from MMSE parameter estimation by perform-)56 W
10800 24988 MT
(ing the estimation iteratively using a)
239 W( modified gradient search procedure, and by approximating)240 W
10800 26727 MT
(statistical averages used in the computation by their instantaneous values.)
31 W( The)
335 W( MMSE gradient algo-)30 W
10800 28466 MT
(rithm can be written as)SH
/Symbol SF
20594 30118 MT
(b)SH
604 50 20594 30428 UL
/Times-Bold SF
15200 30673 MT
(H)SH
/Times-Roman SF
17664 XM
(=)SH
/Times-Bold SF
18434 XM
(H)SH
/Symbol SF
19840 XM
(- \321)629 W
/Times-Roman SF
23143 XM
([)SH
/Times-Italic SF
(E)SH
/Times-Roman SF
({)SH
/Symbol SF
(e)SH
/Times-Roman SF
(}])SH
53143 XM
(\0502.35\051)SH
9 /Times-Italic AF
16056 31033 MT
(k+1)SH
19290 XM
(k)SH
/Times-Bold SF
22132 XM
(H)SH
7 /Times-Italic AF
22832 31358 MT
(k)SH
11 /Times-Roman AF
20621 31424 MT
(2)SH
10800 33163 MT
(where)SH
/Symbol SF
13877 XM
(b)SH
/Times-Roman SF
14872 XM
(is the step size or adaptation constant. The index)116 W
/Times-Italic SF
37544 XM
(k)SH
/Times-Roman SF
38423 XM
(is incremented after each new)
116 W( sample,)117 W
9 SS 
22836 34539 MT
(6)SH
11 SS 
10800 34902 MT
(from any class, is obtained.)SH
23836 XM
(From \0502.22\051 and \0502.23\051,)SH
/Symbol SF
15200 36679 MT
(\321)SH
/Times-Italic SF
16684 XM
(E)SH
/Times-Roman SF
({)SH
/Symbol SF
(e)SH
/Times-Roman SF
(})
150 MX(=)SH
/Symbol SF
19815 XM
(-)SH
/Times-Roman SF
(2)SH
/Symbol SF
(F)SH
/Times-Roman SF
23044 XM
(+)
150 MX(2)SH
/Symbol SF
(F)SH
/Times-Bold SF
26339 XM
(H)SH
/Times-Roman SF
53143 XM
(\0502.36\051)SH
9 /Times-Bold AF
15984 37039 MT
(H)SH
/Symbol SF
21808 XM
(am)SH
25203 XM
(aa)SH
11 /Times-Roman AF
10800 38418 MT
(so \0502.35\051 can be rewritten as)SH
/Times-Bold SF
15200 40070 MT
(H)SH
/Times-Roman SF
17664 XM
(=)
150 MX([)SH
/Times-Italic SF
(I)SH
/Symbol SF
19316 XM
(-)
150 MX(bF)SH
/Times-Roman SF
22649 XM
(])SH
/Times-Bold SF
(H)SH
/Times-Roman SF
24421 XM
(+)SH
/Symbol SF
25191 XM
(bF)SH
/Times-Roman SF
53143 XM
(\0502.37\051)SH
9 /Times-Italic AF
16056 40430 MT
(k+1)SH
/Symbol SF
21513 XM
(aa)SH
/Times-Italic SF
23871 XM
(k)SH
/Symbol SF
26634 XM
(am)SH
11 /Times-Roman AF
10800 41809 MT
(Convergence analysis of this gradient implementation is deferred to the discussion of LMS-C conver-)19 W
10800 43548 MT
(gence in the next section.)SH
13 /Times-Bold AF
10800 47299 MT
(2.7. Least Mean-Square Estimation)SH
11 /Times-Roman AF
13300 50214 MT
(In this section we develop the mathematics that enable to represent the MAP and EMAP es-)135 W
10800 51953 MT
(timates in the form of adaptive filters.  Like)
60 W( the MMSE estimate, the least mean-square mean vector)59 W
8 /Symbol AF
21702 53002 MT
(\331)SH
/Times-Italic SF
24360 53130 MT
(T)SH
11 /Times-Roman AF
10800 53692 MT
(estimate is)
145 W( of the form)146 W
/Symbol SF
21702 XM
(m)SH
/Times-Roman SF
22734 XM
(=)SH
/Times-Bold SF
23504 XM
(H)SH
/Symbol SF
24805 XM
(a)SH
/Times-Roman SF
25899 XM
(, and is derived from the MMSE gradient algorithm by replacing)146 W
9 /Times-Italic AF
22184 54052 MT
(k)SH
25499 XM
(k)SH
8 SS 
24360 54054 MT
(k)SH
9 /Times-Roman AF
45564 55068 MT
(2)SH
11 SS 
10800 55431 MT
(ensemble averages with instantaneous values.  The stochastic gradient)50 W
/Symbol SF
42406 XM
(\321)SH
44201 XM
(||e||)SH
/Times-Roman SF
46338 XM
(can be obtained from)49 W
9 /Times-Bold AF
43190 55791 MT
(H)SH
7 /Times-Italic AF
43890 56116 MT
(k)SH
11 /Times-Roman AF
10800 57170 MT
(\0502.22\051 by dropping the expected value operation, so)SH
9 SS 
18358 58684 MT
(2)SH
/Times-Italic SF
23366 XM
(T)SH
24722 XM
(T)SH
29446 XM
(T)SH
31658 XM
(T)SH
11 /Symbol AF
15200 59047 MT
(\321)SH
16995 XM
(||e||)SH
/Times-Roman SF
18958 XM
(=)SH
/Symbol SF
19728 XM
(-)SH
/Times-Roman SF
(2)SH
/Symbol SF
(\321)SH
/Times-Roman SF
22366 XM
([)SH
/Symbol SF
(m)SH
/Times-Bold SF
23866 XM
(H)SH
/Symbol SF
25222 XM
(a)SH
/Times-Roman SF
(]+)SH
/Symbol SF
(\321)SH
/Times-Roman SF
28386 XM
([)SH
/Symbol SF
(a)SH
/Times-Bold SF
29946 XM
(HH)SH
/Symbol SF
32158 XM
(a)SH
/Times-Roman SF
(])SH
53143 XM
(\0502.38\051)SH
9 /Times-Bold AF
15984 59407 MT
(H)SH
21666 XM
(H)SH
27686 XM
(H)SH
7 /Times-Italic AF
16684 59732 MT
(k)SH
9 SS 
22188 60493 MT
(T)SH
25546 XM
(T)SH
11 /Times-Roman AF
18958 60856 MT
(=)SH
/Symbol SF
19728 XM
(-)SH
/Times-Roman SF
(2)SH
/Symbol SF
(a)SH
/Times-Bold SF
(d)SH
/Times-Roman SF
22838 XM
(+)
150 MX(2)SH
/Symbol SF
(aa)SH
/Times-Bold SF
26046 XM
(H)SH
8 /Symbol AF
48139 62393 MT
(\331)SH
11 /Times-Roman AF
10800 63083 MT
(where)SH
/Times-Bold SF
13763 XM
(d)SH
/Times-Roman SF
14653 XM
(is the so-called desired signal, or the signal from which the error vector)3 W
/Symbol SF
46336 XM
(e)SH
/Times-Roman SF
47369 XM
(=)SH
/Symbol SF
48139 XM
(m)SH
49171 XM
(-)SH
/Times-Bold SF
49925 XM
(d)SH
/Times-Roman SF
51215 XM
(is derived.)3 W
9 /Times-Italic AF
46819 63443 MT
(k)SH
48621 XM
(k)SH
50537 XM
(k)SH
/Times-Roman SF
39872 64459 MT
(2)SH
11 SS 
10800 64822 MT
(Substitution of this stochastic gradient approximation of)SH
/Symbol SF
35825 XM
(\321)SH
/Times-Roman SF
37309 XM
(E{)SH
/Symbol SF
(||e||)SH
/Times-Roman SF
40322 XM
(} into Equation \0502.35\051 yields)SH
9 /Times-Bold AF
36609 65182 MT
(H)SH
/Times-Italic SF
22924 66336 MT
(T)SH
28676 XM
(T)SH
11 /Times-Bold AF
15200 66699 MT
(H)SH
/Times-Roman SF
17664 XM
(=)
150 MX([)SH
/Times-Bold SF
(I)SH
/Symbol SF
19378 XM
(-)
150 MX(ba)SH
21830 XM
(a)SH
/Times-Roman SF
23424 XM
(])SH
/Times-Bold SF
(H)SH
/Times-Roman SF
25196 XM
(+)SH
/Symbol SF
25966 XM
(ba)SH
/Times-Bold SF
27664 XM
(d)SH
/Times-Roman SF
53143 XM
(\0502.39\051)SH
9 /Times-Italic AF
16056 67059 MT
(k+1)SH
21430 XM
(k)SH
22524 XM
(k)SH
24646 XM
(k)SH
27264 XM
(k)SH
28276 XM
(k)SH
/Times-Roman SF
34842 68213 MT
(th)SH
11 SS 
10800 68576 MT
(Note that)SH
/Times-Bold SF
15138 XM
(H)SH
/Times-Roman SF
16669 XM
(is updated after the incorporation of the)SH
/Times-Italic SF
34354 XM
(k)SH
/Times-Roman SF
35817 XM
(sample into)SH
/Symbol SF
41195 XM
(a)SH
/Times-Roman SF
42289 XM
(.)SH
9 /Times-Italic AF
15994 68936 MT
(k)SH
41889 XM
(k)SH
10800 50 10800 69984 UL
8 SS 
22928 71438 MT
(C)SH
7 /Times-Roman AF
11700 71673 MT
(6)SH
9 SS 
12050 72000 MT
(The parameter)SH
/Times-Italic SF
17500 XM
(k)SH
/Times-Roman SF
18125 XM
(equals)SH
/Times-Italic SF
20650 XM
(k)SH
/Times-Roman SF
21200 XM
(=)SH
/Times-Italic SF
24151 XM
(n)SH
/Times-Roman SF
24796 XM
(.)SH
15 /Symbol AF
21858 72120 MT
(\345)SH
7 /Times-Italic AF
24601 72325 MT
(i)SH
8 SS 
22928 72362 MT
(i)SH
/Times-Roman SF
(=1)SH
ES
%%Page: 24 25
BS
0 SI
10 /Times-Roman AF
54800 4286 MT
(24)SH
11 SS 
13300 7955 MT
(As with conventional LMS adaptive filtering, it is necessary to specify several)
14 W( parameters in the)13 W
10800 9694 MT
(LMS adaptive estimate: the)
171 W( step size parameter)172 W
/Symbol SF
33108 XM
(b)SH
/Times-Roman SF
(, the desired signal)172 W
/Times-Bold SF
42923 XM
(d)SH
/Times-Roman SF
(, and the initial coefficient)172 W
10800 11433 MT
(matrix)SH
/Times-Bold SF
14159 XM
(H)SH
/Times-Roman SF
15465 XM
(. Appropriate)
699 W( choices for)212 W
/Symbol SF
28069 XM
(b)SH
/Times-Roman SF
29160 XM
(and)SH
/Times-Bold SF
31235 XM
(H)SH
/Times-Roman SF
33028 XM
(may be determined)
212 W( through analysis of the LMS)211 W
9 /Times-Italic AF
15015 11793 MT
(0)SH
32091 XM
(0)SH
11 /Times-Roman AF
10800 13172 MT
(expected coefficient error equations.  Inspection of empirical learning curves and)
35 W( a bit of insight lead)36 W
10800 14911 MT
(to a suitable choice for)SH
/Times-Bold SF
21093 XM
(d)SH
/Times-Roman SF
(.)SH
12 /Times-Bold AF
10800 18595 MT
(2.7.1. Expected LMS Coefficient Error)SH
11 /Times-Roman AF
13300 21510 MT
(Define the expected value of the coefficient matrix as)SH
/Times-Bold SF
37151 XM
(L)SH
/Times-Roman SF
38435 XM
(=)SH
/Times-Italic SF
39205 XM
(E)SH
/Times-Roman SF
([)SH
/Times-Bold SF
(H)SH
/Times-Roman SF
41499 XM
(]. Then from \0502.39\051,)SH
9 /Times-Italic AF
37885 21870 MT
(k)SH
41099 XM
(k)SH
24002 23024 MT
(T)SH
31482 XM
(T)SH
11 /Times-Bold AF
15200 23387 MT
(L)SH
/Times-Roman SF
17542 XM
(=)SH
/Times-Italic SF
18312 XM
(E)SH
/Times-Roman SF
({[)SH
/Times-Bold SF
(I)SH
/Symbol SF
20456 XM
(-)
150 MX(ba)SH
22908 XM
(a)SH
/Times-Roman SF
24502 XM
(])SH
/Times-Bold SF
(H)SH
/Times-Roman SF
26124 XM
(})
150 MX(+)SH
/Times-Italic SF
27572 XM
(E)SH
/Times-Roman SF
({)SH
/Symbol SF
(ba)SH
/Times-Bold SF
30470 XM
(d)SH
/Times-Roman SF
31982 XM
(})SH
9 /Times-Italic AF
15934 23747 MT
(k+1)SH
22508 XM
(k)SH
23602 XM
(k)SH
25724 XM
(k)SH
30070 XM
(k)SH
31082 XM
(k)SH
24002 24549 MT
(T)SH
31360 XM
(T)SH
11 /Times-Roman AF
17542 24912 MT
(=)SH
/Times-Italic SF
18312 XM
(E)SH
/Times-Roman SF
({[)SH
/Times-Bold SF
(I)SH
/Symbol SF
20456 XM
(-)
150 MX(ba)SH
22908 XM
(a)SH
/Times-Roman SF
24502 XM
(]})SH
/Times-Bold SF
(L)SH
/Times-Roman SF
26680 XM
(+)SH
/Times-Italic SF
27450 XM
(E)SH
/Times-Roman SF
({)SH
/Symbol SF
(ba)SH
/Times-Bold SF
30348 XM
(d)SH
/Times-Roman SF
31860 XM
(})SH
9 /Times-Italic AF
22508 25272 MT
(k)SH
23602 XM
(k)SH
26130 XM
(k)SH
29948 XM
(k)SH
30960 XM
(k)SH
11 /Times-Roman AF
17542 26212 MT
(=)
150 MX([)SH
/Times-Bold SF
(I)SH
/Symbol SF
19256 XM
(-)
150 MX(bF)SH
/Times-Roman SF
22589 XM
(])SH
/Times-Bold SF
(L)SH
/Times-Roman SF
24239 XM
(+)SH
/Symbol SF
25009 XM
(bF)SH
/Times-Roman SF
53143 XM
(\0502.40\051)SH
9 /Symbol AF
21453 26572 MT
(aa)SH
/Times-Italic SF
23689 XM
(k)SH
/Symbol SF
26452 XM
(am)SH
11 /Times-Roman AF
10800 27951 MT
(assuming that)80 W
/Times-Bold SF
17315 XM
(H)SH
/Times-Roman SF
18925 XM
(is independent of)79 W
/Symbol SF
27013 XM
(a)SH
/Times-Roman SF
28107 XM
(. This)
433 W( assumption is reasonable provided that the step size is)79 W
9 /Times-Italic AF
18171 28311 MT
(k)SH
27707 XM
(k)SH
11 /Times-Roman AF
10800 29690 MT
(small. For)
331 W( convenience, let the value of)28 W
/Symbol SF
28924 XM
(F)SH
/Times-Roman SF
31202 XM
(after the observation of)28 W
/Times-Italic SF
41820 XM
(k)SH
/Times-Roman SF
42611 XM
(samples be written)
28 W( as)29 W
/Times-Bold SF
52439 XM
(R)SH
/Times-Roman SF
53633 XM
(, and)29 W
9 /Symbol AF
29763 30050 MT
(aa)SH
/Times-Italic SF
53233 XM
(k)SH
11 /Times-Roman AF
10800 31429 MT
(let)SH
/Times-Bold SF
12175 XM
(P)SH
/Times-Roman SF
12997 XM
(=)SH
/Symbol SF
13767 XM
(F)SH
/Times-Roman SF
15692 XM
(. Equation)
275 W( \0502.40\051 can now be written as)SH
9 /Symbol AF
14606 31789 MT
(am)SH
11 /Times-Bold AF
15200 33081 MT
(L)SH
/Times-Roman SF
17542 XM
(=)
150 MX([)SH
/Times-Bold SF
(I)SH
/Symbol SF
19256 XM
(-)
150 MX(b)SH
/Times-Bold SF
(R)SH
/Times-Roman SF
21808 XM
(])SH
/Times-Bold SF
(L)SH
/Times-Roman SF
23458 XM
(+)SH
/Symbol SF
24228 XM
(b)SH
/Times-Bold SF
(P)SH
/Times-Roman SF
53143 XM
(\0502.41\051)SH
9 /Times-Italic AF
15934 33441 MT
(k+1)SH
21408 XM
(k)SH
22908 XM
(k)SH
8 /Symbol AF
33965 34618 MT
(*)SH
9 SS 
49742 34817 MT
(*)SH
11 /Times-Roman AF
10800 35180 MT
(Define the expected coefficient error as)85 W
/Times-Bold SF
28957 XM
(V)SH
/Times-Roman SF
30301 XM
(=)SH
/Times-Bold SF
31071 XM
(L)SH
/Symbol SF
32355 XM
(-)SH
/Times-Bold SF
33109 XM
(H)SH
/Times-Roman SF
34365 XM
(, where the time dependence of)84 W
/Times-Bold SF
48886 XM
(H)SH
/Times-Roman SF
50551 XM
(is explicitly)84 W
9 /Times-Italic AF
29751 35540 MT
(k)SH
31805 XM
(k)SH
8 SS 
33965 35542 MT
(k)SH
/Symbol SF
24816 36365 MT
(*)SH
47550 XM
(*)SH
50532 XM
(*)SH
11 /Times-Roman AF
10800 36927 MT
(shown, and)
111 W( recall that)112 W
/Times-Bold SF
21174 XM
(P)SH
/Times-Roman SF
21996 XM
(=)SH
/Times-Bold SF
22766 XM
(R)SH
23960 XM
(H)SH
/Times-Roman SF
25216 XM
(. Expressing)499 W
/Times-Bold SF
31540 XM
(P)SH
/Times-Roman SF
32599 XM
(in this fashion and subtracting)112 W
/Times-Bold SF
46694 XM
(H)SH
/Times-Roman SF
48906 XM
(+)SH
/Times-Bold SF
49676 XM
(H)SH
/Times-Roman SF
51319 XM
(from both)112 W
9 /Times-Italic AF
23560 37287 MT
(k)SH
8 SS 
24816 37289 MT
(k)SH
47550 XM
(k)SH
/Times-Roman SF
(+1)SH
/Times-Italic SF
50532 XM
(k)SH
11 /Times-Roman AF
10800 38666 MT
(sides of \0502.41\051 allows the coefficient error to be written as)SH
8 /Symbol AF
19212 40203 MT
(*)SH
27348 XM
(*)SH
11 /Times-Bold AF
15200 40765 MT
(V)SH
/Symbol SF
17602 XM
(-)SH
/Times-Bold SF
18356 XM
(H)SH
/Times-Roman SF
19762 XM
(=)
150 MX([)SH
/Times-Bold SF
(I)SH
/Symbol SF
21476 XM
(-)
150 MX(b)SH
/Times-Bold SF
(R)SH
/Times-Roman SF
24028 XM
(])SH
/Times-Bold SF
(V)SH
/Symbol SF
25738 XM
(-)SH
/Times-Bold SF
26492 XM
(H)SH
9 /Times-Italic AF
15994 41125 MT
(k+1)SH
23628 XM
(k)SH
25188 XM
(k)SH
8 SS 
19212 41127 MT
(k)SH
27348 XM
(k)SH
/Times-Roman SF
(+1)SH
/Symbol SF
25554 41950 MT
(*)SH
28520 XM
(*)SH
11 /Times-Bold AF
15200 42512 MT
(V)SH
/Times-Roman SF
17602 XM
(=)
150 MX([)SH
/Times-Bold SF
(I)SH
/Symbol SF
19316 XM
(-)
150 MX(b)SH
/Times-Bold SF
(R)SH
/Times-Roman SF
21868 XM
(])SH
/Times-Bold SF
(V)SH
/Symbol SF
23578 XM
(-)SH
/Times-Roman SF
24332 XM
(\050)SH
/Times-Bold SF
(H)SH
/Symbol SF
26910 XM
(-)SH
/Times-Bold SF
27664 XM
(H)SH
/Times-Roman SF
28920 XM
(\051)SH
53143 XM
(\0502.42\051)SH
9 /Times-Italic AF
15994 42872 MT
(k+1)SH
21468 XM
(k)SH
23028 XM
(k)SH
8 SS 
25554 42874 MT
(k)SH
/Times-Roman SF
(+1)SH
/Times-Italic SF
28520 XM
(k)SH
11 /Times-Roman AF
13300 46693 MT
(Inspection of \0502.42\051 reveals)
201 W( two aspects which preclude the expected coefficient error from)200 W
10800 48432 MT
(being expressed recursively, as is possible in conventional adaptive filtering.  One is the extra)
98 W( term)99 W
8 /Symbol AF
11656 49609 MT
(*)SH
14622 XM
(*)SH
11 /Times-Bold AF
10800 50171 MT
(H)SH
/Symbol SF
13012 XM
(-)SH
/Times-Bold SF
13766 XM
(H)SH
/Times-Roman SF
15022 XM
(, and the other is the fact)
136 W( that the correlation matrix)135 W
/Times-Bold SF
39361 XM
(R)SH
/Times-Roman SF
40965 XM
(is not constant over time.  From)135 W
9 /Times-Italic AF
40155 50531 MT
(k)SH
8 SS 
11656 50533 MT
(k)SH
/Times-Roman SF
(+1)SH
/Times-Italic SF
14622 XM
(k)SH
11 /Times-Roman AF
10800 51910 MT
(\0502.28\051,)SH
9 /Times-Italic AF
22896 53591 MT
(T)SH
8 /Symbol AF
26006 53609 MT
(-)SH
/Times-Roman SF
(1)SH
/Symbol SF
29142 XM
(-)SH
/Times-Roman SF
(1)SH
/Symbol SF
16056 53891 MT
(*)SH
19022 XM
(*)SH
11 SS 
21208 53954 MT
(-m)SH
/Times-Roman SF
23396 XM
(\050)SH
/Times-Bold SF
(M)SH
/Symbol SF
26995 XM
(-)SH
/Times-Bold SF
27749 XM
(M)SH
/Times-Roman SF
29981 XM
(\051)SH
/Symbol SF
(S)SH
8 /Times-Italic AF
24800 54299 MT
(k)SH
/Times-Roman SF
(+1)SH
/Times-Italic SF
28787 XM
(k)SH
9 SS 
22446 54314 MT
(o)SH
30998 XM
(o)SH
11 /Times-Bold AF
15200 54453 MT
(H)SH
/Symbol SF
17412 XM
(-)SH
/Times-Bold SF
18166 XM
(H)SH
/Times-Roman SF
19572 XM
(=)SH
53143 XM
(\0502.43\051)SH
8 /Times-Italic AF
16056 54815 MT
(k)SH
/Times-Roman SF
(+1)SH
/Times-Italic SF
19022 XM
(k)SH
26 /Symbol AF
20342 54887 MT
(\050)SH
31448 XM
(\051)SH
8 SS 
24912 55048 MT
(-)SH
/Times-Roman SF
(1)SH
/Symbol SF
28048 XM
(-)SH
/Times-Roman SF
(1)SH
11 SS 
22302 55393 MT
(\050)SH
/Times-Bold SF
(M)SH
/Symbol SF
25901 XM
(-)SH
/Times-Bold SF
26655 XM
(M)SH
/Times-Roman SF
28887 XM
(\051)SH
/Symbol SF
(S)SH
8 /Times-Italic AF
23706 55738 MT
(k)SH
/Times-Roman SF
(+1)SH
/Times-Italic SF
27693 XM
(k)SH
9 SS 
29904 55753 MT
(o)SH
8 /Symbol AF
19097 56839 MT
(-)SH
/Times-Roman SF
(1)SH
9 SS 
44832 57038 MT
(th)SH
11 SS 
10800 57401 MT
(where)SH
/Times-Bold SF
13924 XM
(M)SH
/Times-Roman SF
15512 XM
(=)SH
/Symbol SF
16282 XM
(S)SH
/Times-Roman SF
17533 XM
(+)SH
/Times-Bold SF
18303 XM
(N)SH
/Symbol SF
19936 XM
(S)SH
/Times-Roman SF
21025 XM
(as before.  Consider how)163 W
/Times-Bold SF
33080 XM
(M)SH
/Times-Roman SF
34957 XM
(changes after the)164 W
/Times-Italic SF
43174 XM
(k)SH
/Times-Roman SF
(+1)SH
45971 XM
(observation. Assume)603 W
9 /Times-Italic AF
14962 57761 MT
(k)SH
16933 XM
(o)SH
34118 XM
(k)SH
8 SS 
19097 57763 MT
(k)SH
11 /Times-Roman AF
10800 59140 MT
(without loss of generality that this observation is from class)95 W
/Times-Italic SF
38270 XM
(i)SH
/Times-Roman SF
(, and that)95 W
/Times-Italic SF
43199 XM
(n)SH
/Times-Roman SF
44119 XM
(samples from class)95 W
/Times-Italic SF
53049 XM
(i)SH
/Times-Roman SF
53724 XM
(have)SH
9 SS 
33329 60516 MT
(th)SH
11 SS 
10800 60879 MT
(previously been observed.  In this case, only the)90 W
/Times-Italic SF
33023 XM
(i)SH
/Times-Roman SF
34394 XM
(diagonal block in)90 W
/Times-Bold SF
42577 XM
(M)SH
/Times-Roman SF
44380 XM
(is updated by the amount)90 W
9 /Times-Italic AF
43615 61239 MT
(k)SH
8 /Times-Roman AF
11691 61998 MT
(1)SH
2183 50 10800 62373 UL
11 /Symbol AF
12983 62618 MT
(S)SH
/Times-Roman SF
13884 XM
(. When)
431 W( the dogmatism is small and/or the number of observations is large, it is obvious that)77 W
9 /Times-Italic AF
13634 62978 MT
(i)SH
8 SS 
10800 63097 MT
(n)SH
/Times-Roman SF
(\050)SH
/Times-Italic SF
(n)SH
/Times-Roman SF
(+1\051)SH
11 /Times-Bold AF
10800 64836 MT
(M)SH
/Symbol SF
13446 XM
(\273)SH
/Times-Bold SF
14200 XM
(M)SH
/Times-Roman SF
15638 XM
(, so the difference in \0502.43\051 is approximately zero and)SH
9 /Times-Italic AF
11838 65196 MT
(k+1)SH
15238 XM
(k)SH
11 /Times-Bold AF
15200 66488 MT
(V)SH
/Times-Roman SF
17602 XM
(=)
150 MX([)SH
/Times-Bold SF
(I)SH
/Symbol SF
19316 XM
(-)
150 MX(b)SH
/Times-Bold SF
(R)SH
/Times-Roman SF
21868 XM
(])SH
/Times-Bold SF
(V)SH
/Times-Roman SF
53143 XM
(\0502.44\051)SH
9 /Times-Italic AF
15994 66848 MT
(k+1)SH
21468 XM
(k)SH
23028 XM
(k)SH
8 /Symbol AF
14495 68025 MT
(*)SH
17461 XM
(*)SH
19941 XM
(-)SH
/Times-Roman SF
(1)SH
/Symbol SF
22845 XM
(-)SH
/Times-Roman SF
(1)SH
11 SS 
10800 68587 MT
(Since)SH
/Times-Bold SF
13639 XM
(H)SH
/Symbol SF
15851 XM
(-)SH
/Times-Bold SF
16605 XM
(H)SH
/Times-Roman SF
18011 XM
(=)
150 MX(\050)SH
/Times-Bold SF
(R)SH
/Symbol SF
21297 XM
(-)SH
/Times-Bold SF
22051 XM
(R)SH
/Times-Roman SF
23684 XM
(\051)SH
/Times-Bold SF
(P)SH
/Times-Roman SF
(, similar reasoning applies to)120 W
/Times-Bold SF
38276 XM
(R)SH
/Times-Roman SF
39865 XM
(which is)
120 W( therefore assumed to be a)121 W
9 /Times-Italic AF
39070 68947 MT
(k)SH
8 SS 
14495 68949 MT
(k)SH
/Times-Roman SF
(+1)SH
/Times-Italic SF
17461 XM
(k)SH
19941 XM
(k)SH
/Times-Roman SF
(+1)SH
/Times-Italic SF
22845 XM
(k)SH
11 /Times-Roman AF
10800 70326 MT
(constant)SH
/Times-Bold SF
14741 XM
(R)SH
/Times-Roman SF
(. Given)
275 W( these assumptions,)SH
/Times-Bold SF
15200 71978 MT
(V)SH
/Times-Roman SF
17602 XM
(=)
150 MX([)SH
/Times-Bold SF
(I)SH
/Symbol SF
19316 XM
(-)
150 MX(b)SH
/Times-Bold SF
(R)SH
/Times-Roman SF
(])SH
/Times-Bold SF
(V)SH
/Times-Roman SF
53143 XM
(\0502.45\051)SH
9 /Times-Italic AF
15994 72338 MT
(k+1)SH
22628 XM
(k)SH
ES
%%Page: 25 26
BS
0 SI
10 /Times-Roman AF
54800 4286 MT
(25)SH
755 50 33513 8155 UL
11 SS 
10800 9151 MT
(Rotating to principal axes using)
11 W( the transformation)10 W
/Times-Bold SF
33513 XM
(V)SH
/Times-Roman SF
34818 XM
(=)SH
/Times-Bold SF
35588 XM
(QV)SH
/Times-Roman SF
37638 XM
(, where)10 W
/Times-Bold SF
41169 XM
(Q)SH
/Times-Roman SF
42310 XM
(is the eigenvector matrix of)10 W
/Times-Bold SF
54731 XM
(R)SH
/Times-Roman SF
(,)SH
9 /Times-Italic AF
34268 9511 MT
(k)SH
37238 XM
(k)SH
11 /Times-Roman AF
10800 10890 MT
(\0502.45\051 can be expressed recursively:)SH
755 50 15200 12742 UL
755 50 22306 12742 UL
9 /Times-Italic AF
21756 13375 MT
(k)SH
11 /Times-Bold AF
15200 13738 MT
(V)SH
/Times-Roman SF
17563 XM
(=)
150 MX([)SH
/Times-Bold SF
(I)SH
/Symbol SF
19277 XM
(-)
150 MX(bL)SH
/Times-Roman SF
(])SH
/Times-Bold SF
22306 XM
(V)SH
/Times-Roman SF
53143 XM
(\0502.46\051)SH
9 /Times-Italic AF
15955 14098 MT
(k+1)SH
23061 XM
(0)SH
11 /Times-Roman AF
10800 15477 MT
(where)SH
/Symbol SF
13761 XM
(L)SH
/Times-Roman SF
14791 XM
(is the eigenvalue matrix)SH
/Times-Italic SF
25605 XM
(diag)SH
/Times-Roman SF
([)SH
/Symbol SF
(l)SH
/Times-Roman SF
28981 XM
(,)SH
/Symbol SF
29406 XM
(l)SH
/Times-Roman SF
30460 XM
(, .)
150 W( . . ,)SH
/Symbol SF
33235 XM
(l)SH
/Times-Roman SF
35089 XM
(].)SH
9 /Times-Italic AF
28531 15837 MT
(1)SH
30010 XM
(2)SH
33839 XM
(CD)SH
12 /Times-Bold AF
10800 19161 MT
(2.7.2. Selection of LMS Parameters)SH
11 SS 
10800 22058 MT
(2.7.2.1. Coefficient Matrix Initialization)SH
/Times-Roman SF
13300 24613 MT
(Appropriate choices for initialization of the coefficient matrix)137 W
/Times-Bold SF
41886 XM
(H)SH
/Times-Roman SF
43154 XM
(can be determined from the)138 W
10800 26352 MT
(expression of the expected coefficient error.  Obviously)26 W
/Times-Bold SF
35777 XM
(H)SH
/Times-Roman SF
37384 XM
(should be chosen to make)
26 W( the initial error)25 W
9 /Times-Italic AF
36633 26712 MT
(0)SH
755 50 10800 27852 UL
8 /Symbol AF
38328 28286 MT
(*)SH
11 /Times-Bold AF
10800 28848 MT
(V)SH
/Times-Roman SF
12376 XM
(as small as possible.  This can be done by setting)96 W
/Times-Bold SF
35246 XM
(H)SH
/Times-Roman SF
36702 XM
(=)SH
/Times-Bold SF
37472 XM
(H)SH
/Times-Roman SF
38728 XM
(,)SH
/Times-Italic SF
39374 XM
(i.e.)SH
/Times-Roman SF
(, the coefficients which)
96 W( would be)97 W
9 /Times-Italic AF
11555 29208 MT
(0)SH
36102 XM
(0)SH
8 /Times-Bold AF
38328 29210 MT
(I)SH
11 /Times-Roman AF
10800 30587 MT
(specified by the optimal estimate after a single sample from each class, or)SH
9 /Times-Italic AF
19376 32268 MT
(T)SH
/Symbol SF
22980 XM
(-)SH
/Times-Roman SF
(1)SH
11 /Symbol AF
18292 32631 MT
(m)SH
/Times-Roman SF
19876 XM
(\050)SH
/Symbol SF
(S)SH
/Times-Roman SF
(+)SH
/Symbol SF
(S)SH
/Times-Roman SF
22614 XM
(\051)SH
/Symbol SF
23924 XM
(S)SH
9 /Times-Italic AF
18926 32991 MT
(o)SH
22164 XM
(o)SH
11 /Times-Bold AF
15200 33130 MT
(H)SH
/Times-Roman SF
16656 XM
(=)SH
53143 XM
(\0502.47\051)SH
9 /Times-Italic AF
16056 33490 MT
(0)SH
26 /Symbol AF
17426 33564 MT
(\050)SH
24575 XM
(\051)SH
9 SS 
21963 33793 MT
(-)SH
/Times-Roman SF
(1)SH
11 SS 
18859 34156 MT
(\050)SH
/Symbol SF
(S)SH
/Times-Roman SF
(+)SH
/Symbol SF
(S)SH
/Times-Roman SF
21597 XM
(\051)SH
/Symbol SF
22907 XM
(S)SH
9 /Times-Italic AF
21147 34516 MT
(o)SH
23558 XM
(o)SH
11 /Times-Roman AF
10800 35895 MT
(This choice incorporates more knowledge of the structure of the data into the LMS-C estimate)
90 W( than)89 W
10800 37634 MT
(initializing)SH
/Times-Bold SF
15961 XM
(H)SH
/Times-Roman SF
17660 XM
(to zero or)
118 W( an identity matrix.  In empirical simulations \050see Section 2.8\051 this choice)119 W
9 /Times-Italic AF
16817 37994 MT
(0)SH
11 /Times-Roman AF
10800 39373 MT
(often reduces the initial mean square error to levels)
67 W( lower than that of the EMAP estimate.  Also, in)66 W
10800 41112 MT
(simulations of data conditions with)
95 W( large dogmatism which violate assumptions in this analysis, the)96 W
10800 42851 MT
(LMS estimate tends to diverge.)SH
/Times-Bold SF
10800 45748 MT
(2.7.2.2. Step-Size)SH
/Times-Roman SF
13300 48303 MT
(In the adaptive filtering)
63 W( literature, the step size)62 W
/Symbol SF
34600 XM
(b)SH
/Times-Roman SF
35541 XM
(is often a constant which is inversely propor-)62 W
10800 50042 MT
(tional to)14 W
/Symbol SF
14740 XM
(l)SH
/Times-Roman SF
16994 XM
(+)SH
/Symbol SF
17764 XM
(l)SH
/Times-Roman SF
19718 XM
(, where {)15 W
/Symbol SF
(l)SH
/Times-Roman SF
24641 XM
(} are the eigenvalues of the \050constant\051 data correlation matrix.  For the)15 W
9 /Times-Italic AF
15344 50402 MT
(max)SH
18368 XM
(min)SH
24391 XM
(i)SH
11 /Times-Roman AF
10800 51781 MT
(multivariate parameter estimation problem considered here, the correlation matrix)46 W
/Times-Bold SF
47562 XM
(R)SH
/Times-Roman SF
49077 XM
(is not constant,)46 W
9 /Times-Italic AF
48356 52141 MT
(k)SH
11 /Times-Roman AF
10800 53520 MT
(and this time dependence must be dealt with to ensure)
187 W( stability over time.  The coefficient error)188 W
10800 55259 MT
(analysis above showed that)90 W
/Times-Bold SF
23440 XM
(R)SH
/Times-Roman SF
24999 XM
(changes slowly over time, but this change may be)
90 W( significant over a)89 W
9 /Times-Italic AF
24234 55619 MT
(k)SH
/Symbol SF
30948 56635 MT
(-)SH
/Times-Roman SF
(1)SH
/Times-Italic SF
35631 XM
(T)SH
11 /Times-Roman AF
10800 56998 MT
(large number of iterations.  Since)47 W
/Times-Bold SF
26019 XM
(R)SH
/Times-Roman SF
27363 XM
(=)SH
/Symbol SF
28133 XM
(S)SH
/Times-Roman SF
29384 XM
(+)SH
/Times-Bold SF
30154 XM
(N)SH
/Symbol SF
31892 XM
(S)SH
/Times-Roman SF
32693 XM
(+)SH
/Symbol SF
33463 XM
(m)SH
34547 XM
(m)SH
/Times-Roman SF
36131 XM
(, the)
47 W( range of)48 W
/Times-Bold SF
42399 XM
(R)SH
/Times-Roman SF
43916 XM
(as)SH
/Times-Bold SF
45155 XM
(N)SH
/Times-Roman SF
46272 XM
(increases from)48 W
/Times-Bold SF
53086 XM
(I)SH
/Times-Roman SF
53837 XM
(to)SH
/Symbol SF
55016 XM
(\245)SH
9 /Times-Italic AF
26813 57358 MT
(k)SH
28784 XM
(o)SH
34097 XM
(o)SH
35181 XM
(o)SH
43193 XM
(k)SH
19706 58374 MT
(T)SH
28243 XM
(T)SH
11 /Times-Roman AF
10800 58737 MT
(is)SH
/Times-Bold SF
11882 XM
(R)SH
/Times-Roman SF
13176 XM
(=)SH
/Symbol SF
13946 XM
(S)SH
/Times-Roman SF
15197 XM
(+)SH
/Symbol SF
15967 XM
(S)SH
/Times-Roman SF
16768 XM
(+)SH
/Symbol SF
17538 XM
(m)SH
18622 XM
(m)SH
/Times-Roman SF
20554 XM
(to R)73 W
23284 XM
(=)SH
/Symbol SF
24054 XM
(S)SH
/Times-Roman SF
25305 XM
(+)SH
/Symbol SF
26075 XM
(m)SH
27159 XM
(m)SH
/Times-Roman SF
28743 XM
(. Due)
421 W( to the positive definite nature)
73 W( of correlation matrices,)72 W
9 /Times-Bold AF
12676 59097 MT
(I)SH
/Times-Italic SF
14597 XM
(o)SH
18172 XM
(o)SH
19256 XM
(o)SH
/Symbol SF
22492 XM
(\245)SH
/Times-Italic SF
24705 XM
(o)SH
26709 XM
(o)SH
27793 XM
(o)SH
11 /Times-Roman AF
10800 60476 MT
(all the eigenvalues of)265 W
/Times-Bold SF
21513 XM
(R)SH
/Times-Roman SF
23248 XM
(are positive, and \050since the trace equals the sum of the eigenvalues\051)266 W
9 /Times-Italic AF
22307 60836 MT
(k)SH
11 SS 
10800 62215 MT
(tr)SH
/Times-Roman SF
([)SH
/Times-Bold SF
(R)SH
/Times-Roman SF
13094 XM
(])SH
/Symbol SF
13760 XM
(\263 l)25 W
/Times-Roman SF
17543 XM
(+)SH
/Symbol SF
18313 XM
(l)SH
/Times-Roman SF
20892 XM
(. With)
527 W( these facts)
252 W( in mind,)251 W
/Symbol SF
34530 XM
(b)SH
/Times-Roman SF
35660 XM
(was chosen to be inversely proportional to)251 W
9 /Times-Italic AF
12694 62575 MT
(k)SH
15268 XM
(k,max)SH
18917 XM
(k,min)SH
11 SS 
10800 63954 MT
(tr)SH
/Times-Roman SF
([)SH
/Times-Bold SF
(R)SH
/Times-Roman SF
13044 XM
(])
150 MX(+)SH
/Times-Italic SF
14330 XM
(tr)SH
/Times-Roman SF
([)SH
/Times-Bold SF
(R)SH
/Times-Roman SF
16866 XM
(], and specifically)SH
9 /Times-Bold AF
12694 64314 MT
(I)SH
/Symbol SF
16224 XM
(\245)SH
11 /Times-Roman AF
22055 65606 MT
(2)SH
11212 50 16724 66047 UL
/Symbol SF
15200 66292 MT
(b)SH
/Times-Roman SF
15954 XM
(=)SH
53143 XM
(\0502.48\051)SH
9 /Times-Italic AF
22563 66905 MT
(T)SH
11 /Times-Roman AF
16724 67268 MT
(2)SH
/Times-Italic SF
(tr)SH
/Times-Roman SF
([)SH
/Symbol SF
(S)SH
/Times-Roman SF
19625 XM
(+)SH
/Symbol SF
20395 XM
(m)SH
21479 XM
(m)SH
/Times-Roman SF
23063 XM
(])
150 MX(+)SH
/Times-Italic SF
24349 XM
(tr)SH
/Times-Roman SF
([)SH
/Symbol SF
(S)SH
/Times-Roman SF
(])
150 MX(+)
150 MX(2)SH
9 /Times-Italic AF
19025 67628 MT
(o)SH
21029 XM
(o)SH
22113 XM
(o)SH
11 /Times-Roman AF
10800 69007 MT
(Using the traces)
32 W( instead of the sums of the maximum and minimum eigenvalues may make)33 W
/Symbol SF
51650 XM
(b)SH
/Times-Roman SF
52562 XM
(smaller)SH
10800 70746 MT
(than necessary, but this choice proved to be sufficient)
117 W( for convergence in empirical tests with both)116 W
10800 72485 MT
(computer-generated and real data.)SH
ES
%%Page: 26 27
BS
0 SI
10 /Times-Roman AF
54800 4286 MT
(26)SH
11 SS 
1020 1000 0 18000 27600 GB 
%%BeginDocument: /usr0/rozzi/Documentation/PhDThesis/Chapter2/LMSWMLMEAN.eps
%!PS-Adobe-2.0 EPSF-1.2
%%Creator:Rozzi
%%Title:f1.ps
%%Origin:0 720
%%BoundingBox: 0.000 0.000 300.000 200.000
%%EndComments

gsave

%some definitions necessary for Macintosh graphs
/gm{exch moveto} def
/gr{setgray} def
/lin {exch lineto}def   % y x
/myashow{1. -1. scale ashow 1. -1. scale} def
/myshow{1. -1. scale show 1. -1. scale} def
/myshowrotate{1. -1. scale 90 rotate show  -90 rotate 1. -1. scale} def

% flip the coordinate system
%-100.  490.000 translate
%1. -1. scale
-20.  268.000 translate
0.92 -0.92 scale
/Times-Roman findfont  10.0 scalefont setfont

% legend
120 100 gm
(ML) myshow
197 100 gm
(EMAP) myshow
160 100 gm
(LMS) myshow
282 245 gm
(Number of samples) myshow
165 37 gm
(Normalized MSE) myshowrotate

% the graph
0 gr
1.0 setlinewidth
258 69 gm
0 gr
258 322 lin
99 322 lin
99 69 lin
258 69 lin
261 44 gm
(0.00)myshow
219 69 gm
0 gr
219 74 lin
219 317 gm
219 322 lin
222 44 gm
0.33335 0.(0.05)myashow
179 69 gm
0 gr
179 74 lin
179 317 gm
179 322 lin
182 44 gm
0.5 0.(0.10)myashow
139 69 gm
0 gr
139 74 lin
139 317 gm
139 322 lin
142 44 gm
0.33335 0.(0.15)myashow
102 44 gm
0.5 0.(0.20)myashow
271 66 gm
(0)myshow
258 120 gm
0 gr
255 120 lin
103 120 gm
99 120 lin
271 114 gm
(10)myshow
258 170 gm
0 gr
255 170 lin
103 170 gm
99 170 lin
271 164 gm
(20)myshow
258 221 gm
0 gr
255 221 lin
103 221 gm
99 221 lin
271 215 gm
(30)myshow
258 271 gm
0 gr
255 271 lin
103 271 gm
99 271 lin
271 265 gm
(40)myshow
271 316 gm
(50)myshow
stroke
234 74 gm
0.0 gr
1.5 setlinewidth
203 79 lin
175 84 lin
162 89 lin
153 94 lin
147 99 lin
145 104 lin
141 109 lin
139 115 lin
139 120 lin
138 125 lin
136 130 lin
134 135 lin
134 140 lin
133 145 lin
133 150 lin
136 155 lin
139 160 lin
140 165 lin
141 170 lin
141 175 lin
144 180 lin
145 185 lin
146 190 lin
146 195 lin
150 201 lin
153 206 lin
154 211 lin
155 216 lin
156 221 lin
157 226 lin
158 231 lin
158 236 lin
160 241 lin
161 246 lin
160 251 lin
160 256 lin
161 261 lin
161 266 lin
162 271 lin
163 276 lin
163 282 lin
163 287 lin
164 292 lin
164 297 lin
166 302 lin
166 307 lin
167 312 lin
168 317 lin
168 322 lin
stroke
0.33 gr
1.5 setlinewidth
202 74 gm
202 78 lin
202 82 lin
202 84 lin
202 86 lin
203 90 lin
203 94 lin
203 94 lin
203 98 lin
203 99 lin
204 102 lin
207 107 lin
208 109 lin
208 112 lin
208 116 lin
208 120 lin
208 120 lin
208 124 lin
208 125 lin
208 128 lin
208 132 lin
208 135 lin
208 136 lin
208 140 lin
207 144 lin
207 148 lin
207 150 lin
208 152 lin
209 157 lin
210 160 lin
210 161 lin
210 165 lin
210 169 lin
210 173 lin
210 175 lin
210 177 lin
210 181 lin
210 185 lin
210 185 lin
211 189 lin
211 190 lin
211 193 lin
211 197 lin
211 201 lin
211 201 lin
212 205 lin
212 206 lin
211 209 lin
211 213 lin
211 216 lin
211 217 lin
211 221 lin
211 225 lin
211 229 lin
211 231 lin
211 233 lin
211 237 lin
212 241 lin
212 241 lin
212 245 lin
212 246 lin
211 249 lin
211 253 lin
211 256 lin
211 257 lin
211 261 lin
211 265 lin
212 269 lin
212 271 lin
212 273 lin
212 277 lin
212 281 lin
212 285 lin
212 287 lin
212 289 lin
212 293 lin
213 297 lin
213 297 lin
214 301 lin
214 302 lin
214 305 lin
214 309 lin
214 312 lin
214 313 lin
215 317 lin
215 321 lin
stroke
0.67 gr
1.5 setlinewidth
117 74 gm
117 74 lin
117 78 lin
117 78 lin
114 80 lin
114 80 lin
110 81 lin
110 81 lin
106 82 lin
106 82 lin
102 84 lin
102 84 lin
104 85 lin
104 85 lin
108 86 lin
108 86 lin
112 87 lin
112 87 lin
116 89 lin
116 89 lin
118 92 lin
118 92 lin
119 96 lin
119 96 lin
123 101 lin
123 101 lin
127 104 lin
127 104 lin
128 108 lin
128 108 lin
129 112 lin
129 112 lin
129 116 lin
129 116 lin
131 121 lin
131 121 lin
131 125 lin
131 125 lin
130 129 lin
130 129 lin
130 133 lin
130 133 lin
131 137 lin
131 137 lin
132 142 lin
132 142 lin
132 146 lin
132 146 lin
131 150 lin
131 150 lin
135 153 lin
135 153 lin
139 155 lin
139 155 lin
143 160 lin
143 160 lin
142 164 lin
142 164 lin
143 168 lin
143 168 lin
143 172 lin
143 172 lin
144 176 lin
144 176 lin
147 181 lin
147 181 lin
148 185 lin
148 185 lin
148 189 lin
148 189 lin
148 193 lin
148 193 lin
149 197 lin
149 197 lin
152 201 lin
152 201 lin
156 206 lin
156 206 lin
155 210 lin
155 210 lin
156 214 lin
156 214 lin
157 218 lin
157 218 lin
158 223 lin
158 223 lin
159 227 lin
159 227 lin
159 231 lin
159 231 lin
159 235 lin
159 235 lin
160 239 lin
160 239 lin
161 244 lin
161 244 lin
161 248 lin
161 248 lin
161 252 lin
161 252 lin
160 256 lin
160 256 lin
162 261 lin
162 261 lin
162 265 lin
162 265 lin
163 269 lin
163 269 lin
164 274 lin
164 274 lin
164 278 lin
164 278 lin
164 282 lin
164 282 lin
164 286 lin
164 286 lin
165 290 lin
165 290 lin
166 295 lin
166 295 lin
167 299 lin
167 299 lin
169 304 lin
169 304 lin
169 308 lin
169 308 lin
169 312 lin
169 312 lin
171 317 lin
171 317 lin
171 321 lin
171 321 lin
stroke
grestore
%%EOF


%%EndDocument
 GE /Times-Bold SF
15370 29352 MT
(Figure 2-5:)SH
/Times-Roman SF
21143 XM
(Mean-square error vs. number of samples for ML, EMAP, and LMS)SH
25050 30548 MT
(\050with)SH
/Times-Bold SF
27647 XM
(d)SH
/Times-Roman SF
28534 XM
(=)SH
/Times-Bold SF
29429 XM
(a)SH
/Times-Roman SF
(\051 estimates for a 2-class, 1-feature case.)SH
/Times-Bold SF
10800 33445 MT
(2.7.2.3. Desired Signal)SH
/Times-Roman SF
13300 36000 MT
(Since the output of the LMS)
114 W( estimator is driven toward the desired signal)115 W
/Times-Bold SF
47327 XM
(d)SH
/Times-Roman SF
(, selection of this)115 W
10800 37739 MT
(signal is crucial for estimation accuracy.  The true mean vector)114 W
/Symbol SF
40030 XM
(m)SH
/Times-Roman SF
41053 XM
(is the best)
114 W( choice for)113 W
/Times-Bold SF
50997 XM
(d)SH
/Times-Roman SF
(, but it is)113 W
10800 39478 MT
(obviously unavailable.  Some estimate of the)
16 W( true mean, one that does not require excessive computa-)17 W
10800 41217 MT
(tion, must be used in its place.  Using)46 W
/Times-Bold SF
27989 XM
(d)SH
/Times-Roman SF
29151 XM
(=)SH
/Times-Bold SF
29921 XM
(a)SH
/Times-Roman SF
31192 XM
(allows the LMS estimate to)
46 W( asymptotically converge to)45 W
9 /Times-Italic AF
28601 41577 MT
(k)SH
30471 XM
(k)SH
11 /Times-Roman AF
10800 42956 MT
(the sample mean, as does the MAP estimate, but the error is often larger than what is desirable.  This)34 W
10800 44695 MT
(behavior is illustrated in Figure 2-5 which shows the MSE \050normalized by the magnitude of the true)63 W
10800 46434 MT
(mean)SH
/Symbol SF
13500 XM
(m)SH
/Times-Roman SF
(\051 versus number of adaptation samples.  It is possible to reduce)43 W
/Symbol SF
42601 XM
(b)SH
/Times-Roman SF
43524 XM
(to slow the LMS estimate's)44 W
10800 48173 MT
(convergence with the sample)
97 W( mean, but this inhibits the estimate from quickly recovering when the)96 W
10800 49912 MT
(initial error is high.)SH
13300 52897 MT
(An alternative choice which does not require much computation is to form)29 W
/Times-Bold SF
46700 XM
(d)SH
/Times-Roman SF
47616 XM
(as a)
29 W( weighted sum)30 W
10800 54636 MT
(of the)147 W
/Times-Italic SF
13904 XM
(a priori)147 W
/Times-Roman SF
17865 XM
(mean and sample mean.  The weights can be derived from the EMAP estimate by)146 W
10800 56375 MT
(replacing)SH
/Times-Bold SF
15167 XM
(N)SH
/Times-Roman SF
16236 XM
(with a fixed matrix)SH
/Times-Bold SF
24912 XM
(N)SH
/Times-Roman SF
26106 XM
(, or)SH
9 /Times-Italic AF
25706 56735 MT
(c)SH
/Symbol SF
22081 57889 MT
(-)SH
/Times-Roman SF
(1)SH
/Symbol SF
30728 XM
(-)SH
/Times-Roman SF
(1)SH
11 /Times-Bold AF
15200 58252 MT
(d)SH
/Times-Roman SF
16362 XM
(=)SH
/Symbol SF
17132 XM
(S)SH
/Times-Roman SF
(\050)SH
/Symbol SF
(S)SH
/Times-Roman SF
(+)SH
/Times-Bold SF
(N)SH
/Symbol SF
20614 XM
(S)SH
/Times-Roman SF
21715 XM
(\051)SH
/Symbol SF
23025 XM
(m)SH
/Times-Roman SF
24259 XM
(+)SH
/Symbol SF
25029 XM
(S)SH
/Times-Roman SF
26130 XM
(\050)SH
/Symbol SF
(S)SH
/Times-Roman SF
27297 XM
(+)SH
/Times-Bold SF
28067 XM
(N)SH
/Symbol SF
29261 XM
(S)SH
/Times-Roman SF
30362 XM
(\051)SH
/Times-Bold SF
31672 XM
(N)SH
/Times-Italic SF
32866 XM
(a)SH
/Times-Roman SF
53143 XM
(\0502.49\051)SH
9 /Times-Italic AF
15812 58612 MT
(k)SH
20214 XM
(c)SH
21265 XM
(o)SH
23659 XM
(o)SH
25680 XM
(o)SH
28861 XM
(c)SH
29912 XM
(o)SH
32466 XM
(c)SH
33416 XM
(k)SH
11 /Times-Roman AF
16362 59552 MT
(=)SH
/Times-Bold SF
17132 XM
(c)SH
/Times-Roman SF
18220 XM
(+)SH
/Times-Bold SF
18990 XM
(C)SH
20234 XM
(a)SH
9 /Times-Italic AF
17620 59912 MT
(1)SH
19784 XM
(2)SH
20784 XM
(k)SH
17926 60714 MT
(T)SH
11 /Times-Roman AF
16362 61077 MT
(=)SH
/Times-Bold SF
17132 XM
(C)SH
/Symbol SF
18426 XM
(a)SH
9 /Times-Italic AF
19120 61437 MT
(k)SH
11 /Times-Roman AF
10800 62816 MT
(where)SH
/Times-Bold SF
13802 XM
(N)SH
/Times-Roman SF
15312 XM
(=)SH
/Symbol SF
16248 XM
(h)SH
/Times-Bold SF
(I)SH
/Times-Roman SF
17656 XM
(and)SH
/Symbol SF
19561 XM
(h)SH
/Times-Roman SF
20541 XM
(is a constant.  This choice for)42 W
/Times-Bold SF
34031 XM
(d)SH
/Times-Roman SF
34960 XM
(is referred to as the CEMAP \050constant-EMAP\051)42 W
9 /Times-Italic AF
14596 63176 MT
(c)SH
11 /Times-Roman AF
10800 64555 MT
(estimate. The)
631 W( weights for)178 W
/Symbol SF
23420 XM
(m)SH
/Times-Roman SF
24957 XM
(and)SH
/Times-Bold SF
26998 XM
(a)SH
/Times-Roman SF
28401 XM
(in \0502.49\051 are those which would be specified in the EMAP)177 W
9 /Times-Italic AF
24054 64915 MT
(o)SH
27548 XM
(k)SH
11 /Times-Roman AF
10800 66294 MT
(procedure if)114 W
/Symbol SF
16646 XM
(h)SH
/Times-Roman SF
17698 XM
(samples had been obtained from each class.  The reasoning)
114 W( behind this choice is as)115 W
10800 68033 MT
(follows. Inspection)
484 W( of \0502.19\051 shows that only)104 W
/Times-Bold SF
31919 XM
(N)SH
/Times-Roman SF
33092 XM
(and)SH
/Times-Bold SF
35059 XM
(a)SH
/Times-Roman SF
35988 XM
(change with each iteration.  If)104 W
/Times-Bold SF
50019 XM
(N)SH
/Times-Roman SF
51192 XM
(is fixed to)104 W
10800 69772 MT
(some value)104 W
/Times-Bold SF
16263 XM
(N)SH
/Times-Roman SF
17457 XM
(, then the CEMAP mean becomes a constant vector plus a constant matrix times the)105 W
9 /Times-Italic AF
17057 70132 MT
(c)SH
11 /Times-Roman AF
10800 71511 MT
(sample mean which, when)167 W
/Times-Bold SF
23411 XM
(N)SH
/Times-Roman SF
24355 XM
(=)SH
/Times-Bold SF
25125 XM
(N)SH
/Times-Roman SF
26319 XM
(, is)167 W
/Times-Italic SF
28212 XM
(identical)SH
/Times-Roman SF
32504 XM
(to the EMAP estimate.  From)
167 W( the coefficient error)166 W
9 /Times-Italic AF
25919 71871 MT
(c)SH
ES
%%Page: 27 28
BS
0 SI
10 /Times-Roman AF
54800 4286 MT
(27)SH
11 SS 
10800 7955 MT
(analysis above, it is seen that the optimal coefficients change slowly when)
38 W( the dogmatism of the data)39 W
10800 9694 MT
(is small, so the CEMAP estimate should be a reasonably close approximation for a)
50 W( fairly wide range)49 W
10800 11433 MT
(of observations around this point.  The concept)
110 W( of the CEMAP estimate is illustrated in Figure 2-6)111 W
10800 13172 MT
(which shows the EMAP)
11 W( and CEMAP MSE as a function of the number of samples.  The two learning)10 W
10800 14911 MT
(curves intersect at the)
249 W( point when)250 W
/Times-Bold SF
27325 XM
(N)SH
/Times-Roman SF
28269 XM
(=)SH
/Times-Bold SF
29039 XM
(N)SH
/Times-Roman SF
30233 XM
(. The)
775 W( position of this intersection is specified by the)250 W
9 /Times-Italic AF
29833 15271 MT
(c)SH
11 /Times-Roman AF
10800 16650 MT
(parameter)SH
/Symbol SF
15544 XM
(h)SH
/Times-Roman SF
(. The)
420 W( LMS estimate using \0502.49\051 as the desired signal is referred to as LMS-C, and has)72 W
10800 18389 MT
(shown in simulation to perform as)
57 W( well or better than the EMAP estimate \050see Section 2.8\051.  It does,)58 W
10800 20128 MT
(however, have a finite misadjustment as will be seen in the next section.)SH
765 1000 0 18000 40143 GB 
%%BeginDocument: /usr0/rozzi/Documentation/PhDThesis/Chapter2/CEMAPConcept.eps
%!PS-Adobe-2.0 EPSF-1.2
%%BoundingBox: 0 0 400 246
%%Creator: Mathematica
%%Title: Clipboard
%%CreationDate: Never Never
%%EndComments
50 dict begin
/Mnodistort true def
/pageDashArray [4] def
/nullDashArray [] def

% Compute the minimum of two numbers.
/Mmin {         % p q Mmin min(p,q)
        2 copy          % p q p q
        gt              % p q p>q?
        { exch } if     % min(p,q) max(p,q)
        pop             % min(p,q)
} bind def


% Compute the maximum of two numbers.
/Mmax {         % p q Mmax max(p,q)
        2 copy          % p q p q
        lt              % p q p<q?
        { exch } if     % max(p,q) min(p,q)
        pop             % max(p,q)
} bind def

/Mpstart {
    MathPictureStart
} bind def
/Mpend {
    MathPictureEnd
} bind def
/Mscale {
    0 1 0 1
    5 -1 roll
    MathScale
} bind def
/Plain
        /Courier findfont
def
/Bold
        /Courier-Bold findfont
def
/Italic
        /Courier-Oblique findfont
def
/MathPictureStart {
        gsave
        newpath
        /Mtmatrix
        matrix currentmatrix
        def
        Plain
        Mfontsize scalefont
        setfont
0 setgray 0 setlinewidth
} bind def
/MathPictureEnd {
        grestore
} bind def
/Mdot {
        moveto
        0 0 rlineto
        stroke
} def
/Mtetra {
        moveto
        lineto
        lineto
        lineto
        fill
} def
/Metetra {
        moveto
        lineto
        lineto
        lineto
        closepath
        gsave
        fill
        grestore
        0 setgray
        stroke
} def
/Mistroke {
        flattenpath
        0 0 0
        {
        4 2 roll
        pop pop
        }
        {
        4 -1 roll
        2 index
        sub dup mul
        4 -1 roll
        2 index
        sub dup mul
        add sqrt
        4 -1 roll
        add
        3 1 roll
        }
        {
        stop
        }
        {
        stop
        }
        pathforall
        pop pop
        currentpoint
        stroke
        moveto
        currentdash
        3 -1 roll
        add
        setdash
} def
/Mfstroke {
        stroke
        currentdash
        pop 0
        setdash
} def
/Msboxa {
        newpath
        5 -1 roll
        Mvboxa
        pop
        6 -1 roll
        5 -1 roll
        4 -1 roll
        Msboxa1
        5 -3 roll
        Msboxa1
        [
        7 -2 roll
        [ 2 index 2 index
        10 -1 roll
        9 -1 roll
        ]
        6 1 roll
        5 -2 roll
        ]
} bind def
        
/Msboxa1 {
        sub
        2 div
        dup
        2 index
        1 add
        mul
        3 -1 roll
        -1 add
        3 -1 roll
        mul
} bind def
/Mvboxa {
        gsave
        newpath
        [ true
        3 -1 roll
        {
        Mbbox
        5 -1 roll
        {
        0
        5 1 roll
        }
        {
        7 -1 roll
        exch sub
        (m) stringwidth pop
        .3 mul
        sub
        7 1 roll
        6 -1 roll
        4 -1 roll
        Mmin
        3 -1 roll
        5 index
        add
        5 -1 roll
        4 -1 roll
        Mmax
        4 -1 roll
        }
        ifelse
        false
        }
        forall
        { stop } if
        counttomark
        1 add
        4 roll
        ]
        grestore
} bind def
/Mbbox {
        0 0 moveto
        false charpath
        flattenpath
        pathbbox
        newpath
} bind def
/Mmin {
        2 copy
        gt
        { exch } if
        pop
} bind def
/Mmax {
        2 copy
        lt
        { exch } if
        pop
} bind def
/Mshowa {
        4 -2 roll
        moveto
        2 index
        Mtmatrix setmatrix
        Mvboxa
        7 1 roll
        6 -1 roll
        5 -1 roll
        4 -1 roll
        Mshowa1
        4 1 roll
        Mshowa1
        rmoveto
        currentpoint
        0 1
        4 index length
        -1 add
        {
        2 index
        4 index
        2 index
        get
        3 index
        add
        moveto
        4 index
        exch get
        show
        } for
        pop pop pop pop
        Mgmatrix setmatrix
} bind def
/Mshowa1 {
        2 copy
        add
        4 1 roll
        sub
        mul
        sub
        -2 div
} bind def
/MathScale {
        Mwidth
        Mheight
        Mlp
        translate
        scale
        /Mgmatrix
        matrix currentmatrix
        def
        /Msaveaa exch def
        /Msavebb exch def
        /Msavecc exch def
        /Msavedd exch def
} bind def
/Mlp {
        3 copy
        Mlpfirst
        {
        Mnodistort
        {
        Mmin
        dup
        } if
        4 index
        2 index
        2 index
        Mlprun
        11 index
        11 -1 roll
        10 -4 roll
        Mlp1
        8 index
        9 -5 roll
        Mlp1
        4 -1 roll
        and
        { exit } if
        3 -1 roll
        pop pop
        } loop
        exch
        3 1 roll
        7 -3 roll
        pop pop pop
} bind def
/Mlpfirst {
        3 -1 roll
        dup length
        2 copy
        -2 add
        get
        aload
        pop pop pop
        4 -2 roll
        -1 add
        get
        aload
        pop pop pop
        6 -1 roll
        3 -1 roll
        5 -1 roll
        sub
        dup /MsaveAx exch def
        div
        4 1 roll
        exch sub
        dup /MsaveAy exch def
        div
} bind def
/Mlprun {
        2 copy
        4 index
        0 get
        dup
        4 1 roll
        Mlprun1
        3 copy
        8 -2 roll
        9 -1 roll
        {
        3 copy
        Mlprun1
        3 copy
        11 -3 roll
        /gt Mlpminmax
        8 3 roll
        11 -3 roll
        /lt Mlpminmax
        8 3 roll
        } forall
        pop pop pop pop
        3 1 roll
        pop pop
        aload pop
        5 -1 roll
        aload pop
        exch
        6 -1 roll
        Mlprun2
        8 2 roll
        4 -1 roll
        Mlprun2
        6 2 roll
        3 -1 roll
        Mlprun2
        4 2 roll
        exch
        Mlprun2
        6 2 roll
} bind def
/Mlprun1 {
        aload pop
        exch
        6 -1 roll
        5 -1 roll
        mul add
        4 -2 roll
        mul
        3 -1 roll
        add
} bind def
/Mlprun2 {
        2 copy
        add 2 div
        3 1 roll
        exch sub
} bind def
/Mlpminmax {
        cvx
        2 index
        6 index
        2 index
        exec
        {
        7 -3 roll
        4 -1 roll
        } if
        1 index
        5 index
        3 -1 roll
        exec
        {
        4 1 roll
        pop
        5 -1 roll
        aload
        pop pop
        4 -1 roll
        aload pop
        [
        8 -2 roll
        pop
        5 -2 roll
        pop
        6 -2 roll
        pop
        5 -1 roll
        ]
        4 1 roll
        pop
        }
        {
        pop pop pop
        } ifelse
} bind def
/Mlp1 {
        5 index
        3 index sub
        5 index
        2 index mul
        1 index
        le
        1 index
        0 le
        or
        dup
        not
        {
        1 index
        3 index div
        .99999 mul
        8 -1 roll
        pop
        7 1 roll
        }
        if
        8 -1 roll
        2 div
        7 -2 roll
        pop sub
        5 index
        6 -3 roll
        pop pop
        mul sub
        exch
} bind def
/Mfontsize      12 def
/Mleft          0.000000 def
/Mbottom        246.000000 def
/Mwidth         400.000000 def
/Mheight        246.000000 def
/Courier findfont 12 scalefont setfont
%!
%%Creator: Mathematica
%%AspectRatio: 0.61803 
MathPictureStart
% Scaling calculations
0.02381 0.02381 0.01472 1.18269 [
[(10)] 0.2619 0.00222 0 1 Msboxa
[(20)] 0.5 0.00222 0 1 Msboxa
[(30)] 0.7381 0.00222 0 1 Msboxa
[(40)] 0.97619 0.00222 0 1 Msboxa
[(0.1)] 0.01131 0.13298 1 0 Msboxa
[(0.2)] 0.01131 0.25125 1 0 Msboxa
[(0.3)] 0.01131 0.36952 1 0 Msboxa
[(0.4)] 0.01131 0.48779 1 0 Msboxa
[(0.5)] 0.01131 0.60606 1 0 Msboxa
[ -0.001 -0.001 0 0 ]
[ 1.001 0.61903 0 0 ]
] MathScale
% Start of Graphics
1 setlinecap
1 setlinejoin
newpath
%%Object: Graphics
[ ] 0 setdash
0 setgray
gsave
gsave
0.002 setlinewidth
0 0.01472 moveto
1 0.01472 lineto
stroke
0.2619 0.00847 moveto
0.2619 0.02097 lineto
stroke
0 setgray
[(10)] 0.2619 0.00222 0 1 Mshowa
0.5 0.00847 moveto
0.5 0.02097 lineto
stroke
0 setgray
[(20)] 0.5 0.00222 0 1 Mshowa
0.7381 0.00847 moveto
0.7381 0.02097 lineto
stroke
0 setgray
[(EMAP)] 0.7381 0.06022 0 1 Mshowa
[(CEMAP)] 0.7381 0.13222 0 1 Mshowa
[(30)] 0.7381 0.00222 0 1 Mshowa
0.97619 0.00847 moveto
0.97619 0.02097 lineto
stroke
0 setgray
[(40)] 0.97619 0.00222 0 1 Mshowa
0.02381 0 moveto
0.02381 0.61803 lineto
stroke
0.01756 0.13298 moveto
0.03006 0.13298 lineto
stroke
0 setgray
[(0.1)] 0.01131 0.13298 1 0 Mshowa
0.01756 0.25125 moveto
0.03006 0.25125 lineto
stroke
0 setgray
[(0.2)] 0.01131 0.25125 1 0 Mshowa
0.01756 0.36952 moveto
0.03006 0.36952 lineto
stroke
0 setgray
[(0.3)] 0.01131 0.36952 1 0 Mshowa
0.01756 0.48779 moveto
0.03006 0.48779 lineto
stroke
0 setgray
[(0.4)] 0.01131 0.48779 1 0 Mshowa
0.01756 0.60606 moveto
0.03006 0.60606 lineto
stroke
0 setgray
[(0.5)] 0.01131 0.60606 1 0 Mshowa
grestore
grestore
0 0 moveto
1 0 lineto
1 0.618034 lineto
0 0.618034 lineto
closepath
clip
newpath
0 setgray
gsave
gsave
gsave
0.004 setlinewidth
0.33 setgray
0.04762 0.33123 moveto
0.06696 0.29515 lineto
0.08631 0.26705 lineto
0.10565 0.24446 lineto
0.125 0.22584 lineto
0.16369 0.19686 lineto
0.20238 0.17522 lineto
0.24107 0.15839 lineto
0.27976 0.14487 lineto
0.31845 0.13376 lineto
0.35714 0.12445 lineto
0.39583 0.11652 lineto
0.43452 0.10969 lineto
0.47321 0.10374 lineto
0.5119 0.0985 lineto
0.5506 0.09386 lineto
0.58929 0.08971 lineto
0.62798 0.08598 lineto
0.66667 0.0826 lineto
0.70536 0.07954 lineto
0.74405 0.07674 lineto
0.78274 0.07418 lineto
0.82143 0.07182 lineto
0.86012 0.06965 lineto
0.89881 0.06763 lineto
0.9375 0.06576 lineto
0.97619 0.06402 lineto
stroke
grestore
grestore
gsave
gsave
0.0 setgray
0.004 setlinewidth
0.04762 0.89139 moveto
0.05246 0.75246 lineto
0.05729 0.65366 lineto
0.06213 0.5798 lineto
0.06696 0.5225 lineto
0.0718 0.47674 lineto
0.07664 0.43937 lineto
0.08631 0.38196 lineto
0.09598 0.33995 lineto
0.10565 0.30787 lineto
0.11533 0.28256 lineto
0.125 0.2621 lineto
0.14435 0.23102 lineto
0.16369 0.20854 lineto
0.18304 0.19153 lineto
0.20238 0.17819 lineto
0.22173 0.16747 lineto
0.24107 0.15865 lineto
0.27976 0.14502 lineto
0.31845 0.13497 lineto
0.35714 0.12725 lineto
0.39583 0.12114 lineto
0.43452 0.11618 lineto
0.47321 0.11207 lineto
0.5119 0.10861 lineto
0.5506 0.10567 lineto
0.58929 0.10312 lineto
0.62798 0.1009 lineto
0.66667 0.09895 lineto
0.70536 0.09722 lineto
0.74405 0.09568 lineto
0.78274 0.09429 lineto
0.82143 0.09304 lineto
0.86012 0.0919 lineto
0.89881 0.09086 lineto
0.9375 0.08992 lineto
0.97619 0.08904 lineto
stroke
grestore
grestore
grestore
% End of Graphics
MathPictureEnd
%%EPS Trailer
end

%%EndDocument
 GE /Times-Bold SF
11977 41895 MT
(Figure 2-6:)SH
/Times-Roman SF
17750 XM
(EMAP and CEMAP mean-square error vs. number of training samples with)SH
/Symbol SF
51414 XM
(h)SH
/Times-Roman SF
52352 XM
(= 10.)SH
12 /Times-Bold AF
10800 45579 MT
(2.7.3. Asymptotic Mean-Square Error of the LMS-C Estimate)SH
11 /Times-Roman AF
13300 48494 MT
(The gradient-based parameter estimation algorithms)
188 W( \050Gradient MMSE and LMS-C\051 define a)187 W
10800 50233 MT
(method of searching a time-varying)
115 W( performance surface for a time-varying optimal solution.  This)116 W
10800 51972 MT
(behavior is illustrated in Figure 2-7, which shows a time-varying performance surface)
210 W( at several)209 W
10800 53711 MT
(instants in time, and the corresponding learning curve which is observed.)
55 W( Note)
387 W( that the minimum of)56 W
10800 55450 MT
(the performance surface migrates across)
126 W( the coefficient \050horizontal\051 axis as well as down the MSE)125 W
10800 57189 MT
(\050vertical\051 axis. The coefficient values at the minimum points are the coefficients)
66 W( which are specified)67 W
10800 58928 MT
(by the EMAP algorithm.  The EMAP)
42 W( algorithm theoretically tracks these points exactly, producing a)41 W
10800 60667 MT
(smoothly decaying learning curve.)
232 W( The)
741 W( gradient algorithms, on the other hand, must iteratively)233 W
10800 62406 MT
(search for the minimums as indicated by the zigzag line on the left.  Only)
105 W( one point on the perfor-)104 W
10800 64145 MT
(mance surface for time)60 W
/Times-Italic SF
21422 XM
(k)SH
/Times-Roman SF
22060 XM
(=)SH
/Times-Italic SF
22830 XM
(k)SH
/Times-Roman SF
24053 XM
(is visited, and the MSE at that point defines the MSE at time)61 W
/Times-Italic SF
51796 XM
(k)SH
/Times-Roman SF
53020 XM
(on the)61 W
8 /Times-Italic AF
23318 64490 MT
(o)SH
52284 XM
(o)SH
11 /Times-Roman AF
10800 65884 MT
(learning curve.)SH
13300 68869 MT
(In the steady state, the)
105 W( optimal solution converges to the minimum of the steady state surface)104 W
10800 70608 MT
(\050)SH
/Times-Italic SF
(k)SH
/Times-Roman SF
11804 XM
(=)SH
/Symbol SF
12574 XM
(\245)SH
/Times-Roman SF
(\051. Due)
299 W( to the)
12 W( stochastic nature of the LMS-C algorithms gradient search, this solution continues)13 W
ES
%%Page: 28 29
BS
0 SI
10 /Times-Roman AF
54800 4286 MT
(28)SH
11 SS 
593 1000 0 11700 23626 GB 
%%BeginDocument: /usr0/rozzi/Documentation/PhDThesis/Chapter2/TVS3.eps
%!PS-Adobe-2.0 EPSF-2.0
%%Title: 
%%Creator: TopDraw
%%CreationDate: Sat Apr 13 14:00:43 1991
%%For: rozzi
%%DocumentFonts: (atend)
%%%Pages: 0 1
%%BoundingBox: 0 0 728 277
%%EndComments

%%BeginDocument: /usr/lib/NextStep/printPackage.ps
%!PS-Adobe-2.0
%%Title: Printing Package
%%EndComments
%Version: 2.0
%Copyright: 1988, NeXT, Inc.

/__NXdef{1 index where{pop pop pop}{def}ifelse}bind def
/__NXbdef{1 index where{pop pop pop}{bind def}ifelse}bind def
/UserObjects 10 array __NXdef
/defineuserobject{
        exch dup 1 add dup UserObjects length gt{
                array dup 0 UserObjects putinterval
                /UserObjects exch def
        }{pop}ifelse UserObjects exch 3 -1 roll put
}__NXbdef
/undefineuserobject{UserObjects exch null put}__NXbdef
/execuserobject{UserObjects exch get exec}__NXbdef
/__NXRectPath{4 2 roll moveto 1 index 0 rlineto
0 exch rlineto neg 0 rlineto closepath}__NXbdef
/__NXProcessRectArgs{
        1 index type /arraytype eq{
                exch 0 4 2 index length 1 sub{
                        dup 3 add 1 exch{1 index exch get exch}for
                        5 1 roll 5 index exec
                }for pop pop
        }{exec}ifelse
}__NXbdef
/rectfill{gsave newpath {__NXRectPath fill} __NXProcessRectArgs grestore}__NXbdef
/rectclip{newpath {__NXRectPath} __NXProcessRectArgs clip newpath}__NXbdef
/rectstroke{
        gsave newpath dup type /arraytype eq{dup length 6 eq}{false}ifelse{
                {gsave __NXRectPath null concat stroke grestore}
                dup length array cvx copy dup 2 4 -1 roll put __NXProcessRectArgs
        }{{__NXRectPath stroke} __NXProcessRectArgs}ifelse grestore
}__NXbdef
/xyshow{
        0 1 3 index length 1 sub{
                currentpoint 4 index 3 index 1 getinterval show
                3 index 3 index 2 mul 1 add get add exch
                3 index 3 index 2 mul get add exch moveto pop
        }for pop pop
}__NXbdef
/xshow{
        0 1 3 index length 1 sub{
                currentpoint 4 index 3 index 1 getinterval show
                exch 3 index 3 index get add exch moveto pop
        }for pop pop
}__NXbdef
/yshow{
        0 1 3 index length 1 sub{
                currentpoint 4 index 3 index 1 getinterval show
                3 index 3 index get add moveto pop
        }for pop pop
}__NXbdef
/arct{arcto pop pop pop pop}__NXbdef
/setbbox{pop pop pop pop}__NXbdef
/ucache{}__NXbdef
/ucachestatus{mark 0 0 0 0 0}__NXbdef
/setucacheparams{cleartomark}__NXbdef
/uappend{systemdict begin cvx exec end}__NXbdef
/ueofill{gsave newpath uappend eofill grestore}__NXbdef
/ufill{gsave newpath uappend fill grestore}__NXbdef
/ustroke{
        gsave newpath dup length 6 eq
        {exch uappend concat}{uappend}ifelse
        stroke grestore
}__NXbdef
/__NXustrokepathMatrix dup where {pop pop}{matrix def}ifelse
/ustrokepath{
        newpath dup length 6 eq{
                exch uappend __NXustrokepathMatrix currentmatrix exch concat
                strokepath setmatrix
        }{uappend strokepath}ifelse
} __NXbdef
/upath{
        [exch {/ucache cvx}if pathbbox /setbbox cvx
         {/moveto cvx}{/lineto cvx}{/curveto cvx}{/closepath cvx}pathforall]cvx
} __NXbdef
/setstrokeadjust{pop}__NXbdef
/currentstrokeadjust{false}__NXbdef
/selectfont{exch findfont exch
dup type /arraytype eq {makefont}{scalefont}ifelse setfont}__NXbdef
/_NXCombineArrays{
        counttomark dup 2 add index dup length 3 -1 roll {
                2 index length sub dup 4 1 roll 1 index exch 4 -1 roll putinterval exch
        }repeat pop pop pop
}__NXbdef
/setcmykcolor{
        1.0 exch sub dup dup 6 -1 roll
        sub dup 0 lt{pop 0}if 5 1 roll
        4 -1 roll sub dup 0 lt{pop 0}if 3 1 roll
        exch sub dup 0 lt{pop 0}if setrgbcolor
}__NXbdef
/currentcmykcolor{currentrgbcolor 3{1.0 exch sub 3 1 roll}repeat 0}__NXbdef
/flushgraphics{}def
/setwindowtype{pop pop}def
/currentwindowtype{pop 0}def
/setalpha{pop}def
/currentalpha{1.0}def
/hidecursor{}def
/obscurecursor{}def
/revealcursor{}def
/setcursor{4 {pop}repeat}bind def
/showcursor{}def
/NextStepEncoding where not{
/NextStepEncoding StandardEncoding 256 array copy def
0 [129/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/Ccedilla/Egrave
/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex/Idieresis
/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis/Ugrave/Uacute
/Ucircumflex/Udieresis/Yacute/Thorn/mu/multiply/divide/copyright
176/registered 181/brokenbar 190/logicalnot 192/onesuperior 201/twosuperior
204/threesuperior 209/plusminus/onequarter/onehalf/threequarters/agrave
/aacute/acircumflex/atilde/adieresis/aring/ccedilla/egrave/eacute
/ecircumflex/edieresis/igrave 226/iacute 228/icircumflex/idieresis/eth
/ntilde 236/ograve/oacute/ocircumflex/otilde/odieresis 242/ugrave/uacute
/ucircumflex 246/udieresis/yacute 252/thorn/ydieresis]
{dup type /nametype eq
 {NextStepEncoding 2 index 2 index put pop 1 add}{exch pop}ifelse
}forall pop
/NextStepEncoding NextStepEncoding readonly def   
/_NXfstr 128 string dup 0 (_NX) putinterval def   
/findfont{
 % Because we can never let NextStepEncoding get into
 % SharedFontDirectory, we cannot reencode a font to NextStepEncoding
 % if we are in shared mode.  So if currentshared is true,
 % we call the normal findfont and return that
 /currentshared where {pop currentshared} {false} ifelse
 {//findfont exec}
 {dup _NXfstr 3 125 getinterval cvs length 3 add _NXfstr 0 3 -1 roll
  getinterval cvn exch FontDirectory 2 index known 
  {pop FontDirectory exch get}
  {//findfont exec dup /Encoding get StandardEncoding eq
   {    dup length dict exch
        {1 index /FID ne {2 index 3 1 roll put}{pop pop}ifelse}forall
         dup /Encoding NextStepEncoding put definefont
        }{exch pop} ifelse
   }ifelse
 }ifelse
}bind def
}{pop}ifelse
/_NXProcArray 5 array __NXdef
/_NXChannels 0 __NXdef
/_NXTotalBytes 0 __NXdef
/_NXDoImageOp{
        1 index{dup}{1}ifelse /_NXChannels exch store
        _NXChannels 2 add 2 roll _NXProcArray 0 _NXChannels getinterval astore pop
        5 index 4 index mul 2 index{1 sub 8 idiv 1 add mul}{mul 1 sub 8 idiv 1 add}ifelse
        4 index mul /_NXTotalBytes exch store pop exch pop
        gsave matrix invertmatrix concat 0.5 setgray 0 0 4 2 roll rectfill grestore
        {       0 1 _NXChannels 1 sub{
                        _NXProcArray exch get exec
                        length _NXTotalBytes exch sub /_NXTotalBytes exch store}for
                _NXTotalBytes 0 le{exit}if
        }loop /_NXProcArray 5 array def
}__NXbdef
/colorimage{_NXDoImageOp}__NXbdef
/alphaimage{1 add _NXDoImageOp}def
%%EndDocument

gsave
 /__NXbasematrix matrix currentmatrix def
grestore
%%EndProlog
%%BeginSetup
/TopDrawDict 200 dict def
/xyshow {
    mark exch aload length -2 2 {
        2 roll
    } for counttomark dup 2 add -1 roll pop 1 add -1 roll gsave {
        pop pop grestore rmoveto gsave
    } exch kshow grestore rmoveto
} bind def /currentalpha {
    1
} def /setalpha {
    pop
} bind def
TopDrawDict begin /prt_stack {
    (***Top of Stack\012) print pstack (---Bottom of Stack\012) print flush
} def /prt_top {
    (top item of stack) == dup == flush
} def /prtmat matrix def /prt_ctm {
    (current transformation matrix: ) print prtmat currentmatrix == flush
} def /tmmat matrix def /obmat matrix def /strmat matrix def /pgmat matrix def /idmat matrix def /sc1mt matrix def /sc2mt matrix def /sc3mt matrix def /sc4mt matrix def /sc5mt matrix def /sc6mt matrix def /sc7mt matrix def /inmat matrix def /ctmmt matrix def /octmmt matrix def /clpmt matrix def /weglet_mat matrix def /crlinw 1 def crlinw setlinewidth /crlinjn 0 def crlinjn setlinejoin /crlincp 0 def crlincp setlinecap /crmtrlmt currentmiterlimit def /crstrpat 0 def /crfilpat 0 def /crflat currentflat def /dftflat currentflat def /strinclr false def /crlingry 0 def /crlinred 0 def /crlingrn 0 def /crlinblu 0 def /crlinalph 1 def /filinclr false def /crfilgry 0 def /crfilred 0 def /crfilgrn 0 def /crfilblu 0 def /crfilalph 1 def /crfilstyl 0 def /txtdraw true def /txtinclr false def /txtwpat false def /txtwittrans false def /crtxtgry 0 def /crtxtred 0 def /crtxtgrn 0 def /crtxtblu 0 def /crtxtalph 1 def /crtxtpat 0 def /txlndraw true def /txlninclr false def /txlnwpat false def /txlnwittrans false def /crtxlngry 0 def /crtxlnred 0 def /crtxlngrn 0 def /crtxlnblu 0 def /crtxlnalph 1 def /crtxlnpat 0 def /hilittxt false def /strdsh [2 2] def /dshpatoff 0 def /usedash false def /filwpat false def /strwpat false def /filwittrans false def /strwittrans false def /crfrtarw false def /crendarw false def /rsave 0 def /esave 0 def /sslsave 0 def /lsave 0 def /clpsave 0 def /pathsave 0 def /tpatstr 10 string def /ptdist {
    sub dup mul 3 1 roll sub dup mul add sqrt
} bind def /dodrawctm {
    octmmt currentmatrix pop idmat obmat concatmatrix ctmmt currentmatrix sc1mt concatmatrix setmatrix
} bind def /undrawctm {
    obmat inmat invertmatrix ctmmt currentmatrix sc1mt concatmatrix setmatrix
} bind def /undrawmat {
    obmat aload pop 7 -1 roll astore
} bind def /unpagectm {
    octmmt setmatrix
} bind def /unpagemat {
    pgmat aload pop 7 -1 roll astore
} bind def /drtan {
    gsave 1 setalpha 0 setlinewidth 0.333333 setgray moveto lineto stroke grestore
} bind def /drdgrdln {
    gsave 1 setalpha 0 setlinewidth [1 2] 0 setdash setgray moveto lineto stroke grestore
} bind def /drgrdln {
    gsave 1 setalpha 0 setlinewidth setgray moveto lineto stroke grestore
} bind def end
TopDrawDict begin /TDeps_dict 20 dict def TDeps_dict begin /showpage {
    
} def /copypage {
    
} def /grestoreall {
    
} def /erasepage {
    
} def /nulldevice {
    
} def /exitserver {
    
} def /initgraphics {
    
} def /renderbands {
    
} def /initmatrix {
    
} def /banddevice {
    
} def /setpageparams {
    
} def /framedevice {
    
} def /note {
    
} def end end
TopDrawDict begin /rpath {
    newpath moveto dup 0 exch rlineto exch 0 rlineto 0 exch neg rlineto closepath
} bind def /rfpath {
    /rad3 exch def /hh3 exch def /ww3 exch def /yy1 exch def /xx1 exch def /xx2 xx1 ww3 add def /yy2 yy1 hh3 add def ww3 0.5 mul rad3 lt {
        /rad3 ww3 0.5 mul def
    } if hh3 0.5 mul rad3 lt {
        /rad3 hh3 0.5 mul def
    } if newpath xx1 yy1 hh3 0.5 mul add moveto xx1 yy2 xx2 yy2 rad3 arcto 4 {
        pop
    } repeat xx2 yy2 xx2 yy1 rad3 arcto 4 {
        pop
    } repeat xx2 yy1 xx1 yy1 rad3 arcto 4 {
        pop
    } repeat xx1 yy1 xx1 yy2 rad3 arcto 4 {
        pop
    } repeat closepath
} bind def /rfill {
    gsave dodrawctm crfilalph setalpha filinclr {
        crfilred crfilgrn crfilblu setrgbcolor
    } {
        crfilgry setgray
    } ifelse filwpat {
        4 2 roll rpath crfilpat findfont filwittrans {
            trpatfil
        } {
            oppatfil
        } ifelse
    } {
        rectfill
    } ifelse grestore
} bind def /rstroke {
    gsave dodrawctm crlinalph setalpha crlinw setlinewidth crlincp setlinecap crlinjn setlinejoin crmtrlmt setmiterlimit usedash {
        strdsh dshpatoff setdash
    } if strinclr {
        crlinred crlingrn crlinblu setrgbcolor
    } {
        crlingry setgray
    } ifelse 4 2 roll rpath unpagectm concat strwpat {
        crstrpat findfont strwittrans {
            trpatstrk
        } {
            oppatstrk
        } ifelse
    } {
        stroke
    } ifelse grestore
} bind def /mkrpath {
    dodrawctm rpath unpagectm
} bind def end
TopDrawDict begin /p1x 0 def /p1y 0 def /p2x 0 def /p2y 0 def /ssl {
    gsave dodrawctm crfrtarw crendarw or {
        /p1y 1 index def /p1x 2 index def /p2y 1 index 4 index add def /p2x 2 index 5 index add def newpath moveto rlineto
    } {
        newpath moveto rlineto
    } ifelse crlinalph setalpha crlinw setlinewidth crlincp setlinecap usedash {
        strdsh dshpatoff setdash
    } if strinclr {
        crlinred crlingrn crlinblu setrgbcolor
    } {
        crlingry setgray
    } ifelse aload pop strmat astore crfrtarw {
        currentlinewidth strmat p2x p2y p1x p1y arow
    } if crendarw {
        currentlinewidth strmat p1x p1y p2x p2y arow
    } if unpagectm concat strwpat {
        crstrpat findfont strwittrans {
            trpatstrk
        } {
            oppatstrk
        } ifelse
    } {
        stroke
    } ifelse grestore
} bind def end
TopDrawDict begin /closedspl false def /nspans 0 def /sstrt {
    gsave dodrawctm /closedspl exch def /nspans 0 def newpath
} bind def /sstrtpath {
    dodrawctm /closedspl exch def /nspans 0 def newpath
} bind def /sadd {
    nspans 0 eq {
        moveto
    } {
        pop pop
    } ifelse curveto /nspans nspans 1 add def
} bind def /splstroke {
    nspans 0 gt {
        unpagectm concat closedspl {
            closepath
        } if crlincp setlinecap crlinjn setlinejoin crlinalph setalpha crlinw setlinewidth crmtrlmt setmiterlimit usedash {
            strdsh dshpatoff setdash
        } if strinclr {
            crlinred crlingrn crlinblu setrgbcolor
        } {
            crlingry setgray
        } ifelse strwpat {
            flattenpath crstrpat findfont strwittrans {
                trpatstrk
            } {
                oppatstrk
            } ifelse
        } {
            stroke
        } ifelse
    } {
        pop
    } ifelse grestore
} bind def /splfill {
    nspans 0 gt {
        closedspl {
            closepath
        } if crfilalph setalpha filinclr {
            crfilred crfilgrn crfilblu setrgbcolor
        } {
            crfilgry setgray
        } ifelse filwpat {
            flattenpath crfilpat findfont crfilstyl 0 eq {
                filwittrans {
                    trpateofil
                } {
                    oppateofil
                } ifelse
            } {
                filwittrans {
                    trpatfil
                } {
                    oppatfil
                } ifelse
            } ifelse
        } {
            crfilstyl 0 eq {
                eofill
            } {
                fill
            } ifelse
        } ifelse
    } if grestore
} bind def /mksplpath {
    nspans 0 gt {
        closedspl {
            closepath
        } if
    } if
} bind def end
TopDrawDict begin /dotx {
    gsave txtdraw {
        concat selectfont txtinclr {
            crtxtred crtxtgrn crtxtblu setrgbcolor
        } {
            crtxtgry setgray
        } ifelse crtxtalph setalpha moveto xyshow
    } {
        pop pop pop pop pop pop pop
    } ifelse grestore
} bind def /txtlin {
    gsave txlndraw {
        concat txlninclr {
            crtxlnred crtxlngrn crtxlnblu setrgbcolor
        } {
            crtxlngry setgray
        } ifelse crtxlnalph setalpha setlinewidth 0 setlinecap newpath moveto 0 rlineto stroke
    } {
        pop pop pop pop pop
    } ifelse grestore
} bind def end
%%EndSetup
gsave
0 0 728 277 rectclip
-30 -48 translate
30 48 728 277 rectclip
gsave
TopDrawDict begin
/invpats true def
/crlincp 0 def
/crlinjn 0 def
/crmtrlmt 10 def
/crlinw 0.8 def
/crlinalph 1 def
/crlinred 0 def /crlingrn 0 def /crlinblu 0 def /strinclr true def
/crfilalph 1 def
/crfilred 1 def /crfilgrn 1 def /crfilblu 1 def /filinclr true def
/filwpat false def
TopDrawDict /piddict known TopDrawDict /ipiddict known or {
    1 getpat /crfilpat exch def
} if
/filwittrans false def
/strwpat false def
TopDrawDict /piddict known TopDrawDict /ipiddict known or {
    1 getpat /crstrpat exch def
} if
/strwittrans false def
/usedash false def
/strdsh [2 4] def /dshpatoff 0 def
/crendarw false def
/crfrtarw false def
/txtdraw false def
/crtxtalph 1 def
/crtxtred 0 def /crtxtgrn 0 def /crtxtblu 0 def /txtinclr true def
/txtwpat false def
/txtwittrans false def
/txlndraw false def
/crtxlnalph 1 def
/crtxlnred 0 def /crtxlngrn 0 def /crtxlnblu 0 def /txlninclr true def
/txlnwittrans false def
/txlnwpat false def
/crlinw 1 def
gsave clpmt currentmatrix pop newpath
401 250 15.5 19 [0.785536 0 0 1.1 18.824165 28.100004] mkrpath
clip
newpath
clpmt setmatrix
gsave
/epssave save def TDeps_dict begin userdict begin
[0.753333 0 0 0.932143 43.536667 12.65535] dodrawctm
-48.499985 46.499969 translate
%%BeginFile: /tmp/topdraw_eps_331_36
%!PS-Adobe-2.0 EPSF-1.2
%%BoundingBox: 0 0 450 280
%%Creator: Mathematica
%%Title: Clipboard
%%CreationDate: Never Never
%%EndComments
50 dict begin
/Mnodistort true def
/pageDashArray [4] def
/nullDashArray [] def

% Compute the minimum of two numbers.
/Mmin {         % p q Mmin min(p,q)
        2 copy          % p q p q
        gt              % p q p>q?
        { exch } if     % min(p,q) max(p,q)
        pop             % min(p,q)
} bind def


% Compute the maximum of two numbers.
/Mmax {         % p q Mmax max(p,q)
        2 copy          % p q p q
        lt              % p q p<q?
        { exch } if     % max(p,q) min(p,q)
        pop             % max(p,q)
} bind def

/Mpstart {
    MathPictureStart
} bind def
/Mpend {
    MathPictureEnd
} bind def
/Mscale {
    0 1 0 1
    5 -1 roll
    MathScale
} bind def
/Plain
        /Courier findfont
def
/Bold
        /Courier-Bold findfont
def
/Italic
        /Courier-Oblique findfont
def
/MathPictureStart {
        gsave
        newpath
        /Mtmatrix
        matrix currentmatrix
        def
        Plain
        Mfontsize scalefont
        setfont
0 setgray 0 setlinewidth
} bind def
/MathPictureEnd {
        grestore
} bind def
/Mdot {
        moveto
        0 0 rlineto
        stroke
} def
/Mtetra {
        moveto
        lineto
        lineto
        lineto
        fill
} def
/Metetra {
        moveto
        lineto
        lineto
        lineto
        closepath
        gsave
        fill
        grestore
        0 setgray
        stroke
} def
/Mistroke {
        flattenpath
        0 0 0
        {
        4 2 roll
        pop pop
        }
        {
        4 -1 roll
        2 index
        sub dup mul
        4 -1 roll
        2 index
        sub dup mul
        add sqrt
        4 -1 roll
        add
        3 1 roll
        }
        {
        stop
        }
        {
        stop
        }
        pathforall
        pop pop
        currentpoint
        stroke
        moveto
        currentdash
        3 -1 roll
        add
        setdash
} def
/Mfstroke {
        stroke
        currentdash
        pop 0
        setdash
} def
/Msboxa {
        newpath
        5 -1 roll
        Mvboxa
        pop
        6 -1 roll
        5 -1 roll
        4 -1 roll
        Msboxa1
        5 -3 roll
        Msboxa1
        [
        7 -2 roll
        [ 2 index 2 index
        10 -1 roll
        9 -1 roll
        ]
        6 1 roll
        5 -2 roll
        ]
} bind def
        
/Msboxa1 {
        sub
        2 div
        dup
        2 index
        1 add
        mul
        3 -1 roll
        -1 add
        3 -1 roll
        mul
} bind def
/Mvboxa {
        gsave
        newpath
        [ true
        3 -1 roll
        {
        Mbbox
        5 -1 roll
        {
        0
        5 1 roll
        }
        {
        7 -1 roll
        exch sub
        (m) stringwidth pop
        .3 mul
        sub
        7 1 roll
        6 -1 roll
        4 -1 roll
        Mmin
        3 -1 roll
        5 index
        add
        5 -1 roll
        4 -1 roll
        Mmax
        4 -1 roll
        }
        ifelse
        false
        }
        forall
        { stop } if
        counttomark
        1 add
        4 roll
        ]
        grestore
} bind def
/Mbbox {
        0 0 moveto
        false charpath
        flattenpath
        pathbbox
        newpath
} bind def
/Mmin {
        2 copy
        gt
        { exch } if
        pop
} bind def
/Mmax {
        2 copy
        lt
        { exch } if
        pop
} bind def
/Mshowa {
        4 -2 roll
        moveto
        2 index
        Mtmatrix setmatrix
        Mvboxa
        7 1 roll
        6 -1 roll
        5 -1 roll
        4 -1 roll
        Mshowa1
        4 1 roll
        Mshowa1
        rmoveto
        currentpoint
        0 1
        4 index length
        -1 add
        {
        2 index
        4 index
        2 index
        get
        3 index
        add
        moveto
        4 index
        exch get
        show
        } for
        pop pop pop pop
        Mgmatrix setmatrix
} bind def
/Mshowa1 {
        2 copy
        add
        4 1 roll
        sub
        mul
        sub
        -2 div
} bind def
/MathScale {
        Mwidth
        Mheight
        Mlp
        translate
        scale
        /Mgmatrix
        matrix currentmatrix
        def
        /Msaveaa exch def
        /Msavebb exch def
        /Msavecc exch def
        /Msavedd exch def
} bind def
/Mlp {
        3 copy
        Mlpfirst
        {
        Mnodistort
        {
        Mmin
        dup
        } if
        4 index
        2 index
        2 index
        Mlprun
        11 index
        11 -1 roll
        10 -4 roll
        Mlp1
        8 index
        9 -5 roll
        Mlp1
        4 -1 roll
        and
        { exit } if
        3 -1 roll
        pop pop
        } loop
        exch
        3 1 roll
        7 -3 roll
        pop pop pop
} bind def
/Mlpfirst {
        3 -1 roll
        dup length
        2 copy
        -2 add
        get
        aload
        pop pop pop
        4 -2 roll
        -1 add
        get
        aload
        pop pop pop
        6 -1 roll
        3 -1 roll
        5 -1 roll
        sub
        dup /MsaveAx exch def
        div
        4 1 roll
        exch sub
        dup /MsaveAy exch def
        div
} bind def
/Mlprun {
        2 copy
        4 index
        0 get
        dup
        4 1 roll
        Mlprun1
        3 copy
        8 -2 roll
        9 -1 roll
        {
        3 copy
        Mlprun1
        3 copy
        11 -3 roll
        /gt Mlpminmax
        8 3 roll
        11 -3 roll
        /lt Mlpminmax
        8 3 roll
        } forall
        pop pop pop pop
        3 1 roll
        pop pop
        aload pop
        5 -1 roll
        aload pop
        exch
        6 -1 roll
        Mlprun2
        8 2 roll
        4 -1 roll
        Mlprun2
        6 2 roll
        3 -1 roll
        Mlprun2
        4 2 roll
        exch
        Mlprun2
        6 2 roll
} bind def
/Mlprun1 {
        aload pop
        exch
        6 -1 roll
        5 -1 roll
        mul add
        4 -2 roll
        mul
        3 -1 roll
        add
} bind def
/Mlprun2 {
        2 copy
        add 2 div
        3 1 roll
        exch sub
} bind def
/Mlpminmax {
        cvx
        2 index
        6 index
        2 index
        exec
        {
        7 -3 roll
        4 -1 roll
        } if
        1 index
        5 index
        3 -1 roll
        exec
        {
        4 1 roll
        pop
        5 -1 roll
        aload
        pop pop
        4 -1 roll
        aload pop
        [
        8 -2 roll
        pop
        5 -2 roll
        pop
        6 -2 roll
        pop
        5 -1 roll
        ]
        4 1 roll
        pop
        }
        {
        pop pop pop
        } ifelse
} bind def
/Mlp1 {
        5 index
        3 index sub
        5 index
        2 index mul
        1 index
        le
        1 index
        0 le
        or
        dup
        not
        {
        1 index
        3 index div
        .99999 mul
        8 -1 roll
        pop
        7 1 roll
        }
        if
        8 -1 roll
        2 div
        7 -2 roll
        pop sub
        5 index
        6 -3 roll
        pop pop
        mul sub
        exch
} bind def
/Mfontsize      12 def
/Mleft          0.000000 def
/Mbottom        280.000000 def
/Mwidth         450.000000 def
/Mheight        280.000000 def
/Courier findfont 12 scalefont setfont
%!
%%Creator: Mathematica
%%AspectRatio: 0.61803 
MathPictureStart
% Scaling calculations
-0.16667 0.66667 0 0.15451 [
[(0.4)] 0.1 -0.0125 0 1 Msboxa
[(0.6)] 0.23333 -0.0125 0 1 Msboxa
[(0.8)] 0.36667 -0.0125 0 1 Msboxa
[(1.2)] 0.63333 -0.0125 0 1 Msboxa
[(1.4)] 0.76667 -0.0125 0 1 Msboxa
[(1.6)] 0.9 -0.0125 0 1 Msboxa
[(h1)] 1.00625 0 -1 0 Msboxa
[(0.5)] 0.4875 0.07725 1 0 Msboxa
[(1)] 0.4875 0.15451 1 0 Msboxa
[(1.5)] 0.4875 0.23176 1 0 Msboxa
[(2)] 0.4875 0.30902 1 0 Msboxa
[(2.5)] 0.4875 0.38627 1 0 Msboxa
[(3)] 0.4875 0.46353 1 0 Msboxa
[(3.5)] 0.4875 0.54078 1 0 Msboxa
[(4)] 0.4875 0.61803 1 0 Msboxa
[(MSE)] 0.5 0.62428 0 -1 Msboxa
[ -0.001 -0.00725 0 0 ]
[ 1.001 0.61903 0 0 ]
] MathScale
% Start of Graphics
1 setlinecap
1 setlinejoin
newpath
%%Object: Graphics
[ ] 0 setdash
0 setgray
gsave
gsave
0.002 setlinewidth
0 0 moveto
1 0 lineto
stroke
0.1 -0.00625 moveto
0.1 0.00625 lineto
stroke
0 setgray
[(0.4)] 0.1 -0.0125 0 1 Mshowa
0.23333 -0.00625 moveto
0.23333 0.00625 lineto
stroke
0 setgray
[(0.6)] 0.23333 -0.0125 0 1 Mshowa
0.36667 -0.00625 moveto
0.36667 0.00625 lineto
stroke
0 setgray
[(0.8)] 0.36667 -0.0125 0 1 Mshowa
0.63333 -0.00625 moveto
0.63333 0.00625 lineto
stroke
0 setgray
[(1.2)] 0.63333 -0.0125 0 1 Mshowa
0.76667 -0.00625 moveto
0.76667 0.00625 lineto
stroke
0 setgray
[(1.4)] 0.76667 -0.0125 0 1 Mshowa
0.9 -0.00625 moveto
0.9 0.00625 lineto
stroke
0 setgray
0.5 -0.00625 moveto
0.5 0.00625 lineto
stroke
[(1.0)] 0.5 -0.0125 0 1 Mshowa
[(1.6)] 0.9 -0.0125 0 1 Mshowa
0 setgray
[(h1)] 1.00625 0 -1 0 Mshowa
0.5 0 moveto
0.5 0.61803 lineto
stroke
0.49375 0.07725 moveto
0.50625 0.07725 lineto
stroke
0 setgray
[(0.5)] 0.4875 0.07725 1 0 Mshowa
0.49375 0.15451 moveto
0.50625 0.15451 lineto
stroke
0 setgray
[(1)] 0.4875 0.15451 1 0 Mshowa
0.49375 0.23176 moveto
0.50625 0.23176 lineto
stroke
0 setgray
[(1.5)] 0.4875 0.23176 1 0 Mshowa
0.49375 0.30902 moveto
0.50625 0.30902 lineto
stroke
0 setgray
[(2)] 0.4875 0.30902 1 0 Mshowa
0.49375 0.38627 moveto
0.50625 0.38627 lineto
stroke
0 setgray
[(2.5)] 0.4875 0.38627 1 0 Mshowa
0.49375 0.46353 moveto
0.50625 0.46353 lineto
stroke
0 setgray
[(3)] 0.4875 0.46353 1 0 Mshowa
0.49375 0.54078 moveto
0.50625 0.54078 lineto
stroke
0 setgray
[(3.5)] 0.4875 0.54078 1 0 Mshowa
0.49375 0.61803 moveto
0.50625 0.61803 lineto
stroke
0 setgray
[(4)] 0.4875 0.61803 1 0 Mshowa
0 setgray
[(MSE)] 0.5 0.62428 0 -1 Mshowa
grestore
grestore
0 0 moveto
1 0 lineto
1 0.618034 lineto
0 0.618034 lineto
closepath
clip
newpath
0 setgray
gsave
gsave
gsave
gsave
gsave
0.004 setlinewidth
0 1.10329 moveto
0.04167 0.95497 lineto
0.08333 0.82626 lineto
0.125 0.71717 lineto
0.16667 0.62769 lineto
0.20833 0.55783 lineto
0.22917 0.53026 lineto
0.25 0.50758 lineto
0.27083 0.48982 lineto
0.28125 0.48277 lineto
0.29167 0.47695 lineto
0.30208 0.47236 lineto
0.30729 0.47053 lineto
0.3125 0.469 lineto
0.31771 0.46777 lineto
0.32031 0.46727 lineto
0.32292 0.46685 lineto
0.32552 0.46651 lineto
0.32813 0.46624 lineto
0.32943 0.46614 lineto
0.33073 0.46605 lineto
0.33203 0.46599 lineto
0.33333 0.46594 lineto
0.33464 0.46591 lineto
0.33594 0.4659 lineto
0.33724 0.46591 lineto
0.33854 0.46594 lineto
0.33984 0.46599 lineto
0.34115 0.46606 lineto
0.34375 0.46625 lineto
0.34635 0.46652 lineto
0.34896 0.46687 lineto
0.35417 0.46779 lineto
0.35938 0.46902 lineto
0.36458 0.47055 lineto
0.375 0.47454 lineto
0.38542 0.47976 lineto
0.39583 0.4862 lineto
0.41667 0.50276 lineto
0.4375 0.52422 lineto
0.45833 0.55059 lineto
0.5 0.61803 lineto
0.54167 0.7051 lineto
0.58333 0.81177 lineto
0.625 0.93807 lineto
0.66667 1.08397 lineto
0.70833 1.2495 lineto
0.75 1.43464 lineto
0.79167 1.63939 lineto
0.83333 1.86376 lineto
Mistroke
0.875 2.10774 lineto
0.91667 2.37134 lineto
0.95833 2.65456 lineto
1 2.95739 lineto
Mfstroke
grestore
grestore
gsave
gsave
0.004 setlinewidth
0 1.08397 moveto
0.04167 0.92479 lineto
0.08333 0.7828 lineto
0.125 0.65802 lineto
0.16667 0.55044 lineto
0.20833 0.46006 lineto
0.25 0.38687 lineto
0.27083 0.35674 lineto
0.29167 0.3309 lineto
0.3125 0.30936 lineto
0.33333 0.29212 lineto
0.34375 0.28511 lineto
0.35417 0.27918 lineto
0.36458 0.27432 lineto
0.375 0.27054 lineto
0.38021 0.26905 lineto
0.38542 0.26783 lineto
0.39063 0.26688 lineto
0.39323 0.26651 lineto
0.39583 0.2662 lineto
0.39844 0.26596 lineto
0.39974 0.26587 lineto
0.40104 0.26579 lineto
0.40234 0.26573 lineto
0.40365 0.26568 lineto
0.40495 0.26566 lineto
0.40625 0.26565 lineto
0.40755 0.26565 lineto
0.40885 0.26568 lineto
0.41016 0.26571 lineto
0.41146 0.26577 lineto
0.41406 0.26593 lineto
0.41667 0.26617 lineto
0.41927 0.26646 lineto
0.42188 0.26683 lineto
0.42708 0.26776 lineto
0.43229 0.26896 lineto
0.4375 0.27043 lineto
0.44792 0.27417 lineto
0.45833 0.27899 lineto
0.47917 0.29185 lineto
0.5 0.30902 lineto
0.54167 0.35624 lineto
0.58333 0.42067 lineto
0.625 0.5023 lineto
0.66667 0.60113 lineto
0.70833 0.71717 lineto
0.75 0.8504 lineto
0.79167 1.00083 lineto
0.83333 1.16847 lineto
Mistroke
0.875 1.35331 lineto
0.91667 1.55535 lineto
0.95833 1.77458 lineto
1 2.01102 lineto
Mfstroke
grestore
grestore
gsave
gsave
0.004 setlinewidth
0 1.07432 moveto
0.04167 0.9097 lineto
0.08333 0.76108 lineto
0.125 0.62845 lineto
0.16667 0.51181 lineto
0.20833 0.41117 lineto
0.25 0.32652 lineto
0.29167 0.25787 lineto
0.3125 0.22954 lineto
0.33333 0.20521 lineto
0.35417 0.18487 lineto
0.375 0.16854 lineto
0.38542 0.16187 lineto
0.39583 0.15621 lineto
0.40625 0.15154 lineto
0.41667 0.14787 lineto
0.42188 0.14641 lineto
0.42708 0.1452 lineto
0.43229 0.14424 lineto
0.4349 0.14386 lineto
0.4375 0.14353 lineto
0.4401 0.14327 lineto
0.44141 0.14316 lineto
0.44271 0.14307 lineto
0.44401 0.143 lineto
0.44531 0.14294 lineto
0.44661 0.14289 lineto
0.44792 0.14286 lineto
0.44922 0.14285 lineto
0.45052 0.14285 lineto
0.45182 0.14287 lineto
0.45313 0.1429 lineto
0.45443 0.14295 lineto
0.45573 0.14302 lineto
0.45833 0.14319 lineto
0.46094 0.14343 lineto
0.46354 0.14373 lineto
0.46875 0.14452 lineto
0.47396 0.14556 lineto
0.47917 0.14685 lineto
0.48958 0.15018 lineto
0.5 0.15451 lineto
0.52083 0.16616 lineto
0.54167 0.18182 lineto
0.58333 0.22512 lineto
0.625 0.28442 lineto
0.66667 0.35972 lineto
0.70833 0.451 lineto
0.75 0.55828 lineto
0.79167 0.68156 lineto
Mistroke
0.83333 0.82083 lineto
0.875 0.97609 lineto
0.91667 1.14735 lineto
0.95833 1.3346 lineto
1 1.53784 lineto
Mfstroke
grestore
grestore
gsave
gsave
0.004 setlinewidth
0 1.06707 moveto
0.04167 0.89838 lineto
0.08333 0.74478 lineto
0.125 0.60626 lineto
0.16667 0.48284 lineto
0.20833 0.3745 lineto
0.25 0.28125 lineto
0.29167 0.20309 lineto
0.33333 0.14002 lineto
0.35417 0.11415 lineto
0.375 0.09204 lineto
0.39583 0.07371 lineto
0.41667 0.05915 lineto
0.42708 0.05328 lineto
0.4375 0.04836 lineto
0.44792 0.04438 lineto
0.45313 0.04274 lineto
0.45833 0.04134 lineto
0.46354 0.04018 lineto
0.46875 0.03925 lineto
0.47135 0.03887 lineto
0.47396 0.03856 lineto
0.47656 0.0383 lineto
0.47917 0.0381 lineto
0.48047 0.03802 lineto
0.48177 0.03796 lineto
0.48307 0.03791 lineto
0.48438 0.03788 lineto
0.48568 0.03786 lineto
0.48698 0.03786 lineto
0.48828 0.03787 lineto
0.48958 0.03789 lineto
0.49089 0.03793 lineto
0.49219 0.03799 lineto
0.49479 0.03814 lineto
0.4974 0.03835 lineto
0.5 0.03863 lineto
0.50521 0.03935 lineto
0.51042 0.04031 lineto
0.52083 0.04293 lineto
0.53125 0.04649 lineto
0.54167 0.051 lineto
0.5625 0.06284 lineto
0.58333 0.07846 lineto
0.625 0.12101 lineto
0.66667 0.17865 lineto
0.70833 0.25138 lineto
0.75 0.33919 lineto
0.79167 0.4421 lineto
0.83333 0.56009 lineto
Mistroke
0.875 0.69318 lineto
0.91667 0.84135 lineto
0.95833 1.00461 lineto
1 1.18296 lineto
Mfstroke
grestore
grestore
gsave
gsave
0.004 setlinewidth
0 1.06526 moveto
0.04167 0.89555 lineto
0.08333 0.74071 lineto
0.125 0.60072 lineto
0.16667 0.4756 lineto
0.20833 0.36534 lineto
0.25 0.26994 lineto
0.29167 0.1894 lineto
0.33333 0.12373 lineto
0.375 0.07292 lineto
0.39583 0.05308 lineto
0.41667 0.03697 lineto
0.42708 0.0303 lineto
0.4375 0.02457 lineto
0.44792 0.01976 lineto
0.45833 0.01588 lineto
0.46354 0.01429 lineto
0.46875 0.01293 lineto
0.47396 0.01181 lineto
0.47917 0.01091 lineto
0.48177 0.01055 lineto
0.48438 0.01025 lineto
0.48698 0.01001 lineto
0.48828 0.00991 lineto
0.48958 0.00982 lineto
0.49089 0.00975 lineto
0.49219 0.00969 lineto
0.49349 0.00965 lineto
0.49479 0.00962 lineto
0.49609 0.00961 lineto
0.4974 0.00961 lineto
0.4987 0.00963 lineto
0.5 0.00966 lineto
0.5013 0.0097 lineto
0.5026 0.00976 lineto
0.50521 0.00992 lineto
0.50781 0.01014 lineto
0.51042 0.01042 lineto
0.51563 0.01115 lineto
0.52083 0.01212 lineto
0.53125 0.01474 lineto
0.54167 0.0183 lineto
0.5625 0.02819 lineto
0.58333 0.0418 lineto
0.625 0.08016 lineto
0.66667 0.13338 lineto
0.70833 0.20147 lineto
0.75 0.28442 lineto
0.79167 0.38224 lineto
0.83333 0.49491 lineto
Mistroke
0.875 0.62245 lineto
0.91667 0.76485 lineto
0.95833 0.92211 lineto
1 1.09423 lineto
Mfstroke
grestore
grestore
grestore
grestore
gsave
gsave
0 setgray
[(k=1)] 0.23333 0.58713 0 0 Mshowa
0 setgray
[(k=2)] 0.2854 0.38627 0 0 Mshowa
0 setgray
[(k=4)] 0.37333 0.21384 0 0 Mshowa
0 setgray
[(k=16)] 0.4 0.12206 0 0 Mshowa
0 setgray
[(k=64)] 0.35 0.05331 0 0 Mshowa
0 setgray
grestore
grestore
grestore
% End of Graphics
MathPictureEnd
%%EPS Trailer
end
%%EndFile
end end epssave restore
grestore
grestore
1 0 0 1 -39 -30 sc5mt astore 15.5 19 401 250 0.785536 0 0 1.1 18.824165 28.100004 sc6mt astore rstroke
false [1 0 0 1 -0.5 38.5] sstrt
systemdict
begin
66 37.500004 249 276.000031 setbbox
94 269.000031 moveto
94 269.000031 79 249.000031 79 249.000031 curveto
79 249.000031 213 233.500031 213 233.500031 curveto
213 233.500031 91 162.500031 91 162.500031 curveto
91 162.500031 223 98.500015 223 98.500015 curveto
223 98.500015 154.5 38.500004 154.5 38.500004 curveto
end
/nspans 5 def [1 0 0 1 -0.5 -33.5] splstroke
gsave clpmt currentmatrix pop newpath
400 249 232 19.5 [1.0275 0 0 1.104418 107.620026 27.463865] mkrpath
clip
newpath
clpmt setmatrix
gsave
/epssave save def TDeps_dict begin userdict begin
[0.913333 0 0 0.935484 41.40332 11.032257] dodrawctm
333.5 47 translate
%%BeginFile: /tmp/topdraw_eps_331_37
%!PS-Adobe-2.0 EPSF-1.2
%%BoundingBox: 0 0 450 279
%%Creator: Mathematica
%%Title: Clipboard
%%CreationDate: Never Never
%%EndComments
50 dict begin
/Mnodistort true def
/pageDashArray [4] def
/nullDashArray [] def

% Compute the minimum of two numbers.
/Mmin {         % p q Mmin min(p,q)
        2 copy          % p q p q
        gt              % p q p>q?
        { exch } if     % min(p,q) max(p,q)
        pop             % min(p,q)
} bind def


% Compute the maximum of two numbers.
/Mmax {         % p q Mmax max(p,q)
        2 copy          % p q p q
        lt              % p q p<q?
        { exch } if     % max(p,q) min(p,q)
        pop             % max(p,q)
} bind def

/Mpstart {
    MathPictureStart
} bind def
/Mpend {
    MathPictureEnd
} bind def
/Mscale {
    0 1 0 1
    5 -1 roll
    MathScale
} bind def
/Plain
        /Courier findfont
def
/Bold
        /Courier-Bold findfont
def
/Italic
        /Courier-Oblique findfont
def
/MathPictureStart {
        gsave
        newpath
        /Mtmatrix
        matrix currentmatrix
        def
        Plain
        Mfontsize scalefont
        setfont
0 setgray 0 setlinewidth
} bind def
/MathPictureEnd {
        grestore
} bind def
/Mdot {
        moveto
        0 0 rlineto
        stroke
} def
/Mtetra {
        moveto
        lineto
        lineto
        lineto
        fill
} def
/Metetra {
        moveto
        lineto
        lineto
        lineto
        closepath
        gsave
        fill
        grestore
        0 setgray
        stroke
} def
/Mistroke {
        flattenpath
        0 0 0
        {
        4 2 roll
        pop pop
        }
        {
        4 -1 roll
        2 index
        sub dup mul
        4 -1 roll
        2 index
        sub dup mul
        add sqrt
        4 -1 roll
        add
        3 1 roll
        }
        {
        stop
        }
        {
        stop
        }
        pathforall
        pop pop
        currentpoint
        stroke
        moveto
        currentdash
        3 -1 roll
        add
        setdash
} def
/Mfstroke {
        stroke
        currentdash
        pop 0
        setdash
} def
/Msboxa {
        newpath
        5 -1 roll
        Mvboxa
        pop
        6 -1 roll
        5 -1 roll
        4 -1 roll
        Msboxa1
        5 -3 roll
        Msboxa1
        [
        7 -2 roll
        [ 2 index 2 index
        10 -1 roll
        9 -1 roll
        ]
        6 1 roll
        5 -2 roll
        ]
} bind def
        
/Msboxa1 {
        sub
        2 div
        dup
        2 index
        1 add
        mul
        3 -1 roll
        -1 add
        3 -1 roll
        mul
} bind def
/Mvboxa {
        gsave
        newpath
        [ true
        3 -1 roll
        {
        Mbbox
        5 -1 roll
        {
        0
        5 1 roll
        }
        {
        7 -1 roll
        exch sub
        (m) stringwidth pop
        .3 mul
        sub
        7 1 roll
        6 -1 roll
        4 -1 roll
        Mmin
        3 -1 roll
        5 index
        add
        5 -1 roll
        4 -1 roll
        Mmax
        4 -1 roll
        }
        ifelse
        false
        }
        forall
        { stop } if
        counttomark
        1 add
        4 roll
        ]
        grestore
} bind def
/Mbbox {
        0 0 moveto
        false charpath
        flattenpath
        pathbbox
        newpath
} bind def
/Mmin {
        2 copy
        gt
        { exch } if
        pop
} bind def
/Mmax {
        2 copy
        lt
        { exch } if
        pop
} bind def
/Mshowa {
        4 -2 roll
        moveto
        2 index
        Mtmatrix setmatrix
        Mvboxa
        7 1 roll
        6 -1 roll
        5 -1 roll
        4 -1 roll
        Mshowa1
        4 1 roll
        Mshowa1
        rmoveto
        currentpoint
        0 1
        4 index length
        -1 add
        {
        2 index
        4 index
        2 index
        get
        3 index
        add
        moveto
        4 index
        exch get
        show
        } for
        pop pop pop pop
        Mgmatrix setmatrix
} bind def
/Mshowa1 {
        2 copy
        add
        4 1 roll
        sub
        mul
        sub
        -2 div
} bind def
/MathScale {
        Mwidth
        Mheight
        Mlp
        translate
        scale
        /Mgmatrix
        matrix currentmatrix
        def
        /Msaveaa exch def
        /Msavebb exch def
        /Msavecc exch def
        /Msavedd exch def
} bind def
/Mlp {
        3 copy
        Mlpfirst
        {
        Mnodistort
        {
        Mmin
        dup
        } if
        4 index
        2 index
        2 index
        Mlprun
        11 index
        11 -1 roll
        10 -4 roll
        Mlp1
        8 index
        9 -5 roll
        Mlp1
        4 -1 roll
        and
        { exit } if
        3 -1 roll
        pop pop
        } loop
        exch
        3 1 roll
        7 -3 roll
        pop pop pop
} bind def
/Mlpfirst {
        3 -1 roll
        dup length
        2 copy
        -2 add
        get
        aload
        pop pop pop
        4 -2 roll
        -1 add
        get
        aload
        pop pop pop
        6 -1 roll
        3 -1 roll
        5 -1 roll
        sub
        dup /MsaveAx exch def
        div
        4 1 roll
        exch sub
        dup /MsaveAy exch def
        div
} bind def
/Mlprun {
        2 copy
        4 index
        0 get
        dup
        4 1 roll
        Mlprun1
        3 copy
        8 -2 roll
        9 -1 roll
        {
        3 copy
        Mlprun1
        3 copy
        11 -3 roll
        /gt Mlpminmax
        8 3 roll
        11 -3 roll
        /lt Mlpminmax
        8 3 roll
        } forall
        pop pop pop pop
        3 1 roll
        pop pop
        aload pop
        5 -1 roll
        aload pop
        exch
        6 -1 roll
        Mlprun2
        8 2 roll
        4 -1 roll
        Mlprun2
        6 2 roll
        3 -1 roll
        Mlprun2
        4 2 roll
        exch
        Mlprun2
        6 2 roll
} bind def
/Mlprun1 {
        aload pop
        exch
        6 -1 roll
        5 -1 roll
        mul add
        4 -2 roll
        mul
        3 -1 roll
        add
} bind def
/Mlprun2 {
        2 copy
        add 2 div
        3 1 roll
        exch sub
} bind def
/Mlpminmax {
        cvx
        2 index
        6 index
        2 index
        exec
        {
        7 -3 roll
        4 -1 roll
        } if
        1 index
        5 index
        3 -1 roll
        exec
        {
        4 1 roll
        pop
        5 -1 roll
        aload
        pop pop
        4 -1 roll
        aload pop
        [
        8 -2 roll
        pop
        5 -2 roll
        pop
        6 -2 roll
        pop
        5 -1 roll
        ]
        4 1 roll
        pop
        }
        {
        pop pop pop
        } ifelse
} bind def
/Mlp1 {
        5 index
        3 index sub
        5 index
        2 index mul
        1 index
        le
        1 index
        0 le
        or
        dup
        not
        {
        1 index
        3 index div
        .99999 mul
        8 -1 roll
        pop
        7 1 roll
        }
        if
        8 -1 roll
        2 div
        7 -2 roll
        pop sub
        5 index
        6 -3 roll
        pop pop
        mul sub
        exch
} bind def
/Mfontsize      12 def
/Mleft          0.000000 def
/Mbottom        279.000000 def
/Mwidth         450.000000 def
/Mheight        279.000000 def
/Courier findfont 12 scalefont setfont
%!
%%Creator: Mathematica
%%AspectRatio: 0.61803 
MathPictureStart
% Scaling calculations
0.02381 0.0127 0 0.15451 [
[(10)] 0.15079 -0.0125 0 1 Msboxa
[(20)] 0.27778 -0.0125 0 1 Msboxa
[(30)] 0.40476 -0.0125 0 1 Msboxa
[(40)] 0.53175 -0.0125 0 1 Msboxa
[(50)] 0.65873 -0.0125 0 1 Msboxa
[(60)] 0.78571 -0.0125 0 1 Msboxa
[(70)] 0.9127 -0.0125 0 1 Msboxa
[(k)] 1.00625 0 -1 0 Msboxa
[(0.5)] 0.01131 0.07725 1 0 Msboxa
[(1)] 0.01131 0.15451 1 0 Msboxa
[(1.5)] 0.01131 0.23176 1 0 Msboxa
[(2)] 0.01131 0.30902 1 0 Msboxa
[(2.5)] 0.01131 0.38627 1 0 Msboxa
[(3)] 0.01131 0.46353 1 0 Msboxa
[(3.5)] 0.01131 0.54078 1 0 Msboxa
[(4)] 0.01131 0.61803 1 0 Msboxa
[(MSE)] 0.02381 0.62428 0 -1 Msboxa
[ -0.001 -0.00725 0 0 ]
[ 1.001 0.61903 0 0 ]
] MathScale
% Start of Graphics
1 setlinecap
1 setlinejoin
newpath
%%Object: Graphics
[ ] 0 setdash
0 setgray
gsave
gsave
0.002 setlinewidth
0 0 moveto
1 0 lineto
stroke
0.15079 -0.00625 moveto
0.15079 0.00625 lineto
stroke
0 setgray
[(10)] 0.15079 -0.0125 0 1 Mshowa
0.27778 -0.00625 moveto
0.27778 0.00625 lineto
stroke
0 setgray
[(20)] 0.27778 -0.0125 0 1 Mshowa
0.40476 -0.00625 moveto
0.40476 0.00625 lineto
stroke
0 setgray
[(30)] 0.40476 -0.0125 0 1 Mshowa
0.53175 -0.00625 moveto
0.53175 0.00625 lineto
stroke
0 setgray
[(40)] 0.53175 -0.0125 0 1 Mshowa
0.65873 -0.00625 moveto
0.65873 0.00625 lineto
stroke
0 setgray
[(50)] 0.65873 -0.0125 0 1 Mshowa
0.78571 -0.00625 moveto
0.78571 0.00625 lineto
stroke
0 setgray
[(60)] 0.78571 -0.0125 0 1 Mshowa
0.9127 -0.00625 moveto
0.9127 0.00625 lineto
stroke
0 setgray
[(70)] 0.9127 -0.0125 0 1 Mshowa
0 setgray
[(k)] 1.00625 0 -1 0 Mshowa
0.02381 0 moveto
0.02381 0.61803 lineto
stroke
0.01756 0.07725 moveto
0.03006 0.07725 lineto
stroke
0 setgray
[(0.5)] 0.01131 0.07725 1 0 Mshowa
0.01756 0.15451 moveto
0.03006 0.15451 lineto
stroke
0 setgray
[(1)] 0.01131 0.15451 1 0 Mshowa
0.01756 0.23176 moveto
0.03006 0.23176 lineto
stroke
0 setgray
[(1.5)] 0.01131 0.23176 1 0 Mshowa
0.01756 0.30902 moveto
0.03006 0.30902 lineto
stroke
0 setgray
[(2)] 0.01131 0.30902 1 0 Mshowa
0.01756 0.38627 moveto
0.03006 0.38627 lineto
stroke
0 setgray
[(2.5)] 0.01131 0.38627 1 0 Mshowa
0.01756 0.46353 moveto
0.03006 0.46353 lineto
stroke
0 setgray
[(3)] 0.01131 0.46353 1 0 Mshowa
0.01756 0.54078 moveto
0.03006 0.54078 lineto
stroke
0 setgray
[(3.5)] 0.01131 0.54078 1 0 Mshowa
0.01756 0.61803 moveto
0.03006 0.61803 lineto
stroke
0 setgray
[(4)] 0.01131 0.61803 1 0 Mshowa
0 setgray
[(MSE)] 0.02381 0.62428 0 -1 Mshowa
grestore
grestore
0 0 moveto
1 0 lineto
1 0.618034 lineto
0 0.618034 lineto
closepath
clip
newpath
0 setgray
gsave
gsave
0.004 setlinewidth
0.02381 15.45085 moveto
0.06349 15.45085 lineto
0.10317 15.45085 lineto
0.14286 15.45085 lineto
0.18254 15.45085 lineto
0.22222 15.45085 lineto
0.2619 15.45085 lineto
0.30159 15.45085 lineto
0.34127 15.45085 lineto
0.38095 15.45085 lineto
0.42063 15.45085 lineto
0.46032 15.45085 lineto
0.5 15.45085 lineto
0.53968 15.45085 lineto
0.57937 15.45085 lineto
0.61905 15.45085 lineto
0.65873 15.45085 lineto
0.69841 15.45085 lineto
0.7381 15.45085 lineto
0.77778 15.45085 lineto
0.81746 15.45085 lineto
0.85714 15.45085 lineto
0.89683 15.45085 lineto
0.93651 15.45085 lineto
0.97619 15.45085 lineto
stroke
grestore
grestore
% End of Graphics
MathPictureEnd
%%EPS Trailer
end
%%EndFile
end end epssave restore
grestore
grestore
1 0 0 1 125 -31 sc5mt astore 232 19.5 400 249 1.0275 0 0 1.104418 107.620026 27.463865 sc6mt astore rstroke
/crlinw 2 def
false [1 0 0 1 -50 39] sstrt
systemdict
begin
430 34.5 804 270 setbbox
431 265.5 moveto
431 265.5 432.5 250.5 432.5 250.5 curveto
432.5 250.5 436 234.5 436 234.5 curveto
436 234.5 441 214 441 214 curveto
441 214 448 162.5 448 162.5 curveto
448 162.5 459.5 144 459.5 144 curveto
459.5 144 467.5 126 467.5 126 curveto
467.5 126 480 108.5 480 108.5 curveto
480 108.5 498 97.5 498 97.5 curveto
498 97.5 525 85.5 525 85.5 curveto
525 85.5 549.5 70 549.5 70 curveto
549.5 70 579.5 63.5 579.5 63.5 curveto
579.5 63.5 617 65 617 65 curveto
617 65 637.5 58 637.5 58 curveto
637.5 58 657 53.5 657 53.5 curveto
657 53.5 677 45.5 677 45.5 curveto
677 45.5 702 44.5 702 44.5 curveto
702 44.5 722.5 38.5 722.5 38.5 curveto
722.5 38.5 737 37 737 37 curveto
737 37 757 35.5 757 35.5 curveto
757 35.5 789 37.5 789 37.5 curveto
end
/nspans 20 def [1 0 0 1 -50 -33] splstroke
/crlinw 0.8 def
/usedash true def
1 0 0 1 -37 -32 sc5mt astore 304.5 0 78 288.5 1 0 0 1 0 0 sc6mt astore ssl
1 0 0 1 -61 -8 sc5mt astore 171.5 0.5 214.5 272 1 0 0 1 0 0 sc6mt astore ssl
1 0 0 1 -54 -26 sc5mt astore 301.5 0.5 92 200.5 1 0 0 1 0 0 sc6mt astore ssl
1 0 0 1 -50 -15 sc5mt astore 223.5 -1.5 224 137 1 0 0 1 0 0 sc6mt astore ssl
1 0 0 1 -85 -29.5 sc5mt astore 528 -1 241 34 1 0 0 1 -85 42.5 sc6mt astore ssl
end
grestore
grestore
%%Trailer

%%EndDocument
 GE /Times-Bold SF
15876 25378 MT
(Figure 2-7:)SH
/Times-Roman SF
21649 XM
(Illustration of a time-varying performance surface and the manner)SH
19294 26574 MT
(in which it is searched \050left\051, and the resulting LMS-C learning curve \050right\051.)SH
10800 28525 MT
(to fluctuate)
19 W( about the minimum point, causing an asymptotic misadjustment. Since the LMS-C output)18 W
10800 30264 MT
(is driven toward the desired signal, any misadjustment due to)
38 W( the CEMAP estimate will contribute to)39 W
10800 32003 MT
(the misadjustment of the LMS-C estimate.)
49 W( Therefore)
371 W( the mean-square error of the CEMAP estimate)48 W
10800 33742 MT
(is first derived, and a discussion of the LMS-C misadjustment follows.)SH
/Times-Bold SF
10800 36639 MT
(2.7.3.1. Mean-Square Error of the CEMAP Estimate)SH
9 /Times-Roman AF
37749 39056 MT
(2)SH
11 SS 
13300 39419 MT
(The expected squared-norm of the error vector)179 W
/Times-Italic SF
35348 XM
(E)SH
/Times-Roman SF
([)SH
/Symbol SF
(||e||)SH
/Times-Roman SF
38199 XM
(] for the CEMAP estimate can be ex-)180 W
10800 41158 MT
(pressed as)SH
9 /Times-Italic AF
25090 42672 MT
(T)SH
29082 XM
(T)SH
30376 XM
(T)SH
34588 XM
(T)SH
36676 XM
(T)SH
11 SS 
15200 43035 MT
(MSE)SH
/Times-Roman SF
20338 XM
(\050)SH
/Times-Bold SF
(N)SH
/Times-Roman SF
(\051)
150 MX(=)SH
/Times-Italic SF
22784 XM
(E)SH
/Times-Roman SF
([)SH
/Symbol SF
(mm)SH
/Times-Roman SF
25590 XM
(])SH
/Symbol SF
26106 XM
(-)SH
/Times-Roman SF
26860 XM
(2)SH
/Times-Italic SF
(E)SH
/Times-Roman SF
([)SH
/Symbol SF
(m)SH
/Times-Bold SF
29582 XM
(C)SH
/Symbol SF
30876 XM
(a)SH
/Times-Roman SF
(])
150 MX(+)SH
/Times-Italic SF
32856 XM
(E)SH
/Times-Roman SF
([)SH
/Symbol SF
(a)SH
/Times-Bold SF
35088 XM
(CC)SH
/Symbol SF
37176 XM
(a)SH
/Times-Roman SF
(])SH
53143 XM
(\0502.50\051)SH
9 /Times-Italic AF
17338 43395 MT
(CEMAP)SH
29473 44197 MT
(T)SH
35078 XM
(T)SH
11 /Times-Roman AF
22014 44560 MT
(=)SH
/Times-Italic SF
22784 XM
(tr)SH
/Times-Roman SF
([)SH
/Symbol SF
(F)SH
/Times-Roman SF
25759 XM
(])SH
/Symbol SF
26275 XM
(-)SH
/Times-Roman SF
27029 XM
(2)SH
/Times-Italic SF
(tr)SH
/Times-Roman SF
([)SH
/Times-Bold SF
(C)SH
/Symbol SF
29973 XM
(F)SH
/Times-Roman SF
31898 XM
(])
150 MX(+)SH
/Times-Italic SF
33184 XM
(tr)SH
/Times-Roman SF
([)SH
/Times-Bold SF
(C)SH
/Symbol SF
35578 XM
(F)SH
/Times-Bold SF
37553 XM
(C)SH
/Times-Roman SF
(])SH
9 /Symbol AF
24723 44920 MT
(mm)SH
30812 XM
(am)SH
36417 XM
(aa)SH
40568 46074 MT
(-)SH
/Times-Roman SF
(1)SH
11 SS 
10800 46437 MT
(Expanding)SH
/Times-Bold SF
15841 XM
(C)SH
/Times-Roman SF
16910 XM
(and the other statistics, plus noting that)SH
/Symbol SF
34388 XM
(F)SH
/Times-Roman SF
36277 XM
(=)SH
/Symbol SF
37047 XM
(F)SH
/Times-Roman SF
39004 XM
(+)SH
/Times-Bold SF
39774 XM
(N)SH
/Symbol SF
41512 XM
(S)SH
/Times-Roman SF
(,)SH
9 /Times-Bold AF
35227 46797 MT
(aa)SH
37886 XM
(a)SH
/Symbol SF
(m)SH
/Times-Italic SF
29167 47951 MT
(T)SH
36968 XM
(T)SH
40960 XM
(T)SH
42704 XM
(T)SH
11 SS 
15200 48314 MT
(MSE)SH
/Times-Roman SF
20338 XM
(\050)SH
/Times-Bold SF
(N)SH
/Times-Roman SF
(\051)
150 MX(=)SH
/Times-Italic SF
22784 XM
(tr)SH
/Times-Roman SF
([)SH
/Symbol SF
(F)SH
25841 XM
(-)SH
/Times-Roman SF
26595 XM
(2)SH
/Times-Bold SF
(c)SH
/Symbol SF
28083 XM
(m)SH
29817 XM
(-)SH
/Times-Roman SF
30571 XM
(2)SH
/Times-Bold SF
(C)SH
/Symbol SF
32365 XM
(F)SH
/Times-Roman SF
34322 XM
(+)SH
/Times-Bold SF
35092 XM
(c)SH
36030 XM
(c)SH
/Times-Roman SF
37618 XM
(+)
150 MX(2)SH
/Times-Bold SF
(c)SH
/Symbol SF
39876 XM
(m)SH
/Times-Bold SF
41460 XM
(C)SH
9 /Times-Italic AF
17338 48674 MT
(CEMAP)SH
/Times-Bold SF
24723 XM
(a)SH
/Symbol SF
(m)SH
/Times-Italic SF
27633 XM
(1)SH
28717 XM
(o)SH
31915 XM
(2)SH
/Times-Bold SF
33204 XM
(a)SH
/Symbol SF
(m)SH
/Times-Italic SF
35580 XM
(1)SH
36518 XM
(1)SH
39426 XM
(1)SH
40510 XM
(o)SH
42254 XM
(2)SH
28429 49480 MT
(T)SH
/Symbol SF
31887 XM
(-)SH
/Times-Roman SF
(1)SH
/Times-Italic SF
34726 XM
(T)SH
11 /Times-Roman AF
23364 49843 MT
(+)SH
/Times-Bold SF
24134 XM
(C)SH
/Symbol SF
25378 XM
(F)SH
/Times-Bold SF
27185 XM
(C)SH
/Times-Roman SF
29079 XM
(+)SH
/Times-Bold SF
29849 XM
(C)SH
31093 XM
(N)SH
/Symbol SF
32831 XM
(S)SH
/Times-Bold SF
(C)SH
/Times-Roman SF
35226 XM
(])SH
53143 XM
(\0502.51\051)SH
9 /Times-Italic AF
24928 50203 MT
(2)SH
/Times-Bold SF
26217 XM
(a)SH
/Symbol SF
(m)SH
/Times-Italic SF
27979 XM
(2)SH
30643 XM
(2)SH
34276 XM
(2)SH
11 /Times-Roman AF
10800 51582 MT
(Only the last term in \0502.51\051 is dependent on)29 W
/Times-Bold SF
30491 XM
(N)SH
/Times-Roman SF
(; the remainder is a fixed misadjustment.)
29 W( The)
332 W( transient)28 W
10800 53321 MT
(term)SH
/Times-Italic SF
13091 XM
(T)SH
/Times-Roman SF
16703 XM
(\050)SH
/Times-Bold SF
(N)SH
/Times-Roman SF
(\051 can be rewritten using the definition of)SH
/Times-Bold SF
35885 XM
(C)SH
/Times-Roman SF
37404 XM
(from \0502.49\051)SH
9 /Times-Italic AF
13703 53681 MT
(CEMAP)SH
36679 XM
(2)SH
/Symbol SF
28057 54835 MT
(-)SH
/Times-Roman SF
(1)SH
/Symbol SF
30989 XM
(-)SH
/Times-Roman SF
(1)SH
/Symbol SF
38376 XM
(-)SH
/Times-Roman SF
(1)SH
11 /Times-Italic AF
15200 55198 MT
(T)SH
/Times-Roman SF
18812 XM
(\050)SH
/Times-Bold SF
(N)SH
/Times-Roman SF
(\051)
150 MX(=)SH
/Times-Italic SF
21258 XM
(tr)SH
/Times-Roman SF
([)SH
/Symbol SF
(S)SH
/Times-Roman SF
23459 XM
(\050)SH
/Symbol SF
(S)SH
/Times-Roman SF
24626 XM
(+)SH
/Times-Bold SF
25396 XM
(N)SH
/Symbol SF
26590 XM
(S)SH
/Times-Roman SF
27691 XM
(\051)SH
/Times-Bold SF
29001 XM
(N)SH
30195 XM
(N)SH
/Symbol SF
31933 XM
(S)SH
/Times-Bold SF
(N)SH
/Times-Roman SF
33778 XM
(\050)SH
/Symbol SF
(S)SH
/Times-Roman SF
34945 XM
(+)SH
/Symbol SF
35715 XM
(S)SH
/Times-Bold SF
36816 XM
(N)SH
/Times-Roman SF
38010 XM
(\051)SH
/Symbol SF
39320 XM
(S)SH
/Times-Roman SF
40421 XM
(])SH
53143 XM
(\0502.52\051)SH
9 /Times-Italic AF
15812 55558 MT
(CEMAP)SH
23009 XM
(o)SH
26190 XM
(c)SH
27241 XM
(o)SH
29795 XM
(c)SH
33378 XM
(c)SH
36366 XM
(o)SH
37610 XM
(c)SH
39971 XM
(o)SH
11 /Times-Roman AF
13300 58183 MT
(Although straightforward, expressing)
99 W( the misadjustment)100 W
/Times-Italic SF
38850 XM
(M)SH
/Times-Roman SF
43141 XM
(in terms of)100 W
/Symbol SF
48482 XM
(S)SH
/Times-Roman SF
(,)SH
/Symbol SF
49783 XM
(S)SH
/Times-Roman SF
50884 XM
(, and)100 W
/Times-Bold SF
53497 XM
(N)SH
/Times-Roman SF
55066 XM
(is)SH
9 /Times-Italic AF
39766 58543 MT
(CEMAP)SH
50434 XM
(o)SH
54291 XM
(c)SH
/Symbol SF
40523 59559 MT
(-)SH
/Times-Roman SF
(1)SH
/Times-Italic SF
43243 XM
(T)SH
49921 XM
(T)SH
11 /Times-Roman AF
10800 59922 MT
(tedious. The)
495 W( derivation is)
110 W( aided by the definitions)109 W
/Times-Bold SF
34149 XM
(K)SH
/Times-Roman SF
35155 XM
(=)
150 MX(\050)SH
/Symbol SF
(S)SH
/Times-Roman SF
37092 XM
(+)SH
/Symbol SF
37862 XM
(S)SH
/Times-Bold SF
38963 XM
(N)SH
/Times-Roman SF
40157 XM
(\051)SH
41617 XM
(=)SH
/Times-Bold SF
42387 XM
(K)SH
/Times-Roman SF
44127 XM
(and)SH
/Times-Bold SF
46099 XM
(T)SH
/Times-Roman SF
46983 XM
(=)SH
/Symbol SF
47753 XM
(m)SH
48837 XM
(m)SH
/Times-Roman SF
50421 XM
(, and obser-)109 W
9 /Times-Italic AF
38513 60282 MT
(o)SH
39757 XM
(c)SH
48387 XM
(o)SH
49471 XM
(o)SH
8 SS 
24396 61099 MT
(T)SH
9 SS 
26617 61298 MT
(T)SH
11 /Times-Roman AF
10800 61661 MT
(vations that)179 W
/Times-Bold SF
16537 XM
(I)SH
/Symbol SF
17115 XM
(-)SH
/Times-Bold SF
17869 XM
(C)SH
/Times-Roman SF
19263 XM
(=)SH
/Symbol SF
20033 XM
(S)SH
/Times-Bold SF
(K)SH
/Times-Roman SF
(,)SH
/Times-Bold SF
22270 XM
(I)SH
/Symbol SF
22848 XM
(-)SH
/Times-Bold SF
23602 XM
(C)SH
/Times-Roman SF
24991 XM
(=)SH
/Times-Bold SF
25761 XM
(K)SH
/Symbol SF
27117 XM
(S)SH
/Times-Roman SF
(, and)180 W
/Times-Bold SF
30541 XM
(c)SH
/Times-Roman SF
31629 XM
(=)SH
/Symbol SF
32399 XM
(S)SH
/Times-Bold SF
(K)SH
/Symbol SF
(m)SH
/Times-Roman SF
35445 XM
(Rewriting all but the transient \050last\051 term in)180 W
9 /Times-Italic AF
18663 62021 MT
(2)SH
31029 XM
(1)SH
34540 XM
(o)SH
8 /Times-Roman AF
24396 62023 MT
(2)SH
11 SS 
10800 63400 MT
(\0502.51\051 using these relations,)SH
9 /Times-Italic AF
25885 64914 MT
(T)SH
30227 XM
(T)SH
33669 XM
(T)SH
41432 XM
(T)SH
45094 XM
(T)SH
11 SS 
15200 65277 MT
(M)SH
/Times-Roman SF
19266 XM
(=)SH
/Times-Italic SF
20036 XM
(tr)SH
/Times-Roman SF
([)SH
/Symbol SF
(F)SH
/Times-Roman SF
22943 XM
(\050)SH
/Times-Bold SF
(I)SH
/Symbol SF
23887 XM
(-)SH
/Times-Bold SF
24641 XM
(C)SH
/Times-Roman SF
26385 XM
(\051)SH
/Symbol SF
26901 XM
(-)SH
/Times-Roman SF
27655 XM
(2)SH
/Times-Bold SF
(c)SH
/Symbol SF
29143 XM
(m)SH
/Times-Roman SF
30727 XM
(\050)SH
/Times-Bold SF
(I)SH
/Symbol SF
31671 XM
(-)SH
/Times-Bold SF
32425 XM
(C)SH
/Times-Roman SF
34169 XM
(\051)SH
/Symbol SF
34685 XM
(-)SH
/Times-Bold SF
35439 XM
(C)SH
/Symbol SF
36683 XM
(F)SH
/Times-Roman SF
38490 XM
(\050)SH
/Times-Bold SF
(I)SH
/Symbol SF
39434 XM
(-)SH
/Times-Bold SF
40188 XM
(C)SH
/Times-Roman SF
41932 XM
(\051)
150 MX(+)SH
/Times-Bold SF
43218 XM
(c)SH
44156 XM
(c)SH
/Times-Roman SF
45594 XM
(])SH
53143 XM
(\0502.53\051)SH
9 /Times-Italic AF
16116 65637 MT
(CEMAP)SH
/Times-Bold SF
21975 XM
(a)SH
/Symbol SF
(m)SH
/Times-Italic SF
25435 XM
(2)SH
28693 XM
(1)SH
29777 XM
(o)SH
33219 XM
(2)SH
36233 XM
(2)SH
/Times-Bold SF
37522 XM
(a)SH
/Symbol SF
(m)SH
/Times-Italic SF
40982 XM
(2)SH
43706 XM
(1)SH
44644 XM
(1)SH
30107 66443 MT
(T)SH
31991 XM
(T)SH
37737 XM
(T)SH
39093 XM
(T)SH
11 /Times-Roman AF
19266 66806 MT
(=)SH
/Times-Italic SF
20036 XM
(tr)SH
/Times-Roman SF
([{)SH
/Symbol SF
(S)SH
/Times-Bold SF
(K)SH
/Symbol SF
(F)SH
25128 XM
(-)SH
/Times-Roman SF
25882 XM
(2)SH
/Symbol SF
(S)SH
/Times-Bold SF
(K)SH
/Symbol SF
(m)SH
29023 XM
(m)SH
/Times-Roman SF
30607 XM
(})SH
/Times-Bold SF
(K)SH
/Symbol SF
32491 XM
(S)SH
/Times-Roman SF
33292 XM
(+)SH
/Symbol SF
34062 XM
(S)SH
/Times-Bold SF
(K)SH
/Symbol SF
(m)SH
36653 XM
(m)SH
/Times-Bold SF
38237 XM
(K)SH
/Symbol SF
39593 XM
(S)SH
/Times-Roman SF
(])SH
9 /Times-Bold AF
24010 67166 MT
(a)SH
/Symbol SF
(m)SH
/Times-Italic SF
28573 XM
(o)SH
29657 XM
(o)SH
36203 XM
(o)SH
37287 XM
(o)SH
26986 67972 MT
(T)SH
32688 XM
(T)SH
37856 XM
(T)SH
11 /Times-Roman AF
19266 68335 MT
(=)SH
/Times-Italic SF
20036 XM
(tr)SH
/Times-Roman SF
([)SH
/Symbol SF
(S)SH
/Times-Bold SF
(K)SH
/Times-Roman SF
(\050)SH
/Symbol SF
(S)SH
/Times-Roman SF
24260 XM
(+)SH
/Times-Bold SF
25030 XM
(T)SH
/Times-Roman SF
(\051)SH
/Times-Bold SF
(K)SH
/Symbol SF
27486 XM
(S)
150 MX(-)SH
/Times-Roman SF
29041 XM
(2)SH
/Symbol SF
(S)SH
/Times-Bold SF
(KTK)SH
/Symbol SF
33188 XM
(S)SH
/Times-Roman SF
33989 XM
(+)SH
/Symbol SF
34759 XM
(S)SH
/Times-Bold SF
(KTK)SH
/Symbol SF
38356 XM
(S)SH
/Times-Roman SF
(])SH
9 /Times-Italic AF
23660 68695 MT
(o)SH
24600 69497 MT
(T)SH
11 /Times-Roman AF
19266 69860 MT
(=)SH
/Times-Italic SF
20036 XM
(tr)SH
/Times-Roman SF
([)SH
/Symbol SF
(S)SH
/Times-Bold SF
(K)SH
/Symbol SF
(S)SH
/Times-Bold SF
23744 XM
(K)SH
/Symbol SF
25100 XM
(S)SH
/Times-Roman SF
(])SH
9 /Times-Italic AF
23294 70220 MT
(o)SH
11 /Times-Roman AF
10800 71599 MT
(which results in)SH
ES
%%Page: 29 30
BS
0 SI
10 /Times-Roman AF
54800 4286 MT
(29)SH
9 /Symbol AF
26385 7817 MT
(-)SH
/Times-Roman SF
(1)SH
/Symbol SF
33028 XM
(-)SH
/Times-Roman SF
(1)SH
11 /Times-Italic AF
15200 8180 MT
(M)SH
/Times-Roman SF
19266 XM
(=)SH
/Times-Italic SF
20036 XM
(tr)SH
/Times-Roman SF
([)SH
/Symbol SF
(S)SH
/Times-Roman SF
(\050)SH
/Symbol SF
(S)SH
/Times-Roman SF
22954 XM
(+)SH
/Symbol SF
23724 XM
(S)SH
/Times-Bold SF
24825 XM
(N)SH
/Times-Roman SF
26019 XM
(\051)SH
/Symbol SF
27329 XM
(S)SH
/Times-Roman SF
28430 XM
(\050)SH
/Symbol SF
(S)SH
/Times-Roman SF
29597 XM
(+)SH
/Times-Bold SF
30367 XM
(N)SH
/Symbol SF
31561 XM
(S)SH
/Times-Roman SF
32662 XM
(\051)SH
/Symbol SF
33972 XM
(S)SH
/Times-Roman SF
(])SH
53143 XM
(\0502.54\051)SH
9 /Times-Italic AF
16116 8540 MT
(CEMAP)SH
24375 XM
(o)SH
25619 XM
(c)SH
27980 XM
(o)SH
31161 XM
(c)SH
32212 XM
(o)SH
11 /Times-Roman AF
10800 11115 MT
(It is possible to show that)31 W
/Times-Italic SF
22476 XM
(MSE)SH
/Times-Roman SF
27614 XM
(\050)SH
/Times-Bold SF
(N)SH
/Times-Roman SF
(\051)
150 MX(=)SH
/Times-Italic SF
30060 XM
(MSE)SH
/Times-Roman SF
34598 XM
(\050)SH
/Times-Bold SF
(N)SH
/Times-Roman SF
(\051 when)31 W
/Times-Bold SF
39118 XM
(N)SH
/Times-Roman SF
40062 XM
(=)SH
/Times-Bold SF
40832 XM
(N)SH
/Times-Roman SF
42026 XM
(, and also that)
31 W( the difference in)30 W
9 /Times-Italic AF
24614 11475 MT
(CEMAP)SH
32198 XM
(EMAP)SH
41626 XM
(c)SH
11 /Times-Roman AF
10800 12854 MT
(MSE between these two estimates is small when)
98 W( the dogmatism of the data is small.  The CEMAP)99 W
10800 14593 MT
(MSE and misadjustment as a function of data properties and the parameter)68 W
/Symbol SF
44728 XM
(h)SH
/Times-Roman SF
45734 XM
(are explored further)
68 W( in)67 W
10800 16332 MT
(Section 2.8.)SH
13300 19317 MT
(Returning to the question of the LMS-C estimate's asymptotic MSE,)
96 W( assume that the estimate)97 W
9 /Symbol AF
55075 20693 MT
(*)SH
11 /Times-Roman AF
10800 21056 MT
(has reached steady-state, at which point the)
82 W( coefficient matrix)81 W
/Times-Bold SF
39023 XM
(H)SH
/Times-Roman SF
40635 XM
(is randomly fluctuating about)81 W
/Times-Bold SF
54219 XM
(H)SH
/Times-Roman SF
55525 XM
(.)SH
9 /Times-Italic AF
39879 21416 MT
(k)SH
11 /Times-Roman AF
10800 22795 MT
(Equation \0502.39\051 can also be expressed as)SH
9 /Times-Italic AF
23191 24309 MT
(T)SH
11 /Times-Bold AF
15200 24672 MT
(H)SH
/Times-Roman SF
17664 XM
(=)SH
/Times-Bold SF
18434 XM
(H)SH
/Times-Roman SF
19840 XM
(+)SH
/Symbol SF
20610 XM
(ba)SH
22308 XM
(e)SH
/Times-Roman SF
53143 XM
(\0502.55\051)SH
9 /Times-Italic AF
16056 25032 MT
(k+1)SH
19290 XM
(k)SH
21908 XM
(k)SH
22791 XM
(k)SH
8 /Symbol AF
15564 26209 MT
(\331)SH
32501 XM
(\331)SH
11 /Times-Roman AF
10800 26899 MT
(where)SH
/Symbol SF
13761 XM
(e)SH
/Times-Roman SF
14794 XM
(=)SH
/Symbol SF
15564 XM
(m)SH
16596 XM
(-)SH
/Times-Bold SF
17350 XM
(d)SH
/Times-Roman SF
18637 XM
(is the error vector as before, so)SH
/Symbol SF
32501 XM
(m)SH
/Times-Roman SF
33658 XM
(can be written as)SH
9 /Times-Italic AF
14244 27259 MT
(k)SH
16046 XM
(k)SH
17962 XM
(k)SH
32983 XM
(k)SH
8 /Symbol AF
15200 28436 MT
(\331)SH
/Times-Italic SF
17858 28564 MT
(T)SH
9 SS 
21698 28763 MT
(T)SH
11 /Symbol AF
15200 29126 MT
(m)SH
/Times-Roman SF
16232 XM
(=)SH
/Times-Bold SF
17002 XM
(H)SH
/Symbol SF
18303 XM
(a)SH
/Times-Roman SF
19147 XM
(+)SH
/Symbol SF
19917 XM
(bea)SH
22198 XM
(a)SH
/Times-Roman SF
53143 XM
(\0502.56\051)SH
9 /Times-Italic AF
15682 29486 MT
(k)SH
8 SS 
17858 29488 MT
(k)SH
11 /Times-Roman AF
10800 30865 MT
(Since)SH
/Times-Bold SF
13788 XM
(H)SH
/Times-Roman SF
15588 XM
(is near the optimum, the noise in the LMS-C estimate is the second)
269 W( term in \0502.56\051,)270 W
9 /Times-Italic AF
14644 31225 MT
(k)SH
12581 32241 MT
(T)SH
15993 XM
(T)SH
11 /Symbol AF
10800 32604 MT
(bea)SH
13081 XM
(a)SH
/Times-Roman SF
13925 XM
(=)SH
/Symbol SF
14695 XM
(ba)SH
16493 XM
(ae)SH
/Times-Roman SF
(. The)
613 W( expected squared-norm of)
169 W( this term is the misadjustment of the LMS-C es-)168 W
10800 34343 MT
(timate, or)SH
9 /Times-Italic AF
22412 35857 MT
(T)SH
/Times-Roman SF
24529 XM
(2)SH
11 /Times-Italic AF
15200 36220 MT
(M)SH
/Times-Roman SF
18866 XM
(=)SH
/Times-Italic SF
19636 XM
(E)SH
/Times-Roman SF
([)SH
/Symbol SF
(||ba)SH
22912 XM
(ae||)SH
/Times-Roman SF
24979 XM
(])SH
53143 XM
(\0502.57\051)SH
9 /Times-Italic AF
16116 36580 MT
(LMS-C)SH
/Times-Roman SF
20240 37382 MT
(2)SH
/Times-Italic SF
22422 XM
(T)SH
25276 XM
(T)SH
11 /Times-Roman AF
18866 37745 MT
(=)SH
/Symbol SF
19636 XM
(b)SH
/Times-Italic SF
20690 XM
(E)SH
/Times-Roman SF
([)SH
/Symbol SF
(a)SH
22922 XM
(aeea)SH
25776 XM
(a)SH
/Times-Roman SF
(])SH
10800 39484 MT
(When the weight matrix is near the)
112 W( optimum, the error signal)113 W
/Symbol SF
39225 XM
(e)SH
/Times-Roman SF
40096 XM
(is approximately uncorrelated with)113 W
9 SS 
11769 40860 MT
(7)SH
11 /Symbol AF
10800 41223 MT
(a)SH
/Times-Roman SF
(.)SH
12769 XM
(Approximating the fourth-order statistic involving)SH
/Symbol SF
35164 XM
(a)SH
/Times-Roman SF
36133 XM
(with second-order statistics, \0502.57\051 becomes)SH
9 SS 
20240 42737 MT
(2)SH
21362 XM
(2)SH
/Times-Italic SF
22872 XM
(T)SH
26436 XM
(T)SH
11 SS 
15200 43100 MT
(M)SH
/Times-Roman SF
18866 XM
(=)SH
/Symbol SF
19636 XM
(b)SH
/Times-Italic SF
20690 XM
(E)SH
/Times-Roman SF
21812 XM
([)SH
/Symbol SF
(a)SH
23372 XM
(a)SH
/Times-Roman SF
(])SH
/Times-Italic SF
(E)SH
/Times-Roman SF
([)SH
/Symbol SF
(ee)SH
/Times-Roman SF
26936 XM
(])SH
53143 XM
(\0502.58\051)SH
9 /Times-Italic AF
16116 43460 MT
(LMS-C)SH
/Times-Roman SF
20240 44262 MT
(2)SH
21424 XM
(2)SH
/Times-Italic SF
26585 XM
(T)SH
11 /Times-Roman AF
18866 44625 MT
(=)SH
/Symbol SF
19636 XM
(b)SH
/Times-Italic SF
20690 XM
(tr)SH
/Times-Roman SF
21874 XM
([)SH
/Symbol SF
(F)SH
/Times-Roman SF
24215 XM
(])SH
/Times-Italic SF
(E)SH
/Times-Roman SF
([)SH
/Symbol SF
(ee)SH
/Times-Roman SF
27085 XM
(])SH
9 /Symbol AF
23079 44985 MT
(aa)SH
/Times-Roman SF
20088 45692 MT
(2)SH
/Times-Italic SF
22542 XM
(T)SH
11 /Times-Roman AF
18866 46055 MT
(=)SH
/Symbol SF
19636 XM
(g)SH
/Times-Italic SF
20538 XM
(E)SH
/Times-Roman SF
([)SH
/Symbol SF
(ee)SH
/Times-Roman SF
23042 XM
(])SH
8 /Symbol AF
18384 47592 MT
(\331)SH
9 /Times-Italic AF
44603 47919 MT
(T)SH
11 /Times-Roman AF
10800 48282 MT
(At the optimum,)22 W
/Symbol SF
18384 XM
(m)SH
19016 XM
(\273)
150 MX(m)SH
/Times-Roman SF
20700 XM
(and therefore from the definition of)21 W
/Symbol SF
36708 XM
(e)SH
/Times-Roman SF
37487 XM
(and \0502.50\051,)21 W
/Times-Italic SF
42599 XM
(E)SH
/Times-Roman SF
([)SH
/Symbol SF
(ee)SH
/Times-Roman SF
45103 XM
(])SH
/Symbol SF
45619 XM
(\273)SH
/Times-Italic SF
46373 XM
(M)SH
/Times-Roman SF
50289 XM
(, making the)21 W
9 /Times-Italic AF
47289 48642 MT
(CEMAP)SH
11 /Times-Roman AF
10800 50021 MT
(LMS-C misadjustment a scaled version of that of)
53 W( the CEMAP estimate.  Substituting the value for)54 W
/Symbol SF
55196 XM
(b)SH
/Times-Roman SF
10800 51760 MT
(from \0502.48\051, the scale factor can be written as)SH
9 /Times-Italic AF
23929 53274 MT
(T)SH
11 /Times-Roman AF
17724 53637 MT
(2\050)SH
/Times-Italic SF
(tr)SH
/Times-Roman SF
([)SH
/Symbol SF
(S)SH
/Times-Roman SF
20991 XM
(+)SH
/Symbol SF
21761 XM
(m)SH
22845 XM
(m)SH
/Times-Roman SF
24429 XM
(])
150 MX(+)
150 MX(1\051)SH
9 /Times-Italic AF
20391 53997 MT
(o)SH
22395 XM
(o)SH
23479 XM
(o)SH
11212 50 16572 54382 UL
11 /Symbol AF
15200 54627 MT
(g)SH
/Times-Roman SF
15802 XM
(=)SH
/Symbol SF
28084 XM
(\243)SH
/Times-Roman SF
28988 XM
(1)SH
53143 XM
(\0502.59\051)SH
9 /Times-Italic AF
22411 55240 MT
(T)SH
11 /Times-Roman AF
16572 55603 MT
(2)SH
/Times-Italic SF
(tr)SH
/Times-Roman SF
([)SH
/Symbol SF
(S)SH
/Times-Roman SF
19473 XM
(+)SH
/Symbol SF
20243 XM
(m)SH
21327 XM
(m)SH
/Times-Roman SF
22911 XM
(])
150 MX(+)
150 MX(2)
150 MX(+)SH
/Times-Italic SF
25667 XM
(tr)SH
/Times-Roman SF
([)SH
/Symbol SF
(S)SH
/Times-Roman SF
(])SH
9 /Times-Italic AF
18873 55963 MT
(o)SH
20877 XM
(o)SH
21961 XM
(o)SH
/Symbol SF
17420 57117 MT
(-)SH
/Times-Roman SF
(1)SH
11 SS 
10800 57480 MT
(where the)73 W
/Times-Italic SF
15526 XM
(tr)SH
/Times-Roman SF
([)SH
/Times-Bold SF
(N)SH
/Symbol SF
18364 XM
(S)SH
/Times-Roman SF
(] term in)73 W
/Times-Italic SF
23297 XM
(tr)SH
/Times-Roman SF
([)SH
/Symbol SF
(F)SH
/Times-Roman SF
26372 XM
(] was ignored since it should)
73 W( be small at convergence.  When the)72 W
9 /Symbol AF
25236 57840 MT
(aa)SH
11 /Times-Roman AF
10800 59219 MT
(dogmatism is small,)
6 W( the scale factor)7 W
/Symbol SF
26879 XM
(g)SH
/Times-Roman SF
27613 XM
(is likely to be near 1.0 making the misadjustment of the LMS-C)7 W
10800 60958 MT
(estimate approximately equal to that of the CEMAP.)
56 W( This)
385 W( result is not surprising since in the small-)55 W
10800 62697 MT
(dogmatism case, as the LMS-C coefficient error decays to zero and the estimate is)
50 W( driven toward the)51 W
10800 64436 MT
(desired signal, any misadjustment is largely due to the misadjustment of the desired signal.  As will)78 W
10800 66175 MT
(be seen in the)
63 W( analysis in the next section, the parameter)64 W
/Symbol SF
36487 XM
(h)SH
/Times-Roman SF
37489 XM
(controls the tradeoff between this misad-)64 W
10800 67914 MT
(justment and rate of convergence.)SH
10800 50 10800 70172 UL
7 SS 
11700 71673 MT
(7)SH
32213 XM
(T)SH
/Symbol SF
42174 XM
(*)SH
9 /Times-Roman AF
12050 72000 MT
(This is easily proven by taking the expected value of)SH
/Symbol SF
31250 XM
(ea)SH
/Times-Roman SF
32866 XM
(and evaluating it at)SH
/Times-Bold SF
39966 XM
(H)SH
/Times-Roman SF
40816 XM
(=)SH
/Times-Bold SF
41474 XM
(H)SH
/Times-Roman SF
42524 XM
(.)SH
ES
%%Page: 30 31
BS
0 SI
10 /Times-Roman AF
54800 4286 MT
(30)SH
11 SS 
893 1000 0 20700 32382 GB 
%%BeginDocument: /usr0/rozzi/Documentation/PhDThesis/Chapter2/EmpMuDist.eps
%!PS-Adobe-2.0 EPSF-1.2
%%BoundingBox: 0 0 282 282
%%Creator: Mathematica
%%Title: Clipboard
%%CreationDate: Never Never
%%EndComments
50 dict begin
/Mnodistort true def
/pageDashArray [4] def
/nullDashArray [] def

% Compute the minimum of two numbers.
/Mmin {         % p q Mmin min(p,q)
        2 copy          % p q p q
        gt              % p q p>q?
        { exch } if     % min(p,q) max(p,q)
        pop             % min(p,q)
} bind def


% Compute the maximum of two numbers.
/Mmax {         % p q Mmax max(p,q)
        2 copy          % p q p q
        lt              % p q p<q?
        { exch } if     % max(p,q) min(p,q)
        pop             % max(p,q)
} bind def

/Mpstart {
    MathPictureStart
} bind def
/Mpend {
    MathPictureEnd
} bind def
/Mscale {
    0 1 0 1
    5 -1 roll
    MathScale
} bind def
/Plain
        /Courier findfont
def
/Bold
        /Courier-Bold findfont
def
/Italic
        /Courier-Oblique findfont
def
/MathPictureStart {
        gsave
        newpath
        /Mtmatrix
        matrix currentmatrix
        def
        Plain
        Mfontsize scalefont
        setfont
0 setgray 0 setlinewidth
} bind def
/MathPictureEnd {
        grestore
} bind def
/Mdot {
        moveto
        0 0 rlineto
        stroke
} def
/Mtetra {
        moveto
        lineto
        lineto
        lineto
        fill
} def
/Metetra {
        moveto
        lineto
        lineto
        lineto
        closepath
        gsave
        fill
        grestore
        0 setgray
        stroke
} def
/Mistroke {
        flattenpath
        0 0 0
        {
        4 2 roll
        pop pop
        }
        {
        4 -1 roll
        2 index
        sub dup mul
        4 -1 roll
        2 index
        sub dup mul
        add sqrt
        4 -1 roll
        add
        3 1 roll
        }
        {
        stop
        }
        {
        stop
        }
        pathforall
        pop pop
        currentpoint
        stroke
        moveto
        currentdash
        3 -1 roll
        add
        setdash
} def
/Mfstroke {
        stroke
        currentdash
        pop 0
        setdash
} def
/Msboxa {
        newpath
        5 -1 roll
        Mvboxa
        pop
        6 -1 roll
        5 -1 roll
        4 -1 roll
        Msboxa1
        5 -3 roll
        Msboxa1
        [
        7 -2 roll
        [ 2 index 2 index
        10 -1 roll
        9 -1 roll
        ]
        6 1 roll
        5 -2 roll
        ]
} bind def
        
/Msboxa1 {
        sub
        2 div
        dup
        2 index
        1 add
        mul
        3 -1 roll
        -1 add
        3 -1 roll
        mul
} bind def
/Mvboxa {
        gsave
        newpath
        [ true
        3 -1 roll
        {
        Mbbox
        5 -1 roll
        {
        0
        5 1 roll
        }
        {
        7 -1 roll
        exch sub
        (m) stringwidth pop
        .3 mul
        sub
        7 1 roll
        6 -1 roll
        4 -1 roll
        Mmin
        3 -1 roll
        5 index
        add
        5 -1 roll
        4 -1 roll
        Mmax
        4 -1 roll
        }
        ifelse
        false
        }
        forall
        { stop } if
        counttomark
        1 add
        4 roll
        ]
        grestore
} bind def
/Mbbox {
        0 0 moveto
        false charpath
        flattenpath
        pathbbox
        newpath
} bind def
/Mmin {
        2 copy
        gt
        { exch } if
        pop
} bind def
/Mmax {
        2 copy
        lt
        { exch } if
        pop
} bind def
/Mshowa {
        4 -2 roll
        moveto
        2 index
        Mtmatrix setmatrix
        Mvboxa
        7 1 roll
        6 -1 roll
        5 -1 roll
        4 -1 roll
        Mshowa1
        4 1 roll
        Mshowa1
        rmoveto
        currentpoint
        0 1
        4 index length
        -1 add
        {
        2 index
        4 index
        2 index
        get
        3 index
        add
        moveto
        4 index
        exch get
        show
        } for
        pop pop pop pop
        Mgmatrix setmatrix
} bind def
/Mshowa1 {
        2 copy
        add
        4 1 roll
        sub
        mul
        sub
        -2 div
} bind def
/MathScale {
        Mwidth
        Mheight
        Mlp
        translate
        scale
        /Mgmatrix
        matrix currentmatrix
        def
        /Msaveaa exch def
        /Msavebb exch def
        /Msavecc exch def
        /Msavedd exch def
} bind def
/Mlp {
        3 copy
        Mlpfirst
        {
        Mnodistort
        {
        Mmin
        dup
        } if
        4 index
        2 index
        2 index
        Mlprun
        11 index
        11 -1 roll
        10 -4 roll
        Mlp1
        8 index
        9 -5 roll
        Mlp1
        4 -1 roll
        and
        { exit } if
        3 -1 roll
        pop pop
        } loop
        exch
        3 1 roll
        7 -3 roll
        pop pop pop
} bind def
/Mlpfirst {
        3 -1 roll
        dup length
        2 copy
        -2 add
        get
        aload
        pop pop pop
        4 -2 roll
        -1 add
        get
        aload
        pop pop pop
        6 -1 roll
        3 -1 roll
        5 -1 roll
        sub
        dup /MsaveAx exch def
        div
        4 1 roll
        exch sub
        dup /MsaveAy exch def
        div
} bind def
/Mlprun {
        2 copy
        4 index
        0 get
        dup
        4 1 roll
        Mlprun1
        3 copy
        8 -2 roll
        9 -1 roll
        {
        3 copy
        Mlprun1
        3 copy
        11 -3 roll
        /gt Mlpminmax
        8 3 roll
        11 -3 roll
        /lt Mlpminmax
        8 3 roll
        } forall
        pop pop pop pop
        3 1 roll
        pop pop
        aload pop
        5 -1 roll
        aload pop
        exch
        6 -1 roll
        Mlprun2
        8 2 roll
        4 -1 roll
        Mlprun2
        6 2 roll
        3 -1 roll
        Mlprun2
        4 2 roll
        exch
        Mlprun2
        6 2 roll
} bind def
/Mlprun1 {
        aload pop
        exch
        6 -1 roll
        5 -1 roll
        mul add
        4 -2 roll
        mul
        3 -1 roll
        add
} bind def
/Mlprun2 {
        2 copy
        add 2 div
        3 1 roll
        exch sub
} bind def
/Mlpminmax {
        cvx
        2 index
        6 index
        2 index
        exec
        {
        7 -3 roll
        4 -1 roll
        } if
        1 index
        5 index
        3 -1 roll
        exec
        {
        4 1 roll
        pop
        5 -1 roll
        aload
        pop pop
        4 -1 roll
        aload pop
        [
        8 -2 roll
        pop
        5 -2 roll
        pop
        6 -2 roll
        pop
        5 -1 roll
        ]
        4 1 roll
        pop
        }
        {
        pop pop pop
        } ifelse
} bind def
/Mlp1 {
        5 index
        3 index sub
        5 index
        2 index mul
        1 index
        le
        1 index
        0 le
        or
        dup
        not
        {
        1 index
        3 index div
        .99999 mul
        8 -1 roll
        pop
        7 1 roll
        }
        if
        8 -1 roll
        2 div
        7 -2 roll
        pop sub
        5 index
        6 -3 roll
        pop pop
        mul sub
        exch
} bind def
/Mfontsize      12 def
/Mleft          0.000000 def
/Mbottom        282.000000 def
/Mwidth         282.000000 def
/Mheight        282.000000 def
/Courier findfont 12 scalefont setfont
%!
%%Creator: Mathematica
%%AspectRatio: 1 
MathPictureStart
% Scaling calculations
0.25 0.08333 0.33333 0.08333 [
[(-2)] 0.08333 -0.0225 0 1 Msboxa
[(0)] 0.25 -0.0225 0 1 Msboxa
[(2)] 0.41667 -0.0225 0 1 Msboxa
[(4)] 0.58333 -0.0225 0 1 Msboxa
[(6)] 0.75 -0.0225 0 1 Msboxa
[(8)] 0.91667 -0.0225 0 1 Msboxa
[(m1)] 1.00625 -0.01 -1 0 Msboxa
[(-4)] -0.0225 0 1 0 Msboxa
[(-2)] -0.0225 0.16667 1 0 Msboxa
[(0)] -0.0225 0.33333 1 0 Msboxa
[(2)] -0.0225 0.5 1 0 Msboxa
[(4)] -0.0225 0.66667 1 0 Msboxa
[(6)] -0.0225 0.83333 1 0 Msboxa
[(8)] -0.0225 1 1 0 Msboxa
[(m2)] -0.01 1.05625 0 -1 Msboxa
[ -0.01725 -0.01725 0 0 ]
[ 1.001 1.001 0 0 ]
] MathScale
% Start of Graphics
1 setlinecap
1 setlinejoin
newpath
%%Object: ContourGraphics
[ ] 0 setdash
0 setgray
gsave
0.002 setlinewidth
0 -0.01 moveto
1 -0.01 lineto
stroke
0.08333 -0.01625 moveto
0.08333 -0.00375 lineto
stroke
0 setgray
[(-2)] 0.08333 -0.0225 0 1 Mshowa
0.25 -0.01625 moveto
0.25 -0.00375 lineto
stroke
0 setgray
[(0)] 0.25 -0.0225 0 1 Mshowa
0.41667 -0.01625 moveto
0.41667 -0.00375 lineto
stroke
0 setgray
[(2)] 0.41667 -0.0225 0 1 Mshowa
0.58333 -0.01625 moveto
0.58333 -0.00375 lineto
stroke
0 setgray
[(4)] 0.58333 -0.0225 0 1 Mshowa
0.75 -0.01625 moveto
0.75 -0.00375 lineto
stroke
0 setgray
[(6)] 0.75 -0.0225 0 1 Mshowa
0.91667 -0.01625 moveto
0.91667 -0.00375 lineto
stroke
0 setgray
[(8)] 0.91667 -0.0225 0 1 Mshowa
0 setgray
[(m1)] 1.00625 -0.01 -1 0 Mshowa
-0.01 0 moveto
-0.01 1 lineto
stroke
-0.01625 0 moveto
-0.00375 0 lineto
stroke
0 setgray
[(-4)] -0.0225 0 1 0 Mshowa
-0.01625 0.16667 moveto
-0.00375 0.16667 lineto
stroke
0 setgray
[(-2)] -0.0225 0.16667 1 0 Mshowa
-0.01625 0.33333 moveto
-0.00375 0.33333 lineto
stroke
0 setgray
[(0)] -0.0225 0.33333 1 0 Mshowa
-0.01625 0.5 moveto
-0.00375 0.5 lineto
stroke
0 setgray
[(2)] -0.0225 0.5 1 0 Mshowa
-0.01625 0.66667 moveto
-0.00375 0.66667 lineto
stroke
0 setgray
[(4)] -0.0225 0.66667 1 0 Mshowa
-0.01625 0.83333 moveto
-0.00375 0.83333 lineto
stroke
0 setgray
[(6)] -0.0225 0.83333 1 0 Mshowa
-0.01625 1 moveto
-0.00375 1 lineto
stroke
0 setgray
[(8)] -0.0225 1 1 0 Mshowa
0 setgray
[(m2)] -0.01 1.05625 0 -1 Mshowa
grestore
0 0 moveto
1 0 lineto
1 1 lineto
0 1 lineto
closepath
clip
newpath
0 setgray
0.004 setlinewidth
0.00081 0.04167 moveto
0.00265 0.02249 0.02249 0.00265 0.04167 0.00081 curveto
stroke
0.00507 0.08333 moveto
0.00214 0.06968 -0.00053 0.05556 0.00081 0.04167 curveto
stroke
0.01856 0.125 moveto
0.01346 0.11132 0.00813 0.09761 0.00507 0.08333 curveto
stroke
0.03751 0.16667 moveto
0.0307 0.15301 0.02389 0.1393 0.01856 0.125 curveto
stroke
0 0.18668 moveto
0.00419 0.19392 0.00823 0.20124 0.01265 0.20833 curveto
stroke
0.04167 0.17358 moveto
0.04044 0.17119 0.03871 0.16907 0.03751 0.16667 curveto
stroke
0.04167 0.24973 moveto
0.03216 0.23582 0.02155 0.22264 0.01265 0.20833 curveto
stroke
0 0.28206 moveto
0.00238 0.28516 0.00434 0.28858 0.00674 0.29167 curveto
stroke
0.04054 0.33333 moveto
0.02953 0.31924 0.01774 0.30577 0.00674 0.29167 curveto
stroke
0.04167 0.33464 moveto
0.04131 0.33419 0.0409 0.33379 0.04054 0.33333 curveto
stroke
0.04167 0.00081 moveto
0.05556 -0.00053 0.06968 0.00214 0.08333 0.00507 curveto
stroke
0.07512 0.125 moveto
0.07421 0.11255 0.07565 0.09831 0.08333 0.08848 curveto
stroke
0.08333 0.16152 moveto
0.0795 0.14965 0.07602 0.13745 0.07512 0.125 curveto
stroke
0.04167 0.17358 moveto
0.04765 0.18524 0.05353 0.19697 0.06005 0.20833 curveto
stroke
0.04167 0.24973 moveto
0.04173 0.24982 0.04178 0.24991 0.04184 0.25 curveto
stroke
0.08333 0.24493 moveto
0.07562 0.2327 0.06724 0.22088 0.06005 0.20833 curveto
stroke
0.07034 0.29167 moveto
0.06049 0.27802 0.05133 0.26389 0.04184 0.25 curveto
stroke
0.08333 0.30803 moveto
0.07921 0.30241 0.07442 0.29731 0.07034 0.29167 curveto
stroke
0.04167 0.33464 moveto
0.05212 0.34803 0.06209 0.36179 0.07275 0.375 curveto
stroke
0.08333 0.3871 moveto
0.07995 0.38294 0.07612 0.37917 0.07275 0.375 curveto
stroke
0.08333 0.00507 moveto
0.09761 0.00813 0.11132 0.01346 0.125 0.01856 curveto
stroke
0.08848 0.08333 moveto
0.09831 0.07565 0.11255 0.07421 0.125 0.07512 curveto
stroke
0.08333 0.08848 moveto
0.08483 0.08657 0.08657 0.08483 0.08848 0.08333 curveto
stroke
0.08333 0.16152 moveto
0.08387 0.16319 0.08379 0.16502 0.08437 0.16667 curveto
stroke
0.10232 0.20833 moveto
0.0958 0.19469 0.08935 0.18095 0.08437 0.16667 curveto
stroke
0.08333 0.24493 moveto
0.08437 0.24658 0.08517 0.24836 0.08622 0.25 curveto
stroke
0.12456 0.25 moveto
0.11667 0.23637 0.1091 0.22254 0.10232 0.20833 curveto
stroke
0.11369 0.29167 moveto
0.10425 0.27797 0.09517 0.26402 0.08622 0.25 curveto
stroke
0.125 0.25066 moveto
0.12487 0.25043 0.12469 0.25023 0.12456 0.25 curveto
stroke
0.08333 0.30803 moveto
0.08947 0.3164 0.09521 0.32506 0.10148 0.33333 curveto
stroke
0.125 0.30655 moveto
0.12142 0.30145 0.11722 0.2968 0.11369 0.29167 curveto
stroke
0.125 0.36204 moveto
0.11739 0.35228 0.10895 0.34319 0.10148 0.33333 curveto
stroke
0.08333 0.3871 moveto
0.09129 0.39689 0.09889 0.40698 0.10698 0.41667 curveto
stroke
0.125 0.43685 moveto
0.11918 0.42996 0.11276 0.42359 0.10698 0.41667 curveto
stroke
0.125 0.01856 moveto
0.1393 0.02389 0.15301 0.0307 0.16667 0.03751 curveto
stroke
0.125 0.07512 moveto
0.13745 0.07602 0.14965 0.0795 0.16152 0.08333 curveto
stroke
0.16667 0.08437 moveto
0.16502 0.08379 0.16319 0.08387 0.16152 0.08333 curveto
stroke
0.1441 0.16667 moveto
0.14673 0.15636 0.15636 0.14673 0.16667 0.1441 curveto
stroke
0.14704 0.20833 moveto
0.14337 0.1949 0.14065 0.18016 0.1441 0.16667 curveto
stroke
0.16235 0.25 moveto
0.15603 0.23662 0.15094 0.22261 0.14704 0.20833 curveto
stroke
0.125 0.25066 moveto
0.13303 0.26453 0.14141 0.2782 0.1501 0.29167 curveto
stroke
0.16667 0.25745 moveto
0.1654 0.25487 0.16357 0.25259 0.16235 0.25 curveto
stroke
0.125 0.30655 moveto
0.13125 0.31544 0.13716 0.32457 0.1436 0.33333 curveto
stroke
0.16667 0.31499 moveto
0.16132 0.3071 0.15527 0.29968 0.1501 0.29167 curveto
stroke
0.125 0.36204 moveto
0.12833 0.3663 0.13139 0.37076 0.13475 0.375 curveto
stroke
0.16667 0.3625 moveto
0.15915 0.35264 0.15094 0.34332 0.1436 0.33333 curveto
stroke
0.16667 0.41277 moveto
0.15619 0.40004 0.14499 0.38791 0.13475 0.375 curveto
stroke
0.125 0.43685 moveto
0.13101 0.44396 0.13676 0.45128 0.14283 0.45833 curveto
stroke
0.16667 0.48448 moveto
0.1589 0.47561 0.15053 0.46727 0.14283 0.45833 curveto
stroke
0.20833 0.01265 moveto
0.20124 0.00823 0.19392 0.00419 0.18668 0 curveto
stroke
0.16667 0.03751 moveto
0.16907 0.03871 0.17119 0.04044 0.17358 0.04167 curveto
stroke
0.20833 0.06005 moveto
0.19697 0.05353 0.18524 0.04765 0.17358 0.04167 curveto
stroke
0.16667 0.08437 moveto
0.18095 0.08935 0.19469 0.0958 0.20833 0.10232 curveto
stroke
0.16667 0.1441 moveto
0.18016 0.14065 0.1949 0.14337 0.20833 0.14704 curveto
stroke
0.20662 0.25 moveto
0.20552 0.24454 0.20791 0.23893 0.20833 0.23338 curveto
stroke
0.16667 0.25745 moveto
0.17238 0.26906 0.17853 0.28047 0.18502 0.29167 curveto
stroke
0.20833 0.25426 moveto
0.20798 0.25277 0.20693 0.2515 0.20662 0.25 curveto
stroke
0.16667 0.31499 moveto
0.17077 0.32105 0.17451 0.32735 0.17873 0.33333 curveto
stroke
0.20833 0.32871 moveto
0.20032 0.31652 0.19233 0.30429 0.18502 0.29167 curveto
stroke
0.16667 0.3625 moveto
0.1698 0.36661 0.17268 0.37092 0.17585 0.375 curveto
stroke
0.20833 0.37283 moveto
0.19841 0.35971 0.18821 0.34678 0.17873 0.33333 curveto
stroke
0.16667 0.41277 moveto
0.16772 0.41404 0.16869 0.41539 0.16974 0.41667 curveto
stroke
0.20833 0.41447 moveto
0.19756 0.40127 0.18631 0.38845 0.17585 0.375 curveto
stroke
0.20532 0.45833 moveto
0.19341 0.44449 0.18139 0.43074 0.16974 0.41667 curveto
stroke
0.16667 0.48448 moveto
0.17117 0.48962 0.1755 0.4949 0.18004 0.5 curveto
stroke
0.20833 0.46166 moveto
0.20736 0.46053 0.20629 0.45947 0.20532 0.45833 curveto
stroke
0.20833 0.53041 moveto
0.19904 0.52015 0.18924 0.51035 0.18004 0.5 curveto
stroke
0.20833 0.01265 moveto
0.22264 0.02155 0.23582 0.03216 0.24973 0.04167 curveto
stroke
0.25 0.04184 moveto
0.24991 0.04178 0.24982 0.04173 0.24973 0.04167 curveto
stroke
0.20833 0.06005 moveto
0.22088 0.06724 0.2327 0.07562 0.24493 0.08333 curveto
stroke
0.25 0.08622 moveto
0.24836 0.08517 0.24658 0.08437 0.24493 0.08333 curveto
stroke
0.20833 0.10232 moveto
0.22254 0.1091 0.23637 0.11667 0.25 0.12456 curveto
stroke
0.20833 0.14704 moveto
0.22261 0.15094 0.23662 0.15603 0.25 0.16235 curveto
stroke
0.23338 0.20833 moveto
0.23893 0.20791 0.24454 0.20552 0.25 0.20662 curveto
stroke
0.20833 0.23338 moveto
0.20923 0.22161 0.22161 0.20923 0.23338 0.20833 curveto
stroke
0.20833 0.25426 moveto
0.21138 0.26725 0.21709 0.2795 0.22256 0.29167 curveto
stroke
0.20833 0.32871 moveto
0.20932 0.33021 0.21008 0.33184 0.21107 0.33333 curveto
stroke
0.24397 0.33333 moveto
0.23598 0.31992 0.22897 0.30591 0.22256 0.29167 curveto
stroke
0.20833 0.37283 moveto
0.20887 0.37354 0.20933 0.3743 0.20986 0.375 curveto
stroke
0.24027 0.375 moveto
0.23026 0.36131 0.22047 0.34745 0.21107 0.33333 curveto
stroke
0.25 0.34218 moveto
0.24813 0.33914 0.24579 0.3364 0.24397 0.33333 curveto
stroke
0.20833 0.41447 moveto
0.20892 0.41519 0.20945 0.41595 0.21004 0.41667 curveto
stroke
0.24235 0.41667 moveto
0.2313 0.40296 0.22052 0.38903 0.20986 0.375 curveto
stroke
0.25 0.3873 moveto
0.24687 0.38312 0.24336 0.37922 0.24027 0.375 curveto
stroke
0.24486 0.45833 moveto
0.23308 0.44459 0.2215 0.43067 0.21004 0.41667 curveto
stroke
0.25 0.4256 moveto
0.24753 0.42256 0.24482 0.41972 0.24235 0.41667 curveto
stroke
0.20833 0.46166 moveto
0.21936 0.47446 0.23024 0.4874 0.24149 0.5 curveto
stroke
0.25 0.46406 moveto
0.24833 0.46211 0.24653 0.46028 0.24486 0.45833 curveto
stroke
0.20833 0.53041 moveto
0.21172 0.53414 0.215 0.53795 0.21841 0.54167 curveto
stroke
0.25 0.50917 moveto
0.24721 0.50606 0.24427 0.50311 0.24149 0.5 curveto
stroke
0.25 0.57493 moveto
0.23955 0.56377 0.22874 0.55294 0.21841 0.54167 curveto
stroke
0.29167 0.00674 moveto
0.28858 0.00434 0.28516 0.00238 0.28206 0 curveto
stroke
0.25 0.04184 moveto
0.26389 0.05133 0.27802 0.06049 0.29167 0.07034 curveto
stroke
0.25 0.08622 moveto
0.26402 0.09517 0.27797 0.10425 0.29167 0.11369 curveto
stroke
0.25 0.12456 moveto
0.25023 0.12469 0.25043 0.12487 0.25066 0.125 curveto
stroke
0.29167 0.1501 moveto
0.2782 0.14141 0.26453 0.13303 0.25066 0.125 curveto
stroke
0.25 0.16235 moveto
0.25259 0.16357 0.25487 0.1654 0.25745 0.16667 curveto
stroke
0.29167 0.18502 moveto
0.28047 0.17853 0.26906 0.17238 0.25745 0.16667 curveto
stroke
0.25 0.20662 moveto
0.2515 0.20693 0.25277 0.20798 0.25426 0.20833 curveto
stroke
0.29167 0.22256 moveto
0.2795 0.21709 0.26725 0.21138 0.25426 0.20833 curveto
stroke
0.27708 0.29167 moveto
0.2787 0.28498 0.28498 0.2787 0.29167 0.27708 curveto
stroke
0.28371 0.33333 moveto
0.27832 0.32034 0.27377 0.30534 0.27708 0.29167 curveto
stroke
0.25 0.34218 moveto
0.25685 0.35331 0.26403 0.36424 0.27143 0.375 curveto
stroke
0.29167 0.34792 moveto
0.28924 0.34294 0.28583 0.33845 0.28371 0.33333 curveto
stroke
0.25 0.3873 moveto
0.25735 0.39714 0.26463 0.40703 0.27224 0.41667 curveto
stroke
0.29167 0.40244 moveto
0.28491 0.3933 0.27788 0.38436 0.27143 0.375 curveto
stroke
0.25 0.4256 moveto
0.25892 0.43655 0.26776 0.44758 0.27692 0.45833 curveto
stroke
0.29167 0.43998 moveto
0.28526 0.43215 0.27851 0.42461 0.27224 0.41667 curveto
stroke
0.25 0.46406 moveto
0.26035 0.47608 0.27061 0.48818 0.28119 0.5 curveto
stroke
0.29167 0.4749 moveto
0.28683 0.46931 0.28171 0.46396 0.27692 0.45833 curveto
stroke
0.25 0.50917 moveto
0.25974 0.52002 0.26939 0.53096 0.2793 0.54167 curveto
stroke
0.29167 0.51131 moveto
0.28822 0.50749 0.28461 0.50383 0.28119 0.5 curveto
stroke
0.25 0.57493 moveto
0.25261 0.57772 0.25518 0.58055 0.2578 0.58333 curveto
stroke
0.29167 0.55466 moveto
0.28759 0.55029 0.28336 0.54605 0.2793 0.54167 curveto
stroke
0.29167 0.61826 moveto
0.2804 0.6066 0.26894 0.59512 0.2578 0.58333 curveto
stroke
0.29167 0.00674 moveto
0.30577 0.01774 0.31924 0.02953 0.33333 0.04054 curveto
stroke
0.29167 0.07034 moveto
0.29731 0.07442 0.30241 0.07921 0.30803 0.08333 curveto
stroke
0.33333 0.10148 moveto
0.32506 0.09521 0.3164 0.08947 0.30803 0.08333 curveto
stroke
0.29167 0.11369 moveto
0.2968 0.11722 0.30145 0.12142 0.30655 0.125 curveto
stroke
0.33333 0.1436 moveto
0.32457 0.13716 0.31544 0.13125 0.30655 0.125 curveto
stroke
0.29167 0.1501 moveto
0.29968 0.15527 0.3071 0.16132 0.31499 0.16667 curveto
stroke
0.33333 0.17873 moveto
0.32735 0.17451 0.32105 0.17077 0.31499 0.16667 curveto
stroke
0.29167 0.18502 moveto
0.30429 0.19233 0.31652 0.20032 0.32871 0.20833 curveto
stroke
0.33333 0.21107 moveto
0.33184 0.21008 0.33021 0.20932 0.32871 0.20833 curveto
stroke
0.29167 0.22256 moveto
0.30591 0.22897 0.31992 0.23598 0.33333 0.24397 curveto
stroke
0.29167 0.27708 moveto
0.30534 0.27377 0.32034 0.27832 0.33333 0.28371 curveto
stroke
0.29167 0.34792 moveto
0.29616 0.35713 0.30094 0.36622 0.30622 0.375 curveto
stroke
0.29167 0.40244 moveto
0.29514 0.40714 0.29834 0.41203 0.3019 0.41667 curveto
stroke
0.33263 0.41667 moveto
0.32297 0.40336 0.31469 0.3891 0.30622 0.375 curveto
stroke
0.29167 0.43998 moveto
0.29666 0.44608 0.30149 0.45231 0.30657 0.45833 curveto
stroke
0.33333 0.45613 moveto
0.32258 0.4432 0.31213 0.43002 0.3019 0.41667 curveto
stroke
0.33333 0.41755 moveto
0.33311 0.41724 0.33285 0.41697 0.33263 0.41667 curveto
stroke
0.29167 0.4749 moveto
0.29893 0.48328 0.3061 0.49174 0.3135 0.5 curveto
stroke
0.33333 0.48881 moveto
0.3244 0.47866 0.31529 0.46866 0.30657 0.45833 curveto
stroke
0.29167 0.51131 moveto
0.30083 0.52146 0.30995 0.53167 0.31928 0.54167 curveto
stroke
0.33333 0.52144 moveto
0.32676 0.51426 0.31999 0.50725 0.3135 0.5 curveto
stroke
0.29167 0.55466 moveto
0.30062 0.56425 0.30953 0.57387 0.31861 0.58333 curveto
stroke
0.33333 0.55637 moveto
0.32868 0.55144 0.32391 0.54662 0.31928 0.54167 curveto
stroke
0.29167 0.61826 moveto
0.29384 0.6205 0.29599 0.62276 0.29816 0.625 curveto
stroke
0.33333 0.59842 moveto
0.32844 0.59338 0.32348 0.5884 0.31861 0.58333 curveto
stroke
0.33333 0.66053 moveto
0.32157 0.64873 0.30979 0.63694 0.29816 0.625 curveto
stroke
0.33333 0.04054 moveto
0.33379 0.0409 0.33419 0.04131 0.33464 0.04167 curveto
stroke
0.375 0.07275 moveto
0.36179 0.06209 0.34803 0.05212 0.33464 0.04167 curveto
stroke
0.33333 0.10148 moveto
0.34319 0.10895 0.35228 0.11739 0.36204 0.125 curveto
stroke
0.375 0.13475 moveto
0.37076 0.13139 0.3663 0.12833 0.36204 0.125 curveto
stroke
0.33333 0.1436 moveto
0.34332 0.15094 0.35264 0.15915 0.3625 0.16667 curveto
stroke
0.375 0.17585 moveto
0.37092 0.17268 0.36661 0.1698 0.3625 0.16667 curveto
stroke
0.33333 0.17873 moveto
0.34678 0.18821 0.35971 0.19841 0.37283 0.20833 curveto
stroke
0.375 0.20986 moveto
0.3743 0.20933 0.37354 0.20887 0.37283 0.20833 curveto
stroke
0.33333 0.21107 moveto
0.34745 0.22047 0.36131 0.23026 0.375 0.24027 curveto
stroke
0.33333 0.24397 moveto
0.3364 0.24579 0.33914 0.24813 0.34218 0.25 curveto
stroke
0.375 0.27143 moveto
0.36424 0.26403 0.35331 0.25685 0.34218 0.25 curveto
stroke
0.33333 0.28371 moveto
0.33845 0.28583 0.34294 0.28924 0.34792 0.29167 curveto
stroke
0.375 0.30622 moveto
0.36622 0.30094 0.35713 0.29616 0.34792 0.29167 curveto
stroke
0.36068 0.375 moveto
0.36072 0.36825 0.36825 0.36072 0.375 0.36068 curveto
stroke
0.37319 0.41667 moveto
0.3658 0.40419 0.36059 0.3895 0.36068 0.375 curveto
stroke
0.33333 0.45613 moveto
0.33393 0.45685 0.33448 0.45761 0.33508 0.45833 curveto
stroke
0.33333 0.41755 moveto
0.34354 0.43156 0.35463 0.4449 0.36559 0.45833 curveto
stroke
0.375 0.41918 moveto
0.37447 0.4183 0.37372 0.41755 0.37319 0.41667 curveto
stroke
0.33333 0.48881 moveto
0.3366 0.49252 0.33977 0.49632 0.34308 0.5 curveto
stroke
0.37122 0.5 moveto
0.35893 0.48632 0.34686 0.47245 0.33508 0.45833 curveto
stroke
0.375 0.46928 moveto
0.37191 0.46559 0.36863 0.46206 0.36559 0.45833 curveto
stroke
0.33333 0.52144 moveto
0.33952 0.52819 0.34566 0.535 0.35194 0.54167 curveto
stroke
0.375 0.53451 moveto
0.36427 0.52308 0.35354 0.51166 0.34308 0.5 curveto
stroke
0.375 0.50409 moveto
0.37376 0.50271 0.37246 0.50138 0.37122 0.5 curveto
stroke
0.33333 0.55637 moveto
0.34186 0.5654 0.35039 0.57443 0.35905 0.58333 curveto
stroke
0.375 0.56564 moveto
0.3673 0.55766 0.35954 0.54974 0.35194 0.54167 curveto
stroke
0.33333 0.59842 moveto
0.34196 0.60733 0.35062 0.61621 0.35937 0.625 curveto
stroke
0.375 0.59953 moveto
0.36968 0.59413 0.36433 0.58876 0.35905 0.58333 curveto
stroke
0.33333 0.66053 moveto
0.33537 0.66258 0.33742 0.66463 0.33947 0.66667 curveto
stroke
0.375 0.64063 moveto
0.36978 0.63544 0.36456 0.63022 0.35937 0.625 curveto
stroke
0.375 0.70184 moveto
0.36306 0.69021 0.35127 0.67843 0.33947 0.66667 curveto
stroke
0.375 0.07275 moveto
0.37917 0.07612 0.38294 0.07995 0.3871 0.08333 curveto
stroke
0.41667 0.10698 moveto
0.40698 0.09889 0.39689 0.09129 0.3871 0.08333 curveto
stroke
0.375 0.13475 moveto
0.38791 0.14499 0.40004 0.15619 0.41277 0.16667 curveto
stroke
0.41667 0.16974 moveto
0.41539 0.16869 0.41404 0.16772 0.41277 0.16667 curveto
stroke
0.375 0.17585 moveto
0.38845 0.18631 0.40127 0.19756 0.41447 0.20833 curveto
stroke
0.41667 0.21004 moveto
0.41595 0.20945 0.41519 0.20892 0.41447 0.20833 curveto
stroke
0.375 0.20986 moveto
0.38903 0.22052 0.40296 0.2313 0.41667 0.24235 curveto
stroke
0.375 0.24027 moveto
0.37922 0.24336 0.38312 0.24687 0.3873 0.25 curveto
stroke
0.41667 0.27224 moveto
0.40703 0.26463 0.39714 0.25735 0.3873 0.25 curveto
stroke
0.375 0.27143 moveto
0.38436 0.27788 0.3933 0.28491 0.40244 0.29167 curveto
stroke
0.41667 0.3019 moveto
0.41203 0.29834 0.40714 0.29514 0.40244 0.29167 curveto
stroke
0.375 0.30622 moveto
0.3891 0.31469 0.40336 0.32297 0.41667 0.33263 curveto
stroke
0.375 0.36068 moveto
0.3895 0.36059 0.40419 0.3658 0.41667 0.37319 curveto
stroke
0.375 0.41918 moveto
0.38338 0.43306 0.39405 0.44543 0.40388 0.45833 curveto
stroke
0.375 0.46928 moveto
0.38369 0.47969 0.39262 0.48991 0.40169 0.5 curveto
stroke
0.41667 0.47389 moveto
0.41244 0.46867 0.40794 0.46367 0.40388 0.45833 curveto
stroke
0.375 0.53451 moveto
0.37723 0.53689 0.37943 0.5393 0.38168 0.54167 curveto
stroke
0.375 0.50409 moveto
0.38648 0.5168 0.39819 0.52932 0.41006 0.54167 curveto
stroke
0.41667 0.51615 moveto
0.41167 0.51077 0.4066 0.50546 0.40169 0.5 curveto
stroke
0.375 0.56564 moveto
0.38071 0.57156 0.38643 0.57748 0.39221 0.58333 curveto
stroke
0.41667 0.57757 moveto
0.40488 0.56573 0.39319 0.55378 0.38168 0.54167 curveto
stroke
0.41667 0.54844 moveto
0.41447 0.54618 0.41225 0.54394 0.41006 0.54167 curveto
stroke
0.375 0.59953 moveto
0.38343 0.60808 0.39192 0.61657 0.40047 0.625 curveto
stroke
0.41667 0.60779 moveto
0.40846 0.59969 0.40031 0.59154 0.39221 0.58333 curveto
stroke
0.375 0.64063 moveto
0.38379 0.64938 0.39267 0.65804 0.40158 0.66667 curveto
stroke
0.41667 0.64095 moveto
0.41124 0.63567 0.40587 0.63032 0.40047 0.625 curveto
stroke
0.375 0.70184 moveto
0.37724 0.70401 0.3795 0.70616 0.38174 0.70833 curveto
stroke
0.41667 0.68139 moveto
0.4116 0.67652 0.40662 0.67156 0.40158 0.66667 curveto
stroke
0.41667 0.7422 moveto
0.40488 0.73106 0.3934 0.7196 0.38174 0.70833 curveto
stroke
0.41667 0.10698 moveto
0.42359 0.11276 0.42996 0.11918 0.43685 0.125 curveto
stroke
0.45833 0.14283 moveto
0.45128 0.13676 0.44396 0.13101 0.43685 0.125 curveto
stroke
0.41667 0.16974 moveto
0.43074 0.18139 0.44449 0.19341 0.45833 0.20532 curveto
stroke
0.41667 0.21004 moveto
0.43067 0.2215 0.44459 0.23308 0.45833 0.24486 curveto
stroke
0.41667 0.24235 moveto
0.41972 0.24482 0.42256 0.24753 0.4256 0.25 curveto
stroke
0.45833 0.27692 moveto
0.44758 0.26776 0.43655 0.25892 0.4256 0.25 curveto
stroke
0.41667 0.27224 moveto
0.42461 0.27851 0.43215 0.28526 0.43998 0.29167 curveto
stroke
0.45833 0.30657 moveto
0.45231 0.30149 0.44608 0.29666 0.43998 0.29167 curveto
stroke
0.41667 0.3019 moveto
0.43002 0.31213 0.4432 0.32258 0.45613 0.33333 curveto
stroke
0.41667 0.33263 moveto
0.41697 0.33285 0.41724 0.33311 0.41755 0.33333 curveto
stroke
0.45833 0.33508 moveto
0.45761 0.33448 0.45685 0.33393 0.45613 0.33333 curveto
stroke
0.45833 0.36559 moveto
0.4449 0.35463 0.43156 0.34354 0.41755 0.33333 curveto
stroke
0.41667 0.37319 moveto
0.41755 0.37372 0.4183 0.37447 0.41918 0.375 curveto
stroke
0.45833 0.40388 moveto
0.44543 0.39405 0.43306 0.38338 0.41918 0.375 curveto
stroke
0.41667 0.47389 moveto
0.4239 0.4828 0.43143 0.49147 0.43911 0.5 curveto
stroke
0.41667 0.51615 moveto
0.42466 0.52477 0.43277 0.53328 0.44101 0.54167 curveto
stroke
0.45833 0.52051 moveto
0.45184 0.51376 0.44538 0.50697 0.43911 0.5 curveto
stroke
0.41667 0.57757 moveto
0.41858 0.5795 0.4205 0.58142 0.42243 0.58333 curveto
stroke
0.41667 0.54844 moveto
0.42812 0.56025 0.43975 0.57188 0.45156 0.58333 curveto
stroke
0.45833 0.55899 moveto
0.45251 0.55326 0.44674 0.54749 0.44101 0.54167 curveto
stroke
0.41667 0.60779 moveto
0.42252 0.61357 0.42844 0.61929 0.43436 0.625 curveto
stroke
0.45833 0.61832 moveto
0.44622 0.60681 0.43427 0.59512 0.42243 0.58333 curveto
stroke
0.45833 0.58994 moveto
0.45606 0.58775 0.45382 0.58553 0.45156 0.58333 curveto
stroke
0.41667 0.64095 moveto
0.42557 0.64961 0.4346 0.65814 0.44363 0.66667 curveto
stroke
0.45833 0.64806 moveto
0.45026 0.64046 0.44234 0.6327 0.43436 0.625 curveto
stroke
0.41667 0.68139 moveto
0.42613 0.69047 0.43575 0.69938 0.44534 0.70833 curveto
stroke
0.45833 0.68072 moveto
0.45338 0.67609 0.44856 0.67132 0.44363 0.66667 curveto
stroke
0.41667 0.7422 moveto
0.41945 0.74482 0.42228 0.74739 0.42507 0.75 curveto
stroke
0.45833 0.7207 moveto
0.45395 0.71664 0.44971 0.71241 0.44534 0.70833 curveto
stroke
0.45833 0.78159 moveto
0.44706 0.77126 0.43623 0.76045 0.42507 0.75 curveto
stroke
0.45833 0.14283 moveto
0.46727 0.15053 0.47561 0.1589 0.48448 0.16667 curveto
stroke
0.5 0.18004 moveto
0.4949 0.1755 0.48962 0.17117 0.48448 0.16667 curveto
stroke
0.45833 0.20532 moveto
0.45947 0.20629 0.46053 0.20736 0.46166 0.20833 curveto
stroke
0.5 0.24149 moveto
0.4874 0.23024 0.47446 0.21936 0.46166 0.20833 curveto
stroke
0.45833 0.24486 moveto
0.46028 0.24653 0.46211 0.24833 0.46406 0.25 curveto
stroke
0.5 0.28119 moveto
0.48818 0.27061 0.47608 0.26035 0.46406 0.25 curveto
stroke
0.45833 0.27692 moveto
0.46396 0.28171 0.46931 0.28683 0.4749 0.29167 curveto
stroke
0.5 0.3135 moveto
0.49174 0.3061 0.48328 0.29893 0.4749 0.29167 curveto
stroke
0.45833 0.30657 moveto
0.46866 0.31529 0.47866 0.3244 0.48881 0.33333 curveto
stroke
0.5 0.34308 moveto
0.49632 0.33977 0.49252 0.3366 0.48881 0.33333 curveto
stroke
0.45833 0.33508 moveto
0.47245 0.34686 0.48632 0.35893 0.5 0.37122 curveto
stroke
0.45833 0.36559 moveto
0.46206 0.36863 0.46559 0.37191 0.46928 0.375 curveto
stroke
0.5 0.40169 moveto
0.48991 0.39262 0.47969 0.38369 0.46928 0.375 curveto
stroke
0.45833 0.40388 moveto
0.46367 0.40794 0.46867 0.41244 0.47389 0.41667 curveto
stroke
0.5 0.43911 moveto
0.49147 0.43143 0.4828 0.4239 0.47389 0.41667 curveto
stroke
0.45833 0.52051 moveto
0.46525 0.5277 0.4723 0.53475 0.47949 0.54167 curveto
stroke
0.45833 0.55899 moveto
0.46672 0.56723 0.47523 0.57534 0.48385 0.58333 curveto
stroke
0.5 0.56089 moveto
0.49303 0.55462 0.48624 0.54816 0.47949 0.54167 curveto
stroke
0.45833 0.61832 moveto
0.4607 0.62057 0.46311 0.62277 0.46549 0.625 curveto
stroke
0.45833 0.58994 moveto
0.47068 0.60181 0.4832 0.61352 0.49591 0.625 curveto
stroke
0.5 0.59831 moveto
0.49454 0.5934 0.48923 0.58833 0.48385 0.58333 curveto
stroke
0.45833 0.64806 moveto
0.465 0.65434 0.47181 0.66048 0.47856 0.66667 curveto
stroke
0.5 0.65692 moveto
0.48834 0.64646 0.47692 0.63573 0.46549 0.625 curveto
stroke
0.5 0.62878 moveto
0.49862 0.62754 0.49729 0.62624 0.49591 0.625 curveto
stroke
0.45833 0.68072 moveto
0.46833 0.69005 0.47854 0.69917 0.48869 0.70833 curveto
stroke
0.5 0.6865 moveto
0.49275 0.68001 0.48574 0.67324 0.47856 0.66667 curveto
stroke
0.45833 0.7207 moveto
0.46904 0.73061 0.47998 0.74026 0.49083 0.75 curveto
stroke
0.5 0.71881 moveto
0.49617 0.71539 0.49251 0.71178 0.48869 0.70833 curveto
stroke
0.45833 0.78159 moveto
0.46205 0.785 0.46586 0.78828 0.46959 0.79167 curveto
stroke
0.5 0.75851 moveto
0.49689 0.75573 0.49394 0.75279 0.49083 0.75 curveto
stroke
0.5 0.81996 moveto
0.48965 0.81076 0.47985 0.80096 0.46959 0.79167 curveto
stroke
0.5 0.18004 moveto
0.51035 0.18924 0.52015 0.19904 0.53041 0.20833 curveto
stroke
0.54167 0.21841 moveto
0.53795 0.215 0.53414 0.21172 0.53041 0.20833 curveto
stroke
0.5 0.24149 moveto
0.50311 0.24427 0.50606 0.24721 0.50917 0.25 curveto
stroke
0.54167 0.2793 moveto
0.53096 0.26939 0.52002 0.25974 0.50917 0.25 curveto
stroke
0.5 0.28119 moveto
0.50383 0.28461 0.50749 0.28822 0.51131 0.29167 curveto
stroke
0.54167 0.31928 moveto
0.53167 0.30995 0.52146 0.30083 0.51131 0.29167 curveto
stroke
0.5 0.3135 moveto
0.50725 0.31999 0.51426 0.32676 0.52144 0.33333 curveto
stroke
0.54167 0.35194 moveto
0.535 0.34566 0.52819 0.33952 0.52144 0.33333 curveto
stroke
0.5 0.34308 moveto
0.51166 0.35354 0.52308 0.36427 0.53451 0.375 curveto
stroke
0.5 0.37122 moveto
0.50138 0.37246 0.50271 0.37376 0.50409 0.375 curveto
stroke
0.54167 0.38168 moveto
0.5393 0.37943 0.53689 0.37723 0.53451 0.375 curveto
stroke
0.54167 0.41006 moveto
0.52932 0.39819 0.5168 0.38648 0.50409 0.375 curveto
stroke
0.5 0.40169 moveto
0.50546 0.4066 0.51077 0.41167 0.51615 0.41667 curveto
stroke
0.54167 0.44101 moveto
0.53328 0.43277 0.52477 0.42466 0.51615 0.41667 curveto
stroke
0.5 0.43911 moveto
0.50697 0.44538 0.51376 0.45184 0.52051 0.45833 curveto
stroke
0.54167 0.47949 moveto
0.53475 0.4723 0.5277 0.46525 0.52051 0.45833 curveto
stroke
0.5 0.56089 moveto
0.50853 0.56857 0.5172 0.5761 0.52611 0.58333 curveto
stroke
0.5 0.59831 moveto
0.51009 0.60738 0.52031 0.61631 0.53072 0.625 curveto
stroke
0.54167 0.59612 moveto
0.53633 0.59206 0.53133 0.58756 0.52611 0.58333 curveto
stroke
0.5 0.65692 moveto
0.50368 0.66023 0.50748 0.6634 0.51119 0.66667 curveto
stroke
0.5 0.62878 moveto
0.51368 0.64107 0.52755 0.65314 0.54167 0.66492 curveto
stroke
0.54167 0.63441 moveto
0.53794 0.63137 0.53441 0.62809 0.53072 0.625 curveto
stroke
0.5 0.6865 moveto
0.50826 0.6939 0.51672 0.70107 0.5251 0.70833 curveto
stroke
0.54167 0.69343 moveto
0.53134 0.68471 0.52134 0.6756 0.51119 0.66667 curveto
stroke
0.5 0.71881 moveto
0.51182 0.72939 0.52392 0.73965 0.53594 0.75 curveto
stroke
0.54167 0.72308 moveto
0.53604 0.71829 0.53069 0.71317 0.5251 0.70833 curveto
stroke
0.5 0.75851 moveto
0.5126 0.76976 0.52554 0.78064 0.53834 0.79167 curveto
stroke
0.54167 0.75514 moveto
0.53972 0.75347 0.53789 0.75167 0.53594 0.75 curveto
stroke
0.5 0.81996 moveto
0.5051 0.8245 0.51038 0.82883 0.51552 0.83333 curveto
stroke
0.54167 0.79468 moveto
0.54053 0.79371 0.53947 0.79264 0.53834 0.79167 curveto
stroke
0.54167 0.85717 moveto
0.53273 0.84947 0.52439 0.8411 0.51552 0.83333 curveto
stroke
0.54167 0.21841 moveto
0.55294 0.22874 0.56377 0.23955 0.57493 0.25 curveto
stroke
0.58333 0.2578 moveto
0.58055 0.25518 0.57772 0.25261 0.57493 0.25 curveto
stroke
0.54167 0.2793 moveto
0.54605 0.28336 0.55029 0.28759 0.55466 0.29167 curveto
stroke
0.58333 0.31861 moveto
0.57387 0.30953 0.56425 0.30062 0.55466 0.29167 curveto
stroke
0.54167 0.31928 moveto
0.54662 0.32391 0.55144 0.32868 0.55637 0.33333 curveto
stroke
0.58333 0.35905 moveto
0.57443 0.35039 0.5654 0.34186 0.55637 0.33333 curveto
stroke
0.54167 0.35194 moveto
0.54974 0.35954 0.55766 0.3673 0.56564 0.375 curveto
stroke
0.58333 0.39221 moveto
0.57748 0.38643 0.57156 0.38071 0.56564 0.375 curveto
stroke
0.54167 0.38168 moveto
0.55378 0.39319 0.56573 0.40488 0.57757 0.41667 curveto
stroke
0.54167 0.41006 moveto
0.54394 0.41225 0.54618 0.41447 0.54844 0.41667 curveto
stroke
0.58333 0.42243 moveto
0.58142 0.4205 0.5795 0.41858 0.57757 0.41667 curveto
stroke
0.58333 0.45156 moveto
0.57188 0.43975 0.56025 0.42812 0.54844 0.41667 curveto
stroke
0.54167 0.44101 moveto
0.54749 0.44674 0.55326 0.45251 0.55899 0.45833 curveto
stroke
0.58333 0.48385 moveto
0.57534 0.47523 0.56723 0.46672 0.55899 0.45833 curveto
stroke
0.54167 0.47949 moveto
0.54816 0.48624 0.55462 0.49303 0.56089 0.5 curveto
stroke
0.58333 0.52611 moveto
0.5761 0.5172 0.56857 0.50853 0.56089 0.5 curveto
stroke
0.54167 0.59612 moveto
0.55457 0.60595 0.56694 0.61662 0.58082 0.625 curveto
stroke
0.54167 0.66492 moveto
0.54239 0.66552 0.54315 0.66607 0.54387 0.66667 curveto
stroke
0.54167 0.63441 moveto
0.5551 0.64537 0.56844 0.65646 0.58245 0.66667 curveto
stroke
0.58333 0.62681 moveto
0.58245 0.62628 0.5817 0.62553 0.58082 0.625 curveto
stroke
0.54167 0.69343 moveto
0.54769 0.69851 0.55392 0.70334 0.56002 0.70833 curveto
stroke
0.58333 0.6981 moveto
0.56998 0.68787 0.5568 0.67742 0.54387 0.66667 curveto
stroke
0.58333 0.66737 moveto
0.58303 0.66715 0.58276 0.66689 0.58245 0.66667 curveto
stroke
0.54167 0.72308 moveto
0.55242 0.73224 0.56345 0.74108 0.5744 0.75 curveto
stroke
0.58333 0.72776 moveto
0.57539 0.72149 0.56785 0.71474 0.56002 0.70833 curveto
stroke
0.54167 0.75514 moveto
0.55541 0.76692 0.56933 0.7785 0.58333 0.78996 curveto
stroke
0.58333 0.75765 moveto
0.58028 0.75518 0.57744 0.75247 0.5744 0.75 curveto
stroke
0.54167 0.79468 moveto
0.55551 0.80659 0.56926 0.81861 0.58333 0.83026 curveto
stroke
0.54167 0.85717 moveto
0.54872 0.86324 0.55604 0.86899 0.56315 0.875 curveto
stroke
0.58333 0.89302 moveto
0.57641 0.88724 0.57004 0.88082 0.56315 0.875 curveto
stroke
0.58333 0.2578 moveto
0.59512 0.26894 0.6066 0.2804 0.61826 0.29167 curveto
stroke
0.625 0.29816 moveto
0.62276 0.29599 0.6205 0.29384 0.61826 0.29167 curveto
stroke
0.58333 0.31861 moveto
0.5884 0.32348 0.59338 0.32844 0.59842 0.33333 curveto
stroke
0.625 0.35937 moveto
0.61621 0.35062 0.60733 0.34196 0.59842 0.33333 curveto
stroke
0.58333 0.35905 moveto
0.58876 0.36433 0.59413 0.36968 0.59953 0.375 curveto
stroke
0.625 0.40047 moveto
0.61657 0.39192 0.60808 0.38343 0.59953 0.375 curveto
stroke
0.58333 0.39221 moveto
0.59154 0.40031 0.59969 0.40846 0.60779 0.41667 curveto
stroke
0.625 0.43436 moveto
0.61929 0.42844 0.61357 0.42252 0.60779 0.41667 curveto
stroke
0.58333 0.42243 moveto
0.59512 0.43427 0.60681 0.44622 0.61832 0.45833 curveto
stroke
0.58333 0.45156 moveto
0.58553 0.45382 0.58775 0.45606 0.58994 0.45833 curveto
stroke
0.625 0.46549 moveto
0.62277 0.46311 0.62057 0.4607 0.61832 0.45833 curveto
stroke
0.625 0.49591 moveto
0.61352 0.4832 0.60181 0.47068 0.58994 0.45833 curveto
stroke
0.58333 0.48385 moveto
0.58833 0.48923 0.5934 0.49454 0.59831 0.5 curveto
stroke
0.625 0.53072 moveto
0.61631 0.52031 0.60738 0.51009 0.59831 0.5 curveto
stroke
0.58333 0.52611 moveto
0.58756 0.53133 0.59206 0.53633 0.59612 0.54167 curveto
stroke
0.625 0.58082 moveto
0.61662 0.56694 0.60595 0.55457 0.59612 0.54167 curveto
stroke
0.58333 0.62681 moveto
0.59581 0.6342 0.6105 0.63941 0.625 0.63932 curveto
stroke
0.58333 0.6981 moveto
0.58797 0.70166 0.59286 0.70486 0.59756 0.70833 curveto
stroke
0.58333 0.66737 moveto
0.59664 0.67703 0.6109 0.68531 0.625 0.69378 curveto
stroke
0.58333 0.72776 moveto
0.59297 0.73537 0.60286 0.74265 0.6127 0.75 curveto
stroke
0.625 0.72857 moveto
0.61564 0.72212 0.6067 0.71509 0.59756 0.70833 curveto
stroke
0.58333 0.78996 moveto
0.58405 0.79055 0.58481 0.79108 0.58553 0.79167 curveto
stroke
0.58333 0.75765 moveto
0.59704 0.7687 0.61097 0.77948 0.625 0.79014 curveto
stroke
0.625 0.75973 moveto
0.62078 0.75664 0.61688 0.75313 0.6127 0.75 curveto
stroke
0.58333 0.83026 moveto
0.58461 0.83131 0.58596 0.83228 0.58723 0.83333 curveto
stroke
0.625 0.82415 moveto
0.61155 0.81369 0.59873 0.80244 0.58553 0.79167 curveto
stroke
0.625 0.86525 moveto
0.61209 0.85501 0.59996 0.84381 0.58723 0.83333 curveto
stroke
0.58333 0.89302 moveto
0.59302 0.90111 0.60311 0.90871 0.6129 0.91667 curveto
stroke
0.625 0.92725 moveto
0.62083 0.92388 0.61706 0.92005 0.6129 0.91667 curveto
stroke
0.625 0.29816 moveto
0.63694 0.30979 0.64873 0.32157 0.66053 0.33333 curveto
stroke
0.66667 0.33947 moveto
0.66463 0.33742 0.66258 0.33537 0.66053 0.33333 curveto
stroke
0.625 0.35937 moveto
0.63022 0.36456 0.63544 0.36978 0.64063 0.375 curveto
stroke
0.66667 0.40158 moveto
0.65804 0.39267 0.64938 0.38379 0.64063 0.375 curveto
stroke
0.625 0.40047 moveto
0.63032 0.40587 0.63567 0.41124 0.64095 0.41667 curveto
stroke
0.66667 0.44363 moveto
0.65814 0.4346 0.64961 0.42557 0.64095 0.41667 curveto
stroke
0.625 0.43436 moveto
0.6327 0.44234 0.64046 0.45026 0.64806 0.45833 curveto
stroke
0.66667 0.47856 moveto
0.66048 0.47181 0.65434 0.465 0.64806 0.45833 curveto
stroke
0.625 0.46549 moveto
0.63573 0.47692 0.64646 0.48834 0.65692 0.5 curveto
stroke
0.625 0.49591 moveto
0.62624 0.49729 0.62754 0.49862 0.62878 0.5 curveto
stroke
0.66667 0.51119 moveto
0.6634 0.50748 0.66023 0.50368 0.65692 0.5 curveto
stroke
0.66492 0.54167 moveto
0.65314 0.52755 0.64107 0.51368 0.62878 0.5 curveto
stroke
0.625 0.53072 moveto
0.62809 0.53441 0.63137 0.53794 0.63441 0.54167 curveto
stroke
0.66667 0.54387 moveto
0.66607 0.54315 0.66552 0.54239 0.66492 0.54167 curveto
stroke
0.66667 0.58245 moveto
0.65646 0.56844 0.64537 0.5551 0.63441 0.54167 curveto
stroke
0.625 0.58082 moveto
0.62553 0.5817 0.62628 0.58245 0.62681 0.58333 curveto
stroke
0.63932 0.625 moveto
0.63941 0.6105 0.6342 0.59581 0.62681 0.58333 curveto
stroke
0.625 0.63932 moveto
0.63175 0.63928 0.63928 0.63175 0.63932 0.625 curveto
stroke
0.625 0.69378 moveto
0.63378 0.69906 0.64287 0.70384 0.65208 0.70833 curveto
stroke
0.625 0.72857 moveto
0.63576 0.73597 0.64669 0.74315 0.65782 0.75 curveto
stroke
0.66667 0.71629 moveto
0.66155 0.71417 0.65706 0.71076 0.65208 0.70833 curveto
stroke
0.625 0.79014 moveto
0.6257 0.79067 0.62646 0.79113 0.62717 0.79167 curveto
stroke
0.625 0.75973 moveto
0.63869 0.76974 0.65255 0.77953 0.66667 0.78893 curveto
stroke
0.66667 0.75603 moveto
0.6636 0.75421 0.66086 0.75187 0.65782 0.75 curveto
stroke
0.625 0.82415 moveto
0.62908 0.82732 0.63339 0.8302 0.6375 0.83333 curveto
stroke
0.66667 0.82127 moveto
0.65322 0.81179 0.64029 0.80159 0.62717 0.79167 curveto
stroke
0.625 0.86525 moveto
0.62924 0.86861 0.6337 0.87167 0.63796 0.875 curveto
stroke
0.66667 0.8564 moveto
0.65668 0.84906 0.64736 0.84085 0.6375 0.83333 curveto
stroke
0.66667 0.89852 moveto
0.65681 0.89105 0.64772 0.88261 0.63796 0.875 curveto
stroke
0.625 0.92725 moveto
0.63821 0.93791 0.65197 0.94788 0.66536 0.95833 curveto
stroke
0.66667 0.95946 moveto
0.66621 0.9591 0.66581 0.95869 0.66536 0.95833 curveto
stroke
0.66667 0.33947 moveto
0.67843 0.35127 0.69021 0.36306 0.70184 0.375 curveto
stroke
0.70833 0.38174 moveto
0.70616 0.3795 0.70401 0.37724 0.70184 0.375 curveto
stroke
0.66667 0.40158 moveto
0.67156 0.40662 0.67652 0.4116 0.68139 0.41667 curveto
stroke
0.70833 0.44534 moveto
0.69938 0.43575 0.69047 0.42613 0.68139 0.41667 curveto
stroke
0.66667 0.44363 moveto
0.67132 0.44856 0.67609 0.45338 0.68072 0.45833 curveto
stroke
0.70833 0.48869 moveto
0.69917 0.47854 0.69005 0.46833 0.68072 0.45833 curveto
stroke
0.66667 0.47856 moveto
0.67324 0.48574 0.68001 0.49275 0.6865 0.5 curveto
stroke
0.70833 0.5251 moveto
0.70107 0.51672 0.6939 0.50826 0.6865 0.5 curveto
stroke
0.66667 0.51119 moveto
0.6756 0.52134 0.68471 0.53134 0.69343 0.54167 curveto
stroke
0.70833 0.56002 moveto
0.70334 0.55392 0.69851 0.54769 0.69343 0.54167 curveto
stroke
0.66667 0.54387 moveto
0.67742 0.5568 0.68787 0.56998 0.6981 0.58333 curveto
stroke
0.66667 0.58245 moveto
0.66689 0.58276 0.66715 0.58303 0.66737 0.58333 curveto
stroke
0.70833 0.59756 moveto
0.70486 0.59286 0.70166 0.58797 0.6981 0.58333 curveto
stroke
0.69378 0.625 moveto
0.68531 0.6109 0.67703 0.59664 0.66737 0.58333 curveto
stroke
0.70833 0.65208 moveto
0.70384 0.64287 0.69906 0.63378 0.69378 0.625 curveto
stroke
0.66667 0.71629 moveto
0.67966 0.72168 0.69466 0.72623 0.70833 0.72292 curveto
stroke
0.66667 0.78893 moveto
0.66816 0.78992 0.66979 0.79068 0.67129 0.79167 curveto
stroke
0.66667 0.75603 moveto
0.68008 0.76402 0.69409 0.77103 0.70833 0.77744 curveto
stroke
0.66667 0.82127 moveto
0.67265 0.82549 0.67895 0.82923 0.68501 0.83333 curveto
stroke
0.70833 0.81498 moveto
0.69571 0.80767 0.68348 0.79968 0.67129 0.79167 curveto
stroke
0.66667 0.8564 moveto
0.67543 0.86284 0.68456 0.86875 0.69345 0.875 curveto
stroke
0.70833 0.8499 moveto
0.70032 0.84473 0.6929 0.83868 0.68501 0.83333 curveto
stroke
0.66667 0.89852 moveto
0.67494 0.90479 0.6836 0.91053 0.69197 0.91667 curveto
stroke
0.70833 0.88631 moveto
0.7032 0.88278 0.69855 0.87858 0.69345 0.875 curveto
stroke
0.70833 0.92966 moveto
0.70269 0.92558 0.69759 0.92079 0.69197 0.91667 curveto
stroke
0.66667 0.95946 moveto
0.68076 0.97047 0.69423 0.98226 0.70833 0.99326 curveto
stroke
0.70833 0.38174 moveto
0.7196 0.3934 0.73106 0.40488 0.7422 0.41667 curveto
stroke
0.75 0.42507 moveto
0.74739 0.42228 0.74482 0.41945 0.7422 0.41667 curveto
stroke
0.70833 0.44534 moveto
0.71241 0.44971 0.71664 0.45395 0.7207 0.45833 curveto
stroke
0.75 0.49083 moveto
0.74026 0.47998 0.73061 0.46904 0.7207 0.45833 curveto
stroke
0.70833 0.48869 moveto
0.71178 0.49251 0.71539 0.49617 0.71881 0.5 curveto
stroke
0.75 0.53594 moveto
0.73965 0.52392 0.72939 0.51182 0.71881 0.5 curveto
stroke
0.70833 0.5251 moveto
0.71317 0.53069 0.71829 0.53604 0.72308 0.54167 curveto
stroke
0.75 0.5744 moveto
0.74108 0.56345 0.73224 0.55242 0.72308 0.54167 curveto
stroke
0.70833 0.56002 moveto
0.71474 0.56785 0.72149 0.57539 0.72776 0.58333 curveto
stroke
0.75 0.6127 moveto
0.74265 0.60286 0.73537 0.59297 0.72776 0.58333 curveto
stroke
0.70833 0.59756 moveto
0.71509 0.6067 0.72212 0.61564 0.72857 0.625 curveto
stroke
0.75 0.65782 moveto
0.74315 0.64669 0.73597 0.63576 0.72857 0.625 curveto
stroke
0.70833 0.65208 moveto
0.71076 0.65706 0.71417 0.66155 0.71629 0.66667 curveto
stroke
0.72292 0.70833 moveto
0.72623 0.69466 0.72168 0.67966 0.71629 0.66667 curveto
stroke
0.70833 0.72292 moveto
0.71502 0.7213 0.7213 0.71502 0.72292 0.70833 curveto
stroke
0.70833 0.77744 moveto
0.7205 0.78291 0.73275 0.78862 0.74574 0.79167 curveto
stroke
0.70833 0.81498 moveto
0.71953 0.82147 0.73094 0.82762 0.74255 0.83333 curveto
stroke
0.75 0.79338 moveto
0.7485 0.79307 0.74723 0.79202 0.74574 0.79167 curveto
stroke
0.70833 0.8499 moveto
0.7218 0.85859 0.73547 0.86697 0.74934 0.875 curveto
stroke
0.75 0.83765 moveto
0.74741 0.83643 0.74513 0.8346 0.74255 0.83333 curveto
stroke
0.70833 0.88631 moveto
0.72203 0.89575 0.73598 0.90483 0.75 0.91378 curveto
stroke
0.75 0.87544 moveto
0.74977 0.87531 0.74957 0.87513 0.74934 0.875 curveto
stroke
0.70833 0.92966 moveto
0.72198 0.93951 0.73611 0.94867 0.75 0.95816 curveto
stroke
0.70833 0.99326 moveto
0.71142 0.99566 0.71484 0.99762 0.71794 1 curveto
stroke
0.75 0.42507 moveto
0.76045 0.43623 0.77126 0.44706 0.78159 0.45833 curveto
stroke
0.79167 0.46959 moveto
0.78828 0.46586 0.785 0.46205 0.78159 0.45833 curveto
stroke
0.75 0.49083 moveto
0.75279 0.49394 0.75573 0.49689 0.75851 0.5 curveto
stroke
0.79167 0.53834 moveto
0.78064 0.52554 0.76976 0.5126 0.75851 0.5 curveto
stroke
0.75 0.53594 moveto
0.75167 0.53789 0.75347 0.53972 0.75514 0.54167 curveto
stroke
0.78996 0.58333 moveto
0.7785 0.56933 0.76692 0.55541 0.75514 0.54167 curveto
stroke
0.75 0.5744 moveto
0.75247 0.57744 0.75518 0.58028 0.75765 0.58333 curveto
stroke
0.79167 0.58553 moveto
0.79108 0.58481 0.79055 0.58405 0.78996 0.58333 curveto
stroke
0.79014 0.625 moveto
0.77948 0.61097 0.7687 0.59704 0.75765 0.58333 curveto
stroke
0.75 0.6127 moveto
0.75313 0.61688 0.75664 0.62078 0.75973 0.625 curveto
stroke
0.79167 0.62717 moveto
0.79113 0.62646 0.79067 0.6257 0.79014 0.625 curveto
stroke
0.78893 0.66667 moveto
0.77953 0.65255 0.76974 0.63869 0.75973 0.625 curveto
stroke
0.75 0.65782 moveto
0.75187 0.66086 0.75421 0.6636 0.75603 0.66667 curveto
stroke
0.79167 0.67129 moveto
0.79068 0.66979 0.78992 0.66816 0.78893 0.66667 curveto
stroke
0.77744 0.70833 moveto
0.77103 0.69409 0.76402 0.68008 0.75603 0.66667 curveto
stroke
0.79167 0.74574 moveto
0.78862 0.73275 0.78291 0.7205 0.77744 0.70833 curveto
stroke
0.76662 0.79167 moveto
0.77839 0.79077 0.79077 0.77839 0.79167 0.76662 curveto
stroke
0.75 0.79338 moveto
0.75546 0.79448 0.76107 0.79209 0.76662 0.79167 curveto
stroke
0.75 0.83765 moveto
0.76338 0.84397 0.77739 0.84906 0.79167 0.85296 curveto
stroke
0.75 0.91378 moveto
0.75164 0.91483 0.75342 0.91563 0.75507 0.91667 curveto
stroke
0.75 0.87544 moveto
0.76363 0.88333 0.77746 0.8909 0.79167 0.89768 curveto
stroke
0.75 0.95816 moveto
0.75009 0.95822 0.75018 0.95827 0.75027 0.95833 curveto
stroke
0.79167 0.93995 moveto
0.77912 0.93276 0.7673 0.92438 0.75507 0.91667 curveto
stroke
0.79167 0.98735 moveto
0.77736 0.97845 0.76418 0.96784 0.75027 0.95833 curveto
stroke
0.79167 0.46959 moveto
0.80096 0.47985 0.81076 0.48965 0.81996 0.5 curveto
stroke
0.83333 0.51552 moveto
0.82883 0.51038 0.8245 0.5051 0.81996 0.5 curveto
stroke
0.79167 0.53834 moveto
0.79264 0.53947 0.79371 0.54053 0.79468 0.54167 curveto
stroke
0.83026 0.58333 moveto
0.81861 0.56926 0.80659 0.55551 0.79468 0.54167 curveto
stroke
0.83333 0.58723 moveto
0.83228 0.58596 0.83131 0.58461 0.83026 0.58333 curveto
stroke
0.79167 0.58553 moveto
0.80244 0.59873 0.81369 0.61155 0.82415 0.625 curveto
stroke
0.83333 0.6375 moveto
0.8302 0.63339 0.82732 0.62908 0.82415 0.625 curveto
stroke
0.79167 0.62717 moveto
0.80159 0.64029 0.81179 0.65322 0.82127 0.66667 curveto
stroke
0.83333 0.68501 moveto
0.82923 0.67895 0.82549 0.67265 0.82127 0.66667 curveto
stroke
0.79167 0.67129 moveto
0.79968 0.68348 0.80767 0.69571 0.81498 0.70833 curveto
stroke
0.83333 0.74255 moveto
0.82762 0.73094 0.82147 0.71953 0.81498 0.70833 curveto
stroke
0.79167 0.74574 moveto
0.79202 0.74723 0.79307 0.7485 0.79338 0.75 curveto
stroke
0.79167 0.76662 moveto
0.79209 0.76107 0.79448 0.75546 0.79338 0.75 curveto
stroke
0.79167 0.85296 moveto
0.8051 0.85663 0.81984 0.85935 0.83333 0.8559 curveto
stroke
0.79167 0.89768 moveto
0.80531 0.9042 0.81905 0.91065 0.83333 0.91563 curveto
stroke
0.79167 0.93995 moveto
0.80303 0.94647 0.81476 0.95235 0.82642 0.95833 curveto
stroke
0.79167 0.98735 moveto
0.79876 0.99177 0.80608 0.99581 0.81332 1 curveto
stroke
0.83333 0.96249 moveto
0.83093 0.96129 0.82881 0.95956 0.82642 0.95833 curveto
stroke
0.83333 0.51552 moveto
0.8411 0.52439 0.84947 0.53273 0.85717 0.54167 curveto
stroke
0.875 0.56315 moveto
0.86899 0.55604 0.86324 0.54872 0.85717 0.54167 curveto
stroke
0.83333 0.58723 moveto
0.84381 0.59996 0.85501 0.61209 0.86525 0.625 curveto
stroke
0.875 0.63796 moveto
0.87167 0.6337 0.86861 0.62924 0.86525 0.625 curveto
stroke
0.83333 0.6375 moveto
0.84085 0.64736 0.84906 0.65668 0.8564 0.66667 curveto
stroke
0.875 0.69345 moveto
0.86875 0.68456 0.86284 0.67543 0.8564 0.66667 curveto
stroke
0.83333 0.68501 moveto
0.83868 0.6929 0.84473 0.70032 0.8499 0.70833 curveto
stroke
0.875 0.74934 moveto
0.86697 0.73547 0.85859 0.7218 0.8499 0.70833 curveto
stroke
0.83333 0.74255 moveto
0.8346 0.74513 0.83643 0.74741 0.83765 0.75 curveto
stroke
0.85296 0.79167 moveto
0.84906 0.77739 0.84397 0.76338 0.83765 0.75 curveto
stroke
0.8559 0.83333 moveto
0.85935 0.81984 0.85663 0.8051 0.85296 0.79167 curveto
stroke
0.83333 0.8559 moveto
0.84364 0.85327 0.85327 0.84364 0.8559 0.83333 curveto
stroke
0.83333 0.91563 moveto
0.83498 0.91621 0.83681 0.91613 0.83848 0.91667 curveto
stroke
0.875 0.92488 moveto
0.86255 0.92398 0.85035 0.9205 0.83848 0.91667 curveto
stroke
0.83333 0.96249 moveto
0.84699 0.9693 0.8607 0.97611 0.875 0.98144 curveto
stroke
0.875 0.56315 moveto
0.88082 0.57004 0.88724 0.57641 0.89302 0.58333 curveto
stroke
0.91667 0.6129 moveto
0.90871 0.60311 0.90111 0.59302 0.89302 0.58333 curveto
stroke
0.875 0.63796 moveto
0.88261 0.64772 0.89105 0.65681 0.89852 0.66667 curveto
stroke
0.91667 0.69197 moveto
0.91053 0.6836 0.90479 0.67494 0.89852 0.66667 curveto
stroke
0.875 0.69345 moveto
0.87858 0.69855 0.88278 0.7032 0.88631 0.70833 curveto
stroke
0.91378 0.75 moveto
0.90483 0.73598 0.89575 0.72203 0.88631 0.70833 curveto
stroke
0.875 0.74934 moveto
0.87513 0.74957 0.87531 0.74977 0.87544 0.75 curveto
stroke
0.91667 0.75507 moveto
0.91563 0.75342 0.91483 0.75164 0.91378 0.75 curveto
stroke
0.89768 0.79167 moveto
0.8909 0.77746 0.88333 0.76363 0.87544 0.75 curveto
stroke
0.91563 0.83333 moveto
0.91065 0.81905 0.9042 0.80531 0.89768 0.79167 curveto
stroke
0.91667 0.83848 moveto
0.91613 0.83681 0.91621 0.83498 0.91563 0.83333 curveto
stroke
0.91152 0.91667 moveto
0.91343 0.91517 0.91517 0.91343 0.91667 0.91152 curveto
stroke
0.875 0.92488 moveto
0.88745 0.92579 0.90169 0.92435 0.91152 0.91667 curveto
stroke
0.875 0.98144 moveto
0.88868 0.98654 0.90239 0.99187 0.91667 0.99493 curveto
stroke
0.91667 0.6129 moveto
0.92005 0.61706 0.92388 0.62083 0.92725 0.625 curveto
stroke
0.95833 0.66536 moveto
0.94788 0.65197 0.93791 0.63821 0.92725 0.625 curveto
stroke
0.91667 0.69197 moveto
0.92079 0.69759 0.92558 0.70269 0.92966 0.70833 curveto
stroke
0.95816 0.75 moveto
0.94867 0.73611 0.93951 0.72198 0.92966 0.70833 curveto
stroke
0.95833 0.75027 moveto
0.95827 0.75018 0.95822 0.75009 0.95816 0.75 curveto
stroke
0.91667 0.75507 moveto
0.92438 0.7673 0.93276 0.77912 0.93995 0.79167 curveto
stroke
0.95833 0.82642 moveto
0.95235 0.81476 0.94647 0.80303 0.93995 0.79167 curveto
stroke
0.91667 0.83848 moveto
0.9205 0.85035 0.92398 0.86255 0.92488 0.875 curveto
stroke
0.91667 0.91152 moveto
0.92435 0.90169 0.92579 0.88745 0.92488 0.875 curveto
stroke
0.91667 0.99493 moveto
0.93032 0.99786 0.94444 1.00053 0.95833 0.99919 curveto
stroke
0.95833 0.66536 moveto
0.95869 0.66581 0.9591 0.66621 0.95946 0.66667 curveto
stroke
0.99326 0.70833 moveto
0.98226 0.69423 0.97047 0.68076 0.95946 0.66667 curveto
stroke
1 0.71794 moveto
0.99762 0.71484 0.99566 0.71142 0.99326 0.70833 curveto
stroke
0.95833 0.75027 moveto
0.96784 0.76418 0.97845 0.77736 0.98735 0.79167 curveto
stroke
1 0.81332 moveto
0.99581 0.80608 0.99177 0.79876 0.98735 0.79167 curveto
stroke
0.95833 0.82642 moveto
0.95956 0.82881 0.96129 0.83093 0.96249 0.83333 curveto
stroke
0.98144 0.875 moveto
0.97611 0.8607 0.9693 0.84699 0.96249 0.83333 curveto
stroke
0.99493 0.91667 moveto
0.99187 0.90239 0.98654 0.88868 0.98144 0.875 curveto
stroke
0.99919 0.95833 moveto
1.00053 0.94444 0.99786 0.93032 0.99493 0.91667 curveto
stroke
0.95833 0.99919 moveto
0.97751 0.99735 0.99735 0.97751 0.99919 0.95833 curveto
stroke
% End of Graphics
MathPictureEnd
%%EPS Trailer
end

%%EndDocument
 GE /Times-Bold SF
21108 34134 MT
(Figure 2-8:)SH
/Times-Roman SF
26881 XM
(Contour plot of the)SH
/Times-Italic SF
35559 XM
(a priori)SH
/Times-Roman SF
39227 XM
(distribution of)SH
9 SS 
38763 34992 MT
(T)SH
45506 XM
(T)SH
11 SS 
26041 35355 MT
(the mean vector)SH
/Symbol SF
33340 XM
(m)SH
/Times-Roman SF
34249 XM
(= [m)SH
37091 XM
(m)SH
38397 XM
(])SH
39588 XM
(for)SH
/Symbol SF
41145 XM
(m)SH
/Times-Roman SF
42504 XM
(= [3 2])SH
46056 XM
(.)SH
9 /Times-Italic AF
36366 35715 MT
(1)SH
37947 XM
(2)SH
41779 XM
(o)SH
13 /Times-Bold AF
10800 37422 MT
(2.8. Analysis of the Estimates of Mean Vectors)SH
11 /Times-Roman AF
13300 40337 MT
(The success of the estimation algorithms presented in the previous)
43 W( sections is highly dependent)42 W
10800 42076 MT
(on a number of properties of the data.  In this section, these)
22 W( procedures are analyzed theoretically and)23 W
10800 43815 MT
(empirically with respect)
100 W( to dogmatism, correlation, and class-conditional)99 W
/Times-Italic SF
43976 XM
(a priori)99 W
/Times-Roman SF
47842 XM
(probability of ob-)99 W
10800 45554 MT
(servation. The theoretical analysis is based on the expressions for)
44 W( mean-square error versus the num-)45 W
10800 47293 MT
(ber of observations as derived in)
158 W( the previous sections.  Empirical analyses are based on learning)157 W
10800 49032 MT
(curves generated by Monte Carlo simulation methods.  Examples in both sets of analyses)
SH( are based on)1 W
10800 50771 MT
(a 2-class, 1-feature model defined by the following statistics)SH
9 SS 
18750 52751 MT
(2)SH
20049 XM
(2)SH
22666 XM
(2)SH
23965 XM
(2)SH
30156 XM
(2)SH
11 /Symbol AF
18087 53114 MT
(s)SH
/Times-Roman SF
19200 XM
(/)SH
/Symbol SF
(d)SH
21399 XM
(rs)SH
/Times-Roman SF
23116 XM
(/)SH
/Symbol SF
(d)SH
29493 XM
(s)SH
/Times-Roman SF
31656 XM
(0)SH
/Times-Italic SF
37563 XM
(n)SH
/Times-Roman SF
39163 XM
(0)SH
/Symbol SF
15200 53613 MT
(S)SH
/Times-Roman SF
16451 XM
(=)SH
25281 XM
(,)SH
/Symbol SF
27056 XM
(S)SH
/Times-Roman SF
27857 XM
(=)SH
33072 XM
(,)SH
/Times-Bold SF
34847 XM
(N)SH
/Times-Roman SF
35791 XM
(=)SH
53143 XM
(\0502.60\051)SH
9 SS 
19354 53972 MT
(2)SH
20653 XM
(2)SH
22666 XM
(2)SH
23965 XM
(2)SH
31756 XM
(2)SH
/Times-Italic SF
15851 53973 MT
(o)SH
26 /Symbol AF
17221 54047 MT
(\050)SH
24415 XM
(\051)SH
28627 XM
(\050)SH
32206 XM
(\051)SH
36561 XM
(\050)SH
39850 XM
(\051)SH
11 /Times-Roman AF
37427 54310 MT
(0)SH
/Symbol SF
38727 XM
(q)SH
/Times-Italic SF
(n)SH
/Symbol SF
18087 54335 MT
(rs)SH
/Times-Roman SF
19804 XM
(/)SH
/Symbol SF
(d)SH
22003 XM
(s)SH
/Times-Roman SF
23116 XM
(/)SH
/Symbol SF
(d)SH
/Times-Roman SF
29493 XM
(0)SH
/Symbol SF
31093 XM
(s)SH
/Times-Roman SF
10800 56074 MT
(The parameters)63 W
/Symbol SF
18010 XM
(d)SH
/Times-Roman SF
(,)SH
/Symbol SF
19166 XM
(r)SH
/Times-Roman SF
(, and)63 W
/Symbol SF
22309 XM
(q)SH
/Times-Roman SF
23220 XM
(represent the dogmatism, correlation, and skew in the prior)
63 W( probabilities,)62 W
9 SS 
19218 57450 MT
(2)SH
11 SS 
10800 57813 MT
(respectively, and)14 W
/Symbol SF
18555 XM
(s)SH
/Times-Roman SF
19957 XM
(is the variance of the speakers' class-conditional data distributions. This form for)15 W
10800 59552 MT
(the data model allows each parameter to be varied)
107 W( independently of the others.  The)106 W
/Times-Italic SF
49538 XM
(a priori)106 W
/Times-Roman SF
53418 XM
(mean)SH
9 /Times-Italic AF
38352 60928 MT
(T)SH
/Times-Roman SF
46309 XM
(2)SH
11 SS 
10800 61291 MT
(distribution)SH
/Times-Italic SF
16374 XM
(N)SH
/Times-Roman SF
(\050)SH
/Symbol SF
(m)SH
/Times-Roman SF
18558 XM
(,)SH
/Symbol SF
(S)SH
/Times-Roman SF
19934 XM
(\051 is plotted in Figure 2-8 for)225 W
/Symbol SF
34066 XM
(m)SH
/Times-Roman SF
35300 XM
(=)
150 MX([3 2])175 W
38852 XM
(,)SH
/Symbol SF
39882 XM
(r)SH
/Times-Roman SF
40636 XM
(=)
150 MX(0.9, and)226 W
/Symbol SF
45646 XM
(s)SH
/Times-Roman SF
46909 XM
(=)
150 MX(1. The ellipsoidal)226 W
9 /Times-Italic AF
18108 61651 MT
(o)SH
19484 XM
(o)SH
34700 XM
(o)SH
11 /Times-Roman AF
10800 63030 MT
(shape and positive slope of this distribution's major axis)
14 W( indicates the degree of correlation of the two)13 W
10800 64769 MT
(class means)84 W
/Times-Italic SF
16466 XM
(m)SH
/Times-Roman SF
18069 XM
(and)SH
/Times-Italic SF
20016 XM
(m)SH
/Times-Roman SF
21260 XM
(. The)
443 W( within-speaker class-conditional probability density functions are cen-)84 W
9 /Times-Italic AF
17260 65129 MT
(1)SH
20810 XM
(2)SH
52603 66145 MT
(T)SH
11 /Times-Roman AF
10800 66508 MT
(tered around realizations of these random mean values, as illustrated in Figure 2-9 for)SH
/Symbol SF
48767 XM
(m)SH
/Times-Roman SF
49551 XM
(=)
150 MX([3 2])175 W
53103 XM
(.)SH
ES
%%Page: 31 32
BS
0 SI
10 /Times-Roman AF
54800 4286 MT
(31)SH
12 /Times-Bold AF
10800 8004 MT
(2.8.1. Theoretical Analysis)SH
11 /Times-Roman AF
13300 10919 MT
(In this section the dependence)
139 W( of estimation error on the various statistical parameters of the)138 W
10800 12658 MT
(data is discussed, as well as misadjustment)
43 W( of the CEMAP and LMS-C algorithms.  Properties of the)44 W
10800 14397 MT
(estimation error can be observed directly from the expressions describing the expected mean-square)85 W
10800 16136 MT
(error versus the number of observations, which are given by Equations)
102 W( \0502.12\051 and \0502.34\051. while the)103 W
10800 17875 MT
(CEMAP and LMS-C misadjustments are specified by Equations)
175 W( \0502.54\051 and \0502.57\051.  Based on the)174 W
10800 19614 MT
(derivation in Section)
131 W( 2.7, the LMS-C mean-square error is assumed to be equivalent to that of the)132 W
10800 21353 MT
(EMAP/MMSE algorithm plus the asymptotic misadjustment.  For)
33 W( convenience, the MSE expressions)32 W
10800 23092 MT
(are repeated here:)SH
9 /Symbol AF
22928 24606 MT
(-)SH
/Times-Roman SF
(1)SH
11 /Times-Italic AF
15200 24969 MT
(MSE)SH
/Times-Roman SF
18588 XM
(\050)SH
/Times-Bold SF
(N)SH
/Times-Roman SF
(\051)
150 MX(=)SH
/Times-Italic SF
21034 XM
(tr)SH
/Times-Roman SF
([)SH
/Times-Bold SF
(N)SH
/Symbol SF
23872 XM
(S)SH
/Times-Roman SF
(])SH
9 /Times-Italic AF
17338 25329 MT
(ML)SH
/Symbol SF
28133 26131 MT
(-)SH
/Times-Roman SF
(1)SH
11 /Times-Italic AF
15200 26494 MT
(MSE)SH
/Times-Roman SF
19738 XM
(\050)SH
/Times-Bold SF
(N)SH
/Times-Roman SF
(\051)
150 MX(=)SH
/Times-Italic SF
22184 XM
(tr)SH
/Times-Roman SF
([)SH
/Symbol SF
(S)SH
/Times-Roman SF
(\050)SH
/Symbol SF
(S)SH
/Times-Bold SF
25402 XM
(N)SH
/Times-Roman SF
26346 XM
(+)SH
/Symbol SF
27116 XM
(S)SH
/Times-Roman SF
(\051)SH
/Symbol SF
29077 XM
(S)SH
/Times-Roman SF
30178 XM
(])SH
53143 XM
(\0502.61\051)SH
9 /Times-Italic AF
17338 26854 MT
(EMAP)SH
24952 XM
(o)SH
29728 XM
(o)SH
/Symbol SF
28333 27656 MT
(-)SH
/Times-Roman SF
(1)SH
32116 XM
(2)SH
/Symbol SF
38915 XM
(-)SH
/Times-Roman SF
(1)SH
/Symbol SF
45558 XM
(-)SH
/Times-Roman SF
(1)SH
11 /Times-Italic AF
15200 28019 MT
(MSE)SH
/Times-Roman SF
19938 XM
(\050)SH
/Times-Bold SF
(N)SH
/Times-Roman SF
(\051)
150 MX(=)SH
/Times-Italic SF
22384 XM
(tr)SH
/Times-Roman SF
([)SH
/Symbol SF
(S)SH
/Times-Roman SF
(\050)SH
/Symbol SF
(S)SH
/Times-Bold SF
25602 XM
(N)SH
/Times-Roman SF
26546 XM
(+)SH
/Symbol SF
27316 XM
(S)SH
/Times-Roman SF
(\051)SH
/Symbol SF
29277 XM
(S)SH
/Times-Roman SF
30378 XM
(])
150 MX(+)SH
/Symbol SF
31664 XM
(g)SH
/Times-Italic SF
32566 XM
(tr)SH
/Times-Roman SF
([)SH
/Symbol SF
(S)SH
/Times-Roman SF
(\050)SH
/Symbol SF
(S)SH
/Times-Roman SF
35484 XM
(+)SH
/Symbol SF
36254 XM
(S)SH
/Times-Bold SF
37355 XM
(N)SH
/Times-Roman SF
38549 XM
(\051)SH
/Symbol SF
39859 XM
(S)SH
/Times-Roman SF
40960 XM
(\050)SH
/Symbol SF
(S)SH
/Times-Roman SF
42127 XM
(+)SH
/Times-Bold SF
42897 XM
(N)SH
/Symbol SF
44091 XM
(S)SH
/Times-Roman SF
45192 XM
(\051)SH
/Symbol SF
46502 XM
(S)SH
/Times-Roman SF
(])SH
9 /Times-Italic AF
17338 28379 MT
(LMS-C)SH
25152 XM
(o)SH
29928 XM
(o)SH
36905 XM
(o)SH
38149 XM
(c)SH
40510 XM
(o)SH
43691 XM
(c)SH
44742 XM
(o)SH
11 /Times-Roman AF
10800 29758 MT
(where)SH
/Symbol SF
13915 XM
(g)SH
/Times-Roman SF
14796 XM
(is specified by \0502.59\051.  Note that the statistic)154 W
/Symbol SF
35887 XM
(m)SH
/Times-Roman SF
37400 XM
(is only present in the expression for)
154 W( the)155 W
9 /Times-Italic AF
36521 30118 MT
(o)SH
11 /Times-Roman AF
10800 31497 MT
(LMS-C MSE and misadjustment \050as part of)95 W
/Symbol SF
30928 XM
(g)SH
/Times-Roman SF
(\051. The)
463 W( contribution of)94 W
/Symbol SF
41870 XM
(m)SH
/Times-Roman SF
43323 XM
(to the MSE curves is negli-)94 W
9 /Times-Italic AF
42504 31857 MT
(o)SH
/Times-Roman SF
32063 32873 MT
(2)SH
11 SS 
10800 33236 MT
(gible and will be ignored.  Also, the variance)59 W
/Symbol SF
31400 XM
(s)SH
/Times-Roman SF
32847 XM
(from \0502.60\051 above acts)
59 W( only as a scale factor which)60 W
10800 34975 MT
(can be assumed to be unity.)SH
952 1000 0 17100 52164 GB 
%%BeginDocument: /usr0/rozzi/Documentation/PhDThesis/Chapter2/EmpDataDist.eps
%!PS-Adobe-2.0 EPSF-1.2
%%BoundingBox: 0 0 340 168
%%Creator: Mathematica
%%Title: Clipboard
%%CreationDate: Never Never
%%EndComments
50 dict begin
/Mnodistort false def
/pageDashArray [4] def
/nullDashArray [] def

% Compute the minimum of two numbers.
/Mmin {         % p q Mmin min(p,q)
        2 copy          % p q p q
        gt              % p q p>q?
        { exch } if     % min(p,q) max(p,q)
        pop             % min(p,q)
} bind def


% Compute the maximum of two numbers.
/Mmax {         % p q Mmax max(p,q)
        2 copy          % p q p q
        lt              % p q p<q?
        { exch } if     % max(p,q) min(p,q)
        pop             % max(p,q)
} bind def

/Mpstart {
    MathPictureStart
} bind def
/Mpend {
    MathPictureEnd
} bind def
/Mscale {
    0 1 0 1
    5 -1 roll
    MathScale
} bind def
/Plain
        /Courier findfont
def
/Bold
        /Courier-Bold findfont
def
/Italic
        /Courier-Oblique findfont
def
/MathPictureStart {
        gsave
        newpath
        /Mtmatrix
        matrix currentmatrix
        def
        Plain
        Mfontsize scalefont
        setfont
0 setgray 0 setlinewidth
} bind def
/MathPictureEnd {
        grestore
} bind def
/Mdot {
        moveto
        0 0 rlineto
        stroke
} def
/Mtetra {
        moveto
        lineto
        lineto
        lineto
        fill
} def
/Metetra {
        moveto
        lineto
        lineto
        lineto
        closepath
        gsave
        fill
        grestore
        0 setgray
        stroke
} def
/Mistroke {
        flattenpath
        0 0 0
        {
        4 2 roll
        pop pop
        }
        {
        4 -1 roll
        2 index
        sub dup mul
        4 -1 roll
        2 index
        sub dup mul
        add sqrt
        4 -1 roll
        add
        3 1 roll
        }
        {
        stop
        }
        {
        stop
        }
        pathforall
        pop pop
        currentpoint
        stroke
        moveto
        currentdash
        3 -1 roll
        add
        setdash
} def
/Mfstroke {
        stroke
        currentdash
        pop 0
        setdash
} def
/Msboxa {
        newpath
        5 -1 roll
        Mvboxa
        pop
        6 -1 roll
        5 -1 roll
        4 -1 roll
        Msboxa1
        5 -3 roll
        Msboxa1
        [
        7 -2 roll
        [ 2 index 2 index
        10 -1 roll
        9 -1 roll
        ]
        6 1 roll
        5 -2 roll
        ]
} bind def
        
/Msboxa1 {
        sub
        2 div
        dup
        2 index
        1 add
        mul
        3 -1 roll
        -1 add
        3 -1 roll
        mul
} bind def
/Mvboxa {
        gsave
        newpath
        [ true
        3 -1 roll
        {
        Mbbox
        5 -1 roll
        {
        0
        5 1 roll
        }
        {
        7 -1 roll
        exch sub
        (m) stringwidth pop
        .3 mul
        sub
        7 1 roll
        6 -1 roll
        4 -1 roll
        Mmin
        3 -1 roll
        5 index
        add
        5 -1 roll
        4 -1 roll
        Mmax
        4 -1 roll
        }
        ifelse
        false
        }
        forall
        { stop } if
        counttomark
        1 add
        4 roll
        ]
        grestore
} bind def
/Mbbox {
        0 0 moveto
        false charpath
        flattenpath
        pathbbox
        newpath
} bind def
/Mmin {
        2 copy
        gt
        { exch } if
        pop
} bind def
/Mmax {
        2 copy
        lt
        { exch } if
        pop
} bind def
/Mshowa {
        4 -2 roll
        moveto
        2 index
        Mtmatrix setmatrix
        Mvboxa
        7 1 roll
        6 -1 roll
        5 -1 roll
        4 -1 roll
        Mshowa1
        4 1 roll
        Mshowa1
        rmoveto
        currentpoint
        0 1
        4 index length
        -1 add
        {
        2 index
        4 index
        2 index
        get
        3 index
        add
        moveto
        4 index
        exch get
        show
        } for
        pop pop pop pop
        Mgmatrix setmatrix
} bind def
/Mshowa1 {
        2 copy
        add
        4 1 roll
        sub
        mul
        sub
        -2 div
} bind def
/MathScale {
        Mwidth
        Mheight
        Mlp
        translate
        scale
        /Mgmatrix
        matrix currentmatrix
        def
        /Msaveaa exch def
        /Msavebb exch def
        /Msavecc exch def
        /Msavedd exch def
} bind def
/Mlp {
        3 copy
        Mlpfirst
        {
        Mnodistort
        {
        Mmin
        dup
        } if
        4 index
        2 index
        2 index
        Mlprun
        11 index
        11 -1 roll
        10 -4 roll
        Mlp1
        8 index
        9 -5 roll
        Mlp1
        4 -1 roll
        and
        { exit } if
        3 -1 roll
        pop pop
        } loop
        exch
        3 1 roll
        7 -3 roll
        pop pop pop
} bind def
/Mlpfirst {
        3 -1 roll
        dup length
        2 copy
        -2 add
        get
        aload
        pop pop pop
        4 -2 roll
        -1 add
        get
        aload
        pop pop pop
        6 -1 roll
        3 -1 roll
        5 -1 roll
        sub
        dup /MsaveAx exch def
        div
        4 1 roll
        exch sub
        dup /MsaveAy exch def
        div
} bind def
/Mlprun {
        2 copy
        4 index
        0 get
        dup
        4 1 roll
        Mlprun1
        3 copy
        8 -2 roll
        9 -1 roll
        {
        3 copy
        Mlprun1
        3 copy
        11 -3 roll
        /gt Mlpminmax
        8 3 roll
        11 -3 roll
        /lt Mlpminmax
        8 3 roll
        } forall
        pop pop pop pop
        3 1 roll
        pop pop
        aload pop
        5 -1 roll
        aload pop
        exch
        6 -1 roll
        Mlprun2
        8 2 roll
        4 -1 roll
        Mlprun2
        6 2 roll
        3 -1 roll
        Mlprun2
        4 2 roll
        exch
        Mlprun2
        6 2 roll
} bind def
/Mlprun1 {
        aload pop
        exch
        6 -1 roll
        5 -1 roll
        mul add
        4 -2 roll
        mul
        3 -1 roll
        add
} bind def
/Mlprun2 {
        2 copy
        add 2 div
        3 1 roll
        exch sub
} bind def
/Mlpminmax {
        cvx
        2 index
        6 index
        2 index
        exec
        {
        7 -3 roll
        4 -1 roll
        } if
        1 index
        5 index
        3 -1 roll
        exec
        {
        4 1 roll
        pop
        5 -1 roll
        aload
        pop pop
        4 -1 roll
        aload pop
        [
        8 -2 roll
        pop
        5 -2 roll
        pop
        6 -2 roll
        pop
        5 -1 roll
        ]
        4 1 roll
        pop
        }
        {
        pop pop pop
        } ifelse
} bind def
/Mlp1 {
        5 index
        3 index sub
        5 index
        2 index mul
        1 index
        le
        1 index
        0 le
        or
        dup
        not
        {
        1 index
        3 index div
        .99999 mul
        8 -1 roll
        pop
        7 1 roll
        }
        if
        8 -1 roll
        2 div
        7 -2 roll
        pop sub
        5 index
        6 -3 roll
        pop pop
        mul sub
        exch
} bind def
/Mfontsize      12 def
/Mleft          0.000000 def
/Mbottom        168.000000 def
/Mwidth         340.000000 def
/Mheight        168.000000 def
/Courier findfont 12 scalefont setfont
%!
%%Creator: Mathematica
%%AspectRatio: 0.61803 
MathPictureStart
% Scaling calculations
0.34127 0.07937 0.01472 0.5886 [
[(-4)] 0.02381 0.00222 0 1 Msboxa
[(-2)] 0.18254 0.00222 0 1 Msboxa
[(0)] 0.34127 0.00222 0 1 Msboxa
[(2)] 0.5 0.00222 0 1 Msboxa
[(4)] 0.65873 0.00222 0 1 Msboxa
[(6)] 0.81746 0.00222 0 1 Msboxa
[(8)] 0.97619 0.00222 0 1 Msboxa
[(x)] 1.00625 0.01472 -1 0 Msboxa
[(0.2)] 0.09067 0.13244 1 0 Msboxa
[(0.4)] 0.09067 0.25016 1 0 Msboxa
[(0.6)] 0.09067 0.36788 1 0 Msboxa
[(0.8)] 0.09067 0.4856 1 0 Msboxa
[(1)] 0.09067 0.60332 1 0 Msboxa
[(p\(x|c\))] 0.10317 0.65428 0 -1 Msboxa
[ -0.001 -0.001 0 0 ]
[ 1.001 0.61903 0 0 ]
] MathScale
% Start of Graphics
1 setlinecap
1 setlinejoin
newpath
%%Object: Graphics
[ ] 0 setdash
0 setgray
gsave
gsave
0.002 setlinewidth
0 0.01472 moveto
1 0.01472 lineto
stroke
0.02381 0.00847 moveto
0.02381 0.02097 lineto
stroke
0 setgray
[(-4)] 0.02381 0.00222 0 1 Mshowa
0.18254 0.00847 moveto
0.18254 0.02097 lineto
stroke
0 setgray
[(-2)] 0.18254 0.00222 0 1 Mshowa
0.34127 0.00847 moveto
0.34127 0.02097 lineto
stroke
0 setgray
[(0)] 0.34127 0.00222 0 1 Mshowa
0.5 0.00847 moveto
0.5 0.02097 lineto
stroke
0 setgray
[(2)] 0.5 0.00222 0 1 Mshowa
0.65873 0.00847 moveto
0.65873 0.02097 lineto
stroke
0 setgray
[(4)] 0.65873 0.00222 0 1 Mshowa
0.81746 0.00847 moveto
0.81746 0.02097 lineto
stroke
0 setgray
[(6)] 0.81746 0.00222 0 1 Mshowa
0.97619 0.00847 moveto
0.97619 0.02097 lineto
stroke
0 setgray
[(8)] 0.97619 0.00222 0 1 Mshowa
0 setgray
[(x)] 1.00625 0.01472 -1 0 Mshowa
0.10317 0 moveto
0.10317 0.61803 lineto
stroke
0.09692 0.13244 moveto
0.10942 0.13244 lineto
stroke
0 setgray
%[(0.2)] 0.09067 0.13244 1 0 Mshowa
[(c2)] 0.73067 0.36788 1 0 Mshowa
[(c1)] 0.38067 0.36788 1 0 Mshowa
0.09692 0.25016 moveto
0.10942 0.25016 lineto
stroke
0 setgray
%[(0.4)] 0.09067 0.25016 1 0 Mshowa
0.09692 0.36788 moveto
0.10942 0.36788 lineto
stroke
0 setgray
%[(0.6)] 0.09067 0.36788 1 0 Mshowa
0.09692 0.4856 moveto
0.10942 0.4856 lineto
stroke
0 setgray
%[(0.8)] 0.09067 0.4856 1 0 Mshowa
0.09692 0.60332 moveto
0.10942 0.60332 lineto
stroke
0 setgray
%[(1)] 0.09067 0.60332 1 0 Mshowa
0 setgray
[(p\(x|c\))] 0.10317 0.65428 0 -1 Mshowa
grestore
grestore
0 0 moveto
1 0 lineto
1 0.618034 lineto
0 0.618034 lineto
closepath
clip
newpath
0 setgray
gsave
gsave
gsave
0.004 setlinewidth
0.02381 0.01472 moveto
0.02629 0.01472 lineto
0.02877 0.01472 lineto
0.03125 0.01472 lineto
0.03373 0.01472 lineto
0.03621 0.01472 lineto
0.03869 0.01472 lineto
0.04117 0.01472 lineto
0.04365 0.01472 lineto
0.04613 0.01472 lineto
0.04861 0.01472 lineto
0.05109 0.01472 lineto
0.05357 0.01472 lineto
0.05605 0.01472 lineto
0.05853 0.01472 lineto
0.06101 0.01472 lineto
0.06349 0.01472 lineto
0.06597 0.01472 lineto
0.06845 0.01472 lineto
0.07093 0.01472 lineto
0.07341 0.01472 lineto
0.07589 0.01472 lineto
0.07837 0.01472 lineto
0.08085 0.01472 lineto
0.08333 0.01472 lineto
0.08581 0.01472 lineto
0.08829 0.01472 lineto
0.09077 0.01472 lineto
0.09325 0.01472 lineto
0.09573 0.01472 lineto
0.09821 0.01472 lineto
0.10069 0.01472 lineto
0.10317 0.01472 lineto
0.10565 0.01472 lineto
0.10813 0.01472 lineto
0.11062 0.01472 lineto
0.1131 0.01472 lineto
0.11558 0.01472 lineto
0.11806 0.01472 lineto
0.12302 0.01472 lineto
0.12798 0.01472 lineto
0.13294 0.01472 lineto
0.1379 0.01472 lineto
0.14286 0.01472 lineto
0.14782 0.01472 lineto
0.15278 0.01472 lineto
0.15774 0.01472 lineto
0.1627 0.01472 lineto
0.16766 0.01472 lineto
0.17262 0.01472 lineto
Mistroke
0.17758 0.01472 lineto
0.18254 0.01472 lineto
0.1875 0.01472 lineto
0.19246 0.01472 lineto
0.19742 0.01472 lineto
0.20238 0.01472 lineto
0.20734 0.01473 lineto
0.2123 0.01473 lineto
0.21726 0.01473 lineto
0.22222 0.01474 lineto
0.22718 0.01475 lineto
0.23214 0.01476 lineto
0.2371 0.01477 lineto
0.24206 0.01479 lineto
0.24702 0.01481 lineto
0.25198 0.01483 lineto
0.25694 0.01487 lineto
0.2619 0.01491 lineto
0.26687 0.01497 lineto
0.27183 0.01504 lineto
0.27679 0.01513 lineto
0.28175 0.01524 lineto
0.28671 0.01537 lineto
0.29167 0.01554 lineto
0.29663 0.01575 lineto
0.30159 0.016 lineto
0.30655 0.01631 lineto
0.31151 0.01669 lineto
0.31647 0.01715 lineto
0.32143 0.01771 lineto
0.33135 0.01917 lineto
0.34127 0.02125 lineto
0.35119 0.02415 lineto
0.36111 0.02813 lineto
0.37103 0.03349 lineto
0.38095 0.04058 lineto
0.39087 0.04979 lineto
0.40079 0.06154 lineto
0.41071 0.07627 lineto
0.42063 0.09437 lineto
0.44048 0.14201 lineto
0.46032 0.20581 lineto
0.5 0.37172 lineto
0.51984 0.45902 lineto
0.52976 0.49889 lineto
0.53968 0.53416 lineto
0.5496 0.56335 lineto
0.55456 0.57527 lineto
0.55952 0.58521 lineto
0.56448 0.59306 lineto
Mistroke
0.56696 0.59618 lineto
0.56944 0.59874 lineto
0.57192 0.60074 lineto
0.57316 0.60153 lineto
0.5744 0.60217 lineto
0.57564 0.60267 lineto
0.57688 0.60303 lineto
0.57812 0.60325 lineto
0.57937 0.60332 lineto
0.58061 0.60325 lineto
0.58185 0.60303 lineto
0.58309 0.60267 lineto
0.58433 0.60217 lineto
0.58681 0.60074 lineto
0.58929 0.59874 lineto
0.59425 0.59306 lineto
0.59921 0.58521 lineto
0.60913 0.56335 lineto
0.61905 0.53416 lineto
0.65873 0.37172 lineto
0.67857 0.2842 lineto
0.69841 0.20581 lineto
0.71825 0.14201 lineto
0.72817 0.1162 lineto
0.7381 0.09437 lineto
0.74802 0.07627 lineto
0.75794 0.06154 lineto
0.76786 0.04979 lineto
0.77778 0.04058 lineto
0.7877 0.03349 lineto
0.79762 0.02813 lineto
0.80754 0.02415 lineto
0.81746 0.02125 lineto
0.82738 0.01917 lineto
0.83234 0.01838 lineto
0.8373 0.01771 lineto
0.84226 0.01715 lineto
0.84722 0.01669 lineto
0.85218 0.01631 lineto
0.85714 0.016 lineto
0.8621 0.01575 lineto
0.86706 0.01554 lineto
0.87202 0.01537 lineto
0.87698 0.01524 lineto
0.88194 0.01513 lineto
0.8869 0.01504 lineto
0.89187 0.01497 lineto
0.89683 0.01491 lineto
0.90179 0.01487 lineto
0.90675 0.01483 lineto
Mistroke
0.91171 0.01481 lineto
0.91667 0.01479 lineto
0.92163 0.01477 lineto
0.92659 0.01476 lineto
0.93155 0.01475 lineto
0.93651 0.01474 lineto
0.94147 0.01473 lineto
0.94643 0.01473 lineto
0.95139 0.01473 lineto
0.95635 0.01472 lineto
0.96131 0.01472 lineto
0.96627 0.01472 lineto
0.97123 0.01472 lineto
0.97619 0.01472 lineto
Mfstroke
grestore
grestore
gsave
gsave
0.004 setlinewidth
0.02381 0.01472 moveto
0.02629 0.01472 lineto
0.02877 0.01472 lineto
0.03125 0.01472 lineto
0.03373 0.01472 lineto
0.03621 0.01472 lineto
0.03869 0.01472 lineto
0.04365 0.01472 lineto
0.04861 0.01472 lineto
0.05357 0.01472 lineto
0.05853 0.01472 lineto
0.06349 0.01472 lineto
0.06845 0.01472 lineto
0.07341 0.01472 lineto
0.07837 0.01472 lineto
0.08333 0.01472 lineto
0.08829 0.01472 lineto
0.09325 0.01472 lineto
0.09821 0.01472 lineto
0.10317 0.01472 lineto
0.10813 0.01472 lineto
0.1131 0.01472 lineto
0.11806 0.01472 lineto
0.12302 0.01472 lineto
0.12798 0.01473 lineto
0.13294 0.01473 lineto
0.1379 0.01473 lineto
0.14286 0.01474 lineto
0.14782 0.01475 lineto
0.15278 0.01476 lineto
0.15774 0.01477 lineto
0.1627 0.01479 lineto
0.16766 0.01481 lineto
0.17262 0.01483 lineto
0.17758 0.01487 lineto
0.18254 0.01491 lineto
0.1875 0.01497 lineto
0.19246 0.01504 lineto
0.19742 0.01513 lineto
0.20238 0.01524 lineto
0.20734 0.01537 lineto
0.2123 0.01554 lineto
0.21726 0.01575 lineto
0.22222 0.016 lineto
0.22718 0.01631 lineto
0.23214 0.01669 lineto
0.2371 0.01715 lineto
0.24206 0.01771 lineto
0.25198 0.01917 lineto
0.2619 0.02125 lineto
Mistroke
0.27183 0.02415 lineto
0.28175 0.02813 lineto
0.29167 0.03349 lineto
0.30159 0.04058 lineto
0.31151 0.04979 lineto
0.32143 0.06154 lineto
0.33135 0.07627 lineto
0.34127 0.09437 lineto
0.36111 0.14201 lineto
0.38095 0.20581 lineto
0.42063 0.37172 lineto
0.44048 0.45902 lineto
0.4504 0.49889 lineto
0.46032 0.53416 lineto
0.47024 0.56335 lineto
0.4752 0.57527 lineto
0.48016 0.58521 lineto
0.48512 0.59306 lineto
0.4876 0.59618 lineto
0.49008 0.59874 lineto
0.49256 0.60074 lineto
0.4938 0.60153 lineto
0.49504 0.60217 lineto
0.49628 0.60267 lineto
0.49752 0.60303 lineto
0.49876 0.60325 lineto
0.5 0.60332 lineto
0.50124 0.60325 lineto
0.50248 0.60303 lineto
0.50372 0.60267 lineto
0.50496 0.60217 lineto
0.50744 0.60074 lineto
0.50992 0.59874 lineto
0.51488 0.59306 lineto
0.51984 0.58521 lineto
0.52976 0.56335 lineto
0.53968 0.53416 lineto
0.57937 0.37172 lineto
0.59921 0.2842 lineto
0.61905 0.20581 lineto
0.63889 0.14201 lineto
0.64881 0.1162 lineto
0.65873 0.09437 lineto
0.66865 0.07627 lineto
0.67857 0.06154 lineto
0.68849 0.04979 lineto
0.69841 0.04058 lineto
0.70833 0.03349 lineto
0.71825 0.02813 lineto
0.72817 0.02415 lineto
Mistroke
0.7381 0.02125 lineto
0.74802 0.01917 lineto
0.75298 0.01838 lineto
0.75794 0.01771 lineto
0.7629 0.01715 lineto
0.76786 0.01669 lineto
0.77282 0.01631 lineto
0.77778 0.016 lineto
0.78274 0.01575 lineto
0.7877 0.01554 lineto
0.79266 0.01537 lineto
0.79762 0.01524 lineto
0.80258 0.01513 lineto
0.80754 0.01504 lineto
0.8125 0.01497 lineto
0.81746 0.01491 lineto
0.82242 0.01487 lineto
0.82738 0.01483 lineto
0.83234 0.01481 lineto
0.8373 0.01479 lineto
0.84226 0.01477 lineto
0.84722 0.01476 lineto
0.85218 0.01475 lineto
0.85714 0.01474 lineto
0.8621 0.01473 lineto
0.86706 0.01473 lineto
0.87202 0.01473 lineto
0.87698 0.01472 lineto
0.88194 0.01472 lineto
0.8869 0.01472 lineto
0.89187 0.01472 lineto
0.89683 0.01472 lineto
0.90179 0.01472 lineto
0.90675 0.01472 lineto
0.91171 0.01472 lineto
0.91667 0.01472 lineto
0.92163 0.01472 lineto
0.92659 0.01472 lineto
0.93155 0.01472 lineto
0.93651 0.01472 lineto
0.94147 0.01472 lineto
0.94643 0.01472 lineto
0.95139 0.01472 lineto
0.95635 0.01472 lineto
0.95883 0.01472 lineto
0.96131 0.01472 lineto
0.96379 0.01472 lineto
0.96627 0.01472 lineto
0.96875 0.01472 lineto
0.97123 0.01472 lineto
Mistroke
0.97619 0.01472 lineto
Mfstroke
grestore
grestore
grestore
% End of Graphics
MathPictureEnd
%%EPS Trailer
end

%%EndDocument
 GE /Times-Bold SF
19322 53916 MT
(Figure 2-9:)SH
/Times-Roman SF
25095 XM
(Class-conditional probability density functions for)SH
28999 55112 MT
(the example of)SH
/Symbol SF
35810 XM
(m)SH
/Times-Roman SF
36719 XM
(=)SH
/Symbol SF
37614 XM
(m)SH
/Times-Roman SF
38973 XM
(and)SH
/Symbol SF
40836 XM
(d)SH
/Times-Roman SF
41654 XM
(= 1.)SH
9 /Times-Italic AF
38248 55472 MT
(o)SH
11 /Times-Bold AF
10800 58009 MT
(2.8.1.1. Effect of Dogmatism, Correlation, and Skew)SH
/Times-Roman SF
13300 60564 MT
(The discussion in Section 2.3 leads to the expectation that when the dogmatism \050)14 W
/Symbol SF
(d)SH
/Times-Roman SF
(\051 is small,)
14 W( any)13 W
10800 62303 MT
(estimator based on observations should produce a reasonable estimate, while for large)193 W
/Symbol SF
51205 XM
(d)SH
/Times-Roman SF
52216 XM
(the best)193 W
10800 64042 MT
(estimate is the constant)101 W
/Symbol SF
21714 XM
(m)SH
/Times-Roman SF
22798 XM
(. Plots)
477 W( of Equation \0502.61\051 in Figure 2-10 for four values of)101 W
/Symbol SF
50291 XM
(d)SH
/Times-Roman SF
51209 XM
(verify this)100 W
9 /Times-Italic AF
22348 64402 MT
(o)SH
/Symbol SF
53564 65418 MT
(-)SH
/Times-Roman SF
(1)SH
11 SS 
10800 65781 MT
(prediction. For)
485 W( very small)105 W
/Symbol SF
23301 XM
(d)SH
/Times-Roman SF
(, the MSE equations in \0502.61\051 are all approximately equal)
105 W( to)106 W
/Times-Italic SF
51670 XM
(tr)SH
/Times-Roman SF
([)SH
/Times-Bold SF
(N)SH
/Symbol SF
54508 XM
(S)SH
/Times-Roman SF
(],)SH
10800 67520 MT
(which is the)
6 W( MSE of the ML estimate.  As)5 W
/Symbol SF
29703 XM
(d)SH
/Times-Roman SF
30526 XM
(increases, the variation of)5 W
/Symbol SF
42121 XM
(m)SH
/Times-Roman SF
43035 XM
(around)SH
/Symbol SF
46369 XM
(m)SH
/Times-Roman SF
47733 XM
(decreases, making)5 W
9 /Times-Italic AF
47003 67880 MT
(o)SH
11 /Symbol AF
10800 69259 MT
(m)SH
/Times-Roman SF
12180 XM
(a better estimate of)21 W
/Symbol SF
20938 XM
(m)SH
/Times-Roman SF
(. This)
317 W( has the effect of flattening the MSE curves)
21 W( for the EMAP and LMS-C)22 W
9 /Times-Italic AF
11434 69619 MT
(o)SH
11 /Times-Roman AF
10800 70998 MT
(estimates which initially give greater weight to)70 W
/Symbol SF
32217 XM
(m)SH
/Times-Roman SF
33301 XM
(. When)415 W
/Symbol SF
37237 XM
(d)SH
/Times-Roman SF
38125 XM
(is very large, the relative)
70 W( variation of)69 W
/Symbol SF
55166 XM
(m)SH
9 /Times-Italic AF
32851 71358 MT
(o)SH
ES
%%Page: 32 33
BS
0 SI
10 /Times-Roman AF
54800 4286 MT
(32)SH
11 SS 
10800 7955 MT
(around)SH
/Symbol SF
14250 XM
(m)SH
/Times-Roman SF
15730 XM
(is small, and the constant)121 W
/Symbol SF
27701 XM
(m)SH
/Times-Roman SF
29181 XM
(is the best estimate for)121 W
/Symbol SF
39959 XM
(m)SH
/Times-Roman SF
(. Inspection)
517 W( of \0502.61\051 shows)
121 W( that)122 W
9 /Times-Italic AF
14884 8315 MT
(o)SH
28335 XM
(o)SH
11 /Times-Roman AF
10800 9694 MT
(when)SH
/Symbol SF
13508 XM
(S)SH
/Times-Roman SF
14309 XM
(>>)SH
/Symbol SF
15699 XM
(S)SH
/Times-Roman SF
16800 XM
(, the LMS-C and EMAP MSE expressions reduce to)
51 W( approximately)50 W
/Times-Italic SF
47217 XM
(tr)SH
/Times-Roman SF
([)SH
/Symbol SF
(S)SH
/Times-Roman SF
49418 XM
(], which is the)50 W
9 /Times-Italic AF
16350 10054 MT
(o)SH
48968 XM
(o)SH
11 /Times-Roman AF
10800 11433 MT
(error incurred when the observations are ignored and)51 W
/Symbol SF
34784 XM
(m)SH
/Times-Roman SF
36194 XM
(is used as the estimate of)51 W
/Symbol SF
47742 XM
(m)SH
/Times-Roman SF
(. Figure)
377 W( 2-10\050d\051)52 W
9 /Times-Italic AF
35418 11793 MT
(o)SH
11 /Times-Roman AF
10800 13172 MT
(reflects this behavior of the EMAP and LMS-C)
161 W( estimates.  The ML estimate does not depend on)160 W
10800 14911 MT
(dogmatism, so it's curves are the same in all four graphs.)
68 W( Similar)
413 W( behavior is observed in empirical)69 W
10800 16650 MT
(tests, as will be discussed below.)SH
13300 19635 MT
(A consequence of the dogmatism-dependence of these estimates for speech-related problems is)57 W
10800 21374 MT
(that as)255 W
/Symbol SF
14426 XM
(d)SH
/Times-Roman SF
15499 XM
(increases, the)255 W
/Times-Italic SF
22208 XM
(a priori)256 W
/Times-Roman SF
26388 XM
(or speaker-independent mean becomes a better estimate of the)256 W
10800 23113 MT
(speaker-dependent mean, making adaptation less necessary. In)
171 W( fact, adaptation becomes more dif-)170 W
10800 24852 MT
(ficult as the dogmatism rises, since the convergence)
92 W( rate \050the slope of the learning curve\051 decreases)93 W
10800 26591 MT
(with increasing)344 W
/Symbol SF
18514 XM
(d)SH
/Times-Roman SF
(. As)
963 W( stated earlier, the)
344 W( most favorable conditions for adaptation are small-)343 W
10800 28330 MT
(dogmatism cases \050)144 W
/Symbol SF
(d \243)25 W
/Times-Roman SF
20961 XM
(1\051. Of)
563 W( those cases, more benefit from)
144 W( EMAP or LMS-C adaptation will be)145 W
10800 30069 MT
(observed for)SH
/Symbol SF
16602 XM
(d)SH
/Times-Roman SF
17420 XM
(near unity.)SH
13300 33054 MT
(One of the advantages of the EMAP)
41 W( and LMS-C algorithms is their ability to update all classes)40 W
10800 34793 MT
(after observing a sample from any)
48 W( class.  This reduces the MSE more quickly than methods like ML)49 W
10800 36532 MT
(which do not)
117 W( model the between-class correlation.  Figure 2-11 shows that the EMAP and LMS-C)116 W
10800 38271 MT
(estimates converge more rapidly when)
176 W( there is greater correlation among features and/or decision)177 W
10800 40010 MT
(classes. The figure also shows that)
141 W( the absolute MSE is always lower than the ML estimate.  The)140 W
9 SS 
43759 41386 MT
(-1)SH
11 SS 
10800 41749 MT
(reason for this behavior is)
65 W( that the ML learning curve is proportional to)66 W
/Times-Italic SF
43271 XM
(k)SH
/Times-Roman SF
44509 XM
(, while the other learning)66 W
9 /Symbol AF
25260 43125 MT
(-)SH
/Times-Roman SF
(1)SH
11 SS 
10800 43488 MT
(curves are proportional)
57 W( to [)56 W
/Times-Italic SF
(k)SH
/Times-Roman SF
23636 XM
(+)SH
/Times-Italic SF
24406 XM
(c)SH
/Times-Roman SF
(])SH
26204 XM
(, where)56 W
/Times-Italic SF
29827 XM
(c)SH
/Times-Roman SF
30646 XM
(is a function of the correlation)56 W
/Symbol SF
44544 XM
(r)SH
/Times-Roman SF
(. As)387 W
/Symbol SF
47638 XM
(r)SH
/Times-Roman SF
48573 XM
(increases,)SH
/Times-Italic SF
53209 XM
(c)SH
/Times-Roman SF
54028 XM
(also)SH
10800 45227 MT
(increases, leading to faster convergence.)SH
13300 48212 MT
(The utility of modeling between-class correlation is highest when the skew in the)45 W
/Times-Italic SF
49902 XM
(a priori)46 W
/Times-Roman SF
53662 XM
(class)SH
10800 49951 MT
(probabilities is large.  Compare the)
100 W( EMAP and LMS-C learning curves to the ML curves in Figure)99 W
10800 51690 MT
(2-12. The)
2343 W( figure shows the mean-square error)
1034 W( for the three algorithms for)1035 W
/Symbol SF
10800 53429 MT
(q)SH
/Times-Roman SF
11523 XM
(=)
150 MX(0.053, 0.176, 0.43, and 1.0,)
25 W( which corresponds to cases in which 5%, 15%, 30%, and)
311 W( 50%,)310 W
10800 55168 MT
(respectively, of the observations are from Class 2 in the model of \0502.60\051.  Obviously, the gain is)169 W
10800 56907 MT
(largest when)70 W
/Symbol SF
16804 XM
(q)SH
/Times-Roman SF
17721 XM
(is small.  Since the ML algorithm estimates each element of each class' mean vector)69 W
10800 58646 MT
(independently, it can only)
39 W( update a particular class after obtaining a sample from it, and the MSE for)40 W
10800 60385 MT
(all other classes remains constant.  This occurs because the)
81 W( ML MSE expression for the estimate of)80 W
8 SS 
28725 61562 MT
(2)SH
9 SS 
21974 61761 MT
(th)SH
11 SS 
10800 62124 MT
(the mean vector)
78 W( for the)79 W
/Times-Italic SF
21668 XM
(j)SH
/Times-Roman SF
23028 XM
(is equal to)79 W
/Symbol SF
28062 XM
(s)SH
/Times-Roman SF
29125 XM
(/)SH
/Times-Italic SF
(k)SH
/Times-Roman SF
(, while for the other algorithms there are additional terms)79 W
8 /Times-Italic AF
28725 62486 MT
(j)SH
9 /Times-Roman AF
41193 63500 MT
(th)SH
11 SS 
10800 63863 MT
(which represent the contribution of the other classes in reducing the)SH
/Times-Italic SF
40887 XM
(j)SH
/Times-Roman SF
42168 XM
(class' error.)SH
ES
%%Page: 33 34
BS
0 SI
10 /Times-Roman AF
54800 4286 MT
(33)SH
11 SS 
765 1000 270 33047 37800 GB 
%%BeginDocument: /usr0/rozzi/Documentation/PhDThesis/Chapter2/tdog1.eps
%!PS-Adobe-2.0 EPSF-1.2
%%BoundingBox: 0 0 400 249
%%Creator: Mathematica
%%Title: Clipboard
%%CreationDate: Never Never
%%EndComments
50 dict begin
/Mnodistort true def
/pageDashArray [4] def
/nullDashArray [] def

% Compute the minimum of two numbers.
/Mmin {         % p q Mmin min(p,q)
        2 copy          % p q p q
        gt              % p q p>q?
        { exch } if     % min(p,q) max(p,q)
        pop             % min(p,q)
} bind def


% Compute the maximum of two numbers.
/Mmax {         % p q Mmax max(p,q)
        2 copy          % p q p q
        lt              % p q p<q?
        { exch } if     % max(p,q) min(p,q)
        pop             % max(p,q)
} bind def

/Mpstart {
    MathPictureStart
} bind def
/Mpend {
    MathPictureEnd
} bind def
/Mscale {
    0 1 0 1
    5 -1 roll
    MathScale
} bind def
/Plain
        /Courier findfont
def
/Bold
        /Courier-Bold findfont
def
/Italic
        /Courier-Oblique findfont
def
/MathPictureStart {
        gsave
        newpath
        /Mtmatrix
        matrix currentmatrix
        def
        Plain
        Mfontsize scalefont
        setfont
0 setgray 0 setlinewidth
} bind def
/MathPictureEnd {
        grestore
} bind def
/Mdot {
        moveto
        0 0 rlineto
        stroke
} def
/Mtetra {
        moveto
        lineto
        lineto
        lineto
        fill
} def
/Metetra {
        moveto
        lineto
        lineto
        lineto
        closepath
        gsave
        fill
        grestore
        0 setgray
        stroke
} def
/Mistroke {
        flattenpath
        0 0 0
        {
        4 2 roll
        pop pop
        }
        {
        4 -1 roll
        2 index
        sub dup mul
        4 -1 roll
        2 index
        sub dup mul
        add sqrt
        4 -1 roll
        add
        3 1 roll
        }
        {
        stop
        }
        {
        stop
        }
        pathforall
        pop pop
        currentpoint
        stroke
        moveto
        currentdash
        3 -1 roll
        add
        setdash
} def
/Mfstroke {
        stroke
        currentdash
        pop 0
        setdash
} def
/Msboxa {
        newpath
        5 -1 roll
        Mvboxa
        pop
        6 -1 roll
        5 -1 roll
        4 -1 roll
        Msboxa1
        5 -3 roll
        Msboxa1
        [
        7 -2 roll
        [ 2 index 2 index
        10 -1 roll
        9 -1 roll
        ]
        6 1 roll
        5 -2 roll
        ]
} bind def
        
/Msboxa1 {
        sub
        2 div
        dup
        2 index
        1 add
        mul
        3 -1 roll
        -1 add
        3 -1 roll
        mul
} bind def
/Mvboxa {
        gsave
        newpath
        [ true
        3 -1 roll
        {
        Mbbox
        5 -1 roll
        {
        0
        5 1 roll
        }
        {
        7 -1 roll
        exch sub
        (m) stringwidth pop
        .3 mul
        sub
        7 1 roll
        6 -1 roll
        4 -1 roll
        Mmin
        3 -1 roll
        5 index
        add
        5 -1 roll
        4 -1 roll
        Mmax
        4 -1 roll
        }
        ifelse
        false
        }
        forall
        { stop } if
        counttomark
        1 add
        4 roll
        ]
        grestore
} bind def
/Mbbox {
        0 0 moveto
        false charpath
        flattenpath
        pathbbox
        newpath
} bind def
/Mmin {
        2 copy
        gt
        { exch } if
        pop
} bind def
/Mmax {
        2 copy
        lt
        { exch } if
        pop
} bind def
/Mshowa {
        4 -2 roll
        moveto
        2 index
        Mtmatrix setmatrix
        Mvboxa
        7 1 roll
        6 -1 roll
        5 -1 roll
        4 -1 roll
        Mshowa1
        4 1 roll
        Mshowa1
        rmoveto
        currentpoint
        0 1
        4 index length
        -1 add
        {
        2 index
        4 index
        2 index
        get
        3 index
        add
        moveto
        4 index
        exch get
        show
        } for
        pop pop pop pop
        Mgmatrix setmatrix
} bind def
/Mshowa1 {
        2 copy
        add
        4 1 roll
        sub
        mul
        sub
        -2 div
} bind def
/MathScale {
        Mwidth
        Mheight
        Mlp
        translate
        scale
        /Mgmatrix
        matrix currentmatrix
        def
        /Msaveaa exch def
        /Msavebb exch def
        /Msavecc exch def
        /Msavedd exch def
} bind def
/Mlp {
        3 copy
        Mlpfirst
        {
        Mnodistort
        {
        Mmin
        dup
        } if
        4 index
        2 index
        2 index
        Mlprun
        11 index
        11 -1 roll
        10 -4 roll
        Mlp1
        8 index
        9 -5 roll
        Mlp1
        4 -1 roll
        and
        { exit } if
        3 -1 roll
        pop pop
        } loop
        exch
        3 1 roll
        7 -3 roll
        pop pop pop
} bind def
/Mlpfirst {
        3 -1 roll
        dup length
        2 copy
        -2 add
        get
        aload
        pop pop pop
        4 -2 roll
        -1 add
        get
        aload
        pop pop pop
        6 -1 roll
        3 -1 roll
        5 -1 roll
        sub
        dup /MsaveAx exch def
        div
        4 1 roll
        exch sub
        dup /MsaveAy exch def
        div
} bind def
/Mlprun {
        2 copy
        4 index
        0 get
        dup
        4 1 roll
        Mlprun1
        3 copy
        8 -2 roll
        9 -1 roll
        {
        3 copy
        Mlprun1
        3 copy
        11 -3 roll
        /gt Mlpminmax
        8 3 roll
        11 -3 roll
        /lt Mlpminmax
        8 3 roll
        } forall
        pop pop pop pop
        3 1 roll
        pop pop
        aload pop
        5 -1 roll
        aload pop
        exch
        6 -1 roll
        Mlprun2
        8 2 roll
        4 -1 roll
        Mlprun2
        6 2 roll
        3 -1 roll
        Mlprun2
        4 2 roll
        exch
        Mlprun2
        6 2 roll
} bind def
/Mlprun1 {
        aload pop
        exch
        6 -1 roll
        5 -1 roll
        mul add
        4 -2 roll
        mul
        3 -1 roll
        add
} bind def
/Mlprun2 {
        2 copy
        add 2 div
        3 1 roll
        exch sub
} bind def
/Mlpminmax {
        cvx
        2 index
        6 index
        2 index
        exec
        {
        7 -3 roll
        4 -1 roll
        } if
        1 index
        5 index
        3 -1 roll
        exec
        {
        4 1 roll
        pop
        5 -1 roll
        aload
        pop pop
        4 -1 roll
        aload pop
        [
        8 -2 roll
        pop
        5 -2 roll
        pop
        6 -2 roll
        pop
        5 -1 roll
        ]
        4 1 roll
        pop
        }
        {
        pop pop pop
        } ifelse
} bind def
/Mlp1 {
        5 index
        3 index sub
        5 index
        2 index mul
        1 index
        le
        1 index
        0 le
        or
        dup
        not
        {
        1 index
        3 index div
        .99999 mul
        8 -1 roll
        pop
        7 1 roll
        }
        if
        8 -1 roll
        2 div
        7 -2 roll
        pop sub
        5 index
        6 -3 roll
        pop pop
        mul sub
        exch
} bind def
/Mfontsize      12 def
/Mleft          0.000000 def
/Mbottom        249.000000 def
/Mwidth         400.000000 def
/Mheight        249.000000 def
/Courier findfont 12 scalefont setfont
%!
%%Creator: Mathematica
%%AspectRatio: 0.625 
MathPictureStart
% Scaling calculations
0.02381 0.03175 0.01488 0.29762 [
[(d=1.0, b=1.0, p=0.5)] 0.5 0.63125 0 -1 Msboxa
[(5)] 0.18254 0.00238 0 1 Msboxa
[(10)] 0.34127 0.00238 0 1 Msboxa
[(15)] 0.5 0.00238 0 1 Msboxa
[(20)] 0.65873 0.00238 0 1 Msboxa
[(25)] 0.81746 0.00238 0 1 Msboxa
[(30)] 0.97619 0.00238 0 1 Msboxa
[(n)] 1.00625 0.01488 -1 0 Msboxa
[(0.5)] 0.01131 0.16369 1 0 Msboxa
[(1)] 0.01131 0.3125 1 0 Msboxa
[(1.5)] 0.01131 0.46131 1 0 Msboxa
[(2)] 0.01131 0.61012 1 0 Msboxa
[(MSE)] 0.02381 0.63125 0 -1 Msboxa
[ -0.001 -0.001 0 0 ]
[ 1.001 0.626 0 0 ]
] MathScale
% Start of Graphics
1 setlinecap
1 setlinejoin
newpath
%%Object: Graphics
[ ] 0 setdash
0 setgray
0 setgray
%[(d=1.0, b=1.0, p=0.5)] 0.5 0.63125 0 -1 Mshowa
[(\(b\))] 0.7 0.53125 0 -1 Mshowa

gsave
gsave
0.002 setlinewidth
0 0.01488 moveto
1 0.01488 lineto
stroke
0.18254 0.00863 moveto
0.18254 0.02113 lineto
stroke
0 setgray
[(5)] 0.18254 0.00238 0 1 Mshowa
0.34127 0.00863 moveto
0.34127 0.02113 lineto
stroke
0 setgray
[(10)] 0.34127 0.00238 0 1 Mshowa
0.5 0.00863 moveto
0.5 0.02113 lineto
stroke
0 setgray
[(15)] 0.5 0.00238 0 1 Mshowa
0.65873 0.00863 moveto
0.65873 0.02113 lineto
stroke
0 setgray
[(20)] 0.65873 0.00238 0 1 Mshowa
0.81746 0.00863 moveto
0.81746 0.02113 lineto
stroke
0 setgray
[(25)] 0.81746 0.00238 0 1 Mshowa
0.97619 0.00863 moveto
0.97619 0.02113 lineto
stroke
0 setgray
[(30)] 0.97619 0.00238 0 1 Mshowa
0 setgray
[(n)] 1.00625 0.01488 -1 0 Mshowa
0.02381 0 moveto
0.02381 0.625 lineto
stroke
0.01756 0.16369 moveto
0.03006 0.16369 lineto
stroke
0 setgray
[(0.5)] 0.01131 0.16369 1 0 Mshowa
0.01756 0.3125 moveto
0.03006 0.3125 lineto
stroke
0 setgray
[(1)] 0.01131 0.3125 1 0 Mshowa
0.01756 0.46131 moveto
0.03006 0.46131 lineto
stroke
0 setgray
[(1.5)] 0.01131 0.46131 1 0 Mshowa
0.01756 0.61012 moveto
0.03006 0.61012 lineto
stroke
0 setgray
[(2)] 0.01131 0.61012 1 0 Mshowa
0 setgray
[(MSE)] 0.02381 0.63125 0 -1 Mshowa
grestore
grestore
0 0 moveto
1 0 lineto
1 0.625 lineto
0 0.625 lineto
closepath
clip
newpath
0 setgray
gsave
gsave
gsave
gsave
0.33 setgray
gsave
0.005 setlinewidth
0.05556 0.29266 moveto
0.06515 0.25618 lineto
0.07474 0.22852 lineto
0.09392 0.18912 lineto
0.10351 0.17454 lineto
0.1131 0.16227 lineto
0.13228 0.14271 lineto
0.15146 0.1278 lineto
0.17063 0.11605 lineto
0.20899 0.09866 lineto
0.24735 0.08641 lineto
0.28571 0.07729 lineto
0.32407 0.07025 lineto
0.36243 0.06464 lineto
0.40079 0.06006 lineto
0.43915 0.05626 lineto
0.47751 0.05305 lineto
0.51587 0.0503 lineto
0.55423 0.04792 lineto
0.59259 0.04584 lineto
0.63095 0.04401 lineto
0.66931 0.04238 lineto
0.70767 0.04092 lineto
0.74603 0.03962 lineto
0.78439 0.03843 lineto
0.82275 0.03736 lineto
0.86111 0.03638 lineto
0.89947 0.03548 lineto
0.93783 0.03465 lineto
0.97619 0.03389 lineto
stroke
grestore
grestore
gsave
0.67 setgray
gsave
0.005 setlinewidth
0.05556 0.61012 moveto
0.06035 0.53201 lineto
0.06515 0.47202 lineto
0.06994 0.42451 lineto
0.07474 0.38594 lineto
0.08433 0.32714 lineto
0.09392 0.28442 lineto
0.10351 0.25199 lineto
0.1131 0.22652 lineto
0.12269 0.20599 lineto
0.13228 0.1891 lineto
0.15146 0.16292 lineto
0.17063 0.14358 lineto
0.18981 0.12871 lineto
0.20899 0.11692 lineto
0.24735 0.09941 lineto
0.28571 0.08703 lineto
0.32407 0.07781 lineto
0.36243 0.07068 lineto
0.40079 0.06501 lineto
0.43915 0.06038 lineto
0.47751 0.05653 lineto
0.51587 0.05328 lineto
0.55423 0.05051 lineto
0.59259 0.0481 lineto
0.63095 0.046 lineto
0.66931 0.04415 lineto
0.70767 0.04251 lineto
0.74603 0.04105 lineto
0.78439 0.03973 lineto
0.82275 0.03853 lineto
0.86111 0.03745 lineto
0.89947 0.03646 lineto
0.93783 0.03555 lineto
0.97619 0.03472 lineto
stroke
grestore
grestore
gsave
%[ 0.05 0.03 ] 0 setdash
0 setgray
gsave
0.005 setlinewidth
0.05556 0.29486 moveto
0.06515 0.25839 lineto
0.07474 0.23072 lineto
0.09392 0.19133 lineto
0.10351 0.17675 lineto
0.1131 0.16447 lineto
0.13228 0.14492 lineto
0.15146 0.13001 lineto
0.17063 0.11825 lineto
0.20899 0.10087 lineto
0.24735 0.08861 lineto
0.28571 0.0795 lineto
0.32407 0.07245 lineto
0.36243 0.06684 lineto
0.40079 0.06227 lineto
0.43915 0.05846 lineto
0.47751 0.05525 lineto
0.51587 0.0525 lineto
0.55423 0.05012 lineto
0.59259 0.04804 lineto
0.63095 0.04621 lineto
0.66931 0.04458 lineto
0.70767 0.04313 lineto
0.74603 0.04182 lineto
0.78439 0.04064 lineto
0.82275 0.03956 lineto
0.86111 0.03858 lineto
0.89947 0.03768 lineto
0.93783 0.03685 lineto
0.97619 0.03609 lineto
stroke
grestore
grestore
grestore
grestore
gsave
gsave
0 setgray
%[(EMAP/LMS-C)] 0.15079 0.05952 0 0 Mshowa
0 setgray
%[(ML)] 0.15079 0.22321 0 0 Mshowa
grestore
grestore
grestore
% End of Graphics
MathPictureEnd
%%EPS Trailer
end

%%EndDocument
 GE 765 1000 270 52600 37800 GB 
%%BeginDocument: /usr0/rozzi/Documentation/PhDThesis/Chapter2/tdog16.eps
%!PS-Adobe-2.0 EPSF-1.2
%%BoundingBox: 0 0 400 252
%%Creator: Mathematica
%%Title: Clipboard
%%CreationDate: Never Never
%%EndComments
50 dict begin
/Mnodistort true def
/pageDashArray [4] def
/nullDashArray [] def

% Compute the minimum of two numbers.
/Mmin {         % p q Mmin min(p,q)
        2 copy          % p q p q
        gt              % p q p>q?
        { exch } if     % min(p,q) max(p,q)
        pop             % min(p,q)
} bind def


% Compute the maximum of two numbers.
/Mmax {         % p q Mmax max(p,q)
        2 copy          % p q p q
        lt              % p q p<q?
        { exch } if     % max(p,q) min(p,q)
        pop             % max(p,q)
} bind def

/Mpstart {
    MathPictureStart
} bind def
/Mpend {
    MathPictureEnd
} bind def
/Mscale {
    0 1 0 1
    5 -1 roll
    MathScale
} bind def
/Plain
        /Courier findfont
def
/Bold
        /Courier-Bold findfont
def
/Italic
        /Courier-Oblique findfont
def
/MathPictureStart {
        gsave
        newpath
        /Mtmatrix
        matrix currentmatrix
        def
        Plain
        Mfontsize scalefont
        setfont
0 setgray 0 setlinewidth
} bind def
/MathPictureEnd {
        grestore
} bind def
/Mdot {
        moveto
        0 0 rlineto
        stroke
} def
/Mtetra {
        moveto
        lineto
        lineto
        lineto
        fill
} def
/Metetra {
        moveto
        lineto
        lineto
        lineto
        closepath
        gsave
        fill
        grestore
        0 setgray
        stroke
} def
/Mistroke {
        flattenpath
        0 0 0
        {
        4 2 roll
        pop pop
        }
        {
        4 -1 roll
        2 index
        sub dup mul
        4 -1 roll
        2 index
        sub dup mul
        add sqrt
        4 -1 roll
        add
        3 1 roll
        }
        {
        stop
        }
        {
        stop
        }
        pathforall
        pop pop
        currentpoint
        stroke
        moveto
        currentdash
        3 -1 roll
        add
        setdash
} def
/Mfstroke {
        stroke
        currentdash
        pop 0
        setdash
} def
/Msboxa {
        newpath
        5 -1 roll
        Mvboxa
        pop
        6 -1 roll
        5 -1 roll
        4 -1 roll
        Msboxa1
        5 -3 roll
        Msboxa1
        [
        7 -2 roll
        [ 2 index 2 index
        10 -1 roll
        9 -1 roll
        ]
        6 1 roll
        5 -2 roll
        ]
} bind def
        
/Msboxa1 {
        sub
        2 div
        dup
        2 index
        1 add
        mul
        3 -1 roll
        -1 add
        3 -1 roll
        mul
} bind def
/Mvboxa {
        gsave
        newpath
        [ true
        3 -1 roll
        {
        Mbbox
        5 -1 roll
        {
        0
        5 1 roll
        }
        {
        7 -1 roll
        exch sub
        (m) stringwidth pop
        .3 mul
        sub
        7 1 roll
        6 -1 roll
        4 -1 roll
        Mmin
        3 -1 roll
        5 index
        add
        5 -1 roll
        4 -1 roll
        Mmax
        4 -1 roll
        }
        ifelse
        false
        }
        forall
        { stop } if
        counttomark
        1 add
        4 roll
        ]
        grestore
} bind def
/Mbbox {
        0 0 moveto
        false charpath
        flattenpath
        pathbbox
        newpath
} bind def
/Mmin {
        2 copy
        gt
        { exch } if
        pop
} bind def
/Mmax {
        2 copy
        lt
        { exch } if
        pop
} bind def
/Mshowa {
        4 -2 roll
        moveto
        2 index
        Mtmatrix setmatrix
        Mvboxa
        7 1 roll
        6 -1 roll
        5 -1 roll
        4 -1 roll
        Mshowa1
        4 1 roll
        Mshowa1
        rmoveto
        currentpoint
        0 1
        4 index length
        -1 add
        {
        2 index
        4 index
        2 index
        get
        3 index
        add
        moveto
        4 index
        exch get
        show
        } for
        pop pop pop pop
        Mgmatrix setmatrix
} bind def
/Mshowa1 {
        2 copy
        add
        4 1 roll
        sub
        mul
        sub
        -2 div
} bind def
/MathScale {
        Mwidth
        Mheight
        Mlp
        translate
        scale
        /Mgmatrix
        matrix currentmatrix
        def
        /Msaveaa exch def
        /Msavebb exch def
        /Msavecc exch def
        /Msavedd exch def
} bind def
/Mlp {
        3 copy
        Mlpfirst
        {
        Mnodistort
        {
        Mmin
        dup
        } if
        4 index
        2 index
        2 index
        Mlprun
        11 index
        11 -1 roll
        10 -4 roll
        Mlp1
        8 index
        9 -5 roll
        Mlp1
        4 -1 roll
        and
        { exit } if
        3 -1 roll
        pop pop
        } loop
        exch
        3 1 roll
        7 -3 roll
        pop pop pop
} bind def
/Mlpfirst {
        3 -1 roll
        dup length
        2 copy
        -2 add
        get
        aload
        pop pop pop
        4 -2 roll
        -1 add
        get
        aload
        pop pop pop
        6 -1 roll
        3 -1 roll
        5 -1 roll
        sub
        dup /MsaveAx exch def
        div
        4 1 roll
        exch sub
        dup /MsaveAy exch def
        div
} bind def
/Mlprun {
        2 copy
        4 index
        0 get
        dup
        4 1 roll
        Mlprun1
        3 copy
        8 -2 roll
        9 -1 roll
        {
        3 copy
        Mlprun1
        3 copy
        11 -3 roll
        /gt Mlpminmax
        8 3 roll
        11 -3 roll
        /lt Mlpminmax
        8 3 roll
        } forall
        pop pop pop pop
        3 1 roll
        pop pop
        aload pop
        5 -1 roll
        aload pop
        exch
        6 -1 roll
        Mlprun2
        8 2 roll
        4 -1 roll
        Mlprun2
        6 2 roll
        3 -1 roll
        Mlprun2
        4 2 roll
        exch
        Mlprun2
        6 2 roll
} bind def
/Mlprun1 {
        aload pop
        exch
        6 -1 roll
        5 -1 roll
        mul add
        4 -2 roll
        mul
        3 -1 roll
        add
} bind def
/Mlprun2 {
        2 copy
        add 2 div
        3 1 roll
        exch sub
} bind def
/Mlpminmax {
        cvx
        2 index
        6 index
        2 index
        exec
        {
        7 -3 roll
        4 -1 roll
        } if
        1 index
        5 index
        3 -1 roll
        exec
        {
        4 1 roll
        pop
        5 -1 roll
        aload
        pop pop
        4 -1 roll
        aload pop
        [
        8 -2 roll
        pop
        5 -2 roll
        pop
        6 -2 roll
        pop
        5 -1 roll
        ]
        4 1 roll
        pop
        }
        {
        pop pop pop
        } ifelse
} bind def
/Mlp1 {
        5 index
        3 index sub
        5 index
        2 index mul
        1 index
        le
        1 index
        0 le
        or
        dup
        not
        {
        1 index
        3 index div
        .99999 mul
        8 -1 roll
        pop
        7 1 roll
        }
        if
        8 -1 roll
        2 div
        7 -2 roll
        pop sub
        5 index
        6 -3 roll
        pop pop
        mul sub
        exch
} bind def
/Mfontsize      12 def
/Mleft          0.000000 def
/Mbottom        252.000000 def
/Mwidth         400.000000 def
/Mheight        252.000000 def
/Courier findfont 12 scalefont setfont
%!
%%Creator: Mathematica
%%AspectRatio: 0.625 
MathPictureStart
% Scaling calculations
0.02381 0.03175 0 1.5625 [
[(d=16.0, b=1.0, p=0.5)] 0.5 0.63125 0 -1 Msboxa
[(5)] 0.18254 -0.0125 0 1 Msboxa
[(10)] 0.34127 -0.0125 0 1 Msboxa
[(15)] 0.5 -0.0125 0 1 Msboxa
[(20)] 0.65873 -0.0125 0 1 Msboxa
[(25)] 0.81746 -0.0125 0 1 Msboxa
[(30)] 0.97619 -0.0125 0 1 Msboxa
[(n)] 1.00625 0 -1 0 Msboxa
[(0.1)] 0.01131 0.15625 1 0 Msboxa
[(0.2)] 0.01131 0.3125 1 0 Msboxa
[(0.3)] 0.01131 0.46875 1 0 Msboxa
[(0.4)] 0.01131 0.625 1 0 Msboxa
[(MSE)] 0.02381 0.63125 0 -1 Msboxa
[ -0.001 -0.00725 0 0 ]
[ 1.001 0.626 0 0 ]
] MathScale
% Start of Graphics
1 setlinecap
1 setlinejoin
newpath
%%Object: Graphics
[ ] 0 setdash
0 setgray
0 setgray
%[(d=16.0, b=1.0, p=0.5)] 0.5 0.63125 0 -1 Mshowa
[(\(d\))] 0.7 0.53125 0 -1 Mshowa

gsave
gsave
0.002 setlinewidth
0 0 moveto
1 0 lineto
stroke
0.18254 -0.00625 moveto
0.18254 0.00625 lineto
stroke
0 setgray
[(5)] 0.18254 -0.0125 0 1 Mshowa
0.34127 -0.00625 moveto
0.34127 0.00625 lineto
stroke
0 setgray
[(10)] 0.34127 -0.0125 0 1 Mshowa
0.5 -0.00625 moveto
0.5 0.00625 lineto
stroke
0 setgray
[(15)] 0.5 -0.0125 0 1 Mshowa
0.65873 -0.00625 moveto
0.65873 0.00625 lineto
stroke
0 setgray
[(20)] 0.65873 -0.0125 0 1 Mshowa
0.81746 -0.00625 moveto
0.81746 0.00625 lineto
stroke
0 setgray
[(25)] 0.81746 -0.0125 0 1 Mshowa
0.97619 -0.00625 moveto
0.97619 0.00625 lineto
stroke
0 setgray
[(30)] 0.97619 -0.0125 0 1 Mshowa
0 setgray
[(k)] 1.00625 0 -1 0 Mshowa
0.02381 0 moveto
0.02381 0.625 lineto
stroke
0.01756 0.15625 moveto
0.03006 0.15625 lineto
stroke
0 setgray
[(0.1)] 0.01131 0.15625 1 0 Mshowa
0.01756 0.3125 moveto
0.03006 0.3125 lineto
stroke
0 setgray
[(0.2)] 0.01131 0.3125 1 0 Mshowa
0.01756 0.46875 moveto
0.03006 0.46875 lineto
stroke
0 setgray
[(0.3)] 0.01131 0.46875 1 0 Mshowa
0.01756 0.625 moveto
0.03006 0.625 lineto
stroke
0 setgray
[(0.4)] 0.01131 0.625 1 0 Mshowa
0 setgray
[(MSE)] 0.02381 0.63125 0 -1 Mshowa
grestore
grestore
0 0 moveto
1 0 lineto
1 0.625 lineto
0 0.625 lineto
closepath
clip
newpath
0 setgray
gsave
gsave
gsave
gsave
0.33 setgray
gsave
0.005 setlinewidth
0.05556 0.01215 moveto
0.09392 0.01208 lineto
0.13228 0.01201 lineto
0.17063 0.01194 lineto
0.20899 0.01187 lineto
0.24735 0.0118 lineto
0.28571 0.01174 lineto
0.32407 0.01167 lineto
0.36243 0.01161 lineto
0.40079 0.01154 lineto
0.43915 0.01148 lineto
0.47751 0.01142 lineto
0.51587 0.01136 lineto
0.55423 0.01129 lineto
0.59259 0.01123 lineto
0.63095 0.01117 lineto
0.66931 0.01112 lineto
0.70767 0.01106 lineto
0.74603 0.011 lineto
0.78439 0.01094 lineto
0.82275 0.01089 lineto
0.86111 0.01083 lineto
0.89947 0.01078 lineto
0.93783 0.01072 lineto
0.97619 0.01067 lineto
stroke
grestore
grestore
gsave
0.67 setgray
gsave
0.005 setlinewidth
0.05556 3.125 moveto
0.06035 2.71493 lineto
0.06515 2.4 lineto
0.06994 2.15054 lineto
0.07474 1.94805 lineto
0.08433 1.63934 lineto
0.09392 1.41509 lineto
0.10351 1.24481 lineto
0.1131 1.11111 lineto
0.12269 1.00334 lineto
0.13228 0.91463 lineto
0.15146 0.7772 lineto
0.17063 0.67568 lineto
0.18981 0.59761 lineto
0.20899 0.53571 lineto
0.24735 0.44379 lineto
0.28571 0.37879 lineto
0.32407 0.3304 lineto
0.36243 0.29297 lineto
0.40079 0.26316 lineto
0.43915 0.23885 lineto
0.47751 0.21866 lineto
0.51587 0.20161 lineto
0.55423 0.18703 lineto
0.59259 0.17442 lineto
0.63095 0.1634 lineto
0.66931 0.15369 lineto
0.70767 0.14507 lineto
0.74603 0.13736 lineto
0.78439 0.13043 lineto
0.82275 0.12417 lineto
0.86111 0.11848 lineto
0.89947 0.11329 lineto
0.93783 0.10854 lineto
0.97619 0.10417 lineto
stroke
grestore
grestore
gsave
%[ 0.05 0.03 ] 0 setdash
0 setgray
gsave
0.005 setlinewidth
0.05556 0.01493 moveto
0.09392 0.01486 lineto
0.13228 0.01479 lineto
0.17063 0.01473 lineto
0.20899 0.01466 lineto
0.24735 0.01459 lineto
0.28571 0.01452 lineto
0.32407 0.01446 lineto
0.36243 0.01439 lineto
0.40079 0.01433 lineto
0.43915 0.01427 lineto
0.47751 0.0142 lineto
0.51587 0.01414 lineto
0.55423 0.01408 lineto
0.59259 0.01402 lineto
0.63095 0.01396 lineto
0.66931 0.0139 lineto
0.70767 0.01384 lineto
0.74603 0.01379 lineto
0.78439 0.01373 lineto
0.82275 0.01367 lineto
0.86111 0.01362 lineto
0.89947 0.01356 lineto
0.93783 0.01351 lineto
0.97619 0.01346 lineto
stroke
grestore
grestore
grestore
grestore
gsave
gsave
0 setgray
%[(EMAP/LMS-C)] 0.81746 0.04687 0 0 Mshowa
0 setgray
%[(ML)] 0.69048 0.19844 0 0 Mshowa
grestore
grestore
grestore
% End of Graphics
MathPictureEnd
%%EPS Trailer
end

%%EndDocument
 GE 765 1000 270 33047 69596 GB 
%%BeginDocument: /usr0/rozzi/Documentation/PhDThesis/Chapter2/tdog25.eps
%!PS-Adobe-2.0 EPSF-1.2
%%BoundingBox: 0 0 400 249
%%Creator: Mathematica
%%Title: Clipboard
%%CreationDate: Never Never
%%EndComments
50 dict begin
/Mnodistort true def
/pageDashArray [4] def
/nullDashArray [] def

% Compute the minimum of two numbers.
/Mmin {         % p q Mmin min(p,q)
        2 copy          % p q p q
        gt              % p q p>q?
        { exch } if     % min(p,q) max(p,q)
        pop             % min(p,q)
} bind def


% Compute the maximum of two numbers.
/Mmax {         % p q Mmax max(p,q)
        2 copy          % p q p q
        lt              % p q p<q?
        { exch } if     % max(p,q) min(p,q)
        pop             % max(p,q)
} bind def

/Mpstart {
    MathPictureStart
} bind def
/Mpend {
    MathPictureEnd
} bind def
/Mscale {
    0 1 0 1
    5 -1 roll
    MathScale
} bind def
/Plain
        /Courier findfont
def
/Bold
        /Courier-Bold findfont
def
/Italic
        /Courier-Oblique findfont
def
/MathPictureStart {
        gsave
        newpath
        /Mtmatrix
        matrix currentmatrix
        def
        Plain
        Mfontsize scalefont
        setfont
0 setgray 0 setlinewidth
} bind def
/MathPictureEnd {
        grestore
} bind def
/Mdot {
        moveto
        0 0 rlineto
        stroke
} def
/Mtetra {
        moveto
        lineto
        lineto
        lineto
        fill
} def
/Metetra {
        moveto
        lineto
        lineto
        lineto
        closepath
        gsave
        fill
        grestore
        0 setgray
        stroke
} def
/Mistroke {
        flattenpath
        0 0 0
        {
        4 2 roll
        pop pop
        }
        {
        4 -1 roll
        2 index
        sub dup mul
        4 -1 roll
        2 index
        sub dup mul
        add sqrt
        4 -1 roll
        add
        3 1 roll
        }
        {
        stop
        }
        {
        stop
        }
        pathforall
        pop pop
        currentpoint
        stroke
        moveto
        currentdash
        3 -1 roll
        add
        setdash
} def
/Mfstroke {
        stroke
        currentdash
        pop 0
        setdash
} def
/Msboxa {
        newpath
        5 -1 roll
        Mvboxa
        pop
        6 -1 roll
        5 -1 roll
        4 -1 roll
        Msboxa1
        5 -3 roll
        Msboxa1
        [
        7 -2 roll
        [ 2 index 2 index
        10 -1 roll
        9 -1 roll
        ]
        6 1 roll
        5 -2 roll
        ]
} bind def
        
/Msboxa1 {
        sub
        2 div
        dup
        2 index
        1 add
        mul
        3 -1 roll
        -1 add
        3 -1 roll
        mul
} bind def
/Mvboxa {
        gsave
        newpath
        [ true
        3 -1 roll
        {
        Mbbox
        5 -1 roll
        {
        0
        5 1 roll
        }
        {
        7 -1 roll
        exch sub
        (m) stringwidth pop
        .3 mul
        sub
        7 1 roll
        6 -1 roll
        4 -1 roll
        Mmin
        3 -1 roll
        5 index
        add
        5 -1 roll
        4 -1 roll
        Mmax
        4 -1 roll
        }
        ifelse
        false
        }
        forall
        { stop } if
        counttomark
        1 add
        4 roll
        ]
        grestore
} bind def
/Mbbox {
        0 0 moveto
        false charpath
        flattenpath
        pathbbox
        newpath
} bind def
/Mmin {
        2 copy
        gt
        { exch } if
        pop
} bind def
/Mmax {
        2 copy
        lt
        { exch } if
        pop
} bind def
/Mshowa {
        4 -2 roll
        moveto
        2 index
        Mtmatrix setmatrix
        Mvboxa
        7 1 roll
        6 -1 roll
        5 -1 roll
        4 -1 roll
        Mshowa1
        4 1 roll
        Mshowa1
        rmoveto
        currentpoint
        0 1
        4 index length
        -1 add
        {
        2 index
        4 index
        2 index
        get
        3 index
        add
        moveto
        4 index
        exch get
        show
        } for
        pop pop pop pop
        Mgmatrix setmatrix
} bind def
/Mshowa1 {
        2 copy
        add
        4 1 roll
        sub
        mul
        sub
        -2 div
} bind def
/MathScale {
        Mwidth
        Mheight
        Mlp
        translate
        scale
        /Mgmatrix
        matrix currentmatrix
        def
        /Msaveaa exch def
        /Msavebb exch def
        /Msavecc exch def
        /Msavedd exch def
} bind def
/Mlp {
        3 copy
        Mlpfirst
        {
        Mnodistort
        {
        Mmin
        dup
        } if
        4 index
        2 index
        2 index
        Mlprun
        11 index
        11 -1 roll
        10 -4 roll
        Mlp1
        8 index
        9 -5 roll
        Mlp1
        4 -1 roll
        and
        { exit } if
        3 -1 roll
        pop pop
        } loop
        exch
        3 1 roll
        7 -3 roll
        pop pop pop
} bind def
/Mlpfirst {
        3 -1 roll
        dup length
        2 copy
        -2 add
        get
        aload
        pop pop pop
        4 -2 roll
        -1 add
        get
        aload
        pop pop pop
        6 -1 roll
        3 -1 roll
        5 -1 roll
        sub
        dup /MsaveAx exch def
        div
        4 1 roll
        exch sub
        dup /MsaveAy exch def
        div
} bind def
/Mlprun {
        2 copy
        4 index
        0 get
        dup
        4 1 roll
        Mlprun1
        3 copy
        8 -2 roll
        9 -1 roll
        {
        3 copy
        Mlprun1
        3 copy
        11 -3 roll
        /gt Mlpminmax
        8 3 roll
        11 -3 roll
        /lt Mlpminmax
        8 3 roll
        } forall
        pop pop pop pop
        3 1 roll
        pop pop
        aload pop
        5 -1 roll
        aload pop
        exch
        6 -1 roll
        Mlprun2
        8 2 roll
        4 -1 roll
        Mlprun2
        6 2 roll
        3 -1 roll
        Mlprun2
        4 2 roll
        exch
        Mlprun2
        6 2 roll
} bind def
/Mlprun1 {
        aload pop
        exch
        6 -1 roll
        5 -1 roll
        mul add
        4 -2 roll
        mul
        3 -1 roll
        add
} bind def
/Mlprun2 {
        2 copy
        add 2 div
        3 1 roll
        exch sub
} bind def
/Mlpminmax {
        cvx
        2 index
        6 index
        2 index
        exec
        {
        7 -3 roll
        4 -1 roll
        } if
        1 index
        5 index
        3 -1 roll
        exec
        {
        4 1 roll
        pop
        5 -1 roll
        aload
        pop pop
        4 -1 roll
        aload pop
        [
        8 -2 roll
        pop
        5 -2 roll
        pop
        6 -2 roll
        pop
        5 -1 roll
        ]
        4 1 roll
        pop
        }
        {
        pop pop pop
        } ifelse
} bind def
/Mlp1 {
        5 index
        3 index sub
        5 index
        2 index mul
        1 index
        le
        1 index
        0 le
        or
        dup
        not
        {
        1 index
        3 index div
        .99999 mul
        8 -1 roll
        pop
        7 1 roll
        }
        if
        8 -1 roll
        2 div
        7 -2 roll
        pop sub
        5 index
        6 -3 roll
        pop pop
        mul sub
        exch
} bind def
/Mfontsize      12 def
/Mleft          0.000000 def
/Mbottom        249.000000 def
/Mwidth         400.000000 def
/Mheight        249.000000 def
/Courier findfont 12 scalefont setfont
%!
%%Creator: Mathematica
%%AspectRatio: 0.625 
MathPictureStart
% Scaling calculations
0.02381 0.03175 0.01488 0.29762 [
[(d=0.25, b=1.0, p=0.5)] 0.5 0.63125 0 -1 Msboxa
[(5)] 0.18254 0.00238 0 1 Msboxa
[(10)] 0.34127 0.00238 0 1 Msboxa
[(15)] 0.5 0.00238 0 1 Msboxa
[(20)] 0.65873 0.00238 0 1 Msboxa
[(25)] 0.81746 0.00238 0 1 Msboxa
[(30)] 0.97619 0.00238 0 1 Msboxa
[(n)] 1.00625 0.01488 -1 0 Msboxa
[(0.5)] 0.01131 0.16369 1 0 Msboxa
[(1)] 0.01131 0.3125 1 0 Msboxa
[(1.5)] 0.01131 0.46131 1 0 Msboxa
[(2)] 0.01131 0.61012 1 0 Msboxa
[(MSE)] 0.02381 0.63125 0 -1 Msboxa
[ -0.001 -0.001 0 0 ]
[ 1.001 0.626 0 0 ]
] MathScale
% Start of Graphics
1 setlinecap
1 setlinejoin
newpath
%%Object: Graphics
[ ] 0 setdash
0 setgray
0 setgray
%[(d=0.25, b=1.0, p=0.5)] 0.5 0.63125 0 -1 Mshowa
gsave
gsave
0.002 setlinewidth
0 0.01488 moveto
1 0.01488 lineto
stroke
0.18254 0.00863 moveto
0.18254 0.02113 lineto
stroke
0 setgray
[(5)] 0.18254 0.00238 0 1 Mshowa
0.34127 0.00863 moveto
0.34127 0.02113 lineto
stroke
0 setgray
[(10)] 0.34127 0.00238 0 1 Mshowa
0.5 0.00863 moveto
0.5 0.02113 lineto
stroke
0 setgray
[(15)] 0.5 0.00238 0 1 Mshowa
0.65873 0.00863 moveto
0.65873 0.02113 lineto
stroke
0 setgray
[(20)] 0.65873 0.00238 0 1 Mshowa
0.81746 0.00863 moveto
0.81746 0.02113 lineto
stroke
0 setgray
[(25)] 0.81746 0.00238 0 1 Mshowa
0.97619 0.00863 moveto
0.97619 0.02113 lineto
stroke
0 setgray
[(30)] 0.97619 0.00238 0 1 Mshowa
0 setgray
[(k)] 1.00625 0.01488 -1 0 Mshowa
0.02381 0 moveto
0.02381 0.625 lineto
stroke
0.01756 0.16369 moveto
0.03006 0.16369 lineto
stroke
0 setgray
[(0.5)] 0.01131 0.16369 1 0 Mshowa
0.01756 0.3125 moveto
0.03006 0.3125 lineto
stroke
0 setgray
[(1)] 0.01131 0.3125 1 0 Mshowa
0.01756 0.46131 moveto
0.03006 0.46131 lineto
stroke
0 setgray
[(1.5)] 0.01131 0.46131 1 0 Mshowa
0.01756 0.61012 moveto
0.03006 0.61012 lineto
stroke
0 setgray
[(2)] 0.01131 0.61012 1 0 Mshowa
0 setgray
[(MSE)] 0.02381 0.63125 0 -1 Mshowa
grestore
grestore
% legend and panel label (place after MSE label)
[(ML)] 0.7 0.43125 0 -1 Mshowa
[(EMAP)] 0.73 0.38125 0 -1 Mshowa
[(LMS-C)] 0.74 0.33125 0 -1 Mshowa
[(\(a\))] 0.7 0.53125 0 -1 Mshowa
gsave
0.67 setgray
0.005 setlinewidth
0.53 0.444 moveto
0.66 0.444 lineto
stroke
0.33 setgray
0.53 0.394 moveto
0.66 0.394 lineto
stroke
0. setgray
0.53 0.344 moveto
0.66 0.344 lineto
stroke
grestore

0 0 moveto
1 0 lineto
1 0.625 lineto
0 0.625 lineto
closepath
clip
newpath
0 setgray
gsave
gsave
0.33 setgray
gsave
0.005 setlinewidth
0.05556 0.56515 moveto
0.06035 0.49765 lineto
0.06515 0.44492 lineto
0.06994 0.40258 lineto
0.07474 0.36783 lineto
0.08433 0.31419 lineto
0.09392 0.27471 lineto
0.10351 0.24443 lineto
0.1131 0.22047 lineto
0.13228 0.18497 lineto
0.15146 0.15993 lineto
0.17063 0.14131 lineto
0.18981 0.12693 lineto
0.20899 0.11549 lineto
0.24735 0.09843 lineto
0.28571 0.08631 lineto
0.32407 0.07727 lineto
0.36243 0.07025 lineto
0.40079 0.06466 lineto
0.43915 0.06009 lineto
0.47751 0.05629 lineto
0.51587 0.05308 lineto
0.55423 0.05033 lineto
0.59259 0.04795 lineto
0.63095 0.04587 lineto
0.66931 0.04404 lineto
0.70767 0.04241 lineto
0.74603 0.04095 lineto
0.78439 0.03964 lineto
0.82275 0.03845 lineto
0.86111 0.03738 lineto
0.89947 0.0364 lineto
0.93783 0.0355 lineto
0.97619 0.03467 lineto
stroke
grestore
grestore
gsave
0.67 setgray
gsave
0.005 setlinewidth
0.05556 0.61012 moveto
0.06035 0.53201 lineto
0.06515 0.47202 lineto
0.06994 0.42451 lineto
0.07474 0.38594 lineto
0.08433 0.32714 lineto
0.09392 0.28442 lineto
0.10351 0.25199 lineto
0.1131 0.22652 lineto
0.12269 0.20599 lineto
0.13228 0.1891 lineto
0.15146 0.16292 lineto
0.17063 0.14358 lineto
0.18981 0.12871 lineto
0.20899 0.11692 lineto
0.24735 0.09941 lineto
0.28571 0.08703 lineto
0.32407 0.07781 lineto
0.36243 0.07068 lineto
0.40079 0.06501 lineto
0.43915 0.06038 lineto
0.47751 0.05653 lineto
0.51587 0.05328 lineto
0.55423 0.05051 lineto
0.59259 0.0481 lineto
0.63095 0.046 lineto
0.66931 0.04415 lineto
0.70767 0.04251 lineto
0.74603 0.04105 lineto
0.78439 0.03973 lineto
0.82275 0.03853 lineto
0.86111 0.03745 lineto
0.89947 0.03646 lineto
0.93783 0.03555 lineto
0.97619 0.03472 lineto
stroke
grestore
grestore
gsave
%[ 0.05 0.03 ] 0 setdash
0 setgray
gsave
0.005 setlinewidth
0.05556 0.56538 moveto
0.06035 0.49789 lineto
0.06515 0.44515 lineto
0.06994 0.40281 lineto
0.07474 0.36807 lineto
0.08433 0.31443 lineto
0.09392 0.27494 lineto
0.10351 0.24467 lineto
0.1131 0.22071 lineto
0.13228 0.18521 lineto
0.15146 0.16016 lineto
0.17063 0.14155 lineto
0.18981 0.12717 lineto
0.20899 0.11573 lineto
0.24735 0.09866 lineto
0.28571 0.08655 lineto
0.32407 0.0775 lineto
0.36243 0.07049 lineto
0.40079 0.06489 lineto
0.43915 0.06033 lineto
0.47751 0.05652 lineto
0.51587 0.05331 lineto
0.55423 0.05057 lineto
0.59259 0.04819 lineto
0.63095 0.04611 lineto
0.66931 0.04427 lineto
0.70767 0.04264 lineto
0.74603 0.04119 lineto
0.78439 0.03988 lineto
0.82275 0.03869 lineto
0.86111 0.03761 lineto
0.89947 0.03663 lineto
0.93783 0.03573 lineto
0.97619 0.0349 lineto
stroke
grestore
grestore
grestore
% End of Graphics
MathPictureEnd
%%EPS Trailer
end

%%EndDocument
 GE 765 1000 270 52600 69596 GB 
%%BeginDocument: /usr0/rozzi/Documentation/PhDThesis/Chapter2/tdog4.eps
%!PS-Adobe-2.0 EPSF-1.2
%%BoundingBox: 0 0 400 252
%%Creator: Mathematica
%%Title: Clipboard
%%CreationDate: Never Never
%%EndComments
50 dict begin
/Mnodistort true def
/pageDashArray [4] def
/nullDashArray [] def

% Compute the minimum of two numbers.
/Mmin {         % p q Mmin min(p,q)
        2 copy          % p q p q
        gt              % p q p>q?
        { exch } if     % min(p,q) max(p,q)
        pop             % min(p,q)
} bind def


% Compute the maximum of two numbers.
/Mmax {         % p q Mmax max(p,q)
        2 copy          % p q p q
        lt              % p q p<q?
        { exch } if     % max(p,q) min(p,q)
        pop             % max(p,q)
} bind def

/Mpstart {
    MathPictureStart
} bind def
/Mpend {
    MathPictureEnd
} bind def
/Mscale {
    0 1 0 1
    5 -1 roll
    MathScale
} bind def
/Plain
        /Courier findfont
def
/Bold
        /Courier-Bold findfont
def
/Italic
        /Courier-Oblique findfont
def
/MathPictureStart {
        gsave
        newpath
        /Mtmatrix
        matrix currentmatrix
        def
        Plain
        Mfontsize scalefont
        setfont
0 setgray 0 setlinewidth
} bind def
/MathPictureEnd {
        grestore
} bind def
/Mdot {
        moveto
        0 0 rlineto
        stroke
} def
/Mtetra {
        moveto
        lineto
        lineto
        lineto
        fill
} def
/Metetra {
        moveto
        lineto
        lineto
        lineto
        closepath
        gsave
        fill
        grestore
        0 setgray
        stroke
} def
/Mistroke {
        flattenpath
        0 0 0
        {
        4 2 roll
        pop pop
        }
        {
        4 -1 roll
        2 index
        sub dup mul
        4 -1 roll
        2 index
        sub dup mul
        add sqrt
        4 -1 roll
        add
        3 1 roll
        }
        {
        stop
        }
        {
        stop
        }
        pathforall
        pop pop
        currentpoint
        stroke
        moveto
        currentdash
        3 -1 roll
        add
        setdash
} def
/Mfstroke {
        stroke
        currentdash
        pop 0
        setdash
} def
/Msboxa {
        newpath
        5 -1 roll
        Mvboxa
        pop
        6 -1 roll
        5 -1 roll
        4 -1 roll
        Msboxa1
        5 -3 roll
        Msboxa1
        [
        7 -2 roll
        [ 2 index 2 index
        10 -1 roll
        9 -1 roll
        ]
        6 1 roll
        5 -2 roll
        ]
} bind def
        
/Msboxa1 {
        sub
        2 div
        dup
        2 index
        1 add
        mul
        3 -1 roll
        -1 add
        3 -1 roll
        mul
} bind def
/Mvboxa {
        gsave
        newpath
        [ true
        3 -1 roll
        {
        Mbbox
        5 -1 roll
        {
        0
        5 1 roll
        }
        {
        7 -1 roll
        exch sub
        (m) stringwidth pop
        .3 mul
        sub
        7 1 roll
        6 -1 roll
        4 -1 roll
        Mmin
        3 -1 roll
        5 index
        add
        5 -1 roll
        4 -1 roll
        Mmax
        4 -1 roll
        }
        ifelse
        false
        }
        forall
        { stop } if
        counttomark
        1 add
        4 roll
        ]
        grestore
} bind def
/Mbbox {
        0 0 moveto
        false charpath
        flattenpath
        pathbbox
        newpath
} bind def
/Mmin {
        2 copy
        gt
        { exch } if
        pop
} bind def
/Mmax {
        2 copy
        lt
        { exch } if
        pop
} bind def
/Mshowa {
        4 -2 roll
        moveto
        2 index
        Mtmatrix setmatrix
        Mvboxa
        7 1 roll
        6 -1 roll
        5 -1 roll
        4 -1 roll
        Mshowa1
        4 1 roll
        Mshowa1
        rmoveto
        currentpoint
        0 1
        4 index length
        -1 add
        {
        2 index
        4 index
        2 index
        get
        3 index
        add
        moveto
        4 index
        exch get
        show
        } for
        pop pop pop pop
        Mgmatrix setmatrix
} bind def
/Mshowa1 {
        2 copy
        add
        4 1 roll
        sub
        mul
        sub
        -2 div
} bind def
/MathScale {
        Mwidth
        Mheight
        Mlp
        translate
        scale
        /Mgmatrix
        matrix currentmatrix
        def
        /Msaveaa exch def
        /Msavebb exch def
        /Msavecc exch def
        /Msavedd exch def
} bind def
/Mlp {
        3 copy
        Mlpfirst
        {
        Mnodistort
        {
        Mmin
        dup
        } if
        4 index
        2 index
        2 index
        Mlprun
        11 index
        11 -1 roll
        10 -4 roll
        Mlp1
        8 index
        9 -5 roll
        Mlp1
        4 -1 roll
        and
        { exit } if
        3 -1 roll
        pop pop
        } loop
        exch
        3 1 roll
        7 -3 roll
        pop pop pop
} bind def
/Mlpfirst {
        3 -1 roll
        dup length
        2 copy
        -2 add
        get
        aload
        pop pop pop
        4 -2 roll
        -1 add
        get
        aload
        pop pop pop
        6 -1 roll
        3 -1 roll
        5 -1 roll
        sub
        dup /MsaveAx exch def
        div
        4 1 roll
        exch sub
        dup /MsaveAy exch def
        div
} bind def
/Mlprun {
        2 copy
        4 index
        0 get
        dup
        4 1 roll
        Mlprun1
        3 copy
        8 -2 roll
        9 -1 roll
        {
        3 copy
        Mlprun1
        3 copy
        11 -3 roll
        /gt Mlpminmax
        8 3 roll
        11 -3 roll
        /lt Mlpminmax
        8 3 roll
        } forall
        pop pop pop pop
        3 1 roll
        pop pop
        aload pop
        5 -1 roll
        aload pop
        exch
        6 -1 roll
        Mlprun2
        8 2 roll
        4 -1 roll
        Mlprun2
        6 2 roll
        3 -1 roll
        Mlprun2
        4 2 roll
        exch
        Mlprun2
        6 2 roll
} bind def
/Mlprun1 {
        aload pop
        exch
        6 -1 roll
        5 -1 roll
        mul add
        4 -2 roll
        mul
        3 -1 roll
        add
} bind def
/Mlprun2 {
        2 copy
        add 2 div
        3 1 roll
        exch sub
} bind def
/Mlpminmax {
        cvx
        2 index
        6 index
        2 index
        exec
        {
        7 -3 roll
        4 -1 roll
        } if
        1 index
        5 index
        3 -1 roll
        exec
        {
        4 1 roll
        pop
        5 -1 roll
        aload
        pop pop
        4 -1 roll
        aload pop
        [
        8 -2 roll
        pop
        5 -2 roll
        pop
        6 -2 roll
        pop
        5 -1 roll
        ]
        4 1 roll
        pop
        }
        {
        pop pop pop
        } ifelse
} bind def
/Mlp1 {
        5 index
        3 index sub
        5 index
        2 index mul
        1 index
        le
        1 index
        0 le
        or
        dup
        not
        {
        1 index
        3 index div
        .99999 mul
        8 -1 roll
        pop
        7 1 roll
        }
        if
        8 -1 roll
        2 div
        7 -2 roll
        pop sub
        5 index
        6 -3 roll
        pop pop
        mul sub
        exch
} bind def
/Mfontsize      12 def
/Mleft          0.000000 def
/Mbottom        252.000000 def
/Mwidth         400.000000 def
/Mheight        252.000000 def
/Courier findfont 12 scalefont setfont
%!
%%Creator: Mathematica
%%AspectRatio: 0.625 
MathPictureStart
% Scaling calculations
0.02381 0.03175 0 1.5625 [
[(d=4.0, b=1.0, p=0.5)] 0.5 0.63125 0 -1 Msboxa
[(5)] 0.18254 -0.0125 0 1 Msboxa
[(10)] 0.34127 -0.0125 0 1 Msboxa
[(15)] 0.5 -0.0125 0 1 Msboxa
[(20)] 0.65873 -0.0125 0 1 Msboxa
[(25)] 0.81746 -0.0125 0 1 Msboxa
[(30)] 0.97619 -0.0125 0 1 Msboxa
[(n)] 1.00625 0 -1 0 Msboxa
[(0.1)] 0.01131 0.15625 1 0 Msboxa
[(0.2)] 0.01131 0.3125 1 0 Msboxa
[(0.3)] 0.01131 0.46875 1 0 Msboxa
[(0.4)] 0.01131 0.625 1 0 Msboxa
[(MSE)] 0.02381 0.63125 0 -1 Msboxa
[ -0.001 -0.00725 0 0 ]
[ 1.001 0.626 0 0 ]
] MathScale
% Start of Graphics
1 setlinecap
1 setlinejoin
newpath
%%Object: Graphics
[ ] 0 setdash
0 setgray
0 setgray
%[(d=4.0, b=1.0, p=0.5)] 0.5 0.63125 0 -1 Mshowa
[(\(c\))] 0.7 0.53125 0 -1 Mshowa

gsave
gsave
0.002 setlinewidth
0 0 moveto
1 0 lineto
stroke
0.18254 -0.00625 moveto
0.18254 0.00625 lineto
stroke
0 setgray
[(5)] 0.18254 -0.0125 0 1 Mshowa
0.34127 -0.00625 moveto
0.34127 0.00625 lineto
stroke
0 setgray
[(10)] 0.34127 -0.0125 0 1 Mshowa
0.5 -0.00625 moveto
0.5 0.00625 lineto
stroke
0 setgray
[(15)] 0.5 -0.0125 0 1 Mshowa
0.65873 -0.00625 moveto
0.65873 0.00625 lineto
stroke
0 setgray
[(20)] 0.65873 -0.0125 0 1 Mshowa
0.81746 -0.00625 moveto
0.81746 0.00625 lineto
stroke
0 setgray
[(25)] 0.81746 -0.0125 0 1 Mshowa
0.97619 -0.00625 moveto
0.97619 0.00625 lineto
stroke
0 setgray
[(30)] 0.97619 -0.0125 0 1 Mshowa
0 setgray
[(k)] 1.00625 0 -1 0 Mshowa
0.02381 0 moveto
0.02381 0.625 lineto
stroke
0.01756 0.15625 moveto
0.03006 0.15625 lineto
stroke
0 setgray
[(0.1)] 0.01131 0.15625 1 0 Mshowa
0.01756 0.3125 moveto
0.03006 0.3125 lineto
stroke
0 setgray
[(0.2)] 0.01131 0.3125 1 0 Mshowa
0.01756 0.46875 moveto
0.03006 0.46875 lineto
stroke
0 setgray
[(0.3)] 0.01131 0.46875 1 0 Mshowa
0.01756 0.625 moveto
0.03006 0.625 lineto
stroke
0 setgray
[(0.4)] 0.01131 0.625 1 0 Mshowa
0 setgray
[(MSE)] 0.02381 0.63125 0 -1 Mshowa
grestore
grestore
0 0 moveto
1 0 lineto
1 0.625 lineto
0 0.625 lineto
closepath
clip
newpath
0 setgray
gsave
gsave
gsave
gsave
0.33 setgray
gsave
0.005 setlinewidth
0.05556 0.18128 moveto
0.09392 0.16704 lineto
0.13228 0.15506 lineto
0.17063 0.14484 lineto
0.20899 0.136 lineto
0.24735 0.12826 lineto
0.28571 0.12142 lineto
0.32407 0.11533 lineto
0.36243 0.10986 lineto
0.40079 0.10493 lineto
0.43915 0.10045 lineto
0.47751 0.09636 lineto
0.51587 0.09261 lineto
0.55423 0.08916 lineto
0.59259 0.08597 lineto
0.63095 0.08301 lineto
0.66931 0.08026 lineto
0.70767 0.0777 lineto
0.74603 0.0753 lineto
0.78439 0.07305 lineto
0.82275 0.07094 lineto
0.86111 0.06895 lineto
0.89947 0.06707 lineto
0.93783 0.0653 lineto
0.97619 0.06362 lineto
stroke
grestore
grestore
gsave
0.67 setgray
gsave
0.005 setlinewidth
0.05556 3.125 moveto
0.06035 2.71493 lineto
0.06515 2.4 lineto
0.06994 2.15054 lineto
0.07474 1.94805 lineto
0.08433 1.63934 lineto
0.09392 1.41509 lineto
0.10351 1.24481 lineto
0.1131 1.11111 lineto
0.12269 1.00334 lineto
0.13228 0.91463 lineto
0.15146 0.7772 lineto
0.17063 0.67568 lineto
0.18981 0.59761 lineto
0.20899 0.53571 lineto
0.24735 0.44379 lineto
0.28571 0.37879 lineto
0.32407 0.3304 lineto
0.36243 0.29297 lineto
0.40079 0.26316 lineto
0.43915 0.23885 lineto
0.47751 0.21866 lineto
0.51587 0.20161 lineto
0.55423 0.18703 lineto
0.59259 0.17442 lineto
0.63095 0.1634 lineto
0.66931 0.15369 lineto
0.70767 0.14507 lineto
0.74603 0.13736 lineto
0.78439 0.13043 lineto
0.82275 0.12417 lineto
0.86111 0.11848 lineto
0.89947 0.11329 lineto
0.93783 0.10854 lineto
0.97619 0.10417 lineto
stroke
grestore
grestore
gsave
%[ 0.05 0.03 ] 0 setdash
0 setgray
gsave
0.005 setlinewidth
0.05556 0.19911 moveto
0.09392 0.18487 lineto
0.13228 0.1729 lineto
0.17063 0.16267 lineto
0.20899 0.15383 lineto
0.24735 0.14609 lineto
0.28571 0.13925 lineto
0.32407 0.13316 lineto
0.36243 0.1277 lineto
0.40079 0.12276 lineto
0.43915 0.11828 lineto
0.47751 0.11419 lineto
0.51587 0.11044 lineto
0.55423 0.10699 lineto
0.59259 0.1038 lineto
0.63095 0.10084 lineto
0.66931 0.09809 lineto
0.70767 0.09553 lineto
0.74603 0.09313 lineto
0.78439 0.09088 lineto
0.82275 0.08877 lineto
0.86111 0.08678 lineto
0.89947 0.08491 lineto
0.93783 0.08313 lineto
0.97619 0.08146 lineto
stroke
grestore
grestore
grestore
grestore
gsave
gsave
0 setgray
%[(EMAP)] 0.18254 0.10156 0 0 Mshowa
0 setgray
%[(ML)] 0.34127 0.39063 0 0 Mshowa
0 setgray
%[(LMS-C)] 0.18254 0.21875 0 0 Mshowa
grestore
grestore
grestore
% End of Graphics
MathPictureEnd
%%EPS Trailer
end

%%EndDocument
 GE /Times-Bold SF
15891 71348 MT
(Figure 2-10:)SH
/Times-Roman SF
22214 XM
(Mean-square error as specified by Equation \0502.61\051 vs. number of)SH
21188 72544 MT
(samples for dogmatism values of)SH
/Symbol SF
36005 XM
(d)SH
/Times-Roman SF
36823 XM
(= \050a\051 0.25, \050b\051 1, \050c\051 4, and \050d\051 16.)SH
ES
%%Page: 34 35
BS
0 SI
10 /Times-Roman AF
54800 4286 MT
(34)SH
11 SS 
765 1000 270 33162 37800 GB 
%%BeginDocument: /usr0/rozzi/Documentation/PhDThesis/Chapter2/tcor5.eps
%!PS-Adobe-2.0 EPSF-1.2
%%BoundingBox: 0 0 400 252
%%Creator: Mathematica
%%Title: Clipboard
%%CreationDate: Never Never
%%EndComments
50 dict begin
/Mnodistort true def
/pageDashArray [4] def
/nullDashArray [] def

% Compute the minimum of two numbers.
/Mmin {         % p q Mmin min(p,q)
        2 copy          % p q p q
        gt              % p q p>q?
        { exch } if     % min(p,q) max(p,q)
        pop             % min(p,q)
} bind def


% Compute the maximum of two numbers.
/Mmax {         % p q Mmax max(p,q)
        2 copy          % p q p q
        lt              % p q p<q?
        { exch } if     % max(p,q) min(p,q)
        pop             % max(p,q)
} bind def

/Mpstart {
    MathPictureStart
} bind def
/Mpend {
    MathPictureEnd
} bind def
/Mscale {
    0 1 0 1
    5 -1 roll
    MathScale
} bind def
/Plain
        /Courier findfont
def
/Bold
        /Courier-Bold findfont
def
/Italic
        /Courier-Oblique findfont
def
/MathPictureStart {
        gsave
        newpath
        /Mtmatrix
        matrix currentmatrix
        def
        Plain
        Mfontsize scalefont
        setfont
0 setgray 0 setlinewidth
} bind def
/MathPictureEnd {
        grestore
} bind def
/Mdot {
        moveto
        0 0 rlineto
        stroke
} def
/Mtetra {
        moveto
        lineto
        lineto
        lineto
        fill
} def
/Metetra {
        moveto
        lineto
        lineto
        lineto
        closepath
        gsave
        fill
        grestore
        0 setgray
        stroke
} def
/Mistroke {
        flattenpath
        0 0 0
        {
        4 2 roll
        pop pop
        }
        {
        4 -1 roll
        2 index
        sub dup mul
        4 -1 roll
        2 index
        sub dup mul
        add sqrt
        4 -1 roll
        add
        3 1 roll
        }
        {
        stop
        }
        {
        stop
        }
        pathforall
        pop pop
        currentpoint
        stroke
        moveto
        currentdash
        3 -1 roll
        add
        setdash
} def
/Mfstroke {
        stroke
        currentdash
        pop 0
        setdash
} def
/Msboxa {
        newpath
        5 -1 roll
        Mvboxa
        pop
        6 -1 roll
        5 -1 roll
        4 -1 roll
        Msboxa1
        5 -3 roll
        Msboxa1
        [
        7 -2 roll
        [ 2 index 2 index
        10 -1 roll
        9 -1 roll
        ]
        6 1 roll
        5 -2 roll
        ]
} bind def
        
/Msboxa1 {
        sub
        2 div
        dup
        2 index
        1 add
        mul
        3 -1 roll
        -1 add
        3 -1 roll
        mul
} bind def
/Mvboxa {
        gsave
        newpath
        [ true
        3 -1 roll
        {
        Mbbox
        5 -1 roll
        {
        0
        5 1 roll
        }
        {
        7 -1 roll
        exch sub
        (m) stringwidth pop
        .3 mul
        sub
        7 1 roll
        6 -1 roll
        4 -1 roll
        Mmin
        3 -1 roll
        5 index
        add
        5 -1 roll
        4 -1 roll
        Mmax
        4 -1 roll
        }
        ifelse
        false
        }
        forall
        { stop } if
        counttomark
        1 add
        4 roll
        ]
        grestore
} bind def
/Mbbox {
        0 0 moveto
        false charpath
        flattenpath
        pathbbox
        newpath
} bind def
/Mmin {
        2 copy
        gt
        { exch } if
        pop
} bind def
/Mmax {
        2 copy
        lt
        { exch } if
        pop
} bind def
/Mshowa {
        4 -2 roll
        moveto
        2 index
        Mtmatrix setmatrix
        Mvboxa
        7 1 roll
        6 -1 roll
        5 -1 roll
        4 -1 roll
        Mshowa1
        4 1 roll
        Mshowa1
        rmoveto
        currentpoint
        0 1
        4 index length
        -1 add
        {
        2 index
        4 index
        2 index
        get
        3 index
        add
        moveto
        4 index
        exch get
        show
        } for
        pop pop pop pop
        Mgmatrix setmatrix
} bind def
/Mshowa1 {
        2 copy
        add
        4 1 roll
        sub
        mul
        sub
        -2 div
} bind def
/MathScale {
        Mwidth
        Mheight
        Mlp
        translate
        scale
        /Mgmatrix
        matrix currentmatrix
        def
        /Msaveaa exch def
        /Msavebb exch def
        /Msavecc exch def
        /Msavedd exch def
} bind def
/Mlp {
        3 copy
        Mlpfirst
        {
        Mnodistort
        {
        Mmin
        dup
        } if
        4 index
        2 index
        2 index
        Mlprun
        11 index
        11 -1 roll
        10 -4 roll
        Mlp1
        8 index
        9 -5 roll
        Mlp1
        4 -1 roll
        and
        { exit } if
        3 -1 roll
        pop pop
        } loop
        exch
        3 1 roll
        7 -3 roll
        pop pop pop
} bind def
/Mlpfirst {
        3 -1 roll
        dup length
        2 copy
        -2 add
        get
        aload
        pop pop pop
        4 -2 roll
        -1 add
        get
        aload
        pop pop pop
        6 -1 roll
        3 -1 roll
        5 -1 roll
        sub
        dup /MsaveAx exch def
        div
        4 1 roll
        exch sub
        dup /MsaveAy exch def
        div
} bind def
/Mlprun {
        2 copy
        4 index
        0 get
        dup
        4 1 roll
        Mlprun1
        3 copy
        8 -2 roll
        9 -1 roll
        {
        3 copy
        Mlprun1
        3 copy
        11 -3 roll
        /gt Mlpminmax
        8 3 roll
        11 -3 roll
        /lt Mlpminmax
        8 3 roll
        } forall
        pop pop pop pop
        3 1 roll
        pop pop
        aload pop
        5 -1 roll
        aload pop
        exch
        6 -1 roll
        Mlprun2
        8 2 roll
        4 -1 roll
        Mlprun2
        6 2 roll
        3 -1 roll
        Mlprun2
        4 2 roll
        exch
        Mlprun2
        6 2 roll
} bind def
/Mlprun1 {
        aload pop
        exch
        6 -1 roll
        5 -1 roll
        mul add
        4 -2 roll
        mul
        3 -1 roll
        add
} bind def
/Mlprun2 {
        2 copy
        add 2 div
        3 1 roll
        exch sub
} bind def
/Mlpminmax {
        cvx
        2 index
        6 index
        2 index
        exec
        {
        7 -3 roll
        4 -1 roll
        } if
        1 index
        5 index
        3 -1 roll
        exec
        {
        4 1 roll
        pop
        5 -1 roll
        aload
        pop pop
        4 -1 roll
        aload pop
        [
        8 -2 roll
        pop
        5 -2 roll
        pop
        6 -2 roll
        pop
        5 -1 roll
        ]
        4 1 roll
        pop
        }
        {
        pop pop pop
        } ifelse
} bind def
/Mlp1 {
        5 index
        3 index sub
        5 index
        2 index mul
        1 index
        le
        1 index
        0 le
        or
        dup
        not
        {
        1 index
        3 index div
        .99999 mul
        8 -1 roll
        pop
        7 1 roll
        }
        if
        8 -1 roll
        2 div
        7 -2 roll
        pop sub
        5 index
        6 -3 roll
        pop pop
        mul sub
        exch
} bind def
/Mfontsize      12 def
/Mleft          0.000000 def
/Mbottom        252.000000 def
/Mwidth         400.000000 def
/Mheight        252.000000 def
/Courier findfont 12 scalefont setfont
%!
%%Creator: Mathematica
%%AspectRatio: 0.625 
MathPictureStart
% Scaling calculations
0.02381 0.03175 0 0.52083 [
[(\(b\))] 0.5 0.63125 0 -1 Msboxa
[(5)] 0.18254 -0.0125 0 1 Msboxa
[(10)] 0.34127 -0.0125 0 1 Msboxa
[(15)] 0.5 -0.0125 0 1 Msboxa
[(20)] 0.65873 -0.0125 0 1 Msboxa
[(25)] 0.81746 -0.0125 0 1 Msboxa
[(30)] 0.97619 -0.0125 0 1 Msboxa
[(k)] 1.00625 0 -1 0 Msboxa
[(0.2)] 0.01131 0.10417 1 0 Msboxa
[(0.4)] 0.01131 0.20833 1 0 Msboxa
[(0.6)] 0.01131 0.3125 1 0 Msboxa
[(0.8)] 0.01131 0.41667 1 0 Msboxa
[(1)] 0.01131 0.52083 1 0 Msboxa
[(MSE)] 0.02381 0.63125 0 -1 Msboxa
[ -0.001 -0.00725 0 0 ]
[ 1.001 0.626 0 0 ]
] MathScale
% Start of Graphics
1 setlinecap
1 setlinejoin
newpath
%%Object: Graphics
[ ] 0 setdash
0 setgray
0 setgray
[(\(b\))] 0.7 0.53125 0 -1 Mshowa
gsave
gsave
0.002 setlinewidth
0 0 moveto
1 0 lineto
stroke
0.18254 -0.00625 moveto
0.18254 0.00625 lineto
stroke
0 setgray
[(5)] 0.18254 -0.0125 0 1 Mshowa
0.34127 -0.00625 moveto
0.34127 0.00625 lineto
stroke
0 setgray
[(10)] 0.34127 -0.0125 0 1 Mshowa
0.5 -0.00625 moveto
0.5 0.00625 lineto
stroke
0 setgray
[(15)] 0.5 -0.0125 0 1 Mshowa
0.65873 -0.00625 moveto
0.65873 0.00625 lineto
stroke
0 setgray
[(20)] 0.65873 -0.0125 0 1 Mshowa
0.81746 -0.00625 moveto
0.81746 0.00625 lineto
stroke
0 setgray
[(25)] 0.81746 -0.0125 0 1 Mshowa
0.97619 -0.00625 moveto
0.97619 0.00625 lineto
stroke
0 setgray
[(30)] 0.97619 -0.0125 0 1 Mshowa
0 setgray
[(k)] 1.00625 0 -1 0 Mshowa
0.02381 0 moveto
0.02381 0.625 lineto
stroke
0.01756 0.10417 moveto
0.03006 0.10417 lineto
stroke
0 setgray
[(0.2)] 0.01131 0.10417 1 0 Mshowa
0.01756 0.20833 moveto
0.03006 0.20833 lineto
stroke
0 setgray
[(0.4)] 0.01131 0.20833 1 0 Mshowa
0.01756 0.3125 moveto
0.03006 0.3125 lineto
stroke
0 setgray
[(0.6)] 0.01131 0.3125 1 0 Mshowa
0.01756 0.41667 moveto
0.03006 0.41667 lineto
stroke
0 setgray
[(0.8)] 0.01131 0.41667 1 0 Mshowa
0.01756 0.52083 moveto
0.03006 0.52083 lineto
stroke
0 setgray
[(1)] 0.01131 0.52083 1 0 Mshowa
0 setgray
[(MSE)] 0.02381 0.63125 0 -1 Mshowa
grestore
grestore
0 0 moveto
1 0 lineto
1 0.625 lineto
0 0.625 lineto
closepath
clip
newpath
0 setgray
gsave
gsave
0.33 setgray
gsave
0.005 setlinewidth
0.05556 0.48611 moveto
0.06515 0.42228 lineto
0.07474 0.37387 lineto
0.09392 0.30492 lineto
0.10351 0.27941 lineto
0.1131 0.25793 lineto
0.13228 0.2237 lineto
0.15146 0.19762 lineto
0.17063 0.17704 lineto
0.20899 0.14662 lineto
0.24735 0.12517 lineto
0.28571 0.10922 lineto
0.32407 0.09689 lineto
0.36243 0.08707 lineto
0.40079 0.07907 lineto
0.43915 0.07241 lineto
0.47751 0.06679 lineto
0.51587 0.06198 lineto
0.55423 0.05782 lineto
0.59259 0.05418 lineto
0.63095 0.05097 lineto
0.66931 0.04812 lineto
0.70767 0.04558 lineto
0.74603 0.04329 lineto
0.78439 0.04121 lineto
0.82275 0.03933 lineto
0.86111 0.03762 lineto
0.89947 0.03604 lineto
0.93783 0.0346 lineto
0.97619 0.03326 lineto
stroke
grestore
grestore
gsave
0.67 setgray
gsave
0.005 setlinewidth
0.05556 1.04167 moveto
0.06035 0.90498 lineto
0.06515 0.8 lineto
0.06994 0.71685 lineto
0.07474 0.64935 lineto
0.08433 0.54645 lineto
0.09392 0.4717 lineto
0.10351 0.41494 lineto
0.1131 0.37037 lineto
0.12269 0.33445 lineto
0.13228 0.30488 lineto
0.15146 0.25907 lineto
0.17063 0.22523 lineto
0.18981 0.1992 lineto
0.20899 0.17857 lineto
0.24735 0.14793 lineto
0.28571 0.12626 lineto
0.32407 0.11013 lineto
0.36243 0.09766 lineto
0.40079 0.08772 lineto
0.43915 0.07962 lineto
0.47751 0.07289 lineto
0.51587 0.0672 lineto
0.55423 0.06234 lineto
0.59259 0.05814 lineto
0.63095 0.05447 lineto
0.66931 0.05123 lineto
0.70767 0.04836 lineto
0.74603 0.04579 lineto
0.78439 0.04348 lineto
0.82275 0.04139 lineto
0.86111 0.03949 lineto
0.89947 0.03776 lineto
0.93783 0.03618 lineto
0.97619 0.03472 lineto
stroke
grestore
grestore
gsave
0 setgray
gsave
0.005 setlinewidth
0.05556 0.48997 moveto
0.06515 0.42614 lineto
0.07474 0.37772 lineto
0.09392 0.30878 lineto
0.10351 0.28326 lineto
0.1131 0.26178 lineto
0.13228 0.22756 lineto
0.15146 0.20147 lineto
0.17063 0.1809 lineto
0.20899 0.15047 lineto
0.24735 0.12903 lineto
0.28571 0.11308 lineto
0.32407 0.10075 lineto
0.36243 0.09093 lineto
0.40079 0.08292 lineto
0.43915 0.07627 lineto
0.47751 0.07065 lineto
0.51587 0.06584 lineto
0.55423 0.06167 lineto
0.59259 0.05803 lineto
0.63095 0.05483 lineto
0.66931 0.05198 lineto
0.70767 0.04943 lineto
0.74603 0.04714 lineto
0.78439 0.04507 lineto
0.82275 0.04319 lineto
0.86111 0.04147 lineto
0.89947 0.0399 lineto
0.93783 0.03845 lineto
0.97619 0.03712 lineto
stroke
grestore
grestore
grestore
% End of Graphics
MathPictureEnd
%%EPS Trailer
end

%%EndDocument
 GE 765 1000 270 52715 37800 GB 
%%BeginDocument: /usr0/rozzi/Documentation/PhDThesis/Chapter2/tcor98.eps
%!PS-Adobe-2.0 EPSF-1.2
%%BoundingBox: 0 0 400 252
%%Creator: Mathematica
%%Title: Clipboard
%%CreationDate: Never Never
%%EndComments
50 dict begin
/Mnodistort true def
/pageDashArray [4] def
/nullDashArray [] def

% Compute the minimum of two numbers.
/Mmin {         % p q Mmin min(p,q)
        2 copy          % p q p q
        gt              % p q p>q?
        { exch } if     % min(p,q) max(p,q)
        pop             % min(p,q)
} bind def


% Compute the maximum of two numbers.
/Mmax {         % p q Mmax max(p,q)
        2 copy          % p q p q
        lt              % p q p<q?
        { exch } if     % max(p,q) min(p,q)
        pop             % max(p,q)
} bind def

/Mpstart {
    MathPictureStart
} bind def
/Mpend {
    MathPictureEnd
} bind def
/Mscale {
    0 1 0 1
    5 -1 roll
    MathScale
} bind def
/Plain
        /Courier findfont
def
/Bold
        /Courier-Bold findfont
def
/Italic
        /Courier-Oblique findfont
def
/MathPictureStart {
        gsave
        newpath
        /Mtmatrix
        matrix currentmatrix
        def
        Plain
        Mfontsize scalefont
        setfont
0 setgray 0 setlinewidth
} bind def
/MathPictureEnd {
        grestore
} bind def
/Mdot {
        moveto
        0 0 rlineto
        stroke
} def
/Mtetra {
        moveto
        lineto
        lineto
        lineto
        fill
} def
/Metetra {
        moveto
        lineto
        lineto
        lineto
        closepath
        gsave
        fill
        grestore
        0 setgray
        stroke
} def
/Mistroke {
        flattenpath
        0 0 0
        {
        4 2 roll
        pop pop
        }
        {
        4 -1 roll
        2 index
        sub dup mul
        4 -1 roll
        2 index
        sub dup mul
        add sqrt
        4 -1 roll
        add
        3 1 roll
        }
        {
        stop
        }
        {
        stop
        }
        pathforall
        pop pop
        currentpoint
        stroke
        moveto
        currentdash
        3 -1 roll
        add
        setdash
} def
/Mfstroke {
        stroke
        currentdash
        pop 0
        setdash
} def
/Msboxa {
        newpath
        5 -1 roll
        Mvboxa
        pop
        6 -1 roll
        5 -1 roll
        4 -1 roll
        Msboxa1
        5 -3 roll
        Msboxa1
        [
        7 -2 roll
        [ 2 index 2 index
        10 -1 roll
        9 -1 roll
        ]
        6 1 roll
        5 -2 roll
        ]
} bind def
        
/Msboxa1 {
        sub
        2 div
        dup
        2 index
        1 add
        mul
        3 -1 roll
        -1 add
        3 -1 roll
        mul
} bind def
/Mvboxa {
        gsave
        newpath
        [ true
        3 -1 roll
        {
        Mbbox
        5 -1 roll
        {
        0
        5 1 roll
        }
        {
        7 -1 roll
        exch sub
        (m) stringwidth pop
        .3 mul
        sub
        7 1 roll
        6 -1 roll
        4 -1 roll
        Mmin
        3 -1 roll
        5 index
        add
        5 -1 roll
        4 -1 roll
        Mmax
        4 -1 roll
        }
        ifelse
        false
        }
        forall
        { stop } if
        counttomark
        1 add
        4 roll
        ]
        grestore
} bind def
/Mbbox {
        0 0 moveto
        false charpath
        flattenpath
        pathbbox
        newpath
} bind def
/Mmin {
        2 copy
        gt
        { exch } if
        pop
} bind def
/Mmax {
        2 copy
        lt
        { exch } if
        pop
} bind def
/Mshowa {
        4 -2 roll
        moveto
        2 index
        Mtmatrix setmatrix
        Mvboxa
        7 1 roll
        6 -1 roll
        5 -1 roll
        4 -1 roll
        Mshowa1
        4 1 roll
        Mshowa1
        rmoveto
        currentpoint
        0 1
        4 index length
        -1 add
        {
        2 index
        4 index
        2 index
        get
        3 index
        add
        moveto
        4 index
        exch get
        show
        } for
        pop pop pop pop
        Mgmatrix setmatrix
} bind def
/Mshowa1 {
        2 copy
        add
        4 1 roll
        sub
        mul
        sub
        -2 div
} bind def
/MathScale {
        Mwidth
        Mheight
        Mlp
        translate
        scale
        /Mgmatrix
        matrix currentmatrix
        def
        /Msaveaa exch def
        /Msavebb exch def
        /Msavecc exch def
        /Msavedd exch def
} bind def
/Mlp {
        3 copy
        Mlpfirst
        {
        Mnodistort
        {
        Mmin
        dup
        } if
        4 index
        2 index
        2 index
        Mlprun
        11 index
        11 -1 roll
        10 -4 roll
        Mlp1
        8 index
        9 -5 roll
        Mlp1
        4 -1 roll
        and
        { exit } if
        3 -1 roll
        pop pop
        } loop
        exch
        3 1 roll
        7 -3 roll
        pop pop pop
} bind def
/Mlpfirst {
        3 -1 roll
        dup length
        2 copy
        -2 add
        get
        aload
        pop pop pop
        4 -2 roll
        -1 add
        get
        aload
        pop pop pop
        6 -1 roll
        3 -1 roll
        5 -1 roll
        sub
        dup /MsaveAx exch def
        div
        4 1 roll
        exch sub
        dup /MsaveAy exch def
        div
} bind def
/Mlprun {
        2 copy
        4 index
        0 get
        dup
        4 1 roll
        Mlprun1
        3 copy
        8 -2 roll
        9 -1 roll
        {
        3 copy
        Mlprun1
        3 copy
        11 -3 roll
        /gt Mlpminmax
        8 3 roll
        11 -3 roll
        /lt Mlpminmax
        8 3 roll
        } forall
        pop pop pop pop
        3 1 roll
        pop pop
        aload pop
        5 -1 roll
        aload pop
        exch
        6 -1 roll
        Mlprun2
        8 2 roll
        4 -1 roll
        Mlprun2
        6 2 roll
        3 -1 roll
        Mlprun2
        4 2 roll
        exch
        Mlprun2
        6 2 roll
} bind def
/Mlprun1 {
        aload pop
        exch
        6 -1 roll
        5 -1 roll
        mul add
        4 -2 roll
        mul
        3 -1 roll
        add
} bind def
/Mlprun2 {
        2 copy
        add 2 div
        3 1 roll
        exch sub
} bind def
/Mlpminmax {
        cvx
        2 index
        6 index
        2 index
        exec
        {
        7 -3 roll
        4 -1 roll
        } if
        1 index
        5 index
        3 -1 roll
        exec
        {
        4 1 roll
        pop
        5 -1 roll
        aload
        pop pop
        4 -1 roll
        aload pop
        [
        8 -2 roll
        pop
        5 -2 roll
        pop
        6 -2 roll
        pop
        5 -1 roll
        ]
        4 1 roll
        pop
        }
        {
        pop pop pop
        } ifelse
} bind def
/Mlp1 {
        5 index
        3 index sub
        5 index
        2 index mul
        1 index
        le
        1 index
        0 le
        or
        dup
        not
        {
        1 index
        3 index div
        .99999 mul
        8 -1 roll
        pop
        7 1 roll
        }
        if
        8 -1 roll
        2 div
        7 -2 roll
        pop sub
        5 index
        6 -3 roll
        pop pop
        mul sub
        exch
} bind def
/Mfontsize      12 def
/Mleft          0.000000 def
/Mbottom        252.000000 def
/Mwidth         400.000000 def
/Mheight        252.000000 def
/Courier findfont 12 scalefont setfont
%!
%%Creator: Mathematica
%%AspectRatio: 0.625 
MathPictureStart
% Scaling calculations
0.02381 0.03175 0 0.52083 [
[(\(d\))] 0.5 0.63125 0 -1 Msboxa
[(5)] 0.18254 -0.0125 0 1 Msboxa
[(10)] 0.34127 -0.0125 0 1 Msboxa
[(15)] 0.5 -0.0125 0 1 Msboxa
[(20)] 0.65873 -0.0125 0 1 Msboxa
[(25)] 0.81746 -0.0125 0 1 Msboxa
[(30)] 0.97619 -0.0125 0 1 Msboxa
[(k)] 1.00625 0 -1 0 Msboxa
[(0.2)] 0.01131 0.10417 1 0 Msboxa
[(0.4)] 0.01131 0.20833 1 0 Msboxa
[(0.6)] 0.01131 0.3125 1 0 Msboxa
[(0.8)] 0.01131 0.41667 1 0 Msboxa
[(1)] 0.01131 0.52083 1 0 Msboxa
[(MSE)] 0.02381 0.63125 0 -1 Msboxa
[ -0.001 -0.00725 0 0 ]
[ 1.001 0.626 0 0 ]
] MathScale
% Start of Graphics
1 setlinecap
1 setlinejoin
newpath
%%Object: Graphics
[ ] 0 setdash
0 setgray
0 setgray
[(\(d\))] 0.7 0.53125 0 -1 Mshowa
gsave
gsave
0.002 setlinewidth
0 0 moveto
1 0 lineto
stroke
0.18254 -0.00625 moveto
0.18254 0.00625 lineto
stroke
0 setgray
[(5)] 0.18254 -0.0125 0 1 Mshowa
0.34127 -0.00625 moveto
0.34127 0.00625 lineto
stroke
0 setgray
[(10)] 0.34127 -0.0125 0 1 Mshowa
0.5 -0.00625 moveto
0.5 0.00625 lineto
stroke
0 setgray
[(15)] 0.5 -0.0125 0 1 Mshowa
0.65873 -0.00625 moveto
0.65873 0.00625 lineto
stroke
0 setgray
[(20)] 0.65873 -0.0125 0 1 Mshowa
0.81746 -0.00625 moveto
0.81746 0.00625 lineto
stroke
0 setgray
[(25)] 0.81746 -0.0125 0 1 Mshowa
0.97619 -0.00625 moveto
0.97619 0.00625 lineto
stroke
0 setgray
[(30)] 0.97619 -0.0125 0 1 Mshowa
0 setgray
[(k)] 1.00625 0 -1 0 Mshowa
0.02381 0 moveto
0.02381 0.625 lineto
stroke
0.01756 0.10417 moveto
0.03006 0.10417 lineto
stroke
0 setgray
[(0.2)] 0.01131 0.10417 1 0 Mshowa
0.01756 0.20833 moveto
0.03006 0.20833 lineto
stroke
0 setgray
[(0.4)] 0.01131 0.20833 1 0 Mshowa
0.01756 0.3125 moveto
0.03006 0.3125 lineto
stroke
0 setgray
[(0.6)] 0.01131 0.3125 1 0 Mshowa
0.01756 0.41667 moveto
0.03006 0.41667 lineto
stroke
0 setgray
[(0.8)] 0.01131 0.41667 1 0 Mshowa
0.01756 0.52083 moveto
0.03006 0.52083 lineto
stroke
0 setgray
[(1)] 0.01131 0.52083 1 0 Mshowa
0 setgray
[(MSE)] 0.02381 0.63125 0 -1 Mshowa
grestore
grestore
0 0 moveto
1 0 lineto
1 0.625 lineto
0 0.625 lineto
closepath
clip
newpath
0 setgray
gsave
gsave
0.33 setgray
gsave
0.005 setlinewidth
0.05556 0.35627 moveto
0.06515 0.29836 lineto
0.07474 0.25702 lineto
0.08433 0.22603 lineto
0.09392 0.20193 lineto
0.10351 0.18264 lineto
0.1131 0.16686 lineto
0.13228 0.14256 lineto
0.15146 0.12472 lineto
0.17063 0.11106 lineto
0.18981 0.10026 lineto
0.20899 0.0915 lineto
0.24735 0.07815 lineto
0.28571 0.06843 lineto
0.32407 0.06103 lineto
0.36243 0.05521 lineto
0.40079 0.05049 lineto
0.43915 0.04659 lineto
0.47751 0.0433 lineto
0.51587 0.04049 lineto
0.55423 0.03807 lineto
0.59259 0.03594 lineto
0.63095 0.03407 lineto
0.66931 0.0324 lineto
0.70767 0.0309 lineto
0.74603 0.02956 lineto
0.78439 0.02833 lineto
0.82275 0.02722 lineto
0.86111 0.0262 lineto
0.89947 0.02526 lineto
0.93783 0.02439 lineto
0.97619 0.02358 lineto
stroke
grestore
grestore
gsave
0.67 setgray
gsave
0.005 setlinewidth
0.05556 1.04167 moveto
0.06035 0.90498 lineto
0.06515 0.8 lineto
0.06994 0.71685 lineto
0.07474 0.64935 lineto
0.08433 0.54645 lineto
0.09392 0.4717 lineto
0.10351 0.41494 lineto
0.1131 0.37037 lineto
0.12269 0.33445 lineto
0.13228 0.30488 lineto
0.15146 0.25907 lineto
0.17063 0.22523 lineto
0.18981 0.1992 lineto
0.20899 0.17857 lineto
0.24735 0.14793 lineto
0.28571 0.12626 lineto
0.32407 0.11013 lineto
0.36243 0.09766 lineto
0.40079 0.08772 lineto
0.43915 0.07962 lineto
0.47751 0.07289 lineto
0.51587 0.0672 lineto
0.55423 0.06234 lineto
0.59259 0.05814 lineto
0.63095 0.05447 lineto
0.66931 0.05123 lineto
0.70767 0.04836 lineto
0.74603 0.04579 lineto
0.78439 0.04348 lineto
0.82275 0.04139 lineto
0.86111 0.03949 lineto
0.89947 0.03776 lineto
0.93783 0.03618 lineto
0.97619 0.03472 lineto
stroke
grestore
grestore
gsave
0 setgray
gsave
0.005 setlinewidth
0.05556 0.35988 moveto
0.06515 0.30197 lineto
0.07474 0.26063 lineto
0.08433 0.22964 lineto
0.09392 0.20553 lineto
0.10351 0.18625 lineto
0.1131 0.17046 lineto
0.13228 0.14616 lineto
0.15146 0.12833 lineto
0.17063 0.11467 lineto
0.18981 0.10387 lineto
0.20899 0.09511 lineto
0.24735 0.08175 lineto
0.28571 0.07204 lineto
0.32407 0.06464 lineto
0.36243 0.05881 lineto
0.40079 0.05409 lineto
0.43915 0.05019 lineto
0.47751 0.04691 lineto
0.51587 0.0441 lineto
0.55423 0.04167 lineto
0.59259 0.03955 lineto
0.63095 0.03767 lineto
0.66931 0.03601 lineto
0.70767 0.03451 lineto
0.74603 0.03316 lineto
0.78439 0.03194 lineto
0.82275 0.03082 lineto
0.86111 0.0298 lineto
0.89947 0.02886 lineto
0.93783 0.02799 lineto
0.97619 0.02719 lineto
stroke
grestore
grestore
grestore
% End of Graphics
MathPictureEnd
%%EPS Trailer
end

%%EndDocument
 GE 765 1000 270 33201 69596 GB 
%%BeginDocument: /usr0/rozzi/Documentation/PhDThesis/Chapter2/tcor1.eps
%!PS-Adobe-2.0 EPSF-1.2
%%BoundingBox: 0 0 400 252
%%Creator: Mathematica
%%Title: Clipboard
%%CreationDate: Never Never
%%EndComments
50 dict begin
/Mnodistort true def
/pageDashArray [4] def
/nullDashArray [] def

% Compute the minimum of two numbers.
/Mmin {         % p q Mmin min(p,q)
        2 copy          % p q p q
        gt              % p q p>q?
        { exch } if     % min(p,q) max(p,q)
        pop             % min(p,q)
} bind def


% Compute the maximum of two numbers.
/Mmax {         % p q Mmax max(p,q)
        2 copy          % p q p q
        lt              % p q p<q?
        { exch } if     % max(p,q) min(p,q)
        pop             % max(p,q)
} bind def

/Mpstart {
    MathPictureStart
} bind def
/Mpend {
    MathPictureEnd
} bind def
/Mscale {
    0 1 0 1
    5 -1 roll
    MathScale
} bind def
/Plain
        /Courier findfont
def
/Bold
        /Courier-Bold findfont
def
/Italic
        /Courier-Oblique findfont
def
/MathPictureStart {
        gsave
        newpath
        /Mtmatrix
        matrix currentmatrix
        def
        Plain
        Mfontsize scalefont
        setfont
0 setgray 0 setlinewidth
} bind def
/MathPictureEnd {
        grestore
} bind def
/Mdot {
        moveto
        0 0 rlineto
        stroke
} def
/Mtetra {
        moveto
        lineto
        lineto
        lineto
        fill
} def
/Metetra {
        moveto
        lineto
        lineto
        lineto
        closepath
        gsave
        fill
        grestore
        0 setgray
        stroke
} def
/Mistroke {
        flattenpath
        0 0 0
        {
        4 2 roll
        pop pop
        }
        {
        4 -1 roll
        2 index
        sub dup mul
        4 -1 roll
        2 index
        sub dup mul
        add sqrt
        4 -1 roll
        add
        3 1 roll
        }
        {
        stop
        }
        {
        stop
        }
        pathforall
        pop pop
        currentpoint
        stroke
        moveto
        currentdash
        3 -1 roll
        add
        setdash
} def
/Mfstroke {
        stroke
        currentdash
        pop 0
        setdash
} def
/Msboxa {
        newpath
        5 -1 roll
        Mvboxa
        pop
        6 -1 roll
        5 -1 roll
        4 -1 roll
        Msboxa1
        5 -3 roll
        Msboxa1
        [
        7 -2 roll
        [ 2 index 2 index
        10 -1 roll
        9 -1 roll
        ]
        6 1 roll
        5 -2 roll
        ]
} bind def
        
/Msboxa1 {
        sub
        2 div
        dup
        2 index
        1 add
        mul
        3 -1 roll
        -1 add
        3 -1 roll
        mul
} bind def
/Mvboxa {
        gsave
        newpath
        [ true
        3 -1 roll
        {
        Mbbox
        5 -1 roll
        {
        0
        5 1 roll
        }
        {
        7 -1 roll
        exch sub
        (m) stringwidth pop
        .3 mul
        sub
        7 1 roll
        6 -1 roll
        4 -1 roll
        Mmin
        3 -1 roll
        5 index
        add
        5 -1 roll
        4 -1 roll
        Mmax
        4 -1 roll
        }
        ifelse
        false
        }
        forall
        { stop } if
        counttomark
        1 add
        4 roll
        ]
        grestore
} bind def
/Mbbox {
        0 0 moveto
        false charpath
        flattenpath
        pathbbox
        newpath
} bind def
/Mmin {
        2 copy
        gt
        { exch } if
        pop
} bind def
/Mmax {
        2 copy
        lt
        { exch } if
        pop
} bind def
/Mshowa {
        4 -2 roll
        moveto
        2 index
        Mtmatrix setmatrix
        Mvboxa
        7 1 roll
        6 -1 roll
        5 -1 roll
        4 -1 roll
        Mshowa1
        4 1 roll
        Mshowa1
        rmoveto
        currentpoint
        0 1
        4 index length
        -1 add
        {
        2 index
        4 index
        2 index
        get
        3 index
        add
        moveto
        4 index
        exch get
        show
        } for
        pop pop pop pop
        Mgmatrix setmatrix
} bind def
/Mshowa1 {
        2 copy
        add
        4 1 roll
        sub
        mul
        sub
        -2 div
} bind def
/MathScale {
        Mwidth
        Mheight
        Mlp
        translate
        scale
        /Mgmatrix
        matrix currentmatrix
        def
        /Msaveaa exch def
        /Msavebb exch def
        /Msavecc exch def
        /Msavedd exch def
} bind def
/Mlp {
        3 copy
        Mlpfirst
        {
        Mnodistort
        {
        Mmin
        dup
        } if
        4 index
        2 index
        2 index
        Mlprun
        11 index
        11 -1 roll
        10 -4 roll
        Mlp1
        8 index
        9 -5 roll
        Mlp1
        4 -1 roll
        and
        { exit } if
        3 -1 roll
        pop pop
        } loop
        exch
        3 1 roll
        7 -3 roll
        pop pop pop
} bind def
/Mlpfirst {
        3 -1 roll
        dup length
        2 copy
        -2 add
        get
        aload
        pop pop pop
        4 -2 roll
        -1 add
        get
        aload
        pop pop pop
        6 -1 roll
        3 -1 roll
        5 -1 roll
        sub
        dup /MsaveAx exch def
        div
        4 1 roll
        exch sub
        dup /MsaveAy exch def
        div
} bind def
/Mlprun {
        2 copy
        4 index
        0 get
        dup
        4 1 roll
        Mlprun1
        3 copy
        8 -2 roll
        9 -1 roll
        {
        3 copy
        Mlprun1
        3 copy
        11 -3 roll
        /gt Mlpminmax
        8 3 roll
        11 -3 roll
        /lt Mlpminmax
        8 3 roll
        } forall
        pop pop pop pop
        3 1 roll
        pop pop
        aload pop
        5 -1 roll
        aload pop
        exch
        6 -1 roll
        Mlprun2
        8 2 roll
        4 -1 roll
        Mlprun2
        6 2 roll
        3 -1 roll
        Mlprun2
        4 2 roll
        exch
        Mlprun2
        6 2 roll
} bind def
/Mlprun1 {
        aload pop
        exch
        6 -1 roll
        5 -1 roll
        mul add
        4 -2 roll
        mul
        3 -1 roll
        add
} bind def
/Mlprun2 {
        2 copy
        add 2 div
        3 1 roll
        exch sub
} bind def
/Mlpminmax {
        cvx
        2 index
        6 index
        2 index
        exec
        {
        7 -3 roll
        4 -1 roll
        } if
        1 index
        5 index
        3 -1 roll
        exec
        {
        4 1 roll
        pop
        5 -1 roll
        aload
        pop pop
        4 -1 roll
        aload pop
        [
        8 -2 roll
        pop
        5 -2 roll
        pop
        6 -2 roll
        pop
        5 -1 roll
        ]
        4 1 roll
        pop
        }
        {
        pop pop pop
        } ifelse
} bind def
/Mlp1 {
        5 index
        3 index sub
        5 index
        2 index mul
        1 index
        le
        1 index
        0 le
        or
        dup
        not
        {
        1 index
        3 index div
        .99999 mul
        8 -1 roll
        pop
        7 1 roll
        }
        if
        8 -1 roll
        2 div
        7 -2 roll
        pop sub
        5 index
        6 -3 roll
        pop pop
        mul sub
        exch
} bind def
/Mfontsize      12 def
/Mleft          0.000000 def
/Mbottom        252.000000 def
/Mwidth         400.000000 def
/Mheight        252.000000 def
/Courier findfont 12 scalefont setfont
%!
%%Creator: Mathematica
%%AspectRatio: 0.625 
MathPictureStart
% Scaling calculations
0.02381 0.03175 0 0.52083 [
[(\(a\))] 0.5 0.63125 0 -1 Msboxa
[(5)] 0.18254 -0.0125 0 1 Msboxa
[(10)] 0.34127 -0.0125 0 1 Msboxa
[(15)] 0.5 -0.0125 0 1 Msboxa
[(20)] 0.65873 -0.0125 0 1 Msboxa
[(25)] 0.81746 -0.0125 0 1 Msboxa
[(30)] 0.97619 -0.0125 0 1 Msboxa
[(  k)] 1.00625 0 -1 0 Msboxa
[(0.2)] 0.01131 0.10417 1 0 Msboxa
[(0.4)] 0.01131 0.20833 1 0 Msboxa
[(0.6)] 0.01131 0.3125 1 0 Msboxa
[(0.8)] 0.01131 0.41667 1 0 Msboxa
[(1)] 0.01131 0.52083 1 0 Msboxa
[(MSE)] 0.02381 0.63125 0 -1 Msboxa
[ -0.001 -0.00725 0 0 ]
[ 1.001 0.626 0 0 ]
] MathScale
% Start of Graphics
1 setlinecap
1 setlinejoin
newpath
%%Object: Graphics
[ ] 0 setdash
0 setgray
0 setgray
%[(\(a\))] 0.5 0.63125 0 -1 Mshowa
gsave
gsave
0.002 setlinewidth
0 0 moveto
1 0 lineto
stroke
0.18254 -0.00625 moveto
0.18254 0.00625 lineto
stroke
0 setgray
[(5)] 0.18254 -0.0125 0 1 Mshowa
0.34127 -0.00625 moveto
0.34127 0.00625 lineto
stroke
0 setgray
[(10)] 0.34127 -0.0125 0 1 Mshowa
0.5 -0.00625 moveto
0.5 0.00625 lineto
stroke
0 setgray
[(15)] 0.5 -0.0125 0 1 Mshowa
0.65873 -0.00625 moveto
0.65873 0.00625 lineto
stroke
0 setgray
[(20)] 0.65873 -0.0125 0 1 Mshowa
0.81746 -0.00625 moveto
0.81746 0.00625 lineto
stroke
0 setgray
[(25)] 0.81746 -0.0125 0 1 Mshowa
0.97619 -0.00625 moveto
0.97619 0.00625 lineto
stroke
0 setgray
[(30)] 0.97619 -0.0125 0 1 Mshowa
0 setgray
[(  k)] 1.00625 0 -1 0 Mshowa
0.02381 0 moveto
0.02381 0.625 lineto
stroke
0.01756 0.10417 moveto
0.03006 0.10417 lineto
stroke
0 setgray
[(0.2)] 0.01131 0.10417 1 0 Mshowa
0.01756 0.20833 moveto
0.03006 0.20833 lineto
stroke
0 setgray
[(0.4)] 0.01131 0.20833 1 0 Mshowa
0.01756 0.3125 moveto
0.03006 0.3125 lineto
stroke
0 setgray
[(0.6)] 0.01131 0.3125 1 0 Mshowa
0.01756 0.41667 moveto
0.03006 0.41667 lineto
stroke
0 setgray
[(0.8)] 0.01131 0.41667 1 0 Mshowa
0.01756 0.52083 moveto
0.03006 0.52083 lineto
stroke
0 setgray
[(1)] 0.01131 0.52083 1 0 Mshowa
0 setgray
[(MSE)] 0.02381 0.63125 0 -1 Mshowa
grestore
grestore
% legend and panel label (place after MSE label)
[(ML)] 0.7 0.43125 0 -1 Mshowa
[(EMAP)] 0.73 0.38125 0 -1 Mshowa
[(LMS-C)] 0.74 0.33125 0 -1 Mshowa
[(\(a\))] 0.7 0.53125 0 -1 Mshowa
gsave
0.67 setgray
0.005 setlinewidth
0.53 0.444 moveto
0.66 0.444 lineto
stroke
0.33 setgray
0.53 0.394 moveto
0.66 0.394 lineto
stroke
0. setgray
0.53 0.344 moveto
0.66 0.344 lineto
stroke
grestore

0 0 moveto
1 0 lineto
1 0.625 lineto
0 0.625 lineto
closepath
clip
newpath
0 setgray
gsave
gsave
0.33 setgray
gsave
0.005 setlinewidth
0.05556 0.51953 moveto
0.06515 0.45137 lineto
0.07474 0.39905 lineto
0.09392 0.32398 lineto
0.10351 0.29613 lineto
0.1131 0.27269 lineto
0.13228 0.23543 lineto
0.15146 0.20714 lineto
0.17063 0.18491 lineto
0.18981 0.167 lineto
0.20899 0.15225 lineto
0.24735 0.12939 lineto
0.28571 0.1125 lineto
0.32407 0.09951 lineto
0.36243 0.08922 lineto
0.40079 0.08085 lineto
0.43915 0.07392 lineto
0.47751 0.06808 lineto
0.51587 0.0631 lineto
0.55423 0.05879 lineto
0.59259 0.05504 lineto
0.63095 0.05174 lineto
0.66931 0.04881 lineto
0.70767 0.04619 lineto
0.74603 0.04384 lineto
0.78439 0.04172 lineto
0.82275 0.03979 lineto
0.86111 0.03804 lineto
0.89947 0.03643 lineto
0.93783 0.03495 lineto
0.97619 0.03359 lineto
stroke
grestore
grestore
gsave
0.67 setgray
gsave
0.005 setlinewidth
0.05556 1.04167 moveto
0.06035 0.90498 lineto
0.06515 0.8 lineto
0.06994 0.71685 lineto
0.07474 0.64935 lineto
0.08433 0.54645 lineto
0.09392 0.4717 lineto
0.10351 0.41494 lineto
0.1131 0.37037 lineto
0.12269 0.33445 lineto
0.13228 0.30488 lineto
0.15146 0.25907 lineto
0.17063 0.22523 lineto
0.18981 0.1992 lineto
0.20899 0.17857 lineto
0.24735 0.14793 lineto
0.28571 0.12626 lineto
0.32407 0.11013 lineto
0.36243 0.09766 lineto
0.40079 0.08772 lineto
0.43915 0.07962 lineto
0.47751 0.07289 lineto
0.51587 0.0672 lineto
0.55423 0.06234 lineto
0.59259 0.05814 lineto
0.63095 0.05447 lineto
0.66931 0.05123 lineto
0.70767 0.04836 lineto
0.74603 0.04579 lineto
0.78439 0.04348 lineto
0.82275 0.04139 lineto
0.86111 0.03949 lineto
0.89947 0.03776 lineto
0.93783 0.03618 lineto
0.97619 0.03472 lineto
stroke
grestore
grestore
gsave
0 setgray
gsave
0.005 setlinewidth
0.05556 0.52278 moveto
0.06515 0.45462 lineto
0.07474 0.4023 lineto
0.09392 0.32723 lineto
0.10351 0.29938 lineto
0.1131 0.27594 lineto
0.13228 0.23868 lineto
0.15146 0.21039 lineto
0.17063 0.18816 lineto
0.18981 0.17025 lineto
0.20899 0.1555 lineto
0.24735 0.13264 lineto
0.28571 0.11575 lineto
0.32407 0.10276 lineto
0.36243 0.09246 lineto
0.40079 0.0841 lineto
0.43915 0.07717 lineto
0.47751 0.07133 lineto
0.51587 0.06634 lineto
0.55423 0.06204 lineto
0.59259 0.05829 lineto
0.63095 0.05498 lineto
0.66931 0.05206 lineto
0.70767 0.04944 lineto
0.74603 0.04709 lineto
0.78439 0.04497 lineto
0.82275 0.04304 lineto
0.86111 0.04129 lineto
0.89947 0.03968 lineto
0.93783 0.0382 lineto
0.97619 0.03684 lineto
stroke
grestore
grestore
grestore
% End of Graphics
MathPictureEnd
%%EPS Trailer
end

%%EndDocument
 GE 765 1000 270 52677 69596 GB 
%%BeginDocument: /usr0/rozzi/Documentation/PhDThesis/Chapter2/tcor9.eps
%!PS-Adobe-2.0 EPSF-1.2
%%BoundingBox: 0 0 400 251
%%Creator: Mathematica
%%Title: Clipboard
%%CreationDate: Never Never
%%EndComments
50 dict begin
/Mnodistort true def
/pageDashArray [4] def
/nullDashArray [] def

% Compute the minimum of two numbers.
/Mmin {         % p q Mmin min(p,q)
        2 copy          % p q p q
        gt              % p q p>q?
        { exch } if     % min(p,q) max(p,q)
        pop             % min(p,q)
} bind def


% Compute the maximum of two numbers.
/Mmax {         % p q Mmax max(p,q)
        2 copy          % p q p q
        lt              % p q p<q?
        { exch } if     % max(p,q) min(p,q)
        pop             % max(p,q)
} bind def

/Mpstart {
    MathPictureStart
} bind def
/Mpend {
    MathPictureEnd
} bind def
/Mscale {
    0 1 0 1
    5 -1 roll
    MathScale
} bind def
/Plain
        /Courier findfont
def
/Bold
        /Courier-Bold findfont
def
/Italic
        /Courier-Oblique findfont
def
/MathPictureStart {
        gsave
        newpath
        /Mtmatrix
        matrix currentmatrix
        def
        Plain
        Mfontsize scalefont
        setfont
0 setgray 0 setlinewidth
} bind def
/MathPictureEnd {
        grestore
} bind def
/Mdot {
        moveto
        0 0 rlineto
        stroke
} def
/Mtetra {
        moveto
        lineto
        lineto
        lineto
        fill
} def
/Metetra {
        moveto
        lineto
        lineto
        lineto
        closepath
        gsave
        fill
        grestore
        0 setgray
        stroke
} def
/Mistroke {
        flattenpath
        0 0 0
        {
        4 2 roll
        pop pop
        }
        {
        4 -1 roll
        2 index
        sub dup mul
        4 -1 roll
        2 index
        sub dup mul
        add sqrt
        4 -1 roll
        add
        3 1 roll
        }
        {
        stop
        }
        {
        stop
        }
        pathforall
        pop pop
        currentpoint
        stroke
        moveto
        currentdash
        3 -1 roll
        add
        setdash
} def
/Mfstroke {
        stroke
        currentdash
        pop 0
        setdash
} def
/Msboxa {
        newpath
        5 -1 roll
        Mvboxa
        pop
        6 -1 roll
        5 -1 roll
        4 -1 roll
        Msboxa1
        5 -3 roll
        Msboxa1
        [
        7 -2 roll
        [ 2 index 2 index
        10 -1 roll
        9 -1 roll
        ]
        6 1 roll
        5 -2 roll
        ]
} bind def
        
/Msboxa1 {
        sub
        2 div
        dup
        2 index
        1 add
        mul
        3 -1 roll
        -1 add
        3 -1 roll
        mul
} bind def
/Mvboxa {
        gsave
        newpath
        [ true
        3 -1 roll
        {
        Mbbox
        5 -1 roll
        {
        0
        5 1 roll
        }
        {
        7 -1 roll
        exch sub
        (m) stringwidth pop
        .3 mul
        sub
        7 1 roll
        6 -1 roll
        4 -1 roll
        Mmin
        3 -1 roll
        5 index
        add
        5 -1 roll
        4 -1 roll
        Mmax
        4 -1 roll
        }
        ifelse
        false
        }
        forall
        { stop } if
        counttomark
        1 add
        4 roll
        ]
        grestore
} bind def
/Mbbox {
        0 0 moveto
        false charpath
        flattenpath
        pathbbox
        newpath
} bind def
/Mmin {
        2 copy
        gt
        { exch } if
        pop
} bind def
/Mmax {
        2 copy
        lt
        { exch } if
        pop
} bind def
/Mshowa {
        4 -2 roll
        moveto
        2 index
        Mtmatrix setmatrix
        Mvboxa
        7 1 roll
        6 -1 roll
        5 -1 roll
        4 -1 roll
        Mshowa1
        4 1 roll
        Mshowa1
        rmoveto
        currentpoint
        0 1
        4 index length
        -1 add
        {
        2 index
        4 index
        2 index
        get
        3 index
        add
        moveto
        4 index
        exch get
        show
        } for
        pop pop pop pop
        Mgmatrix setmatrix
} bind def
/Mshowa1 {
        2 copy
        add
        4 1 roll
        sub
        mul
        sub
        -2 div
} bind def
/MathScale {
        Mwidth
        Mheight
        Mlp
        translate
        scale
        /Mgmatrix
        matrix currentmatrix
        def
        /Msaveaa exch def
        /Msavebb exch def
        /Msavecc exch def
        /Msavedd exch def
} bind def
/Mlp {
        3 copy
        Mlpfirst
        {
        Mnodistort
        {
        Mmin
        dup
        } if
        4 index
        2 index
        2 index
        Mlprun
        11 index
        11 -1 roll
        10 -4 roll
        Mlp1
        8 index
        9 -5 roll
        Mlp1
        4 -1 roll
        and
        { exit } if
        3 -1 roll
        pop pop
        } loop
        exch
        3 1 roll
        7 -3 roll
        pop pop pop
} bind def
/Mlpfirst {
        3 -1 roll
        dup length
        2 copy
        -2 add
        get
        aload
        pop pop pop
        4 -2 roll
        -1 add
        get
        aload
        pop pop pop
        6 -1 roll
        3 -1 roll
        5 -1 roll
        sub
        dup /MsaveAx exch def
        div
        4 1 roll
        exch sub
        dup /MsaveAy exch def
        div
} bind def
/Mlprun {
        2 copy
        4 index
        0 get
        dup
        4 1 roll
        Mlprun1
        3 copy
        8 -2 roll
        9 -1 roll
        {
        3 copy
        Mlprun1
        3 copy
        11 -3 roll
        /gt Mlpminmax
        8 3 roll
        11 -3 roll
        /lt Mlpminmax
        8 3 roll
        } forall
        pop pop pop pop
        3 1 roll
        pop pop
        aload pop
        5 -1 roll
        aload pop
        exch
        6 -1 roll
        Mlprun2
        8 2 roll
        4 -1 roll
        Mlprun2
        6 2 roll
        3 -1 roll
        Mlprun2
        4 2 roll
        exch
        Mlprun2
        6 2 roll
} bind def
/Mlprun1 {
        aload pop
        exch
        6 -1 roll
        5 -1 roll
        mul add
        4 -2 roll
        mul
        3 -1 roll
        add
} bind def
/Mlprun2 {
        2 copy
        add 2 div
        3 1 roll
        exch sub
} bind def
/Mlpminmax {
        cvx
        2 index
        6 index
        2 index
        exec
        {
        7 -3 roll
        4 -1 roll
        } if
        1 index
        5 index
        3 -1 roll
        exec
        {
        4 1 roll
        pop
        5 -1 roll
        aload
        pop pop
        4 -1 roll
        aload pop
        [
        8 -2 roll
        pop
        5 -2 roll
        pop
        6 -2 roll
        pop
        5 -1 roll
        ]
        4 1 roll
        pop
        }
        {
        pop pop pop
        } ifelse
} bind def
/Mlp1 {
        5 index
        3 index sub
        5 index
        2 index mul
        1 index
        le
        1 index
        0 le
        or
        dup
        not
        {
        1 index
        3 index div
        .99999 mul
        8 -1 roll
        pop
        7 1 roll
        }
        if
        8 -1 roll
        2 div
        7 -2 roll
        pop sub
        5 index
        6 -3 roll
        pop pop
        mul sub
        exch
} bind def
/Mfontsize      12 def
/Mleft          0.000000 def
/Mbottom        251.000000 def
/Mwidth         400.000000 def
/Mheight        251.000000 def
/Courier findfont 12 scalefont setfont
%!
%%Creator: Mathematica
%%AspectRatio: 0.625 
MathPictureStart
% Scaling calculations
0.02381 0.03175 0 0.52083 [
[(\(c\))] 0.5 0.63125 0 -1 Msboxa
[(5)] 0.18254 -0.0125 0 1 Msboxa
[(10)] 0.34127 -0.0125 0 1 Msboxa
[(15)] 0.5 -0.0125 0 1 Msboxa
[(20)] 0.65873 -0.0125 0 1 Msboxa
[(25)] 0.81746 -0.0125 0 1 Msboxa
[(30)] 0.97619 -0.0125 0 1 Msboxa
[(k)] 1.00625 0 -1 0 Msboxa
[(0.2)] 0.01131 0.10417 1 0 Msboxa
[(0.4)] 0.01131 0.20833 1 0 Msboxa
[(0.6)] 0.01131 0.3125 1 0 Msboxa
[(0.8)] 0.01131 0.41667 1 0 Msboxa
[(1)] 0.01131 0.52083 1 0 Msboxa
[(MSE)] 0.02381 0.63125 0 -1 Msboxa
[ -0.001 -0.00725 0 0 ]
[ 1.001 0.626 0 0 ]
] MathScale
% Start of Graphics
1 setlinecap
1 setlinejoin
newpath
%%Object: Graphics
[ ] 0 setdash
0 setgray
0 setgray
[(\(c\))] 0.7 0.53125 0 -1 Mshowa
gsave
gsave
0.002 setlinewidth
0 0 moveto
1 0 lineto
stroke
0.18254 -0.00625 moveto
0.18254 0.00625 lineto
stroke
0 setgray
[(5)] 0.18254 -0.0125 0 1 Mshowa
0.34127 -0.00625 moveto
0.34127 0.00625 lineto
stroke
0 setgray
[(10)] 0.34127 -0.0125 0 1 Mshowa
0.5 -0.00625 moveto
0.5 0.00625 lineto
stroke
0 setgray
[(15)] 0.5 -0.0125 0 1 Mshowa
0.65873 -0.00625 moveto
0.65873 0.00625 lineto
stroke
0 setgray
[(20)] 0.65873 -0.0125 0 1 Mshowa
0.81746 -0.00625 moveto
0.81746 0.00625 lineto
stroke
0 setgray
[(25)] 0.81746 -0.0125 0 1 Mshowa
0.97619 -0.00625 moveto
0.97619 0.00625 lineto
stroke
0 setgray
[(30)] 0.97619 -0.0125 0 1 Mshowa
0 setgray
[(k)] 1.00625 0 -1 0 Mshowa
0.02381 0 moveto
0.02381 0.625 lineto
stroke
0.01756 0.10417 moveto
0.03006 0.10417 lineto
stroke
0 setgray
[(0.2)] 0.01131 0.10417 1 0 Mshowa
0.01756 0.20833 moveto
0.03006 0.20833 lineto
stroke
0 setgray
[(0.4)] 0.01131 0.20833 1 0 Mshowa
0.01756 0.3125 moveto
0.03006 0.3125 lineto
stroke
0 setgray
[(0.6)] 0.01131 0.3125 1 0 Mshowa
0.01756 0.41667 moveto
0.03006 0.41667 lineto
stroke
0 setgray
[(0.8)] 0.01131 0.41667 1 0 Mshowa
0.01756 0.52083 moveto
0.03006 0.52083 lineto
stroke
0 setgray
[(1)] 0.01131 0.52083 1 0 Mshowa
0 setgray
[(MSE)] 0.02381 0.63125 0 -1 Mshowa
grestore
grestore
0 0 moveto
1 0 lineto
1 0.625 lineto
0 0.625 lineto
closepath
clip
newpath
0 setgray
gsave
gsave
0.33 setgray
gsave
0.005 setlinewidth
0.05556 0.38858 moveto
0.06515 0.33094 lineto
0.07474 0.28935 lineto
0.08433 0.25785 lineto
0.09392 0.23312 lineto
0.1131 0.19664 lineto
0.13228 0.17091 lineto
0.15146 0.15169 lineto
0.17063 0.13672 lineto
0.18981 0.12469 lineto
0.20899 0.11479 lineto
0.24735 0.09938 lineto
0.28571 0.08788 lineto
0.32407 0.07893 lineto
0.36243 0.07173 lineto
0.40079 0.06581 lineto
0.43915 0.06083 lineto
0.47751 0.05659 lineto
0.51587 0.05292 lineto
0.55423 0.04972 lineto
0.59259 0.0469 lineto
0.63095 0.04439 lineto
0.66931 0.04214 lineto
0.70767 0.04011 lineto
0.74603 0.03828 lineto
0.78439 0.03661 lineto
0.82275 0.03508 lineto
0.86111 0.03368 lineto
0.89947 0.03239 lineto
0.93783 0.03119 lineto
0.97619 0.03008 lineto
stroke
grestore
grestore
gsave
0.67 setgray
gsave
0.005 setlinewidth
0.05556 1.04167 moveto
0.06035 0.90498 lineto
0.06515 0.8 lineto
0.06994 0.71685 lineto
0.07474 0.64935 lineto
0.08433 0.54645 lineto
0.09392 0.4717 lineto
0.10351 0.41494 lineto
0.1131 0.37037 lineto
0.12269 0.33445 lineto
0.13228 0.30488 lineto
0.15146 0.25907 lineto
0.17063 0.22523 lineto
0.18981 0.1992 lineto
0.20899 0.17857 lineto
0.24735 0.14793 lineto
0.28571 0.12626 lineto
0.32407 0.11013 lineto
0.36243 0.09766 lineto
0.40079 0.08772 lineto
0.43915 0.07962 lineto
0.47751 0.07289 lineto
0.51587 0.0672 lineto
0.55423 0.06234 lineto
0.59259 0.05814 lineto
0.63095 0.05447 lineto
0.66931 0.05123 lineto
0.70767 0.04836 lineto
0.74603 0.04579 lineto
0.78439 0.04348 lineto
0.82275 0.04139 lineto
0.86111 0.03949 lineto
0.89947 0.03776 lineto
0.93783 0.03618 lineto
0.97619 0.03472 lineto
stroke
grestore
grestore
gsave
0 setgray
gsave
0.005 setlinewidth
0.05556 0.39439 moveto
0.06515 0.33675 lineto
0.07474 0.29516 lineto
0.08433 0.26366 lineto
0.09392 0.23893 lineto
0.1131 0.20245 lineto
0.13228 0.17672 lineto
0.15146 0.1575 lineto
0.17063 0.14253 lineto
0.18981 0.1305 lineto
0.20899 0.1206 lineto
0.24735 0.10519 lineto
0.28571 0.09369 lineto
0.32407 0.08474 lineto
0.36243 0.07754 lineto
0.40079 0.07162 lineto
0.43915 0.06664 lineto
0.47751 0.0624 lineto
0.51587 0.05873 lineto
0.55423 0.05553 lineto
0.59259 0.05271 lineto
0.63095 0.0502 lineto
0.66931 0.04795 lineto
0.70767 0.04592 lineto
0.74603 0.04409 lineto
0.78439 0.04242 lineto
0.82275 0.04089 lineto
0.86111 0.03949 lineto
0.89947 0.0382 lineto
0.93783 0.037 lineto
0.97619 0.03589 lineto
stroke
grestore
grestore
grestore
% End of Graphics
MathPictureEnd
%%EPS Trailer
end

%%EndDocument
 GE /Times-Bold SF
15891 71348 MT
(Figure 2-11:)SH
/Times-Roman SF
22214 XM
(Mean-square error as specified by Equation \0502.61\051 vs. number of)SH
20258 72544 MT
(samples for correlation values of)SH
/Symbol SF
34949 XM
(r)SH
/Times-Roman SF
35828 XM
(= \050a\051 0.1, \050b\051 0.5, \050c\051 0.9, and \050d\051 0.98.)SH
ES
%%Page: 35 36
BS
0 SI
10 /Times-Roman AF
54800 4286 MT
(35)SH
11 SS 
1085 1000 270 33162 37800 GB 
%%BeginDocument: /usr0/rozzi/Documentation/PhDThesis/Chapter2/tb176.eps
%!PS-Adobe-2.0 EPSF-1.2
%%BoundingBox: 0 0 282 176
%%Creator: Mathematica
%%Title: Clipboard
%%CreationDate: Never Never
%%EndComments
50 dict begin
/Mnodistort true def
/pageDashArray [4] def
/nullDashArray [] def

% Compute the minimum of two numbers.
/Mmin {         % p q Mmin min(p,q)
        2 copy          % p q p q
        gt              % p q p>q?
        { exch } if     % min(p,q) max(p,q)
        pop             % min(p,q)
} bind def


% Compute the maximum of two numbers.
/Mmax {         % p q Mmax max(p,q)
        2 copy          % p q p q
        lt              % p q p<q?
        { exch } if     % max(p,q) min(p,q)
        pop             % max(p,q)
} bind def

/Mpstart {
    MathPictureStart
} bind def
/Mpend {
    MathPictureEnd
} bind def
/Mscale {
    0 1 0 1
    5 -1 roll
    MathScale
} bind def
/Plain
        /Courier findfont
def
/Bold
        /Courier-Bold findfont
def
/Italic
        /Courier-Oblique findfont
def
/MathPictureStart {
        gsave
        newpath
        /Mtmatrix
        matrix currentmatrix
        def
        Plain
        Mfontsize scalefont
        setfont
0 setgray 0 setlinewidth
} bind def
/MathPictureEnd {
        grestore
} bind def
/Mdot {
        moveto
        0 0 rlineto
        stroke
} def
/Mtetra {
        moveto
        lineto
        lineto
        lineto
        fill
} def
/Metetra {
        moveto
        lineto
        lineto
        lineto
        closepath
        gsave
        fill
        grestore
        0 setgray
        stroke
} def
/Mistroke {
        flattenpath
        0 0 0
        {
        4 2 roll
        pop pop
        }
        {
        4 -1 roll
        2 index
        sub dup mul
        4 -1 roll
        2 index
        sub dup mul
        add sqrt
        4 -1 roll
        add
        3 1 roll
        }
        {
        stop
        }
        {
        stop
        }
        pathforall
        pop pop
        currentpoint
        stroke
        moveto
        currentdash
        3 -1 roll
        add
        setdash
} def
/Mfstroke {
        stroke
        currentdash
        pop 0
        setdash
} def
/Msboxa {
        newpath
        5 -1 roll
        Mvboxa
        pop
        6 -1 roll
        5 -1 roll
        4 -1 roll
        Msboxa1
        5 -3 roll
        Msboxa1
        [
        7 -2 roll
        [ 2 index 2 index
        10 -1 roll
        9 -1 roll
        ]
        6 1 roll
        5 -2 roll
        ]
} bind def
        
/Msboxa1 {
        sub
        2 div
        dup
        2 index
        1 add
        mul
        3 -1 roll
        -1 add
        3 -1 roll
        mul
} bind def
/Mvboxa {
        gsave
        newpath
        [ true
        3 -1 roll
        {
        Mbbox
        5 -1 roll
        {
        0
        5 1 roll
        }
        {
        7 -1 roll
        exch sub
        (m) stringwidth pop
        .3 mul
        sub
        7 1 roll
        6 -1 roll
        4 -1 roll
        Mmin
        3 -1 roll
        5 index
        add
        5 -1 roll
        4 -1 roll
        Mmax
        4 -1 roll
        }
        ifelse
        false
        }
        forall
        { stop } if
        counttomark
        1 add
        4 roll
        ]
        grestore
} bind def
/Mbbox {
        0 0 moveto
        false charpath
        flattenpath
        pathbbox
        newpath
} bind def
/Mmin {
        2 copy
        gt
        { exch } if
        pop
} bind def
/Mmax {
        2 copy
        lt
        { exch } if
        pop
} bind def
/Mshowa {
        4 -2 roll
        moveto
        2 index
        Mtmatrix setmatrix
        Mvboxa
        7 1 roll
        6 -1 roll
        5 -1 roll
        4 -1 roll
        Mshowa1
        4 1 roll
        Mshowa1
        rmoveto
        currentpoint
        0 1
        4 index length
        -1 add
        {
        2 index
        4 index
        2 index
        get
        3 index
        add
        moveto
        4 index
        exch get
        show
        } for
        pop pop pop pop
        Mgmatrix setmatrix
} bind def
/Mshowa1 {
        2 copy
        add
        4 1 roll
        sub
        mul
        sub
        -2 div
} bind def
/MathScale {
        Mwidth
        Mheight
        Mlp
        translate
        scale
        /Mgmatrix
        matrix currentmatrix
        def
        /Msaveaa exch def
        /Msavebb exch def
        /Msavecc exch def
        /Msavedd exch def
} bind def
/Mlp {
        3 copy
        Mlpfirst
        {
        Mnodistort
        {
        Mmin
        dup
        } if
        4 index
        2 index
        2 index
        Mlprun
        11 index
        11 -1 roll
        10 -4 roll
        Mlp1
        8 index
        9 -5 roll
        Mlp1
        4 -1 roll
        and
        { exit } if
        3 -1 roll
        pop pop
        } loop
        exch
        3 1 roll
        7 -3 roll
        pop pop pop
} bind def
/Mlpfirst {
        3 -1 roll
        dup length
        2 copy
        -2 add
        get
        aload
        pop pop pop
        4 -2 roll
        -1 add
        get
        aload
        pop pop pop
        6 -1 roll
        3 -1 roll
        5 -1 roll
        sub
        dup /MsaveAx exch def
        div
        4 1 roll
        exch sub
        dup /MsaveAy exch def
        div
} bind def
/Mlprun {
        2 copy
        4 index
        0 get
        dup
        4 1 roll
        Mlprun1
        3 copy
        8 -2 roll
        9 -1 roll
        {
        3 copy
        Mlprun1
        3 copy
        11 -3 roll
        /gt Mlpminmax
        8 3 roll
        11 -3 roll
        /lt Mlpminmax
        8 3 roll
        } forall
        pop pop pop pop
        3 1 roll
        pop pop
        aload pop
        5 -1 roll
        aload pop
        exch
        6 -1 roll
        Mlprun2
        8 2 roll
        4 -1 roll
        Mlprun2
        6 2 roll
        3 -1 roll
        Mlprun2
        4 2 roll
        exch
        Mlprun2
        6 2 roll
} bind def
/Mlprun1 {
        aload pop
        exch
        6 -1 roll
        5 -1 roll
        mul add
        4 -2 roll
        mul
        3 -1 roll
        add
} bind def
/Mlprun2 {
        2 copy
        add 2 div
        3 1 roll
        exch sub
} bind def
/Mlpminmax {
        cvx
        2 index
        6 index
        2 index
        exec
        {
        7 -3 roll
        4 -1 roll
        } if
        1 index
        5 index
        3 -1 roll
        exec
        {
        4 1 roll
        pop
        5 -1 roll
        aload
        pop pop
        4 -1 roll
        aload pop
        [
        8 -2 roll
        pop
        5 -2 roll
        pop
        6 -2 roll
        pop
        5 -1 roll
        ]
        4 1 roll
        pop
        }
        {
        pop pop pop
        } ifelse
} bind def
/Mlp1 {
        5 index
        3 index sub
        5 index
        2 index mul
        1 index
        le
        1 index
        0 le
        or
        dup
        not
        {
        1 index
        3 index div
        .99999 mul
        8 -1 roll
        pop
        7 1 roll
        }
        if
        8 -1 roll
        2 div
        7 -2 roll
        pop sub
        5 index
        6 -3 roll
        pop pop
        mul sub
        exch
} bind def
/Mfontsize      12 def
/Mleft          0.000000 def
/Mbottom        176.000000 def
/Mwidth         282.000000 def
/Mheight        176.000000 def
/Courier findfont 12 scalefont setfont
%!
%%Creator: Mathematica
%%AspectRatio: 0.625 
MathPictureStart
% Scaling calculations
0.02381 0.03175 0.01488 0.26397 [
[(d=1.0, b=0.176, p=0.9)] 0.5 0.63125 0 -1 Msboxa
[(5)] 0.18254 0.00238 0 1 Msboxa
[(10)] 0.34127 0.00238 0 1 Msboxa
[(15)] 0.5 0.00238 0 1 Msboxa
[(20)] 0.65873 0.00238 0 1 Msboxa
[(25)] 0.81746 0.00238 0 1 Msboxa
[(30)] 0.97619 0.00238 0 1 Msboxa
[(n)] 1.00625 0.01488 -1 0 Msboxa
[(0.5)] 0.01131 0.14687 1 0 Msboxa
[(1)] 0.01131 0.27886 1 0 Msboxa
[(1.5)] 0.01131 0.41084 1 0 Msboxa
[(2)] 0.01131 0.54283 1 0 Msboxa
[(MSE)] 0.02381 0.63125 0 -1 Msboxa
[ -0.001 -0.001 0 0 ]
[ 1.001 0.626 0 0 ]
] MathScale
% Start of Graphics
1 setlinecap
1 setlinejoin
newpath
%%Object: Graphics
[ ] 0 setdash
0 setgray
0 setgray
%[(d=1.0, b=0.176, p=0.9)] 0.5 0.63125 0 -1 Mshowa
gsave
gsave
0.002 setlinewidth
0 0.01488 moveto
1 0.01488 lineto
stroke
0.18254 0.00863 moveto
0.18254 0.02113 lineto
stroke
0 setgray
[(5)] 0.18254 0.00238 0 1 Mshowa
0.34127 0.00863 moveto
0.34127 0.02113 lineto
stroke
0 setgray
[(10)] 0.34127 0.00238 0 1 Mshowa
0.5 0.00863 moveto
0.5 0.02113 lineto
stroke
0 setgray
[(15)] 0.5 0.00238 0 1 Mshowa
0.65873 0.00863 moveto
0.65873 0.02113 lineto
stroke
0 setgray
[(20)] 0.65873 0.00238 0 1 Mshowa
0.81746 0.00863 moveto
0.81746 0.02113 lineto
stroke
0 setgray
[(25)] 0.81746 0.00238 0 1 Mshowa
0.97619 0.00863 moveto
0.97619 0.02113 lineto
stroke
0 setgray
[(30)] 0.97619 0.00238 0 1 Mshowa
0 setgray
[(k)] 1.00625 0.01488 -1 0 Mshowa
0.02381 0 moveto
0.02381 0.625 lineto
stroke
0.01756 0.14687 moveto
0.03006 0.14687 lineto
stroke
0 setgray
[(0.5)] 0.01131 0.14687 1 0 Mshowa
0.01756 0.27886 moveto
0.03006 0.27886 lineto
stroke
0 setgray
[(1)] 0.01131 0.27886 1 0 Mshowa
0.01756 0.41084 moveto
0.03006 0.41084 lineto
stroke
0 setgray
[(1.5)] 0.01131 0.41084 1 0 Mshowa
0.01756 0.54283 moveto
0.03006 0.54283 lineto
stroke
0 setgray
[(2)] 0.01131 0.54283 1 0 Mshowa
0 setgray
[(MSE)] 0.02381 0.63125 0 -1 Mshowa
grestore
grestore
[(\(b\))] 0.7 0.53125 0 -1 Mshowa

0 0 moveto
1 0 lineto
1 0.625 lineto
0 0.625 lineto
closepath
clip
newpath
0 setgray
gsave
gsave
0.33 setgray
gsave
0.005 setlinewidth
0.05556 0.28053 moveto
0.06515 0.24856 lineto
0.07474 0.22432 lineto
0.09392 0.18993 lineto
0.10351 0.17727 lineto
0.1131 0.16664 lineto
0.13228 0.14976 lineto
0.15146 0.13692 lineto
0.17063 0.12681 lineto
0.20899 0.11179 lineto
0.24735 0.10111 lineto
0.28571 0.09306 lineto
0.32407 0.08672 lineto
0.36243 0.08158 lineto
0.40079 0.0773 lineto
0.43915 0.07366 lineto
0.47751 0.07052 lineto
0.51587 0.06778 lineto
0.55423 0.06536 lineto
0.59259 0.06319 lineto
0.63095 0.06124 lineto
0.66931 0.05947 lineto
0.70767 0.05786 lineto
0.74603 0.05638 lineto
0.78439 0.05501 lineto
0.82275 0.05375 lineto
0.86111 0.05257 lineto
0.89947 0.05148 lineto
0.93783 0.05045 lineto
0.97619 0.04949 lineto
stroke
grestore
grestore
gsave
0.67 setgray
gsave
0.005 setlinewidth
0.05556 1.77871 moveto
0.06035 1.54726 lineto
0.06515 1.3695 lineto
0.06994 1.2287 lineto
0.07474 1.11441 lineto
0.08433 0.94017 lineto
0.09392 0.8136 lineto
0.10351 0.71749 lineto
0.1131 0.64202 lineto
0.12269 0.58119 lineto
0.13228 0.53112 lineto
0.15146 0.45355 lineto
0.17063 0.39625 lineto
0.18981 0.35219 lineto
0.20899 0.31725 lineto
0.24735 0.26537 lineto
0.28571 0.22868 lineto
0.32407 0.20137 lineto
0.36243 0.18024 lineto
0.40079 0.16341 lineto
0.43915 0.1497 lineto
0.47751 0.1383 lineto
0.51587 0.12868 lineto
0.55423 0.12045 lineto
0.59259 0.11333 lineto
0.63095 0.10711 lineto
0.66931 0.10163 lineto
0.70767 0.09676 lineto
0.74603 0.09241 lineto
0.78439 0.0885 lineto
0.82275 0.08497 lineto
0.86111 0.08176 lineto
0.89947 0.07883 lineto
0.93783 0.07614 lineto
0.97619 0.07368 lineto
stroke
grestore
grestore
gsave
%[ 0.05 0.03 ] 0 setdash
0 setgray
gsave
0.005 setlinewidth
0.05556 0.28347 moveto
0.06515 0.25151 lineto
0.07474 0.22726 lineto
0.09392 0.19288 lineto
0.10351 0.18021 lineto
0.1131 0.16958 lineto
0.13228 0.1527 lineto
0.15146 0.13987 lineto
0.17063 0.12975 lineto
0.20899 0.11474 lineto
0.24735 0.10406 lineto
0.28571 0.096 lineto
0.32407 0.08967 lineto
0.36243 0.08452 lineto
0.40079 0.08024 lineto
0.43915 0.07661 lineto
0.47751 0.07347 lineto
0.51587 0.07073 lineto
0.55423 0.0683 lineto
0.59259 0.06613 lineto
0.63095 0.06418 lineto
0.66931 0.06241 lineto
0.70767 0.0608 lineto
0.74603 0.05932 lineto
0.78439 0.05796 lineto
0.82275 0.05669 lineto
0.86111 0.05552 lineto
0.89947 0.05442 lineto
0.93783 0.0534 lineto
0.97619 0.05244 lineto
stroke
grestore
grestore
grestore
% End of Graphics
MathPictureEnd
%%EPS Trailer
end

%%EndDocument
 GE 1085 1000 270 52533 37800 GB 
%%BeginDocument: /usr0/rozzi/Documentation/PhDThesis/Chapter2/tb1.eps
%!PS-Adobe-2.0 EPSF-1.2
%%BoundingBox: 0 0 282 176
%%Creator: Mathematica
%%Title: Clipboard
%%CreationDate: Never Never
%%EndComments
50 dict begin
/Mnodistort true def
/pageDashArray [4] def
/nullDashArray [] def

% Compute the minimum of two numbers.
/Mmin {         % p q Mmin min(p,q)
        2 copy          % p q p q
        gt              % p q p>q?
        { exch } if     % min(p,q) max(p,q)
        pop             % min(p,q)
} bind def


% Compute the maximum of two numbers.
/Mmax {         % p q Mmax max(p,q)
        2 copy          % p q p q
        lt              % p q p<q?
        { exch } if     % max(p,q) min(p,q)
        pop             % max(p,q)
} bind def

/Mpstart {
    MathPictureStart
} bind def
/Mpend {
    MathPictureEnd
} bind def
/Mscale {
    0 1 0 1
    5 -1 roll
    MathScale
} bind def
/Plain
        /Courier findfont
def
/Bold
        /Courier-Bold findfont
def
/Italic
        /Courier-Oblique findfont
def
/MathPictureStart {
        gsave
        newpath
        /Mtmatrix
        matrix currentmatrix
        def
        Plain
        Mfontsize scalefont
        setfont
0 setgray 0 setlinewidth
} bind def
/MathPictureEnd {
        grestore
} bind def
/Mdot {
        moveto
        0 0 rlineto
        stroke
} def
/Mtetra {
        moveto
        lineto
        lineto
        lineto
        fill
} def
/Metetra {
        moveto
        lineto
        lineto
        lineto
        closepath
        gsave
        fill
        grestore
        0 setgray
        stroke
} def
/Mistroke {
        flattenpath
        0 0 0
        {
        4 2 roll
        pop pop
        }
        {
        4 -1 roll
        2 index
        sub dup mul
        4 -1 roll
        2 index
        sub dup mul
        add sqrt
        4 -1 roll
        add
        3 1 roll
        }
        {
        stop
        }
        {
        stop
        }
        pathforall
        pop pop
        currentpoint
        stroke
        moveto
        currentdash
        3 -1 roll
        add
        setdash
} def
/Mfstroke {
        stroke
        currentdash
        pop 0
        setdash
} def
/Msboxa {
        newpath
        5 -1 roll
        Mvboxa
        pop
        6 -1 roll
        5 -1 roll
        4 -1 roll
        Msboxa1
        5 -3 roll
        Msboxa1
        [
        7 -2 roll
        [ 2 index 2 index
        10 -1 roll
        9 -1 roll
        ]
        6 1 roll
        5 -2 roll
        ]
} bind def
        
/Msboxa1 {
        sub
        2 div
        dup
        2 index
        1 add
        mul
        3 -1 roll
        -1 add
        3 -1 roll
        mul
} bind def
/Mvboxa {
        gsave
        newpath
        [ true
        3 -1 roll
        {
        Mbbox
        5 -1 roll
        {
        0
        5 1 roll
        }
        {
        7 -1 roll
        exch sub
        (m) stringwidth pop
        .3 mul
        sub
        7 1 roll
        6 -1 roll
        4 -1 roll
        Mmin
        3 -1 roll
        5 index
        add
        5 -1 roll
        4 -1 roll
        Mmax
        4 -1 roll
        }
        ifelse
        false
        }
        forall
        { stop } if
        counttomark
        1 add
        4 roll
        ]
        grestore
} bind def
/Mbbox {
        0 0 moveto
        false charpath
        flattenpath
        pathbbox
        newpath
} bind def
/Mmin {
        2 copy
        gt
        { exch } if
        pop
} bind def
/Mmax {
        2 copy
        lt
        { exch } if
        pop
} bind def
/Mshowa {
        4 -2 roll
        moveto
        2 index
        Mtmatrix setmatrix
        Mvboxa
        7 1 roll
        6 -1 roll
        5 -1 roll
        4 -1 roll
        Mshowa1
        4 1 roll
        Mshowa1
        rmoveto
        currentpoint
        0 1
        4 index length
        -1 add
        {
        2 index
        4 index
        2 index
        get
        3 index
        add
        moveto
        4 index
        exch get
        show
        } for
        pop pop pop pop
        Mgmatrix setmatrix
} bind def
/Mshowa1 {
        2 copy
        add
        4 1 roll
        sub
        mul
        sub
        -2 div
} bind def
/MathScale {
        Mwidth
        Mheight
        Mlp
        translate
        scale
        /Mgmatrix
        matrix currentmatrix
        def
        /Msaveaa exch def
        /Msavebb exch def
        /Msavecc exch def
        /Msavedd exch def
} bind def
/Mlp {
        3 copy
        Mlpfirst
        {
        Mnodistort
        {
        Mmin
        dup
        } if
        4 index
        2 index
        2 index
        Mlprun
        11 index
        11 -1 roll
        10 -4 roll
        Mlp1
        8 index
        9 -5 roll
        Mlp1
        4 -1 roll
        and
        { exit } if
        3 -1 roll
        pop pop
        } loop
        exch
        3 1 roll
        7 -3 roll
        pop pop pop
} bind def
/Mlpfirst {
        3 -1 roll
        dup length
        2 copy
        -2 add
        get
        aload
        pop pop pop
        4 -2 roll
        -1 add
        get
        aload
        pop pop pop
        6 -1 roll
        3 -1 roll
        5 -1 roll
        sub
        dup /MsaveAx exch def
        div
        4 1 roll
        exch sub
        dup /MsaveAy exch def
        div
} bind def
/Mlprun {
        2 copy
        4 index
        0 get
        dup
        4 1 roll
        Mlprun1
        3 copy
        8 -2 roll
        9 -1 roll
        {
        3 copy
        Mlprun1
        3 copy
        11 -3 roll
        /gt Mlpminmax
        8 3 roll
        11 -3 roll
        /lt Mlpminmax
        8 3 roll
        } forall
        pop pop pop pop
        3 1 roll
        pop pop
        aload pop
        5 -1 roll
        aload pop
        exch
        6 -1 roll
        Mlprun2
        8 2 roll
        4 -1 roll
        Mlprun2
        6 2 roll
        3 -1 roll
        Mlprun2
        4 2 roll
        exch
        Mlprun2
        6 2 roll
} bind def
/Mlprun1 {
        aload pop
        exch
        6 -1 roll
        5 -1 roll
        mul add
        4 -2 roll
        mul
        3 -1 roll
        add
} bind def
/Mlprun2 {
        2 copy
        add 2 div
        3 1 roll
        exch sub
} bind def
/Mlpminmax {
        cvx
        2 index
        6 index
        2 index
        exec
        {
        7 -3 roll
        4 -1 roll
        } if
        1 index
        5 index
        3 -1 roll
        exec
        {
        4 1 roll
        pop
        5 -1 roll
        aload
        pop pop
        4 -1 roll
        aload pop
        [
        8 -2 roll
        pop
        5 -2 roll
        pop
        6 -2 roll
        pop
        5 -1 roll
        ]
        4 1 roll
        pop
        }
        {
        pop pop pop
        } ifelse
} bind def
/Mlp1 {
        5 index
        3 index sub
        5 index
        2 index mul
        1 index
        le
        1 index
        0 le
        or
        dup
        not
        {
        1 index
        3 index div
        .99999 mul
        8 -1 roll
        pop
        7 1 roll
        }
        if
        8 -1 roll
        2 div
        7 -2 roll
        pop sub
        5 index
        6 -3 roll
        pop pop
        mul sub
        exch
} bind def
/Mfontsize      12 def
/Mleft          0.000000 def
/Mbottom        176.000000 def
/Mwidth         282.000000 def
/Mheight        176.000000 def
/Courier findfont 12 scalefont setfont
%!
%%Creator: Mathematica
%%AspectRatio: 0.625 
MathPictureStart
% Scaling calculations
0.02381 0.03175 0.01488 0.46828 [
[(d=1.0, b=1.0, p=0.9)] 0.5 0.63125 0 -1 Msboxa
[(5)] 0.18254 0.00238 0 1 Msboxa
[(10)] 0.34127 0.00238 0 1 Msboxa
[(15)] 0.5 0.00238 0 1 Msboxa
[(20)] 0.65873 0.00238 0 1 Msboxa
[(25)] 0.81746 0.00238 0 1 Msboxa
[(30)] 0.97619 0.00238 0 1 Msboxa
[(n)] 1.00625 0.01488 -1 0 Msboxa
[(0.2)] 0.01131 0.10854 1 0 Msboxa
[(0.4)] 0.01131 0.20219 1 0 Msboxa
[(0.6)] 0.01131 0.29585 1 0 Msboxa
[(0.8)] 0.01131 0.38951 1 0 Msboxa
[(1)] 0.01131 0.48316 1 0 Msboxa
[(1.2)] 0.01131 0.57682 1 0 Msboxa
[(MSE)] 0.02381 0.63125 0 -1 Msboxa
[ -0.001 -0.001 0 0 ]
[ 1.001 0.626 0 0 ]
] MathScale
% Start of Graphics
1 setlinecap
1 setlinejoin
newpath
%%Object: Graphics
[ ] 0 setdash
0 setgray
0 setgray
%[(d=1.0, b=1.0, p=0.9)] 0.5 0.63125 0 -1 Mshowa
gsave
gsave
0.002 setlinewidth
0 0.01488 moveto
1 0.01488 lineto
stroke
0.18254 0.00863 moveto
0.18254 0.02113 lineto
stroke
0 setgray
[(5)] 0.18254 0.00238 0 1 Mshowa
0.34127 0.00863 moveto
0.34127 0.02113 lineto
stroke
0 setgray
[(10)] 0.34127 0.00238 0 1 Mshowa
0.5 0.00863 moveto
0.5 0.02113 lineto
stroke
0 setgray
[(15)] 0.5 0.00238 0 1 Mshowa
0.65873 0.00863 moveto
0.65873 0.02113 lineto
stroke
0 setgray
[(20)] 0.65873 0.00238 0 1 Mshowa
0.81746 0.00863 moveto
0.81746 0.02113 lineto
stroke
0 setgray
[(25)] 0.81746 0.00238 0 1 Mshowa
0.97619 0.00863 moveto
0.97619 0.02113 lineto
stroke
0 setgray
[(30)] 0.97619 0.00238 0 1 Mshowa
0 setgray
[(k)] 1.00625 0.01488 -1 0 Mshowa
0.02381 0 moveto
0.02381 0.625 lineto
stroke
0.01756 0.10854 moveto
0.03006 0.10854 lineto
stroke
0 setgray
[(0.2)] 0.01131 0.10854 1 0 Mshowa
0.01756 0.20219 moveto
0.03006 0.20219 lineto
stroke
0 setgray
[(0.4)] 0.01131 0.20219 1 0 Mshowa
0.01756 0.29585 moveto
0.03006 0.29585 lineto
stroke
0 setgray
[(0.6)] 0.01131 0.29585 1 0 Mshowa
0.01756 0.38951 moveto
0.03006 0.38951 lineto
stroke
0 setgray
[(0.8)] 0.01131 0.38951 1 0 Mshowa
0.01756 0.48316 moveto
0.03006 0.48316 lineto
stroke
0 setgray
[(1)] 0.01131 0.48316 1 0 Mshowa
0.01756 0.57682 moveto
0.03006 0.57682 lineto
stroke
0 setgray
[(1.2)] 0.01131 0.57682 1 0 Mshowa
0 setgray
[(MSE)] 0.02381 0.63125 0 -1 Mshowa
grestore
grestore
[(\(d\))] 0.7 0.53125 0 -1 Mshowa

0 0 moveto
1 0 lineto
1 0.625 lineto
0 0.625 lineto
closepath
clip
newpath
0 setgray
gsave
gsave
0.33 setgray
gsave
0.005 setlinewidth
0.05556 0.36426 moveto
0.06515 0.31243 lineto
0.07474 0.27504 lineto
0.08433 0.24672 lineto
0.09392 0.22448 lineto
0.1131 0.19168 lineto
0.13228 0.16855 lineto
0.15146 0.15126 lineto
0.17063 0.13781 lineto
0.18981 0.12699 lineto
0.20899 0.11809 lineto
0.24735 0.10424 lineto
0.28571 0.0939 lineto
0.32407 0.08585 lineto
0.36243 0.07938 lineto
0.40079 0.07405 lineto
0.43915 0.06958 lineto
0.47751 0.06576 lineto
0.51587 0.06246 lineto
0.55423 0.05959 lineto
0.59259 0.05705 lineto
0.63095 0.05479 lineto
0.66931 0.05277 lineto
0.70767 0.05095 lineto
0.74603 0.0493 lineto
0.78439 0.0478 lineto
0.82275 0.04642 lineto
0.86111 0.04516 lineto
0.89947 0.044 lineto
0.93783 0.04293 lineto
0.97619 0.04193 lineto
stroke
grestore
grestore
gsave
0.67 setgray
gsave
0.005 setlinewidth
0.05556 0.95144 moveto
0.06035 0.82855 lineto
0.06515 0.73416 lineto
0.06994 0.6594 lineto
0.07474 0.59871 lineto
0.08433 0.50619 lineto
0.09392 0.43898 lineto
0.10351 0.38795 lineto
0.1131 0.34788 lineto
0.12269 0.31558 lineto
0.13228 0.289 lineto
0.15146 0.24781 lineto
0.17063 0.21738 lineto
0.18981 0.19398 lineto
0.20899 0.17543 lineto
0.24735 0.14788 lineto
0.28571 0.1284 lineto
0.32407 0.1139 lineto
0.36243 0.10268 lineto
0.40079 0.09375 lineto
0.43915 0.08647 lineto
0.47751 0.08041 lineto
0.51587 0.0753 lineto
0.55423 0.07093 lineto
0.59259 0.06715 lineto
0.63095 0.06385 lineto
0.66931 0.06094 lineto
0.70767 0.05836 lineto
0.74603 0.05605 lineto
0.78439 0.05397 lineto
0.82275 0.0521 lineto
0.86111 0.05039 lineto
0.89947 0.04883 lineto
0.93783 0.04741 lineto
0.97619 0.0461 lineto
stroke
grestore
grestore
gsave
%[ 0.05 0.03 ] 0 setdash
0 setgray
gsave
0.005 setlinewidth
0.05556 0.36948 moveto
0.06515 0.31765 lineto
0.07474 0.28026 lineto
0.08433 0.25194 lineto
0.09392 0.2297 lineto
0.1131 0.19691 lineto
0.13228 0.17377 lineto
0.15146 0.15649 lineto
0.17063 0.14303 lineto
0.18981 0.13222 lineto
0.20899 0.12331 lineto
0.24735 0.10946 lineto
0.28571 0.09912 lineto
0.32407 0.09107 lineto
0.36243 0.0846 lineto
0.40079 0.07927 lineto
0.43915 0.0748 lineto
0.47751 0.07098 lineto
0.51587 0.06769 lineto
0.55423 0.06481 lineto
0.59259 0.06227 lineto
0.63095 0.06001 lineto
0.66931 0.05799 lineto
0.70767 0.05617 lineto
0.74603 0.05452 lineto
0.78439 0.05302 lineto
0.82275 0.05165 lineto
0.86111 0.05039 lineto
0.89947 0.04922 lineto
0.93783 0.04815 lineto
0.97619 0.04715 lineto
stroke
grestore
grestore
grestore
% End of Graphics
MathPictureEnd
%%EPS Trailer
end

%%EndDocument
 GE 1085 1000 270 33162 69596 GB 
%%BeginDocument: /usr0/rozzi/Documentation/PhDThesis/Chapter2/tb053.eps
%!PS-Adobe-2.0 EPSF-1.2
%%BoundingBox: 0 0 282 176
%%Creator: Mathematica
%%Title: Clipboard
%%CreationDate: Never Never
%%EndComments
50 dict begin
/Mnodistort true def
/pageDashArray [4] def
/nullDashArray [] def

% Compute the minimum of two numbers.
/Mmin {         % p q Mmin min(p,q)
        2 copy          % p q p q
        gt              % p q p>q?
        { exch } if     % min(p,q) max(p,q)
        pop             % min(p,q)
} bind def


% Compute the maximum of two numbers.
/Mmax {         % p q Mmax max(p,q)
        2 copy          % p q p q
        lt              % p q p<q?
        { exch } if     % max(p,q) min(p,q)
        pop             % max(p,q)
} bind def

/Mpstart {
    MathPictureStart
} bind def
/Mpend {
    MathPictureEnd
} bind def
/Mscale {
    0 1 0 1
    5 -1 roll
    MathScale
} bind def
/Plain
        /Courier findfont
def
/Bold
        /Courier-Bold findfont
def
/Italic
        /Courier-Oblique findfont
def
/MathPictureStart {
        gsave
        newpath
        /Mtmatrix
        matrix currentmatrix
        def
        Plain
        Mfontsize scalefont
        setfont
0 setgray 0 setlinewidth
} bind def
/MathPictureEnd {
        grestore
} bind def
/Mdot {
        moveto
        0 0 rlineto
        stroke
} def
/Mtetra {
        moveto
        lineto
        lineto
        lineto
        fill
} def
/Metetra {
        moveto
        lineto
        lineto
        lineto
        closepath
        gsave
        fill
        grestore
        0 setgray
        stroke
} def
/Mistroke {
        flattenpath
        0 0 0
        {
        4 2 roll
        pop pop
        }
        {
        4 -1 roll
        2 index
        sub dup mul
        4 -1 roll
        2 index
        sub dup mul
        add sqrt
        4 -1 roll
        add
        3 1 roll
        }
        {
        stop
        }
        {
        stop
        }
        pathforall
        pop pop
        currentpoint
        stroke
        moveto
        currentdash
        3 -1 roll
        add
        setdash
} def
/Mfstroke {
        stroke
        currentdash
        pop 0
        setdash
} def
/Msboxa {
        newpath
        5 -1 roll
        Mvboxa
        pop
        6 -1 roll
        5 -1 roll
        4 -1 roll
        Msboxa1
        5 -3 roll
        Msboxa1
        [
        7 -2 roll
        [ 2 index 2 index
        10 -1 roll
        9 -1 roll
        ]
        6 1 roll
        5 -2 roll
        ]
} bind def
        
/Msboxa1 {
        sub
        2 div
        dup
        2 index
        1 add
        mul
        3 -1 roll
        -1 add
        3 -1 roll
        mul
} bind def
/Mvboxa {
        gsave
        newpath
        [ true
        3 -1 roll
        {
        Mbbox
        5 -1 roll
        {
        0
        5 1 roll
        }
        {
        7 -1 roll
        exch sub
        (m) stringwidth pop
        .3 mul
        sub
        7 1 roll
        6 -1 roll
        4 -1 roll
        Mmin
        3 -1 roll
        5 index
        add
        5 -1 roll
        4 -1 roll
        Mmax
        4 -1 roll
        }
        ifelse
        false
        }
        forall
        { stop } if
        counttomark
        1 add
        4 roll
        ]
        grestore
} bind def
/Mbbox {
        0 0 moveto
        false charpath
        flattenpath
        pathbbox
        newpath
} bind def
/Mmin {
        2 copy
        gt
        { exch } if
        pop
} bind def
/Mmax {
        2 copy
        lt
        { exch } if
        pop
} bind def
/Mshowa {
        4 -2 roll
        moveto
        2 index
        Mtmatrix setmatrix
        Mvboxa
        7 1 roll
        6 -1 roll
        5 -1 roll
        4 -1 roll
        Mshowa1
        4 1 roll
        Mshowa1
        rmoveto
        currentpoint
        0 1
        4 index length
        -1 add
        {
        2 index
        4 index
        2 index
        get
        3 index
        add
        moveto
        4 index
        exch get
        show
        } for
        pop pop pop pop
        Mgmatrix setmatrix
} bind def
/Mshowa1 {
        2 copy
        add
        4 1 roll
        sub
        mul
        sub
        -2 div
} bind def
/MathScale {
        Mwidth
        Mheight
        Mlp
        translate
        scale
        /Mgmatrix
        matrix currentmatrix
        def
        /Msaveaa exch def
        /Msavebb exch def
        /Msavecc exch def
        /Msavedd exch def
} bind def
/Mlp {
        3 copy
        Mlpfirst
        {
        Mnodistort
        {
        Mmin
        dup
        } if
        4 index
        2 index
        2 index
        Mlprun
        11 index
        11 -1 roll
        10 -4 roll
        Mlp1
        8 index
        9 -5 roll
        Mlp1
        4 -1 roll
        and
        { exit } if
        3 -1 roll
        pop pop
        } loop
        exch
        3 1 roll
        7 -3 roll
        pop pop pop
} bind def
/Mlpfirst {
        3 -1 roll
        dup length
        2 copy
        -2 add
        get
        aload
        pop pop pop
        4 -2 roll
        -1 add
        get
        aload
        pop pop pop
        6 -1 roll
        3 -1 roll
        5 -1 roll
        sub
        dup /MsaveAx exch def
        div
        4 1 roll
        exch sub
        dup /MsaveAy exch def
        div
} bind def
/Mlprun {
        2 copy
        4 index
        0 get
        dup
        4 1 roll
        Mlprun1
        3 copy
        8 -2 roll
        9 -1 roll
        {
        3 copy
        Mlprun1
        3 copy
        11 -3 roll
        /gt Mlpminmax
        8 3 roll
        11 -3 roll
        /lt Mlpminmax
        8 3 roll
        } forall
        pop pop pop pop
        3 1 roll
        pop pop
        aload pop
        5 -1 roll
        aload pop
        exch
        6 -1 roll
        Mlprun2
        8 2 roll
        4 -1 roll
        Mlprun2
        6 2 roll
        3 -1 roll
        Mlprun2
        4 2 roll
        exch
        Mlprun2
        6 2 roll
} bind def
/Mlprun1 {
        aload pop
        exch
        6 -1 roll
        5 -1 roll
        mul add
        4 -2 roll
        mul
        3 -1 roll
        add
} bind def
/Mlprun2 {
        2 copy
        add 2 div
        3 1 roll
        exch sub
} bind def
/Mlpminmax {
        cvx
        2 index
        6 index
        2 index
        exec
        {
        7 -3 roll
        4 -1 roll
        } if
        1 index
        5 index
        3 -1 roll
        exec
        {
        4 1 roll
        pop
        5 -1 roll
        aload
        pop pop
        4 -1 roll
        aload pop
        [
        8 -2 roll
        pop
        5 -2 roll
        pop
        6 -2 roll
        pop
        5 -1 roll
        ]
        4 1 roll
        pop
        }
        {
        pop pop pop
        } ifelse
} bind def
/Mlp1 {
        5 index
        3 index sub
        5 index
        2 index mul
        1 index
        le
        1 index
        0 le
        or
        dup
        not
        {
        1 index
        3 index div
        .99999 mul
        8 -1 roll
        pop
        7 1 roll
        }
        if
        8 -1 roll
        2 div
        7 -2 roll
        pop sub
        5 index
        6 -3 roll
        pop pop
        mul sub
        exch
} bind def
/Mfontsize      12 def
/Mleft          0.000000 def
/Mbottom        176.000000 def
/Mwidth         282.000000 def
/Mheight        176.000000 def
/Courier findfont 12 scalefont setfont
%!
%%Creator: Mathematica
%%AspectRatio: 0.625 
MathPictureStart
% Scaling calculations
0.02381 0.03175 0.01488 0.10498 [
[(d=1.0, b=0.053, p=0.9)] 0.5 0.63125 0 -1 Msboxa
[(5)] 0.18254 0.00238 0 1 Msboxa
[(10)] 0.34127 0.00238 0 1 Msboxa
[(15)] 0.5 0.00238 0 1 Msboxa
[(20)] 0.65873 0.00238 0 1 Msboxa
[(25)] 0.81746 0.00238 0 1 Msboxa
[(30)] 0.97619 0.00238 0 1 Msboxa
[(n)] 1.00625 0.01488 -1 0 Msboxa
[(1)] 0.01131 0.11986 1 0 Msboxa
[(2)] 0.01131 0.22484 1 0 Msboxa
[(3)] 0.01131 0.32982 1 0 Msboxa
[(4)] 0.01131 0.4348 1 0 Msboxa
[(5)] 0.01131 0.53978 1 0 Msboxa
[(MSE)] 0.02381 0.63125 0 -1 Msboxa
[ -0.001 -0.001 0 0 ]
[ 1.001 0.626 0 0 ]
] MathScale
% Start of Graphics
1 setlinecap
1 setlinejoin
newpath
%%Object: Graphics
[ ] 0 setdash
0 setgray
0 setgray
%[(d=1.0, b=0.053, p=0.9)] 0.5 0.63125 0 -1 Mshowa
gsave
gsave
0.002 setlinewidth
0 0.01488 moveto
1 0.01488 lineto
stroke
0.18254 0.00863 moveto
0.18254 0.02113 lineto
stroke
0 setgray
[(5)] 0.18254 0.00238 0 1 Mshowa
0.34127 0.00863 moveto
0.34127 0.02113 lineto
stroke
0 setgray
[(10)] 0.34127 0.00238 0 1 Mshowa
0.5 0.00863 moveto
0.5 0.02113 lineto
stroke
0 setgray
[(15)] 0.5 0.00238 0 1 Mshowa
0.65873 0.00863 moveto
0.65873 0.02113 lineto
stroke
0 setgray
[(20)] 0.65873 0.00238 0 1 Mshowa
0.81746 0.00863 moveto
0.81746 0.02113 lineto
stroke
0 setgray
[(25)] 0.81746 0.00238 0 1 Mshowa
0.97619 0.00863 moveto
0.97619 0.02113 lineto
stroke
0 setgray
[(30)] 0.97619 0.00238 0 1 Mshowa
0 setgray
[(k)] 1.00625 0.01488 -1 0 Mshowa
0.02381 0 moveto
0.02381 0.625 lineto
stroke
0.01756 0.11986 moveto
0.03006 0.11986 lineto
stroke
0 setgray
[(1)] 0.01131 0.11986 1 0 Mshowa
0.01756 0.22484 moveto
0.03006 0.22484 lineto
stroke
0 setgray
[(2)] 0.01131 0.22484 1 0 Mshowa
0.01756 0.32982 moveto
0.03006 0.32982 lineto
stroke
0 setgray
[(3)] 0.01131 0.32982 1 0 Mshowa
0.01756 0.4348 moveto
0.03006 0.4348 lineto
stroke
0 setgray
[(4)] 0.01131 0.4348 1 0 Mshowa
0.01756 0.53978 moveto
0.03006 0.53978 lineto
stroke
0 setgray
[(5)] 0.01131 0.53978 1 0 Mshowa
0 setgray
[(MSE)] 0.02381 0.63125 0 -1 Mshowa
grestore
grestore

% legend and panel label
[(ML)] 0.7 0.43125 0 -1 Mshowa
[(EMAP)] 0.73 0.38125 0 -1 Mshowa
[(LMS-C)] 0.74 0.33125 0 -1 Mshowa
[(\(a\))] 0.7 0.53125 0 -1 Mshowa
gsave
0.67 setgray
0.005 setlinewidth
0.53 0.444 moveto
0.66 0.444 lineto
stroke
0.33 setgray
0.53 0.394 moveto
0.66 0.394 lineto
stroke
0. setgray
0.53 0.344 moveto
0.66 0.344 lineto
stroke
grestore

0 0 moveto
1 0 lineto
1 0.625 lineto
0 0.625 lineto
closepath
clip
newpath
0 setgray
gsave
gsave
0.2 setgray
gsave
0.005 setlinewidth
0.05556 0.12683 moveto
0.06515 0.11425 lineto
0.07474 0.10462 lineto
0.09392 0.09085 lineto
0.10351 0.08574 lineto
0.1131 0.08145 lineto
0.13228 0.07463 lineto
0.15146 0.06943 lineto
0.17063 0.06534 lineto
0.20899 0.0593 lineto
0.24735 0.05503 lineto
0.28571 0.05183 lineto
0.32407 0.04933 lineto
0.36243 0.04732 lineto
0.40079 0.04566 lineto
0.43915 0.04426 lineto
0.47751 0.04306 lineto
0.51587 0.04201 lineto
0.55423 0.04108 lineto
0.59259 0.04026 lineto
0.63095 0.03952 lineto
0.66931 0.03885 lineto
0.70767 0.03824 lineto
0.74603 0.03768 lineto
0.78439 0.03716 lineto
0.82275 0.03668 lineto
0.86111 0.03623 lineto
0.89947 0.03581 lineto
0.93783 0.03542 lineto
0.97619 0.03505 lineto
stroke
grestore
grestore
gsave
0.4 setgray
gsave
0.005 setlinewidth
0.05556 2.1006 moveto
0.06035 1.8269 lineto
0.06515 1.61671 lineto
0.06994 1.45021 lineto
0.07474 1.31507 lineto
0.08433 1.10903 lineto
0.09392 0.95936 lineto
0.10351 0.84571 lineto
0.1131 0.75647 lineto
0.12269 0.68454 lineto
0.13228 0.62533 lineto
0.15146 0.53361 lineto
0.17063 0.46585 lineto
0.18981 0.41374 lineto
0.20899 0.37243 lineto
0.24735 0.31108 lineto
0.28571 0.26769 lineto
0.32407 0.2354 lineto
0.36243 0.21042 lineto
0.40079 0.19052 lineto
0.43915 0.1743 lineto
0.47751 0.16082 lineto
0.51587 0.14944 lineto
0.55423 0.13971 lineto
0.59259 0.13129 lineto
0.63095 0.12394 lineto
0.66931 0.11746 lineto
0.70767 0.1117 lineto
0.74603 0.10656 lineto
0.78439 0.10194 lineto
0.82275 0.09776 lineto
0.86111 0.09396 lineto
0.89947 0.0905 lineto
0.93783 0.08732 lineto
0.97619 0.0844 lineto
stroke
grestore
grestore
gsave
%[ 0.05 0.03 ] 0 setdash
0 setgray
gsave
0.005 setlinewidth
0.05556 0.128 moveto
0.06515 0.11542 lineto
0.07474 0.10579 lineto
0.09392 0.09202 lineto
0.10351 0.08692 lineto
0.1131 0.08262 lineto
0.13228 0.0758 lineto
0.15146 0.07061 lineto
0.17063 0.06652 lineto
0.20899 0.06047 lineto
0.24735 0.0562 lineto
0.28571 0.053 lineto
0.32407 0.0505 lineto
0.36243 0.04849 lineto
0.40079 0.04683 lineto
0.43915 0.04543 lineto
0.47751 0.04423 lineto
0.51587 0.04318 lineto
0.55423 0.04226 lineto
0.59259 0.04143 lineto
0.63095 0.04069 lineto
0.66931 0.04002 lineto
0.70767 0.03941 lineto
0.74603 0.03885 lineto
0.78439 0.03833 lineto
0.82275 0.03785 lineto
0.86111 0.0374 lineto
0.89947 0.03698 lineto
0.93783 0.03659 lineto
0.97619 0.03622 lineto
stroke
grestore
grestore
grestore
% End of Graphics
MathPictureEnd
%%EPS Trailer
end

%%EndDocument
 GE 1085 1000 270 52533 69596 GB 
%%BeginDocument: /usr0/rozzi/Documentation/PhDThesis/Chapter2/tb43.eps
%!PS-Adobe-2.0 EPSF-1.2
%%BoundingBox: 0 0 282 176
%%Creator: Mathematica
%%Title: Clipboard
%%CreationDate: Never Never
%%EndComments
50 dict begin
/Mnodistort true def
/pageDashArray [4] def
/nullDashArray [] def

% Compute the minimum of two numbers.
/Mmin {         % p q Mmin min(p,q)
        2 copy          % p q p q
        gt              % p q p>q?
        { exch } if     % min(p,q) max(p,q)
        pop             % min(p,q)
} bind def


% Compute the maximum of two numbers.
/Mmax {         % p q Mmax max(p,q)
        2 copy          % p q p q
        lt              % p q p<q?
        { exch } if     % max(p,q) min(p,q)
        pop             % max(p,q)
} bind def

/Mpstart {
    MathPictureStart
} bind def
/Mpend {
    MathPictureEnd
} bind def
/Mscale {
    0 1 0 1
    5 -1 roll
    MathScale
} bind def
/Plain
        /Courier findfont
def
/Bold
        /Courier-Bold findfont
def
/Italic
        /Courier-Oblique findfont
def
/MathPictureStart {
        gsave
        newpath
        /Mtmatrix
        matrix currentmatrix
        def
        Plain
        Mfontsize scalefont
        setfont
0 setgray 0 setlinewidth
} bind def
/MathPictureEnd {
        grestore
} bind def
/Mdot {
        moveto
        0 0 rlineto
        stroke
} def
/Mtetra {
        moveto
        lineto
        lineto
        lineto
        fill
} def
/Metetra {
        moveto
        lineto
        lineto
        lineto
        closepath
        gsave
        fill
        grestore
        0 setgray
        stroke
} def
/Mistroke {
        flattenpath
        0 0 0
        {
        4 2 roll
        pop pop
        }
        {
        4 -1 roll
        2 index
        sub dup mul
        4 -1 roll
        2 index
        sub dup mul
        add sqrt
        4 -1 roll
        add
        3 1 roll
        }
        {
        stop
        }
        {
        stop
        }
        pathforall
        pop pop
        currentpoint
        stroke
        moveto
        currentdash
        3 -1 roll
        add
        setdash
} def
/Mfstroke {
        stroke
        currentdash
        pop 0
        setdash
} def
/Msboxa {
        newpath
        5 -1 roll
        Mvboxa
        pop
        6 -1 roll
        5 -1 roll
        4 -1 roll
        Msboxa1
        5 -3 roll
        Msboxa1
        [
        7 -2 roll
        [ 2 index 2 index
        10 -1 roll
        9 -1 roll
        ]
        6 1 roll
        5 -2 roll
        ]
} bind def
        
/Msboxa1 {
        sub
        2 div
        dup
        2 index
        1 add
        mul
        3 -1 roll
        -1 add
        3 -1 roll
        mul
} bind def
/Mvboxa {
        gsave
        newpath
        [ true
        3 -1 roll
        {
        Mbbox
        5 -1 roll
        {
        0
        5 1 roll
        }
        {
        7 -1 roll
        exch sub
        (m) stringwidth pop
        .3 mul
        sub
        7 1 roll
        6 -1 roll
        4 -1 roll
        Mmin
        3 -1 roll
        5 index
        add
        5 -1 roll
        4 -1 roll
        Mmax
        4 -1 roll
        }
        ifelse
        false
        }
        forall
        { stop } if
        counttomark
        1 add
        4 roll
        ]
        grestore
} bind def
/Mbbox {
        0 0 moveto
        false charpath
        flattenpath
        pathbbox
        newpath
} bind def
/Mmin {
        2 copy
        gt
        { exch } if
        pop
} bind def
/Mmax {
        2 copy
        lt
        { exch } if
        pop
} bind def
/Mshowa {
        4 -2 roll
        moveto
        2 index
        Mtmatrix setmatrix
        Mvboxa
        7 1 roll
        6 -1 roll
        5 -1 roll
        4 -1 roll
        Mshowa1
        4 1 roll
        Mshowa1
        rmoveto
        currentpoint
        0 1
        4 index length
        -1 add
        {
        2 index
        4 index
        2 index
        get
        3 index
        add
        moveto
        4 index
        exch get
        show
        } for
        pop pop pop pop
        Mgmatrix setmatrix
} bind def
/Mshowa1 {
        2 copy
        add
        4 1 roll
        sub
        mul
        sub
        -2 div
} bind def
/MathScale {
        Mwidth
        Mheight
        Mlp
        translate
        scale
        /Mgmatrix
        matrix currentmatrix
        def
        /Msaveaa exch def
        /Msavebb exch def
        /Msavecc exch def
        /Msavedd exch def
} bind def
/Mlp {
        3 copy
        Mlpfirst
        {
        Mnodistort
        {
        Mmin
        dup
        } if
        4 index
        2 index
        2 index
        Mlprun
        11 index
        11 -1 roll
        10 -4 roll
        Mlp1
        8 index
        9 -5 roll
        Mlp1
        4 -1 roll
        and
        { exit } if
        3 -1 roll
        pop pop
        } loop
        exch
        3 1 roll
        7 -3 roll
        pop pop pop
} bind def
/Mlpfirst {
        3 -1 roll
        dup length
        2 copy
        -2 add
        get
        aload
        pop pop pop
        4 -2 roll
        -1 add
        get
        aload
        pop pop pop
        6 -1 roll
        3 -1 roll
        5 -1 roll
        sub
        dup /MsaveAx exch def
        div
        4 1 roll
        exch sub
        dup /MsaveAy exch def
        div
} bind def
/Mlprun {
        2 copy
        4 index
        0 get
        dup
        4 1 roll
        Mlprun1
        3 copy
        8 -2 roll
        9 -1 roll
        {
        3 copy
        Mlprun1
        3 copy
        11 -3 roll
        /gt Mlpminmax
        8 3 roll
        11 -3 roll
        /lt Mlpminmax
        8 3 roll
        } forall
        pop pop pop pop
        3 1 roll
        pop pop
        aload pop
        5 -1 roll
        aload pop
        exch
        6 -1 roll
        Mlprun2
        8 2 roll
        4 -1 roll
        Mlprun2
        6 2 roll
        3 -1 roll
        Mlprun2
        4 2 roll
        exch
        Mlprun2
        6 2 roll
} bind def
/Mlprun1 {
        aload pop
        exch
        6 -1 roll
        5 -1 roll
        mul add
        4 -2 roll
        mul
        3 -1 roll
        add
} bind def
/Mlprun2 {
        2 copy
        add 2 div
        3 1 roll
        exch sub
} bind def
/Mlpminmax {
        cvx
        2 index
        6 index
        2 index
        exec
        {
        7 -3 roll
        4 -1 roll
        } if
        1 index
        5 index
        3 -1 roll
        exec
        {
        4 1 roll
        pop
        5 -1 roll
        aload
        pop pop
        4 -1 roll
        aload pop
        [
        8 -2 roll
        pop
        5 -2 roll
        pop
        6 -2 roll
        pop
        5 -1 roll
        ]
        4 1 roll
        pop
        }
        {
        pop pop pop
        } ifelse
} bind def
/Mlp1 {
        5 index
        3 index sub
        5 index
        2 index mul
        1 index
        le
        1 index
        0 le
        or
        dup
        not
        {
        1 index
        3 index div
        .99999 mul
        8 -1 roll
        pop
        7 1 roll
        }
        if
        8 -1 roll
        2 div
        7 -2 roll
        pop sub
        5 index
        6 -3 roll
        pop pop
        mul sub
        exch
} bind def
/Mfontsize      12 def
/Mleft          0.000000 def
/Mbottom        176.000000 def
/Mwidth         282.000000 def
/Mheight        176.000000 def
/Courier findfont 12 scalefont setfont
%!
%%Creator: Mathematica
%%AspectRatio: 0.625 
MathPictureStart
% Scaling calculations
0.02381 0.03175 0.01488 0.36724 [
[(d=1.0, b=0.43, p=0.9)] 0.5 0.63125 0 -1 Msboxa
[(5)] 0.18254 0.00238 0 1 Msboxa
[(10)] 0.34127 0.00238 0 1 Msboxa
[(15)] 0.5 0.00238 0 1 Msboxa
[(20)] 0.65873 0.00238 0 1 Msboxa
[(25)] 0.81746 0.00238 0 1 Msboxa
[(30)] 0.97619 0.00238 0 1 Msboxa
[(n)] 1.00625 0.01488 -1 0 Msboxa
[(0.25)] 0.01131 0.10669 1 0 Msboxa
[(0.5)] 0.01131 0.1985 1 0 Msboxa
[(0.75)] 0.01131 0.29031 1 0 Msboxa
[(1)] 0.01131 0.38212 1 0 Msboxa
[(1.25)] 0.01131 0.47393 1 0 Msboxa
[(1.5)] 0.01131 0.56574 1 0 Msboxa
[(MSE)] 0.02381 0.63125 0 -1 Msboxa
[ -0.001 -0.001 0 0 ]
[ 1.001 0.626 0 0 ]
] MathScale
% Start of Graphics
1 setlinecap
1 setlinejoin
newpath
%%Object: Graphics
[ ] 0 setdash
0 setgray
0 setgray
%[(d=1.0, b=0.43, p=0.9)] 0.5 0.63125 0 -1 Mshowa
gsave
gsave
0.002 setlinewidth
0 0.01488 moveto
1 0.01488 lineto
stroke
0.18254 0.00863 moveto
0.18254 0.02113 lineto
stroke
0 setgray
[(5)] 0.18254 0.00238 0 1 Mshowa
0.34127 0.00863 moveto
0.34127 0.02113 lineto
stroke
0 setgray
[(10)] 0.34127 0.00238 0 1 Mshowa
0.5 0.00863 moveto
0.5 0.02113 lineto
stroke
0 setgray
[(15)] 0.5 0.00238 0 1 Mshowa
0.65873 0.00863 moveto
0.65873 0.02113 lineto
stroke
0 setgray
[(20)] 0.65873 0.00238 0 1 Mshowa
0.81746 0.00863 moveto
0.81746 0.02113 lineto
stroke
0 setgray
[(25)] 0.81746 0.00238 0 1 Mshowa
0.97619 0.00863 moveto
0.97619 0.02113 lineto
stroke
0 setgray
[(30)] 0.97619 0.00238 0 1 Mshowa
0 setgray
[(k)] 1.00625 0.01488 -1 0 Mshowa
0.02381 0 moveto
0.02381 0.625 lineto
stroke
0.01756 0.10669 moveto
0.03006 0.10669 lineto
stroke
0 setgray
[(0.25)] 0.01131 0.10669 1 0 Mshowa
0.01756 0.1985 moveto
0.03006 0.1985 lineto
stroke
0 setgray
[(0.5)] 0.01131 0.1985 1 0 Mshowa
0.01756 0.29031 moveto
0.03006 0.29031 lineto
stroke
0 setgray
[(0.75)] 0.01131 0.29031 1 0 Mshowa
0.01756 0.38212 moveto
0.03006 0.38212 lineto
stroke
0 setgray
[(1)] 0.01131 0.38212 1 0 Mshowa
0.01756 0.47393 moveto
0.03006 0.47393 lineto
stroke
0 setgray
[(1.25)] 0.01131 0.47393 1 0 Mshowa
0.01756 0.56574 moveto
0.03006 0.56574 lineto
stroke
0 setgray
[(1.5)] 0.01131 0.56574 1 0 Mshowa
0 setgray
[(MSE)] 0.02381 0.63125 0 -1 Mshowa
grestore
grestore
[(\(c\))] 0.7 0.53125 0 -1 Mshowa

0 0 moveto
1 0 lineto
1 0.625 lineto
0 0.625 lineto
closepath
clip
newpath
0 setgray
gsave
gsave
0.33 setgray
gsave
0.005 setlinewidth
0.05556 0.34703 moveto
0.06515 0.30296 lineto
0.07474 0.27016 lineto
0.08433 0.24474 lineto
0.09392 0.22444 lineto
0.1131 0.19397 lineto
0.13228 0.17211 lineto
0.15146 0.1556 lineto
0.17063 0.14263 lineto
0.20899 0.12349 lineto
0.24735 0.10992 lineto
0.28571 0.09973 lineto
0.32407 0.09174 lineto
0.36243 0.08529 lineto
0.40079 0.07994 lineto
0.43915 0.07542 lineto
0.47751 0.07155 lineto
0.51587 0.06818 lineto
0.55423 0.06523 lineto
0.59259 0.06261 lineto
0.63095 0.06026 lineto
0.66931 0.05816 lineto
0.70767 0.05625 lineto
0.74603 0.05451 lineto
0.78439 0.05292 lineto
0.82275 0.05146 lineto
0.86111 0.05011 lineto
0.89947 0.04886 lineto
0.93783 0.0477 lineto
0.97619 0.04663 lineto
stroke
grestore
grestore
gsave
0.67 setgray
gsave
0.005 setlinewidth
0.05556 1.23616 moveto
0.06035 1.0759 lineto
0.06515 0.95282 lineto
0.06994 0.85533 lineto
0.07474 0.7762 lineto
0.08433 0.65555 lineto
0.09392 0.56791 lineto
0.10351 0.50136 lineto
0.1131 0.44911 lineto
0.12269 0.407 lineto
0.13228 0.37233 lineto
0.15146 0.31862 lineto
0.17063 0.27894 lineto
0.18981 0.24843 lineto
0.20899 0.22424 lineto
0.24735 0.18832 lineto
0.28571 0.16291 lineto
0.32407 0.144 lineto
0.36243 0.12938 lineto
0.40079 0.11773 lineto
0.43915 0.10823 lineto
0.47751 0.10033 lineto
0.51587 0.09367 lineto
0.55423 0.08797 lineto
0.59259 0.08305 lineto
0.63095 0.07874 lineto
0.66931 0.07494 lineto
0.70767 0.07157 lineto
0.74603 0.06856 lineto
0.78439 0.06586 lineto
0.82275 0.06341 lineto
0.86111 0.06119 lineto
0.89947 0.05916 lineto
0.93783 0.0573 lineto
0.97619 0.05559 lineto
stroke
grestore
grestore
gsave
%[ 0.05 0.03 ] 0 setdash
0 setgray
gsave
0.005 setlinewidth
0.05556 0.35112 moveto
0.06515 0.30706 lineto
0.07474 0.27425 lineto
0.08433 0.24884 lineto
0.09392 0.22854 lineto
0.1131 0.19807 lineto
0.13228 0.17621 lineto
0.15146 0.15969 lineto
0.17063 0.14673 lineto
0.20899 0.12759 lineto
0.24735 0.11402 lineto
0.28571 0.10383 lineto
0.32407 0.09584 lineto
0.36243 0.08938 lineto
0.40079 0.08404 lineto
0.43915 0.07952 lineto
0.47751 0.07565 lineto
0.51587 0.07228 lineto
0.55423 0.06933 lineto
0.59259 0.0667 lineto
0.63095 0.06436 lineto
0.66931 0.06225 lineto
0.70767 0.06034 lineto
0.74603 0.05861 lineto
0.78439 0.05702 lineto
0.82275 0.05555 lineto
0.86111 0.05421 lineto
0.89947 0.05296 lineto
0.93783 0.0518 lineto
0.97619 0.05072 lineto
stroke
grestore
grestore
grestore
% End of Graphics
MathPictureEnd
%%EPS Trailer
end

%%EndDocument
 GE /Times-Bold SF
15891 71348 MT
(Figure 2-12:)SH
/Times-Roman SF
22214 XM
(Mean-square error as specified by Equation \0502.61\051 vs. number of)SH
22966 72544 MT
(samples with skew as a parameter.  Values of)SH
/Symbol SF
43246 XM
(q)SH
/Times-Roman SF
44094 XM
(are \050a\051 0.053,)SH
29650 73740 MT
(\050b\051 0.176, \050c\051 0.43, and \050d\051 1.0.)SH
ES
%%Page: 36 37
BS
0 SI
10 /Times-Roman AF
54800 4286 MT
(36)SH
11 SS 
900 1000 0 15300 29700 GB 
%%BeginDocument: /usr0/rozzi/Documentation/PhDThesis/Chapter2/Misadjustment.eps
%!PS-Adobe-2.0 EPSF-1.2
%%BoundingBox: 0 0 400 250
%%Creator: Mathematica
%%Title: Clipboard
%%CreationDate: Never Never
%%EndComments
50 dict begin
/Mnodistort false def
/pageDashArray [4] def
/nullDashArray [] def

% Compute the minimum of two numbers.
/Mmin {         % p q Mmin min(p,q)
        2 copy          % p q p q
        gt              % p q p>q?
        { exch } if     % min(p,q) max(p,q)
        pop             % min(p,q)
} bind def


% Compute the maximum of two numbers.
/Mmax {         % p q Mmax max(p,q)
        2 copy          % p q p q
        lt              % p q p<q?
        { exch } if     % max(p,q) min(p,q)
        pop             % max(p,q)
} bind def

/Mpstart {
    MathPictureStart
} bind def
/Mpend {
    MathPictureEnd
} bind def
/Mscale {
    0 1 0 1
    5 -1 roll
    MathScale
} bind def
/Plain
        /Courier findfont
def
/Bold
        /Courier-Bold findfont
def
/Italic
        /Courier-Oblique findfont
def
/MathPictureStart {
        gsave
        newpath
        /Mtmatrix
        matrix currentmatrix
        def
        Plain
        Mfontsize scalefont
        setfont
0 setgray 0 setlinewidth
} bind def
/MathPictureEnd {
        grestore
} bind def
/Mdot {
        moveto
        0 0 rlineto
        stroke
} def
/Mtetra {
        moveto
        lineto
        lineto
        lineto
        fill
} def
/Metetra {
        moveto
        lineto
        lineto
        lineto
        closepath
        gsave
        fill
        grestore
        0 setgray
        stroke
} def
/Mistroke {
        flattenpath
        0 0 0
        {
        4 2 roll
        pop pop
        }
        {
        4 -1 roll
        2 index
        sub dup mul
        4 -1 roll
        2 index
        sub dup mul
        add sqrt
        4 -1 roll
        add
        3 1 roll
        }
        {
        stop
        }
        {
        stop
        }
        pathforall
        pop pop
        currentpoint
        stroke
        moveto
        currentdash
        3 -1 roll
        add
        setdash
} def
/Mfstroke {
        stroke
        currentdash
        pop 0
        setdash
} def
/Msboxa {
        newpath
        5 -1 roll
        Mvboxa
        pop
        6 -1 roll
        5 -1 roll
        4 -1 roll
        Msboxa1
        5 -3 roll
        Msboxa1
        [
        7 -2 roll
        [ 2 index 2 index
        10 -1 roll
        9 -1 roll
        ]
        6 1 roll
        5 -2 roll
        ]
} bind def
        
/Msboxa1 {
        sub
        2 div
        dup
        2 index
        1 add
        mul
        3 -1 roll
        -1 add
        3 -1 roll
        mul
} bind def
/Mvboxa {
        gsave
        newpath
        [ true
        3 -1 roll
        {
        Mbbox
        5 -1 roll
        {
        0
        5 1 roll
        }
        {
        7 -1 roll
        exch sub
        (m) stringwidth pop
        .3 mul
        sub
        7 1 roll
        6 -1 roll
        4 -1 roll
        Mmin
        3 -1 roll
        5 index
        add
        5 -1 roll
        4 -1 roll
        Mmax
        4 -1 roll
        }
        ifelse
        false
        }
        forall
        { stop } if
        counttomark
        1 add
        4 roll
        ]
        grestore
} bind def
/Mbbox {
        0 0 moveto
        false charpath
        flattenpath
        pathbbox
        newpath
} bind def
/Mmin {
        2 copy
        gt
        { exch } if
        pop
} bind def
/Mmax {
        2 copy
        lt
        { exch } if
        pop
} bind def
/Mshowa {
        4 -2 roll
        moveto
        2 index
        Mtmatrix setmatrix
        Mvboxa
        7 1 roll
        6 -1 roll
        5 -1 roll
        4 -1 roll
        Mshowa1
        4 1 roll
        Mshowa1
        rmoveto
        currentpoint
        0 1
        4 index length
        -1 add
        {
        2 index
        4 index
        2 index
        get
        3 index
        add
        moveto
        4 index
        exch get
        show
        } for
        pop pop pop pop
        Mgmatrix setmatrix
} bind def
/Mshowa1 {
        2 copy
        add
        4 1 roll
        sub
        mul
        sub
        -2 div
} bind def
/MathScale {
        Mwidth
        Mheight
        Mlp
        translate
        scale
        /Mgmatrix
        matrix currentmatrix
        def
        /Msaveaa exch def
        /Msavebb exch def
        /Msavecc exch def
        /Msavedd exch def
} bind def
/Mlp {
        3 copy
        Mlpfirst
        {
        Mnodistort
        {
        Mmin
        dup
        } if
        4 index
        2 index
        2 index
        Mlprun
        11 index
        11 -1 roll
        10 -4 roll
        Mlp1
        8 index
        9 -5 roll
        Mlp1
        4 -1 roll
        and
        { exit } if
        3 -1 roll
        pop pop
        } loop
        exch
        3 1 roll
        7 -3 roll
        pop pop pop
} bind def
/Mlpfirst {
        3 -1 roll
        dup length
        2 copy
        -2 add
        get
        aload
        pop pop pop
        4 -2 roll
        -1 add
        get
        aload
        pop pop pop
        6 -1 roll
        3 -1 roll
        5 -1 roll
        sub
        dup /MsaveAx exch def
        div
        4 1 roll
        exch sub
        dup /MsaveAy exch def
        div
} bind def
/Mlprun {
        2 copy
        4 index
        0 get
        dup
        4 1 roll
        Mlprun1
        3 copy
        8 -2 roll
        9 -1 roll
        {
        3 copy
        Mlprun1
        3 copy
        11 -3 roll
        /gt Mlpminmax
        8 3 roll
        11 -3 roll
        /lt Mlpminmax
        8 3 roll
        } forall
        pop pop pop pop
        3 1 roll
        pop pop
        aload pop
        5 -1 roll
        aload pop
        exch
        6 -1 roll
        Mlprun2
        8 2 roll
        4 -1 roll
        Mlprun2
        6 2 roll
        3 -1 roll
        Mlprun2
        4 2 roll
        exch
        Mlprun2
        6 2 roll
} bind def
/Mlprun1 {
        aload pop
        exch
        6 -1 roll
        5 -1 roll
        mul add
        4 -2 roll
        mul
        3 -1 roll
        add
} bind def
/Mlprun2 {
        2 copy
        add 2 div
        3 1 roll
        exch sub
} bind def
/Mlpminmax {
        cvx
        2 index
        6 index
        2 index
        exec
        {
        7 -3 roll
        4 -1 roll
        } if
        1 index
        5 index
        3 -1 roll
        exec
        {
        4 1 roll
        pop
        5 -1 roll
        aload
        pop pop
        4 -1 roll
        aload pop
        [
        8 -2 roll
        pop
        5 -2 roll
        pop
        6 -2 roll
        pop
        5 -1 roll
        ]
        4 1 roll
        pop
        }
        {
        pop pop pop
        } ifelse
} bind def
/Mlp1 {
        5 index
        3 index sub
        5 index
        2 index mul
        1 index
        le
        1 index
        0 le
        or
        dup
        not
        {
        1 index
        3 index div
        .99999 mul
        8 -1 roll
        pop
        7 1 roll
        }
        if
        8 -1 roll
        2 div
        7 -2 roll
        pop sub
        5 index
        6 -3 roll
        pop pop
        mul sub
        exch
} bind def
/Mfontsize      12 def
/Mleft          0.000000 def
/Mbottom        250.000000 def
/Mwidth         400.000000 def
/Mheight        250.000000 def
/Courier findfont 12 scalefont setfont
%!
%%Creator: Mathematica
%%AspectRatio: 0.625 
MathPictureStart
% Scaling calculations
0.02381 0.03175 0.01488 2.78522 [
[(d=1, b=1, p=0.9)] 0.5 0.63125 0 -1 Msboxa
[(5)] 0.18254 0.00238 0 1 Msboxa
[(10)] 0.34127 0.00238 0 1 Msboxa
[(15)] 0.5 0.00238 0 1 Msboxa
[(20)] 0.65873 0.00238 0 1 Msboxa
[(25)] 0.81746 0.00238 0 1 Msboxa
[(30)] 0.97619 0.00238 0 1 Msboxa
[(n)] 1.00625 0.01488 -1 0 Msboxa
[(0.05)] 0.01131 0.15414 1 0 Msboxa
[(0.1)] 0.01131 0.2934 1 0 Msboxa
[(0.15)] 0.01131 0.43266 1 0 Msboxa
[(0.2)] 0.01131 0.57193 1 0 Msboxa
[(MSE)] 0.02381 0.63125 0 -1 Msboxa
[ -0.001 -0.001 0 0 ]
[ 1.001 0.626 0 0 ]
] MathScale
% Start of Graphics
1 setlinecap
1 setlinejoin
newpath
%%Object: Graphics
[ ] 0 setdash
0 setgray
0 setgray
%[(d=1, b=1, p=0.9)] 0.5 0.53125 0 -1 Mshowa
[(Misadjustment)] 0.5 0.53125 0 -1 Mshowa
gsave
gsave
0.002 setlinewidth
0 0.01488 moveto
1 0.01488 lineto
stroke
0.18254 0.00863 moveto
0.18254 0.02113 lineto
stroke
0 setgray
[(5)] 0.18254 0.00238 0 1 Mshowa
0.34127 0.00863 moveto
0.34127 0.02113 lineto
stroke
0 setgray
[(10)] 0.34127 0.00238 0 1 Mshowa
0.5 0.00863 moveto
0.5 0.02113 lineto
stroke
0 setgray
[(15)] 0.5 0.00238 0 1 Mshowa
0.65873 0.00863 moveto
0.65873 0.02113 lineto
stroke
0 setgray
[(20)] 0.65873 0.00238 0 1 Mshowa
0.81746 0.00863 moveto
0.81746 0.02113 lineto
stroke
0 setgray
[(25)] 0.81746 0.00238 0 1 Mshowa
0.97619 0.00863 moveto
0.97619 0.02113 lineto
stroke
0 setgray
[(30)] 0.97619 0.00238 0 1 Mshowa
0 setgray
/Symbol findfont 12 scalefont setfont
[(h)] 1.00625 0.01488 -1 0 Mshowa
/Courier findfont 12 scalefont setfont
0.02381 0 moveto
0.02381 0.625 lineto
stroke
0.01756 0.15414 moveto
0.03006 0.15414 lineto
stroke
0 setgray
[(0.05)] 0.01131 0.15414 1 0 Mshowa
0.01756 0.2934 moveto
0.03006 0.2934 lineto
stroke
0 setgray
[(0.10)] 0.01131 0.2934 1 0 Mshowa
0.01756 0.43266 moveto
0.03006 0.43266 lineto
stroke
0 setgray
[(0.15)] 0.01131 0.43266 1 0 Mshowa
0.01756 0.57193 moveto
0.03006 0.57193 lineto
stroke
0 setgray
[(0.20)] 0.01131 0.57193 1 0 Mshowa
0 setgray
[(MSE)] 0.010381 0.63125 0 -1 Mshowa
grestore
grestore
0 0 moveto
1 0 lineto
1 0.625 lineto
0 0.625 lineto
closepath
clip
newpath
0 setgray
gsave
gsave
gsave
gsave
0.0 setgray
gsave
0.005 setlinewidth
0.05556 0.33717 moveto
0.06035 0.29426 lineto
0.06515 0.26108 lineto
0.06994 0.2348 lineto
0.07474 0.21356 lineto
0.08433 0.18146 lineto
0.09392 0.15847 lineto
0.10351 0.14123 lineto
0.1131 0.12782 lineto
0.12269 0.11708 lineto
0.13228 0.10826 lineto
0.15146 0.0946 lineto
0.17063 0.08443 lineto
0.18981 0.07651 lineto
0.20899 0.07014 lineto
0.24735 0.06044 lineto
0.28571 0.05338 lineto
0.32407 0.04798 lineto
0.36243 0.04372 lineto
0.40079 0.04028 lineto
0.43915 0.03745 lineto
0.47751 0.03508 lineto
0.51587 0.03308 lineto
0.55423 0.03137 lineto
0.59259 0.0299 lineto
0.63095 0.02862 lineto
0.66931 0.0275 lineto
0.70767 0.02651 lineto
0.74603 0.02563 lineto
0.78439 0.02486 lineto
0.82275 0.02416 lineto
0.86111 0.02353 lineto
0.89947 0.02297 lineto
0.93783 0.02246 lineto
0.97619 0.022 lineto
stroke
grestore
grestore
gsave
%[ 0.05 0.03 ] 0 setdash
0.33 setgray
gsave
0.005 setlinewidth
0.05556 0.87431 moveto
0.06035 0.75989 lineto
0.06515 0.67142 lineto
0.06994 0.60134 lineto
0.07474 0.54468 lineto
0.08433 0.45909 lineto
0.09392 0.39778 lineto
0.10351 0.3518 lineto
0.1131 0.31604 lineto
0.12269 0.2874 lineto
0.13228 0.2639 lineto
0.15146 0.22746 lineto
0.17063 0.20034 lineto
0.18981 0.17922 lineto
0.20899 0.16223 lineto
0.24735 0.13638 lineto
0.28571 0.11754 lineto
0.32407 0.10315 lineto
0.36243 0.09179 lineto
0.40079 0.08262 lineto
0.43915 0.07507 lineto
0.47751 0.06876 lineto
0.51587 0.06342 lineto
0.55423 0.05886 lineto
0.59259 0.05493 lineto
0.63095 0.05151 lineto
0.66931 0.04852 lineto
0.70767 0.04589 lineto
0.74603 0.04355 lineto
0.78439 0.04148 lineto
0.82275 0.03962 lineto
0.86111 0.03796 lineto
0.89947 0.03645 lineto
0.93783 0.0351 lineto
0.97619 0.03386 lineto
stroke
grestore
grestore
grestore
grestore
gsave
gsave
0 setgray
[(LMS-C)] 0.0873 0.07059 0 0 Mshowa
0 setgray
[(CEMAP)] 0.2619 0.22377 0 0 Mshowa
grestore
grestore
grestore
% End of Graphics
MathPictureEnd
%%EPS Trailer
end

%%EndDocument
 GE /Times-Bold SF
13338 31452 MT
(Figure 2-13:)SH
/Times-Roman SF
19661 XM
(Theoretical LMS-C and CEMAP misadjustment for a 2-class, 1-feature case)SH
26550 32648 MT
(as a function of)SH
/Symbol SF
33636 XM
(h)SH
/Times-Roman SF
(, with)SH
/Symbol SF
37080 XM
(d)SH
/Times-Roman SF
(=1,)SH
/Symbol SF
39343 XM
(q)SH
/Times-Roman SF
(=1, and)SH
/Symbol SF
43499 XM
(r)SH
/Times-Roman SF
(=0.9.)SH
/Times-Bold SF
10800 34581 MT
(2.8.1.2. CEMAP and LMS-C Misadjustment)SH
/Times-Roman SF
13300 37136 MT
(As mentioned in Section 2.7, the parameter)95 W
/Symbol SF
33302 XM
(h)SH
/Times-Roman SF
34334 XM
(controls the misadjustment in both the CEMAP)94 W
10800 38875 MT
(and LMS-C algorithms.  The constant matrix)204 W
/Times-Bold SF
32332 XM
(N)SH
/Times-Roman SF
33526 XM
(, which was defined as)204 W
/Symbol SF
44808 XM
(h)SH
/Times-Bold SF
(I)SH
/Times-Roman SF
(, controls the relative)205 W
9 /Times-Italic AF
33126 39235 MT
(c)SH
11 /Times-Roman AF
10800 40614 MT
(weighting between the observations and)1 W
/Symbol SF
28736 XM
(m)SH
/Times-Roman SF
30096 XM
(in the CEMAP estimate)1 W
/Times-Bold SF
40856 XM
(d)SH
/Times-Roman SF
(. As)
277 W( more)
1 W( weight is given to the)SH
9 /Times-Italic AF
29370 40974 MT
(o)SH
11 /Times-Roman AF
10800 42353 MT
(constant)SH
/Symbol SF
14799 XM
(m)SH
/Times-Roman SF
16216 XM
(\050by lowering)59 W
/Symbol SF
22260 XM
(h)SH
/Times-Roman SF
23257 XM
(or)SH
/Times-Bold SF
24507 XM
(N)SH
/Times-Roman SF
25701 XM
(\051, the misadjustment increases since the CEMAP \050and therefore the)59 W
9 /Times-Italic AF
15433 42713 MT
(o)SH
25301 XM
(c)SH
11 /Times-Roman AF
10800 44092 MT
(LMS-C\051 estimates are driven)
168 W( toward this constant value and cannot converge to the observations.)167 W
10800 45831 MT
(Figure 2-13)
185 W( shows the relationship between)186 W
/Symbol SF
31405 XM
(h)SH
/Times-Roman SF
32529 XM
(and misadjustment.  The LMS-C misadjustment is)186 W
9 SS 
44344 47207 MT
(2)SH
11 SS 
10800 47570 MT
(smaller because the LMS-C algorithm weights the CEMAP estimate)
132 W( by)131 W
/Symbol SF
43892 XM
(g)SH
/Times-Roman SF
45200 XM
(\050see \0502.59\051\051.  The scale)131 W
10800 49309 MT
(factor)SH
/Symbol SF
13742 XM
(g)SH
/Times-Roman SF
14572 XM
(has some dependence)
103 W( on)104 W
/Symbol SF
26164 XM
(m)SH
/Times-Roman SF
27248 XM
(, but this dependence decreases with decreasing)104 W
/Symbol SF
49232 XM
(d)SH
/Times-Roman SF
50154 XM
(and is negli-)104 W
9 /Times-Italic AF
26798 49669 MT
(o)SH
11 /Times-Roman AF
10800 51048 MT
(gible.)SH
13300 54033 MT
(While it is best from a misadjustment standpoint to make)24 W
/Symbol SF
38962 XM
(h)SH
/Times-Roman SF
39924 XM
(large, doing)
24 W( so greatly increases the)23 W
10800 55772 MT
(contribution of)48 W
/Symbol SF
17740 XM
(m)SH
/Times-Roman SF
19147 XM
(in)SH
/Times-Bold SF
20326 XM
(d)SH
/Times-Roman SF
(. Since)
371 W( giving more weight)
48 W( to the sample mean increases the initial error \050see)49 W
9 /Times-Italic AF
18374 56132 MT
(o)SH
11 /Times-Roman AF
10800 57511 MT
(Figure 2-5\051, it)
54 W( is necessary to strike a balance between these two effects.  Empirical tests or trial and)53 W
10800 59250 MT
(error are necessary to determine optimal values of)SH
/Symbol SF
33094 XM
(h)SH
/Times-Roman SF
(.)SH
12 /Times-Bold AF
10800 62934 MT
(2.8.2. Empirical Analysis)SH
11 /Times-Roman AF
13300 65849 MT
(The empirical learning curves presented in)
151 W( this section are plots of the averaged ratio of the)152 W
10800 67588 MT
(squared magnitudes of the error vector to the mean vector)SH
8 /Symbol AF
21821 69125 MT
(\331)SH
9 /Times-Roman AF
26001 69452 MT
(2)SH
8 /Times-Italic AF
20438 69650 MT
(T)SH
11 /Symbol AF
21381 69815 MT
(||m)SH
/Times-Roman SF
22553 XM
(\050)SH
/Times-Italic SF
(k)SH
/Times-Roman SF
(\051)SH
/Symbol SF
23923 XM
(-)
150 MX(m)SH
25561 XM
(||)SH
/Times-Roman SF
19509 70119 MT
(1)SH
9 /Times-Italic AF
22303 70175 MT
(i)SH
25311 XM
(i)SH
612 50 19478 70560 UL
5070 50 21381 70560 UL
11 SS 
15200 70805 MT
(MSE)SH
/Times-Roman SF
(\050)SH
/Times-Italic SF
(k)SH
/Times-Roman SF
(\051)
150 MX(=)SH
53143 XM
(\0502.62\051)SH
16 /Symbol AF
20090 71105 MT
(\345)SH
9 /Times-Roman AF
24573 71418 MT
(2)SH
11 /Times-Italic AF
19478 71556 MT
(T)SH
/Symbol SF
22809 71781 MT
(||m)SH
24133 XM
(||)SH
8 /Times-Italic AF
20124 71899 MT
(i)SH
/Times-Roman SF
(=1)SH
9 /Times-Italic AF
23883 72141 MT
(i)SH
ES
%%Page: 37 38
BS
0 SI
10 /Times-Roman AF
54800 4286 MT
(37)SH
9 SS 
46975 7817 MT
(th)SH
11 SS 
10800 8180 MT
(where T is the number of trials over which the results are averaged, and)17 W
/Symbol SF
42831 XM
(m)SH
/Times-Roman SF
44007 XM
(is the)17 W
/Times-Italic SF
46669 XM
(i)SH
/Times-Roman SF
47675 XM
(-trial mean vector.)16 W
9 /Times-Italic AF
43465 8540 MT
(i)SH
11 /Times-Roman AF
10800 9919 MT
(This form of normalization, combined with the)
47 W( fact that random mean vectors are generated for each)48 W
10800 11658 MT
(trial, has the)
61 W( effect of varying the vertical scale on the learning curves between experiments.  There-)60 W
10800 13397 MT
(fore, empirical)
218 W( analysis compares the relative reduction in MSE between algorithms and not the)219 W
10800 15136 MT
(absolute error.)SH
13300 18121 MT
(Each trial consists of a simulation of the observations that would)
182 W( be produced from several)181 W
10800 19860 MT
(decision classes for a)
47 W( single hypothetical speaker.  The "speaker's" mean vectors for a given trial are)48 W
10800 21599 MT
(first generated by performing a Cholesky decomposition of)87 W
/Symbol SF
37828 XM
(S)SH
/Times-Roman SF
38929 XM
(, generating a)
87 W( CD-dimensional vector)86 W
9 /Times-Italic AF
38479 21959 MT
(o)SH
11 /Times-Roman AF
10800 23338 MT
(of)SH
/Times-Italic SF
12195 XM
(N)SH
/Times-Roman SF
(\0500,1\051 i.i.d. random deviates, and multiplying this)
204 W( vector by the decomposed upper triangular)205 W
10800 25077 MT
(matrix. Adding)385 W
/Symbol SF
18237 XM
(m)SH
/Times-Roman SF
19651 XM
(to this product produced)
55 W( a vector with the desired probability density function of)54 W
9 /Times-Italic AF
18871 25437 MT
(o)SH
11 /Times-Roman AF
10800 26816 MT
(the form)72 W
/Times-Italic SF
14976 XM
(N)SH
/Times-Roman SF
(\050)SH
/Symbol SF
(m)SH
/Times-Roman SF
17160 XM
(,)SH
/Symbol SF
(S)SH
/Times-Roman SF
18536 XM
(\051. An)
419 W( equivalent procedure was used to produce a sequence of)
72 W( samples with prob-)73 W
9 /Times-Italic AF
16710 27176 MT
(o)SH
18086 XM
(o)SH
11 /Times-Roman AF
10800 28555 MT
(ability density function)36 W
/Times-Italic SF
21389 XM
(N)SH
/Times-Roman SF
(\050)SH
/Symbol SF
(m)SH
/Times-Roman SF
(,)SH
/Symbol SF
(S)SH
/Times-Roman SF
(\051.)SH
/Symbol SF
25311 XM
(S)SH
/Times-Roman SF
26272 XM
(and)SH
/Symbol SF
28170 XM
(S)SH
/Times-Roman SF
29581 XM
(were varied to obtain the desired data conditions, using the)35 W
9 /Times-Italic AF
28821 28915 MT
(o)SH
11 /Times-Roman AF
10800 30294 MT
(model in)
77 W( \0502.60\051.  The sample mean)78 W
/Times-Bold SF
27016 XM
(a)SH
/Times-Roman SF
27919 XM
(was initialized to)78 W
/Symbol SF
35944 XM
(m)SH
/Times-Roman SF
37028 XM
(,)SH
/Times-Italic SF
37656 XM
(i.e.)SH
/Times-Roman SF
(,)SH
/Symbol SF
39628 XM
(m)SH
/Times-Roman SF
41065 XM
(is treated as an initial data point.)78 W
9 /Times-Italic AF
36578 30654 MT
(o)SH
40262 XM
(o)SH
11 /Times-Roman AF
10800 32033 MT
(This prevented the learning curves from exhibiting an initial peak as)
62 W( components of)61 W
/Times-Bold SF
48718 XM
(a)SH
/Times-Roman SF
49604 XM
(were replaced)61 W
10800 33772 MT
(by observations.  As the trial progressed, data were presented randomly from each)
27 W( class, according to)28 W
10800 35511 MT
(the specified prior distribution, and the normalized MSE as a function of sample number was tabu-)100 W
10800 37250 MT
(lated. The)
275 W( example learning curves in this section were typically averaged over five trials.)SH
/Times-Bold SF
10800 40147 MT
(2.8.2.1. Dogmatism, Correlation, and Skew)SH
/Times-Roman SF
13300 42702 MT
(Figure 2-14 depicts empirical)
74 W( learning curves for 4 values of dogmatism.  Compare this figure)75 W
10800 44441 MT
(with the predictions in Figure 2-10 above. The empirical curves behave)
129 W( as predicted: in the small-)128 W
10800 46180 MT
(dogmatism case, all)
102 W( estimates are essentially the same. In the large-dogmatism case the EMAP and)103 W
9 SS 
36966 47556 MT
(8)SH
11 SS 
10800 47919 MT
(LMS-C estimates are fixed at)14 W
/Symbol SF
24097 XM
(m)SH
/Times-Roman SF
25470 XM
(and the ML MSE is large.)14 W
37705 XM
(The most significant part of this)
14 W( figure is)15 W
9 /Times-Italic AF
24731 48279 MT
(o)SH
11 /Times-Roman AF
10800 49658 MT
(the behavior of the LMS-C algorithm for mid-range values of)39 W
/Symbol SF
38559 XM
(d)SH
/Times-Roman SF
(, where the LMS-C error is often half)38 W
10800 51397 MT
(that of the EMAP algorithm.)
23 W( To)
323 W( obtain \050theoretically\051 zero misadjustment, the optimal estimate must)24 W
10800 53136 MT
(choose weights according to the constraints of the algorithm, which)
139 W( are to minimize MSE.  These)138 W
10800 54875 MT
(weights may not be)
83 W( optimal with respect to obtaining low initial error, but other weights \050like those)84 W
10800 56614 MT
(from LMS-C\051 violate the minimum-MSE constraints by adding asymptotic misadjustment.  In)
86 W( other)85 W
10800 58353 MT
(words, the EMAP coefficients are deterministic with respect to the matrix)104 W
/Times-Bold SF
44690 XM
(N)SH
/Times-Roman SF
(: given the statistics of)104 W
10800 60092 MT
(the data and the matrix)148 W
/Times-Bold SF
21895 XM
(N)SH
/Times-Roman SF
(, the EMAP coefficients will not vary with the data.  The)
148 W( LMS-C coef-)147 W
10800 61831 MT
(ficients, however, are)
59 W( largely determined from the data.  Although this gradient search of the perfor-)60 W
10800 63570 MT
(mance surface introduces a misadjustment, it also produces coefficients which)
179 W( enable the LMS-C)178 W
10800 65309 MT
(estimate to converge more quickly.)SH
10800 50 10800 69158 UL
7 SS 
11700 70659 MT
(8)SH
9 SS 
12050 70986 MT
(Although in the)
12 W( model of \0502.60\051 the ML MSE is independent of dogmatism, the varying test conditions produce different)11 W
/Symbol SF
10800 72000 MT
(S)SH
/Times-Roman SF
11908 XM
(matrices and hence different trial means, even with identical random seed initialization.)SH
7 /Times-Italic AF
11333 72325 MT
(o)SH
ES
%%Page: 38 39
BS
0 SI
10 /Times-Roman AF
54800 4286 MT
(38)SH
11 SS 
13300 7955 MT
(The LMS-C estimate's low initial error is due to a combination of factors)
25 W( which include the use)26 W
10800 9694 MT
(of the CEMAP estimate as the)
66 W( desired signal, initialization of)65 W
/Times-Bold SF
38738 XM
(H)SH
/Times-Roman SF
40384 XM
(as in \0502.47\051, and the proper choice)65 W
9 /Times-Italic AF
39594 10054 MT
(0)SH
11 /Times-Roman AF
10800 11433 MT
(of)SH
/Symbol SF
12078 XM
(h)SH
/Times-Roman SF
13103 XM
(and)SH
/Symbol SF
15053 XM
(b)SH
/Times-Roman SF
(. This)
449 W( behavior is valuable since initial convergence)
87 W( is important for speaker adaptation.)88 W
10800 13172 MT
(As expected, all three estimates converge as the number of samples increases, so)
83 W( the benefits of the)82 W
10800 14911 MT
(LMS-C and EMAP)
84 W( algorithms decrease with time.  In the long term, asymptotic misadjustment can)85 W
10800 16650 MT
(be avoided by computing the optimal estimate once after the observation)
23 W( of many data samples since,)22 W
10800 18389 MT
(unlike LMS-C, the Bayesian optimal estimate is not a recursive estimate.)SH
13300 21374 MT
(Note the variation in absolute mean-square)
37 W( error \050the vertical axes in Figure 2-14\051 as a function)38 W
10800 23113 MT
(of dogmatism.  When)73 W
/Symbol SF
20899 XM
(d)SH
/Times-Roman SF
21790 XM
(is very)
73 W( small, the observations convey a good deal of information about the)72 W
10800 24852 MT
(location of the mean, making the MSE small.  As)7 W
/Symbol SF
32868 XM
(d)SH
/Times-Roman SF
33694 XM
(increases, the data's information content \050as far as)8 W
/Symbol SF
10800 26591 MT
(m)SH
/Times-Roman SF
11753 XM
(is concerned\051 decreases, so the MSE is higher.  At the same time, the amount of information about)43 W
10800 28330 MT
(the mean conveyed by)161 W
/Symbol SF
21584 XM
(m)SH
/Times-Roman SF
23104 XM
(is increasing, so)
161 W( when the dogmatism becomes large the MSE is again)162 W
9 /Times-Italic AF
22218 28690 MT
(o)SH
11 /Times-Roman AF
10800 30069 MT
(small. In)
375 W( other words, at the extreme values)
50 W( of dogmatism the MSE is low because either the obser-)49 W
10800 31808 MT
(vations or the)SH
/Times-Italic SF
17063 XM
(a priori)SH
/Times-Roman SF
20731 XM
(mean are very reliable estimates of)SH
/Symbol SF
36367 XM
(m)SH
/Times-Roman SF
(.)SH
13300 34793 MT
(Figure 2-15 shows)
78 W( the learning curves with correlation as the parameter for)79 W
/Symbol SF
47660 XM
(r)SH
/Times-Roman SF
48618 XM
(= 0.98, 0.9, 0.5,)79 W
10800 36532 MT
(and 0.1, similar)
80 W( to Figure 2-11.  Again, the estimators behave as expected with the gains of LMS-C)79 W
10800 38271 MT
(and EMAP over ML methods increasing with increasing)
120 W( correlation.  And again in these cases the)121 W
10800 40010 MT
(LMS-C error is significantly smaller than either the EMAP or ML estimates.  Note that the ML MSE)34 W
10800 41749 MT
(is independent of)35 W
/Symbol SF
18756 XM
(r)SH
/Times-Roman SF
(. The)
345 W( variation in the ML learning curves in Figure 2-15 occurs because)
35 W( different)36 W
10800 43488 MT
(trial means are produced as)SH
/Symbol SF
23107 XM
(r)SH
/Times-Roman SF
23986 XM
(\050and consequently)SH
/Symbol SF
32294 XM
(S)SH
/Times-Roman SF
33395 XM
(\051 is varied.)SH
9 /Times-Italic AF
32945 43848 MT
(o)SH
11 /Times-Roman AF
13300 46473 MT
(The empirical tests illustrated in Figure 2-16 investigated the degree to)
329 W( which modeling)328 W
10800 48212 MT
(between-class correlation actually reduces MSE, and also whether the LMS-C)
78 W( algorithm is as effec-)79 W
10800 49951 MT
(tive as EMAP under these conditions.)
24 W( The)
321 W( test conditions are similar to the previous tests except that)23 W
/Symbol SF
10800 51690 MT
(r)SH
/Times-Roman SF
11824 XM
(was increased to 0.9 to better demonstrate the)
145 W( algorithms' properties.  In these experiments, the)146 W
10800 53429 MT
(frequency of samples from Class 2 was varied from 5% to 50%)
168 W( \050the equal priors case\051, which is)167 W
10800 55168 MT
(equivalent to varying)29 W
/Symbol SF
20510 XM
(q)SH
/Times-Roman SF
21387 XM
(from 0.053 to 1.0 as in Figure 2-12.  The abrupt)
29 W( drops in the ML and LMS-C)30 W
10800 56907 MT
(MSE in the)7 W
/Symbol SF
16108 XM
(q)SH
/Times-Roman SF
16963 XM
(= 0.053 and 0.176 cases are)
7 W( due to the observation of samples from the less-likely class.)6 W
10800 58646 MT
(It is obvious from these curves that)
215 W( the LMS-C method does retain some portion of the EMAP)216 W
10800 60385 MT
(algorithm's ability to use correlation information to reduce MSE, but the)
13 W( shape of the)12 W
/Symbol SF
48829 XM
(q)SH
/Times-Roman SF
49689 XM
(= 0.053 curve)12 W
10800 62124 MT
(may indicate that it is more sensitive to skew in prior probabilities than the EMAP.)SH
ES
%%Page: 39 40
BS
0 SI
10 /Times-Roman AF
54800 4286 MT
(39)SH
11 SS 
1064 1000 270 53250 68400 GB 
%%BeginDocument: /usr0/rozzi/Documentation/PhDThesis/Chapter2/dogm4.eps
%!PS-Adobe-2.0 EPSF-1.2
%%Creator:Rozzi
%%Title:f1.ps
%%Origin:0 720
%%BoundingBox: 0 0 575 375  %CHANGE?
%%EndComments

gsave

%some definitions necessary for Macintosh graphs
/gm{exch moveto} def
/gr{setgray} def
/lin {exch lineto}def   % y x
/ashw{1. -1. scale ashow 1. -1. scale} def
/shw{1. -1. scale show 1. -1. scale} def
/shwrotate{1. -1. scale 90 rotate show  -90 rotate 1. -1. scale} def
/setTxMode {pop} def

% adjust the coordinate system
-95.  445.000 translate %ADJUST?
0.92 -0.92 scale
/Times-Roman findfont  10.0 scalefont setfont
% plot labels and legend
gsave
125 335 gm
(\(a\)) shw
125 650 gm
(\(b\)) shw
350 335 gm
(\(c\)) shw
350 650 gm
(\(d\)) shw
117 240 gm
0.67 setgray
1.75 setlinewidth
117 260 lin
stroke
128 240 gm
0.33 setgray
1.75 setlinewidth
128 260 lin
stroke
139 240 gm
0.0 setgray
1.75 setlinewidth
139 260 lin
stroke
120 270 gm
(ML) shw
131 270 gm
(EMAP) shw
142 270 gm
(LMS-C) shw
grestore

% <<MAC BODY GOES HERE; CONVERT show & ashow to shw & ashw! >>
% may have to get a few commands from the beginning of a file- be careful
%  to save the original .ps until complete!
466 448 gm
466 701 lin
307 701 lin
307 448 lin
466 448 lin
469 439 gm
(0)shw
435 448 gm
0 gr
435 453 lin
435 696 gm
435 701 lin
438 423 gm
1 setTxMode
0.33335 0.(0.05)ashw
403 448 gm
0 gr
403 453 lin
403 696 gm
403 701 lin
406 429 gm
1 setTxMode
0.5 0.(0.1)ashw
371 448 gm
0 gr
371 453 lin
371 696 gm
371 701 lin
374 423 gm
1 setTxMode
0.33335 0.(0.15)ashw
339 448 gm
0 gr
339 453 lin
339 696 gm
339 701 lin
342 429 gm
1 setTxMode
0.5 0.(0.2)ashw
310 423 gm
0.33335 0.(0.25)ashw
479 445 gm
(0)shw
466 499 gm
0 gr
463 499 lin
311 499 gm
307 499 lin
479 493 gm
1 setTxMode
(10)shw
466 549 gm
0 gr
463 549 lin
311 549 gm
307 549 lin
479 543 gm
1 setTxMode
(20)shw
466 600 gm
0 gr
463 600 lin
311 600 gm
307 600 lin
479 594 gm
1 setTxMode
(30)shw
466 650 gm
0 gr
463 650 lin
311 650 gm
307 650 lin
479 644 gm
1 setTxMode
(40)shw
479 695 gm
(50)shw
465 453 gm
0 gr
1.5 setlinewidth 
465 458 lin
465 463 lin
465 468 lin
465 473 lin
465 478 lin
465 483 lin
465 488 lin
465 494 lin
465 499 lin
465 504 lin
465 509 lin
465 514 lin
465 519 lin
465 524 lin
465 529 lin
465 534 lin
465 539 lin
465 544 lin
465 549 lin
465 554 lin
465 559 lin
465 564 lin
465 569 lin
465 575 lin
465 580 lin
465 585 lin
465 590 lin
465 595 lin
465 600 lin
465 605 lin
465 610 lin
465 615 lin
465 620 lin
465 625 lin
465 630 lin
465 635 lin
465 640 lin
465 645 lin
465 650 lin
465 655 lin
465 661 lin
465 666 lin
465 671 lin
465 676 lin
465 681 lin
465 686 lin
465 691 lin
465 696 lin
465 701 lin
stroke 
0.33 setgray 
465 453 gm
465 457 lin
465 461 lin
465 463 lin
465 465 lin
465 469 lin
465 473 lin
465 477 lin
465 478 lin
465 481 lin
465 485 lin
465 488 lin
465 489 lin
465 493 lin
465 494 lin
465 497 lin
465 501 lin
465 504 lin
465 505 lin
465 509 lin
465 513 lin
465 517 lin
465 519 lin
465 521 lin
465 525 lin
465 529 lin
465 533 lin
465 534 lin
465 537 lin
465 541 lin
465 544 lin
465 545 lin
465 549 lin
465 553 lin
465 557 lin
465 559 lin
465 561 lin
465 565 lin
465 569 lin
465 573 lin
465 575 lin
465 577 lin
465 581 lin
465 585 lin
465 589 lin
465 590 lin
465 593 lin
465 597 lin
465 600 lin
465 601 lin
465 605 lin
465 609 lin
465 613 lin
465 615 lin
465 617 lin
465 621 lin
465 625 lin
465 629 lin
465 630 lin
465 633 lin
465 637 lin
465 640 lin
465 641 lin
465 645 lin
465 649 lin
465 653 lin
465 655 lin
465 657 lin
465 661 lin
465 665 lin
465 669 lin
465 671 lin
465 673 lin
465 677 lin
465 681 lin
465 685 lin
465 686 lin
465 689 lin
465 693 lin
465 696 lin
465 697 lin
stroke 
0.67 setgray 
322 453 gm
322 453 lin
326 454 lin
330 456 lin
334 457 lin
338 458 lin
340 463 lin
340 467 lin
340 471 lin
340 475 lin
339 479 lin
341 484 lin
341 488 lin
344 492 lin
347 495 lin
352 498 lin
357 501 lin
362 505 lin
365 510 lin
366 514 lin
369 519 lin
372 524 lin
374 529 lin
377 534 lin
379 539 lin
380 543 lin
381 547 lin
381 551 lin
382 555 lin
385 560 lin
386 564 lin
388 569 lin
389 573 lin
389 577 lin
390 581 lin
390 585 lin
394 590 lin
395 594 lin
397 598 lin
399 603 lin
400 607 lin
403 612 lin
405 617 lin
405 621 lin
406 625 lin
407 629 lin
408 633 lin
409 637 lin
410 642 lin
411 646 lin
413 651 lin
413 655 lin
413 659 lin
414 663 lin
416 668 lin
417 673 lin
417 677 lin
417 681 lin
418 685 lin
418 689 lin
418 693 lin
419 697 lin
stroke 
0.0 setgray 
1.0 setlinewidth 
466 132 gm
466 385 lin
307 385 lin
307 132 lin
466 132 lin
469 123 gm
1 setTxMode
(0)shw
440 132 gm
0 gr
440 137 lin
440 380 gm
440 385 lin
443 107 gm
1 setTxMode
0.33335 0.(0.05)ashw
413 132 gm
0 gr
413 137 lin
413 380 gm
413 385 lin
416 113 gm
1 setTxMode
0.5 0.(0.1)ashw
387 132 gm
0 gr
387 137 lin
387 380 gm
387 385 lin
390 107 gm
1 setTxMode
0.33335 0.(0.15)ashw
360 132 gm
0 gr
360 137 lin
360 380 gm
360 385 lin
363 113 gm
1 setTxMode
0.5 0.(0.2)ashw
334 132 gm
0 gr
334 137 lin
334 380 gm
334 385 lin
337 107 gm
1 setTxMode
0.33335 0.(0.25)ashw
310 113 gm
0.5 0.(0.3)ashw
479 129 gm
(0)shw
466 183 gm
0 gr
463 183 lin
311 183 gm
307 183 lin
479 177 gm
1 setTxMode
(10)shw
466 233 gm
0 gr
463 233 lin
311 233 gm
307 233 lin
479 227 gm
1 setTxMode
(20)shw
466 284 gm
0 gr
463 284 lin
311 284 gm
307 284 lin
479 278 gm
1 setTxMode
(30)shw
466 334 gm
0 gr
463 334 lin
311 334 gm
307 334 lin
479 328 gm
1 setTxMode
(40)shw
479 379 gm
(50)shw
452 137 gm
0 gr
1.5 setlinewidth 
453 142 lin
451 147 lin
450 152 lin
449 157 lin
449 162 lin
448 167 lin
447 172 lin
446 178 lin
447 183 lin
449 188 lin
450 193 lin
450 198 lin
451 203 lin
451 208 lin
451 213 lin
451 218 lin
452 223 lin
452 228 lin
453 233 lin
453 238 lin
453 243 lin
453 248 lin
454 253 lin
454 258 lin
454 264 lin
454 269 lin
454 274 lin
454 279 lin
455 284 lin
455 289 lin
455 294 lin
456 299 lin
456 304 lin
456 309 lin
456 314 lin
456 319 lin
456 324 lin
456 329 lin
456 334 lin
456 339 lin
456 345 lin
456 350 lin
456 355 lin
456 360 lin
456 365 lin
456 370 lin
457 375 lin
457 380 lin
457 385 lin
stroke 
0.33 setgray
420 137 gm
421 141 lin
421 145 lin
421 147 lin
421 149 lin
421 153 lin
420 157 lin
420 161 lin
420 162 lin
420 165 lin
420 169 lin
420 172 lin
420 173 lin
421 177 lin
421 178 lin
422 181 lin
423 185 lin
425 188 lin
425 190 lin
425 194 lin
425 198 lin
426 202 lin
426 203 lin
427 206 lin
427 210 lin
428 213 lin
428 214 lin
429 218 lin
430 222 lin
430 226 lin
430 228 lin
430 230 lin
431 234 lin
430 238 lin
432 243 lin
433 247 lin
433 251 lin
433 253 lin
433 255 lin
433 259 lin
433 263 lin
433 267 lin
433 269 lin
434 271 lin
435 276 lin
435 279 lin
435 280 lin
436 284 lin
436 288 lin
437 292 lin
437 294 lin
438 296 lin
439 301 lin
439 304 lin
439 305 lin
439 309 lin
439 313 lin
439 317 lin
439 319 lin
439 321 lin
440 325 lin
440 329 lin
440 333 lin
440 334 lin
440 337 lin
440 341 lin
440 345 lin
441 349 lin
441 350 lin
442 353 lin
442 357 lin
442 360 lin
442 361 lin
442 365 lin
442 369 lin
442 373 lin
442 375 lin
442 377 lin
442 381 lin
442 385 lin
stroke 
0.67 setgray 
315 137 gm
315 137 lin
319 138 lin
323 140 lin
327 141 lin
331 142 lin
334 147 lin
334 151 lin
334 155 lin
334 159 lin
333 163 lin
335 168 lin
335 172 lin
338 176 lin
342 179 lin
347 182 lin
352 185 lin
357 189 lin
360 194 lin
361 198 lin
364 203 lin
367 208 lin
369 213 lin
372 218 lin
374 223 lin
375 227 lin
376 231 lin
376 235 lin
378 239 lin
381 244 lin
383 249 lin
384 253 lin
385 257 lin
386 261 lin
386 265 lin
387 269 lin
391 274 lin
391 278 lin
393 282 lin
395 287 lin
397 292 lin
400 297 lin
402 302 lin
402 306 lin
403 310 lin
404 314 lin
405 318 lin
407 322 lin
408 327 lin
409 331 lin
410 336 lin
410 340 lin
410 344 lin
411 348 lin
413 353 lin
415 358 lin
415 362 lin
415 366 lin
415 370 lin
416 374 lin
416 378 lin
416 382 lin
stroke 
0.0 setgray 
1.0 setlinewidth 
249 448 gm
249 701 lin
90 701 lin
90 448 lin
249 448 lin
252 429 gm
1 setTxMode
0.5 0.(0.2)ashw
218 448 gm
0 gr
218 453 lin
218 696 gm
218 701 lin
221 429 gm
1 setTxMode
0.5 0.(0.4)ashw
186 448 gm
0 gr
186 453 lin
186 696 gm
186 701 lin
189 429 gm
1 setTxMode
0.5 0.(0.6)ashw
154 448 gm
0 gr
154 453 lin
154 696 gm
154 701 lin
157 429 gm
1 setTxMode
0.5 0.(0.8)ashw
122 448 gm
0 gr
122 453 lin
122 696 gm
122 701 lin
125 439 gm
1 setTxMode
(1)shw
93 429 gm
0.5 0.(1.2)ashw
262 445 gm
(0)shw
249 499 gm
0 gr
246 499 lin
94 499 gm
90 499 lin
262 493 gm
1 setTxMode
(10)shw
249 549 gm
0 gr
246 549 lin
94 549 gm
90 549 lin
262 543 gm
1 setTxMode
(20)shw
249 600 gm
0 gr
246 600 lin
94 600 gm
90 600 lin
262 594 gm
1 setTxMode
(30)shw
249 650 gm
0 gr
246 650 lin
94 650 gm
90 650 lin
262 644 gm
1 setTxMode
(40)shw
262 695 gm
(50)shw
208 453 gm
0 gr
1.5 setlinewidth 
209 458 lin
201 463 lin
197 468 lin
193 473 lin
190 478 lin
189 483 lin
185 488 lin
185 494 lin
187 499 lin
193 504 lin
194 509 lin
195 514 lin
197 519 lin
199 524 lin
200 529 lin
202 534 lin
204 539 lin
205 544 lin
205 549 lin
205 554 lin
208 559 lin
210 564 lin
211 569 lin
212 575 lin
212 580 lin
213 585 lin
215 590 lin
216 595 lin
218 600 lin
219 605 lin
221 610 lin
224 615 lin
224 620 lin
225 625 lin
226 630 lin
227 635 lin
229 640 lin
230 645 lin
230 650 lin
231 655 lin
231 661 lin
232 666 lin
234 671 lin
234 676 lin
235 681 lin
235 686 lin
236 691 lin
236 696 lin
236 701 lin
stroke 
0.33 setgray 
127 453 gm
132 456 lin
137 459 lin
140 463 lin
140 464 lin
140 468 lin
141 472 lin
141 476 lin
141 478 lin
142 480 lin
144 485 lin
145 488 lin
147 490 lin
151 494 lin
156 498 lin
161 501 lin
166 503 lin
169 508 lin
170 509 lin
171 513 lin
173 517 lin
175 519 lin
177 522 lin
180 527 lin
181 529 lin
182 532 lin
184 537 lin
185 539 lin
186 542 lin
186 546 lin
187 549 lin
187 550 lin
187 554 lin
191 559 lin
193 564 lin
195 569 lin
196 573 lin
196 575 lin
196 577 lin
197 581 lin
197 585 lin
200 590 lin
202 595 lin
204 600 lin
205 604 lin
207 608 lin
208 610 lin
210 613 lin
212 618 lin
212 620 lin
212 622 lin
213 626 lin
214 630 lin
215 634 lin
215 635 lin
217 638 lin
219 643 lin
219 645 lin
219 647 lin
220 651 lin
220 655 lin
220 659 lin
220 661 lin
221 663 lin
223 668 lin
224 671 lin
224 673 lin
225 677 lin
225 681 lin
225 685 lin
225 686 lin
225 689 lin
225 693 lin
226 696 lin
226 697 lin
stroke 
0.67 setgray 
119 453 gm
119 453 lin
124 455 lin
129 457 lin
133 460 lin
135 465 lin
135 469 lin
136 473 lin
137 477 lin
138 481 lin
140 486 lin
142 490 lin
145 494 lin
149 497 lin
153 499 lin
157 502 lin
160 506 lin
163 511 lin
166 516 lin
170 521 lin
173 526 lin
175 531 lin
178 536 lin
179 541 lin
180 545 lin
181 549 lin
182 553 lin
184 557 lin
187 562 lin
189 567 lin
191 572 lin
191 576 lin
191 580 lin
192 584 lin
194 588 lin
197 593 lin
198 597 lin
200 602 lin
202 607 lin
206 612 lin
208 617 lin
208 621 lin
209 625 lin
210 629 lin
211 633 lin
212 637 lin
214 642 lin
215 646 lin
217 651 lin
217 655 lin
217 659 lin
218 663 lin
220 668 lin
221 673 lin
222 677 lin
222 681 lin
222 685 lin
223 689 lin
223 693 lin
223 697 lin
stroke 
0.0 setgray 
1.0 setlinewidth 
249 132 gm
249 385 lin
90 385 lin
90 132 lin
249 132 lin
252 107 gm
1 setTxMode
0.33335 0.(0.02)ashw
218 132 gm
0 gr
218 137 lin
218 380 gm
218 385 lin
221 107 gm
1 setTxMode
0.33335 0.(0.04)ashw
186 132 gm
0 gr
186 137 lin
186 380 gm
186 385 lin
189 107 gm
1 setTxMode
0.33335 0.(0.06)ashw
154 132 gm
0 gr
154 137 lin
154 380 gm
154 385 lin
157 107 gm
1 setTxMode
0.33335 0.(0.08)ashw
122 132 gm
0 gr
122 137 lin
122 380 gm
122 385 lin
125 113 gm
1 setTxMode
0.5 0.(0.1)ashw
93 107 gm
0.33335 0.(0.12)ashw
262 129 gm
(0)shw
249 183 gm
0 gr
246 183 lin
94 183 gm
90 183 lin
262 177 gm
1 setTxMode
(10)shw
249 233 gm
0 gr
246 233 lin
94 233 gm
90 233 lin
262 227 gm
1 setTxMode
(20)shw
249 284 gm
0 gr
246 284 lin
94 284 gm
90 284 lin
262 278 gm
1 setTxMode
(30)shw
249 334 gm
0 gr
246 334 lin
94 334 gm
90 334 lin
262 328 gm
1 setTxMode
(40)shw
262 379 gm
(50)shw
129 137 gm
0 gr
1.5 setlinewidth 
139 142 lin
136 147 lin
135 152 lin
133 157 lin
132 162 lin
134 167 lin
132 172 lin
137 178 lin
146 183 lin
155 188 lin
158 193 lin
160 198 lin
163 203 lin
166 208 lin
168 213 lin
171 218 lin
173 223 lin
174 228 lin
175 233 lin
175 238 lin
181 243 lin
183 248 lin
184 253 lin
186 258 lin
186 264 lin
187 269 lin
193 274 lin
194 279 lin
197 284 lin
199 289 lin
201 294 lin
206 299 lin
207 304 lin
208 309 lin
209 314 lin
211 319 lin
213 324 lin
214 329 lin
216 334 lin
216 339 lin
216 345 lin
219 350 lin
221 355 lin
222 360 lin
222 365 lin
223 370 lin
224 375 lin
224 380 lin
224 385 lin
stroke 
0.33 setgray 
105 137 gm
109 138 lin
113 140 lin
117 141 lin
121 142 lin
123 147 lin
123 151 lin
123 152 lin
123 155 lin
123 159 lin
123 162 lin
124 163 lin
126 168 lin
127 172 lin
132 176 lin
134 178 lin
137 180 lin
142 182 lin
143 183 lin
147 185 lin
151 187 lin
153 188 lin
154 190 lin
157 195 lin
158 198 lin
159 200 lin
162 205 lin
164 208 lin
165 210 lin
168 215 lin
170 218 lin
171 220 lin
172 225 lin
173 228 lin
173 229 lin
174 233 lin
174 237 lin
177 241 lin
179 243 lin
181 246 lin
183 251 lin
183 253 lin
184 255 lin
185 260 lin
185 264 lin
186 268 lin
186 269 lin
189 272 lin
192 275 lin
193 279 lin
197 284 lin
198 288 lin
200 292 lin
201 294 lin
204 297 lin
207 302 lin
207 304 lin
207 306 lin
207 310 lin
208 314 lin
210 319 lin
213 324 lin
214 328 lin
214 329 lin
215 332 lin
215 336 lin
216 339 lin
216 340 lin
216 344 lin
216 345 lin
218 348 lin
220 353 lin
221 355 lin
222 358 lin
222 362 lin
222 365 lin
222 366 lin
222 370 lin
223 374 lin
224 378 lin
224 380 lin
224 382 lin
stroke 
0.67 setgray 
104 137 gm
104 137 lin
108 138 lin
112 140 lin
116 141 lin
120 142 lin
124 147 lin
125 151 lin
125 155 lin
125 159 lin
126 163 lin
128 168 lin
128 172 lin
133 176 lin
138 180 lin
143 182 lin
148 186 lin
152 188 lin
156 193 lin
157 197 lin
159 201 lin
162 206 lin
166 211 lin
169 216 lin
171 221 lin
173 226 lin
173 230 lin
174 234 lin
174 238 lin
179 243 lin
182 248 lin
183 252 lin
184 256 lin
185 261 lin
185 265 lin
186 269 lin
190 272 lin
192 276 lin
194 280 lin
197 285 lin
198 289 lin
200 294 lin
204 297 lin
206 301 lin
206 305 lin
207 309 lin
208 313 lin
209 317 lin
212 322 lin
214 327 lin
214 331 lin
215 335 lin
216 339 lin
216 343 lin
217 347 lin
220 352 lin
221 357 lin
222 361 lin
222 365 lin
222 369 lin
223 373 lin
223 377 lin
224 381 lin

stroke
grestore
%%EOF

%%EndDocument
 GE /Times-Bold SF
17952 70152 MT
(Figure 2-14:)SH
/Times-Roman SF
24275 XM
(Empirical mean-square error vs. number of samples for)SH
20940 71348 MT
(dogmatism)SH
/Symbol SF
26380 XM
(d)SH
/Times-Roman SF
27198 XM
(= \050a\051 0.25, \050b\051 1.0, \050c\051 4.0, and \050d\051 16.0;)SH
/Symbol SF
44891 XM
(r)SH
/Times-Roman SF
45770 XM
(= 0.5,)SH
/Symbol SF
48590 XM
(q)SH
/Times-Roman SF
49438 XM
(= 1.0.)SH
ES
%%Page: 40 41
BS
0 SI
10 /Times-Roman AF
54800 4286 MT
(40)SH
11 SS 
1064 1000 270 53250 68400 GB 
%%BeginDocument: /usr0/rozzi/Documentation/PhDThesis/Chapter2/correl4.d1.1.eps
%!PS-Adobe-2.0 EPSF-1.2
%%Creator:Rozzi
%%Title:f1.ps
%%Origin:0 720
%%BoundingBox: 0 0 575 375  %CHANGE?
%%EndComments

gsave

%some definitions necessary for Macintosh graphs
/gm{exch moveto} def
/gr{setgray} def
/lin {exch lineto}def   % y x
/ashw{1. -1. scale ashow 1. -1. scale} def
/shw{1. -1. scale show 1. -1. scale} def
/shwrotate{1. -1. scale 90 rotate show  -90 rotate 1. -1. scale} def
/setTxMode {pop} def

% adjust the coordinate system
-95.  445.000 translate %ADJUST?
0.92 -0.92 scale
/Times-Roman findfont  10.0 scalefont setfont
% plot labels and legend
gsave
125 335 gm
(\(a\)) shw
125 650 gm
(\(b\)) shw
350 335 gm
(\(c\)) shw
350 650 gm
(\(d\)) shw
117 240 gm
0.67 setgray
1.75 setlinewidth
117 260 lin
stroke
128 240 gm
0.33 setgray
1.75 setlinewidth
128 260 lin
stroke
139 240 gm
0.0 setgray
1.75 setlinewidth
139 260 lin
stroke
120 270 gm
(ML) shw
131 270 gm
(EMAP) shw
142 270 gm
(LMS-C) shw
grestore

% <<MAC BODY GOES HERE; CONVERT show & ashow to shw & ashw! >>
% may have to get a few commands from the beginning of a file- be careful
%  to save the original .ps until complete!
249 132 gm
249 385 lin
90 385 lin
90 132 lin
249 132 lin
252 123 gm
(0)shw
223 132 gm
0 gr
223 137 lin
223 380 gm
223 385 lin
226 113 gm
1 setTxMode
0.5 0.(0.2)ashw
196 132 gm
0 gr
196 137 lin
196 380 gm
196 385 lin
199 113 gm
1 setTxMode
0.5 0.(0.4)ashw
170 132 gm
0 gr
170 137 lin
170 380 gm
170 385 lin
173 113 gm
1 setTxMode
0.5 0.(0.6)ashw
143 132 gm
0 gr
143 137 lin
143 380 gm
143 385 lin
146 113 gm
1 setTxMode
0.5 0.(0.8)ashw
117 132 gm
0 gr
117 137 lin
117 380 gm
117 385 lin
120 123 gm
1 setTxMode
(1)shw
93 113 gm
0.5 0.(1.2)ashw
262 129 gm
(0)shw
249 183 gm
0 gr
246 183 lin
94 183 gm
90 183 lin
262 177 gm
1 setTxMode
(10)shw
249 233 gm
0 gr
246 233 lin
94 233 gm
90 233 lin
262 227 gm
1 setTxMode
(20)shw
249 284 gm
0 gr
246 284 lin
94 284 gm
90 284 lin
262 278 gm
1 setTxMode
(30)shw
249 334 gm
0 gr
246 334 lin
94 334 gm
90 334 lin
262 328 gm
1 setTxMode
(40)shw
262 379 gm
(50)shw
224 137 gm
0 gr
1.5 setlinewidth 
233 142 lin
234 147 lin
236 152 lin
236 157 lin
236 162 lin
236 167 lin
234 172 lin
233 178 lin
236 183 lin
240 188 lin
240 193 lin
240 198 lin
241 203 lin
240 208 lin
240 213 lin
241 218 lin
241 223 lin
242 228 lin
242 233 lin
242 238 lin
243 243 lin
242 248 lin
242 253 lin
242 258 lin
242 264 lin
242 269 lin
243 274 lin
243 279 lin
243 284 lin
243 289 lin
243 294 lin
244 299 lin
244 304 lin
244 309 lin
244 314 lin
244 319 lin
244 324 lin
244 329 lin
244 334 lin
244 339 lin
244 345 lin
244 350 lin
244 355 lin
244 360 lin
244 365 lin
245 370 lin
245 375 lin
245 380 lin
245 385 lin
stroke 
0.33 setgray 
214 137 gm
218 142 lin
218 146 lin
218 147 lin
217 150 lin
216 154 lin
215 157 lin
214 159 lin
212 164 lin
211 167 lin
211 169 lin
211 173 lin
212 177 lin
215 181 lin
217 183 lin
220 186 lin
222 191 lin
222 193 lin
222 195 lin
222 199 lin
223 203 lin
223 207 lin
223 208 lin
224 211 lin
224 215 lin
225 218 lin
225 219 lin
226 223 lin
227 227 lin
227 231 lin
227 233 lin
227 235 lin
227 239 lin
228 243 lin
228 247 lin
228 248 lin
228 251 lin
228 255 lin
228 258 lin
228 259 lin
228 263 lin
228 264 lin
228 267 lin
228 271 lin
229 274 lin
229 275 lin
229 279 lin
230 283 lin
230 287 lin
230 289 lin
230 291 lin
230 295 lin
231 299 lin
231 303 lin
231 304 lin
231 307 lin
231 311 lin
231 314 lin
231 315 lin
232 319 lin
232 323 lin
232 327 lin
232 329 lin
232 331 lin
232 335 lin
232 339 lin
232 343 lin
232 345 lin
232 347 lin
232 351 lin
233 355 lin
233 359 lin
233 360 lin
233 363 lin
233 367 lin
233 370 lin
233 371 lin
233 375 lin
233 379 lin
233 383 lin
233 385 lin
stroke 
0.67 setgray 
109 137 gm
109 137 lin
113 139 lin
117 141 lin
120 144 lin
122 149 lin
122 153 lin
123 157 lin
124 161 lin
126 165 lin
127 170 lin
129 174 lin
132 178 lin
136 181 lin
140 185 lin
144 190 lin
146 195 lin
148 200 lin
152 205 lin
155 210 lin
157 215 lin
159 220 lin
160 225 lin
161 229 lin
162 233 lin
163 237 lin
165 241 lin
167 246 lin
169 251 lin
170 255 lin
171 260 lin
171 264 lin
172 268 lin
173 272 lin
175 277 lin
176 281 lin
178 286 lin
180 291 lin
183 296 lin
185 301 lin
185 305 lin
185 309 lin
187 314 lin
188 318 lin
190 322 lin
191 327 lin
192 331 lin
193 336 lin
193 340 lin
193 344 lin
194 348 lin
196 353 lin
196 357 lin
197 361 lin
197 365 lin
197 369 lin
198 373 lin
198 377 lin
198 381 lin
stroke 
0.0 setgray 
1.0 setlinewidth 
249 448 gm
249 701 lin
90 701 lin
90 448 lin
249 448 lin
252 439 gm
1 setTxMode
(0)shw
223 448 gm
0 gr
223 453 lin
223 696 gm
223 701 lin
226 429 gm
1 setTxMode
0.5 0.(0.2)ashw
196 448 gm
0 gr
196 453 lin
196 696 gm
196 701 lin
199 429 gm
1 setTxMode
0.5 0.(0.4)ashw
170 448 gm
0 gr
170 453 lin
170 696 gm
170 701 lin
173 429 gm
1 setTxMode
0.5 0.(0.6)ashw
143 448 gm
0 gr
143 453 lin
143 696 gm
143 701 lin
146 429 gm
1 setTxMode
0.5 0.(0.8)ashw
117 448 gm
0 gr
117 453 lin
117 696 gm
117 701 lin
120 439 gm
1 setTxMode
(1)shw
93 429 gm
0.5 0.(1.2)ashw
262 445 gm
(0)shw
249 499 gm
0 gr
246 499 lin
94 499 gm
90 499 lin
262 493 gm
1 setTxMode
(10)shw
249 549 gm
0 gr
246 549 lin
94 549 gm
90 549 lin
262 543 gm
1 setTxMode
(20)shw
249 600 gm
0 gr
246 600 lin
94 600 gm
90 600 lin
262 594 gm
1 setTxMode
(30)shw
249 650 gm
0 gr
246 650 lin
94 650 gm
90 650 lin
262 644 gm
1 setTxMode
(40)shw
262 695 gm
(50)shw
218 453 gm
0 gr
1.5 setlinewidth 
223 458 lin
220 463 lin
219 468 lin
218 473 lin
217 478 lin
216 483 lin
214 488 lin
213 494 lin
215 499 lin
220 504 lin
221 509 lin
221 514 lin
222 519 lin
222 524 lin
223 529 lin
223 534 lin
224 539 lin
225 544 lin
225 549 lin
225 554 lin
226 559 lin
226 564 lin
227 569 lin
227 575 lin
227 580 lin
227 585 lin
228 590 lin
228 595 lin
229 600 lin
229 605 lin
230 610 lin
231 615 lin
231 620 lin
232 625 lin
232 630 lin
232 635 lin
233 640 lin
233 645 lin
233 650 lin
233 655 lin
233 661 lin
233 666 lin
234 671 lin
234 676 lin
234 681 lin
234 686 lin
235 691 lin
235 696 lin
235 701 lin
stroke 
0.33 setgray 
155 453 gm
160 458 lin
162 463 lin
161 467 lin
160 471 lin
160 473 lin
160 475 lin
159 479 lin
158 483 lin
160 488 lin
163 492 lin
166 496 lin
169 499 lin
171 500 lin
176 504 lin
177 508 lin
178 512 lin
178 514 lin
179 516 lin
181 521 lin
182 524 lin
183 526 lin
184 531 lin
185 534 lin
185 535 lin
186 539 lin
187 543 lin
188 547 lin
188 549 lin
188 551 lin
188 555 lin
190 559 lin
190 560 lin
192 565 lin
193 569 lin
193 573 lin
193 575 lin
193 577 lin
193 581 lin
194 585 lin
195 589 lin
195 590 lin
196 593 lin
196 597 lin
197 600 lin
197 601 lin
198 605 lin
200 610 lin
202 615 lin
202 619 lin
203 623 lin
203 625 lin
203 627 lin
204 631 lin
204 635 lin
206 640 lin
206 644 lin
207 648 lin
207 650 lin
207 652 lin
207 656 lin
207 660 lin
208 664 lin
208 666 lin
208 668 lin
209 672 lin
210 676 lin
210 680 lin
210 681 lin
210 684 lin
210 688 lin
210 691 lin
210 692 lin
210 696 lin
211 700 lin
stroke 
0.67 setgray 
105 453 gm
105 453 lin
110 455 lin
115 458 lin
118 462 lin
119 467 lin
120 471 lin
120 475 lin
121 479 lin
123 484 lin
124 488 lin
127 492 lin
131 496 lin
135 499 lin
140 504 lin
143 509 lin
144 513 lin
146 517 lin
150 522 lin
153 527 lin
155 532 lin
157 537 lin
158 542 lin
159 546 lin
160 551 lin
161 555 lin
164 560 lin
166 565 lin
167 569 lin
168 573 lin
169 577 lin
169 581 lin
170 585 lin
173 590 lin
173 594 lin
175 598 lin
177 603 lin
178 607 lin
181 612 lin
183 617 lin
183 621 lin
184 625 lin
186 630 lin
186 634 lin
188 638 lin
190 643 lin
190 647 lin
191 651 lin
191 655 lin
192 659 lin
192 663 lin
193 667 lin
195 672 lin
196 676 lin
196 680 lin
196 684 lin
196 688 lin
197 692 lin
197 696 lin
198 700 lin
stroke 
0.0 setgray 
1.0 setlinewidth 
466 132 gm
466 385 lin
307 385 lin
307 132 lin
466 132 lin
469 113 gm
1 setTxMode
0.5 0.(0.2)ashw
435 132 gm
0 gr
435 137 lin
435 380 gm
435 385 lin
438 113 gm
1 setTxMode
0.5 0.(0.4)ashw
403 132 gm
0 gr
403 137 lin
403 380 gm
403 385 lin
406 113 gm
1 setTxMode
0.5 0.(0.6)ashw
371 132 gm
0 gr
371 137 lin
371 380 gm
371 385 lin
374 113 gm
1 setTxMode
0.5 0.(0.8)ashw
339 132 gm
0 gr
339 137 lin
339 380 gm
339 385 lin
342 123 gm
1 setTxMode
(1)shw
310 113 gm
0.5 0.(1.2)ashw
479 129 gm
(0)shw
466 183 gm
0 gr
463 183 lin
311 183 gm
307 183 lin
479 177 gm
1 setTxMode
(10)shw
466 233 gm
0 gr
463 233 lin
311 233 gm
307 233 lin
479 227 gm
1 setTxMode
(20)shw
466 284 gm
0 gr
463 284 lin
311 284 gm
307 284 lin
479 278 gm
1 setTxMode
(30)shw
466 334 gm
0 gr
463 334 lin
311 334 gm
307 334 lin
479 328 gm
1 setTxMode
(40)shw
479 379 gm
(50)shw
424 137 gm
0 gr
1.5 setlinewidth 
422 142 lin
413 147 lin
408 152 lin
404 157 lin
401 162 lin
400 167 lin
398 172 lin
398 178 lin
401 183 lin
408 188 lin
409 193 lin
410 198 lin
413 203 lin
415 208 lin
417 213 lin
419 218 lin
421 223 lin
422 228 lin
423 233 lin
423 238 lin
426 243 lin
427 248 lin
428 253 lin
429 258 lin
430 264 lin
430 269 lin
433 274 lin
434 279 lin
436 284 lin
437 289 lin
439 294 lin
441 299 lin
442 304 lin
443 309 lin
444 314 lin
445 319 lin
446 324 lin
447 329 lin
448 334 lin
448 339 lin
448 345 lin
450 350 lin
451 355 lin
452 360 lin
452 365 lin
453 370 lin
453 375 lin
453 380 lin
454 385 lin
stroke 
0.33 setgray 
344 137 gm
349 140 lin
354 143 lin
357 147 lin
357 148 lin
357 152 lin
358 156 lin
358 160 lin
358 162 lin
359 164 lin
361 169 lin
362 172 lin
364 174 lin
368 178 lin
373 182 lin
378 185 lin
383 187 lin
386 192 lin
387 193 lin
388 197 lin
390 201 lin
392 203 lin
394 206 lin
397 211 lin
398 213 lin
399 216 lin
401 221 lin
402 223 lin
403 226 lin
403 230 lin
404 233 lin
404 234 lin
404 238 lin
408 243 lin
410 248 lin
412 253 lin
413 257 lin
413 258 lin
414 261 lin
414 265 lin
414 269 lin
417 274 lin
419 279 lin
421 284 lin
422 288 lin
424 292 lin
425 294 lin
427 297 lin
429 302 lin
429 304 lin
429 306 lin
430 310 lin
431 314 lin
432 318 lin
432 319 lin
434 322 lin
436 327 lin
436 329 lin
436 331 lin
437 335 lin
437 339 lin
437 343 lin
437 345 lin
438 347 lin
440 352 lin
441 355 lin
441 357 lin
442 361 lin
442 365 lin
442 369 lin
442 370 lin
442 373 lin
442 377 lin
443 380 lin
443 381 lin
stroke
0.67 setgray 
336 137 gm
336 137 lin
341 139 lin
346 141 lin
350 144 lin
352 149 lin
352 153 lin
353 157 lin
354 161 lin
355 165 lin
357 170 lin
359 174 lin
362 178 lin
366 181 lin
370 183 lin
374 186 lin
377 190 lin
380 195 lin
383 200 lin
387 205 lin
390 210 lin
392 215 lin
395 220 lin
396 225 lin
397 229 lin
398 233 lin
399 237 lin
401 241 lin
404 246 lin
406 251 lin
408 256 lin
408 260 lin
408 264 lin
409 268 lin
411 272 lin
414 277 lin
415 281 lin
417 286 lin
419 291 lin
423 296 lin
425 301 lin
425 305 lin
426 309 lin
427 313 lin
428 317 lin
429 321 lin
431 326 lin
432 330 lin
434 335 lin
434 339 lin
434 343 lin
435 347 lin
437 352 lin
438 357 lin
439 361 lin
439 365 lin
439 369 lin
440 373 lin
440 377 lin
440 381 lin
stroke
0.0 setgray
1.0 setlinewidth 
466 448 gm
466 701 lin
307 701 lin
307 448 lin
466 448 lin
469 429 gm
1 setTxMode
0.5 0.(0.2)ashw
427 448 gm
0 gr
427 453 lin
427 696 gm
427 701 lin
430 429 gm
1 setTxMode
0.5 0.(0.4)ashw
387 448 gm
0 gr
387 453 lin
387 696 gm
387 701 lin
390 429 gm
1 setTxMode
0.5 0.(0.6)ashw
347 448 gm
0 gr
347 453 lin
347 696 gm
347 701 lin
350 429 gm
1 setTxMode
0.5 0.(0.8)ashw
310 439 gm
(1)shw
479 445 gm
(0)shw
466 499 gm
0 gr
463 499 lin
311 499 gm
307 499 lin
479 493 gm
1 setTxMode
(10)shw
466 549 gm
0 gr
463 549 lin
311 549 gm
307 549 lin
479 543 gm
1 setTxMode
(20)shw
466 600 gm
0 gr
463 600 lin
311 600 gm
307 600 lin
479 594 gm
1 setTxMode
(30)shw
466 650 gm
0 gr
463 650 lin
311 650 gm
307 650 lin
479 644 gm
1 setTxMode
(40)shw
479 695 gm
(50)shw
398 453 gm
0 gr
1.5 setlinewidth 
401 458 lin
394 463 lin
390 468 lin
388 473 lin
387 478 lin
387 483 lin
385 488 lin
387 494 lin
391 499 lin
398 504 lin
401 509 lin
402 514 lin
405 519 lin
408 524 lin
410 529 lin
412 534 lin
415 539 lin
416 544 lin
417 549 lin
418 554 lin
421 559 lin
423 564 lin
425 569 lin
426 575 lin
426 580 lin
427 585 lin
430 590 lin
431 595 lin
434 600 lin
435 605 lin
437 610 lin
440 615 lin
441 620 lin
442 625 lin
443 630 lin
444 635 lin
446 640 lin
447 645 lin
448 650 lin
448 655 lin
449 661 lin
450 666 lin
452 671 lin
453 676 lin
453 681 lin
453 686 lin
454 691 lin
455 696 lin
455 701 lin
stroke
0.33 setgray 
343 453 gm
348 455 lin
353 457 lin
356 458 lin
358 460 lin
360 465 lin
361 468 lin
361 469 lin
361 473 lin
361 477 lin
363 481 lin
364 483 lin
365 486 lin
367 490 lin
371 494 lin
375 497 lin
379 499 lin
383 501 lin
387 503 lin
391 506 lin
393 509 lin
393 511 lin
395 515 lin
397 519 lin
398 520 lin
401 525 lin
403 529 lin
404 530 lin
407 535 lin
409 539 lin
409 540 lin
410 544 lin
411 548 lin
411 552 lin
411 554 lin
413 556 lin
416 561 lin
417 564 lin
418 566 lin
420 571 lin
421 575 lin
421 579 lin
421 580 lin
422 583 lin
423 587 lin
425 590 lin
425 592 lin
427 596 lin
429 600 lin
429 601 lin
432 606 lin
434 610 lin
435 611 lin
438 616 lin
438 620 lin
439 624 lin
439 625 lin
440 628 lin
440 632 lin
441 635 lin
441 636 lin
443 641 lin
444 645 lin
446 650 lin
446 654 lin
446 658 lin
446 661 lin
446 662 lin
448 667 lin
450 671 lin
450 672 lin
450 676 lin
451 680 lin
451 684 lin
451 686 lin
451 688 lin
451 692 lin
452 696 lin
453 700 lin
453 701 lin
stroke
0.67 setgray 
346 453 gm
346 453 lin
351 455 lin
356 456 lin
361 458 lin
364 463 lin
365 467 lin
365 471 lin
365 475 lin
365 479 lin
367 484 lin
367 488 lin
370 492 lin
374 495 lin
379 498 lin
384 501 lin
389 505 lin
391 510 lin
392 514 lin
396 519 lin
400 524 lin
402 529 lin
405 534 lin
407 539 lin
408 543 lin
409 547 lin
409 551 lin
411 555 lin
414 560 lin
416 565 lin
418 570 lin
419 574 lin
419 578 lin
419 582 lin
421 586 lin
424 591 lin
425 595 lin
428 600 lin
429 604 lin
431 608 lin
434 613 lin
436 618 lin
436 622 lin
437 626 lin
438 630 lin
440 635 lin
442 640 lin
443 644 lin
444 648 lin
445 653 lin
445 657 lin
445 661 lin
447 666 lin
449 671 lin
450 675 lin
450 679 lin
450 683 lin
450 687 lin
451 691 lin
451 695 lin
452 699 lin

stroke
grestore
%%EOF

%%EndDocument
 GE /Times-Bold SF
17952 70152 MT
(Figure 2-15:)SH
/Times-Roman SF
24275 XM
(Empirical mean-square error vs. number of samples for)SH
21278 71348 MT
(correlation)SH
/Symbol SF
26592 XM
(r)SH
/Times-Roman SF
27471 XM
(= \050a\051 0.98, \050b\051 0.9, \050c\051 0.5, and \050d\051 0.1;)SH
/Symbol SF
44614 XM
(d)SH
/Times-Roman SF
45432 XM
(= 1.0,)SH
/Symbol SF
48252 XM
(q)SH
/Times-Roman SF
49100 XM
(= 1.0.)SH
ES
%%Page: 41 42
BS
0 SI
10 /Times-Roman AF
54800 4286 MT
(41)SH
11 SS 
1064 1000 270 53250 68400 GB 
%%BeginDocument: /usr0/rozzi/Documentation/PhDThesis/Chapter2/bias4.9.eps
%!PS-Adobe-2.0 EPSF-1.2
%%Creator:Rozzi
%%Title:f1.ps
%%Origin:0 720
%%BoundingBox: 0 0 575 375  %CHANGE?
%%EndComments

gsave

%some definitions necessary for Macintosh graphs
/gm{exch moveto} def
/gr{setgray} def
/lin {exch lineto}def   % y x
/ashw{1. -1. scale ashow 1. -1. scale} def
/shw{1. -1. scale show 1. -1. scale} def
/shwrotate{1. -1. scale 90 rotate show  -90 rotate 1. -1. scale} def
/setTxMode {pop} def

% adjust the coordinate system
-95.  445.000 translate %ADJUST?
0.92 -0.92 scale
/Times-Roman findfont  10.0 scalefont setfont

% plot labels and legend
gsave
125 335 gm
(\(a\)) shw
125 650 gm
(\(b\)) shw
350 335 gm
(\(c\)) shw
350 650 gm
(\(d\)) shw
117 240 gm
0.67 setgray
1.75 setlinewidth
117 260 lin
stroke
128 240 gm
0.33 setgray
1.75 setlinewidth
128 260 lin
stroke
139 240 gm
0.0 setgray
1.75 setlinewidth
139 260 lin
stroke
120 270 gm
(ML) shw
131 270 gm
(EMAP) shw
142 270 gm
(LMS-C) shw
grestore

% <<MAC BODY GOES HERE; CONVERT show & ashow to shw & ashw! >>
% may have to get a few commands from the beginning of a file- be careful
%  to save the original .ps until complete!
249 132 gm
249 385 lin
90 385 lin
90 132 lin
249 132 lin
252 123 gm
(0)shw
223 132 gm
0 gr
223 137 lin
223 380 gm
223 385 lin
226 113 gm
1 setTxMode
0.5 0.(0.2)ashw
196 132 gm
0 gr
196 137 lin
196 380 gm
196 385 lin
199 113 gm
1 setTxMode
0.5 0.(0.4)ashw
170 132 gm
0 gr
170 137 lin
170 380 gm
170 385 lin
173 113 gm
1 setTxMode
0.5 0.(0.6)ashw
143 132 gm
0 gr
143 137 lin
143 380 gm
143 385 lin
146 113 gm
1 setTxMode
0.5 0.(0.8)ashw
117 132 gm
0 gr
117 137 lin
117 380 gm
117 385 lin
120 123 gm
1 setTxMode
(1)shw
93 113 gm
0.5 0.(1.2)ashw
262 129 gm
(0)shw
249 183 gm
0 gr
246 183 lin
94 183 gm
90 183 lin
262 177 gm
1 setTxMode
(10)shw
249 233 gm
0 gr
246 233 lin
94 233 gm
90 233 lin
262 227 gm
1 setTxMode
(20)shw
249 284 gm
0 gr
246 284 lin
94 284 gm
90 284 lin
262 278 gm
1 setTxMode
(30)shw
249 334 gm
0 gr
246 334 lin
94 334 gm
90 334 lin
262 328 gm
1 setTxMode
(40)shw
262 379 gm
(50)shw
218 137 gm
0 gr
1.5 setlinewidth
220 142 lin
217 147 lin
215 152 lin
212 157 lin
218 162 lin
216 167 lin
215 172 lin
215 178 lin
217 183 lin
220 188 lin
220 193 lin
220 198 lin
220 203 lin
220 208 lin
220 213 lin
221 218 lin
222 223 lin
223 228 lin
223 233 lin
223 238 lin
234 243 lin
235 248 lin
235 253 lin
235 258 lin
235 264 lin
235 269 lin
236 274 lin
236 279 lin
236 284 lin
236 289 lin
237 294 lin
236 299 lin
236 304 lin
237 309 lin
236 314 lin
236 319 lin
236 324 lin
237 329 lin
237 334 lin
238 339 lin
237 345 lin
237 350 lin
237 355 lin
237 360 lin
238 365 lin
238 370 lin
238 375 lin
238 380 lin
238 385 lin
stroke
0.33 setgray
180 137 gm
185 140 lin
189 143 lin
190 147 lin
192 152 lin
193 156 lin
191 160 lin
190 162 lin
190 165 lin
190 169 lin
191 172 lin
192 173 lin
194 177 lin
195 178 lin
198 181 lin
202 186 lin
204 188 lin
205 191 lin
206 196 lin
206 198 lin
206 200 lin
207 204 lin
207 208 lin
208 212 lin
208 213 lin
210 216 lin
211 221 lin
211 223 lin
211 225 lin
212 229 lin
213 233 lin
214 237 lin
214 238 lin
214 241 lin
214 245 lin
215 248 lin
215 249 lin
216 253 lin
217 257 lin
217 261 lin
217 264 lin
217 265 lin
217 269 lin
218 273 lin
218 277 lin
218 279 lin
218 281 lin
218 285 lin
219 289 lin
219 293 lin
219 294 lin
219 297 lin
219 301 lin
219 304 lin
219 305 lin
220 309 lin
222 314 lin
221 318 lin
221 319 lin
221 322 lin
221 326 lin
222 329 lin
222 330 lin
223 334 lin
223 338 lin
224 342 lin
224 345 lin
224 346 lin
224 350 lin
224 354 lin
225 358 lin
225 360 lin
225 362 lin
225 366 lin
225 370 lin
226 374 lin
226 375 lin
226 378 lin
226 382 lin
227 385 lin
stroke
0.67 setgray
105 137 gm
105 137 lin
107 142 lin
108 146 lin
109 150 lin
109 154 lin
111 157 lin
117 158 lin
123 159 lin
129 160 lin
135 161 lin
141 162 lin
141 166 lin
141 170 lin
142 174 lin
144 178 lin
148 183 lin
150 188 lin
152 193 lin
152 197 lin
153 201 lin
153 205 lin
153 209 lin
154 213 lin
156 218 lin
156 222 lin
157 226 lin
157 230 lin
157 234 lin
160 238 lin
166 239 lin
172 240 lin
178 241 lin
184 242 lin
190 243 lin
193 248 lin
193 252 lin
194 256 lin
194 260 lin
194 264 lin
195 268 lin
195 272 lin
195 276 lin
196 280 lin
198 285 lin
198 289 lin
198 293 lin
198 297 lin
198 301 lin
199 305 lin
199 309 lin
201 314 lin
201 318 lin
201 322 lin
203 326 lin
206 331 lin
207 335 lin
207 339 lin
207 343 lin
207 347 lin
208 351 lin
208 355 lin
208 359 lin
209 363 lin
209 367 lin
209 371 lin
210 375 lin
210 379 lin
211 383 lin
stroke
0.0 setgray
1.0 setlinewidth
249 448 gm
249 701 lin
90 701 lin
90 448 lin
249 448 lin
252 439 gm
1 setTxMode
(0)shw
223 448 gm
0 gr
223 453 lin
223 696 gm
223 701 lin
226 429 gm
1 setTxMode
0.5 0.(0.2)ashw
196 448 gm
0 gr
196 453 lin
196 696 gm
196 701 lin
199 429 gm
1 setTxMode
0.5 0.(0.4)ashw
170 448 gm
0 gr
170 453 lin
170 696 gm
170 701 lin
173 429 gm
1 setTxMode
0.5 0.(0.6)ashw
143 448 gm
0 gr
143 453 lin
143 696 gm
143 701 lin
146 429 gm
1 setTxMode
0.5 0.(0.8)ashw
117 448 gm
0 gr
117 453 lin
117 696 gm
117 701 lin
120 439 gm
1 setTxMode
(1)shw
93 429 gm
0.5 0.(1.2)ashw
262 445 gm
(0)shw
249 499 gm
0 gr
246 499 lin
94 499 gm
90 499 lin
262 493 gm
1 setTxMode
(10)shw
249 549 gm
0 gr
246 549 lin
94 549 gm
90 549 lin
262 543 gm
1 setTxMode
(20)shw
249 600 gm
0 gr
246 600 lin
94 600 gm
90 600 lin
262 594 gm
1 setTxMode
(30)shw
249 650 gm
0 gr
246 650 lin
94 650 gm
90 650 lin
262 644 gm
1 setTxMode
(40)shw
262 695 gm
(50)shw
218 453 gm
0 gr
1.5 setlinewidth 
220 458 lin
217 463 lin
218 468 lin
216 473 lin
215 478 lin
215 483 lin
214 488 lin
214 494 lin
219 499 lin
222 504 lin
222 509 lin
222 514 lin
223 519 lin
223 524 lin
224 529 lin
225 534 lin
226 539 lin
227 544 lin
227 549 lin
227 554 lin
231 559 lin
232 564 lin
232 569 lin
232 575 lin
232 580 lin
233 585 lin
233 590 lin
233 595 lin
234 600 lin
235 605 lin
235 610 lin
235 615 lin
235 620 lin
235 625 lin
235 630 lin
235 635 lin
235 640 lin
236 645 lin
236 650 lin
236 655 lin
236 661 lin
236 666 lin
236 671 lin
236 676 lin
236 681 lin
236 686 lin
236 691 lin
237 696 lin
236 701 lin
stroke
0.33 setgray 
182 453 gm
186 456 lin
190 458 lin
191 462 lin
191 466 lin
191 468 lin
191 470 lin
190 474 lin
190 478 lin
190 482 lin
190 483 lin
190 486 lin
191 490 lin
193 494 lin
198 499 lin
203 504 lin
204 508 lin
204 509 lin
204 512 lin
204 516 lin
205 519 lin
205 520 lin
204 524 lin
206 529 lin
209 534 lin
209 538 lin
210 542 lin
210 544 lin
210 546 lin
211 550 lin
211 554 lin
213 559 lin
214 563 lin
214 567 lin
214 569 lin
214 571 lin
215 575 lin
215 579 lin
215 583 lin
215 585 lin
215 587 lin
214 591 lin
215 595 lin
216 599 lin
216 600 lin
216 603 lin
216 607 lin
216 610 lin
216 611 lin
216 615 lin
216 619 lin
217 623 lin
217 625 lin
217 627 lin
218 631 lin
218 635 lin
217 639 lin
217 640 lin
218 643 lin
218 647 lin
219 650 lin
219 651 lin
219 655 lin
219 659 lin
219 663 lin
219 666 lin
219 667 lin
220 671 lin
220 675 lin
220 679 lin
220 681 lin
220 683 lin
220 687 lin
221 691 lin
221 695 lin
221 696 lin
220 699 lin
stroke
0.67 setgray 
105 453 gm
105 453 lin
107 458 lin
109 463 lin
113 468 lin
114 472 lin
117 475 lin
121 477 lin
125 479 lin
129 481 lin
132 484 lin
132 488 lin
135 492 lin
138 495 lin
143 499 lin
148 504 lin
149 508 lin
150 512 lin
150 516 lin
150 520 lin
150 524 lin
154 527 lin
157 531 lin
158 536 lin
159 540 lin
159 544 lin
160 548 lin
161 552 lin
163 555 lin
167 556 lin
171 558 lin
175 559 lin
176 563 lin
177 567 lin
177 571 lin
178 575 lin
178 579 lin
178 583 lin
178 587 lin
178 591 lin
179 595 lin
184 600 lin
185 604 lin
185 608 lin
185 612 lin
185 616 lin
185 620 lin
186 624 lin
187 628 lin
187 632 lin
187 636 lin
187 640 lin
190 645 lin
191 649 lin
192 653 lin
192 657 lin
192 661 lin
193 665 lin
193 669 lin
193 673 lin
193 677 lin
194 681 lin
194 685 lin
195 689 lin
195 693 lin
195 697 lin
stroke
1.0 setlinewidth
0.0 setgray
466 132 gm
466 385 lin
307 385 lin
307 132 lin
466 132 lin
469 123 gm
1 setTxMode
(0)shw
440 132 gm
0 gr
440 137 lin
440 380 gm
440 385 lin
443 113 gm
1 setTxMode
0.5 0.(0.2)ashw
413 132 gm
0 gr
413 137 lin
413 380 gm
413 385 lin
416 113 gm
1 setTxMode
0.5 0.(0.4)ashw
387 132 gm
0 gr
387 137 lin
387 380 gm
387 385 lin
390 113 gm
1 setTxMode
0.5 0.(0.6)ashw
360 132 gm
0 gr
360 137 lin
360 380 gm
360 385 lin
363 113 gm
1 setTxMode
0.5 0.(0.8)ashw
334 132 gm
0 gr
334 137 lin
334 380 gm
334 385 lin
337 123 gm
1 setTxMode
(1)shw
310 113 gm
0.5 0.(1.2)ashw
479 129 gm
(0)shw
466 183 gm
0 gr
463 183 lin
311 183 gm
307 183 lin
479 177 gm
1 setTxMode
(10)shw
466 233 gm
0 gr
463 233 lin
311 233 gm
307 233 lin
479 227 gm
1 setTxMode
(20)shw
466 284 gm
0 gr
463 284 lin
311 284 gm
307 284 lin
479 278 gm
1 setTxMode
(30)shw
466 334 gm
0 gr
463 334 lin
311 334 gm
307 334 lin
479 328 gm
1 setTxMode
(40)shw
479 379 gm
(50)shw
435 137 gm
0 gr
1.5 setlinewidth 
440 142 lin
437 147 lin
436 152 lin
434 157 lin
433 162 lin
433 167 lin
430 172 lin
429 178 lin
432 183 lin
435 188 lin
436 193 lin
436 198 lin
438 203 lin
437 208 lin
438 213 lin
439 218 lin
440 223 lin
441 228 lin
441 233 lin
441 238 lin
443 243 lin
444 248 lin
444 253 lin
444 258 lin
444 264 lin
444 269 lin
444 274 lin
444 279 lin
445 284 lin
446 289 lin
446 294 lin
447 299 lin
447 304 lin
447 309 lin
447 314 lin
447 319 lin
447 324 lin
448 329 lin
447 334 lin
448 339 lin
448 345 lin
448 350 lin
449 355 lin
450 360 lin
450 365 lin
450 370 lin
450 375 lin
451 380 lin
451 385 lin
stroke
0.33 setgray 
376 137 gm
381 142 lin
383 147 lin
383 151 lin
382 155 lin
382 157 lin
382 159 lin
382 163 lin
381 167 lin
382 171 lin
382 172 lin
384 175 lin
387 179 lin
391 183 lin
392 184 lin
396 187 lin
397 188 lin
398 191 lin
398 195 lin
398 198 lin
399 199 lin
401 204 lin
401 208 lin
403 213 lin
406 218 lin
408 223 lin
409 227 lin
409 231 lin
409 233 lin
409 235 lin
410 239 lin
412 243 lin
412 244 lin
414 249 lin
414 253 lin
414 257 lin
414 258 lin
414 261 lin
414 265 lin
415 269 lin
414 273 lin
414 274 lin
415 277 lin
415 281 lin
416 284 lin
416 285 lin
418 290 lin
417 294 lin
420 299 lin
420 303 lin
420 307 lin
420 309 lin
420 311 lin
421 315 lin
421 319 lin
420 323 lin
420 324 lin
421 327 lin
421 331 lin
422 334 lin
422 335 lin
422 339 lin
422 343 lin
423 347 lin
424 350 lin
424 352 lin
425 356 lin
426 360 lin
426 364 lin
426 365 lin
426 368 lin
426 372 lin
427 375 lin
427 376 lin
428 380 lin
428 384 lin
stroke
0.67 setgray 
322 137 gm
322 137 lin
326 139 lin
330 141 lin
333 144 lin
334 149 lin
335 153 lin
336 157 lin
339 162 lin
341 167 lin
341 171 lin
343 175 lin
346 179 lin
350 182 lin
353 186 lin
356 191 lin
358 196 lin
360 200 lin
363 205 lin
364 209 lin
366 214 lin
367 218 lin
370 223 lin
372 228 lin
373 232 lin
374 236 lin
378 241 lin
381 244 lin
382 248 lin
383 252 lin
384 256 lin
384 260 lin
384 264 lin
385 268 lin
384 272 lin
384 276 lin
386 280 lin
389 285 lin
391 290 lin
391 294 lin
395 299 lin
395 303 lin
396 307 lin
396 311 lin
397 315 lin
397 319 lin
397 323 lin
398 327 lin
400 332 lin
400 336 lin
400 340 lin
400 344 lin
402 348 lin
405 353 lin
407 358 lin
407 362 lin
408 366 lin
408 370 lin
410 375 lin
410 379 lin
411 383 lin
stroke
0.0 setgray
1.0 setlinewidth 
466 448 gm
466 701 lin
307 701 lin
307 448 lin
466 448 lin
469 439 gm
1 setTxMode
(0)shw
440 448 gm
0 gr
440 453 lin
440 696 gm
440 701 lin
443 429 gm
1 setTxMode
0.5 0.(0.2)ashw
413 448 gm
0 gr
413 453 lin
413 696 gm
413 701 lin
416 429 gm
1 setTxMode
0.5 0.(0.4)ashw
387 448 gm
0 gr
387 453 lin
387 696 gm
387 701 lin
390 429 gm
1 setTxMode
0.5 0.(0.6)ashw
360 448 gm
0 gr
360 453 lin
360 696 gm
360 701 lin
363 429 gm
1 setTxMode
0.5 0.(0.8)ashw
334 448 gm
0 gr
334 453 lin
334 696 gm
334 701 lin
337 439 gm
1 setTxMode
(1)shw
310 429 gm
0.5 0.(1.2)ashw
479 445 gm
(0)shw
466 499 gm
0 gr
463 499 lin
311 499 gm
307 499 lin
479 493 gm
1 setTxMode
(10)shw
466 549 gm
0 gr
463 549 lin
311 549 gm
307 549 lin
479 543 gm
1 setTxMode
(20)shw
466 600 gm
0 gr
463 600 lin
311 600 gm
307 600 lin
479 594 gm
1 setTxMode
(30)shw
466 650 gm
0 gr
463 650 lin
311 650 gm
307 650 lin
479 644 gm
1 setTxMode
(40)shw
479 695 gm
(50)shw
435 453 gm
0 gr
1.5 setlinewidth 
440 458 lin
437 463 lin
436 468 lin
435 473 lin
434 478 lin
433 483 lin
431 488 lin
430 494 lin
432 499 lin
437 504 lin
438 509 lin
438 514 lin
439 519 lin
439 524 lin
440 529 lin
440 534 lin
441 539 lin
442 544 lin
442 549 lin
442 554 lin
443 559 lin
443 564 lin
444 569 lin
444 575 lin
444 580 lin
444 585 lin
445 590 lin
445 595 lin
446 600 lin
446 605 lin
447 610 lin
448 615 lin
448 620 lin
449 625 lin
449 630 lin
449 635 lin
450 640 lin
450 645 lin
450 650 lin
450 655 lin
450 661 lin
450 666 lin
451 671 lin
451 676 lin
451 681 lin
451 686 lin
452 691 lin
452 696 lin
452 701 lin
stroke
0.33 setgray 
372 453 gm
377 458 lin
379 463 lin
378 467 lin
377 471 lin
377 473 lin
377 475 lin
376 479 lin
375 483 lin
377 488 lin
380 492 lin
383 496 lin
386 499 lin
388 500 lin
393 504 lin
394 508 lin
395 512 lin
395 514 lin
396 516 lin
398 521 lin
399 524 lin
400 526 lin
401 531 lin
402 534 lin
402 535 lin
403 539 lin
404 543 lin
405 547 lin
405 549 lin
405 551 lin
405 555 lin
407 559 lin
407 560 lin
409 565 lin
410 569 lin
410 573 lin
410 575 lin
410 577 lin
410 581 lin
411 585 lin
412 589 lin
412 590 lin
413 593 lin
413 597 lin
414 600 lin
414 601 lin
415 605 lin
417 610 lin
419 615 lin
419 619 lin
420 623 lin
420 625 lin
420 627 lin
421 631 lin
421 635 lin
423 640 lin
423 644 lin
424 648 lin
424 650 lin
424 652 lin
424 656 lin
424 660 lin
425 664 lin
425 666 lin
425 668 lin
426 672 lin
427 676 lin
427 680 lin
427 681 lin
427 684 lin
427 688 lin
427 691 lin
427 692 lin
427 696 lin
428 700 lin
stroke
0.67 setgray 
322 453 gm
322 453 lin
327 455 lin
332 458 lin
335 462 lin
336 467 lin
337 471 lin
337 475 lin
338 479 lin
340 484 lin
341 488 lin
344 492 lin
348 496 lin
352 499 lin
357 504 lin
360 509 lin
361 513 lin
363 517 lin
367 522 lin
370 527 lin
372 532 lin
374 537 lin
375 542 lin
376 546 lin
377 551 lin
378 555 lin
381 560 lin
383 565 lin
384 569 lin
385 573 lin
386 577 lin
386 581 lin
387 585 lin
390 590 lin
390 594 lin
392 598 lin
394 603 lin
395 607 lin
398 612 lin
400 617 lin
400 621 lin
401 625 lin
403 630 lin
403 634 lin
405 638 lin
407 643 lin
407 647 lin
408 651 lin
408 655 lin
409 659 lin
409 663 lin
410 667 lin
412 672 lin
413 676 lin
413 680 lin
413 684 lin
413 688 lin
414 692 lin
414 696 lin
415 700 lin

stroke
grestore
%%EOF

%%EndDocument
 GE /Times-Bold SF
14438 70152 MT
(Figure 2-16:)SH
/Times-Roman SF
20761 XM
(Empirical learning curves vs. number of samples with \050a\051 5%, \050b\051 15%,)SH
20712 71348 MT
(\050c\051 30%, and \050d\051 50% of the samples from Class 1, and)SH
/Symbol SF
45148 XM
(d)SH
/Times-Roman SF
45966 XM
(= 1.0,)SH
/Symbol SF
48786 XM
(r)SH
/Times-Roman SF
49665 XM
(= 0.9.)SH
ES
%%Page: 42 43
BS
0 SI
10 /Times-Roman AF
54800 4286 MT
(42)SH
11 /Times-Bold AF
10800 7937 MT
(2.8.2.2. Initialization of the LMS-C Coefficient Matrix)SH
/Times-Roman SF
13300 10492 MT
(The convergence analysis in)
50 W( Section 2.7 showed that the mean-squared coefficient error can be)51 W
10800 12231 MT
(expressed as a recursion relation, so judicious choice of the initial coefficient matrix)91 W
/Times-Bold SF
49309 XM
(H)SH
/Times-Roman SF
50980 XM
(can have a)90 W
9 /Times-Italic AF
50165 12591 MT
(0)SH
11 /Times-Roman AF
10800 13970 MT
(considerable impact on initial MSE.  The curves in Figure 2-17 are)
61 W( typical results from an empirical)62 W
10800 15709 MT
(study of different forms of LMS-C coefficient initialization.)
53 W( The)
379 W( forms of initialization under inves-)52 W
9 SS 
27274 17085 MT
(T)SH
11 SS 
10800 17448 MT
(tigation were random, all zero, [)47 W
/Symbol SF
(m)SH
/Times-Roman SF
26260 XM
(|)SH
/Times-Bold SF
(I)SH
/Times-Roman SF
(])SH
27824 XM
(, and)
47 W( full initialization as specified by \0502.47\051.  In the first three)48 W
9 /Times-Italic AF
25810 17808 MT
(o)SH
11 /Times-Roman AF
10800 19187 MT
(cases the initial error is large with respect to the ML and EMAP error, although the)
128 W( estimate does)127 W
10800 20926 MT
(converge after about 10 samples in these cases.  As)
10 W( more information about the data is included in the)11 W
10800 22665 MT
(initial coefficients, convergence is even faster - note the dip in 2-17\050c\051 between)
125 W( 2 and 10 samples.)124 W
10800 24404 MT
(When initialized using)
66 W( \0502.47\051, a significant portion of the)67 W
/Times-Italic SF
36788 XM
(a priori)67 W
/Times-Roman SF
40590 XM
(knowledge of the data structure is)67 W
10800 26143 MT
(incorporated and the)
271 W( LMS-C typically exhibits excellent convergence characteristics, as seen in)270 W
10800 27882 MT
(Figure 2-17\050d\051 and in the other tests discussed in this section.)SH
13300 30867 MT
(In the derivation of the expected)
249 W( LMS coefficient error \050Section 2.7\051 it was assumed that)250 W
/Times-Bold SF
10800 32606 MT
(H)SH
/Symbol SF
13264 XM
(\273)SH
/Times-Bold SF
14018 XM
(H)SH
/Times-Roman SF
15274 XM
(. The)
551 W( sequence of coefficient matrices {)138 W
/Times-Bold SF
(H)SH
/Times-Roman SF
35308 XM
(} can be inspected)
138 W( to verify this assumption.)137 W
9 /Times-Italic AF
11656 32966 MT
(k+1)SH
14874 XM
(k)SH
34908 XM
(k)SH
11 /Times-Roman AF
10800 34345 MT
(Figure 2-18 shows the)
26 W( norm of the difference between successive coefficient matrices, normalized by)27 W
10800 36084 MT
(the magnitude of)108 W
/Times-Bold SF
18853 XM
(H)SH
/Times-Roman SF
20109 XM
(, averaged over 10 trials)
108 W( with)107 W
/Symbol SF
33858 XM
(d)SH
/Times-Roman SF
34783 XM
(= 4,)107 W
/Symbol SF
36992 XM
(q)SH
/Times-Roman SF
37947 XM
(= 1, and)107 W
/Symbol SF
42126 XM
(r)SH
/Times-Roman SF
43112 XM
(= 0.5.  The initial change is)107 W
9 /Times-Italic AF
19709 36444 MT
(k)SH
11 /Times-Roman AF
10800 37823 MT
(approximately 1.5% of the magnitude of the matrix, and after convergence)
199 W( the change is around)200 W
10800 39562 MT
(0.1%, so the assumptions about the rate of change in)SH
/Times-Bold SF
34200 XM
(H)SH
/Times-Roman SF
35731 XM
(appear to be valid.  Figure 2-18 also validates)SH
9 /Times-Italic AF
35056 39922 MT
(k)SH
11 /Times-Roman AF
10800 41301 MT
(the assumption that)145 W
/Times-Bold SF
20066 XM
(H)SH
/Times-Roman SF
21742 XM
(is independent of the input data after convergence which)
145 W( was made in the)146 W
9 /Times-Italic AF
20922 41661 MT
(k)SH
11 /Times-Roman AF
10800 43040 MT
(derivation of the LMS-C misadjustment, as there are no large changes in the curve after 5)
161 W( obser-)160 W
10800 44779 MT
(vations.)SH
/Times-Bold SF
10800 47694 MT
(2.8.2.3. Convergence-point parameter)SH
/Symbol SF
28791 XM
(h)SH
/Times-Roman SF
13300 50249 MT
(Theoretical analysis showed that as)320 W
/Symbol SF
30754 XM
(h)SH
/Times-Roman SF
32013 XM
(increases, the LMS-C and CEMAP misadjustment)321 W
10800 51988 MT
(decreases. This)
409 W( parameter)
67 W( describes the point at which the theoretical CEMAP learning curve inter-)66 W
10800 53727 MT
(sects the EMAP learning)
30 W( curve.  It also controls the relative weighting of the prior and sample means)31 W
10800 55466 MT
(in the CEMAP estimate.  Therefore, if)100 W
/Symbol SF
28636 XM
(h)SH
/Times-Roman SF
29673 XM
(is too large, the sample mean will dominate the LMS-C's)99 W
10800 57205 MT
(desired signal, driving the LMS-C estimate too quickly toward the ML)
89 W( estimate, raising the estima-)90 W
10800 58944 MT
(tion error.  If)79 W
/Symbol SF
17071 XM
(h)SH
/Times-Roman SF
18088 XM
(is too small, the prior mean)79 W
/Symbol SF
30874 XM
(m)SH
/Times-Roman SF
32311 XM
(dominates and the LMS-C estimation error is essen-)78 W
9 /Times-Italic AF
31508 59304 MT
(o)SH
/Times-Roman SF
26384 60320 MT
(2)SH
11 SS 
10800 60683 MT
(tially a constant equal to)3 W
/Times-Italic SF
21844 XM
(E)SH
/Times-Roman SF
([)SH
/Symbol SF
(||m)
150 MX(-)
150 MX(m)SH
25944 XM
(||)SH
/Times-Roman SF
26834 XM
(]. These)
281 W( effects are illustrated in)
3 W( Figure 2-19 for)4 W
/Symbol SF
48583 XM
(h)SH
/Times-Roman SF
49525 XM
(equal to 1, 11,)4 W
9 /Times-Italic AF
25494 61043 MT
(o)SH
11 /Times-Roman AF
10800 62422 MT
(21, and 31, and)110 W
/Symbol SF
18266 XM
(d)SH
/Times-Roman SF
19194 XM
(= 1,)110 W
/Symbol SF
21409 XM
(r)SH
/Times-Roman SF
22398 XM
(= 0.5.  Clearly when)110 W
/Symbol SF
32213 XM
(h)SH
/Times-Roman SF
33261 XM
(= 1 the output of the LMS-C estimator)
110 W( is quickly)109 W
10800 64161 MT
(driven towards)55 W
/Symbol SF
17752 XM
(m)SH
/Times-Roman SF
19167 XM
(and the error becomes fixed at that level.  When)56 W
/Symbol SF
41136 XM
(h)SH
/Times-Roman SF
42130 XM
(= 31, the LMS-C converges to)56 W
9 /Times-Italic AF
18386 64521 MT
(o)SH
11 /Times-Roman AF
10800 65900 MT
(the CEMAP/EMAP mean after about 20 samples.  In)
14 W( the other cases, the LMS-C estimate is balanced)13 W
10800 67639 MT
(between the two extremes and is able to produce a more accurate mean value.)SH
13300 70624 MT
(Another factor affecting the speed of convergence of the LMS-C estimate)
243 W( is the step size)244 W
ES
%%Page: 43 44
BS
0 SI
10 /Times-Roman AF
54800 4286 MT
(43)SH
11 SS 
1064 1000 270 53250 68400 GB 
%%BeginDocument: /usr0/rozzi/Documentation/PhDThesis/Chapter2/initH4.eps
%!PS-Adobe-2.0 EPSF-1.2
%%Creator:Rozzi
%%Title:f1.ps
%%Origin:0 720
%%BoundingBox: 0 0 575 375  %CHANGE?
%%EndComments

gsave

%some definitions necessary for Macintosh graphs
/gm{exch moveto} def
/gr{setgray} def
/lin {exch lineto}def   % y x
/ashw{1. -1. scale ashow 1. -1. scale} def
/shw{1. -1. scale show 1. -1. scale} def
/shwrotate{1. -1. scale 90 rotate show  -90 rotate 1. -1. scale} def
/setTxMode {pop} def

% adjust the coordinate system
-95.  445.000 translate %ADJUST?
0.92 -0.92 scale
/Times-Roman findfont  10.0 scalefont setfont
% plot labels and legend
gsave
125 335 gm
(\(a\)) shw
125 650 gm
(\(b\)) shw
350 335 gm
(\(c\)) shw
350 650 gm
(\(d\)) shw
117 240 gm
0.67 setgray
1.75 setlinewidth
117 260 lin
stroke
128 240 gm
0.33 setgray
1.75 setlinewidth
128 260 lin
stroke
139 240 gm
0.0 setgray
1.75 setlinewidth
139 260 lin
stroke
120 270 gm
(ML) shw
131 270 gm
(EMAP) shw
142 270 gm
(LMS-C) shw
grestore

% <<MAC BODY GOES HERE; CONVERT show & ashow to shw & ashw! >>
% may have to get a few commands from the beginning of a file- be careful
%  to save the original .ps until complete!
249 132 gm
249 385 lin
90 385 lin
90 132 lin
249 132 lin
252 123 gm
(0)shw
210 132 gm
0 gr
210 137 lin
210 380 gm
210 385 lin
213 113 gm
1 setTxMode
0.5 0.(0.2)ashw
170 132 gm
0 gr
170 137 lin
170 380 gm
170 385 lin
173 113 gm
1 setTxMode
0.5 0.(0.4)ashw
130 132 gm
0 gr
130 137 lin
130 380 gm
130 385 lin
133 113 gm
1 setTxMode
0.5 0.(0.6)ashw
93 113 gm
0.5 0.(0.8)ashw
262 129 gm
(0)shw
249 183 gm
0 gr
246 183 lin
94 183 gm
90 183 lin
262 177 gm
1 setTxMode
(10)shw
249 233 gm
0 gr
246 233 lin
94 233 gm
90 233 lin
262 227 gm
1 setTxMode
(20)shw
249 284 gm
0 gr
246 284 lin
94 284 gm
90 284 lin
262 278 gm
1 setTxMode
(30)shw
249 334 gm
0 gr
246 334 lin
94 334 gm
90 334 lin
262 328 gm
1 setTxMode
(40)shw
262 379 gm
(50)shw
114 137 gm
0 gr
1.5 setlinewidth 
162 142 lin
189 147 lin
207 152 lin
219 157 lin
227 162 lin
230 167 lin
232 172 lin
235 178 lin
238 183 lin
240 188 lin
241 193 lin
242 198 lin
242 203 lin
243 208 lin
243 213 lin
243 218 lin
244 223 lin
244 228 lin
244 233 lin
244 238 lin
244 243 lin
244 248 lin
244 253 lin
244 258 lin
244 264 lin
245 269 lin
245 274 lin
245 279 lin
245 284 lin
245 289 lin
245 294 lin
245 299 lin
245 304 lin
246 309 lin
246 314 lin
246 319 lin
246 324 lin
246 329 lin
246 334 lin
246 339 lin
246 345 lin
246 350 lin
246 355 lin
246 360 lin
246 365 lin
246 370 lin
246 375 lin
246 380 lin
246 385 lin
stroke 
0.33 setgray 
238 137 gm
238 141 lin
238 145 lin
238 147 lin
239 149 lin
240 154 lin
240 157 lin
240 158 lin
240 162 lin
240 166 lin
241 170 lin
241 172 lin
241 174 lin
241 178 lin
241 182 lin
242 186 lin
242 188 lin
242 190 lin
242 194 lin
242 198 lin
242 202 lin
242 203 lin
242 206 lin
242 210 lin
242 213 lin
242 214 lin
243 218 lin
243 222 lin
243 226 lin
243 228 lin
243 230 lin
243 234 lin
243 238 lin
243 242 lin
243 243 lin
243 246 lin
243 250 lin
243 253 lin
243 254 lin
243 258 lin
244 262 lin
244 266 lin
244 269 lin
244 270 lin
243 274 lin
243 278 lin
244 282 lin
244 284 lin
244 286 lin
244 290 lin
244 294 lin
244 298 lin
244 299 lin
244 302 lin
244 306 lin
245 309 lin
245 310 lin
245 314 lin
245 318 lin
245 322 lin
245 324 lin
245 326 lin
245 330 lin
245 334 lin
245 338 lin
245 339 lin
245 342 lin
245 346 lin
245 350 lin
245 354 lin
245 355 lin
245 358 lin
245 362 lin
245 365 lin
245 366 lin
245 370 lin
245 374 lin
245 378 lin
245 380 lin
245 382 lin
stroke
0.67 setgray

231 137 gm
231 137 lin
233 142 lin
233 146 lin
236 150 lin
239 153 lin
239 157 lin
240 161 lin
240 165 lin
240 169 lin
240 173 lin
240 177 lin
240 181 lin
240 185 lin
241 189 lin
241 193 lin
242 197 lin
242 201 lin
242 205 lin
242 209 lin
242 213 lin
242 217 lin
242 221 lin
242 225 lin
242 229 lin
242 233 lin
242 237 lin
243 241 lin
243 245 lin
243 249 lin
243 253 lin
243 257 lin
243 261 lin
243 265 lin
243 269 lin
243 273 lin
243 277 lin
243 281 lin
243 285 lin
243 289 lin
244 293 lin
244 297 lin
244 301 lin
244 305 lin
244 309 lin
244 313 lin
244 317 lin
244 321 lin
245 325 lin
245 329 lin
245 333 lin
245 337 lin
245 341 lin
245 345 lin
245 349 lin
245 353 lin
245 357 lin
245 361 lin
245 365 lin
245 369 lin
245 373 lin
245 377 lin
245 381 lin
stroke
0.0 setgray
1.0 setlinewidth

249 448 gm
249 701 lin
90 701 lin
90 448 lin
249 448 lin
252 439 gm
1 setTxMode
(0)shw
218 448 gm
0 gr
218 453 lin
218 696 gm
218 701 lin
221 429 gm
1 setTxMode
0.5 0.(0.1)ashw
186 448 gm
0 gr
186 453 lin
186 696 gm
186 701 lin
189 429 gm
1 setTxMode
0.5 0.(0.2)ashw
154 448 gm
0 gr
154 453 lin
154 696 gm
154 701 lin
157 429 gm
1 setTxMode
0.5 0.(0.3)ashw
122 448 gm
0 gr
122 453 lin
122 696 gm
122 701 lin
125 429 gm
1 setTxMode
0.5 0.(0.4)ashw
93 429 gm
0.5 0.(0.5)ashw
262 445 gm
(0)shw
249 499 gm
0 gr
246 499 lin
94 499 gm
90 499 lin
262 493 gm
1 setTxMode
(10)shw
249 549 gm
0 gr
246 549 lin
94 549 gm
90 549 lin
262 543 gm
1 setTxMode
(20)shw
249 600 gm
0 gr
246 600 lin
94 600 gm
90 600 lin
262 594 gm
1 setTxMode
(30)shw
249 650 gm
0 gr
246 650 lin
94 650 gm
90 650 lin
262 644 gm
1 setTxMode
(40)shw
262 695 gm
(50)shw
112 453 gm
0 gr
1.5 setlinewidth
151 458 lin
174 463 lin
201 468 lin
213 473 lin
221 478 lin
225 483 lin
229 488 lin
231 494 lin
234 499 lin
236 504 lin
237 509 lin
238 514 lin
238 519 lin
239 524 lin
240 529 lin
240 534 lin
240 539 lin
241 544 lin
241 549 lin
241 554 lin
241 559 lin
241 564 lin
242 569 lin
242 575 lin
242 580 lin
242 585 lin
242 590 lin
242 595 lin
242 600 lin
242 605 lin
242 610 lin
243 615 lin
243 620 lin
243 625 lin
243 630 lin
243 635 lin
243 640 lin
244 645 lin
244 650 lin
244 655 lin
244 661 lin
244 666 lin
244 671 lin
244 676 lin
244 681 lin
244 686 lin
244 691 lin
244 696 lin
244 701 lin
stroke
0.33 setgray

231 453 gm
231 457 lin
231 461 lin
231 463 lin
232 465 lin
234 470 lin
235 473 lin
235 474 lin
235 478 lin
235 482 lin
235 486 lin
235 488 lin
235 490 lin
235 494 lin
236 498 lin
237 502 lin
237 504 lin
237 506 lin
238 510 lin
238 514 lin
238 518 lin
238 519 lin
238 522 lin
238 526 lin
238 529 lin
238 530 lin
238 534 lin
238 538 lin
239 542 lin
239 544 lin
239 546 lin
239 550 lin
239 554 lin
239 558 lin
239 559 lin
240 562 lin
240 566 lin
240 569 lin
240 570 lin
240 574 lin
240 575 lin
240 578 lin
240 582 lin
240 585 lin
240 586 lin
240 590 lin
240 594 lin
240 598 lin
240 600 lin
240 602 lin
240 606 lin
241 610 lin
241 614 lin
241 615 lin
241 618 lin
241 622 lin
242 625 lin
242 626 lin
242 630 lin
242 634 lin
242 638 lin
242 640 lin
242 642 lin
242 646 lin
242 650 lin
242 654 lin
242 655 lin
243 658 lin
243 662 lin
243 666 lin
243 670 lin
243 671 lin
242 674 lin
242 678 lin
242 681 lin
242 682 lin
242 686 lin
242 690 lin
242 694 lin
242 696 lin
242 698 lin
stroke
0.67 setgray

220 453 gm
220 453 lin
222 458 lin
223 462 lin
226 465 lin
230 467 lin
233 469 lin
233 473 lin
234 477 lin
234 481 lin
234 485 lin
234 489 lin
234 493 lin
235 497 lin
235 501 lin
236 505 lin
237 509 lin
237 513 lin
237 517 lin
237 521 lin
237 525 lin
237 529 lin
237 533 lin
237 537 lin
237 541 lin
238 545 lin
238 549 lin
238 553 lin
238 557 lin
238 561 lin
239 565 lin
239 569 lin
239 573 lin
239 577 lin
239 581 lin
239 585 lin
239 589 lin
239 593 lin
239 597 lin
239 601 lin
240 605 lin
240 609 lin
240 613 lin
240 617 lin
240 621 lin
241 625 lin
241 629 lin
241 633 lin
241 637 lin
242 641 lin
242 645 lin
242 649 lin
242 653 lin
242 657 lin
242 661 lin
242 665 lin
242 669 lin
242 673 lin
242 677 lin
242 681 lin
242 685 lin
242 689 lin
242 693 lin
242 697 lin
stroke
0.0 setgray
1.0 setlinewidth

466 132 gm
466 385 lin
307 385 lin
307 132 lin
466 132 lin
469 123 gm
1 setTxMode
(0)shw
440 132 gm
0 gr
440 137 lin
440 380 gm
440 385 lin
443 107 gm
1 setTxMode
0.33335 0.(0.05)ashw
413 132 gm
0 gr
413 137 lin
413 380 gm
413 385 lin
416 113 gm
1 setTxMode
0.5 0.(0.1)ashw
387 132 gm
0 gr
387 137 lin
387 380 gm
387 385 lin
390 107 gm
1 setTxMode
0.33335 0.(0.15)ashw
360 132 gm
0 gr
360 137 lin
360 380 gm
360 385 lin
363 113 gm
1 setTxMode
0.5 0.(0.2)ashw
334 132 gm
0 gr
334 137 lin
334 380 gm
334 385 lin
337 107 gm
1 setTxMode
0.33335 0.(0.25)ashw
310 113 gm
0.5 0.(0.3)ashw
479 129 gm
(0)shw
466 183 gm
0 gr
463 183 lin
311 183 gm
307 183 lin
479 177 gm
1 setTxMode
(10)shw
466 233 gm
0 gr
463 233 lin
311 233 gm
307 233 lin
479 227 gm
1 setTxMode
(20)shw
466 284 gm
0 gr
463 284 lin
311 284 gm
307 284 lin
479 278 gm
1 setTxMode
(30)shw
466 334 gm
0 gr
463 334 lin
311 334 gm
307 334 lin
479 328 gm
1 setTxMode
(40)shw
479 379 gm
(50)shw
319 137 gm
0 gr
1.5 setlinewidth

406 142 lin
435 147 lin
451 152 lin
457 157 lin
459 162 lin
459 167 lin
458 172 lin
457 178 lin
455 183 lin
455 188 lin
454 193 lin
454 198 lin
453 203 lin
453 208 lin
452 213 lin
452 218 lin
452 223 lin
452 228 lin
453 233 lin
453 238 lin
453 243 lin
453 248 lin
453 253 lin
453 258 lin
453 264 lin
454 269 lin
453 274 lin
453 279 lin
454 284 lin
454 289 lin
454 294 lin
454 299 lin
455 304 lin
455 309 lin
455 314 lin
456 319 lin
456 324 lin
456 329 lin
457 334 lin
457 339 lin
457 345 lin
457 350 lin
457 355 lin
457 360 lin
457 365 lin
457 370 lin
457 375 lin
457 380 lin
457 385 lin
stroke
0.33 setgray

436 137 gm
436 141 lin
437 145 lin
437 147 lin
439 149 lin
441 154 lin
442 157 lin
442 158 lin
442 162 lin
442 166 lin
443 170 lin
443 172 lin
443 174 lin
443 178 lin
444 182 lin
445 186 lin
446 188 lin
447 191 lin
447 195 lin
447 198 lin
447 199 lin
447 203 lin
447 207 lin
448 211 lin
448 213 lin
448 215 lin
448 219 lin
448 223 lin
449 227 lin
449 228 lin
449 231 lin
449 235 lin
449 238 lin
449 239 lin
450 243 lin
450 247 lin
450 251 lin
450 253 lin
450 255 lin
450 259 lin
451 263 lin
451 267 lin
451 269 lin
451 271 lin
451 275 lin
451 279 lin
451 283 lin
451 284 lin
451 287 lin
451 291 lin
452 294 lin
452 295 lin
452 299 lin
452 303 lin
453 307 lin
453 309 lin
453 311 lin
454 315 lin
454 319 lin
454 323 lin
454 324 lin
454 327 lin
454 331 lin
455 334 lin
455 335 lin
455 339 lin
455 343 lin
455 347 lin
455 350 lin
455 351 lin
455 355 lin
455 359 lin
455 363 lin
455 365 lin
455 367 lin
455 371 lin
454 375 lin
454 379 lin
454 380 lin
454 383 lin
stroke
0.67 setgray

417 137 gm
417 137 lin
422 142 lin
422 146 lin
425 148 lin
430 149 lin
435 151 lin
439 153 lin
440 157 lin
440 161 lin
440 165 lin
440 169 lin
441 173 lin
441 177 lin
442 181 lin
443 185 lin
445 190 lin
445 194 lin
446 198 lin
446 202 lin
446 206 lin
446 210 lin
446 214 lin
446 218 lin
446 222 lin
447 226 lin
447 230 lin
447 234 lin
448 238 lin
448 242 lin
449 246 lin
449 250 lin
449 254 lin
449 258 lin
450 262 lin
450 266 lin
450 270 lin
449 274 lin
449 278 lin
450 282 lin
450 286 lin
450 290 lin
451 294 lin
451 298 lin
452 302 lin
452 306 lin
453 310 lin
453 314 lin
453 318 lin
453 322 lin
453 326 lin
454 330 lin
454 334 lin
454 338 lin
454 342 lin
454 346 lin
454 350 lin
454 354 lin
454 358 lin
454 362 lin
454 366 lin
454 370 lin
454 374 lin
454 378 lin
454 382 lin
stroke
0.0 setgray
1.0 setlinewidth 

466 448 gm
466 701 lin
307 701 lin
307 448 lin
466 448 lin
469 439 gm
1 setTxMode
(0)shw
435 448 gm
0 gr
435 453 lin
435 696 gm
435 701 lin
438 423 gm
1 setTxMode
0.33335 0.(0.02)ashw
403 448 gm
0 gr
403 453 lin
403 696 gm
403 701 lin
406 423 gm
1 setTxMode
0.33335 0.(0.04)ashw
371 448 gm
0 gr
371 453 lin
371 696 gm
371 701 lin
374 423 gm
1 setTxMode
0.33335 0.(0.06)ashw
339 448 gm
0 gr
339 453 lin
339 696 gm
339 701 lin
342 423 gm
1 setTxMode
0.33335 0.(0.08)ashw
310 429 gm
0.5 0.(0.1)ashw
479 445 gm
(0)shw
466 499 gm
0 gr
463 499 lin
311 499 gm
307 499 lin
479 493 gm
1 setTxMode
(10)shw
466 549 gm
0 gr
463 549 lin
311 549 gm
307 549 lin
479 543 gm
1 setTxMode
(20)shw
466 600 gm
0 gr
463 600 lin
311 600 gm
307 600 lin
479 594 gm
1 setTxMode
(30)shw
466 650 gm
0 gr
463 650 lin
311 650 gm
307 650 lin
479 644 gm
1 setTxMode
(40)shw
479 695 gm
(50)shw
407 453 gm
0 gr
1.5 setlinewidth 
398 458 lin
390 463 lin
409 468 lin
410 473 lin
411 478 lin
411 483 lin
411 488 lin
411 494 lin
413 499 lin
417 504 lin
419 509 lin
419 514 lin
420 519 lin
420 524 lin
421 529 lin
422 534 lin
422 539 lin
423 544 lin
424 549 lin
425 554 lin
426 559 lin
427 564 lin
427 569 lin
427 575 lin
428 580 lin
428 585 lin
428 590 lin
428 595 lin
428 600 lin
430 605 lin
430 610 lin
432 615 lin
432 620 lin
434 625 lin
435 630 lin
436 635 lin
436 640 lin
437 645 lin
438 650 lin
438 655 lin
438 661 lin
439 666 lin
439 671 lin
439 676 lin
438 681 lin
438 686 lin
437 691 lin
437 696 lin
437 701 lin
stroke
0.33 setgray

375 453 gm
375 457 lin
376 461 lin
377 463 lin
380 464 lin
385 466 lin
390 468 lin
392 473 lin
394 478 lin
395 482 lin
395 483 lin
396 486 lin
396 490 lin
396 494 lin
399 499 lin
404 503 lin
407 507 lin
407 509 lin
407 511 lin
408 515 lin
409 519 lin
410 523 lin
410 524 lin
411 527 lin
411 531 lin
411 534 lin
411 535 lin
412 539 lin
414 544 lin
414 548 lin
414 549 lin
415 552 lin
417 557 lin
417 559 lin
417 561 lin
418 565 lin
417 569 lin
418 573 lin
418 575 lin
419 577 lin
420 582 lin
419 585 lin
419 586 lin
419 590 lin
419 594 lin
420 598 lin
420 600 lin
421 602 lin
422 607 lin
422 610 lin
422 611 lin
424 616 lin
425 620 lin
427 625 lin
428 629 lin
429 633 lin
429 635 lin
429 637 lin
430 641 lin
431 645 lin
431 649 lin
431 650 lin
431 653 lin
431 657 lin
432 661 lin
433 665 lin
433 666 lin
433 669 lin
433 673 lin
432 676 lin
432 677 lin
431 681 lin
431 685 lin
430 689 lin
430 691 lin
430 693 lin
430 697 lin
430 701 lin
stroke
0.67 setgray

320 453 gm
320 453 lin
324 455 lin
328 456 lin
332 458 lin
333 462 lin
336 463 lin
344 464 lin
352 465 lin
360 466 lin
368 467 lin
376 467 lin
384 469 lin
386 474 lin
388 479 lin
389 483 lin
389 487 lin
390 491 lin
391 495 lin
395 500 lin
400 503 lin
403 508 lin
404 513 lin
405 517 lin
405 521 lin
405 525 lin
405 529 lin
405 533 lin
405 537 lin
406 541 lin
408 546 lin
409 550 lin
411 555 lin
412 559 lin
414 564 lin
414 568 lin
415 572 lin
415 576 lin
416 580 lin
416 584 lin
416 588 lin
416 592 lin
415 596 lin
416 600 lin
418 605 lin
419 609 lin
420 613 lin
422 618 lin
423 622 lin
425 627 lin
425 631 lin
426 635 lin
428 640 lin
428 644 lin
429 648 lin
429 652 lin
429 656 lin
430 660 lin
431 664 lin
431 668 lin
431 672 lin
430 676 lin
429 680 lin
429 684 lin
429 688 lin
429 692 lin
429 696 lin
428 700 lin

stroke
grestore
%%EOF

%%EndDocument
 GE /Times-Bold SF
15266 70152 MT
(Figure 2-17:)SH
/Times-Roman SF
21589 XM
(Empirical learning curves showing the effect of)SH
/Times-Bold SF
42816 XM
(H)SH
/Times-Roman SF
44397 XM
(initialization on)SH
9 /Times-Italic AF
43672 70512 MT
(0)SH
11 /Times-Roman AF
20281 71452 MT
(LMS-C convergence: \050a\051 random, \050b\051 zero, \050c\051 [)SH
/Symbol SF
(m)SH
/Times-Roman SF
42404 XM
(|)SH
/Times-Bold SF
(I)SH
/Times-Roman SF
(], and \050d\051 Eqn. \0502.47\051.)SH
9 /Times-Italic AF
41954 71812 MT
(o)SH
ES
%%Page: 44 45
BS
0 SI
10 /Times-Roman AF
54800 4286 MT
(44)SH
11 SS 
1020 1000 0 18000 27600 GB 
%%BeginDocument: /usr0/rozzi/Documentation/PhDThesis/Chapter2/Hdiff.eps
%!PS-Adobe-2.0 EPSF-1.2
%%Creator:Rozzi
%%Title:f1.ps
%%Origin:0 720
%%BoundingBox: 0 0 300 200  %CHANGE?
%%EndComments

gsave

%some definitions necessary for Macintosh graphs
/gm{exch moveto} def
/gr{setgray} def
/lin {exch lineto}def   % y x
/ashw{1. -1. scale ashow 1. -1. scale} def
/shw{1. -1. scale show 1. -1. scale} def
/shwrotate{1. -1. scale 90 rotate show  -90 rotate 1. -1. scale} def
/setTxMode {pop} def

% adjust the coordinate system
-80.  460.000 translate %ADJUST?
0.92 -0.92 scale
/Times-Roman findfont  10.0 scalefont setfont

% <<MAC BODY GOES HERE; CONVERT show & ashow to shw & ashw! >>
% may have to get a few commands from the beginning of a file- be careful
%  to save the original .ps until complete!
493 295 gm
(Number of samples, k) shw
335 225 gm
(||H\(k\) - H\(k-1\)||) shw
330 291 gm
(2) shw
353 245 gm
(||H\(k\)||) shw
350 274 gm
(2) shw
341 223 gm
341 295 lin
%
466 132 gm
466 385 lin
307 385 lin
307 132 lin
466 132 lin
469 123 gm
1 setTxMode
(0)shw
413 132 gm
0 gr
413 137 lin
413 380 gm
413 385 lin
416 101 gm
1 setTxMode
0.24996 0.(0.005)ashw
360 132 gm
0 gr
360 137 lin
360 380 gm
360 385 lin
363 101 gm
1 setTxMode
0.24996 0.(0.010)ashw
310 101 gm
0.24996 0.(0.015)ashw
479 129 gm
(0)shw
466 174 gm
0 gr
463 174 lin
311 174 gm
307 174 lin
479 171 gm
1 setTxMode
(5)shw
466 216 gm
0 gr
463 216 lin
311 216 gm
307 216 lin
479 210 gm
1 setTxMode
(10)shw
466 258 gm
0 gr
463 258 lin
311 258 gm
307 258 lin
479 252 gm
1 setTxMode
(15)shw
466 301 gm
0 gr
463 301 lin
311 301 gm
307 301 lin
479 295 gm
1 setTxMode
(20)shw
466 343 gm
0 gr
463 343 lin
311 343 gm
307 343 lin
479 337 gm
1 setTxMode
(25)shw
479 379 gm
(30)shw
stroke
0.25 gr
317 140 gm
441 149 lin
455 157 lin
461 166 lin
463 174 lin
465 183 lin
465 191 lin
465 199 lin
465 208 lin
465 216 lin
464 225 lin
465 233 lin
465 242 lin
465 250 lin
466 258 lin
466 267 lin
465 275 lin
465 284 lin
464 292 lin
464 301 lin
465 309 lin
464 318 lin
464 326 lin
465 334 lin
466 343 lin
466 351 lin
466 360 lin
466 368 lin
466 377 lin
466 385 lin
stroke
grestore
%%EOF

%%EndDocument
 GE /Times-Bold SF
15678 29352 MT
(Figure 2-18:)SH
/Times-Roman SF
22001 XM
(Normalized difference of successive LMS-C coefficient matrices,)SH
24809 30548 MT
(indicating the slow rate of change in the coefficients.)SH
10800 32499 MT
(parameter)SH
/Symbol SF
15524 XM
(b)SH
/Times-Roman SF
(. The)
381 W( optimal value of this parameter is given by \0502.48\051, but as)
53 W( in conventional adaptive)52 W
10800 34238 MT
(filtering it is sometimes necessary to reduce this value to)
91 W( maintain stability.  Figure 2-20 shows the)92 W
10800 35977 MT
(effect on)
162 W( convergence speed of scaling the optimal step size.  To better illustrate these effects by)161 W
10800 37716 MT
(avoiding the effects of averaging,)
5 W( these graphs are the results from a single trial.  The effect of scaling)6 W
10800 39455 MT
(is best seen in the first three plots in the range of 1 to 10 samples.  As the scale factor increases, the)60 W
10800 41194 MT
(LMS estimate tracks the ML mean more closely,)
156 W( up to the point at which the algorithm becomes)157 W
10800 42933 MT
(unstable \050fourth plot\051.  Scale factors between 0.5 and 1.0)
146 W( were typically used in the tests reported)145 W
10800 44672 MT
(here.)SH
/Times-Bold SF
10800 47569 MT
(2.8.2.4. Non-Gaussian Distributions)SH
/Times-Roman SF
13300 50124 MT
(The last set of empirical experiments studied the behavior of the)
146 W( three estimation algorithms)147 W
10800 51863 MT
(when the assumption of Gaussian probability density functions was relaxed.)
186 W( Both)
645 W( triangular and)185 W
10800 53602 MT
(uniform within-class)
124 W( distributions were investigated under various data conditions, and normal dis-)125 W
10800 55341 MT
(tributions were generated for comparison.  The distribution parameters were chosen)
257 W( so that the)256 W
10800 57080 MT
(amounts of dogmatism were accurate representations of the)
49 W( ratio of variances.  As one might expect,)50 W
10800 58819 MT
(estimation performance with the triangular distributions was similar)
97 W( to the normal distribution case,)96 W
10800 60558 MT
(as shown in Figures 2-21 and 2-22, although the EMAP MSE appears)
30 W( to be closer to the ML MSE in)31 W
10800 62297 MT
(the triangular data case.  Degradation in performance was much larger when the uniform)
62 W( probability)61 W
10800 64036 MT
(densities were used \050Figure 2-23\051.  After)
169 W( a few observations the ML and LMS-C learning curves)170 W
10800 65775 MT
(converge to a constant MSE.  The EMAP curve gradually)
108 W( approaches the ML curve since its coef-)107 W
10800 67514 MT
(ficients gradually give more weight to the ML estimate.)SH
13300 70499 MT
(From these)
38 W( tests, it appears that in instances in which the data distribution provides some infor-)39 W
ES
%%Page: 45 46
BS
0 SI
10 /Times-Roman AF
54800 4286 MT
(45)SH
11 SS 
1064 1000 270 53250 68400 GB 
%%BeginDocument: /usr0/rozzi/Documentation/PhDThesis/Chapter2/Nc4.eps
%!PS-Adobe-2.0 EPSF-1.2
%%Creator:Rozzi
%%Title:f1.ps
%%Origin:0 720
%%BoundingBox: 0 0 575 375  %CHANGE?
%%EndComments

gsave

%some definitions necessary for Macintosh graphs
/gm{exch moveto} def
/gr{setgray} def
/lin {exch lineto}def   % y x
/ashw{1. -1. scale ashow 1. -1. scale} def
/shw{1. -1. scale show 1. -1. scale} def
/shwrotate{1. -1. scale 90 rotate show  -90 rotate 1. -1. scale} def
/setTxMode {pop} def

% adjust the coordinate system
-95.  445.000 translate %ADJUST?
0.92 -0.92 scale
/Times-Roman findfont  10.0 scalefont setfont
% plot labels and legend
gsave
125 335 gm
(\(a\)) shw
125 650 gm
(\(b\)) shw
350 335 gm
(\(c\)) shw
350 650 gm
(\(d\)) shw
117 240 gm
0.67 setgray
1.75 setlinewidth
117 260 lin
stroke
128 240 gm
0.33 setgray
1.75 setlinewidth
128 260 lin
stroke
139 240 gm
0.0 setgray
1.75 setlinewidth
139 260 lin
stroke
120 270 gm
(ML) shw
131 270 gm
(EMAP) shw
142 270 gm
(LMS-C) shw
grestore

% <<MAC BODY GOES HERE; CONVERT shw & ashw to myshw & myashw! >>
% may have to get a few commands from the beginning of a file- be careful
%  to save the original .ps until complete!
466 448 gm
466 701 lin
307 701 lin
307 448 lin
466 448 lin
469 429 gm
0.5 0.(0.2)ashw
435 448 gm
0 gr
435 453 lin
435 696 gm
435 701 lin
438 429 gm
1 setTxMode
0.5 0.(0.4)ashw
403 448 gm
0 gr
403 453 lin
403 696 gm
403 701 lin
406 429 gm
1 setTxMode
0.5 0.(0.6)ashw
371 448 gm
0 gr
371 453 lin
371 696 gm
371 701 lin
374 429 gm
1 setTxMode
0.5 0.(0.8)ashw
339 448 gm
0 gr
339 453 lin
339 696 gm
339 701 lin
342 439 gm
1 setTxMode
(1)shw
310 429 gm
0.5 0.(1.2)ashw
479 445 gm
(0)shw
466 499 gm
0 gr
463 499 lin
311 499 gm
307 499 lin
479 493 gm
1 setTxMode
(10)shw
466 549 gm
0 gr
463 549 lin
311 549 gm
307 549 lin
479 543 gm
1 setTxMode
(20)shw
466 600 gm
0 gr
463 600 lin
311 600 gm
307 600 lin
479 594 gm
1 setTxMode
(30)shw
466 650 gm
0 gr
463 650 lin
311 650 gm
307 650 lin
479 644 gm
1 setTxMode
(40)shw
479 695 gm
(50)shw
424 453 gm
0 gr
1.5 setlinewidth

422 458 lin
411 463 lin
403 468 lin
397 473 lin
393 478 lin
390 483 lin
386 488 lin
386 494 lin
388 499 lin
393 504 lin
394 509 lin
395 514 lin
397 519 lin
399 524 lin
401 529 lin
403 534 lin
405 539 lin
406 544 lin
407 549 lin
407 554 lin
410 559 lin
412 564 lin
414 569 lin
415 575 lin
415 580 lin
416 585 lin
419 590 lin
420 595 lin
422 600 lin
424 605 lin
426 610 lin
429 615 lin
430 620 lin
431 625 lin
432 630 lin
433 635 lin
435 640 lin
436 645 lin
437 650 lin
438 655 lin
438 661 lin
440 666 lin
442 671 lin
443 676 lin
443 681 lin
444 686 lin
444 691 lin
445 696 lin
445 701 lin
stroke
0.33 setgray

344 453 gm
349 456 lin
354 459 lin
357 463 lin
357 464 lin
357 468 lin
358 472 lin
358 476 lin
358 478 lin
359 480 lin
361 485 lin
362 488 lin
364 490 lin
368 494 lin
373 498 lin
378 501 lin
383 503 lin
386 508 lin
387 509 lin
388 513 lin
390 517 lin
392 519 lin
394 522 lin
397 527 lin
398 529 lin
399 532 lin
401 537 lin
402 539 lin
403 542 lin
403 546 lin
404 549 lin
404 550 lin
404 554 lin
408 559 lin
410 564 lin
412 569 lin
413 573 lin
413 575 lin
413 577 lin
414 581 lin
414 585 lin
417 590 lin
419 595 lin
421 600 lin
422 604 lin
424 608 lin
425 610 lin
427 613 lin
429 618 lin
429 620 lin
429 622 lin
430 626 lin
431 630 lin
432 634 lin
432 635 lin
434 638 lin
436 643 lin
436 645 lin
436 647 lin
437 651 lin
437 655 lin
437 659 lin
437 661 lin
438 663 lin
440 668 lin
441 671 lin
441 673 lin
442 677 lin
442 681 lin
442 685 lin
442 686 lin
442 689 lin
442 693 lin
443 696 lin
443 697 lin
stroke
0.67 setgray

336 453 gm
336 453 lin
341 455 lin
346 457 lin
350 460 lin
352 465 lin
352 469 lin
353 473 lin
354 477 lin
355 481 lin
357 486 lin
359 490 lin
362 494 lin
366 497 lin
370 499 lin
374 502 lin
377 506 lin
380 511 lin
383 516 lin
387 521 lin
390 526 lin
392 531 lin
395 536 lin
396 541 lin
397 545 lin
398 549 lin
399 553 lin
401 557 lin
404 562 lin
406 567 lin
408 572 lin
408 576 lin
408 580 lin
409 584 lin
411 588 lin
414 593 lin
415 597 lin
417 602 lin
419 607 lin
423 612 lin
425 617 lin
425 621 lin
426 625 lin
427 629 lin
428 633 lin
429 637 lin
431 642 lin
432 646 lin
434 651 lin
434 655 lin
434 659 lin
435 663 lin
437 668 lin
438 673 lin
439 677 lin
439 681 lin
439 685 lin
440 689 lin
440 693 lin
440 697 lin
stroke
0. setgray
1. setlinewidth

466 132 gm
466 385 lin
307 385 lin
307 132 lin
466 132 lin
469 113 gm
1 setTxMode
0.5 0.(0.2)ashw
435 132 gm
0 gr
435 137 lin
435 380 gm
435 385 lin
438 113 gm
1 setTxMode
0.5 0.(0.4)ashw
403 132 gm
0 gr
403 137 lin
403 380 gm
403 385 lin
406 113 gm
1 setTxMode
0.5 0.(0.6)ashw
371 132 gm
0 gr
371 137 lin
371 380 gm
371 385 lin
374 113 gm
1 setTxMode
0.5 0.(0.8)ashw
339 132 gm
0 gr
339 137 lin
339 380 gm
339 385 lin
342 123 gm
1 setTxMode
(1)shw
310 113 gm
0.5 0.(1.2)ashw
479 129 gm
(0)shw
466 183 gm
0 gr
463 183 lin
311 183 gm
307 183 lin
479 177 gm
1 setTxMode
(10)shw
466 233 gm
0 gr
463 233 lin
311 233 gm
307 233 lin
479 227 gm
1 setTxMode
(20)shw
466 284 gm
0 gr
463 284 lin
311 284 gm
307 284 lin
479 278 gm
1 setTxMode
(30)shw
466 334 gm
0 gr
463 334 lin
311 334 gm
307 334 lin
479 328 gm
1 setTxMode
(40)shw
479 379 gm
(50)shw
424 137 gm
0 gr
1.5 setlinewidth

423 142 lin
413 147 lin
406 152 lin
401 157 lin
397 162 lin
394 167 lin
391 172 lin
390 178 lin
392 183 lin
398 188 lin
399 193 lin
399 198 lin
401 203 lin
404 208 lin
405 213 lin
407 218 lin
409 223 lin
410 228 lin
411 233 lin
411 238 lin
414 243 lin
416 248 lin
417 253 lin
418 258 lin
419 264 lin
420 269 lin
422 274 lin
424 279 lin
426 284 lin
427 289 lin
429 294 lin
432 299 lin
433 304 lin
434 309 lin
435 314 lin
436 319 lin
438 324 lin
439 329 lin
440 334 lin
441 339 lin
441 345 lin
443 350 lin
444 355 lin
445 360 lin
446 365 lin
446 370 lin
446 375 lin
447 380 lin
447 385 lin
stroke
0.33 setgray

344 137 gm
349 140 lin
354 143 lin
357 147 lin
357 148 lin
357 152 lin
358 156 lin
358 160 lin
358 162 lin
359 164 lin
361 169 lin
362 172 lin
364 174 lin
368 178 lin
373 182 lin
378 185 lin
383 187 lin
386 192 lin
387 193 lin
388 197 lin
390 201 lin
392 203 lin
394 206 lin
397 211 lin
398 213 lin
399 216 lin
401 221 lin
402 223 lin
403 226 lin
403 230 lin
404 233 lin
404 234 lin
404 238 lin
408 243 lin
410 248 lin
412 253 lin
413 257 lin
413 258 lin
414 261 lin
414 265 lin
414 269 lin
417 274 lin
419 279 lin
421 284 lin
422 288 lin
424 292 lin
425 294 lin
427 297 lin
429 302 lin
429 304 lin
429 306 lin
430 310 lin
431 314 lin
432 318 lin
432 319 lin
434 322 lin
436 327 lin
436 329 lin
436 331 lin
437 335 lin
437 339 lin
437 343 lin
437 345 lin
438 347 lin
440 352 lin
441 355 lin
441 357 lin
442 361 lin
442 365 lin
442 369 lin
442 370 lin
442 373 lin
442 377 lin
443 380 lin
443 381 lin
stroke
0.67 setgray

336 137 gm
336 137 lin
341 139 lin
346 141 lin
350 144 lin
352 149 lin
352 153 lin
353 157 lin
354 161 lin
355 165 lin
357 170 lin
359 174 lin
362 178 lin
366 181 lin
370 183 lin
374 186 lin
377 190 lin
380 195 lin
383 200 lin
387 205 lin
390 210 lin
392 215 lin
395 220 lin
396 225 lin
397 229 lin
398 233 lin
399 237 lin
401 241 lin
404 246 lin
406 251 lin
408 256 lin
408 260 lin
408 264 lin
409 268 lin
411 272 lin
414 277 lin
415 281 lin
417 286 lin
419 291 lin
423 296 lin
425 301 lin
425 305 lin
426 309 lin
427 313 lin
428 317 lin
429 321 lin
431 326 lin
432 330 lin
434 335 lin
434 339 lin
434 343 lin
435 347 lin
437 352 lin
438 357 lin
439 361 lin
439 365 lin
439 369 lin
440 373 lin
440 377 lin
440 381 lin
stroke
0. setgray
1. setlinewidth

249 448 gm
249 701 lin
90 701 lin
90 448 lin
249 448 lin
252 429 gm
1 setTxMode
0.5 0.(0.2)ashw
218 448 gm
0 gr
218 453 lin
218 696 gm
218 701 lin
221 429 gm
1 setTxMode
0.5 0.(0.4)ashw
186 448 gm
0 gr
186 453 lin
186 696 gm
186 701 lin
189 429 gm
1 setTxMode
0.5 0.(0.6)ashw
154 448 gm
0 gr
154 453 lin
154 696 gm
154 701 lin
157 429 gm
1 setTxMode
0.5 0.(0.8)ashw
122 448 gm
0 gr
122 453 lin
122 696 gm
122 701 lin
125 439 gm
1 setTxMode
(1)shw
93 429 gm
0.5 0.(1.2)ashw
262 445 gm
(0)shw
249 499 gm
0 gr
246 499 lin
94 499 gm
90 499 lin
262 493 gm
1 setTxMode
(10)shw
249 549 gm
0 gr
246 549 lin
94 549 gm
90 549 lin
262 543 gm
1 setTxMode
(20)shw
249 600 gm
0 gr
246 600 lin
94 600 gm
90 600 lin
262 594 gm
1 setTxMode
(30)shw
249 650 gm
0 gr
246 650 lin
94 650 gm
90 650 lin
262 644 gm
1 setTxMode
(40)shw
262 695 gm
(50)shw
208 453 gm
0 gr
1.5 setlinewidth

209 458 lin
200 463 lin
196 468 lin
191 473 lin
189 478 lin
187 483 lin
183 488 lin
183 494 lin
186 499 lin
191 504 lin
192 509 lin
193 514 lin
195 519 lin
197 524 lin
199 529 lin
200 534 lin
202 539 lin
203 544 lin
204 549 lin
204 554 lin
207 559 lin
208 564 lin
209 569 lin
210 575 lin
211 580 lin
211 585 lin
214 590 lin
215 595 lin
217 600 lin
218 605 lin
220 610 lin
222 615 lin
223 620 lin
224 625 lin
225 630 lin
226 635 lin
228 640 lin
228 645 lin
229 650 lin
230 655 lin
230 661 lin
231 666 lin
233 671 lin
233 676 lin
234 681 lin
234 686 lin
235 691 lin
235 696 lin
236 701 lin
stroke
0.33 setgray

127 453 gm
132 456 lin
137 459 lin
140 463 lin
140 464 lin
140 468 lin
141 472 lin
141 476 lin
141 478 lin
142 480 lin
144 485 lin
145 488 lin
147 490 lin
151 494 lin
156 498 lin
161 501 lin
166 503 lin
169 508 lin
170 509 lin
171 513 lin
173 517 lin
175 519 lin
177 522 lin
180 527 lin
181 529 lin
182 532 lin
184 537 lin
185 539 lin
186 542 lin
186 546 lin
187 549 lin
187 550 lin
187 554 lin
191 559 lin
193 564 lin
195 569 lin
196 573 lin
196 575 lin
196 577 lin
197 581 lin
197 585 lin
200 590 lin
202 595 lin
204 600 lin
205 604 lin
207 608 lin
208 610 lin
210 613 lin
212 618 lin
212 620 lin
212 622 lin
213 626 lin
214 630 lin
215 634 lin
215 635 lin
217 638 lin
219 643 lin
219 645 lin
219 647 lin
220 651 lin
220 655 lin
220 659 lin
220 661 lin
221 663 lin
223 668 lin
224 671 lin
224 673 lin
225 677 lin
225 681 lin
225 685 lin
225 686 lin
225 689 lin
225 693 lin
226 696 lin
226 697 lin
stroke
0.67 setgray

119 453 gm
119 453 lin
124 455 lin
129 457 lin
133 460 lin
135 465 lin
135 469 lin
136 473 lin
137 477 lin
138 481 lin
140 486 lin
142 490 lin
145 494 lin
149 497 lin
153 499 lin
157 502 lin
160 506 lin
163 511 lin
166 516 lin
170 521 lin
173 526 lin
175 531 lin
178 536 lin
179 541 lin
180 545 lin
181 549 lin
182 553 lin
184 557 lin
187 562 lin
189 567 lin
191 572 lin
191 576 lin
191 580 lin
192 584 lin
194 588 lin
197 593 lin
198 597 lin
200 602 lin
202 607 lin
206 612 lin
208 617 lin
208 621 lin
209 625 lin
210 629 lin
211 633 lin
212 637 lin
214 642 lin
215 646 lin
217 651 lin
217 655 lin
217 659 lin
218 663 lin
220 668 lin
221 673 lin
222 677 lin
222 681 lin
222 685 lin
223 689 lin
223 693 lin
223 697 lin
stroke
0. setgray
1. setlinewidth

249 132 gm
249 385 lin
90 385 lin
90 132 lin
249 132 lin
252 113 gm
1 setTxMode
0.5 0.(0.2)ashw
218 132 gm
0 gr
218 137 lin
218 380 gm
218 385 lin
221 113 gm
1 setTxMode
0.5 0.(0.4)ashw
186 132 gm
0 gr
186 137 lin
186 380 gm
186 385 lin
189 113 gm
1 setTxMode
0.5 0.(0.6)ashw
154 132 gm
0 gr
154 137 lin
154 380 gm
154 385 lin
157 113 gm
1 setTxMode
0.5 0.(0.8)ashw
122 132 gm
0 gr
122 137 lin
122 380 gm
122 385 lin
125 123 gm
1 setTxMode
(1)shw
93 113 gm
0.5 0.(1.2)ashw
262 129 gm
(0)shw
249 183 gm
0 gr
246 183 lin
94 183 gm
90 183 lin
262 177 gm
1 setTxMode
(10)shw
249 233 gm
0 gr
246 233 lin
94 233 gm
90 233 lin
262 227 gm
1 setTxMode
(20)shw
249 284 gm
0 gr
246 284 lin
94 284 gm
90 284 lin
262 278 gm
1 setTxMode
(30)shw
249 334 gm
0 gr
246 334 lin
94 334 gm
90 334 lin
262 328 gm
1 setTxMode
(40)shw
262 379 gm
(50)shw
207 137 gm
0 gr
1.5 setlinewidth

212 142 lin
206 147 lin
206 152 lin
204 157 lin
203 162 lin
203 167 lin
199 172 lin
197 178 lin
202 183 lin
210 188 lin
211 193 lin
210 198 lin
212 203 lin
211 208 lin
212 213 lin
213 218 lin
215 223 lin
217 228 lin
217 233 lin
215 238 lin
217 243 lin
216 248 lin
218 253 lin
217 258 lin
216 264 lin
216 269 lin
218 274 lin
218 279 lin
219 284 lin
219 289 lin
222 294 lin
222 299 lin
222 304 lin
223 309 lin
221 314 lin
222 319 lin
222 324 lin
222 329 lin
221 334 lin
222 339 lin
220 345 lin
222 350 lin
222 355 lin
223 360 lin
223 365 lin
223 370 lin
224 375 lin
224 380 lin
223 385 lin
stroke
0.33 setgray

127 137 gm
132 140 lin
137 143 lin
140 147 lin
140 148 lin
140 152 lin
141 156 lin
141 160 lin
141 162 lin
142 164 lin
144 169 lin
145 172 lin
147 174 lin
151 178 lin
156 182 lin
161 185 lin
166 187 lin
169 192 lin
170 193 lin
171 197 lin
173 201 lin
175 203 lin
177 206 lin
180 211 lin
181 213 lin
182 216 lin
184 221 lin
185 223 lin
186 226 lin
186 230 lin
187 233 lin
187 234 lin
187 238 lin
191 243 lin
193 248 lin
195 253 lin
196 257 lin
196 258 lin
197 261 lin
197 265 lin
197 269 lin
200 274 lin
202 279 lin
204 284 lin
205 288 lin
207 292 lin
208 294 lin
210 297 lin
212 302 lin
212 304 lin
212 306 lin
213 310 lin
214 314 lin
215 318 lin
215 319 lin
217 322 lin
219 327 lin
219 329 lin
219 331 lin
220 335 lin
220 339 lin
220 343 lin
220 345 lin
221 347 lin
223 352 lin
224 355 lin
224 357 lin
225 361 lin
225 365 lin
225 369 lin
225 370 lin
225 373 lin
225 377 lin
226 380 lin
226 381 lin
stroke
0.67 setgray

119 137 gm
119 137 lin
124 139 lin
129 141 lin
133 144 lin
135 149 lin
135 153 lin
136 157 lin
137 161 lin
138 165 lin
140 170 lin
142 174 lin
145 178 lin
149 181 lin
153 183 lin
157 186 lin
160 190 lin
163 195 lin
166 200 lin
170 205 lin
173 210 lin
175 215 lin
178 220 lin
179 225 lin
180 229 lin
181 233 lin
182 237 lin
184 241 lin
187 246 lin
189 251 lin
191 256 lin
191 260 lin
191 264 lin
192 268 lin
194 272 lin
197 277 lin
198 281 lin
200 286 lin
202 291 lin
206 296 lin
208 301 lin
208 305 lin
209 309 lin
210 313 lin
211 317 lin
212 321 lin
214 326 lin
215 330 lin
217 335 lin
217 339 lin
217 343 lin
218 347 lin
220 352 lin
221 357 lin
222 361 lin
222 365 lin
222 369 lin
223 373 lin
223 377 lin
223 381 lin

stroke
grestore
%%EOF

%%EndDocument
 GE /Times-Bold SF
16687 70152 MT
(Figure 2-19:)SH
/Times-Roman SF
23010 XM
(Empirical learning curves showing the effect of)SH
/Symbol SF
44237 XM
(h)SH
/Times-Roman SF
45175 XM
(on LMS-C)SH
21921 71348 MT
(convergence:)SH
/Symbol SF
28058 XM
(h)SH
/Times-Roman SF
28996 XM
(= \050a\051 1, \050b\051 11, \050c\051 21, and \050d\051 31;)SH
/Symbol SF
43939 XM
(d)SH
/Times-Roman SF
44757 XM
(= 1.0,)SH
/Symbol SF
47577 XM
(r)SH
/Times-Roman SF
48456 XM
(= 0.5.)SH
ES
%%Page: 46 47
BS
0 SI
10 /Times-Roman AF
54800 4286 MT
(46)SH
11 SS 
1064 1000 270 53250 68400 GB 
%%BeginDocument: /usr0/rozzi/Documentation/PhDThesis/Chapter2/beta4.eps
%!PS-Adobe-2.0 EPSF-1.2
%%Creator:Rozzi
%%Title:f1.ps
%%Origin:0 720
%%BoundingBox: 0 0 575 375  %CHANGE?
%%EndComments

gsave

%some definitions necessary for Macintosh graphs
/gm{exch moveto} def
/gr{setgray} def
/lin {exch lineto}def   % y x
/ashw{1. -1. scale ashow 1. -1. scale} def
/shw{1. -1. scale show 1. -1. scale} def
/shwrotate{1. -1. scale 90 rotate show  -90 rotate 1. -1. scale} def
/setTxMode {pop} def

% adjust the coordinate system
-95.  445.000 translate %ADJUST?
0.92 -0.92 scale
/Times-Roman findfont  10.0 scalefont setfont

% plot labels and legend
gsave
125 335 gm
(\(a\)) shw
125 650 gm
(\(b\)) shw
350 335 gm
(\(c\)) shw
350 650 gm
(\(d\)) shw
117 240 gm
0.67 setgray
1.75 setlinewidth
117 260 lin
stroke
128 240 gm
0.33 setgray
1.75 setlinewidth
128 260 lin
stroke
139 240 gm
0.0 setgray
1.75 setlinewidth
139 260 lin
stroke
120 270 gm
(ML) shw
131 270 gm
(EMAP) shw
142 270 gm
(LMS-C) shw
grestore

% <<MAC BODY GOES HERE; CONVERT show & ashow to shw & ashw! >>
% may have to get a few commands from the beginning of a file- be careful
%  to save the original .ps until complete!
249 132 gm
249 385 lin
90 385 lin
90 132 lin
249 132 lin
252 123 gm
(0)shw
210 132 gm
0 gr
210 137 lin
210 380 gm
210 385 lin
213 113 gm
1 setTxMode
0.5 0.(0.1)ashw
170 132 gm
0 gr
170 137 lin
170 380 gm
170 385 lin
173 113 gm
1 setTxMode
0.5 0.(0.2)ashw
130 132 gm
0 gr
130 137 lin
130 380 gm
130 385 lin
133 113 gm
1 setTxMode
0.5 0.(0.3)ashw
93 113 gm
0.5 0.(0.4)ashw
262 129 gm
(0)shw
249 183 gm
0 gr
246 183 lin
94 183 gm
90 183 lin
262 177 gm
1 setTxMode
(10)shw
249 233 gm
0 gr
246 233 lin
94 233 gm
90 233 lin
262 227 gm
1 setTxMode
(20)shw
249 284 gm
0 gr
246 284 lin
94 284 gm
90 284 lin
262 278 gm
1 setTxMode
(30)shw
249 334 gm
0 gr
246 334 lin
94 334 gm
90 334 lin
262 328 gm
1 setTxMode
(40)shw
262 379 gm
(50)shw
125 137 gm
0 gr
1.5 setlinewidth
175 142 lin
145 147 lin
150 152 lin
150 157 lin
145 162 lin
143 167 lin
126 172 lin
127 178 lin
151 183 lin
191 188 lin
197 193 lin
200 198 lin
204 203 lin
200 208 lin
206 213 lin
214 218 lin
219 223 lin
225 228 lin
228 233 lin
222 238 lin
224 243 lin
225 248 lin
231 253 lin
232 258 lin
233 264 lin
234 269 lin
234 274 lin
236 279 lin
236 284 lin
237 289 lin
241 294 lin
241 299 lin
242 304 lin
244 309 lin
242 314 lin
242 319 lin
240 324 lin
240 329 lin
241 334 lin
241 339 lin
238 345 lin
239 350 lin
239 355 lin
239 360 lin
238 365 lin
238 370 lin
238 375 lin
237 380 lin
238 385 lin
stroke
0.33 setgray
107 137 gm
115 138 lin
123 139 lin
131 140 lin
139 140 lin
147 141 lin
155 143 lin
159 146 lin
159 149 lin
157 152 lin
155 153 lin
150 155 lin
145 157 lin
140 158 lin
135 159 lin
130 160 lin
125 161 lin
120 162 lin
116 164 lin
112 165 lin
108 166 lin
105 168 lin
103 172 lin
104 173 lin
108 175 lin
112 177 lin
116 178 lin
124 179 lin
132 180 lin
140 181 lin
148 182 lin
156 183 lin
163 184 lin
170 184 lin
177 185 lin
184 186 lin
191 186 lin
198 187 lin
205 188 lin
209 188 lin
211 191 lin
212 196 lin
212 198 lin
213 200 lin
213 205 lin
211 208 lin
213 210 lin
217 213 lin
221 215 lin
225 216 lin
229 218 lin
233 221 lin
235 223 lin
237 225 lin
240 230 lin
240 233 lin
239 234 lin
235 236 lin
232 238 lin
232 239 lin
232 243 lin
230 248 lin
235 252 lin
237 253 lin
238 256 lin
240 261 lin
240 264 lin
240 265 lin
240 269 lin
239 273 lin
241 277 lin
242 279 lin
242 282 lin
242 286 lin
241 289 lin
242 290 lin
245 295 lin
246 299 lin
246 303 lin
246 304 lin
247 307 lin
247 312 lin
246 314 lin
245 317 lin
244 321 lin
243 324 lin
243 326 lin
243 330 lin
244 334 lin
243 338 lin
243 339 lin
241 342 lin
240 346 lin
241 350 lin
241 354 lin
241 355 lin
241 358 lin
240 362 lin
239 365 lin
239 367 lin
239 371 lin
239 375 lin
238 379 lin
238 380 lin
239 383 lin
stroke
0.67 gr
161 137 gm
161 137 lin
169 138 lin
177 138 lin
185 139 lin
193 139 lin
201 140 lin
209 141 lin
217 141 lin
225 142 lin
225 145 lin
221 149 lin
216 153 lin
211 155 lin
206 157 lin
201 158 lin
196 159 lin
191 160 lin
186 161 lin
181 162 lin
177 164 lin
173 165 lin
169 166 lin
165 167 lin
160 169 lin
155 170 lin
150 172 lin
148 176 lin
150 178 lin
157 179 lin
164 180 lin
171 181 lin
178 181 lin
185 182 lin
192 183 lin
199 184 lin
204 185 lin
209 186 lin
214 187 lin
219 188 lin
224 193 lin
223 197 lin
225 201 lin
225 206 lin
225 211 lin
229 214 lin
234 216 lin
239 218 lin
244 223 lin
248 228 lin
248 232 lin
245 236 lin
242 241 lin
239 246 lin
240 251 lin
244 256 lin
246 261 lin
246 265 lin
247 269 lin
245 274 lin
246 278 lin
246 282 lin
246 286 lin
245 290 lin
246 294 lin
247 298 lin
247 302 lin
247 306 lin
247 310 lin
247 314 lin
246 318 lin
246 322 lin
246 326 lin
245 330 lin
246 334 lin
245 338 lin
243 342 lin
242 346 lin
243 350 lin
244 354 lin
243 358 lin
242 362 lin
241 367 lin
241 371 lin
241 375 lin
239 380 lin
stroke
1.0 setlinewidth
0.0 gr
249 448 gm
249 701 lin
90 701 lin
90 448 lin
249 448 lin
252 439 gm
1 setTxMode
(0)shw
210 448 gm
0 gr
210 453 lin
210 696 gm
210 701 lin
213 429 gm
1 setTxMode
0.5 0.(0.1)ashw
170 448 gm
0 gr
170 453 lin
170 696 gm
170 701 lin
173 429 gm
1 setTxMode
0.5 0.(0.2)ashw
130 448 gm
0 gr
130 453 lin
130 696 gm
130 701 lin
133 429 gm
1 setTxMode
0.5 0.(0.3)ashw
93 429 gm
0.5 0.(0.4)ashw
262 445 gm
(0)shw
249 499 gm
0 gr
246 499 lin
94 499 gm
90 499 lin
262 493 gm
1 setTxMode
(10)shw
249 549 gm
0 gr
246 549 lin
94 549 gm
90 549 lin
262 543 gm
1 setTxMode
(20)shw
249 600 gm
0 gr
246 600 lin
94 600 gm
90 600 lin
262 594 gm
1 setTxMode
(30)shw
249 650 gm
0 gr
246 650 lin
94 650 gm
90 650 lin
262 644 gm
1 setTxMode
(40)shw
262 695 gm
(50)shw
141 453 gm
0 gr
1.5 setlinewidth
193 458 lin
173 463 lin
179 468 lin
179 473 lin
172 478 lin
166 483 lin
147 488 lin
144 494 lin
167 499 lin
203 504 lin
209 509 lin
212 514 lin
216 519 lin
212 524 lin
216 529 lin
224 534 lin
229 539 lin
234 544 lin
236 549 lin
231 554 lin
232 559 lin
233 564 lin
237 569 lin
238 575 lin
239 580 lin
240 585 lin
239 590 lin
241 595 lin
241 600 lin
240 605 lin
243 610 lin
244 615 lin
244 620 lin
246 625 lin
244 630 lin
244 635 lin
243 640 lin
242 645 lin
243 650 lin
242 655 lin
240 661 lin
240 666 lin
240 671 lin
240 676 lin
239 681 lin
238 686 lin
238 691 lin
237 696 lin
238 701 lin
stroke
0.33 setgray
107 453 gm
115 454 lin
123 455 lin
131 456 lin
139 456 lin
147 457 lin
155 459 lin
159 462 lin
159 465 lin
157 468 lin
155 469 lin
150 471 lin
145 473 lin
140 474 lin
135 475 lin
130 476 lin
125 477 lin
120 478 lin
116 480 lin
112 481 lin
108 482 lin
105 484 lin
103 488 lin
104 489 lin
108 491 lin
112 493 lin
116 494 lin
124 495 lin
132 496 lin
140 497 lin
148 498 lin
156 499 lin
163 500 lin
170 500 lin
177 501 lin
184 502 lin
191 502 lin
198 503 lin
205 504 lin
209 504 lin
211 507 lin
212 512 lin
212 514 lin
213 516 lin
213 521 lin
211 524 lin
213 526 lin
217 529 lin
221 531 lin
225 532 lin
229 534 lin
233 537 lin
235 539 lin
237 541 lin
240 546 lin
240 549 lin
239 550 lin
235 552 lin
232 554 lin
232 555 lin
232 559 lin
230 564 lin
235 568 lin
237 569 lin
238 572 lin
239 576 lin
240 580 lin
240 584 lin
240 585 lin
239 588 lin
240 592 lin
242 595 lin
242 597 lin
242 601 lin
241 605 lin
245 610 lin
246 614 lin
246 618 lin
246 620 lin
247 622 lin
247 627 lin
246 630 lin
246 632 lin
245 636 lin
243 640 lin
243 641 lin
243 645 lin
244 649 lin
243 653 lin
243 655 lin
242 657 lin
240 661 lin
241 665 lin
241 669 lin
241 671 lin
241 673 lin
241 677 lin
239 681 lin
239 682 lin
239 686 lin
239 690 lin
238 694 lin
238 696 lin
238 698 lin
stroke
0.67 setgray
161 453 gm
161 453 lin
169 454 lin
177 454 lin
185 455 lin
193 455 lin
201 456 lin
209 457 lin
217 457 lin
225 458 lin
225 461 lin
221 465 lin
216 469 lin
211 471 lin
206 473 lin
201 474 lin
196 475 lin
191 476 lin
186 477 lin
181 478 lin
177 480 lin
173 481 lin
169 482 lin
165 483 lin
160 485 lin
155 486 lin
150 488 lin
148 492 lin
150 494 lin
157 495 lin
164 496 lin
171 497 lin
178 497 lin
185 498 lin
192 499 lin
199 500 lin
204 501 lin
209 502 lin
214 503 lin
219 504 lin
224 509 lin
223 513 lin
225 517 lin
225 522 lin
225 527 lin
229 530 lin
234 532 lin
239 534 lin
244 539 lin
248 544 lin
248 548 lin
245 552 lin
242 557 lin
239 562 lin
240 567 lin
244 572 lin
245 576 lin
246 580 lin
247 584 lin
246 588 lin
246 593 lin
246 597 lin
246 601 lin
245 605 lin
246 609 lin
247 613 lin
247 617 lin
247 621 lin
247 625 lin
247 629 lin
246 633 lin
246 637 lin
246 641 lin
245 645 lin
246 649 lin
245 653 lin
244 657 lin
242 661 lin
243 665 lin
244 669 lin
244 673 lin
243 677 lin
241 682 lin
241 686 lin
241 690 lin
240 694 lin
240 699 lin
stroke
0.0 setgray
1.0 setlinewidth
466 132 gm
466 385 lin
307 385 lin
307 132 lin
466 132 lin
469 123 gm
1 setTxMode
(0)shw
427 132 gm
0 gr
427 137 lin
427 380 gm
427 385 lin
430 113 gm
1 setTxMode
0.5 0.(0.1)ashw
387 132 gm
0 gr
387 137 lin
387 380 gm
387 385 lin
390 113 gm
1 setTxMode
0.5 0.(0.2)ashw
347 132 gm
0 gr
347 137 lin
347 380 gm
347 385 lin
350 113 gm
1 setTxMode
0.5 0.(0.3)ashw
310 113 gm
0.5 0.(0.4)ashw
479 129 gm
(0)shw
466 183 gm
0 gr
463 183 lin
311 183 gm
307 183 lin
479 177 gm
1 setTxMode
(10)shw
466 233 gm
0 gr
463 233 lin
311 233 gm
307 233 lin
479 227 gm
1 setTxMode
(20)shw
466 284 gm
0 gr
463 284 lin
311 284 gm
307 284 lin
479 278 gm
1 setTxMode
(30)shw
466 334 gm
0 gr
463 334 lin
311 334 gm
307 334 lin
479 328 gm
1 setTxMode
(40)shw
479 379 gm
(50)shw
386 137 gm
0 gr
1.5 setlinewidth
450 142 lin
430 147 lin
425 152 lin
412 157 lin
391 162 lin
378 167 lin
355 172 lin
355 178 lin
397 183 lin
435 188 lin
439 193 lin
438 198 lin
441 203 lin
435 208 lin
439 213 lin
450 218 lin
455 223 lin
459 228 lin
460 233 lin
453 238 lin
451 243 lin
450 248 lin
455 253 lin
457 258 lin
458 264 lin
458 269 lin
457 274 lin
459 279 lin
459 284 lin
458 289 lin
462 294 lin
463 299 lin
463 304 lin
464 309 lin
462 314 lin
461 319 lin
459 324 lin
459 329 lin
459 334 lin
459 339 lin
455 345 lin
455 350 lin
456 355 lin
455 360 lin
454 365 lin
454 370 lin
454 375 lin
453 380 lin
454 385 lin
stroke
0.33 setgray
324 137 gm
332 138 lin
340 139 lin
348 140 lin
356 140 lin
364 141 lin
372 143 lin
376 146 lin
376 149 lin
374 152 lin
372 153 lin
367 155 lin
362 157 lin
357 158 lin
352 159 lin
347 160 lin
342 161 lin
337 162 lin
333 164 lin
329 165 lin
325 166 lin
322 168 lin
320 172 lin
321 173 lin
325 175 lin
329 177 lin
333 178 lin
341 179 lin
349 180 lin
357 181 lin
365 182 lin
373 183 lin
380 184 lin
387 184 lin
394 185 lin
401 186 lin
408 186 lin
415 187 lin
422 188 lin
426 188 lin
428 191 lin
429 196 lin
429 198 lin
430 200 lin
430 205 lin
428 208 lin
430 210 lin
434 213 lin
438 215 lin
442 216 lin
446 218 lin
450 221 lin
452 223 lin
454 225 lin
457 230 lin
457 233 lin
456 234 lin
452 236 lin
449 238 lin
449 239 lin
449 243 lin
447 248 lin
452 252 lin
454 253 lin
455 256 lin
457 261 lin
457 264 lin
457 265 lin
457 269 lin
456 273 lin
458 277 lin
459 279 lin
459 282 lin
459 286 lin
458 289 lin
459 290 lin
462 295 lin
463 299 lin
463 303 lin
463 304 lin
464 307 lin
464 312 lin
463 314 lin
462 317 lin
461 321 lin
460 324 lin
460 326 lin
460 330 lin
461 334 lin
460 338 lin
460 339 lin
458 342 lin
457 346 lin
458 350 lin
458 354 lin
458 355 lin
458 358 lin
457 362 lin
456 365 lin
456 367 lin
456 371 lin
456 375 lin
455 379 lin
455 380 lin
456 383 lin
stroke
0.67 setgray
378 137 gm
378 137 lin
386 138 lin
394 138 lin
402 139 lin
410 139 lin
418 140 lin
426 141 lin
434 141 lin
442 142 lin
442 145 lin
438 149 lin
433 153 lin
428 155 lin
423 157 lin
418 158 lin
413 159 lin
408 160 lin
403 161 lin
398 162 lin
394 164 lin
390 165 lin
386 166 lin
382 167 lin
377 169 lin
372 170 lin
367 172 lin
365 176 lin
367 178 lin
374 179 lin
381 180 lin
388 181 lin
395 181 lin
402 182 lin
409 183 lin
416 184 lin
421 185 lin
426 186 lin
431 187 lin
436 188 lin
441 193 lin
440 197 lin
442 201 lin
442 206 lin
442 211 lin
446 214 lin
451 216 lin
456 218 lin
461 223 lin
465 228 lin
465 232 lin
462 236 lin
459 241 lin
456 246 lin
457 251 lin
461 256 lin
463 261 lin
463 265 lin
464 269 lin
462 274 lin
463 278 lin
463 282 lin
463 286 lin
462 290 lin
463 294 lin
464 298 lin
464 302 lin
464 306 lin
464 310 lin
464 314 lin
463 318 lin
463 322 lin
463 326 lin
462 330 lin
463 334 lin
462 338 lin
460 342 lin
459 346 lin
460 350 lin
461 354 lin
460 358 lin
459 362 lin
458 367 lin
458 371 lin
458 375 lin
456 380 lin
stroke
0.0 setgray
1.0 setlinewidth
466 448 gm
466 701 lin
307 701 lin
307 448 lin
466 448 lin
469 439 gm
1 setTxMode
(0)shw
440 448 gm
0 gr
440 453 lin
440 696 gm
440 701 lin
443 439 gm
1 setTxMode
(5)shw
413 448 gm
0 gr
413 453 lin
413 696 gm
413 701 lin
416 433 gm
1 setTxMode
(10)shw
387 448 gm
0 gr
387 453 lin
387 696 gm
387 701 lin
390 433 gm
1 setTxMode
(15)shw
360 448 gm
0 gr
360 453 lin
360 696 gm
360 701 lin
363 433 gm
1 setTxMode
(20)shw
334 448 gm
0 gr
334 453 lin
334 696 gm
334 701 lin
337 433 gm
1 setTxMode
(25)shw
310 433 gm
(30)shw
479 445 gm
(0)shw
466 499 gm
0 gr
463 499 lin
311 499 gm
307 499 lin
479 493 gm
1 setTxMode
(10)shw
466 549 gm
0 gr
463 549 lin
311 549 gm
307 549 lin
479 543 gm
1 setTxMode
(20)shw
466 600 gm
0 gr
463 600 lin
311 600 gm
307 600 lin
479 594 gm
1 setTxMode
(30)shw
466 650 gm
0 gr
463 650 lin
311 650 gm
307 650 lin
479 644 gm
1 setTxMode
(40)shw
479 695 gm
(50)shw
463 453 gm
0 gr
1.5 setlinewidth
465 458 lin
466 463 lin
464 468 lin
465 473 lin
460 478 lin
456 483 lin
428 488 lin
383 494 lin
347 499 lin
344 504 lin
340 509 lin
331 514 lin
334 519 lin
338 524 lin
333 529 lin
400 534 lin
437 539 lin
463 544 lin
465 549 lin
466 554 lin
466 559 lin
466 564 lin
466 569 lin
466 575 lin
466 580 lin
466 585 lin
466 590 lin
466 595 lin
466 600 lin
466 605 lin
466 610 lin
466 615 lin
466 620 lin
466 625 lin
466 630 lin
466 635 lin
466 640 lin
466 645 lin
466 650 lin
466 655 lin
466 661 lin
466 666 lin
466 671 lin
466 676 lin
466 681 lin
466 686 lin
466 691 lin
466 696 lin
466 701 lin
stroke
0.33 setgray
465 453 gm
465 457 lin
465 461 lin
465 463 lin
465 465 lin
465 469 lin
465 473 lin
465 477 lin
465 478 lin
464 481 lin
464 485 lin
464 488 lin
464 489 lin
465 493 lin
465 494 lin
465 497 lin
465 501 lin
466 504 lin
466 505 lin
466 509 lin
466 513 lin
466 517 lin
466 519 lin
466 521 lin
466 525 lin
466 529 lin
466 533 lin
466 534 lin
466 537 lin
466 541 lin
466 544 lin
466 545 lin
466 549 lin
466 553 lin
466 557 lin
466 559 lin
466 561 lin
466 565 lin
466 569 lin
466 573 lin
466 575 lin
466 577 lin
466 581 lin
466 585 lin
466 589 lin
466 590 lin
466 593 lin
466 597 lin
466 600 lin
466 601 lin
466 605 lin
466 609 lin
466 613 lin
466 615 lin
466 617 lin
466 621 lin
466 625 lin
466 629 lin
466 630 lin
466 633 lin
466 637 lin
466 640 lin
466 641 lin
466 645 lin
466 649 lin
466 653 lin
466 655 lin
466 657 lin
466 661 lin
466 665 lin
466 669 lin
466 671 lin
466 673 lin
466 677 lin
466 681 lin
466 685 lin
466 686 lin
466 689 lin
466 693 lin
466 696 lin
466 697 lin
stroke
0.67 setgray
465 453 gm
465 453 lin
466 457 lin
466 461 lin
466 465 lin
466 469 lin
466 473 lin
465 477 lin
465 481 lin
465 485 lin
465 489 lin
465 493 lin
466 497 lin
466 501 lin
466 505 lin
466 509 lin
466 513 lin
466 517 lin
466 521 lin
466 525 lin
466 529 lin
466 533 lin
466 537 lin
466 541 lin
466 545 lin
466 549 lin
466 553 lin
466 557 lin
466 561 lin
466 565 lin
466 569 lin
466 573 lin
466 577 lin
466 581 lin
466 585 lin
466 589 lin
466 593 lin
466 597 lin
466 601 lin
466 605 lin
466 609 lin
466 613 lin
466 617 lin
466 621 lin
466 625 lin
466 629 lin
466 633 lin
466 637 lin
466 641 lin
466 645 lin
466 649 lin
466 653 lin
466 657 lin
466 661 lin
466 665 lin
466 669 lin
466 673 lin
466 677 lin
466 681 lin
466 685 lin
466 689 lin
466 693 lin
466 697 lin
stroke
grestore
%%EOF

%%EndDocument
 GE /Times-Bold SF
18399 70152 MT
(Figure 2-20:)SH
/Times-Roman SF
24722 XM
(Empirical learning curves for varying)SH
/Symbol SF
41551 XM
(b)SH
/Times-Roman SF
42430 XM
(scale factors:)SH
/Symbol SF
22085 71348 MT
(b)SH
/Times-Roman SF
22964 XM
(= \050a\051 0.25, \050b\051 0.5, \050c\051 1.0, and \050d\051 2.0;)SH
/Symbol SF
40107 XM
(d)SH
/Times-Roman SF
40925 XM
(= 1.0,)SH
/Symbol SF
43745 XM
(r)SH
/Times-Roman SF
44624 XM
(= 0.5,)SH
/Symbol SF
47444 XM
(q)SH
/Times-Roman SF
48292 XM
(= 1.0.)SH
ES
%%Page: 47 48
BS
0 SI
10 /Times-Roman AF
54800 4286 MT
(47)SH
11 SS 
10800 7955 MT
(mation on the location of the mean,)92 W
/Times-Italic SF
27330 XM
(i.e.)SH
/Times-Roman SF
(, values near the mean are more likely, the)
92 W( LMS estimate is)91 W
10800 9694 MT
(able to converge to the mean.  Since the LMS-C algorithm effectively computes a)
175 W( time-averaged)176 W
10800 11433 MT
(correlation matrix, it more accurately reflects the ensemble statistics when the data)
75 W( are not normally)74 W
10800 13172 MT
(distributed. The)
633 W( EMAP algorithm does not have this capability due to)
179 W( its use of fixed ensemble)180 W
10800 14911 MT
(statistics and)
5 W( a deterministic method of updating its coefficients. In cases where the data does not tend)4 W
10800 16650 MT
(toward the mean \050as in the uniform case\051, the estimates may not converge)
81 W( or show any reduction in)82 W
10800 18389 MT
(MSE.)SH
13 /Times-Bold AF
10800 22140 MT
(2.9. Computational Complexity)SH
11 /Times-Roman AF
13300 25055 MT
(The computational requirements of each of the algorithms presented in this chapter are)
142 W( sum-)141 W
10800 26794 MT
(marized in Table 2-1.)
133 W( The)
543 W( quantities in this table represent the number of multiplications and ad-)134 W
10800 28533 MT
(ditions which are required to compute the)
117 W( updated estimate after obtaining a single sample,)116 W
/Times-Italic SF
52783 XM
(i.e.)SH
/Times-Roman SF
54518 XM
(for)SH
10800 30272 MT
(one iteration.)
125 W( These)
527 W( data are illustrated in Figure 2-24 which plots the sum of multiplications and)126 W
10800 32011 MT
(additions versus the product CD \050the dimension of the adaptation statistics\051. As the)
47 W( Figure and Table)46 W
10800 33750 MT
(indicate, the)
152 W( computational requirements of the LMS-C algorithm are about one-third those of the)153 W
10800 35489 MT
(EMAP estimate.  It should be pointed out that these calculations are based on non-optimized)
165 W( im-)164 W
10800 37228 MT
(plementations of the EMAP and LMS-C algorithms;)
52 W( it may be possible to reduce the computation in)53 W
10800 38967 MT
(each by the use of optimized matrix manipulation and inversion procedures.)SH
13 /Times-Bold AF
10800 42718 MT
(2.10. Summary)SH
11 /Times-Roman AF
13300 45633 MT
(In this chapter, the extended maximum)225 W
/Times-Italic SF
32093 XM
(a posteriori)225 W
/Times-Roman SF
37983 XM
(mean vector)
225 W( estimation procedure was)224 W
10800 47372 MT
(recast as an adaptive filtering problem.  The EMAP procedure was shown)
172 W( to be equivalent to an)173 W
10800 49111 MT
(MMSE adaptive filtering with)
1 W( time-varying statistics and performance surface.  An implementation of)SH
10800 50850 MT
(the MMSE algorithm was then developed using the)
8 W( stochastic gradient algorithm.  The resulting LMS)9 W
10800 52589 MT
(formulation for multivariate mean vector estimation was shown to be stable)
68 W( under conditions of low)67 W
10800 54328 MT
(dogmatism.)SH
13300 57313 MT
(Proper initialization of the LMS parameters is necessary to obtain good adaptation performance)34 W
10800 59052 MT
(from this algorithm.  Analysis of the expected error of the LMS coefficients under)
8 W( conditions of small)7 W
10800 60791 MT
(dogmatism resulted in a recursive expression for that error.  Minimization of)
131 W( the initial coefficient)132 W
10800 62530 MT
(error was therefore necessary to keep the coefficient error small.  Since the)
93 W( optimal coefficients are)92 W
10800 64269 MT
(specified by the EMAP expression, the EMAP coefficients were used)
SH( to initialize the LMS coefficient)1 W
10800 66008 MT
(matrix)SH
/Times-Bold SF
14076 XM
(H)SH
/Times-Roman SF
(. Initializing)
533 W( the)
129 W( LMS coefficients in this manner incorporates)128 W
/Times-Italic SF
43984 XM
(a priori)128 W
/Times-Roman SF
47908 XM
(knowledge of the)128 W
10800 67747 MT
(structure of the data into the)
72 W( LMS estimate, which was empirically shown to produce a lower initial)73 W
10800 69486 MT
(mean-square error than other methods of initialization.)SH
ES
%%Page: 48 49
BS
0 SI
10 /Times-Roman AF
54800 4286 MT
(48)SH
11 SS 
1064 1000 270 53250 68400 GB 
%%BeginDocument: /usr0/rozzi/Documentation/PhDThesis/Chapter2/norm4.eps
%!PS-Adobe-2.0 EPSF-1.2
%%Creator:Rozzi
%%Title:f1.ps
%%Origin:0 720
%%BoundingBox: 0 0 575 375  %CHANGE?
%%EndComments

gsave

%some definitions necessary for Macintosh graphs
/gm{exch moveto} def
/gr{setgray} def
/lin {exch lineto}def   % y x
/ashw{1. -1. scale ashow 1. -1. scale} def
/shw{1. -1. scale show 1. -1. scale} def
/shwrotate{1. -1. scale 90 rotate show  -90 rotate 1. -1. scale} def
/setTxMode {pop} def

% adjust the coordinate system
-95.  445.000 translate %ADJUST?
0.92 -0.92 scale
/Times-Roman findfont  10.0 scalefont setfont
% plot labels and legend
gsave
125 335 gm
(\(a\)) shw
125 650 gm
(\(b\)) shw
350 335 gm
(\(c\)) shw
350 650 gm
(\(d\)) shw
117 240 gm
0.67 setgray
1.75 setlinewidth
117 260 lin
stroke
128 240 gm
0.33 setgray
1.75 setlinewidth
128 260 lin
stroke
139 240 gm
0.0 setgray
1.75 setlinewidth
139 260 lin
stroke
120 270 gm
(ML) shw
131 270 gm
(EMAP) shw
142 270 gm
(LMS-C) shw
grestore

% <<MAC BODY GOES HERE; CONVERT show & ashow to shw & ashw! >>
% may have to get a few commands from the beginning of a file- be careful
%  to save the original .ps until complete!
466 448 gm
466 701 lin
307 701 lin
307 448 lin
466 448 lin
469 439 gm
(0)shw
440 448 gm
0 gr
440 453 lin
440 696 gm
440 701 lin
443 429 gm
1 setTxMode
0.5 0.(0.2)ashw
413 448 gm
0 gr
413 453 lin
413 696 gm
413 701 lin
416 429 gm
1 setTxMode
0.5 0.(0.4)ashw
387 448 gm
0 gr
387 453 lin
387 696 gm
387 701 lin
390 429 gm
1 setTxMode
0.5 0.(0.6)ashw
360 448 gm
0 gr
360 453 lin
360 696 gm
360 701 lin
363 429 gm
1 setTxMode
0.5 0.(0.8)ashw
334 448 gm
0 gr
334 453 lin
334 696 gm
334 701 lin
337 439 gm
1 setTxMode
(1)shw
310 429 gm
0.5 0.(1.2)ashw
479 445 gm
(0)shw
466 499 gm
0 gr
463 499 lin
311 499 gm
307 499 lin
479 493 gm
1 setTxMode
(10)shw
466 549 gm
0 gr
463 549 lin
311 549 gm
307 549 lin
479 543 gm
1 setTxMode
(20)shw
466 600 gm
0 gr
463 600 lin
311 600 gm
307 600 lin
479 594 gm
1 setTxMode
(30)shw
466 650 gm
0 gr
463 650 lin
311 650 gm
307 650 lin
479 644 gm
1 setTxMode
(40)shw
479 695 gm
(50)shw
432 453 gm
0 gr
1.5 setlinewidth 
439 458 lin
437 463 lin
437 468 lin
436 473 lin
435 478 lin
434 483 lin
432 488 lin
431 494 lin
433 499 lin
437 504 lin
438 509 lin
438 514 lin
439 519 lin
439 524 lin
440 529 lin
440 534 lin
441 539 lin
442 544 lin
442 549 lin
442 554 lin
443 559 lin
443 564 lin
444 569 lin
443 575 lin
444 580 lin
444 585 lin
445 590 lin
445 595 lin
446 600 lin
446 605 lin
447 610 lin
448 615 lin
448 620 lin
448 625 lin
448 630 lin
449 635 lin
449 640 lin
450 645 lin
449 650 lin
449 655 lin
449 661 lin
450 666 lin
451 671 lin
451 676 lin
451 681 lin
451 686 lin
452 691 lin
452 696 lin
452 701 lin
stroke
0.33 setgray

372 453 gm
377 458 lin
379 463 lin
378 467 lin
377 471 lin
377 473 lin
377 475 lin
376 479 lin
375 483 lin
377 488 lin
380 492 lin
383 496 lin
386 499 lin
388 500 lin
393 504 lin
394 508 lin
395 512 lin
395 514 lin
396 516 lin
398 521 lin
399 524 lin
400 526 lin
401 531 lin
402 534 lin
402 535 lin
403 539 lin
404 543 lin
405 547 lin
405 549 lin
405 551 lin
405 555 lin
407 559 lin
407 560 lin
409 565 lin
410 569 lin
410 573 lin
410 575 lin
410 577 lin
410 581 lin
411 585 lin
412 589 lin
412 590 lin
413 593 lin
413 597 lin
414 600 lin
414 601 lin
415 605 lin
417 610 lin
419 615 lin
419 619 lin
420 623 lin
420 625 lin
420 627 lin
421 631 lin
421 635 lin
423 640 lin
423 644 lin
424 648 lin
424 650 lin
424 652 lin
424 656 lin
424 660 lin
425 664 lin
425 666 lin
425 668 lin
426 672 lin
427 676 lin
427 680 lin
427 681 lin
427 684 lin
427 688 lin
427 691 lin
427 692 lin
427 696 lin
428 700 lin
stroke
0.67 setgray

322 453 gm
322 453 lin
327 455 lin
332 458 lin
335 462 lin
336 467 lin
337 471 lin
337 475 lin
338 479 lin
340 484 lin
341 488 lin
344 492 lin
348 496 lin
352 499 lin
357 504 lin
360 509 lin
361 513 lin
363 517 lin
367 522 lin
370 527 lin
372 532 lin
374 537 lin
375 542 lin
376 546 lin
377 551 lin
378 555 lin
381 560 lin
383 565 lin
384 569 lin
385 573 lin
386 577 lin
386 581 lin
387 585 lin
390 590 lin
390 594 lin
392 598 lin
394 603 lin
395 607 lin
398 612 lin
400 617 lin
400 621 lin
401 625 lin
403 630 lin
403 634 lin
405 638 lin
407 643 lin
407 647 lin
408 651 lin
408 655 lin
409 659 lin
409 663 lin
410 667 lin
412 672 lin
413 676 lin
413 680 lin
413 684 lin
413 688 lin
414 692 lin
414 696 lin
415 700 lin
stroke
0. setgray
1. setlinewidth

466 132 gm
466 385 lin
307 385 lin
307 132 lin
466 132 lin
469 113 gm
1 setTxMode
0.5 0.(0.2)ashw
427 132 gm
0 gr
427 137 lin
427 380 gm
427 385 lin
430 113 gm
1 setTxMode
0.5 0.(0.4)ashw
387 132 gm
0 gr
387 137 lin
387 380 gm
387 385 lin
390 113 gm
1 setTxMode
0.5 0.(0.6)ashw
347 132 gm
0 gr
347 137 lin
347 380 gm
347 385 lin
350 113 gm
1 setTxMode
0.5 0.(0.8)ashw
310 123 gm
(1)shw
479 129 gm
(0)shw
466 183 gm
0 gr
463 183 lin
311 183 gm
307 183 lin
479 177 gm
1 setTxMode
(10)shw
466 233 gm
0 gr
463 233 lin
311 233 gm
307 233 lin
479 227 gm
1 setTxMode
(20)shw
466 284 gm
0 gr
463 284 lin
311 284 gm
307 284 lin
479 278 gm
1 setTxMode
(30)shw
466 334 gm
0 gr
463 334 lin
311 334 gm
307 334 lin
479 328 gm
1 setTxMode
(40)shw
479 379 gm
(50)shw
400 137 gm
0 gr
1.5 setlinewidth

404 142 lin
397 147 lin
394 152 lin
392 157 lin
390 162 lin
390 167 lin
388 172 lin
389 178 lin
393 183 lin
399 188 lin
402 193 lin
403 198 lin
405 203 lin
408 208 lin
410 213 lin
412 218 lin
414 223 lin
416 228 lin
417 233 lin
417 238 lin
420 243 lin
422 248 lin
424 253 lin
425 258 lin
426 264 lin
426 269 lin
429 274 lin
430 279 lin
433 284 lin
434 289 lin
437 294 lin
440 299 lin
440 304 lin
441 309 lin
442 314 lin
443 319 lin
445 324 lin
446 329 lin
447 334 lin
448 339 lin
448 345 lin
450 350 lin
451 355 lin
452 360 lin
453 365 lin
453 370 lin
453 375 lin
454 380 lin
455 385 lin
stroke
0.33 setgray

343 137 gm
348 139 lin
353 141 lin
356 142 lin
358 144 lin
360 149 lin
361 152 lin
361 153 lin
361 157 lin
361 161 lin
363 165 lin
364 167 lin
365 170 lin
367 174 lin
371 178 lin
375 181 lin
379 183 lin
383 185 lin
387 187 lin
391 190 lin
393 193 lin
393 195 lin
395 199 lin
397 203 lin
398 204 lin
401 209 lin
403 213 lin
404 214 lin
407 219 lin
409 223 lin
409 224 lin
410 228 lin
411 232 lin
411 236 lin
411 238 lin
413 240 lin
416 245 lin
417 248 lin
418 250 lin
420 255 lin
421 258 lin
421 260 lin
421 264 lin
422 268 lin
424 272 lin
425 274 lin
426 277 lin
427 281 lin
429 284 lin
430 286 lin
432 291 lin
434 294 lin
436 296 lin
438 301 lin
438 304 lin
438 305 lin
439 309 lin
440 313 lin
441 317 lin
441 319 lin
442 321 lin
443 326 lin
444 329 lin
444 330 lin
446 335 lin
446 339 lin
446 343 lin
446 345 lin
447 347 lin
449 352 lin
450 355 lin
450 357 lin
450 361 lin
451 365 lin
451 369 lin
451 370 lin
451 373 lin
451 377 lin
452 380 lin
452 381 lin
stroke
0.67 setgray

346 137 gm
346 137 lin
351 139 lin
356 140 lin
361 142 lin
364 147 lin
365 151 lin
365 155 lin
365 159 lin
365 163 lin
367 168 lin
367 172 lin
370 176 lin
374 179 lin
379 182 lin
384 185 lin
389 189 lin
391 194 lin
392 198 lin
396 203 lin
400 208 lin
402 213 lin
405 218 lin
407 223 lin
408 227 lin
409 231 lin
409 235 lin
411 239 lin
414 244 lin
416 249 lin
418 254 lin
419 258 lin
419 262 lin
419 266 lin
421 270 lin
424 275 lin
425 279 lin
428 284 lin
429 288 lin
431 292 lin
434 297 lin
436 302 lin
436 306 lin
437 310 lin
438 314 lin
440 319 lin
442 324 lin
443 328 lin
444 332 lin
445 337 lin
445 341 lin
445 345 lin
447 350 lin
449 355 lin
450 359 lin
450 363 lin
450 367 lin
450 371 lin
451 375 lin
451 379 lin
452 383 lin
stroke
0. setgray
1. setlinewidth

249 448 gm
249 701 lin
90 701 lin
90 448 lin
249 448 lin
252 439 gm
1 setTxMode
(0)shw
223 448 gm
0 gr
223 453 lin
223 696 gm
223 701 lin
226 423 gm
1 setTxMode
0.33335 0.(0.05)ashw
196 448 gm
0 gr
196 453 lin
196 696 gm
196 701 lin
199 429 gm
1 setTxMode
0.5 0.(0.1)ashw
170 448 gm
0 gr
170 453 lin
170 696 gm
170 701 lin
173 423 gm
1 setTxMode
0.33335 0.(0.15)ashw
143 448 gm
0 gr
143 453 lin
143 696 gm
143 701 lin
146 429 gm
1 setTxMode
0.5 0.(0.2)ashw
117 448 gm
0 gr
117 453 lin
117 696 gm
117 701 lin
120 423 gm
1 setTxMode
0.33335 0.(0.25)ashw
93 429 gm
0.5 0.(0.3)ashw
262 445 gm
(0)shw
249 499 gm
0 gr
246 499 lin
94 499 gm
90 499 lin
262 493 gm
1 setTxMode
(10)shw
249 549 gm
0 gr
246 549 lin
94 549 gm
90 549 lin
262 543 gm
1 setTxMode
(20)shw
249 600 gm
0 gr
246 600 lin
94 600 gm
90 600 lin
262 594 gm
1 setTxMode
(30)shw
249 650 gm
0 gr
246 650 lin
94 650 gm
90 650 lin
262 644 gm
1 setTxMode
(40)shw
262 695 gm
(50)shw
237 453 gm
0 gr
1.5 setlinewidth

240 458 lin
239 463 lin
239 468 lin
239 473 lin
238 478 lin
237 483 lin
236 488 lin
235 494 lin
236 499 lin
238 504 lin
239 509 lin
239 514 lin
239 519 lin
239 524 lin
239 529 lin
240 534 lin
240 539 lin
240 544 lin
241 549 lin
241 554 lin
241 559 lin
241 564 lin
241 569 lin
241 575 lin
241 580 lin
241 585 lin
241 590 lin
242 595 lin
242 600 lin
242 605 lin
242 610 lin
242 615 lin
242 620 lin
243 625 lin
243 630 lin
243 635 lin
243 640 lin
243 645 lin
242 650 lin
242 655 lin
242 661 lin
242 666 lin
242 671 lin
243 676 lin
243 681 lin
243 686 lin
243 691 lin
243 696 lin
243 701 lin
stroke
0.33 setgray

237 453 gm
237 457 lin
236 461 lin
236 463 lin
236 465 lin
236 469 lin
236 473 lin
235 477 lin
235 478 lin
234 481 lin
234 485 lin
233 488 lin
233 489 lin
233 493 lin
233 494 lin
234 497 lin
236 502 lin
237 504 lin
237 507 lin
237 511 lin
237 514 lin
237 515 lin
237 519 lin
237 523 lin
237 527 lin
237 529 lin
237 531 lin
238 535 lin
239 539 lin
240 543 lin
240 544 lin
241 547 lin
241 551 lin
240 554 lin
240 555 lin
241 559 lin
241 563 lin
241 567 lin
241 569 lin
241 571 lin
241 575 lin
241 579 lin
241 583 lin
241 585 lin
241 587 lin
242 591 lin
242 595 lin
242 599 lin
242 600 lin
242 603 lin
242 607 lin
243 610 lin
243 611 lin
243 615 lin
243 619 lin
243 623 lin
243 625 lin
243 627 lin
243 631 lin
243 635 lin
243 639 lin
243 640 lin
243 643 lin
243 647 lin
242 650 lin
242 651 lin
242 655 lin
242 659 lin
242 663 lin
243 666 lin
243 667 lin
243 671 lin
243 675 lin
243 679 lin
243 681 lin
243 683 lin
243 687 lin
243 691 lin
243 695 lin
243 696 lin
243 699 lin
stroke
0.67 setgray

97 453 gm
97 453 lin
102 455 lin
107 456 lin
112 458 lin
115 463 lin
115 467 lin
115 471 lin
115 475 lin
115 479 lin
117 484 lin
116 488 lin
119 492 lin
123 495 lin
127 497 lin
131 499 lin
136 503 lin
140 507 lin
142 512 lin
144 516 lin
147 521 lin
150 526 lin
152 531 lin
155 536 lin
156 541 lin
157 545 lin
158 549 lin
158 553 lin
160 557 lin
163 562 lin
165 567 lin
167 572 lin
167 576 lin
168 580 lin
168 584 lin
170 588 lin
173 593 lin
174 597 lin
176 602 lin
178 606 lin
181 611 lin
184 616 lin
184 620 lin
185 624 lin
186 628 lin
186 632 lin
188 636 lin
190 641 lin
191 645 lin
192 649 lin
192 653 lin
192 657 lin
192 661 lin
194 666 lin
196 671 lin
197 675 lin
197 679 lin
197 683 lin
197 687 lin
198 691 lin
198 695 lin
199 699 lin
stroke
0. setgray
1. setlinewidth

249 132 gm
249 385 lin
90 385 lin
90 132 lin
249 132 lin
252 123 gm
1 setTxMode
(0)shw
223 132 gm
0 gr
223 137 lin
223 380 gm
223 385 lin
226 107 gm
1 setTxMode
0.33335 0.(0.05)ashw
196 132 gm
0 gr
196 137 lin
196 380 gm
196 385 lin
199 113 gm
1 setTxMode
0.5 0.(0.1)ashw
170 132 gm
0 gr
170 137 lin
170 380 gm
170 385 lin
173 107 gm
1 setTxMode
0.33335 0.(0.15)ashw
143 132 gm
0 gr
143 137 lin
143 380 gm
143 385 lin
146 113 gm
1 setTxMode
0.5 0.(0.2)ashw
117 132 gm
0 gr
117 137 lin
117 380 gm
117 385 lin
120 107 gm
1 setTxMode
0.33335 0.(0.25)ashw
93 113 gm
0.5 0.(0.3)ashw
262 129 gm
(0)shw
249 183 gm
0 gr
246 183 lin
94 183 gm
90 183 lin
262 177 gm
1 setTxMode
(10)shw
249 233 gm
0 gr
246 233 lin
94 233 gm
90 233 lin
262 227 gm
1 setTxMode
(20)shw
249 284 gm
0 gr
246 284 lin
94 284 gm
90 284 lin
262 278 gm
1 setTxMode
(30)shw
249 334 gm
0 gr
246 334 lin
94 334 gm
90 334 lin
262 328 gm
1 setTxMode
(40)shw
262 379 gm
(50)shw
233 137 gm
0 gr
1.5 setlinewidth

230 142 lin
227 147 lin
225 152 lin
224 157 lin
223 162 lin
223 167 lin
222 172 lin
222 178 lin
223 183 lin
225 188 lin
226 193 lin
226 198 lin
227 203 lin
227 208 lin
227 213 lin
228 218 lin
228 223 lin
229 228 lin
229 233 lin
229 238 lin
230 243 lin
230 248 lin
231 253 lin
231 258 lin
231 264 lin
231 269 lin
231 274 lin
232 279 lin
232 284 lin
232 289 lin
233 294 lin
234 299 lin
234 304 lin
234 309 lin
234 314 lin
234 319 lin
235 324 lin
235 329 lin
235 334 lin
235 339 lin
235 345 lin
235 350 lin
235 355 lin
235 360 lin
236 365 lin
236 370 lin
236 375 lin
236 380 lin
236 385 lin
stroke
0.33 setgray

183 137 gm
185 142 lin
185 146 lin
185 147 lin
185 150 lin
185 154 lin
185 157 lin
185 158 lin
186 162 lin
187 166 lin
187 170 lin
187 172 lin
187 174 lin
188 178 lin
190 183 lin
192 188 lin
193 192 lin
193 196 lin
193 198 lin
194 200 lin
195 205 lin
196 208 lin
196 209 lin
197 213 lin
198 217 lin
199 221 lin
199 223 lin
199 225 lin
200 229 lin
200 233 lin
200 237 lin
200 238 lin
201 241 lin
203 246 lin
203 248 lin
203 250 lin
204 254 lin
204 258 lin
204 262 lin
204 264 lin
204 266 lin
204 270 lin
206 274 lin
206 275 lin
206 279 lin
207 283 lin
208 287 lin
208 289 lin
209 291 lin
210 296 lin
211 299 lin
211 300 lin
212 304 lin
212 308 lin
212 312 lin
212 314 lin
212 316 lin
213 320 lin
214 324 lin
214 328 lin
214 329 lin
215 332 lin
215 336 lin
215 339 lin
215 340 lin
215 344 lin
215 345 lin
216 348 lin
216 352 lin
217 355 lin
217 356 lin
217 360 lin
217 364 lin
217 368 lin
217 370 lin
217 372 lin
217 376 lin
218 380 lin
218 384 lin
218 385 lin
stroke
0.67 setgray

104 137 gm
104 137 lin
109 139 lin
114 140 lin
119 142 lin
122 147 lin
122 151 lin
122 155 lin
122 159 lin
121 163 lin
123 168 lin
122 172 lin
125 176 lin
129 179 lin
134 182 lin
139 185 lin
144 189 lin
147 194 lin
148 198 lin
151 203 lin
154 208 lin
156 213 lin
159 218 lin
161 223 lin
162 227 lin
163 231 lin
163 235 lin
164 239 lin
167 244 lin
169 249 lin
170 253 lin
172 258 lin
172 262 lin
172 266 lin
174 270 lin
176 275 lin
177 279 lin
180 284 lin
181 288 lin
182 292 lin
185 297 lin
188 302 lin
188 306 lin
188 310 lin
189 314 lin
191 319 lin
193 324 lin
194 328 lin
195 332 lin
195 336 lin
195 340 lin
195 344 lin
196 348 lin
198 353 lin
200 358 lin
200 362 lin
200 366 lin
200 370 lin
201 374 lin
201 378 lin
201 382 lin

stroke
grestore
%%EOF

%%EndDocument
 GE /Times-Bold SF
15704 70152 MT
(Figure 2-21:)SH
/Times-Roman SF
22027 XM
(Empirical learning curves for Gaussian within-class distributions,)SH
21361 71348 MT
(for \050)SH
/Symbol SF
(d)SH
/Times-Roman SF
(,)SH
/Symbol SF
(r)SH
/Times-Roman SF
(\051 = \050a\051 \0504,0.1\051, \050b\051 \0504,0.9\051, \050c\051 \0501,0.1\051, and \050d\051 \0501,0.9\051;)SH
/Symbol SF
48168 XM
(q)SH
/Times-Roman SF
49016 XM
(= 1.0.)SH
ES
%%Page: 49 50
BS
0 SI
10 /Times-Roman AF
54800 4286 MT
(49)SH
11 SS 
1064 1000 270 53250 68400 GB 
%%BeginDocument: /usr0/rozzi/Documentation/PhDThesis/Chapter2/tri4.eps
%!PS-Adobe-2.0 EPSF-1.2
%%Creator:Rozzi
%%Title:f1.ps
%%Origin:0 720
%%BoundingBox: 0 0 575 375  %CHANGE?
%%EndComments

gsave

%some definitions necessary for Macintosh graphs
/gm{exch moveto} def
/gr{setgray} def
/lin {exch lineto}def   % y x
/ashw{1. -1. scale ashow 1. -1. scale} def
/shw{1. -1. scale show 1. -1. scale} def
/shwrotate{1. -1. scale 90 rotate show  -90 rotate 1. -1. scale} def
/setTxMode {pop} def

% adjust the coordinate system
-95.  445.000 translate %ADJUST?
0.92 -0.92 scale
/Times-Roman findfont  10.0 scalefont setfont
% plot labels and legend
gsave
125 335 gm
(\(a\)) shw
125 650 gm
(\(b\)) shw
350 335 gm
(\(c\)) shw
350 650 gm
(\(d\)) shw
117 240 gm
0.67 setgray
1.75 setlinewidth
117 260 lin
stroke
128 240 gm
0.33 setgray
1.75 setlinewidth
128 260 lin
stroke
139 240 gm
0.0 setgray
1.75 setlinewidth
139 260 lin
stroke
120 270 gm
(ML) shw
131 270 gm
(EMAP) shw
142 270 gm
(LMS-C) shw
grestore

% <<MAC BODY GOES HERE; CONVERT show & ashow to shw & ashw! >>
% may have to get a few commands from the beginning of a file- be careful
%  to save the original .ps until complete!
466 448 gm
466 701 lin
307 701 lin
307 448 lin
466 448 lin
469 429 gm
0.5 0.(0.2)ashw
435 448 gm
0 gr
435 453 lin
435 696 gm
435 701 lin
438 423 gm
1 setTxMode
0.33335 0.(0.25)ashw
403 448 gm
0 gr
403 453 lin
403 696 gm
403 701 lin
406 429 gm
1 setTxMode
0.5 0.(0.3)ashw
371 448 gm
0 gr
371 453 lin
371 696 gm
371 701 lin
374 423 gm
1 setTxMode
0.33335 0.(0.35)ashw
339 448 gm
0 gr
339 453 lin
339 696 gm
339 701 lin
342 429 gm
1 setTxMode
0.5 0.(0.4)ashw
310 423 gm
0.33335 0.(0.45)ashw
479 445 gm
(0)shw
466 499 gm
0 gr
463 499 lin
311 499 gm
307 499 lin
479 493 gm
1 setTxMode
(10)shw
466 549 gm
0 gr
463 549 lin
311 549 gm
307 549 lin
479 543 gm
1 setTxMode
(20)shw
466 600 gm
0 gr
463 600 lin
311 600 gm
307 600 lin
479 594 gm
1 setTxMode
(30)shw
466 650 gm
0 gr
463 650 lin
311 650 gm
307 650 lin
479 644 gm
1 setTxMode
(40)shw
479 695 gm
(50)shw
320 453 gm
0 gr
1.5 setlinewidth

354 458 lin
370 463 lin
379 468 lin
383 473 lin
383 478 lin
384 483 lin
397 488 lin
398 494 lin
396 499 lin
395 504 lin
391 509 lin
395 514 lin
390 519 lin
393 524 lin
391 529 lin
400 534 lin
401 539 lin
401 544 lin
404 549 lin
402 554 lin
406 559 lin
414 564 lin
413 569 lin
411 575 lin
414 580 lin
413 585 lin
418 590 lin
420 595 lin
420 600 lin
421 605 lin
419 610 lin
422 615 lin
418 620 lin
420 625 lin
422 630 lin
424 635 lin
427 640 lin
429 645 lin
431 650 lin
431 655 lin
437 661 lin
437 666 lin
439 671 lin
443 676 lin
444 681 lin
447 686 lin
449 691 lin
449 696 lin
453 701 lin
stroke 
0.33 setgray 
340 453 gm
344 454 lin
348 455 lin
352 456 lin
356 457 lin
358 458 lin
360 460 lin
362 465 lin
361 468 lin
360 469 lin
355 474 lin
352 478 lin
352 479 lin
353 483 lin
357 486 lin
361 488 lin
361 492 lin
360 496 lin
359 499 lin
357 501 lin
353 504 lin
352 508 lin
355 512 lin
358 514 lin
357 515 lin
355 520 lin
359 524 lin
359 525 lin
358 529 lin
362 530 lin
366 531 lin
370 532 lin
374 533 lin
378 534 lin
379 538 lin
379 539 lin
379 542 lin
381 546 lin
385 549 lin
384 553 lin
384 554 lin
386 557 lin
391 561 lin
396 563 lin
396 568 lin
396 569 lin
395 572 lin
396 576 lin
399 580 lin
399 581 lin
398 586 lin
402 589 lin
405 593 lin
406 595 lin
406 598 lin
407 602 lin
408 605 lin
407 607 lin
408 612 lin
410 615 lin
409 617 lin
408 622 lin
409 625 lin
410 627 lin
412 632 lin
414 635 lin
416 636 lin
421 639 lin
423 640 lin
425 643 lin
428 648 lin
429 650 lin
430 653 lin
434 657 lin
438 659 lin
442 661 lin
443 661 lin
442 664 lin
444 668 lin
447 671 lin
449 673 lin
452 678 lin
452 681 lin
452 682 lin
453 686 lin
454 690 lin
453 694 lin
453 696 lin
455 697 lin
460 700 lin
462 701 lin
stroke
0.67 setgray

322 453 gm
322 453 lin
327 454 lin
332 455 lin
337 456 lin
342 457 lin
347 458 lin
352 461 lin
353 466 lin
349 471 lin
346 476 lin
347 480 lin
350 485 lin
353 490 lin
353 494 lin
354 498 lin
351 502 lin
348 505 lin
348 509 lin
352 512 lin
353 516 lin
353 521 lin
355 526 lin
356 529 lin
361 530 lin
366 531 lin
371 532 lin
376 534 lin
377 537 lin
377 541 lin
379 545 lin
383 548 lin
383 552 lin
384 556 lin
388 560 lin
393 564 lin
393 568 lin
393 572 lin
394 576 lin
395 581 lin
394 586 lin
398 591 lin
400 596 lin
401 600 lin
402 604 lin
401 608 lin
402 613 lin
402 618 lin
402 623 lin
403 627 lin
406 632 lin
409 636 lin
414 639 lin
418 643 lin
422 648 lin
424 653 lin
428 656 lin
432 658 lin
436 660 lin
439 662 lin
439 666 lin
444 671 lin
449 676 lin
450 680 lin
450 684 lin
450 688 lin
451 692 lin
451 696 lin
455 698 lin
459 700 lin
stroke
0. setgray
1. setlinewidth

466 132 gm
466 385 lin
307 385 lin
307 132 lin
466 132 lin
469 107 gm
1 setTxMode
0.33335 0.(0.05)ashw
435 132 gm
0 gr
435 137 lin
435 380 gm
435 385 lin
438 113 gm
1 setTxMode
0.5 0.(0.1)ashw
403 132 gm
0 gr
403 137 lin
403 380 gm
403 385 lin
406 107 gm
1 setTxMode
0.33335 0.(0.15)ashw
371 132 gm
0 gr
371 137 lin
371 380 gm
371 385 lin
374 113 gm
1 setTxMode
0.5 0.(0.2)ashw
339 132 gm
0 gr
339 137 lin
339 380 gm
339 385 lin
342 107 gm
1 setTxMode
0.33335 0.(0.25)ashw
310 113 gm
0.5 0.(0.3)ashw
479 129 gm
(0)shw
466 183 gm
0 gr
463 183 lin
311 183 gm
307 183 lin
479 177 gm
1 setTxMode
(10)shw
466 233 gm
0 gr
463 233 lin
311 233 gm
307 233 lin
479 227 gm
1 setTxMode
(20)shw
466 284 gm
0 gr
463 284 lin
311 284 gm
307 284 lin
479 278 gm
1 setTxMode
(30)shw
466 334 gm
0 gr
463 334 lin
311 334 gm
307 334 lin
479 328 gm
1 setTxMode
(40)shw
479 379 gm
(50)shw
419 137 gm
0 gr
1.5 setlinewidth

435 142 lin
438 147 lin
438 152 lin
438 157 lin
439 162 lin
439 167 lin
439 172 lin
438 178 lin
437 183 lin
434 188 lin
433 193 lin
432 198 lin
430 203 lin
429 208 lin
428 213 lin
430 218 lin
429 223 lin
428 228 lin
427 233 lin
426 238 lin
425 243 lin
425 248 lin
424 253 lin
423 258 lin
422 264 lin
421 269 lin
421 274 lin
420 279 lin
419 284 lin
419 289 lin
418 294 lin
417 299 lin
416 304 lin
416 309 lin
416 314 lin
417 319 lin
417 324 lin
418 329 lin
418 334 lin
418 339 lin
421 345 lin
422 350 lin
423 355 lin
425 360 lin
426 365 lin
425 370 lin
426 375 lin
425 380 lin
427 385 lin
stroke
0.33 setgray

324 137 gm
328 139 lin
332 140 lin
336 142 lin
337 146 lin
337 147 lin
337 150 lin
338 154 lin
340 157 lin
340 159 lin
342 163 lin
345 167 lin
346 168 lin
349 173 lin
350 177 lin
351 181 lin
352 183 lin
351 186 lin
352 190 lin
354 193 lin
355 195 lin
357 200 lin
358 203 lin
359 204 lin
361 209 lin
363 213 lin
364 214 lin
368 216 lin
371 218 lin
371 219 lin
372 223 lin
373 227 lin
374 231 lin
375 233 lin
375 236 lin
375 240 lin
376 243 lin
377 244 lin
380 249 lin
379 253 lin
380 257 lin
380 258 lin
381 261 lin
382 265 lin
381 269 lin
384 274 lin
385 278 lin
385 282 lin
385 284 lin
386 286 lin
386 291 lin
385 294 lin
386 296 lin
387 301 lin
387 304 lin
387 305 lin
387 309 lin
389 314 lin
390 318 lin
390 319 lin
393 322 lin
397 327 lin
398 329 lin
399 332 lin
401 337 lin
402 339 lin
405 342 lin
407 346 lin
407 350 lin
409 355 lin
412 360 lin
412 364 lin
412 365 lin
411 368 lin
411 372 lin
412 375 lin
412 376 lin
411 380 lin
415 385 lin
stroke
0.67 setgray

313 137 gm
313 137 lin
318 138 lin
323 140 lin
328 141 lin
332 145 lin
334 150 lin
336 155 lin
336 160 lin
338 164 lin
341 169 lin
343 174 lin
344 178 lin
347 183 lin
346 187 lin
348 191 lin
351 196 lin
353 201 lin
354 205 lin
357 210 lin
360 214 lin
365 217 lin
367 221 lin
367 225 lin
368 229 lin
370 234 lin
371 238 lin
372 242 lin
374 246 lin
375 251 lin
375 255 lin
376 259 lin
378 263 lin
377 267 lin
378 271 lin
380 276 lin
381 280 lin
382 284 lin
383 288 lin
382 292 lin
383 296 lin
384 301 lin
383 305 lin
384 309 lin
385 313 lin
386 317 lin
390 322 lin
394 327 lin
396 332 lin
399 337 lin
403 342 lin
405 346 lin
405 350 lin
407 355 lin
409 360 lin
410 364 lin
409 368 lin
409 372 lin
410 376 lin
409 380 lin
stroke
0. setgray
1. setlinewidth

249 448 gm
249 701 lin
90 701 lin
90 448 lin
249 448 lin
252 439 gm
1 setTxMode
(0)shw
210 448 gm
0 gr
210 453 lin
210 696 gm
210 701 lin
213 423 gm
1 setTxMode
0.33335 0.(0.05)ashw
170 448 gm
0 gr
170 453 lin
170 696 gm
170 701 lin
173 429 gm
1 setTxMode
0.5 0.(0.1)ashw
130 448 gm
0 gr
130 453 lin
130 696 gm
130 701 lin
133 423 gm
1 setTxMode
0.33335 0.(0.15)ashw
93 429 gm
0.5 0.(0.2)ashw
262 445 gm
(0)shw
249 499 gm
0 gr
246 499 lin
94 499 gm
90 499 lin
262 493 gm
1 setTxMode
(10)shw
249 549 gm
0 gr
246 549 lin
94 549 gm
90 549 lin
262 543 gm
1 setTxMode
(20)shw
249 600 gm
0 gr
246 600 lin
94 600 gm
90 600 lin
262 594 gm
1 setTxMode
(30)shw
249 650 gm
0 gr
246 650 lin
94 650 gm
90 650 lin
262 644 gm
1 setTxMode
(40)shw
262 695 gm
(50)shw
234 453 gm
0 gr
1.5 setlinewidth

236 458 lin
236 463 lin
236 468 lin
235 473 lin
234 478 lin
233 483 lin
232 488 lin
231 494 lin
230 499 lin
229 504 lin
228 509 lin
227 514 lin
226 519 lin
226 524 lin
225 529 lin
225 534 lin
225 539 lin
224 544 lin
224 549 lin
224 554 lin
224 559 lin
225 564 lin
225 569 lin
225 575 lin
225 580 lin
225 585 lin
225 590 lin
225 595 lin
225 600 lin
226 605 lin
226 610 lin
226 615 lin
226 620 lin
226 625 lin
226 630 lin
226 635 lin
226 640 lin
227 645 lin
227 650 lin
227 655 lin
228 661 lin
228 666 lin
229 671 lin
229 676 lin
229 681 lin
230 686 lin
230 691 lin
230 696 lin
231 701 lin
stroke
0.33 setgray

176 453 gm
179 458 lin
180 462 lin
180 463 lin
180 466 lin
180 470 lin
180 473 lin
180 474 lin
179 478 lin
180 482 lin
181 486 lin
182 488 lin
182 491 lin
182 495 lin
183 499 lin
182 503 lin
182 504 lin
183 507 lin
183 511 lin
184 514 lin
184 515 lin
183 519 lin
185 524 lin
186 528 lin
186 529 lin
188 532 lin
189 537 lin
189 539 lin
189 541 lin
189 545 lin
190 549 lin
190 553 lin
190 554 lin
191 557 lin
192 561 lin
193 564 lin
193 566 lin
193 570 lin
193 574 lin
194 578 lin
194 580 lin
194 582 lin
193 586 lin
195 590 lin
195 591 lin
196 595 lin
196 599 lin
197 603 lin
197 605 lin
197 607 lin
197 611 lin
198 615 lin
197 619 lin
197 620 lin
198 623 lin
198 627 lin
199 630 lin
199 631 lin
200 635 lin
202 640 lin
203 644 lin
203 645 lin
204 648 lin
204 652 lin
205 655 lin
205 656 lin
206 660 lin
206 661 lin
206 664 lin
206 668 lin
207 671 lin
207 672 lin
208 676 lin
208 680 lin
208 684 lin
208 686 lin
208 688 lin
208 692 lin
208 696 lin
209 700 lin
209 701 lin
stroke
0.67 setgray

117 453 gm
117 453 lin
122 454 lin
127 455 lin
132 456 lin
137 457 lin
142 459 lin
144 464 lin
145 468 lin
146 472 lin
147 476 lin
148 480 lin
150 485 lin
151 490 lin
151 494 lin
153 499 lin
152 503 lin
153 507 lin
155 512 lin
156 517 lin
157 521 lin
158 526 lin
159 530 lin
164 533 lin
164 538 lin
165 542 lin
165 546 lin
166 550 lin
166 554 lin
167 558 lin
168 562 lin
170 567 lin
170 571 lin
171 575 lin
172 579 lin
171 583 lin
172 587 lin
173 592 lin
173 596 lin
174 600 lin
175 604 lin
174 608 lin
174 612 lin
174 616 lin
174 620 lin
175 624 lin
176 628 lin
176 632 lin
178 636 lin
180 641 lin
182 646 lin
184 651 lin
187 656 lin
189 660 lin
189 664 lin
190 668 lin
191 673 lin
192 677 lin
193 681 lin
193 685 lin
193 689 lin
193 693 lin
193 697 lin
stroke
0. setgray
1. setlinewidth

249 132 gm
249 385 lin
90 385 lin
90 132 lin
249 132 lin
252 123 gm
1 setTxMode
(0)shw
210 132 gm
0 gr
210 137 lin
210 380 gm
210 385 lin
213 107 gm
1 setTxMode
0.33335 0.(0.05)ashw
170 132 gm
0 gr
170 137 lin
170 380 gm
170 385 lin
173 113 gm
1 setTxMode
0.5 0.(0.1)ashw
130 132 gm
0 gr
130 137 lin
130 380 gm
130 385 lin
133 107 gm
1 setTxMode
0.33335 0.(0.15)ashw
93 113 gm
0.5 0.(0.2)ashw
262 129 gm
(0)shw
249 183 gm
0 gr
246 183 lin
94 183 gm
90 183 lin
262 177 gm
1 setTxMode
(10)shw
249 233 gm
0 gr
246 233 lin
94 233 gm
90 233 lin
262 227 gm
1 setTxMode
(20)shw
249 284 gm
0 gr
246 284 lin
94 284 gm
90 284 lin
262 278 gm
1 setTxMode
(30)shw
249 334 gm
0 gr
246 334 lin
94 334 gm
90 334 lin
262 328 gm
1 setTxMode
(40)shw
262 379 gm
(50)shw
237 137 gm
0 gr
1.5 setlinewidth

239 142 lin
239 147 lin
238 152 lin
237 157 lin
238 162 lin
237 167 lin
238 172 lin
238 178 lin
237 183 lin
237 188 lin
236 193 lin
236 198 lin
236 203 lin
235 208 lin
235 213 lin
235 218 lin
235 223 lin
235 228 lin
235 233 lin
235 238 lin
236 243 lin
236 248 lin
236 253 lin
236 258 lin
236 264 lin
236 269 lin
236 274 lin
236 279 lin
235 284 lin
236 289 lin
236 294 lin
236 299 lin
236 304 lin
236 309 lin
236 314 lin
236 319 lin
236 324 lin
236 329 lin
236 334 lin
236 339 lin
237 345 lin
237 350 lin
237 355 lin
238 360 lin
238 365 lin
238 370 lin
238 375 lin
238 380 lin
238 385 lin
stroke
0.33 setgray

189 137 gm
191 142 lin
191 146 lin
191 147 lin
191 150 lin
191 154 lin
191 157 lin
191 158 lin
191 162 lin
192 166 lin
193 170 lin
193 172 lin
193 174 lin
194 178 lin
194 182 lin
194 186 lin
194 188 lin
194 190 lin
195 194 lin
196 198 lin
196 202 lin
196 203 lin
197 206 lin
197 210 lin
197 213 lin
198 214 lin
200 219 lin
201 223 lin
201 227 lin
201 228 lin
201 231 lin
201 235 lin
201 238 lin
201 239 lin
202 243 lin
203 247 lin
202 251 lin
202 253 lin
202 255 lin
203 259 lin
203 263 lin
202 267 lin
202 269 lin
202 271 lin
203 275 lin
204 279 lin
204 283 lin
204 284 lin
204 287 lin
204 291 lin
204 294 lin
204 295 lin
205 299 lin
204 303 lin
204 307 lin
204 309 lin
204 311 lin
205 315 lin
205 319 lin
207 324 lin
208 328 lin
209 332 lin
209 334 lin
209 336 lin
210 340 lin
211 344 lin
211 348 lin
211 350 lin
211 352 lin
212 356 lin
213 360 lin
213 364 lin
213 365 lin
213 368 lin
213 372 lin
213 375 lin
213 376 lin
212 380 lin
214 385 lin
stroke
0.67 setgray

121 137 gm
121 137 lin
125 138 lin
129 139 lin
133 140 lin
137 141 lin
141 142 lin
144 144 lin
146 149 lin
147 153 lin
148 157 lin
149 161 lin
151 165 lin
153 170 lin
153 174 lin
153 178 lin
155 183 lin
155 187 lin
156 191 lin
158 196 lin
159 201 lin
160 205 lin
161 210 lin
162 214 lin
167 217 lin
167 222 lin
168 226 lin
168 230 lin
169 234 lin
169 238 lin
170 242 lin
171 246 lin
172 251 lin
172 255 lin
173 259 lin
174 263 lin
173 267 lin
174 271 lin
175 276 lin
176 280 lin
177 284 lin
177 288 lin
176 292 lin
176 296 lin
177 300 lin
177 304 lin
177 308 lin
178 312 lin
178 316 lin
180 320 lin
183 325 lin
184 329 lin
186 334 lin
188 339 lin
190 343 lin
191 347 lin
191 351 lin
192 355 lin
194 360 lin
194 364 lin
194 368 lin
194 372 lin
195 376 lin
194 380 lin

stroke
grestore
%%EOF

%%EndDocument
 GE /Times-Bold SF
15582 70152 MT
(Figure 2-22:)SH
/Times-Roman SF
21905 XM
(Empirical learning curves for triangular within-class distributions,)SH
21361 71348 MT
(for \050)SH
/Symbol SF
(d)SH
/Times-Roman SF
(,)SH
/Symbol SF
(r)SH
/Times-Roman SF
(\051 = \050a\051 \0504,0.1\051, \050b\051 \0504,0.9\051, \050c\051 \0501,0.1\051, and \050d\051 \0501,0.9\051;)SH
/Symbol SF
48168 XM
(q)SH
/Times-Roman SF
49016 XM
(= 1.0.)SH
ES
%%Page: 50 51
BS
0 SI
10 /Times-Roman AF
54800 4286 MT
(50)SH
11 SS 
1064 1000 270 53250 68400 GB 
%%BeginDocument: /usr0/rozzi/Documentation/PhDThesis/Chapter2/uni4.eps
%!PS-Adobe-2.0 EPSF-1.2
%%Creator:Rozzi
%%Title:f1.ps
%%Origin:0 720
%%BoundingBox: 0 0 575 375  %CHANGE?
%%EndComments

gsave

%some definitions necessary for Macintosh graphs
/gm{exch moveto} def
/gr{setgray} def
/lin {exch lineto}def   % y x
/ashw{1. -1. scale ashow 1. -1. scale} def
/shw{1. -1. scale show 1. -1. scale} def
/shwrotate{1. -1. scale 90 rotate show  -90 rotate 1. -1. scale} def
/setTxMode {pop} def

% adjust the coordinate system
-95.  445.000 translate %ADJUST?
0.92 -0.92 scale
/Times-Roman findfont  10.0 scalefont setfont
% plot labels and legend
gsave
125 335 gm
(\(a\)) shw
125 650 gm
(\(b\)) shw
350 335 gm
(\(c\)) shw
350 650 gm
(\(d\)) shw
117 240 gm
0.67 setgray
1.75 setlinewidth
117 260 lin
stroke
128 240 gm
0.33 setgray
1.75 setlinewidth
128 260 lin
stroke
139 240 gm
0.0 setgray
1.75 setlinewidth
139 260 lin
stroke
120 270 gm
(ML) shw
131 270 gm
(EMAP) shw
142 270 gm
(LMS-C) shw
grestore

% <<MAC BODY GOES HERE; CONVERT show & ashow to shw & ashw! >>
% may have to get a few commands from the beginning of a file- be careful
%  to save the original .ps until complete!
466 448 gm
466 701 lin
307 701 lin
307 448 lin
466 448 lin
469 429 gm
0.5 0.(0.6)ashw
435 448 gm
0 gr
435 453 lin
435 696 gm
435 701 lin
438 429 gm
1 setTxMode
0.5 0.(0.8)ashw
403 448 gm
0 gr
403 453 lin
403 696 gm
403 701 lin
406 439 gm
1 setTxMode
(1)shw
371 448 gm
0 gr
371 453 lin
371 696 gm
371 701 lin
374 429 gm
1 setTxMode
0.5 0.(1.2)ashw
339 448 gm
0 gr
339 453 lin
339 696 gm
339 701 lin
342 429 gm
1 setTxMode
0.5 0.(1.4)ashw
310 429 gm
0.5 0.(1.6)ashw
479 445 gm
(0)shw
466 499 gm
0 gr
463 499 lin
311 499 gm
307 499 lin
479 493 gm
1 setTxMode
(10)shw
466 549 gm
0 gr
463 549 lin
311 549 gm
307 549 lin
479 543 gm
1 setTxMode
(20)shw
466 600 gm
0 gr
463 600 lin
311 600 gm
307 600 lin
479 594 gm
1 setTxMode
(30)shw
466 650 gm
0 gr
463 650 lin
311 650 gm
307 650 lin
479 644 gm
1 setTxMode
(40)shw
479 695 gm
(50)shw
402 453 gm
0 gr
1.5 setlinewidth

440 458 lin
394 463 lin
408 468 lin
419 473 lin
415 478 lin
438 483 lin
439 488 lin
430 494 lin
425 499 lin
417 504 lin
416 509 lin
423 514 lin
423 519 lin
426 524 lin
431 529 lin
433 534 lin
433 539 lin
431 544 lin
433 549 lin
432 554 lin
432 559 lin
429 564 lin
427 569 lin
426 575 lin
420 580 lin
418 585 lin
417 590 lin
418 595 lin
418 600 lin
417 605 lin
419 610 lin
414 615 lin
415 620 lin
413 625 lin
414 630 lin
413 635 lin
415 640 lin
413 645 lin
413 650 lin
416 655 lin
418 661 lin
420 666 lin
418 671 lin
417 676 lin
415 681 lin
413 686 lin
412 691 lin
413 696 lin
415 701 lin
stroke
0.33 setgray

401 453 gm
406 454 lin
411 455 lin
416 456 lin
421 457 lin
424 458 lin
422 458 lin
415 459 lin
408 460 lin
401 461 lin
394 462 lin
387 463 lin
392 464 lin
397 466 lin
402 467 lin
407 469 lin
412 471 lin
417 472 lin
419 473 lin
416 476 lin
414 478 lin
418 479 lin
422 481 lin
426 482 lin
430 483 lin
431 483 lin
430 486 lin
426 490 lin
421 493 lin
416 498 lin
415 499 lin
411 501 lin
406 504 lin
405 508 lin
408 511 lin
413 513 lin
412 518 lin
412 519 lin
415 523 lin
420 527 lin
423 529 lin
423 531 lin
424 535 lin
424 539 lin
420 544 lin
423 549 lin
422 553 lin
422 554 lin
423 557 lin
422 562 lin
420 564 lin
419 567 lin
417 572 lin
417 575 lin
416 576 lin
412 579 lin
411 580 lin
410 583 lin
408 588 lin
408 590 lin
409 592 lin
410 597 lin
409 600 lin
409 601 lin
408 606 lin
411 610 lin
410 611 lin
406 616 lin
407 620 lin
405 625 lin
405 629 lin
405 633 lin
405 635 lin
406 637 lin
407 642 lin
405 645 lin
405 647 lin
406 651 lin
408 655 lin
409 656 lin
411 660 lin
411 661 lin
412 664 lin
411 669 lin
410 671 lin
409 674 lin
407 679 lin
406 681 lin
405 684 lin
404 689 lin
404 691 lin
404 693 lin
405 697 lin
407 701 lin
stroke
0.67 setgray

317 453 gm
317 453 lin
325 453 lin
333 454 lin
341 454 lin
349 455 lin
357 455 lin
365 456 lin
373 456 lin
381 457 lin
389 457 lin
397 457 lin
405 458 lin
401 459 lin
393 460 lin
385 461 lin
377 462 lin
369 463 lin
371 464 lin
375 465 lin
379 466 lin
383 467 lin
387 469 lin
392 471 lin
395 474 lin
394 478 lin
401 479 lin
408 480 lin
415 481 lin
422 482 lin
427 485 lin
425 488 lin
421 490 lin
417 492 lin
413 494 lin
409 496 lin
404 500 lin
400 502 lin
397 505 lin
396 509 lin
400 511 lin
404 512 lin
408 514 lin
408 518 lin
410 522 lin
414 526 lin
418 530 lin
420 535 lin
420 539 lin
416 544 lin
419 549 lin
417 554 lin
418 558 lin
416 562 lin
413 567 lin
411 572 lin
410 576 lin
406 579 lin
404 583 lin
403 588 lin
404 592 lin
405 597 lin
404 601 lin
403 605 lin
406 610 lin
401 615 lin
402 619 lin
401 623 lin
401 628 lin
401 632 lin
401 636 lin
403 641 lin
400 646 lin
400 650 lin
404 655 lin
406 659 lin
408 663 lin
408 668 lin
405 673 lin
403 678 lin
401 683 lin
400 688 lin
400 692 lin
401 696 lin
stroke
0. setgray
1. setlinewidth

466 132 gm
466 385 lin
307 385 lin
307 132 lin
466 132 lin
469 113 gm
1 setTxMode
0.5 0.(0.6)ashw
435 132 gm
0 gr
435 137 lin
435 380 gm
435 385 lin
438 113 gm
1 setTxMode
0.5 0.(0.8)ashw
403 132 gm
0 gr
403 137 lin
403 380 gm
403 385 lin
406 123 gm
1 setTxMode
(1)shw
371 132 gm
0 gr
371 137 lin
371 380 gm
371 385 lin
374 113 gm
1 setTxMode
0.5 0.(1.2)ashw
339 132 gm
0 gr
339 137 lin
339 380 gm
339 385 lin
342 113 gm
1 setTxMode
0.5 0.(1.4)ashw
310 113 gm
0.5 0.(1.6)ashw
479 129 gm
(0)shw
466 183 gm
0 gr
463 183 lin
311 183 gm
307 183 lin
479 177 gm
1 setTxMode
(10)shw
466 233 gm
0 gr
463 233 lin
311 233 gm
307 233 lin
479 227 gm
1 setTxMode
(20)shw
466 284 gm
0 gr
463 284 lin
311 284 gm
307 284 lin
479 278 gm
1 setTxMode
(30)shw
466 334 gm
0 gr
463 334 lin
311 334 gm
307 334 lin
479 328 gm
1 setTxMode
(40)shw
479 379 gm
(50)shw
375 137 gm
0 gr
1.5 setlinewidth

428 142 lin
395 147 lin
405 152 lin
412 157 lin
412 162 lin
435 167 lin
436 172 lin
428 178 lin
424 183 lin
418 188 lin
416 193 lin
423 198 lin
423 203 lin
426 208 lin
431 213 lin
433 218 lin
434 223 lin
432 228 lin
434 233 lin
433 238 lin
433 243 lin
431 248 lin
429 253 lin
428 258 lin
423 264 lin
421 269 lin
420 274 lin
421 279 lin
421 284 lin
419 289 lin
421 294 lin
418 299 lin
419 304 lin
417 309 lin
417 314 lin
417 319 lin
419 324 lin
417 329 lin
417 334 lin
419 339 lin
421 345 lin
423 350 lin
421 355 lin
420 360 lin
419 365 lin
417 370 lin
417 375 lin
417 380 lin
419 385 lin
stroke
0.33 setgray

387 137 gm
393 138 lin
399 139 lin
405 140 lin
411 141 lin
417 142 lin
413 143 lin
408 144 lin
403 145 lin
398 146 lin
393 147 lin
392 147 lin
396 149 lin
401 151 lin
403 152 lin
406 154 lin
411 156 lin
412 157 lin
410 161 lin
414 163 lin
418 164 lin
422 165 lin
426 166 lin
430 167 lin
432 167 lin
432 169 lin
430 173 lin
425 175 lin
420 178 lin
415 183 lin
411 186 lin
407 188 lin
407 192 lin
407 193 lin
410 195 lin
415 197 lin
416 198 lin
416 202 lin
418 206 lin
419 208 lin
422 211 lin
425 214 lin
426 218 lin
426 222 lin
426 223 lin
424 226 lin
424 231 lin
425 233 lin
424 236 lin
424 240 lin
425 243 lin
424 244 lin
421 249 lin
419 253 lin
419 254 lin
418 258 lin
414 262 lin
411 266 lin
410 269 lin
410 271 lin
410 275 lin
412 279 lin
412 280 lin
411 284 lin
409 289 lin
412 294 lin
407 299 lin
409 304 lin
407 309 lin
407 313 lin
407 314 lin
407 317 lin
408 321 lin
410 324 lin
408 326 lin
406 331 lin
406 334 lin
407 335 lin
410 340 lin
412 344 lin
413 348 lin
414 350 lin
412 353 lin
410 358 lin
410 360 lin
409 362 lin
407 367 lin
406 370 lin
406 372 lin
406 376 lin
407 380 lin
stroke
0.67 setgray

319 137 gm
319 137 lin
327 137 lin
335 138 lin
343 138 lin
351 139 lin
359 139 lin
367 140 lin
375 140 lin
383 141 lin
391 141 lin
399 141 lin
407 142 lin
403 143 lin
395 144 lin
387 145 lin
379 146 lin
371 147 lin
375 149 lin
379 150 lin
383 151 lin
387 152 lin
391 153 lin
396 156 lin
398 159 lin
398 162 lin
405 163 lin
412 164 lin
419 165 lin
426 167 lin
428 171 lin
425 173 lin
421 175 lin
417 177 lin
413 179 lin
409 182 lin
405 185 lin
401 187 lin
399 191 lin
401 194 lin
406 196 lin
410 199 lin
410 203 lin
414 208 lin
419 212 lin
422 216 lin
423 221 lin
421 225 lin
419 230 lin
421 235 lin
420 239 lin
421 243 lin
417 248 lin
415 253 lin
413 258 lin
409 262 lin
407 266 lin
406 270 lin
405 274 lin
407 279 lin
407 283 lin
406 287 lin
407 292 lin
405 297 lin
404 302 lin
403 307 lin
403 312 lin
403 316 lin
404 320 lin
405 325 lin
402 330 lin
403 334 lin
406 339 lin
408 343 lin
410 347 lin
410 352 lin
408 357 lin
406 361 lin
404 366 lin
402 371 lin
402 375 lin
403 379 lin
405 383 lin
stroke
0. setgray
1. setlinewidth

249 448 gm
249 701 lin
90 701 lin
90 448 lin
249 448 lin
252 439 gm
1 setTxMode
(0)shw
218 448 gm
0 gr
218 453 lin
218 696 gm
218 701 lin
221 429 gm
1 setTxMode
0.5 0.(0.2)ashw
186 448 gm
0 gr
186 453 lin
186 696 gm
186 701 lin
189 429 gm
1 setTxMode
0.5 0.(0.4)ashw
154 448 gm
0 gr
154 453 lin
154 696 gm
154 701 lin
157 429 gm
1 setTxMode
0.5 0.(0.6)ashw
122 448 gm
0 gr
122 453 lin
122 696 gm
122 701 lin
125 429 gm
1 setTxMode
0.5 0.(0.8)ashw
93 439 gm
(1)shw
262 445 gm
(0)shw
249 499 gm
0 gr
246 499 lin
94 499 gm
90 499 lin
262 493 gm
1 setTxMode
(10)shw
249 549 gm
0 gr
246 549 lin
94 549 gm
90 549 lin
262 543 gm
1 setTxMode
(20)shw
249 600 gm
0 gr
246 600 lin
94 600 gm
90 600 lin
262 594 gm
1 setTxMode
(30)shw
249 650 gm
0 gr
246 650 lin
94 650 gm
90 650 lin
262 644 gm
1 setTxMode
(40)shw
262 695 gm
(50)shw
218 453 gm
0 gr
1.5 setlinewidth

224 458 lin
216 463 lin
218 468 lin
220 473 lin
220 478 lin
223 483 lin
223 488 lin
222 494 lin
221 499 lin
220 504 lin
219 509 lin
221 514 lin
221 519 lin
221 524 lin
221 529 lin
222 534 lin
222 539 lin
221 544 lin
222 549 lin
221 554 lin
221 559 lin
221 564 lin
221 569 lin
220 575 lin
219 580 lin
219 585 lin
219 590 lin
219 595 lin
219 600 lin
219 605 lin
219 610 lin
219 615 lin
219 620 lin
219 625 lin
219 630 lin
219 635 lin
219 640 lin
219 645 lin
219 650 lin
219 655 lin
220 661 lin
220 666 lin
220 671 lin
219 676 lin
219 681 lin
219 686 lin
219 691 lin
219 696 lin
219 701 lin
stroke
0.33 setgray

208 453 gm
207 457 lin
206 461 lin
205 463 lin
205 466 lin
205 470 lin
205 473 lin
205 474 lin
204 478 lin
204 482 lin
204 486 lin
204 488 lin
203 490 lin
202 494 lin
201 498 lin
200 502 lin
200 504 lin
200 506 lin
200 510 lin
200 514 lin
199 518 lin
199 519 lin
199 522 lin
199 526 lin
199 529 lin
199 530 lin
198 534 lin
198 538 lin
197 542 lin
196 544 lin
197 547 lin
197 551 lin
196 554 lin
196 555 lin
196 559 lin
195 563 lin
194 567 lin
194 569 lin
194 571 lin
193 575 lin
192 579 lin
191 583 lin
191 585 lin
191 587 lin
190 591 lin
190 595 lin
190 599 lin
190 600 lin
189 603 lin
189 607 lin
189 610 lin
189 611 lin
188 615 lin
188 619 lin
187 623 lin
187 625 lin
187 627 lin
186 631 lin
186 635 lin
186 639 lin
186 640 lin
185 643 lin
185 647 lin
185 650 lin
185 651 lin
186 655 lin
186 659 lin
186 663 lin
187 666 lin
187 667 lin
186 671 lin
185 675 lin
185 679 lin
185 681 lin
185 683 lin
184 687 lin
184 691 lin
184 695 lin
184 696 lin
184 699 lin
stroke
0.67 setgray

111 453 gm
111 453 lin
118 454 lin
125 455 lin
132 456 lin
139 457 lin
146 458 lin
141 460 lin
136 461 lin
131 463 lin
136 467 lin
141 471 lin
142 476 lin
144 479 lin
148 480 lin
152 482 lin
156 483 lin
155 487 lin
152 491 lin
150 495 lin
147 500 lin
145 505 lin
146 509 lin
150 514 lin
150 518 lin
151 522 lin
152 526 lin
154 531 lin
154 535 lin
154 539 lin
153 543 lin
154 547 lin
154 552 lin
154 556 lin
155 560 lin
153 565 lin
152 569 lin
152 573 lin
151 577 lin
150 582 lin
150 586 lin
149 590 lin
151 595 lin
151 599 lin
150 603 lin
150 607 lin
151 611 lin
149 616 lin
150 620 lin
149 624 lin
150 628 lin
150 632 lin
150 636 lin
151 640 lin
149 645 lin
149 649 lin
150 653 lin
152 658 lin
153 662 lin
154 666 lin
153 670 lin
153 674 lin
153 678 lin
152 682 lin
151 686 lin
151 690 lin
152 694 lin
153 698 lin
stroke
0. setgray
1. setlinewidth

249 132 gm
249 385 lin
90 385 lin
90 132 lin
249 132 lin
252 123 gm
1 setTxMode
(0)shw
218 132 gm
0 gr
218 137 lin
218 380 gm
218 385 lin
221 113 gm
1 setTxMode
0.5 0.(0.2)ashw
186 132 gm
0 gr
186 137 lin
186 380 gm
186 385 lin
189 113 gm
1 setTxMode
0.5 0.(0.4)ashw
154 132 gm
0 gr
154 137 lin
154 380 gm
154 385 lin
157 113 gm
1 setTxMode
0.5 0.(0.6)ashw
122 132 gm
0 gr
122 137 lin
122 380 gm
122 385 lin
125 113 gm
1 setTxMode
0.5 0.(0.8)ashw
93 123 gm
(1)shw
262 129 gm
(0)shw
249 183 gm
0 gr
246 183 lin
94 183 gm
90 183 lin
262 177 gm
1 setTxMode
(10)shw
249 233 gm
0 gr
246 233 lin
94 233 gm
90 233 lin
262 227 gm
1 setTxMode
(20)shw
249 284 gm
0 gr
246 284 lin
94 284 gm
90 284 lin
262 278 gm
1 setTxMode
(30)shw
249 334 gm
0 gr
246 334 lin
94 334 gm
90 334 lin
262 328 gm
1 setTxMode
(40)shw
262 379 gm
(50)shw
225 137 gm
0 gr
1.5 setlinewidth

231 142 lin
227 147 lin
228 152 lin
230 157 lin
229 162 lin
232 167 lin
232 172 lin
231 178 lin
231 183 lin
230 188 lin
230 193 lin
231 198 lin
231 203 lin
231 208 lin
231 213 lin
232 218 lin
232 223 lin
231 228 lin
232 233 lin
232 238 lin
232 243 lin
231 248 lin
231 253 lin
231 258 lin
230 264 lin
230 269 lin
230 274 lin
230 279 lin
230 284 lin
230 289 lin
231 294 lin
230 299 lin
230 304 lin
230 309 lin
230 314 lin
230 319 lin
230 324 lin
230 329 lin
230 334 lin
230 339 lin
231 345 lin
231 350 lin
231 355 lin
231 360 lin
230 365 lin
230 370 lin
230 375 lin
230 380 lin
231 385 lin
stroke
0.33 setgray

210 137 gm
210 141 lin
209 145 lin
209 147 lin
209 149 lin
209 153 lin
209 157 lin
209 161 lin
209 162 lin
209 165 lin
209 169 lin
208 172 lin
208 173 lin
207 177 lin
207 178 lin
207 181 lin
207 185 lin
206 188 lin
206 189 lin
206 193 lin
206 197 lin
206 201 lin
206 203 lin
206 205 lin
205 209 lin
205 213 lin
205 217 lin
205 218 lin
204 221 lin
204 225 lin
203 228 lin
203 229 lin
203 233 lin
203 237 lin
203 241 lin
203 243 lin
203 245 lin
202 249 lin
201 253 lin
201 257 lin
201 258 lin
200 261 lin
200 265 lin
199 269 lin
199 273 lin
199 274 lin
199 277 lin
199 281 lin
198 284 lin
198 285 lin
198 289 lin
198 293 lin
197 297 lin
197 299 lin
197 301 lin
197 305 lin
196 309 lin
195 313 lin
195 314 lin
195 317 lin
195 321 lin
195 324 lin
195 325 lin
194 329 lin
194 333 lin
195 337 lin
195 339 lin
195 341 lin
195 345 lin
195 349 lin
195 353 lin
195 355 lin
195 357 lin
194 361 lin
194 365 lin
193 369 lin
193 370 lin
193 373 lin
193 377 lin
193 380 lin
193 381 lin
stroke
0.67 setgray

112 137 gm
112 137 lin
119 138 lin
126 139 lin
133 140 lin
140 141 lin
147 142 lin
142 144 lin
138 145 lin
134 146 lin
134 148 lin
139 152 lin
144 157 lin
144 161 lin
147 163 lin
152 165 lin
157 167 lin
156 171 lin
153 175 lin
151 179 lin
148 184 lin
146 189 lin
147 193 lin
151 198 lin
151 202 lin
152 206 lin
154 211 lin
156 216 lin
156 220 lin
156 224 lin
154 229 lin
156 234 lin
156 238 lin
156 242 lin
155 246 lin
154 251 lin
154 255 lin
153 259 lin
151 263 lin
151 267 lin
151 271 lin
151 275 lin
152 279 lin
152 283 lin
151 287 lin
151 291 lin
152 295 lin
150 300 lin
151 304 lin
150 308 lin
151 312 lin
151 316 lin
151 320 lin
152 324 lin
151 328 lin
151 332 lin
151 336 lin
152 340 lin
154 344 lin
155 348 lin
155 352 lin
154 356 lin
154 360 lin
153 364 lin
152 368 lin
152 372 lin
153 376 lin
154 380 lin
155 384 lin

stroke
grestore
%%EOF

%%EndDocument
 GE /Times-Bold SF
15948 70152 MT
(Figure 2-23:)SH
/Times-Roman SF
22271 XM
(Empirical learning curves for uniform within-class distributions,)SH
21361 71348 MT
(for \050)SH
/Symbol SF
(d)SH
/Times-Roman SF
(,)SH
/Symbol SF
(r)SH
/Times-Roman SF
(\051 = \050a\051 \0504,0.1\051, \050b\051 \0504,0.9\051, \050c\051 \0501,0.1\051, and \050d\051 \0501,0.9\051;)SH
/Symbol SF
48168 XM
(q)SH
/Times-Roman SF
49016 XM
(= 1.0.)SH
ES
%%Page: 51 52
BS
0 SI
10 /Times-Roman AF
54800 4286 MT
(51)SH
11 /Times-Bold AF
12778 8297 MT
(Algorithm)SH
25967 XM
(Additions)SH
42762 XM
(Multiplications)SH
44154 50 11223 8888 LH BX1
-1688 50 19221 8888 LV BX1
-1688 50 37299 8888 LV BX1
/Times-Roman SF
11622 10003 MT
(ML)SH
27863 XM
(D)SH
45666 XM
(2D)SH
44154 50 11223 10604 LH BX1
9 SS 
26426 11581 MT
(3)SH
30306 XM
(2)SH
43156 XM
(3)SH
47036 XM
(2)SH
11 SS 
11622 11944 MT
(EMAP/MMSE)SH
23616 XM
(3\050CD\051)SH
26876 XM
(+3\050CD\051)SH
30756 XM
(+CD)SH
40346 XM
(3\050CD\051)SH
43606 XM
(+4\050CD\051)SH
47486 XM
(+\050D+1\051CD)SH
44154 50 11223 12545 LH BX1
9 SS 
28458 13522 MT
(2)SH
46261 XM
(2)SH
11 SS 
11622 13885 MT
(CEMAP)SH
26198 XM
(\050CD\051)SH
28908 XM
(+D)SH
44001 XM
(\050CD\051)SH
46711 XM
(+2D)SH
44154 50 11223 14486 LH BX1
9 SS 
24711 15463 MT
(3)SH
28591 XM
(2)SH
42021 XM
(3)SH
45901 XM
(2)SH
11 SS 
11622 15826 MT
(LMS-C)SH
22451 XM
(\050CD\051)SH
25161 XM
(+6\050CD\051)SH
29041 XM
(+3CD+D-1)SH
39761 XM
(\050CD\051)SH
42471 XM
(+6\050CD\051)SH
46351 XM
(+6CD+2\050D+1\051)SH
44154 9227 50 11223 16427 BX BX1
-7539 50 19221 16427 LV BX1
-7539 50 37299 16427 LV BX1
/Times-Bold SF
17855 18179 MT
(Table 2-1:)SH
/Times-Roman SF
23202 XM
(Computational requirements of estimation algorithms as a)SH
22960 19375 MT
(function of the numbers of classes \050C\051 and dimensions \050D\051.)SH
835 1000 0 13500 46456 GB 
%%BeginDocument: /usr0/rozzi/Documentation/PhDThesis/Chapter2/compufig.eps
%!PS-Adobe-2.0 EPSF-1.2
%%BoundingBox: 0 0 474 310
%%Creator: Mathematica
%%Title: Clipboard
%%CreationDate: Never Never
%%EndComments
50 dict begin
%0 setlinewidth /setlinewidth {pop} def
/Mnodistort true def
/pageDashArray [4] def
/nullDashArray [] def

% Compute the minimum of two numbers.
/Mmin {         % p q Mmin min(p,q)
        2 copy          % p q p q
        gt              % p q p>q?
        { exch } if     % min(p,q) max(p,q)
        pop             % min(p,q)
} bind def


% Compute the maximum of two numbers.
/Mmax {         % p q Mmax max(p,q)
        2 copy          % p q p q
        lt              % p q p<q?
        { exch } if     % max(p,q) min(p,q)
        pop             % max(p,q)
} bind def

/Mpstart {
    MathPictureStart
} bind def
/Mpend {
    MathPictureEnd
} bind def
/Mscale {
    0 1 0 1
    5 -1 roll
    MathScale
} bind def
/Plain
        /Courier findfont
def
/Bold
        /Courier-Bold findfont
def
/Italic
        /Courier-Oblique findfont
def
/MathPictureStart {
        gsave
        newpath
        /Mtmatrix
        matrix currentmatrix
        def
        Plain
        Mfontsize scalefont
        setfont
0 setgray 0 setlinewidth
} bind def
/MathPictureEnd {
        grestore
} bind def
/Mdot {
        moveto
        0 0 rlineto
        stroke
} def
/Mtetra {
        moveto
        lineto
        lineto
        lineto
        fill
} def
/Metetra {
        moveto
        lineto
        lineto
        lineto
        closepath
        gsave
        fill
        grestore
        0 setgray
        stroke
} def
/Mistroke {
        flattenpath
        0 0 0
        {
        4 2 roll
        pop pop
        }
        {
        4 -1 roll
        2 index
        sub dup mul
        4 -1 roll
        2 index
        sub dup mul
        add sqrt
        4 -1 roll
        add
        3 1 roll
        }
        {
        stop
        }
        {
        stop
        }
        pathforall
        pop pop
        currentpoint
        stroke
        moveto
        currentdash
        3 -1 roll
        add
        setdash
} def
/Mfstroke {
        stroke
        currentdash
        pop 0
        setdash
} def
/Msboxa {
        newpath
        5 -1 roll
        Mvboxa
        pop
        6 -1 roll
        5 -1 roll
        4 -1 roll
        Msboxa1
        5 -3 roll
        Msboxa1
        [
        7 -2 roll
        [ 2 index 2 index
        10 -1 roll
        9 -1 roll
        ]
        6 1 roll
        5 -2 roll
        ]
} bind def
        
/Msboxa1 {
        sub
        2 div
        dup
        2 index
        1 add
        mul
        3 -1 roll
        -1 add
        3 -1 roll
        mul
} bind def
/Mvboxa {
        gsave
        newpath
        [ true
        3 -1 roll
        {
        Mbbox
        5 -1 roll
        {
        0
        5 1 roll
        }
        {
        7 -1 roll
        exch sub
        (m) stringwidth pop
        .3 mul
        sub
        7 1 roll
        6 -1 roll
        4 -1 roll
        Mmin
        3 -1 roll
        5 index
        add
        5 -1 roll
        4 -1 roll
        Mmax
        4 -1 roll
        }
        ifelse
        false
        }
        forall
        { stop } if
        counttomark
        1 add
        4 roll
        ]
        grestore
} bind def
/Mbbox {
        0 0 moveto
        false charpath
        flattenpath
        pathbbox
        newpath
} bind def
/Mmin {
        2 copy
        gt
        { exch } if
        pop
} bind def
/Mmax {
        2 copy
        lt
        { exch } if
        pop
} bind def
/Mshowa {
        4 -2 roll
        moveto
        2 index
        Mtmatrix setmatrix
        Mvboxa
        7 1 roll
        6 -1 roll
        5 -1 roll
        4 -1 roll
        Mshowa1
        4 1 roll
        Mshowa1
        rmoveto
        currentpoint
        0 1
        4 index length
        -1 add
        {
        2 index
        4 index
        2 index
        get
        3 index
        add
        moveto
        4 index
        exch get
        show
        } for
        pop pop pop pop
        Mgmatrix setmatrix
} bind def
/Mshowa1 {
        2 copy
        add
        4 1 roll
        sub
        mul
        sub
        -2 div
} bind def
/MathScale {
        Mwidth
        Mheight
        Mlp
        translate
        scale
        /Mgmatrix
        matrix currentmatrix
        def
        /Msaveaa exch def
        /Msavebb exch def
        /Msavecc exch def
        /Msavedd exch def
} bind def
/Mlp {
        3 copy
        Mlpfirst
        {
        Mnodistort
        {
        Mmin
        dup
        } if
        4 index
        2 index
        2 index
        Mlprun
        11 index
        11 -1 roll
        10 -4 roll
        Mlp1
        8 index
        9 -5 roll
        Mlp1
        4 -1 roll
        and
        { exit } if
        3 -1 roll
        pop pop
        } loop
        exch
        3 1 roll
        7 -3 roll
        pop pop pop
} bind def
/Mlpfirst {
        3 -1 roll
        dup length
        2 copy
        -2 add
        get
        aload
        pop pop pop
        4 -2 roll
        -1 add
        get
        aload
        pop pop pop
        6 -1 roll
        3 -1 roll
        5 -1 roll
        sub
        dup /MsaveAx exch def
        div
        4 1 roll
        exch sub
        dup /MsaveAy exch def
        div
} bind def
/Mlprun {
        2 copy
        4 index
        0 get
        dup
        4 1 roll
        Mlprun1
        3 copy
        8 -2 roll
        9 -1 roll
        {
        3 copy
        Mlprun1
        3 copy
        11 -3 roll
        /gt Mlpminmax
        8 3 roll
        11 -3 roll
        /lt Mlpminmax
        8 3 roll
        } forall
        pop pop pop pop
        3 1 roll
        pop pop
        aload pop
        5 -1 roll
        aload pop
        exch
        6 -1 roll
        Mlprun2
        8 2 roll
        4 -1 roll
        Mlprun2
        6 2 roll
        3 -1 roll
        Mlprun2
        4 2 roll
        exch
        Mlprun2
        6 2 roll
} bind def
/Mlprun1 {
        aload pop
        exch
        6 -1 roll
        5 -1 roll
        mul add
        4 -2 roll
        mul
        3 -1 roll
        add
} bind def
/Mlprun2 {
        2 copy
        add 2 div
        3 1 roll
        exch sub
} bind def
/Mlpminmax {
        cvx
        2 index
        6 index
        2 index
        exec
        {
        7 -3 roll
        4 -1 roll
        } if
        1 index
        5 index
        3 -1 roll
        exec
        {
        4 1 roll
        pop
        5 -1 roll
        aload
        pop pop
        4 -1 roll
        aload pop
        [
        8 -2 roll
        pop
        5 -2 roll
        pop
        6 -2 roll
        pop
        5 -1 roll
        ]
        4 1 roll
        pop
        }
        {
        pop pop pop
        } ifelse
} bind def
/Mlp1 {
        5 index
        3 index sub
        5 index
        2 index mul
        1 index
        le
        1 index
        0 le
        or
        dup
        not
        {
        1 index
        3 index div
        .99999 mul
        8 -1 roll
        pop
        7 1 roll
        }
        if
        8 -1 roll
        2 div
        7 -2 roll
        pop sub
        5 index
        6 -3 roll
        pop pop
        mul sub
        exch
} bind def
% WAR next  function added for vertical text (added 2 rotates on either side of show)
/MshowaRotate{
        4 -2 roll
        moveto
        2 index
        Mtmatrix setmatrix
        Mvboxa
        7 1 roll
        6 -1 roll
        5 -1 roll
        4 -1 roll
        Mshowa1
        4 1 roll
        Mshowa1
        rmoveto
        currentpoint
        0 1
        4 index length
        -1 add
        {
        2 index
        4 index
        2 index
        get
        3 index
        add
        moveto
        4 index
        exch get
        90 rotate
        show
        -90 rotate
        } for
        pop pop pop pop
        Mgmatrix setmatrix
} bind def
/Mfontsize      12 def
/Mleft          0.000000 def
/Mbottom        310.000000 def
/Mwidth         474.000000 def
/Mheight        310.000000 def
/TimesRoman findfont 12 scalefont setfont
%!
%%Creator: Mathematica
%%AspectRatio: 0.65 
MathPictureStart
% Scaling calculations
0.02381 0.00952 1e-05 0 [
[(Matrix Dimension)] 0.85 -0.05625 0 -1 Msboxa
[()] 0.83 -0.06625 0 -1 Msboxa
[()] 0.83 0.6825 0 -1 Msboxa
[(20)] 0.21429 -0.01249 0 1 Msboxa
[(40)] 0.40476 -0.01249 0 1 Msboxa
[(60)] 0.59524 -0.01249 0 1 Msboxa
[(80)] 0.78571 -0.01249 0 1 Msboxa
[(100)] 0.97619 -0.01249 0 1 Msboxa
[(200)] 0.01131 0.13001 1 0 Msboxa
[(400)] 0.01131 0.26 1 0 Msboxa
[(600)] 0.01131 0.39 1 0 Msboxa
[(800)] 0.01131 0.52 1 0 Msboxa
[(1000)] 0.01131 0.65 1 0 Msboxa
[ -0.001 -0.00724 0 0 ]
[ 1.001 0.651 0 0 ]
% WAR added next line to make space for vertical caption
10 0 translate
] MathScale
% Start of Graphics
1 setlinecap
1 setlinejoin
newpath
%%Object: Graphics
[ ] 0 setdash
0 setgray
0 setgray
[(Floating Point Operations)] 0.14 0.24 0 1 MshowaRotate
[(Matrix Dimension)] 0.85 -0.05625 0 -1 Mshowa
gsave
gsave
0.002 setlinewidth
0 1e-05 moveto
1 1e-05 lineto
stroke
0.21429 -0.00624 moveto
0.21429 0.00626 lineto
stroke
0 setgray
[(20)] 0.21429 -0.01249 0 1 Mshowa
0.40476 -0.00624 moveto
0.40476 0.00626 lineto
stroke
0 setgray
[(40)] 0.40476 -0.01249 0 1 Mshowa
0.59524 -0.00624 moveto
0.59524 0.00626 lineto
stroke
0 setgray
[(60)] 0.59524 -0.01249 0 1 Mshowa
0.78571 -0.00624 moveto
0.78571 0.00626 lineto
stroke
0 setgray
[(80)] 0.78571 -0.01249 0 1 Mshowa
0.97619 -0.00624 moveto
0.97619 0.00626 lineto
stroke
0 setgray
[(100)] 0.97619 -0.01249 0 1 Mshowa
0.02381 0 moveto
0.02381 0.65 lineto
stroke
0.01756 0.13001 moveto
0.03006 0.13001 lineto
stroke
0 setgray
[(200)] 0.01131 0.13001 1 0 Mshowa
%WAR: Labels for curves
[(EMAP)] 0.30131 0.13001 1 0 Mshowa
[(LMSC)] 0.55131 0.13001 1 0 Mshowa
[(CEMAP)] 0.95131 0.04001 1 0 Mshowa
0.01756 0.26 moveto
0.03006 0.26 lineto
stroke
0 setgray
[(400)] 0.01131 0.26 1 0 Mshowa
0.01756 0.39 moveto
0.03006 0.39 lineto
stroke
0 setgray
[(600)] 0.01131 0.39 1 0 Mshowa
0.01756 0.52 moveto
0.03006 0.52 lineto
stroke
0 setgray
[(800)] 0.01131 0.52 1 0 Mshowa
0.01756 0.65 moveto
0.03006 0.65 lineto
stroke
0 setgray
[(1000)] 0.01131 0.65 1 0 Mshowa
grestore
grestore
0 0 moveto
1 0 lineto
1 0.65 lineto
0 0.65 lineto
closepath
clip
newpath
0 setgray
gsave
gsave
gsave
0.005 setlinewidth
0.67 setgray
0.03333 1e-05 moveto
0.04315 1e-05 lineto
0.05298 1e-05 lineto
0.07262 1e-05 lineto
0.1119 1e-05 lineto
0.15119 1e-05 lineto
0.19048 1e-05 lineto
0.22976 2e-05 lineto
0.26905 2e-05 lineto
0.30833 2e-05 lineto
0.34762 2e-05 lineto
0.3869 2e-05 lineto
0.42619 2e-05 lineto
0.46548 2e-05 lineto
0.50476 2e-05 lineto
0.54405 2e-05 lineto
0.58333 2e-05 lineto
0.62262 2e-05 lineto
0.6619 2e-05 lineto
0.70119 2e-05 lineto
0.74048 2e-05 lineto
0.77976 2e-05 lineto
0.81905 2e-05 lineto
0.85833 2e-05 lineto
0.89762 3e-05 lineto
0.9369 3e-05 lineto
0.97619 3e-05 lineto
stroke
grestore
grestore
gsave
gsave
0.005 setlinewidth
0.03333 1e-05 moveto
0.03824 1e-05 lineto
0.04315 1e-05 lineto
0.05298 2e-05 lineto
0.0628 3e-05 lineto
0.07262 5e-05 lineto
0.09226 8e-05 lineto
0.1119 0.00012 lineto
0.15119 0.00025 lineto
0.19048 0.00041 lineto
0.22976 0.00062 lineto
0.26905 0.00088 lineto
0.30833 0.00118 lineto
0.34762 0.00152 lineto
0.3869 0.00191 lineto
0.42619 0.00234 lineto
0.46548 0.00282 lineto
0.50476 0.00334 lineto
0.54405 0.0039 lineto
0.58333 0.00451 lineto
0.62262 0.00516 lineto
0.6619 0.00586 lineto
0.70119 0.0066 lineto
0.74048 0.00738 lineto
0.77976 0.00821 lineto
0.81905 0.00909 lineto
0.85833 0.01001 lineto
0.89762 0.01097 lineto
0.9369 0.01198 lineto
0.97619 0.01303 lineto
stroke
grestore
grestore
gsave
gsave
0.005 setlinewidth
0.03333 2e-05 moveto
0.03579 3e-05 lineto
0.03824 4e-05 lineto
0.04315 6e-05 lineto
0.04807 0.0001 lineto
0.05298 0.00014 lineto
0.05789 0.00019 lineto
0.0628 0.00025 lineto
0.07262 0.00042 lineto
0.08244 0.00065 lineto
0.09226 0.00094 lineto
0.10208 0.00131 lineto
0.1119 0.00176 lineto
0.13155 0.00296 lineto
0.15119 0.0046 lineto
0.17083 0.00675 lineto
0.19048 0.00947 lineto
0.22976 0.01694 lineto
0.26905 0.02754 lineto
0.30833 0.04182 lineto
0.34762 0.06033 lineto
0.3869 0.08362 lineto
0.42619 0.11223 lineto
0.46548 0.14672 lineto
0.50476 0.18763 lineto
0.54405 0.23551 lineto
0.58333 0.2909 lineto
0.62262 0.35435 lineto
0.6619 0.42642 lineto
0.70119 0.50764 lineto
0.74048 0.59857 lineto
0.77976 0.69975 lineto
0.81905 0.81173 lineto
0.85833 0.93505 lineto
0.89762 1.07028 lineto
0.9369 1.21794 lineto
0.97619 1.3786 lineto
stroke
grestore
grestore
gsave
gsave
0.005 setlinewidth
0.33 setgray
0.03333 2e-05 moveto
0.03579 2e-05 lineto
0.03824 3e-05 lineto
0.0407 5e-05 lineto
0.04315 6e-05 lineto
0.04807 0.00011 lineto
0.05298 0.00017 lineto
0.05789 0.00025 lineto
0.0628 0.00036 lineto
0.06771 0.0005 lineto
0.07262 0.00067 lineto
0.08244 0.00111 lineto
0.09226 0.00171 lineto
0.10208 0.0025 lineto
0.1119 0.00351 lineto
0.12173 0.00476 lineto
0.13155 0.00627 lineto
0.15119 0.0102 lineto
0.17083 0.0155 lineto
0.19048 0.02237 lineto
0.21012 0.03103 lineto
0.22976 0.04167 lineto
0.26905 0.06973 lineto
0.30833 0.1082 lineto
0.34762 0.15872 lineto
0.3869 0.22294 lineto
0.42619 0.30249 lineto
0.46548 0.39902 lineto
0.50476 0.51418 lineto
0.54405 0.64959 lineto
0.58333 0.80691 lineto
0.62262 0.98778 lineto
0.6619 1.19384 lineto
0.70119 1.42673 lineto
0.74048 1.6881 lineto
0.77976 1.97958 lineto
0.81905 2.30282 lineto
0.85833 2.65947 lineto
0.89762 3.05116 lineto
0.9369 3.47954 lineto
0.97619 3.94625 lineto
stroke
grestore
grestore
grestore
% End of Graphics
MathPictureEnd
%%EPS Trailer
end

%%EndDocument
 GE /Times-Bold SF
16589 48208 MT
(Figure 2-24:)SH
/Times-Roman SF
22912 XM
(Number of floating point operations \050in thousands\051 vs. matrix)SH
23369 49404 MT
(dimension for the estimation algorithms listed in Table 2-1.)SH
23387 50600 MT
(The ML curve is nearly coincident with the horizontal axis.)SH
13300 53585 MT
(The CEMAP estimate was introduced)
87 W( as a fitting choice for the LMS desired signal due to its)86 W
10800 55324 MT
(low computation and reasonable estimation accuracy.  The CEMAP estimate uses fixed)
87 W( coefficients)88 W
10800 57063 MT
(derived from the EMAP procedure to form the weighted combination of the)113 W
/Times-Italic SF
45818 XM
(a priori)113 W
/Times-Roman SF
49712 XM
(mean and the)112 W
10800 58802 MT
(sample mean that would have been obtained after)225 W
/Symbol SF
34652 XM
(h)SH
/Times-Roman SF
35815 XM
(samples had)
225 W( been observed by a particular)226 W
10800 60541 MT
(speaker from each class of data.)
153 W( The)
579 W( parameter)152 W
/Symbol SF
33425 XM
(h)SH
/Times-Roman SF
34515 XM
(determines these weighting factors.  When the)152 W
10800 62280 MT
(number of observations is near)10 W
/Symbol SF
24687 XM
(h)SH
/Times-Roman SF
(, the CEMAP)
10 W( and EMAP mean-square errors are also close.  Driving)11 W
10800 64019 MT
(the LMS algorithm)
252 W( with this signal therefore reduces the estimation error with respect to other)251 W
10800 65758 MT
(choices for)
53 W( the desired signal such as the ML mean.  The parameter)54 W
/Symbol SF
41493 XM
(h)SH
/Times-Roman SF
42485 XM
(was also shown to control the)54 W
10800 67497 MT
(tradeoff between the misadjustment of the LMS-C estimates and its convergence properties.)SH
13300 70482 MT
(The dependence of the ML, EMAP, and LMS-C estimators on the various statistical attributes)85 W
ES
%%Page: 52 53
BS
0 SI
10 /Times-Roman AF
54800 4286 MT
(52)SH
11 SS 
10800 7955 MT
(of the data was investigated both analytically and empirically.  Empirically, the LMS-C)
37 W( estimate was)38 W
10800 9694 MT
(shown to)
93 W( produce a mean-square error which was often lower than that of the EMAP.  This is pos-)92 W
10800 11433 MT
(sible because)
69 W( the LMS-C algorithm derives its coefficients from the data samples, unlike the EMAP)70 W
10800 13172 MT
(estimate which)
168 W( has deterministic coefficients based on the number of observations.  Although the)167 W
10800 14911 MT
(stochastic gradient coefficient update introduces some asymptotic misadjustment,)
342 W( it appears to)343 W
10800 16650 MT
(provide superior adaptation performance.)SH
13300 19635 MT
(Analysis of the mean vector estimation problem in this chapter showed)
195 W( that when the dog-)194 W
10800 21374 MT
(matism of the)
52 W( data is near 1.0, the LMS-C and EMAP estimators can substantially reduce estimation)53 W
10800 23113 MT
(error with)
196 W( respect to the ML estimate when the adaptation training data is limited.  The speaker)195 W
10800 24852 MT
(adaptation problem is a limited-data setting.  Chapters 3)
79 W( and 4 investigate the effects which LMS-C)80 W
10800 26591 MT
(and EMAP estimation have on the accuracy of both)
128 W( feature-based and stochastic model-based sys-)127 W
10800 28330 MT
(tems, respectively, when applied to the problem of speaker adaptation.)SH
ES
%%Page: 53 54
BS
0 SI
10 /Times-Roman AF
54800 4286 MT
(53)SH
15 /Times-Bold AF
30071 15405 MT
(Chapter 3)SH
14360 18058 MT
(Applications to Feature-Based Speech Recognition Systems)SH
13 SS 
10800 22529 MT
(3.1. Overview)SH
11 /Times-Roman AF
13300 25444 MT
(The general architecture of feature-based continuous)
29 W( speech recognition systems includes a fea-)30 W
10800 27183 MT
(ture extractor, a phonetic)
20 W( or other sub-word unit classifier, a word matcher, and a phrase hypothesiza-)19 W
10800 28922 MT
(tion module, organized as what is)
175 W( essentially an expert system.  The feature extractor codifys al-)176 W
10800 30661 MT
(gorithms or heuristics which measure)
190 W( cues that represent the most important speaker-independent)189 W
10800 32400 MT
(characteristics of the speech signal.  Based on the observed values)
153 W( and temporal location of these)154 W
10800 34139 MT
(features, the waveform is segmented and phonetic labels)
99 W( are applied by the classifier.  Through ap-)98 W
10800 35878 MT
(plication of knowledge about pronunciation, words are hypothesized from a)
153 W( phonetic network and)154 W
10800 37617 MT
(placed into a word lattice with associated word scores.  Parsing)
17 W( techniques can be applied to the word)16 W
10800 39356 MT
(lattice to identify and score potential phrases and sentences which conform to the grammar)
147 W( of the)148 W
10800 41095 MT
(given recognition task.)SH
13300 44080 MT
(This chapter explores the application of)
67 W( the estimation algorithms from the previous chapter to)66 W
10800 45819 MT
(feature-based continuous speech recognition systems.)
350 W( Specifically,)
977 W( it describes the effects on)351 W
10800 47558 MT
(phonetic classification accuracy when these algorithms are used to update the system's acoustic-)212 W
10800 49297 MT
(phonetic classifier parameters, and the extent to which correlation information)
172 W( can help to reduce)173 W
10800 51036 MT
(error in)
234 W( the parameter estimation process.  Unsupervised forms of the estimation algorithms are)233 W
10800 52775 MT
(presented, as supervised feedback of phonetic labels is impractical in continuous speech recognition.)SH
13300 55760 MT
(The chapter)
144 W( opens with a brief review of spectrogram reading, which highlights the types of)145 W
10800 57499 MT
(information used in feature-based recognition.  The Carnegie Mellon)
38 W( isolated-word)37 W
9 SS 
48107 XM
(FEATURE)SH
11 SS 
52469 XM
(system,)SH
10800 59238 MT
(which successfully applied)
84 W( the EMAP algorithm for adaptation, is briefly described, followed by an)85 W
10800 60977 MT
(overview of the CMU)29 W
9 SS 
20874 XM
(ANGEL)SH
11 SS 
24228 XM
(continuous-speech recognition)
29 W( system.  Section 3.4 explicitly describes)28 W
10800 62716 MT
(the adaptation methodology adopted)
14 W( for the feature-based classification problem, and presents predic-)15 W
10800 64455 MT
(tions of adaptation performance)
45 W( based on empirical tests using)44 W
9 SS 
38966 XM
(ANGEL)SH
11 SS 
42335 XM
(front vowel statistics.  Experi-)44 W
10800 66194 MT
(ments described throughout)
128 W( this chapter focused on classification of the front vowels /)129 W
/Times-Italic SF
(iy)SH
/Times-Roman SF
(/, /)129 W
/Times-Italic SF
(ih)SH
/Times-Roman SF
(/, and)129 W
10800 67933 MT
(/)SH
/Times-Italic SF
(eh)SH
/Times-Roman SF
(/, which exhibit a fair degree of correlation among formant frequencies and are sufficient)
241 W( to)240 W
10800 69672 MT
(demonstrate the concepts set forth in this study.)SH
ES
%%Page: 54 55
BS
0 SI
10 /Times-Roman AF
54800 4286 MT
(54)SH
11 SS 
13300 7955 MT
(Supervised adaptation results from)11 W
9 SS 
28924 XM
(ANGEL)SH
11 SS 
32261 XM
(are described in Section 3.5.  Results from these tests)12 W
10800 9694 MT
(identified several problems)
58 W( which led to the development of an alternate feature-based system called)57 W
9 SS 
10800 11433 MT
(PROPHET)SH
11 SS 
(. As)
703 W( described in Section 3.6, the)214 W
9 SS 
31573 XM
(PROPHET)SH
11 SS 
36062 XM
(system uses simple rules derived)
214 W( from the)215 W
10800 13172 MT
(spectrogram reading process to compensate for)
91 W( some of the effects of continuous speech.)90 W
9 SS 
51800 XM
(PROPHET)SH
11 SS 
10800 14911 MT
(also incorporates unsupervised adaptation)
2 W( techniques.  A lack of sufficient training data for estimation)3 W
10800 16650 MT
(of)SH
/Symbol SF
12213 XM
(S)SH
/Times-Roman SF
13314 XM
(, however, made it necessary to investigate)
222 W( some aspects of feature-based adaptation using)221 W
9 /Times-Italic AF
12864 17010 MT
(o)SH
11 /Times-Roman AF
10800 18389 MT
(computer-generated data.  These investigations are also described in Section 3.6.)SH
13300 21374 MT
(At the time of the evaluation of)121 W
9 SS 
28230 XM
(PROPHET)SH
11 SS 
(, the)121 W
9 SS 
34641 XM
(ANGEL)SH
11 SS 
38087 XM
(system was)
121 W( no longer available for ex-)122 W
10800 23113 MT
(perimentation. The)527 W
9 SS 
20098 XM
(PROPHET)SH
11 SS 
24499 XM
(experiments were therefore conducted)
126 W( using an approximation of the)125 W
9 SS 
10800 24852 MT
(ANGEL)SH
11 SS 
14125 XM
(system, which for expository convenience will be referred to as the)SH
9 SS 
43935 XM
(SPIRIT)SH
11 SS 
46960 XM
(system.)SH
501 1000 0 11700 39274 GB 
%%BeginDocument: /usr0/rozzi/Documentation/PhDThesis/Chapter3/sjwf.eps
%!PS-Adobe-2.0 EPSF-1.2
%%Creator:Icon
%%Title:sjwf.eps
%%CreationDate:Fri Jan  2 06:41:35 1970
%%Origin:0 720
%%BoundingBox: 0.000 0.000 861.000 264.000
%%EndComments
%ImageData: 861 264 2 1 0 216 0 "beginimage"
20 dict begin
/rows 264 def
/cols 861 def
/str1 216 string def
/readit {currentfile exch readhexstring pop} def
/beginimage
{{str1 readit} image}
def
gsave
cols rows 1.8 div scale
cols rows 2
[cols 0 0 rows neg 0 rows]
beginimage
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000003FFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFF003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFF003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF3FFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFF3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF003FFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFF3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFF003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF3FFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFF003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF3FFF3FFFFFFFFFFFFFCFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFF3FFF3FFFFFFFFFFFFFCFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF003FFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFF3FFF3FFFFFFFFFFFFFCFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFF003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF3FFF3
FFFFFFFFFFFFFCFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFF003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF3FFF3FFFFFFFFFFFFFCFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFF3FFF3FFFFFFFFFFFFFCFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF003FFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFF3FFF3FFFFFFFFFFFFFCFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFF003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF3FFF3
FFFFFFFFFFFFFCFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFF003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCFFF3FFF3FFCFFF3FFCFFFCFF
F3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFCFFF3FFF3FFCFFF3FFCFFFCFFF3FFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF003FFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFCFFF3FFF3FFCFFF3FFCFFFCFFF3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFF003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCFFF3FFF3
FFCFFF3FFCFFFCFFF3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFF003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCFFF3FFF3FFCFFF3FFCFFFCFF
F3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFCFFF3FFF3FFCFFF3FFCFFFCFFF3FFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF003FFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFCFFF3FFF3FFCFFF3FFCFFFCFFF3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFF003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCFFF3FFF3
FFCFFF3FFCFFFCFFF3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFF003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCFFF3FFF3FFCFFF3FFCFFFCFF
F3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFCFFF3FFF3FFCFFF3FFCFFFCFFF3FFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF003FFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFCFFF3FFF3FFCFFF3FFCFFFCFFF3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFF003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCFFF3FFF3
FFCFFF3FFCFFFCFFF3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFF003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCFFF3FFF3FFCFFF3FFCFFFCFF
F3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFCFFF3FFF3FFCFFF3FFCFFFCFFF3FFFFFFCFFFCFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF003FFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFCFFF3FFF3FFCFFF3FFCFFFCFFF3FFFFFFCFFFCFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFF003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCFFF3FFF3
FFCFFF3FFCFFFCFFF3FFFFFFCFFFCFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFF003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCFFF3FFF3FFCFFF3FFCFFFCFF
F3FFFFFFCFFFCFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFF3FFCFFF3FFF3FFCFFF3FFCFFFCFFF3FFFFFFCFFFCFFF
F3FFFCFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF003FFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFF3FFCFFF3FFF3FFCFFF3FFCFFFCFFF3FFFFFFCFFFCFFFF3FFFCFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFF003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF3FFCFFF3FFF3
FFCFFF3FFCFFFCFFF3FFFFFFCFFFCFFFF3FFFCFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFF003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF3FFCFFF3FFF3FFCFFF3FFCFFFCFF
F3FFFFFFCFFFCFFFF3FFFCFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFF3FFCFFF3FFC3FFCFFF3FFCFFFCFFF3FFFFFFCFFFCFFF
F3FFFCFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF003FFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFF3FFCFFF3FFC3FFCFFF3FFCFFFCFFF3FFFFFFCFFFCFFFF3FFFCFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFF003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF3FFCFFF3FFC3
FFCFFF3FFCFFFCFFF3FFFFFFCFFFCFFFF3FFFCFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFF003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF3FFCFFF3FFC3FFCFFF3FFCFFF0FF
F3FFFFFFCFFFCFFFF3FFFCFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFF3FFFFFF3FFCFFF3FFC3FFCFFF3FFCFFF0FFF3FFF3FFCFFFCFFF
F3FFFCFFFF3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF003FFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF3FF
FFFF3FFCFFF3FFC3FFCFFF3FFCFFF0FFF3FFF3FFCFFFCFFFF3FFFCFFFF3FFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFF003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF3FFFFFF3FFCFFF3FFC3
FFCFFF3FFCFFF0FFF3FFF3FFCFFFCFFFF3FFFCFFFF3FFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFF003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFF3FFFFFF3FFCFFF3FFC3FF0FFF3FFCFFF0FF
F3FFF3FFCFFFCFFFF3FFFCFFFF3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFCFFF3FFFFFF3FFCFFF3FFCCFF0FFF3FFCFFF0FFF3FFF3FFCFFFCFFF
F3FFFCFFFF3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF003FFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCFFF3FF
FFFF3FFCFFF3FFCCFF0FFF3FFCFFF0FFF3FFF3FFCFFFCFFFF3FFF0FFFF3FFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFF003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCFFF3FFFFFF3FFCFFF3FFCC
FF0FFF3FFCFFF0FFF3FFF3FFCFFFCFFFF3FFF0FFFF3FFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFF003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFCFFF3FFFFFF3FFCFFF3FFCCFF0FFF3FFCFFF0FF
F3FFF3FFCFFFCFFFF3FFF0FFFF3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFCFFF3FFCFFF3FFCFFF0FFCCFF33FF3FFCFFF0FFF3FFF3FFC3FFCFFF
F3FFF0FFFF3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF003FFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCFFF3FF
CFFF3FFCFFF0FFCCFF33FF3FFCFFF0FFF3FFF3FFC3FFCFFFF3FFF0FFFF3FFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFF003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCFFF3FFCFFF3FFCFFF0FFCC
FF33FF3FFCFFF33FF3FFF3FFC3FFCFFFF3FFF0FFFF3FFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFF003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFCFFF3FFCFFF3FFCFFF0FFCCFF33FF3FFCFFF33F
F3FFF3FFC3FFCFFFF3FFF0FFFF3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFCFFF3FFCFFF3FFCFFF0FFCCFF33FF3FFCFFF33FF3FFF3FFC3FFCFFF
F3FFF0FFFF3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF003FFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCFFF3FF
CFFF3FFCFFF0FFCCFF33FF3FFCFFF33FF3FFF3FFC3FFCFFFF3FFF0FFFF3FFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFF003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCFFF3FFCFFF3FFCFFF0FFCC
FF33FF3FFCFFF33FF3FFF3FFC3FFCFFFF3FFF0FFFF3FFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFF003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFCFFF3FFCFFF3FFCFFF0FFCCFF33FF3FFCFFF33F
F3FFF3FFC3FFCFFFF3FFF0FFFC3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF3FFFFFFF
FFFFFFFFFCFFF3FFCFFF3FFCFFF0FFCCFF33FF3FFCFFF33FF3FFF3FFC3FFCFFF
F3FFF0FFFC3FFFF3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF003FFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF3FFFFFFFFFFFFFFFFCFFF3FF
CFFF3FFCFFF0FFCCFF33FF0FFCFFF33FF3FFC3FFC3FFCFFFF3FFF0FFFC3FFFF3
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFF003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFF3FFFFFFFFFFFFFFFFCFFF3FFCFFF3FFCFFF0FFCC
FF33FF0FFCFFF33FF3FFC3FFC3FFCFFFF3FFF0FFFC3FFFF3FFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFF003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFF3FFFFFFFFFFFFFFFFCFFF3FFCFFF3FFCFFF0FFCCFF33FF0FFCFFF33F
F3FFC3FFC3FFCFFFF3FFF0FFFC3FFFF3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF3FFF3FFF
FFFFFFFFFCFFF3FFCFFF3FFCFFF0FFCCFF33FF0FFCFFF33FF3FFC3FFC3FFCFFF
F3FFF0FFFC3FFFF3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF003FFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF3FFF3FFFFFFFFFFFFCFFF3FF
CFFF3FFCFFF0FFCCFF33FF0FFCFFF33FF3FFC3FFC3FFCFFFF3FFF0FFFC3FFFF3
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFF003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFF3FFF3FFFFFFFFFFFFCFFF3FFCFFF3FFCFFF0FFCC
FF33FF0FFCFFF33FF3FFCCFFC3FFCFFFF3FFF0FFFC3FFFC3FFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFF003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFF0FFF3FFFFFFFFFFFFCFFF3FFCFFF3FFC3FF0FFCCFF33FF0FFCFFF33F
F0FFCCFFC3FFCFFFF3FFF0FFFC3FFFC3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0FFF3FFF
FFFFFFFFFCFFF3FFCFFF3FFC3FF0FFCCFF33FF0FFCFFF33FF0FFCCFFC3FFCFFF
F3FFF0FFFC3FFFC3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF003FFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0FFF3FFFFFFFFFFFFCFFF3FF
CFFF3FFC3FF0FFCCFF33FF0FFCFFF33FF0FFCCFFC3FFCFFFF3FFF0FFFC3FFFC3
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFF003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFF0FFF3FFFFFFFFFFFFCFFF3FFCFFF3FFC3FCCFFCC
FF33FF0FFCFFF33FF0FFCCFFC3FFC3FFF3FFF33FFC3FFFC3FFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFF003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFF0FFF3FFFFFFFFFFFFCFFF3FFCFFF3FFC3FCCFFCCFF33FF0FFCFFF33F
F0FFCCFFC3FFC3FFF3FFF33FFC3FFFC3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0FFC3FFF
FFFFFFFFFCFFF3FFCFFF3FFC3FCCFFCCFF33FF0FFCFFF33FF0FFCCFFC3FFC3FF
F3FFF33FFCCFFFC3FFFF3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF003FFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0FFC3FFFFFFFFFFFFC3FF3FF
CFFF3FFC3FCCFFCCFF33FF0FF0FFF33FF0FFCCFFC3FFC3FFF0FFF33FFCCFFFC3
FFFF3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFF003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFCFFF0FFC3FFCFFFFFF3FFC3FF3FFCCFF33FC0FCCFFCC
FF33FF0FF0FFF33FF0FFCCFFC3FFC3FFF0FFF33FFCCFFFC3FFFF3FFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFF003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFCFFF0FFC3FFCFFFFFF3FFC3FF3FFCCFF33FC0FCCFFCCFF33FF0FF0FFF33F
F0FFCCFFC3FFC3FFF0FFF33FFCCFFFC3FFFF3FFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCFFF0FFC3FFC
FFFFFF3FFC3FF0FFCCFF33FC0FCCFFCCFF33FF0FF33FF33FF0FFCCFFC3FFC3FF
F0FFF33FFCCFFFC3FFFF3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF003FFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCFFF0FFC3FFCFFFFFF3FFC3FF0FF
CCFF33F30FCCFFCCFF33FF0FF33FF33FF0FFCCFFC3FFC3FFF0FFF33FFCCFFFC3
FFFF3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFF003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFCFFF0FFC3FFCFF3FFF3FFC3FF0FFCCFF33F30FCCFFCC
FF33FF0FF33FF33FF0FFCCFFC3FFC3FFF0FFF33FFCCFFFC3FFFF3FFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFF003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFC3FF0FFC3FF3FF3FFF3FFC3FF0FFCCFF03F30FCCFFCCFF33FF0FF33FF33F
F0FFCCFFC3FFC3FFF0FFF33FFCCFFFC3FFFF3FFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC3FF0FFC3FF3
FF3FFF3FFC3FF0FFCCFF03F30FCCFFCCFF33FF0FF33FF33FF0FFCCFFC3FFC3FF
F0FFF33FFCCFFFCCFFFF3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF003FFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC3FF0FFC3FF3FF3FFF3FFC3FF0FF
C0FF03F30FCCFFCCFF33FF0FF33FF33FF0FFCCFFC3FFC3FFF0FFF33FFCCFFFCC
FFFF3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFF003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFC3FF0CFC33F3FF3CFF3FFC3FF0FFC0FF03F30FCC3FCC
FF33FF0FF33FF33FF0FFCCCFC3FFC3FFF0FFF33FFCCFFFCCFFFF3FFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFF003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFC3FF0CFC33F3FF3CFF3FFC3FF0FFC0FF03F30FCC3FCCFF33FF0FF33FF33F
F0FFCCCFC3FFC3FFF0FFF33FFCCFFFCCFFFF3FFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC33F0CFC33F3
FF0CFF3FFC3FF03FC0FF03F30FCC3FCCFF33FCCFF33FF33FCCFFCCCF33FF33FF
F0FFF33FFCCFFFCCFFFF3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF003FFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC33F0CFC33F3FF0CFF3FFC3FF03F
C0FF03F30FCC3FCCFF33FCCFF33FF33FCCFFCCCF3CFF33FFF0FFF33FFCCFFFCC
FFFF3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFF003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFC33F30FC33F3FF0CFF3FFC3FF03FC0FF03F30FCC3FCC
FF33FCCFF33FF33FCCFFCCCF3CFF33FFCCFFF33FFCCFFFCCFFFF3FFFFCFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFF003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFC33F30FC33F3FF0CFF3FFC3FF03FC0FF03F30FCC3FCCFF33FCCFF33FF33F
CCFFCCCF3CFF33FFCCFFF33FFCCFFFCCFFFF3FFFFCFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC33F30FC33F3
FF0CFF3FFC3FF03FC0FF03F30FCC3FCCFF33FCCFF30FF33FCC3FCCCF3C3F33FF
CCFFF33FFCCFFFCCFFFF3FFFFCFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF003FFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC33F30FC33F3FF0CFF3FFC3FF03F
C0FF03F30FCC3FCCFF33FCCFF30FF33FCC0FCCCF3C3F33FFCCFFF33FFCCFFFCC
FFFF3FFFFCFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFF003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFF3FFC33F30FC33F3FF0CFF33FC3FF03FC0FF03F30FCC3FCC
FF33FCC3F30FF33FCC0FCCCF3C3F33FFCCFFF33FFCCFFFCCFFFF33FFFC3FFFFC
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFF003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
F3FFC33F30FC33F3FF0CFF33FC3FF03FC0FCC3F30FCC3FCCFF33FCC3F303F33F
CC0FCCCF3C3F33FFCCFFF33FFCCFFFCCFFFF33FFFC3FFFFCFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF3FFC33F30FCC3F3
FF0CFC33FC3FF03FC0FCC3F30FCC3FCCFF33FCC3F303F30FCC0FCCCF3C3F33FF
CCFFF33FFCC3FFCCFFFF33FFFC3FFFFCFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF003FFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF3FFC33F30FCC3F3FF0CFC33FC3FF03F
C0FCC3F30FCC3FCCFF33FCC3F303F30FCC0F3C0F3C3F33FFCCFFF33FFCC3FFCC
FFFF33FFFC3FFFFCFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFF003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFF3FFCFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFCFFF3FFC33F30FCC3F3FF0CFC33FC3FCC0FC0FCC3F30FCC3FCC
FF33FCC3F303F30FCC0F3C0F3C3F33FFCCFFF33FFCC3FFCCFFFF33FFFC3FFFFC
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFF003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF3FFCFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCFF
F3FFC33F30FCC3F3FF0CFC33FC3FCC0FC0FCC3F30FCC3FCCFF33FCC3F303F30F
CC0F3C0F3C3F33FFCCFFCF3FFCC3FFCCFFFF33FFFC3FFFFCFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF3FFCFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCFFF3CFC33F30FCC3F3
3F0CFC33FC3FCCCFC0FCC3F333CC3FCCFF33FCC3F303F30FCC0F3F0F3C3F303F
CCCFCF0FFCC3FFCCFFFF33FFFCCFFFFCCFFFFCFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF003FFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFF3FFCFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFCFFF3CFC33F30FCC3F33F0CFC33FC3FCCCF
C0FCC3F333CFCFCCFF3CFCCCF303CFCFCC0F3F0F3C3F303FCCCFCF0FFCC3FFCC
FFFF33FFFCCFFFFCCFFFFCFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFF003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFF3FFCFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFCFFF3CFC33F30FCC3F33F0CFC33FC3FCCCFC0FCC3F333CFCFCC
FF3CFCCCF303CFCFCC0F3F0F3C3F303FCCCFCF0FFCC33FCCFFFF33FFFCCFFFFC
CFFFFCFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFF003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF3FFCFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCFF
C3CFC33F3CFCC3F33F0CFC33FCCFCCCF333CC3F333CFCFCCFF3CFCCCF303CFCF
CC0F3F0F3F3F303FCCCFCF0FFCF33FCCFFFF33FFFCCFFFFCCFFFFCFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF3FFCFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0CFC3CFC33CFCFCC3F3
3F0CFC33FCCFCCCF330CC3F333CFCF3F3F3CFCCCF303CFCFCC0F3F0F3F3F303F
CC0FCF0FFCF33FCCFFFF03FFFCCFFFFCCFFFFCFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF003FFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFF3FFCFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFF0CFC30FC33CFCFCC3F33F0CFCC3FCCFCCCF
330CCCF333CFCF3F3CFCFCCCF303CFCFCCCF3F0F3F3F303FCC0FCF0FFCF33FCC
FFFF03FFFCCFFFFCCFFFFCFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFF003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFF3FF3FFCFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFCFFF0CFC30FCC3CFCFCC3F33F0CFCC3F3CFCCCF330CCC3333CFCF3F
3CFCFCCCF303CFCFCCCF3F0F3F3F333FCC0FCF0FF3F33FCF3FFF03FFFCCFFFFC
CFFFFCFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFF003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF3FF3FFC3F
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCFFF0CF
C30FCC3CFCFCC3F33F0CFCC3F3CFCCCF330CCC3333CFCF3F3CFCFCFCF303CFF3
CCCF3FF33F3F333FCC0FCF0FF3FC3F3F3FFF03FFFCCFFFFC0FFFFCFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF3FF3FFC3FF3FFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCFFF0CFC30F3C3CFCFCC3F3
3F0CFCC3F3CFCCCF330CCC3333CFCF3F3CFC3CFCF303CFF3CCCF3FF33FCF333F
CC0FCF0FF3FC3F3F3FFF03FFFCCFFFFC0FFFFCFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF003FFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFF3FF0FFC3FF3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFCFFF0C3C30F3C3CFCFCC3F33F0CFCC3F3CFCCCF
330CCC3333CFCF3F3CFC3CFCF303CFF3CCCF3FF33FCF333FCC0FCFCFF3FC3F3F
3FFF03FFFCCFFFFC0FFFFCFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFF003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFF3FF0FFC3FF3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFC3FF0C3C30F3C3CFCF3C3F33F0CFCC3F3CFCCF3330CCC3333CFCF3F
3CFC3CFCF303CFF3CCCF3FF33FCF333FCC0FCFF3F3FC3F3F3FFF00FFFCCFFFFC
0FFFFCFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFF003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC3FF0FFC3F
F3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC3FF0C3
C30F3C3CFCF3C3F33CCCFCC3F3CFCCF3330CCC3333CFCF3F3CFC3CFCF303CFF3
CCCF3FF33FCF333FCCCFCFF3F3FCCF3F3FFF00FFFCCFFFFC0FFFFCFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC3FCCFFC3FF3FFFFFCFFF3FF3F
FFFFFFFFFFFF3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC3FF0C3C30F3C3CFF33C3F0
3CCC3CC333CFCCF3330CCC3333CFCF3F0CFC3CFCF303CFF3CCF33FF33FCF333F
CCCFCFF3F3FCCF3F3FFF00FFFCCFFFFC0FFFFC3FFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF003FFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFC3FCCFF33FF3FF3FFCFFF3FF0FFFFFFFFFFFFF3FFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFF3FFC3FF0C3C30F3C3CFF03C3303CCC3CCC33CFCFF3
330CCC0333CFCF3F0CFC3CFCF303CFF3CCF33FF33FCF3F3FCCF3CFF3F3FCCF3F
33FF0CFFFCCFFFFC0FFFFC3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFF003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFC3FCCFF33FF3FF0FFCFFF3FF0FFFFFF3FFFFFF3FFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFF3FFC3FF0C3C30F3C3CFF03CC303CCC3CCC33CFCFF33F0CCC0333CFCF3F
0CFF3CFCF333CFF3CCF33FF33FCF3F3FCCF3CFF3F3FCCF3F33FF0CFFFCCFFFFC
0FFFFC3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFF003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC3FCCFF33F
F3FF0FFCFFF3FF0FFCFFF3FFFFFF3FF3FFFFFF3FFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF3FFC33F0C3
CC0F3C3CFF03CC0C3CCC3CCC33F0CFF33F0CCC0333CFCF3F0CFF3CFCF33CCFF3
0CF33FF33FCF3FCCCFF3CFF0F3FCCF3F33FCCCFFFCCFFFFC0FFFFC3FFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC3FCCFF33FF3FF0FFCFFF3FF0F
FCFFF3FF0FFC3FF3FFFFFF3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC3FF330F0C3CC0F3C3CFF03CC0C
CCCC3CCC33F0CFF33F0CCC0333CFCF3F0CFF3CFF333CCFF30CF33FF03FCF3FCC
CFF3CFF0F3FCCF3F33FCCCFFFCCFFFFC0FFFFC3FFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF003FFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFCCFCCFF33FCCFF0FFCFFF3FF0FFCFFF3FF0FFC3FF3
FFFFFF3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFC3FF330F0C3CC0F3CCCFF03CC0CC0CC0CCC33F0CFF3
3F30CC0333CFCF3F0CFFCCFF333CCFF30CF0FFF03FCF3FCCCFF3CFF033FCCF3F
33FCCCF3F3CFFFFC0FFFFC3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFF003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFCCFCCFF33FCCFF0FFC3FF3FF0FFCFFF3FF0FFC3FF3FFCFFC3FFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFC3FF330F0C3CC333CCCFF03CC0CC0CC0CCC33F0CFFC3F30CC03F00FCF3F
30FFCCFF333CCFF30CF0FFF03FC33FCCCFF0CFF333FFCF3F33FCCC33F3F3FFFC
0CF3FC0FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFF003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCCFCCFF33F
CCFF0FFC3FF3FF0FFCFFF0FF0FFC3FF3FFCFFC3FFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC3FF330F0C3
CC333CCCFF03CC0CC0CC0CCC33F0CFFC3F30CCC3F00FCF3F30FFCCFF333CCFF3
0FF0FFF03FC33FCCCFF0CFF333FFCF3F33FCCC03F3F3FFFCCCF3FC0FFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCCFCCFF33FCCFF0FFC3FC3FF0F
FC3FF0FF0FFC3FF0FF0FFC3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC3CF330F303CC333CCCFF03CC0C
C0C30CCC33F0CFFC3F30CCC3F00FCF3FF0FFCCFF333CCFF30FF0FFF03FC33FCC
CFF0CFFF33FFCF3F33FCCC33F3F0FFF3F0F3FC03FFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF003FFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFCCFCCFF33FCCFF0FF33FCCFF0FFC3FF0FF0FFC3FF0
FF33FC3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFC3CF330F303CC333CCCFF03CC0CC0C30CCC33F30FFC
3F30CCC3F30FF33FF0FFCCFF333CCFF30FF0FFF03FCC3FC0CFF0CFFF33FFCF3F
30FCCC33F3F0FFF3F033FC33FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFF003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFF3CFCCFF33FCCFF0FF33FCCFF0FFC3FF0FF0FFC3FF0FF33FCCFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFC3CF330F303CC333C0CFF03CC0CC0C30CCC33F30FFC3F30CCC3F30FF03F
F0FFCCFF333CCFF30FF0FFF03FCC3FC0CFF30FFF33FFCF3FC0FCCCF3F3F0FFF3
F033FC3CFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFF003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF3CFCF3F33F
CCFF0FF33FCCFF0FFC3FF0FF0FFC3FF0FF33FCCFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC3CF330F333
CCF33C00FF03FC0FC0C30CCCC3F30FFC3F30CCC3FF0FF03FF0FFCCFF333CCFF0
0FF0FFF03FFC3FC0CFF30FFF33FFCF3FC0FCCCF3F3F0FFF3F033F33CFFFF3FFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF3CFCF3F33FCCFF33F33FCCFF33
F33FCCFF33FCCFCCFF33FCCFFCFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC3CF330F333CCF33F00FF03FC0F
C0C303CCC3F30FFC3F30CCC3FF0FF03FF0FFCCFF333CCFFC0FF0FFF03FFC3FC3
0FF30FFF33FFCF3FCCFCCCF3F3F0FFF3F003F3FCFFFF3FFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF003FFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFF0F3CCCF0F33FCCFF33F33FCCFCF3F33FCCFF33FCCFCC
FF33FCCFFCFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFC3CF3C0F3333CF33F00FF03FC0FC0C303CCC3F30FFC
3F30CCC3FF0FF03FF0FFCCFF333CCFFC0FF0FFF03FFC3FC30FFF0FFF33FFCC3F
CCFCCCFCF3F0FFF3F003F3FF0FFF3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFF003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFF0F3CCCF0F3CFCCFCF3F33FCCFCF3F33FCCFF33FCCFCCFF33FCCFFCFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFCC0F3CCF3333CF33F00FF33FC0FC0C303CCC3FF0FFC3F30FCC3FF0FFC3F
F0FFCCFFC33C3FFC0FF3FFF03FFC3FC30FFF0FFF33FFCC3FCCF0CFFCF3F03FF3
F003F3FF0FFF3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFF003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F3C0CF0F3CF
CCFCF3F33FCCFCF3F33FCCFF33FCCFCCFF33FCCFFCFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF33FFFFFFFFF3FCC0F3CCF33C
3CF33F00FF33FC0FC0C333CCC3FF0FFC3F30FCC3FF0FFC3FF0FFCCFFC33C3FFC
0FF3FFFC3FFC3FC30FFF0FFFC3FFCC3FCCC0CFFCF3F03FF3F0C3F3FF0FFF0FFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F3FCCFCF3CFCCFCF3F33FCCFCF3
F33FCCFF33F3CFCCFF33FCCFF33FF3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFF333FFFFFFFFF3FCC333CCF33C3CF33F00FF33FCCF
C0C333CCC3FF0FFC3FF0FCC3FFCFFC3FF0FFF0FFC33C3FFC0FF3FFFC3FFC3FCF
0FFF0FFFC3FFF03FCCC0CFFCF3F33FF3F0CCF3FFCFFF0FFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF003FFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFF333FCCFF33C3CCFCF3F33FCCFCF3F33FCCFCF3F3CFCC
FF33FCCFF33FF0FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF3
FFFFCFF330FFFFFFFFC3FCC333CF333C3CF33F00FF33FCCFCCC333CCC3CF0FFC
3FF0FCF3FFCFFF3FFCFFF0FFF33C3FFC0FF3FFFF3FFC3FFF0FFF0FFFC3FFF03F
CCC0CFFC33F333F3F3CCF3FFCFFF0FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFF003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFF333FCCFF33C3CCFCF3F33FCCFCF3F33FCCFCF3F3CFCCFF33F3CFF33FF0FF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF3FFFCCFC030FFFFFF
FFC3FCC333CF0F3C3CF03F00FF33FCCFCCC333CCC3CF0FFC3FF0FCF3FFCFFF3F
FCFFF0FFF33CFFFC0FFFFFFF3FFC3FFF0FFFCFFFC3FFF03FCF30CFFC33F330F3
F3FCF3FFCFFCCFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFF003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF333FCCFF33C3
CCCCF0F33FCCFCF3F3CFCF3CF3F3CFCF3F0CF3CFF03FF0FFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCCFFFC0FCCCCF3FFFFFFC3F3C333CF0F3C
3CF03F00FF33FC0FCCC3030CC3CF0FFC3FF0FCF3FFCFFF3FFCFFF0FFFF3CFFFF
0FFFFFFF3FFF3FFF0FFFCFFFC3FFF03FCF30CFFCC3F330F3F3FCF3FFF0FCCFFF
FFF3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF333FCCFF33C0CF0CF0F3C0CCCCF3
F3CFCF0CF3F3CFCF3CCCC3CCF03FF0FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFCCCFFC0F3CCF33FFFFFFC0F3C333CF0F3C3CC03F00FF33FC0F
FCC3033CC3CF0FFC3FF0FFF3FFCFFF3FFCFFF0FFFF3CFFFF0FFFFFFF3FFF3FFF
0FFFCFFFC3FFF33FCFF0FFFFC3F30CF3F3FC33FFF0FCCFFFFFF3FFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF003FFFFFFFFFFFFFCF
FFFFFFFFFCFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFCF33FF3FF33CCCF0CF333C0CF0CF333C0CF0CF333CFCF
30CC03F0F03FCCFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCF
33FC333FCF300FCFFFC0F3C333CF0F3C30C03F00FF33FC0FFCC3033FC3CF0FFC
3FF0FFF3FFCFFF3FFFFFF0FFFF3FFFFF0FFFFFFF3FFF3FFF0FFFCFFFC3FFF33F
CFF0FFFFC3F3CF33F3FC33FFF0FCCFF33FF3FFFFFCFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFC3FFFFFFFFFFFFFFF003FFFFFFFFFF3FCCFFFFFFFCFFCFF0FCC
F3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFCC33FF3FF0FCC3F0C3F0FC03F0CF333C0C300F333CCCF00CC0330303FC33F
C3FFFFFFF3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF3FFCF3CC3F33FFF0FCFCF
FFC0F3C333CF0F3C30C33F0CFF33FC0FFCC3033FC3CF0FFC3FF0FFF3FFCFFF3F
FFFFF0FFFF3FFFFFCFFFFFFF3FFF3FFF0FFFCFFFCFFFF33FCFF0FFFFC3F3CF33
F3FC33FFF33C33F33FCCFFCFF33FF3FF3FFFFFFFFFFFFFFFFFFFFFFFFFFFFC3F
FFFFFFFFFFFFFF0033FFFFF3FFF3F333F3F3FF0F333CF3C0F3FFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF3CC0F3F3FF0FCC
330C3F0CC03F30FC33C0C330FC33C33F00CC333330C0C30FC3FFF3FFF3FFFFFF
FFFFFFFFFFFFFFFFFFFCFFFFFFF3CF3FFCC3F0FFFF0FF3C30FC0F30F0FCF0F3C
30C33F0CFF33FC0FF0C00F3FC3CF0F3C3FF0FFF3FFCFFF3FFFFFF0FFFF3FFFFF
CFFFFFFF3FFF3FFF0FFFFFFFFFFFF33FFFF0FFFFC3FFFF33F3FC33FFF33C30F3
3FC0FF0FF33FC3FF03FFFFFFFFFFFFFFFFFFFFFFFFFFC33CFFFFFFFFFFFFFF00
33FF0FF0FFCC0FFCF303FCF33333F3330CFFFFFCFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC3C0CF3F3FF0FCC330C0FCCC03F30FC
33CCC330FCC333FF00CCF33330C0C303CCFFF3FFCCFFFFFFFCFFFFFFFFFFFFFF
FFF0FFFFFFCC333FFF33F0FFFFFFF330CF30F30F0FCF0F3C33CF3F0CFF03FC0F
F0C00F3FC3CF0F3F3FF0FFF3FFCFFFFFFFFFF0FFFFFFFFFFCFFFFFFF3FFF3FFF
0FFFFF3FFFFFF33FFFF0FFFFC3FFFFC3F3FCC3FFF33C3330CFC0FF0FF33F33FF
33FCFFFC3FFFFFFFCFFFFC3FFF3FC3CC3FFFFFFFFFFFFF000C0CF0CC0FCC0FFF
0C0C0CF0CFC3FC3FCC3FFC3C3CF0FCC30FFFF3FFFFFFFFFFFFFFFFFFFFFFFFFF
FFCFFFFFFFFFFFFFF0CC0CF3C3CFCFCC33300FCCCF3F30FF30CF3330FC0F3FFF
30C0F33F30CCC333CC0FC0FFC0FFCF0FFC3FFC3FFFFFFFFFFFF30FFFFC0C303F
FF3FFFFFFFFFFC33CF30330C0FFF0F3C33CF3F00FF03FC0FF0C00F3F03CFCF3F
3FF0FFF3FFCFFFFFFFFFF0FFFFFFFF3FCFFFFFFF3FFF3FFFCFFFFF3FFFFFFF3F
FFF0FFFFC3FFF3C3F3FFC3FFFF3C330CCFC03C33F00F3CFF33F33FF03F0FFFCF
0FF0FCCFF0CC3FC333FFFFCFFFFFFF000FCCFF0FF03CFFFFCCFFF3FCFFFFFC3F
CCC003C3C30F033CCF3CF0000000FFFFFFFFFFFFFFFFFFFFFF0FFC3CF3FCFF0F
F00C30F3C3CFCFFF33F00FFCCF3FCFFF30CF33F0FC0F3FF33CC0F30F3000C0C3
CCCFC03FC0C3C00FF00FFC0FFF0FFFFFFFF333CFFCCCFFFFFFFFFFFFFFFFFF3F
F330330C0FFF0F3C33CF3F00FFCFFC0FF0C0CF3F03CFCF3F3FF0FFF3FFFFFFFF
FFFFF0FFFFFFFF3FCFFFFFFF3FFF3FFFCFFFFF3FFFFFFF3CFFF0FFFFF3FFF3C3
F3FFC3FFFFCC3F0CCFC03C03F00F00FCCCF03FF00F03FF00F3F033F3CFF33FC3
CC33FF33CCFCC3003CF3FF0FFFFFFFFFFCFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
F0C30FFFFFFF0000030C003C00F0C000300003C30C0300F0C30C30F3C3CFCFFF
33C00FFCC33FCFCF0C3F30CCCF0F3FF33CC3FF0F0C00C0CC3333C30FC003C0C3
F0C0F0C30CC00F3030CFF00003FFFFFFFFFFFFFFFFFFFFFFF00CC33C0CFF0F3C
F3CFFF00FFCFFC0FF0C0CF3F03CFCF3F3FFCFFF3FFFFFFFFFFFFF0FFFFFFFF3F
CFFFFFFF3FFF3FFFCFFFFF3FFFFFFFFCFFF0FFFFF3FFF3C3FFFFC3FFFCCC3CCF
CF0C3C03CC0C30FC30030F0C30C3FF03F0CCC3FC0FF3FFCFFCCC003C33030C00
3CFFFFCFFFFCFFFFFFFFFFFFFFFFFFFFFFFFFF3FFCFFCFFFFFFF3FFFFF003C00
00000000000000FC003030033FFC0303330C33F3C3CFCFFF33C00FFCC333CFCF
0C33F0CCCC3C3FF0FCC3FF0F0C30C0C030C33300303033F033C030C303000003
000FF030333FFFFFFFFFFFFFFFFFFFFFFC0CC33CCCFF0F30F3CFFF00FFCFFC0F
F0C0CF3F03CFCF3F3FFCFFFFFFFFFFFFFFFFF0FFFFFFFF3FCFFFFFFF3FFFFFFF
CFFFFF3FFFFFFFFCFFF0FCFFF3FFF0C3FFFFC3FFFCCC3C0F330F00F3CC303C3C
33F300C3CC30C03C33033CFFFFCFFFFFF3F0FFCFCC3F3000030FFFCFC3FC3FFF
F3F3FFFFFF3FFFFFFFF0CCCFC33FC3FC0000000C00FFC3FFFFFFFFCFFFFFFFFF
FFFFCFCCC003FCFC0FC033F30FCFCCFF30C30FFC03F3CFCF0C33F0CCCC3C3CF0
FCC3FF0FCC03303033F30FF00FF00FFC03FF03F030F0FFCFFF0F0FFFCC3FF0FF
FFFFFFFFFFFFFFFFCF0C333CCCFF0F33F3CFFF00FFCFFC3FF3C0C33F03CFCF33
3FFCFFCFFFFFFFFFFFFFFCFFFFFFFF3FCFFFFFFFFFFFFFFFFFFFFF3FFFFFFFFC
FFFCFCFFF3FFF0F3FFFF03FFF3030C30C00F0CF003C33CCC3CCF3FF3F0FC00FF
3C3300FFFF303FFC0C0F0C3333C0FF000333F0333C333F3C0CCC03FFC33FFCCF
0F0F33F03F033C33FFFFFFF3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFC333F30FCFFCF330C3333C03F0CFCF0C33F00FCC3CCCF0FCC33F0FCC0C0F33
0FF00FFC0FFC0FFF03FF0FFCFFF3FFFFFFF33FFFFFCFF33FFF3FFFFFFFFFF3FF
330C333CCCFF0FF3F3CFFF00FFCFFF3FF3C0C33F03CFCF333FF0FFCFFFFFFFFF
FFFF3CFCFFFFFF3FCFFFFFFFFCF3FFFFFFF3FF3FFFFFFFFCFFFCFCFFF3FFF033
FFFF33FFF3C30CC0F30F33F0C3CCFCF0FF0FC003F3FF3FFFC3C3FF0CCF3F3FFC
FFFFF3FCFFFFFF0033FCF330FF33CC33CF3FFC30CCCFF0CF0CFFFFFFFFFCFCCF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC333F30FCFFC33
F0CF333C03F00FCC0C33F00FCC3CC0F0CFC33F0FCC0C0F330FF3CFFC0FFC3FFF
CFFFFFFFFFFFFFFFFFF0FFFFFFCFF33FFF0FFFFFFFFFF0FC33CF333C0CFF0FF3
F3CFFF00FFCFFF3FF3C0C33F03CFCF303FF0FFCFFFFFFFFFF3FF0CFC3FFFFF3F
CFFFFCFFFCF3FFFFFFF3FF3FFFCFF3FCFF3CFCFFF3FFF033FFFC33FFF3C30CCF
F30FCFFCF3C0FF3CFFFFCFFFFFFFFFFFC3CFFFF330FFCFFCFFFFFFFFFFFFFF00
3FFF0FF3FFCFCC33FFFFFC333FF3F330CCFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC333C30FCF3C33F00F303C03F00FC0
0CC3F00FC03CC0F30FC33F30C33C0FF3CFFCCFFF0FFFFFFFFFFFFFFFFFFFFFFF
FFF3FFFFFFF0CFCFFCC3FCFFFFCFF333F3CF3F330CFF0FF3F3C0FF03FFCFFF3F
33C0C33F00CFCF303FF0FFCFFFFFFFFFF3FF0CFC3FFFFF3FCFFFFCFFFCF3FFFF
FFF3FF3FFFCFF3FCFF3CFCFFFFFFF333FFFCC3FCF3C303CFF3CFCFFCF3CCFF33
FFFFFFFFFFFFFFFFFFFFFFFFF3FFC3F3FFFFFFFFFFFFFF003FFFFFFFFFCFF3CF
FFFFFFCF3FFC0FF0F3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFCF33CC0F0C3C33F00F303C0CF00FC00CCCF3CFC33CC0F3
03C33F3003FC0FFCCFFC3FFF3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF30FCF
CCF3FCFFFF0FF333FCCF3F333CF3CFF3F3C0FF03FCCFFF3F33C0C33F00CFCF30
3FF0FFCFFFFFFCFFC3FF0CFC3FFFFF3FCFFFFCF3FCF3FCFFFFF3FF3FFFCFF3FC
FF3CFCFFFFFFF333FFF0CFFCF3C0C3FFFC3FFFFF0FFFFFCFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFF3F3FFFFFFFFFFFFFF003FFFFFFFFFFFF3CFFFFFFFFFFFFFFFFF
F3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFCCFCCC0F303C03F00F3F3CFCF333C03CCCF3F3C33CCCF333C30F3333FCCFFC
CFFC3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCFF3C0FCFCFFFF33CFCF
FCCFCF033CF0CFF3F3C0FF03FCCFFF3F33C0C33F00CFCF303FF0FFCFFFFFFCFF
C3FF0CFCCFFFFF3FCFF3FCF3FCF3FCFFFFF0FF3FFFCFF3FCFF0CFCF3FFFFF3CF
FFF3CFFCCFF0C3FFFCFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCCF
FFFFFFFFFFFFFF003FFFFFFFFFFFFFCFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCCFCCC0F303CC3
F30F3F33FCF333C33CCCF3F3333CCCF333CCCCF333FCCFFCCFFF3FFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF33FFC333FF3300FCFFCCFCF033C30CCF3
F3C0FF03FCCFF33F33C0C33F00CCCF303FF0FFCFFFFFFCFFC3FF30FCCFFFFF3F
CFF3FCF0FCF0FCFFFFF0FF3FFFCFF3FCFF0CFCF3FFFFF3CFFCF3CFFCCFF0C3FF
FCFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCCFFFFFFFFFFFFFFF00
3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0FCCC0F303CCCF3CF3F33FCF3F3C3
3CFCCFF33FCCCCF3F3CCCCFF33FCCFFCCFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFF33FFF333CF0FF0FFFFF3FCF033C30CCF3F3C0FF03FCCFF33F
30C0C33F00CC3F303FC0FFCFFF3FF0FFC3FF30FCCFFCFF3FCFF3FCF0FCF0FCFF
FFF0FF3FFFCFF0FCFF0CFCF03FFFCFCFFCCFCFFCCFF0F3FFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFF3FFFFFFFFFFFFFFF003FFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFF0FCCC0F303CFCCFCF3F33FCCFF33F3CFCCFF33FCCFCF3
F3CCCCFF33FCCFFC3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC
FFFFC33CF0FFCFFFFF3FCF033C330CF0F3C0FF03FCCFF33F30C0C33CC0CC3F30
3FC0FFCFFF3FF0FFC3FF30FCCFFCFF3FCFF0FCF0FCF0FCFFFFF0FF3FCFCFF0FC
FF0CFCF33FFFCFCFFCCFCFFC0FF0FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFF003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFF0FCCCCF333CFCCFCF3F33FCCFF33F3CFCCFF33FCCFCF3F33CCCFF33FF0FFC
3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCFFFFCF3C33FFFFFF
FF3FCF033C333CF0F3C0FF03FCCFF33F30C0C33CC0CC3F30FFC0FF0FFC3FF0FF
C3FF30FCCFFCFF3FCFF0FCCCFCF0FCFFFFCCFF3FCFCFF0FCFF0CFCCFCFFF0FCF
FC0FCFFC0FF0FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFF003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0FCCCCF333CFC
CFCF3F33FCCFF33F3CFCCFF33FCCFCF3F33FCCFF33FF0FFF3FFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC30FFFFFFFFFFFCF03CC333CCC
F3C0FF03FCCFF33F0CC0C33CC0CC3F30FFC3FF0FFC3FF0FFCCFF30FCCFFC3F3F
CFF0FCCCFCF0FCFFFFCF3F3CCFCFF0FCFF30FC0FCFFF0FCFFC0FF3FC3FF0FFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0FCCCCF333CFCCFCF3F33FCCFF33F
3CFCCFF33FCCFCF3F33FCCFF33FF0FFF3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFF30FFFFFFFFFFFCF03CC333CCCF3C0FF03FC0FF03F
0CC0333CC0CC3F30FFC3FF0FFC3FF0FFCCFF33FCCFFC3F3FCFCCFCCCFCCCFCF3
FFCF3F300FCFF0FCFCF0FC0FCFFF0FF3FC3FF3F33FF0FFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF003FFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFF0FCCCCF333CFCCFCCFF33FCCFF33F3CFCCFF33FCCFCF3
F33FCCFF33FF3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFCFFFFFFFFFFFCF03CC333CCCF330FF03FC0FF0CF0C30333CC0CC3F30
FFC3FF0FFC3FF33FCCFF33FCCFFC3F3FFFCCFCCCFCCCFCF3FFCF3F330FCFF0FC
FCF0FC0FCFFF0FF3F33FF3F33FFCFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFF003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFCFCCCCF333CFCCFCCFF33FCCFF33F3CFCCFF33FCCFCF3F33FCCFF33FF3FFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCFFFFFFF
FFFFCCCFCC0F3CCCF330FF03FC0FF0CF0C303330C0C03F30FFC3FF0FFC3FF33F
CCFF33FCCFFC3F30FFCCFCCCFCCF3CF03FCF3F330FCFF0FCFCF0FC0FF3FF0FF3
F3FFF3F3FFFCFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFF003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCCFCF3F3CFC
CFCCFF33FCCFF33F33FCCFF33FCCFCF3F33FCCFF33FF3FFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCCCFCC0F3CCC
F33CFF03FC0FF0CF0C303330C0C03F30FFC3FF0FFC3FF33FCCFF33FCCFFC3F33
3FCCFCCCFCCF3CF33FCF3F33F3CFF0FCF0F3FC0FF3FF0FF3F3FFF3F3FFFCFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCCFF33F3CFCCFCCFF33FCCFF33F
C3FCCFF33FCCFCF3F33FCCFF33FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCCCFCC0F3CCC333CFF03FC0FF0CF
0C303330C0C03F00FF33FF0FFC3FF33FCCFF33FCCFFC3F333FCCFCCCFCCF3CF3
3FCF3F33F3CCF0FCC0F3FC3FF3FCCFF3F3FFF3F3FFFCFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF003FFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFCCFF33F33FCCFCCFF33FCCFF33FC3FCCFF33FCCFF0F
F33FCCFFC3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFCCCFCC0F3CCC333CFF03FC0FF0CF0C303330C0C03F00
FC33FF0FCC3FF33FCCFF33FCCFFC3F333FCCFCCF3CCF3CCF3FCFCF33F3CCCF3C
C0F3FC3FF3CCCFF3F3FFF3F3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFF003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFCCFF33F33FCCFCCFF33FCCFF33FC3FCCFF33FCCFF0FF33FCCFFC3FFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFCCFFCCCF3CCF333CFCC3FC0FF0CF0C303330C0C03F00FC33FF33CC3FF33F
CCFF33FCCFFC3F333FCCFCCF3CCF3CCF3FCFCF33F3CC0F3CCCF3FC3FF3CCCFF3
F3FFF3F3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFF003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCCFF33F33FC
CFCCFF33FCCFF33FC3FCCFF33FCCFF0FF33FCCFFC3FFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCCFFCCCF3CCF
333CFCC3FC0FF0CF0C333330CCC03F0CFCF3FF33CCCFF33FCCFF33FCCFFC3F33
3FCCFCCF3CCF3CCF3FCFCF33F3CC0F3CCCF3FC3FF3CCFFF3CFFFF3F3FFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCCFF33F33FCCFF0FF33FCCFF33F
C3FCCFF33FCCFF0FF33FCCFFC3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0FFCCCF3C0F333CFCC3FC0FF0CF
0C333330CCC03F0CFCF3FF33CCCFF33FCCFF33FCCFFC3F333FCCFCCF3CCF3CCF
3FCFCF33F3CC0F3CCCF3FC3FF330FFF3CFFFF3F3FFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF003FFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFCCFF33F33FCCFF0FFC3FCCFF33FC3FCCFF33FC3FF0F
F33FCCFFC3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFF0FFC3CF3C0F303CF0C3FC0FF0CF0C333330CCC03F0C
FCF3FF33CCCFF33FCCFF33FCCFFC3F333FCCFCCF3CCF3CCF3FCFCF03F3CC0F3C
0FF3F3FFF330FFF3CFFFF3F3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFF003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFCCFF33F33FCCFF0FFC3FCCFF33FC3FCCFF33FC3FF0FF33FCCFFCFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFF0FFC3CFCC0F0C3CF0C3FC0FF0CF0C333333CCC03F0CFCF3FF33CCCFF33F
CCFCF3F3CFFC3F333FCF3CCF3CCF3CCF3FCFCF03F3CC0F3C0FF3F3FFF333FFFC
CFFFF3F3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFF003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCCFF33F33FC
CFF0FFC3FCCFF33FC3FCCFF33FC3FF0FFC3FF0FFCFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0FFC3FFCC0F
0C3CF0C3FC0FF0CF0C333333CCC33F0CFCF3FCF3CCCFF33FCCFCF3F3CFFC3F33
3FCF3CCF3CCF3CCF3FCFCF03F3CC0F3C0FFCF3FFF33FFFFCCFFFF3F3FFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCCFF33F33FCCFF0FFC3FCCFF33F
C3FF0FFC3FC3FF0FFC3FF0FFCFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0FFC3FFCC0F0C3CF0F3FC0FF0CF
0C333333CCC33F0CFCF3FCF3CCCFF33C3CFCF3F3F3FC3F333FCF3CCF3CCF3C0F
3FCFCF03F3CC0F3C0FFCF3FFFC3FFFFC3FFFFCCFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF003FFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFCCFF33F33FCCFF0FFC3FF0FF33FC3FF0FFCFFC3FF0F
FC3FF0FFCFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFF0FFC3FFCC0F0C3CF0F3FC33F0CCCC333303CCC33F0C
FCF3FCF3CCCFF33C3CFCF3F3F3FC3F033FCF3CCF3CCF3C0F3FCFCF03F3CCCF3C
0FFCF3FFFC3FFFFC3FFFFCCFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFF003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFCCFF33F33FF0FF0FFC3FF0FFC3FC3FF0FFCFFC3FF0FFC3FF0FFCFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFF0FFC3FFCC0F0C3CF0F3F333F0CCFC333303CCC33F0CFCF3FCF3C3CFCF3C
3CF0F3F3F3F33F033FCF3CCF3CCF3C0F3FCFCF03F3CCCF3C0FFCF3FFFC3FFFFC
3FFFFCCFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFF003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCCFF33F33FF
0FF0FFC3FF0FFCFFC3FF0FFCFFC3FF0FFC3FF0FFCFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0FFC3FFCC3F
0C3CF0F3F333F0CCFC333303CCC33F0CFCF3FCF3C3CFCF3C3CF0F3F3F3F3CF03
3FCF3CCF3CCF3C0F3FCFCF03F3CCCF3C0FFCF3FFFC3FFFFC3FFFFCCFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCCFF33F33FF0FF0FFC3FF3FFCFF
C3FF0FFCFFF3FF0FFC3FF3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0FFF3FFC33F0C3CF0FCF3F3F0CC
FC333303CC333F0CFCF3FCF3C3CFCF3C3CF0F3F3F3F3CF033FCF3CCF3CCF3C0F
3FCFCF03F3C0CF330FFCF3FFFCFFFFFCFFFFFCCFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF003FFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFCCFF33FC3FF0FF0FFCFFF3FFCFFC3FF0FFCFFF3FF0F
FC3FF3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFF0FFF3FFC33F0C3CF0FCF3F3F0CCFC333303CC333F0C
FCF3FCF3C3CFCF3C3CF0F3F3F3F3CF033FCF3CCF3CCF3C0F3FCFCF0FF3C0CF33
0FFCF3FFFCFFFFFCFFFFFCCFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFF003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFF0FF33FC3FF3FF0FFCFFF3FFCFFC3FF3FFCFFF3FF0FFC3FF3FFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFF0FFF3FFC33F0C3CF0FCF3F3F0CCFC333303CC33CF0CFCF3F3F3C3CFCF3C
3CF0F3F3F3F3CF033FCF3CCF3C0F3C0F3FCFCF0FF3C0FF333FFCF3FFFCFFFFFF
FFFFFC3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFF003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF3FF33FC3FF
3FF0FFCFFF3FFCFFC3FF3FFCFFF3FF0FFC3FF3FFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCFFF3FFC33F
0C3CF0FCF3F3F0CCFC3330C3CC33CCCCFCF3F3F3C3CF0F3C3CF0F3F3F3F3CF03
3FCF3C0F3C0F3C0F3F3FCF0FF3C0FF333FFCF3FFFCFFFFFFFFFFFC3FFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF3FF33FC3FF3FF0FFCFFF3FFCFF
F3FF3FFCFFF3FF0FFC3FF3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF3FFC33F0C3CF0FCF3F3F3CC
FC33F0C3CC33CCCF3CFCF3F3C3CF0F3C3CF0F3F3F3F3CF033FCF3C0F3C0F3C3F
3F3FCF0FF3C0FF333FFCF3FFFCFFFFFFFFFFFF3FFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF003FFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFF3FF0FFC3FF3FF0FFCFFF3FFCFFF3FF3FFCFFF3FF0F
FC3FF3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFF3FFC33FCC3CF0FCF3F333CCFC33F0C3CC33CCCF
3CFCF3F3C3CF0F3C3CF0F3F3F3F3CF0F3FCF3C0F3C0F3C3F3F3FCF0FF330FF33
3FFCF3FFFCFFFFFFFFFFFF3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFF003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFF3FF0FFC3FF3FF0FFCFFF3FFCFFFFFF3FFCFFF3FFCFFC3FF3FFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFF3FFC3FFCC3CF0FCF3F333CCFC33F0C3CC33CCCF3CFCF3F3C3CF0F3C
3CF0F3F3F3F3CF0F3FCF3C0F3C0F333F3F3FCCCFF333FF333FFCF3FFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFF003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF3FF0FFC3FF
3FF0FFCFFF3FFCFFFFFF3FFCFFF3FFCFFCFFF3FFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF3FFC3FF
CC3CF0FCF3F30FCCFF33F0C3CC33CCCF3CFCF3F3C3CF0F3C3CF0F3F3F3F3CF0F
3FCF3C0F330F333F3C3FCCCFF333FF333FFCF3FFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF3FF0FFC3FF3FF3FFCFFF3FFCFF
FFFF3FFFFFF3FFFFFCFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF3FFC3FFCC3F30FCF3F30FCC
FF33F0CFCC33CCCF3CFCF3F3C3CF0F333CF0F3F3F3F3CF0F3F3F3C3F330F333F
3C3FCCCFF333FF333FFCF3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF003FFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFF3FF0FFC3FF3FF3FFCFFF3FFCFFFFFF3FFFFFF3FFFF
FCFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFF3FFC3FFCC3F30FCF3F30FCCFF33F0CFCC33CCCF
3CFCF3F3C3CF0F333CF0F3F3F3F3CF0F3F3F3C3F330F333F3C3FCCCFFC33FFC3
3FFF33FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFF003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFF3FF0FFC3FF3FF3FFCFFF3FFFFFFFFF3FFFFFFFFFFFFCFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFF3FFC3FFCC3F0CFCF3F30FCCFF33F0CFCC33CCFF3CFCF3F333CF0F33
3CF0F3F3F3F3CF0F3F3F3C3F330F333F3C3FCCCFFC33FFC33FFF33FFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFF003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF3FF0FFC3FF
3FF3FFCFFF3FFFFFFFFF3FFFFFFFFFFFFCFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF3FFC3FF
CC3F0CFCF3F30FCCFF33F0CFCC33CCFF3CFCF3F333CCCF333CF0F3F3F3F3CCCF
3F3F3C3F330F333F3C3FCCCFFC33FFC33FFF33FFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF3FF0FFC3FFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF3FFC3FFCCFF0CFCF3F30FCC
FF33F0CFCC3FCCFF3CFCF3F33FCCCF333CCCFCF3F3F3CCCF3F3F3C3F333F333F
3C3FCCCFFC33FFC33FFF33FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF003FFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFF3FF0FFC3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFF3FFF3FFCCFF0CFCF3F30FCCFF33FCCFCC3FCCFF
33FCF3F33FCCCF333CCCFCF3F3F3CCCF3F3F3C3F333F333F3C3FCCCFFC33FFC3
3FFF33FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFF003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFF3FF0FFC3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFF3FFCCFF0CFCF3F30FC0FF3FFCCFCC3FCCFF33FCF3F33FCCFF33
FF0FFCF3F3F3CCCF3F3F3C3F333FC33F3C3FF0CFFC33FFC33FFF33FFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFF003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF3FF0FFCFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF3FF
CCFF0CFCF3F30FF0FF3FFCCFCC3FCCFF33FCCFF33FCCFF33FF0FFCF3F3F3CCCF
3F3F3C3F333FC33F3C3FF0CFFC33FFC33FFF33FFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF3FF0FFCFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF3FFCCFF0CFCF3F30FF0
FF3FFCCFC33FCCFF33FCCFF33FCCFF33FF0FFCF3F3F3CCCF3F3F3C3F333FC3FF
3C3FF0CFFC33FFC3FFFF33FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF003FFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFF3FFCFFCFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFF3FFCCFF0CFCC3F30FF0FF3FFCCFC33FCCFF
33FCCFF33FCCFF33FF0FFCF3F3CFCCCF3F3F3C3F333FC3FF3C3FF0CFFC33FFC3
FFFFCFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFF003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFF3FFCFFCFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFF3FFCCFF0CFCC3F30FF3FF3FFCCFF33FCCFF33FCCFF33FCCFFC3
FF0FFCF3F3CFCCCF3F3F3C3F333FC3FF3CFFF0FFFC33FFC3FFFFCFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFF003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF3FFCFFCFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF3FF
CCFF0CFCC3F30FF3FF3FFCCFF33FCCFF33FCCFF33FCCFFC3FF0FFCF3F3CFCCCF
3F3F333F333FC3FFCCFFF0FFFC33FFC3FFFFCFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF3FFCFFCFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF3FFCFFF0CFCCFF0CFF3
FF3FFCCFF33FCCFF33FCCFF33FCCFFC3FF0FFCF3F3CFCCCF3F3F333F333FC3FF
CCFFF0FFFC33FFC3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF003FFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFF3FFCFFCFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFF3FFCFFF0CFCCFF0CFF3FF3FFCCFF33FCCFF
33FCCFF33FCCFFC3FF0FFCF3F3CFCCCF3F3F333F333FC3FFCCFFF0FFFC33FFC3
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFF003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFCFFCFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFF0CFCCFF0CFF3FFFFFCCFF33FCCFF33FCCFF33FCCFFC3
FF0FFCF3F3CFCCCF3F3F333FC33FC3FFCCFFF0FFFC33FFC3FFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFF003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCFFCFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFF0CFCCFF0CFF3FFFFFCCFF33FCCFF33FCCFF33FCCFFC3FF0FFCF3FCCFCCCF
3F3F333FC33FC3FFCCFFF0FFFC33FFC3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCFFCFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0CFCCFF0CFFF
FFFFFCCFF33FCCFF33FCCFF33FF0FFC3FF0FFCCFFCCFCCFFCF3F333FC33FC3FF
CCFFF0FFFC3FFFC3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF003FFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFCFFCFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0CFCCFF0CFFFFFFFFCCFF33FCCFF
33FCCFF33FF0FFC3FF0FFCCFFCCFCCFFCC3F333FC33FC3FFCCFFF0FFFC3FFFC3
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFF003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFF0FFCCFF0CFFFFFFFFCCFF33FCCFF33FCCFF33FF0FFC3
FF0FFCCFFC3FCCFFCCFF333FC33FC3FFCCFFF0FFFC3FFFC3FFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFF003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFF0FFCCFF0CFFFFFFFFCCFF33FCCFF33FCCFF33FF0FFC3FF0FFCCFFC3FF0FF
CCFF333FC33FC3FFC3FFF0FFFC3FFFF3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0FFC3FF0CFFF
FFFFFCCFF33FCCFF33FCCFF33FF0FFC3FF0FFCCFFC3FF0FFCCFF333FC33FC3FF
C3FFF0FFFC3FFFF3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF003FFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0FFC3FF0CFFFFFFFFCCFF33FCCFF
33FCCFFC3FF0FFC3FF0FFCCFFC3FF0FFCCFF333FC33FC3FFC3FFF0FFFC3FFFF3
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFF003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFF0FFC3FFCCFFFFFFFFCFFF33FCCFF33FCCFFC3FF0FFC3
FF0FFCCFFC3FF0FFCCFF33FFC3FFC3FFC3FFF0FFFF3FFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFF003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFF0FFC3FFCCFFFFFFFFCFFF33FCCFF33FCCFFC3FF0FFCFFF0FFCCFFC3FF0FF
CCFF33FFC3FFC3FFC3FFF0FFFF3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF3FFC3FFCCFFF
FFFFFCFFF33FCCFF33FCCFFC3FF3FFCFFF3FFCCFFC3FF0FFCCFF33FFC3FFC3FF
C3FFF0FFFF3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF003FFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF3FFC3FFCCFFFFFFFFCFFF33FCCFF
33FCCFFC3FF3FFCFFF3FFCCFFC3FF0FFCCFF33FFC3FFC3FFC3FFF0FFFF3FFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFF003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFF3FFF3FFFFFFFFFFFFCFFF33FCCFF33FCCFFC3FF3FFCF
FF3FFCCFFFFFF0FFCCFFC3FFC3FFC3FFC3FFF0FFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFF003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFF3FFF3FFFFFFFFFFFFCFFF33FCCFF33FCCFFC3FF3FFCFFF3FFCCFFFFFF0FF
CCFFC3FFC3FFC3FFC3FFF0FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF3FFF3FFFFFFF
FFFFFCFFF33FCCFF33FCCFFC3FF3FFCFFF3FFC3FFFFFF0FFCCFFC3FFC3FFCFFF
C3FFF0FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF003FFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF3FFF3FFFFFFFFFFFFCFFF33FCCFF
33FCCFFC3FF3FFCFFF3FFC3FFFFFF0FFCCFFC3FFC3FFCFFFC3FFF0FFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFF003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFF3FFF3FFFFFFFFFFFFCFFF33FCCFF33FCCFFC3FF3FFCF
FF3FFC3FFFFFF0FFCCFFC3FFC3FFCFFFC3FFF0FFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFF003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFF3FFF3FFFFFFFFFFFFCFFF33FCCFF33FCCFFC3FF3FFCFFF3FFC3FFFFFF0FF
CCFFC3FFC3FFCFFFC3FFFCFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFCFFF3FFCCFF33FCCFFC3FF3FFCFFFFFFC3FFFFFF0FFCCFFC3FFC3FFFFFF
C3FFFCFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF003FFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCFFF3FFCCFF
33FCCFFCFFF3FFCFFFFFFCFFFFFFF0FFCCFFC3FFC3FFFFFFC3FFFCFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFF003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCFFF3FFCCFF33FCCFFCFFF3FFCF
FFFFFCFFFFFFF0FFCCFFC3FFC3FFFFFFC3FFFCFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFF003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFCFFF3FFCCFF33FCCFFCFFF3FFCFFFFFFCFFFFFFF0FF
CCFFC3FFCFFFFFFFC3FFFCFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFF3FFF0FF33FCCFFCFFF3FFFFFFFFFFFFFFFFF0FFCCFFC3FFCFFFFFFF
C3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF003FFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF3FFF0FF
33FC3FFCFFF3FFFFFFFFFFFFFFFFF0FFC3FFC3FFCFFFFFFFC3FFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFF003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF3FFF0FF33FC3FFCFFF3FFFF
FFFFFFFFFFFFF0FFC3FFC3FFCFFFFFFFC3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFF003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFF3FFF0FFC3FC3FFCFFF3FFFFFFFFFFFFFFFFFCFF
C3FFC3FFCFFFFFFFC3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFF3FFF0FFC3FC3FFCFFFFFFFFFFFFFFFFFFFFFCFFC3FFC3FFFFFFFFFF
C3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF003FFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF3FFF0FF
C3FF3FFCFFFFFFFFFFFFFFFFFFFFFCFFC3FFC3FFFFFFFFFFCFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFF003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF3FFF0FFCFFF3FFCFFFFFFFF
FFFFFFFFFFFFFCFFC3FFC3FFFFFFFFFFCFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFF003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFF3FFF3FFCFFF3FFCFFFFFFFFFFFFFFFFFFFFFCFF
C3FFC3FFFFFFFFFFCFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFF3FFF3FFCFFF3FFFFFFFFFFFFFFFFFFFFFFFFFFFC3FFC3FFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF003FFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF3FFF3FF
CFFF3FFFFFFFFFFFFFFFFFFFFFFFFFFFC3FFC3FFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFF003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF3FFF3FFCFFF3FFFFFFFFFFF
FFFFFFFFFFFFFFFFC3FFC3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFF003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFF3FFF3FFCFFF3FFFFFFFFFFFFFFFFFFFFFFFFFFF
C3FFC3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFF3FFCFFF3FFFFFFFFFFFFFFFFFFFFFFFFFFFC3FFC3FFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF003FFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF3FF
CFFF3FFFFFFFFFFFFFFFFFFFFFFFFFFFC3FFC3FFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFF003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF3FFCFFF3FFFFFFFFFFF
FFFFFFFFFFFFFFFFC3FFC3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFF003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFF3FFCFFF3FFFFFFFFFFFFFFFFFFFFFFFFFFF
C3FFC3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFF3FFCFFF3FFFFFFFFFFFFFFFFFFFFFFFFFFFC3FFC3FFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF003FFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF3FF
CFFF3FFFFFFFFFFFFFFFFFFFFFFFFFFFC3FFC3FFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFF003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF3FFCFFF3FFFFFFFFFFF
FFFFFFFFFFFFFFFFF3FFC3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFF003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFF3FFCFFF3FFFFFFFFFFFFFFFFFFFFFFFFFFF
F3FFC3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF003FFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFF003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFF003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF003FFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFF003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFF003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF003FFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFF003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFF003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF003FFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFF003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFF003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF003FFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFF003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFF003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF003FFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFF003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFF003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF003FFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFF003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFF003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF003FFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFF003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFF003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF003FFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFF003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFF003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF003FFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFF003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFF00000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
grestore end

%%EndDocument
 GE 505 1000 0 11700 52615 GB 
%%BeginDocument: /usr0/rozzi/Documentation/PhDThesis/Chapter3/sj.eps
%!PS-Adobe-2.0 EPSF-1.2
%%Creator:Icon
%%Title:sj.eps
%%CreationDate:Fri Jan  2 06:41:35 1970
%%Origin:0 720
%%BoundingBox: 0.000 0.000 855.000 210.000
%%EndComments
%ImageData: 855 210 2 1 0 214 0 "beginimage"
20 dict begin
/rows 210 def
/cols 855 def
/str1 214 string def
/readit {currentfile exch readhexstring pop} def
/beginimage
{{str1 readit} image}
def
gsave
cols rows scale
cols rows 2
[cols 0 0 rows neg 0 rows]
beginimage
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000400156AAAA000000000
0000000556A9550040156AEFFEEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
EAAA95400000000040555559AAAAEAFFFFFEEEEAAAAAAAAAAA995555AAAAEBFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEEEAAAAFFEEEA999559
9AAAEEAAAAAAAAAAAAAAEEAA55559AAEEEA95500000000004000000000000000
0000000000000000000000000000000000000000000000155AAAAAAAAAAAAEFF
FFFAAAAAAAAAEEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEE
EEEAEAAAEAEEFFFEFFFFFFF00100000000000000000000000001001014555565
65696AAABBBABBBFBFFFFFFFFFFFBFFFBFBEBBBABBBABBBF9400000000000001
010001141111000111155ABAB9A969696565656AABBABBBABBBEBFBFBFFFBFFF
BFBFBFFFBFFFBFFFBFFFBFBABBBAA9656554110001141165A9BAA9A565656565
55656995500000000000146ABBBABBBAAABABBBAA56565640000000000001000
0000000000000000000000001425696AABBABBBAAABAABBABABAA9A9AABABBBF
BFBFBFBFBFBFBFBEBFBFBFBFBFBFBFBFBFFFBFBEBFBAAAA96565ABBABBBABBBF
BFF000000000000000000000000000000155555555595A9AAAAAAEEFEFFFFFFF
FFFFFFFFFFFFFFFFFFEEAEAEEFFFD54000000000000000000445554400000415
5AAFEEAAAAAA59555A9AAAEFEFEFEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFEEAEAAAA5955444000055559AAAEAAAA9A9A9959559AAA95500000000000
556AAFEFEEAEAAAAEFEE9A995998000000000005500000000000000000000000
000015599AAAABEFEFAEAAAAAEAEAEAEAAAAAAAFEFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFEFEAAAAAAAAAAEEFEFFFFFFFF01100000000011255
11000011165BBBBBBBFFBBBBBBBBBBBBBBBBBBBBBBBFFBFFFFFFFFFFFFFFFBBB
BBBB6656400000000000009A9100000000000000000000055657BABBBBBAA656
6656AABBBBBBBBFFFFFFFFFFBBFBBBFBBBFBFBFBFBFFFBFBBBBBBBBBAA565151
155667BBBBBBBB966656665400000000000000000056A6BBBBBBBABAAABBAA85
511556566400000000000000000000002656600000000000101111111256AABB
BBBBBBBBBABAA656AABBBBBFFBFFFBFFFFFFFBFFFFFFFFFFFBFFFFFFFBBBBBBB
BA566655565667BBBBBBBFFFFFF000000000059EED54000099BFFAAAAAEEAAAA
AAAAAAAAAAEFFFFFFEFFFFFFFFFFFFFFFFFFFFFFFEFEEFFFFF99804000000000
0000002AA0000000000000000000000154AAAABFEAAAAAAAEEFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEAAAAAAAAAEEFFFFFFFEAEAA550
0000000000000AA9955444000000000000000000000000000000000055400000
00000000000004599AA95400000000000445555599AAAABEFFFAAAAAA9AAAAFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFEEAAA550000000596EEFEEAFE
FFFFFFF000000011156AB8140011657FBABABABABAA96969696AAABBBABBBABB
BFBFBFBFBFBFBFFFFFBFBABABABBBA655000000000000000002AA00000000000
0000000000001069BABBBAB9AAAABABBBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBF
BFBFBFBFBBBBBFBFBAAAA9656AAABBBFBFBBBAA5601000000000000009656414
1000000000000000000000000000000001011400000000000000000010256AB9
5400000000000015556565697ABABFBAB9696569BABBBBBBBBBFBFBFFFFFBFBF
BFBFBFBFBFBFBFBBBABAB969551100011566BABABABABFBFBFB02A9AAEAEA550
0000000000155AAEAEAEAA995555555A9AAAAAAEEFFFFFFFFFFFFFFFFFFFFFFF
EFEFFFFFEF5944000000000000000000095A9AAAAEAAAA855000000000000415
5A9AABEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFEFAEAA
9AAAAEAEEEAAAAAAAAAFEA900000000000000000015400000000000000000000
0000000000000000000000000000000000000000000003FF040000155FEFEFEE
AEAAAAAAAAAAAAAAAAAAAEAFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FEAE5904000005455AAAAAAEAFFFFFF026667BBBB550000000001015666BBBBA
BA66655566665AA7BBBBBBBBBBFFFFFFFFFFFFFBFBBBBBBBBBBBBB6651000000
000000000000066656ABBBBBA6511000000000001115566ABBBBFBFFFFFBFBBB
BBFBFFFFFFFFFFFFFFFFFFFBFBBBBBBBBBBBBBBBBBAA96666BBBBBBBAAA6A67B
B660000000000000000011100000000000000000000000000000000000000000
00000000000000000000000003BB110000266BBBBBBBBBBAAABABAAAAAA666AA
BBBBBBBFFFFFFBFBFFFFFFFFFFFFFFFFFFFFFBFBFFFFBBBB56110000011256AA
BBBBBBBBBFF02AFFEA955000000000555555555AABFEAA9999A9AAAEFFFEFEFE
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFAA8000000000000000000005555556
AAEEEAEEEAA5980000000000199EEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFEAA9955445455599AAAAA95944000000000000000000005
5554000000000000000000000000400000000000000000000000000000000000
0000000000000004455AAAAAEAFFFFEAAAAEEEAAAA99AAAAAEEFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFEEFFEAA4440000556EEEEAAEAEEFFFFF025696965
641011001155545455696ABAA9A9AABABBBABBBABBBFBFBEBFBFBFBFBFFFBFBF
BFBABBBABBBFBBBA80000000000011000000000565641154697AAAB969641101
0000111566AABBBABBBABFBFBFFFBFFFBFFFBFFFBFFFBFBFBFBEBBBABAB96965
10101025696969696565510000000000005465400000000000000010256969AA
AABAAA9541100000000000000009600000000000000000000000000001000000
105565AABBBAB96554141055697ABFBFBFFFBFFFBFFFBFFFFFFFBFFFFFFFBFFF
BBBAA955000000000416BBBABBBABBBFBFF019AAAA995554040145555555599A
AAAEAAAAAAAEAFEFEFEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFFFAA8000
00000000040000000009995944556AAAAAAAA95944000000054A9AAAAEEFEFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFEAAEA955454555595AAAAAAAAA59
4540000000000055594000000000000000042AAAAAAAAAEEAA95400000000000
0000000AA00000000000000000000000000000000004015699AAAFEFEAA55555
5555AAAFEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEEA955000000000556
AFEFAEAEAFFFFFF026AABBBBBBBBBA55100011166BBBBBBBBBBBBBBBBBBBBBBB
BBBBBBFFFBFFFBFFFBFFFBFFFFFBBBBBBBBBBB56400000000000000000000000
00000000000001111156AABB665651511156669ABBBBBBFFFFFFFFFFFFFFFFFF
FFFFFFFFFBFFFBFBBA9A665666BBBA9AAA9AAA5666BBBB955000000000000000
000000000000113BBBBBBBBBFBBBBA9651566110000000000000000000000000
00166A99540000000011165AAA9A66566656655551115156667BBBBFFFFFFBFF
FBFFFBFFFFFFFFFFFFFFFFFFFBBAA5110000000000026696BABBBBBFFFF019AA
BEEAAAEEED54000044599AEFFFFEEEAAAAAAAAEAAAAAEAFEFFFFFFFFFFFFFFFF
FFFFFFFFFEFEEEEEAA9980000000000000000000000000000000000000455556
AAEAA9955555555599AAEEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEEAA9
A999AAAAAAAAAAAAAAAAAAAAAAD55000000000000000000000000000446AAAEA
AAABFFFEAA9555555554000000000000000000000000002AAAA9540000000000
09AAAAAAAAAA9995555555555555AAAEEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFEFEA85400000000000156AAAAEEFFFFFFF02A6555555555555555555565
6AAABABBBABABABAAAA9696AAABABABFBFBFBFBFFFBFBFBBBABABABABABABA65
400000000000000000000000000000000000000000000065BABAAAA96969AABA
BABFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBBBABABABBBABA65656565656566BA
BAA9A55110000000000000000010100000005540000000000000000000000000
01010000000000000000001110256566AAAA00000010196ABABABABBBAA9656A
ABB96965656AAABFBFBFBFBFBFBFBFBFBFBFBFBFFFFFBFBFBAB9695501000001
15656969AABABFBFBFF0195555599AAAAAABEFAEAA995A9AAAAEAEAEAEAEAEAE
AEAEAEEFFFFFFFFFFFFFFFFFFFEFEFEFEFEFEEEEAE59956AA000000000000415
540555595500000000000000000055595A9AABFFEFEFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFEFEEAAAAA99959595555595AAFFFAA55556AA55000000000
0000000445540000000000000000000000000000000000000000000000000000
0000000000000000000000000000015599AAAEBFFAAA99555599AAAFEFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFEEEAEEEEE9A95555AAAAAAEAEEFFFFFFFF0
1655556666AABBBBBBBB6666566ABBBBBBBBBBBBBBBBBBBBBBBBBBBBFFFFFFFF
FFFBBBBBBBBBBBBBBBBBBB66556AA00000000000112661111265510000000000
000000005166566ABBBBBBBBBBBFFBFBBBBBFBFBFBFBFBBBFFFBFFFBBBBBBBBB
BAAAA66666666666666BBBBB5666557AB6600000000000000001115400000000
0000000000000000000000000000000000000000000000000000000000000011
00000000015256AABBBBBBB656666666BABBBBBBBBFBFFFFFFFFFFFFFFFFFFFF
FFFBFFFBBBBBBBBBBB6665566667BBBBBBBBBFFFFFF01555556AAFFFFFFEAA99
55555AAEFEEEAAAAAAAABEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FEAA954000000000000000155FFAAAAAEAFFEA999000000000000000000556AB
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFAAAA9555555AAAA955455
5555554040000000000000000000000AA8440000000000000000000000000000
0000000000000000000000000000000000000000000000000000455599AAAAAA
AAA999555555AAAAEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFEAAAA55
55599EEEEEAAAAEEFFFFFFF01110256AABBABBBAAA655555556ABBBAAA69A9BA
BBBFBBBABBBFBFFFBFFFFFFFBFBFBFBEBBBABBBABBBABBA95000000000000000
00155BBABAAABBFFBBA56110000000000000000556BABBBFBFBABBBABBBFBFBF
BFBEBFBFBFFFBFBEBBBABBBAB969541454656555511010141410000000000000
0000000000056510000000000000000000000000000000000000000000000000
00000000000000000000000000000000105565656969656565655565657ABBBE
BFFFBFFFBFFFBFBFBFBFBFBFBFBFBFBABBBABABA655554556BBABAAAAABABBBF
BFB01A5545555A9EAFEEAA550444055A9AABEEEFAEAEAEAFEFFFFFFFFFFFFFFF
FFFFFFFFFFFFEFFFEFEFEFEFEFAA80000000000000000000099EAEAEAAEFFFEF
EEE5540000000000000557EFEFEFEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEF
EFEEAEEEAA9A5545455555554555AAAA95400000000000559A80000000000000
0000195AABFFEEAEAA9A8550000000000000000950000000000000155FED4400
000000000AAEAFEFFFFFEFEAAAAEAEAD5955556AAEAFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFEEAA5504000545569AAAAAAEAFFFFFF026565151165667BA
AA56111111155657BBBBBBBBBBBBBBBBFFFFFBFFFBFFFFFFFFFFFFFBBBBBBFFF
BBBBBB9A8000000000000000000000000000000011166BBBBA56660000000000
015266BBBBBBBBFFFFFFFBFFFFFFFFFFFBFBBBBBBBFBFBBBBBBBBBBB66455156
6651111155BBBA911001100000000000000000000011A6BBAAABBBBBBBAA6655
511551100000000000000000000000001556611111550000000000011156669A
BBBBBAB66511111155566BBBBBFFFBFFFFFFFBFBBBFFFBFFFFFFFFFFFBBBBA56
551111111656ABBBFFBBBBBBBBF02A555555555AAAAAAA995540044556AAAAEE
FEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEEAA800000000000
0000000000000000000014555AEAA9995500000000000156AAEEFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFEFEFEEEAAA95555559555544455EAAA955000
000000000000000000000044AAAAAAAEEEEFFFAAAA9554555000000000000000
000000000000156AA55445550000000000055556A9AAAAFFFAA595544044556A
AAEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEA9A9555444455596AAFEFFFF
FFFFFFF03ABAA96565696ABABA696565696AAAAABABABABBBBBBBBBBBFBFBFBF
BFBFBFBFBFFFBFBFBFBFBFBFBFBFBFBA94000000000014554000000000000000
000000000155656514000000001165BABFBFBFBFBFBFBFBFFFFFFFFFFFBFBEBB
BABABABAAAAAAAAA651001000015556555141411100000000000000004555410
0001100000000000000000000000000000000000000000100000006980000000
0000000000000000000110142565656565655565697ABFBBBBBFBFBFBFBFBFBF
BFBFFFFFFFFFBFBBBAB9A969BABBA9A56AABBBBFBABABABBBFB02EAEAEBFFFEA
AAAFFFAAAAAAAAAEEEAFEFFFFFEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFEFAA9945500000000000196AA540000000000000000000000055596A
95554556AAEFFFEFEFEFEFFFFFFFFFFFFFFFFFFFFFFFFFEFFFEFEEAEAAAAAA55
4000055AAAAEFF9A955A9550000000000000055A9A9800000000000000000000
0000000000000000000000000000000000000000000000000000000004099AAA
AAAAAAAAAAAEEEAAAA9AAAAAAFEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEAE
AAAAAAAAAAAAAAAAAAAEEFEFEFFFFFF03BBBBBBBFBBBBBBBFFBBAAAAABBBBBBB
BBBBBBBBBBBBFFFFFFFFFFFFFBFBFFFBFFFFFBBBBBBBBBFBFBFBBBAA96511000
000000002666A110100000000000000000000055666655511266BABBBBBBBBBB
BBBBFBFFFFFFFFFFFFFFFFFBBBBBBBBBBBBBBBBBA6515010156ABBBBBB665566
6660000000000010155656640000000000000000000000000000000000000000
0000000000000000000000000000000000000116566666A6AAAAAABBBBBA6666
667BBBBBBBFBFFFBBBBBBBFFFFFFFFFFFFFFFFFBBBBBBAAAAAA6A6666AABBBBB
BBBBBBBBBFF02AAAAAAAAAAAAAAAAAAAAAAAAAAAEEEEEEEEEEEEFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFAAAAAAA55400000000156AAAEEEFFE
FEEEEA955000000000000014555556AAEEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFEEEEAEEAA998440000445555544400000000000444400000005
5444000000000000000000000000000000000000000000000000000000000000
00000000000000000AAFFEEAEEFFFFFFFEEAAAAAAAAAAAAAEEEFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFEFEEEEEFFEEEAAAAAAAEFFFFFFFFFFFFFF0296969AA
A9AAA9A969A9A9AAAABABBBABBBABBBABBBFBFBFBFBFBFBFBFBFBFBFBFBFBFBE
BBBFBFBFBFBFBBAAA96AA5540000000010296BBABBBABBBAA995500000000000
00101015556ABBBABFBEBBBEBBBABBBFBFBFBFBFBFBFBFBFBFBFBFBEBBBABBBA
AA65510000001165651000000000000011100000000415100000000000000000
000000000000000000000000000000000000000000000000000000000000096A
BBBABBBABFBFBBBAA96565A9AABABBBEBBBFBFBFBFBFBFBFBFFFBFBFBFBFBFFF
BBBABBBABBBAAAAAABBABBBEBFBEBBBEBFB02EAAAAAEAFFFEEAEAAAEEFFFFFFF
EFFFEFEFEEEFEFEFEFEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFFFAE9A84
000000000000156EAEAEAEEFEFEFFFEFEFEAA94400000000195EEEAAAEEFEFEF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEAAEAAAAAAAA8440000446AAAEAA
954000054400005500000000000000000000155556AAAEEFAA99454000000000
00000000000000000000042AA9995555000000000005455559AAAAAEAAAEAAAA
AAAEEFEFEFEFEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFEEAEAEAEAAAEAFEF
FFFFEFEFEFFFFFF026966ABBBBBBBBBBBBBBFBFBBBBBBBBBBBBBBBBFFBBBBBBB
BBBBBBFFFFFFFFFFFBFFBBBBBBBBBBBBBBFBBBBBA651100112AA55000011169B
BA9AAABBBBBBBBBBBA9A66110000000111466656AABBBBBFFFFFFBFFFBFFFBFF
FBFFBBBBBBBBBBBBBBBBBA56551100000001114566BAA6500000000000000000
000000000000113BBBBBBBBBBBBBBB9AA65BB655100000000000000000000000
000000000011000000000001115666BBBBBBBBBBBBBBBB9AAABBBBBBBBBBFBFF
FBFBBBFFFBFFFFFFFBFFFFFFFBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBFF02AAA
AAAAAFFFFEFEFEFFFFFFFEEEEEEEEEFFFFFFFFFFFEFFFEFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFEA9540000056AA550000155AAAAAAAAAAAAEFEEEFAEAA9
995500000005555555A9AAAEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFEFEFEEE
A9A95500000000044555A9AA99800000000000000000000000000000556EFFFF
FEEEAAEEFEEAA9AAA59400000000000000000000000000000000000000000000
00044156AAAAAAEAAAEEEEEEAAAAAAAAAAEEFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFEFEEAEEFEFFEEEEEEFEEEEEEEFEFFFFFFF029696ABABABABABABABABABA
BABBBABBBFBFBFBFBFBBBABBBFBFBFBFBFBFBFBFFFBFBFBFBFBFBFBFBFBFBFBA
A550110110146555400000000000000010155569AABAAAAA6554101010156569
BABBBFBBBABBBBBBBFBFBFBFBFBFBFBBBABABABBBABBBABA65656569656566AA
6510102560000000000000000010100000006955400000000000000000000000
1010100000000AB80000000000000000000000101014596ABBBEBABABABBBABA
BAAAAABABABABABBBBBFBFBFBFBFBFBFBFBFBFBFBFBFBFBABAA96969AAAABABB
BFBFBBBFBFBBBFBFBFB02AAAAAAEAFEFEEEEAEAEEEEFEFEFEFEFFFFFFFFFFFFF
FFEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFDA854000015555554000
00000000000004155A9AAAAEAAAAAA954404055559AAAEBFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFEFEFEFEFEFEFFEAA59556AAAA5595AAA9A444019500000000000
0000040554000000AA954000000000000000000000004545040000000FEC0000
0000000000000000000415555AAFEFFEAEEEEFEFFFEAAAAAAAAAAEAEAFEFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFEAAAAAAAAAAAAEAFEFFFFFFFFFFFFFFFFFF0
3BBBBBBFFBBBBBBBBBBBBBBBBBBBBBBBBBBBFBBBFBBBBBBBFBFFFFFFFFFFFFFF
FFFFFFFBFFFBFBFBBBBBBBBBA695611001116566555151101000000000000000
011266AABBBBAAAAABBBBBBBBBBBBBBBBBBBBBBBFFFFFFFBFBBBBBBBBBBBBBFB
BBBAAA6611111111115666661100000000000000000000000000011000000000
0000000000000000000000000000000000000000000000000000000000000000
00115BBAAA6656AABBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBFBFBFBFBFFFBFFFB
FFFBFBBBB666566666667ABBBBBBBBBBFBFBFBFBFFF02AAAAAAAAEEFFFFFFFFF
FFFEFEEEEEEEEEEEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFAAAABFFAA8000000446AAEEEEEEFFEFEEAEA955000000000405559AAAAAAEF
FFFFEEEAAEEFFFFFFFFFFFFFFFFFFFFFFFFFEEAAAAAAAAA99844000000044AAA
AAAA550000000000000000000000000001540000000000000000000000000000
0000000000000000000003FF00000000099AA9550000000000000155A9AAAAAA
AAAEEEEEEEAAAAAAAEEEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEEAAAA9A9AAEE
FFFFFEEEEFFFFFFFFFFFFFF0256969BABBBABBBBBFBFBBBABBBABBBABBBABBBA
BBBFBFBFBFBFBFFFBFFFBFFFBFFFBFFFBFBFBFBEBBBEBBBAAABEB56400000010
297ABBBABBBEBBBAA9555100000000106565656AABBBBFBABBBABBBEBFFFBFFF
BFFFBFBFBFFFBFBABBBAAAAAA96965100000001019AABABA6500000000000000
0000000000000154000000000000000000000000000000000000000000000000
03BF0000000005656965000000000000105565AABABAAABABBBABBBAAABABBBA
BBBFBFFFFFFFFFFFFFFFBFFFBFFFBBBABAA9656569BABFFABBBABBBABFBFBFBF
BFF02EAEAAAAAAAEAFEFEFFFEFFFFFFFEEEFEFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFEFAE9A95500000000000156EAFFFEFFFFFFFEFEE
AAAA9954000000156AAFEEAAAAAAAAAAAEEFFFFFFFFFFFFFFFFFFFFFFFEFAEAE
AEAAAAAEA955000000000004044455AA9540000000000000AA80000000000000
00000005569AAAEEAA9A95500000000000000004000000000000002FE99A9AAA
55554544044556AAAEEFFFFFEEEAAAAAAAAEEFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFEAEAA9AAAAEBFFFFFEEAEAEAEEFEFFFFFF03BBBBA9AABBBBBBB
BBBBBBBBBBBBBBBBBBFFBBFBBBFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFB
BBBBBBBBA651100000000000267BBBBBBBFBFBFFFBBBBBB6651000000011269B
BBBAAA9AAABBBBBBBFFFFFFFFFFFFFFFFBFFBBBBBBBBBBBBBBBBB94500000000
00011111559AA640000000000000AA80000000000000000000055657BABBAA96
55500000000000000001100000000000003BB6566656654551111116669BBBBB
BBFBBBBBBAABBABBBBBBBBBBBBFFFFFFFFFFFFFFFFFFFFFFFFFFFBFBBBBAAA56
66BBBBFBBBBBBBBBBBBBBBBBBFF03EFFFEFEFEFEEFFFFFFFEEEEEAEEEAEAEAEE
EEFEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEAD54000000000
000000155AEEEEEAEEFFFFFFFEFEEEAAA95554445555559999AAAAAAAEFFFFFF
FFFFFFFFFFFFFFFFFEFEAAAAAAAAA599545455AA954000000000550000000000
000000000000000000000000557FEAAEEFFFFFFFAAAAAAAAEAA8400000000000
000000000055400000000000005555599AAAAAEAEEEEFEFFFEFEFEEEAAEAEEFE
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEEEAAAA95555A9AAAEFFFEFEEEEEEEFE
FFFFFFF03ABFBFBFBFBFBEBABABABBBFBABABABBBABFBABABABBBABBBBBFBFBF
BFBFBFBFBFBFBFBFBFBBBBBBBFBFBAAA94400000116555000000000000000000
101555696AAABAAA69656565656AAABABFBFBBBFBFBFBFBFBFBFBFBFBFBFBABA
AA69656565656BBF651000000000000000000000000000000000000000011000
0054A9A550101010101001000000056554101000000005640000000000000000
0000000000145565656569AABABABABABABABAAABABABABFBFBFFFFFFFFFFFBF
BFBFFFBFBFBFBABAA565656569BABABBBABBBBBFBFBFBFBFBFB02FFFFFFFFFFF
FFEFEFEFFFFFFFEFEFEFFFFFFFEFEFEFEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFEFAA95400001469A5500000000000000000004155A9AAAAAAEAAAA9A
999A9AAAAAEEFFFFFFFFFFFFFFFFFFFFFFFFFFFFEEAEAAAA9A99595AABFF9A44
400000000000000000000000000000000000000404000055AA99954404054545
0000000009995545454000000A9800000000000000000000000000155A9A9A9A
AAAAAAAEAEAEEEAEAAAAAAAEAFEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFEAAA99
5A9AAAAEAFEFEFEFEFFFFFFFFFFFFFF02ABBBBBBBBBBBBBBBBBBBBBBBBBBBBFF
BBBBBBBBBBBBFFFBFBFBFFFFFFFFFBFBFBFBFFFFFBFBBBBBBBBBFFBBA6511000
00006666400000000000000000000000011256BBBBBBBBBBBBBBFFBBBBBBBBBB
BBBBBBBBFBFBFFFFFFFFFFBBBBBBBBBBB6666666110000000001126611000000
0000000000000000000667BA6611000000000000000000000000000000000000
000000000000000000000667BA661100000001166667BBBBBBFBBBBBBBBBBBBB
BBBBBBBBBBFBFFFFFFFFFFFFFFFBFBBBBBBBBBBBBABABBBBBBFBFFFBBBBBBBBB
BBFBFFFFFFF02AAAAEEEEFFFFFFEEEEEEAEEEEFFFFFFFFFFFFFEFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFEFFEED9804000000055AA800000000000
000000000000000199FEFEFEFEEEFFFFFFFFFEEEEEEEFFFFFFFFFFFFFFFFFFFF
FEFEAAAAFFFAEAAAA99955000000000446AA4400000000000000000000000005
56AAAA0000000000000000000000000000000000000000000000000000000000
099BFD9900000000000556AAEEFFFFFFFEFAEEAAAAEEFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFEEEAAAAAAAEAFFFFFFFFFFFFFFFFFFFFFFFFFFF02ABABBBA
BBBABBBABBBABABABBBABBBABBBABBBABBBEBFFEBBBABBBEBFBEBFBFBFFFBFBF
BFBEBBBABBBABBBABAAAA00000000000256AA555541411000000000000000054
696ABABABBBBBFBEBBBABBBABBBEBFBFBFBFBFBFBFBEBBBABBAAA965656567BA
65101100010012AA650000000000000000000000011968540000000000000000
000000000000000000000015400000000165010114256566BBBA69656565656A
BBBEBBBABBBABBBABBBABBBABBBABBBFBFFFFFFFFFFFFFFFBFBFBFBEBBBABBBA
BBBABBBEBFBFBFFFBFBEBBBABFBFBFFFBFF02EEFEFEFEEEFEFFFFFFFEFFFFFFF
FFFFFFFFEFEFEEEEAEAEAEAEEFFFFFFFFFFFFFFFFFFFEFFFEFEFEFFFEFAEAA95
50000000000000195EEFEFEFEEFFEE9A9550000000000419AEAFFEAEAEAEEEEF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFEFEFEEAAA5555555559AAEAEAA99555555AA
AA80000000000055AEC00000000000000004155AAAAAAAAAAAAEAAA540000000
00002AA5500000000000055554440000559AAAAAAFFAAAAAAAAAAAAEAEEFEFFF
EFEEEEEFEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFF03BBBBBBBBBBBBBFBBBBBBBBBBBBBBBBBFBFBBBBBBBBBBBBB
BBBBBBBBBFFFFBFFFBFFFBFBBBBBBBBBBBBBBBBBA69110000000000000166BBB
BBBBBBBBBB9665400000000011167BBBBBBBBBBBBBBBBBFFFBFFFBFFFBFFFFFF
FBFBBBBBBBBBBBB66655511155567BBBB6566555669AA680000000000055BB80
0000000000000011265667BBBAAAAABBBAB11000000000002695500000000000
1105511000115556667BBBBBBA96AAAABBBBBBBBBBBBBBBBBBBBBBBFFFFFFFFF
FFFFFFFFFFFFFFFBBBFBFFFFFBFFBBFFFFFFFFFFFBBBBBBBBBFFFFFFFFF02AAA
AAAAAAAFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEEAAAAAEAEEFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFEAA80000000000000000000055AAAAAAAEEEEFFFFFAA999
55444055559AAAAAAAFEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEEEAAAA9
AAAAAAEEEA95559AAAAA554440000000000000000000000000000040AABFFFFF
FFFFFFFFEEEAAAAEEAE95444000000000000000055EA80000000000000000015
55599AAAAAEEFFFFFEFEEEEEEEFEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFFFFFFF025555465696ABABABAAAAAAA
AABBBBBFBBBFBFBFBABABABABABABFBFBFBFBFBFBFBFBFBFBBBBBFBFBFBFBA65
4000000001011000000000041410105565696AAFBEBABABAAAA56969AABBBABB
BBBBBABBBFBFFFBFBFBFBFBFFFBFBEBBBABBBFBBBABABABABAAAA55554156569
6510001415600000000000000014141155BABAA9A96AA96AAA69140100011566
A9655540000015641000000000000011655514101014156AAABABABBBFBBBABB
BABABABBBBBFBFBFBFBFFFFFFFFFFFFFFFFFBFBFBFBFBFBFBFBFBABBBABBBABB
BABBBBBBBFBFBFBFBFF01A5555595AAEEFEEAEAAAAAAAEAFFFFFFFFFFFFFEFEF
EEEEEEEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEF9A80000000000045000000
0005540444555AAAAAAFFEAEAEAEAAAAAAAAAAAFEFFFFFFFFFEFFFFFFFFFFFFF
FFFFFFFFFFEFEFEFFFFFFEEEAEEEEFAA9A9555595AAA9A044015595000000000
00000545554555AAAAAAAAAAAAAAAAAA55400004095AAAAA554000040A984400
000000000555595555040455595AAAAAAEEFFFFFFFEFEFEFEFEFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFEFFFFFEFEFEFEFFFFFFFFFFFFFFFF0
26655115566666AA5666666656ABBBBBBBBBBBBBBBBBFBBBBBBBBBBBFFFFFFFF
FFFFFFFBFBBBBBBBFBFBBB664000000000000000000000000000000000000001
1266AABBFBFBBBBBBBBBBBBBBBBBBBBBFFFFFFFFFFFFFFFFFFFFFBBBBBBBBBFB
FBBBBAAAAA666665666656A6661110000000000000111126566BBBBBBB661100
00000000000000000000000113BBAAA6511000011111100011266BBBFFBBBBBB
BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBFFFFFFFFFFFFFFFFFFFFFFFFFFB
FBFBFBBBBBBBBBBBBBBBBBBBBFFBFFFBBBBBBBFFFFF02A555555559AAAAAAA99
99A9AAAAAAAAEAEEEEEEFFFFFFFEFEFEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
EE998000000000000000000000000000000000000004559AAAEEFFFFFEEEEEEF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFEFFFFFEEEAAAAAA999555599A
AAAA9955400000000000005555555AAAABFEEA95444000000000000000000000
000156AAAA99844000000044000004555AABFEFEEEEAEAEAEAAAAAEEAAAAAAEE
EEEFFFFEFEEEFEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFF03B6965696BB9696565A9BBBAB969656AAABABFBE
BBBABABABBBABFBFBFFFBFFFBFFFBFFFBFFFBFBFBFBEBB695440000000000001
000000000000000000000000000014AABBBABBBABBBABFBABBBABFBFBFFFBFFF
BFFFFFFFBFBFBFBABBBABABAA96969A9A96555656ABAB9AA6969655010000101
65A969A56ABAB968140000000000000000000000000000000110A9AA95501100
105410543ABAB565656569BABBBABAA9696ABABABBBEBBBABBBABBBABBBFBFFF
BFBFBFBFBFBFBFBFBFBFBFFFBFFFBFBFBFFFBFBEBBBEBFBEBFBFBFBFBFBFBFBF
BFF02AAAAA9A99995555559AAAAEAEAEAFEFEFEEAEAEAAAAAAAAAAAEEFFFFFFF
FFFFFFFFFFFFFFFFFFFFEFEFEFAE9AAAAAA800000000156EAFEEAFFFFFAE9940
00000000000004196AAEAFEEAEEFEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFAEAE
AFEFEAAA999959554004055AABEFAEAEAA95555A9AAA9AAAEFD9554000000000
00155A9AAAAAAAAAEFFFEFEA9544000000157FF9500000004555444000000000
00000005455A9AAAAEEFFFFFFFFFEEEEAEEFEFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF03A9AA69666566556
6656BABBBBBBBBBBBBBBBBBBBBBBBABBBBBBBBBBBBFFFFFFFFFFFFFFFFFBFBBB
BBBBBBBBA656669400000000157BBBBBBBBBBBBBA64000000000000011166A9B
BBBBBBBBBBBBBBBBBBFBBBFFFBFFFFFFFBFFBBBBBBBBBBBBBABA665666555111
155AABBBBBBBA6566546669666BBBB966111100000000011265AA69A669ABBBF
FBB66110000011167BB6600000001155510000000000000010111556669BBBBB
BBBBBBBBBBBBBBBBBBBBBBFFFBFFFFFFFFFFFBFFFBFFFFFFFFFFFFFFFFFFBBFB
BBFBFFFFFFFFFBFFFFFFFBFFFFF02EFFEEEAA995559AA9AAAAFFFEFEEFFFFFFF
FEFEFFFFFEFEEEEEFEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEEAA954000000000
0000156AEFFFFFFFFFFFEEEEEAA44400000000156AAEEAEEEEFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFEEEAAAAAAEEEEEEEAAA55000000000556AAEEAA95955555
555444000000000000004499AABFFFFFFFFFFFFFEEFFFFFEEEEEA95540400045
555444004455400000015595555555555AAEEFFEEEEEEEFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFF03ABFBAA9656565656569BABBBABABABBBFBBBABABBBFBABABABABABB
BFBFBFBFBFBFBFBFBFBBBBBBBFBFBA695400000000000000103ABFBFBFBFBFBB
BABAB960100000000014296ABABABABBBFBFBFBFBFBFBFBFBFBFBFFFBFBFBABA
BABABABABABAB96510000000000416AABA696555555555541000000000000000
1065AABBBBBBBBBBBFBBBABBBBBABAB965551001101415541101105451000100
556554101415556ABBBABABABABBBBBFBFBFBABBBBBFBFBFFFFFFFFFFFBFBFBF
BFBFBFFFFFFFFFFFFFBFBFBFBFBFBFFFFFBFBFBFBFBFBFBFBFB02EEFFFEEAAAA
AAAFEFAAAAAAAAAFEFFFFFFFFFEFEFEFEFEFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
EFEFEFEFFFEFD540000000000000041A9FEFFFEFEFFFFFEFFAAAA95955555555
5A9AABEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEAEAAAAAAAAAAAAAAAAEF55
400000054699AA9A9AAEAEA55400000004195AAAAA9AAAFFEFEEEEAAAEAAAA99
5555595AAEABFFEEAA95454555554400000000155EAEAEAEAAAAAEBFFFEAAAAA
AEEFFFFFFFFFFFEFEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF03BBBBBBBBBBABA665666566AABBBBBBB
BBBBBBBBBBBBBFFFFFBBFBFFFFFFFFFFFFFFFFFFFFFBBBBBBBBBBBAA91000000
0111BB6651111111115555665666ABBBBBBBBBBBFBFBBBBBBBBBBBBBBBBBBBFB
BBBBBBFBFFFBFFFFFFFFBBBBBBBABBB66110000000000011166AABBBBB666651
1110011256A656666AABBBBBBB665551000000000000000000055BBBBBBBBBAA
A66111125666555166666AAAAA66BBBBBBAAA66666ABBBBBBFFBFBBBBBBBBBBB
BBBBFBFBFBFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFFFBFBFBFBFFFFFFFFFFFFFF
FFFBFBFBFFF02AAAAEFEFEEAAAA99999AAAAAAAEEFFFFFFFFFFEFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFEFEFEEEAA844000000054AA55400004455555
559599AAAAAAAAAAEEFFFFFFEEEEEEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FEEEAAAAAAAAA554000000000004455AABFFEEAA95555000004555AA99AAAAAA
ABFEFEAA5540000000000000000000055AABFFFFAAAA9554444556AA555559AA
AAAAAAAAAAFFEAEAAAAAAAAAAAEEFFFFFFFFFEFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF02ABABABA
BBBAA9AAAABABBBFBFBABBBBBFBFBFBEBFBEBBBEBBBEBFBFBFBFBFFFBFFFBFFF
BFFFBFBFBFBFBBBAA5400000001469AAA55411101100010000000114156ABBBA
BBBABBBABBBABBBEBBBEBFBFBFBFBFBFBFBFBFFFBFBEBFBAAA65656011000000
000010256BBABAAAAABABBA56110105565A9AAA96ABAB9A95500000000000000
0000000000000110156569AAA56411101110111425656014000101101114156A
BBBABBBABBBABBBEBBBEBFBABBBEBFBFBFBFBFFFFFFFFFFFFFFFBFFFBFBFBFBF
BFFFBFBFBFBFBFBFBFBEBFBEBBBEBBBFBFB02AAAAAAEAEAAAAAAAAAEEFFFFFFF
EFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFAE9540
00000155AAAA9A955544040000000000040556AAAEEFEFFFEFEFEFEFFFFFEFFF
FFFFFFFFFFFFFFFFFFFFFFFFFEEFAAAA9555400000000000055A9FEEAEAAAAEF
EFDA954405569AAAAAAAAAAFEEA9550000000000000000000000000000055559
AAAA9995544545454555555995540000000405555A9EAFFEAEAEAEEFEFEFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFF03BBBBBBBBBBBBBBBBBBBBBBBBBFFFBFBBBBBBBBBBBFBBBBB
BBFBBBFFFBFFFFFFFFFFFFFFFFFFFBFFFBFFBBBBA69666566556669ABBBBBBBB
BBBBBBBBA655501000011156AABBBBBBBBBBBBBBFBFBBBFFFFFFFFFFFFFFFFFF
FBFFBBBBBBBBBBBBB6555656AA5651166ABBBBBBBA566645565AA6BAAABBBB96
6551101000001116665AA7BBBBAABBBBBBB66555101111167BB661100111AA9A
91000001114555516556665AABBBBBBBBBBBBBBBBBBBBBFBFFFFFBFFFBFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFFFBFFFBFBBBFBFFFBBBBBBBBBBFF02AEE
FEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFEEEEAAAAAA954545599AABFFFFFFFFFFFFFFFFEEAA55400
000000156AAAAAEAEEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEEAAAAAAAAAAAA9
540000000000055AAAEAAAA9955555555555550000000000000155A9AAFFFFFF
FFFFFFFFEEEAAAAFFEFEA9550040000559A954000000000449AAEBFFFFEEEAAE
EFFAAAAAAAFEFFFFFFFFFEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF03ABABABBBFBFBFBFBFBFBFBF
BFBFBFBFBFBFBBBBBBBBBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFFFBFBFBFBABA
AAA9A969541010656ABBBFBFBFBBBABBBFBABAA5540000000014256ABABABABB
BFBFBFBFBFBFBFBFFFFFFFBFBFBFBABAAA696569A9A81400000000000559AABA
A96565656565655410110000000001001465BABBBFBBBBBFBFBBBABABABBBAB9
69551000110415641501000000101566BBBFBBBABABABABAA96ABABABFBFFFBB
BABBBABBBABBBFBFBFBFBFBFBFBFBFBFFFBFFFBFBFBFBFBFBFBFBFBFBFBFBFBF
BBBBBABBBBBFBFBFBFB03FFFEFEFEFFFFFFFFFFFFFEFFFEFEFEFEFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFEA995544000000555AAA
AFEFFFFFFFFFFFFFFFEAA95400000000054A9AAFEFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFEEAAAA9A99554000000000000000000546AAAEAA9AAAAAA554000000
45595AAAAAAAAAFFEFEFEEAAA959999AAAAFFFFEEEAFEEAEAA85400005440000
000000155AABEEAEAAAA9955595AAAAAAAAAAEAEEFEFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFEFEFFFFFFFFFFFFFFFF0
3BBBBBBBBBBBBBBBBBBBFBFFFBBBBBBBBBFBFBFFFFFFFBFBFBFBFFFFFFFFFFFF
FFFFFFFBFBFFFFFFFBBBBBBBA6A6611166666666666AABBBBBBBBBBBBBBBBBBB
BBBA66111111266ABBBBFFFFFFFFFFFFFFFBFFFBFFFFFFFBFBFBBBBBBABABBB6
5000000000BB914000015666BBBAA6A56110111266A656665AABBBFBBB665551
00000000000051666AABBBBBBBBBAAAA9110000267BB56667BA6611000000000
0011166BBBBBBBBBBBBBBBBBBBBBFBFFFBFBFBFBFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFBBBBBBBBBBBBBBBBFBFFFBBBBBFBFFF03FFFFFFFFFFFFFFFFFFF
FFFFFFFEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFEEEA95555556AAAA5555AAAAAAEAAAEAEAEEFFFFFEEEAAAA550004555AABFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEEAAAAAAEE99000000000AA95400005
56AAAAAAAA9550400055A9AA99A9AAAAABFEEEA95540000000000000556AAAAE
EEEEAAAAAAAA9550000157FF99557EEAA000000000000000499AAAFEEAEEFEFE
FEEEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEEEE
EEEEEFFFFFFFFFFFFFFFFFF03BBABBBFBFBABBBABBBABBBEBBBABBBABFBFBFBF
BFBFBFBFBFFFBFFFBFFFBFFFBFFFBFBFBFBEBFBFBFFFBFBAA9A565656569A9AA
A565656555555555556565696AA9696965696AAABBBEBFBFBFBFBFFFBFFFBFFF
BFFFBFBFBFBEBBBABABAAAA56000000000000010156AB96969AAA9A551101155
65A9AAA96BBEB9A9540000000000000000000010111011101014656555501000
01101110000000000000000111256565656ABABABFBFBBBABBBBBFBFBFBFBFBF
BFBFBFBFBFBFBFFFFFFFBFBFBFBFBFFFBFBEBFBABBBABBBABBBABBBEBBBEBFBF
BFF02FEFEFFFFFFFEFEFEFEFFFFFFFFFEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFEA99595A9AAAAAAA9A995955555555555555
5A9AAAAAAAAA9AAAAAAFEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEEFAEAA
AAA950000000000000040AAFEEAAAAAAAA95554545569AAAAAAAAEAFFEA95500
00000000000000000004054544454555595A9555400000004555400000000000
000005595AAA9AAAAAEFFFFFFFFFEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFEFEFEFEFEFFFFFFFFFFFFFFFFFF03BFFFBFBBBBBBBBB
BBBBBBFBBBFBBBBBBBBBBBBBBFFFFFFFFFFFFFFFFFFFFBFFFBFFFFFFFBFFFFFF
FFFFBBBBBB9AA656669ABBBBBBBBBABABBBAAA56665551111156669666567BBB
BBFBBBFBFFFFFFFFFFFFFFFFFFFFFFFFFFFFBBBBBBBBBAB66144000011BA8000
0000000011966655555AA7BA66AABB9551111000000000112556669A6696AABB
BBB661500000001126555000000011454000000267BBBB9AA69666566656669A
BBBBBBBBBBBBBBBBBBBFFFFFFFFFFFFFFFFFFBFFFBFFFFFFFFFFFFFFFFFFFBFF
FFFFFBFFFFFFFBFFFFFFFBFFFFF03FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEEEFFFEEEA999
AAAABEFFFFFFFFFFFFFFFFEEEAA99454000040556AAFFEFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFEEEAAAAAAAEEEED54000000000000000000000014555555
544400000000000000000055AABFEAEAAAFFFFFFFFFFEEEEEEEEA84400000004
4EEC0000000000000AAAA95555999544455AAAEEAAAAAABFFAEAAAAAAAFEFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFF03FBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBF
FFFFBFBFBFBFBFBFBFBFBFBFBFBFBFBABABBBAB9696565AABABFBFBBBBBFBFBB
BABABAA56410000010257ABBBEBBBABFBFBFBFBFBFBFBFFFFFFFBFBFBFBFBEBA
BAAAAAAABAB95400000000000000000000011015556414100000000000000001
0155AABBBABABABBBFBFBFBBBABABAB96410000000001AB90000000000000AA9
6955656554101419AAB969697ABBBABAAAAABABABFBFFFFFFFFFFFBFBFBFBFBF
BFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFB03FEFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFEFEEAAA9595545559AAAAFEFFFFFFFFFFFFFFFFFEEEEA955000000
054A9AABFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFEFEFEFEEEAAAA9550000
0000000AAAAEAA9A955959500000000000055AAAA95599EFAA9955555A9AAAAE
EEEFFFFFFFFEAE9A55400000000000000000000400000000000000000005555A
9AAAAEAEAAAAAAAAAAAEEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF03BBBBBBBBBBBBBBBFBFFFFFBBBBBBBBB
FBFFFFFBFFFFFBFBFBFBFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFFBBBBAAA665
551155667BBBBBBBBBBBFFFBFFFBFBBBBAA511000000111657BBBBFFFFFFFFFB
FBFBFBFBFFFFFFFFFFFFFFBBBBBBBBBBBAAA5511000000000006A7BBBB666666
56601000000000111666566656BBBBA665666666AABBBBBBBBBFFBBBBA665540
0000000000000000001110000000000000000001126666AABBBBBBBAAAABBBBB
BBBBBFFFFFFFFFFBFBFBFFFFFFFFFBBBBBBBBBBBBBBBBBBBFBFBFFFFFFFFFFFB
FBFBFBFFFFF03FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEEA99955555555595AAAAAEEFFFFF
FFFFFFFFFFFFFFFEAA550000000556AAEEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFEEEEEEAEAAAEEAA44000000000556AAAAAA95400000000199AA55599AAA
ABFEAA44000000000002AAFEAA95555555559AAAAA9980000000019940000000
00000000000000155AA5555555AAAAAAAAAAEBFEFEEEEEFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF03FFFBFBF
BFBFBFBFBFBFBFBFBFBFBFFFBFBFBFBFFFBFBFBFBFFFFFFFBFFFBFFFBFFFBFFF
BFFFBFFFBFFFBFBEBBA9696AABBABBAAA9696AAAA96965656565656AAABABBA9
100000001166BBBABBBFBFFFBFBFBFBFBFFFFFFFBFFFBFBABBBABBBABAA969AA
BB6954101019ABBA69AAA9501000011165AA65656AAAB9640000000000000000
0001010000000000000054655411000000000010000000000165BBA955501114
1565656969A96969656AAABABBBFBFBEBFBFBFFFBFFFBFBFBFBFBFBFBFBFBFFF
BFBFBFBFBFBFBFBFBFFFFFFFFFFFFFFFBFF03FFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEEAA
AAAAABEFAEAAAAAAAAAAAAAA995959595A9AAAAAAEAA5540000546ABEFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFEFEFEFEEAAAAAAAAAEAA9544055AABEFAAAA
AA84000000469AAAAA9A9AAEAD54000000000000000000000000000000000000
55595550000000000004000000000159AEAA95454445555A9AAAAAAAAAAAAAAA
AAAEEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFF03BFBBBBBBBBFFBFFFFFFFFFFFFFFFBFFFFFFFBFBBBFBBBFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBBBBBBBB69AABBBBBBBBBBBBA96
665666455111100001115556BB965111115266BBBBBBBFFFFFFFFFFFFFFFFFFF
FBFFBBBBBBBBBBBBBBBBBA9AAABBBA96611552566611000000000257BB9A6640
0000000000000000111556566656AABBA6511000000000000000000000000000
00000001114566554000000667BBBBBBBBBBBAA6665666BABBBBBBBBBBFFFFFF
FFFFFBFFFBFFFBFFFBFFFBFFFFFFFBFFFFFFFBFFFFFFFFFFFFFFFFFFFFF03FFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFEEEAAAAAAAEEFEEEEAAAAAAAA9A95555444000000055
55AAEAD98440015599AAEEFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFEEFEEEFEFEEE
AAAAAAAAAA955555559555000000000002AAEAAA558000000000000000000045
56AAAAA9AAAAA9A4400000000000000000000000000000000000015595554000
000556EEEAEEFFFFFAAAA99AAAAAAAEEEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF03FBBBABABABBBBBBBFBFBFBF
BFBFBFBFBFBFBFBFBFBFBFBFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFBFBFBFBFBA
BABABAA9AAAABABABABABABABBBBBFBAAAA56411000000000001141969656569
BABBBFBFBFBFBFBFBFBFFFBFBFBFBFBFBABABABAAAA965551414100100000014
14000000000000000000000000000000000010297FBBBBBFBABBBABABABABAA9
6400000000000564100000000000000010000000000000000100146565656565
66ABBFBABABBBFBFBFBFBFBFBFBFBFBFBFBFFFBFBFBFBFBFFFBFBFBFBFBFBFBF
BFBFBFBFBFBFBFBFFFF03FFFFFEFFFEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFEEEAA9595555596ABF
FFFFEFEFFFFFFFFFFFEAA954000000000005555AAAEEFFEFFFEFFFFFFFFFFFFF
FFFFFFFFFFFFFFEFEEEAAA995555555955400000000044000000054000000000
0000000545555555AAAFEAAEAFEEAEAEEFFFEFEFEFEEAE9A4540000000000000
0000156AA0000000000000155FE5540000041555555555569AAAAEBFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
3FFBFBBBBBBBBBBBFFFFFFFBFFFFFFFFFBBBBBBBBFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFBFBBBBBBBFFBBBBBBBABA651151667BBBFBFBBBBBFFFFFBBBBBBA
B9640000000000055666AABBFFFBBBBBFFFBFBFBFFFFFFFFFFFFFFBBBBBBBBBA
B66555115566555010000110111100000110000000000000000111111166BABB
BBBBBBBBBBBBBBBBBBBBBBBBBA66110000000000000000002666600000000000
00266BB55510101111115115566656AABBBBBFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF03FFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFEEAA9A5540000000000155AAAEAEEAAEEFEFFFFFEEEAAAA55000000000156
AAAAAAAEFEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEEAAAAAAAAAAAAA999999
9AAAEEEEEA800000000000000000055AAAAAAA555455599EEEA9554000001555
59AAAAAAAA958000000001555500000000000155AA999540055AAAAAAAAAAEFF
FAA9A95595AAAABFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFF03FBFBFBFBFBFBFFFBFFFBFBFBFBFBFBFBFBEBFBE
BFBFBFBFBFFFBFBFBFBFBFBFBFFFBFBFBFBEBFBFBFBFBBBAAAA5641400000000
1125696ABBBABABABBBABBBABAB9651400000001015565AABABABBBEBFBFBFFF
BFFFFFFFBFFFBFBEBFBEBBBABABAA96565696565656565A9BBBAA54000000000
000000000019AAB965541115656ABAA955100110101565656ABA656540000000
01651400000000010155AA655110141965A969AABBBFBBB565656569BBBABFBF
BFFFBFBFBFBFBFBFBFFFFFFFBFFFBFFFBFBFBFBFBFFFFFFFFFFFBFFFBFFFBFBF
BFF03FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFEA9955555AAA550000000000000000000419
5AAEAFEFEFAEAA95454556ABEFAAAAAEAEEFEFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFEEAEAAAAAAAEAFFEAEAAAA9A85400000000000550400000AAAA80000
000000000000000000000000000000005559555540000000AAAA8400040556AE
AE5945400545569A9AAAAAAAAAAAAAEEAAAAAAAFEFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF03BBBBBBFFBFBBBBB
BBBBBBBBBBBBBBFBFBFFFFFFFFFFFBFFFBFFFBFFFBFFFFFFFFFFFFFFFBFBBBFB
FBFFFBBBAA96611111115545400000000000000000000000011266BBBBBBA655
5546669ABBBFFBBBBBBBFBFFFFFFFBFFFBFFFBFBBBBBBFFFFBFBBBBBBBBBBBBB
BABABBBBBB554000000112B95156664000000000000000000000011111111116
6651100000000000115110000000000000111BBA651100001105555111115556
6656665666566656BBBBBFFBFBFFFFFFFFFFFFFFFBFFFBFFFBFFFBFFFBFFBBFB
BBFBBBFFFFFFFFFFFBFBBBFFFFF03FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEA9555544555
5555400000000000000000000000005599AAAAAA9995555599AAEEFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFEEEEEFEEEEAAAAAEEEE5540000004
46A95555558000000000000000000000000040405555AAA55000000000001554
40000000000000155EEEA84400000015555554555555599999999AAAA9AAAABF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFF03BBBBFBFBABBBABBBABFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFFFFF
BFBFBFBFFFFFFFBFBFBFBFFFFFBFBFBAAAA56554101110141415555454141411
0000000000000000101415596AA969AABABABABABABBBFBFFFFFBFBFBFFFBFBB
BABBBABBBABABABABABABABABABAA96514010011101000000000000000000000
0000103ABABABABBBFBFBAAAA9696AB96410000000001AB95400000010101010
000000001025696566AABABBBBBBBAA565545455656AAABBBBBFBFBFBFBFFFFF
FFFFFFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFB03FFFFFFFFFFF
EFEFEFEFEFEFEFEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFAA9A995A9954000000156EAFEFEFEFEFEFEFEEEAA5540000000000
0005555AAAEFFFEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFEEAEAAAAAA
AEAFEFEFEEAA9A5545454540000000000000000000004455AEAFEAAAAAAAAAAA
AAAAAAAAAEEFEEAA99440000000045595544555554040555AAEED955555AABFE
AEAEAAAAAAAAABEEAA9999AAAEAFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF03BFFFFFFFBBBBBBBBBBBBBBBBBBBBBFB
FFFFFFFBFBFBBBBBBBBBFBBBFBFBFFFFFFFFFFFFFFFBFBFBFFFFBBBB96666665
10000000267BBBBBBBBBBBBBBBBBBAA564000000000000011266AABBBBBBBBFB
FBBBBBFBFFFFFFFFFFFFFBBBBBBBBBBFFBBBBAAAAABBBBBBBBBBBBBB66555111
1110000000000000000000011166BBBBBAB6A666AABAAAA6AAABBBBBBAAA6651
0000000112665511155111111155AABB9651155ABBBBBBBBBBAAA66BBBBAAA66
566AABBBBBFBFBFBFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFBFFFFFFF03FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFAA9540000000000000156EEFFFFFFF
FFFFFFFFFFFEFEA9550000000000000199AAAAAEEEEFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFEEEAAAAA9AAAAAAEEFEFEEEEEFEEA95500000004400000449AE
EFFEEEAAAAAEEAA554004055AA9555555AAAABFEAAAA95500000455555554000
044196EEEA99954444555555555555559999AAAAAAAAAAAAAEEFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF03FBFBFBE
BBBABBBBBFBFBBBABFBFBFBFBFBFBFBFBFBEBFBFBFFFBFBFBFBFBFFFBFFFBFBF
BFBEBFBFBFBFBB695000000000000000157ABFBFBFBEBFBFBFFEBFBAB9A81400
00000000011165AABABABBBABFBFBFFFBFFFFFFFBFFFBFBEBBBEBFBEBBBAA969
656569BABBBABBBABBBAA9941000000011100010156ABBBEBBA9AABAA9A55510
116569555015696ABBBABAAA95500000116555140100011167BABB6554501110
105555556565656565656569AABABBBABBBFBFBFBFBFBFFFFFFFFFFFBFFFBFFF
BFFFBFFFBFFFBFFFBFFFBFFFBFBFBFBFBFF03FFFEFFFEFFFFFEEEEEEEEEFEFEF
EFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFAA8540
00000000000000155AAAAAAAAEEFFFFFFFFFEFFEAE55000000000157EFEFEFEF
EEEFEFEFFFFFFFFFFFFFFFFFFFFFFFFFEFFFEEEEAEAAAAAAAEBFFFEFEFEFEFAE
AA9555595A9AAAAA9A995AAEAEA9550400000000000000000000000000000155
AAAAAAA954440145AAAA95595AAAA9555555556AAAAA999AAAAEAEAFEEAAAAAA
AAAEEFEFEFEFEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFF03BBBBBBBBBBBBBBBBBBBBBBBBBFBBBBBBBBBBBFFFBFFFBFF
FFFFBBFBBBFFFBFFFFFFFFFFFBFBBBBBBBFBBBBBA65110000256BB5651000011
1111515666566A9BBBBBFBAA11000000000266BBBBBBBBBBBBBBBBFFFFFFFBFF
FBFFFBFFFBFBBFFBBBBBBBBBBB566656669AABBBBB9AA656665BBBBAAABBAA91
1010000000000000000000000000111111111000000000112656655511110011
111556551111115566566ABBBBBBBBBBBBBBBBBBBBFFBBBBAABBBBBBBBBBFBFF
FFFFFFFFFFFFFBFFFBFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF03FFF
EEEEEEEEEEEAAAAAAABEEFFFFEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFEE98040000199FE55400000000055555559AAAAAAAAEF
FFAA55400000000195AAEEFEEEFEEEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFF
FFFFAAAAA9AAAAAAAAAAAAAAA999999AAAFEAAAAAA9550000000000000000000
000000000055445000000000001559955555544000001455555554554455556A
AAAEEFFEEEFFEEEEEAEFFFFEEAAAAAAAAAEEEFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF03ABABABABABBBBBEBAAAAABA
BABBBBBFBFBFBFBFFFBFBBBBBBBBBFBFBFBFFFBFBFFFBFBFBFBFBABABABABABA
A9555010115569BAAAA5656565656555555555556566AABB69500000001165BB
BFBBBFBFBFBFBFBFBFBFBFBFBFBFFFBFBFBFBFBFBABABABA69656565656AAABA
BABAAABABAB5641000000000000000000001556ABFBABABBBBBBBFBFBABABAA9
6410000000041969641010142ABAB5555565AABBA5555555656969656969AAAA
AAAAAABABABBBABBBBBFBFBFBFBFBFBFFFFFFFFFBFBFBFBFBFBFBFBFBFBFBFBF
BFBFBFBFBFBFBFBFBFF02FEFEFEFEFEFFFFEAEAAAAAEAFEFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFEFEFEFAEEA9555455555AAAAAAAA
A95959595555555555595A9AAAFFAA8440000146AAEFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFEEEEAAAA9A99595A9AABEFEFAEAAAFEEA959440000
0000000000000000556ABFFFEFEFFFEFFFFFEFEEAAAA9945000000055AAA9955
45556AAAA5555555AAEFEA95555A9AAAAAAAAAAAAAAAAAAAAAAEEFEFEFEFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
3FFFFFFBFBFBBBBABAAAAABABBBBBBBBBBBBBBBFFFFBBBBBBBBBFBFFFFFFFFFF
FFFFFFFFFFFBBBBBBBBBBBBBBBAAAAA66666AABBBBBFFBBBBBFFFBBBBBBBBBBA
AA665655111115566666A6BBBBBBBBBBBBFBFBFFFFFFFFFFFFFFFFFBFBFBFBFB
FFFFFBBBBBBBAAAAABBBBBFBBBBBAAA655611000000000111666666656BBBBBB
BBBBBBBBBBBBBBBBBBBBBBBBBBBBA6555110111267BB56555111566657BBBB66
566666666666A6BABBBBFBBBBAAABBBBBBBBBBBBBBFBFFFBFFFFFFFFFFFFFFFF
FFFBFBFBFFFBFFFFFFFFFFFBFFFBFFFFFFFFFFFFFFF03FFFFFFFFFFFFEEEEEEE
EEEEEFFFFEEEEEFEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEEEEAEE
EEFEEAEAEEEEEAAAAAEAFFFFFFFFFFFFFFFFFFFFFFFFFEFEAAAA5559AAAEEEEE
EAEEFEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEEEAEAEEEF
FEEEEEFFFFEAA555559AAAAA99AAAAAAABFFFFFFFFEEEAAAAAAAFEAA9995599A
AFFEFFFFEEEA9995555555A9AAAA99999AAAA9A99555AAAAEFFEEEEEEEFFEEEA
EEEEFFFEEEEAAAAEEEEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFF03FBFBFBFBFBABBBABBBABBBABBBABBBABBBABBBE
BBBABBBABBBFBFFFBFFFBFFFBFFFBFBFBFBABBBABBBABBBABBBABBBAB9AAA9BA
BBBFBFBFBFBFBFBEBFBEBFBEBBBAAA65656569AABBBABBBABBBABBBEBFFFBFBF
BFBFBFFFBFFFBFBFBFBEBFBEBFBEBBBEBBBABBBABBBEBBBABBBABBA964541566
AA69656569AABBBBBFBABFBAA965656ABBBA6555656AABBABBBEBBBAA5641010
556569696565656565656565657ABFBABBBABBBFBBBABBBABBBEBBBABBBABBBA
BBBFBFFFBFFFFFFFFFFFBFBFBFBFBFFFBFFFBFFFFFFFBFBFBFBFBFFFBFBFBFBF
BFF03FFFFFFFFFFFFFFFFFFFFFFFFFFFEFEFEFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFEEEEAEAEAEAAAA995955599AAAAFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFEFAAAA9A9AABEFFFFFFFFFFFFFEFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFEFEFEFEFEFEFEFFFEFFFEEAEAA9A9555555A9AAAAEAEAAAAAAAFEEAEAA59
55440000000000000000000405569AAAEEEFEEAAA5554555599A996AAAA95955
555959AAAEEFEEAAAAAAAAAAAAAEAAAFEFFFFFEFEFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF03BFFFBFBFBFBBBBB
BBFFFBFBBBBBBBBBBBBBFBFFFBBBBBFBFBFFFFFFFFFFFFFFFFFFFFFFFBFBBBBB
BBBBBBBBBA966656665666BBBBBBBBFFFFFFFBFFFFFFFFFFFFFFFBBBAA96665A
ABBBFFBBBBBBBBBBBBBBBBFBFBFFFFFFFFFFFFFBBBFBBBBBBBBBBBBBBBBBBBBB
BBBBBBBBAA566645555666BBBBBBBA966ABBBBBAA65655510000000000000000
00011546669ABBBBBBBAA655115166566656669665566556665AABBBBBBAAA9A
A69AAA9BBBBBBBBBFBFBBBBBBBFFFFFFFFFFFFFFFFFFFBFFFBFFFFFFFFFFFFFF
FFFFFBFFFFFFFFFFFFFFFFFFFFF03EFFFFFFFFFFFFFFFFFFFFFEFEEEEEFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEEEAAAA999AAAA
AAAAAAAAAAEEEEFFFEFFFFFFFFFFFFFFFFFFEAEA99A99AAAAAEEFEFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFEEEFEFEFEFEFFFFFEFEEAAA959555555A
AAEEAAAAAA95500000000000000000000000004455555555544440545559AAAA
AAA9555544555999959955A9AAFFEAAAA99AAAAAAAAAAAAEEFFEEEEAEAEEEEEE
EEEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFF03ABABABBBFBFBEBABABABABABABABABABABBBABBBFBFBFBFBFBFBFBF
BFBFFFFFFFFFBFBFBFBFBBBBBBBFBFBBBAAABAAABABBBABBBABABABABABABABA
BABABABABABBBFFFBAAAA5656566AABBBFBFBFBFBFFFBFBFBFBFBFBFBFBFFFBF
BFBFBFBFBABABAAAAAAABABBBABABBBFBA69657ABAB554000000000000000000
0010656ABABABABBBFBABABABABABAB9A965141015596AB96965556565656565
6ABABAA9A9AAAABAAAAABABFBABABABBBBBFBABABABABABFBFBFBFBFFFBFFFBF
FFFFFFBFBFBFBFFFFFBFFFFFFFBFBFBFBFBFBFBFBFBFBFBFBFF02EAEEFEFEFFF
FFEEEFAEEEAEEEAEEEEFEFEFEFEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFEEEAAAAAAFEFFFEFEEAAAEAAAAAEAEEEEEAEEFEFEFEFFFFFEFEA
9A999A9AAAEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEEAAAAAAAA
AEAFEFEFEFFFAEAAAAAEAFE5540000000000000000000055AAAAAEAEAFEFFFEF
EFEFEFEEAAAAA9595555555AAAAAA95955596AAAAA9AAAAAAAAAAAAAAEAAAAAB
EFFFEFEEAFEFFFFFEFEEEEEFEFEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF03BBBBBBBBBBBBBBBBBBBBBBBBFFBBBBB
BBBBBBBFFFFBBBBBFBFFFFFFFFFFFFFFFFFFFFFBFBFBBBBBBBFBFBBBBBBBBBBB
BBBBFFFBFBBBFBBBFBFBBBBBBBBBBBBBBBBBBBBBBBBBBBB66666AABBBBBBBBBB
FBFBFFFFFFFBFFFFFFFFFFFBFBFBFBBBBBBBBBBBBBBBBAAAAAAAAAAABBBBBBA6
61100000000000111666666666BBBBBFFBBBBBBBBBBBBBBFFBFBFFFFFFBBBBA6
65655666BBBBAA66666656666666566666BBBBBBBBBBBBAAAAAAAAABBBBBBBBB
FBBBFBFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFB
FBFBFFFFFFF03FFEFFFFFFFFFEFFFFFFFFFFFFFFFFFFFFFFFFFFFEFEFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFEFEEEEAEAAAAAAAAAAAAAFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFEFEEEEAAAAAAAAAEEEEAAEA9555555555555555559AAA
EBFFFFFFFFEEEAAAAAFEEEAAAAAAAAAEFFFFFFFFFFEEEAA5555555A9AAEEEAAE
EFFEA9A9955555599AAAAAAAAAAAAAAEEFFEEEAAEAEEEEFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF03BBABBBA
BBBABBBABBFFBFBABBBEBFBFBFFFBFBABBBABBBBBFBFBFFFBFFFBFFFBFFFBFFF
BFFFBFFFBFBFBFFFBFBEBFBEBBBABBBEBFBFBFFFBFFFFFFFBFFFBFFEBFBABBBA
BBBAA9A5656569BABBBFBFBFBFBFBFBFBFBFBFBFBFFFFFFFBFBFBFBEBFBEBBBA
BBBAAAA9696AABBABBBAAAA56010115565551465696ABBBBBFFFBBBAAABABBBA
BBAA696ABABABBBEBBFFBFBAA9A564555565AABAAABABFFEA965656565656969
69A965696ABABBBABABABBBABBBABBBFBFFFBFFFBFBFBFBFBFFFBFFFBFBFBFBF
BFBFBFFFBFFFFFFFBFBFBFBFBFBFBFFFBFF02FFFFFEFEFEFEFEFEEEFEFEFEFEF
FFFFEFEFEEEEAEAEAFEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFEEEFEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEEEAAAAAAAAFEEEFEFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFAEAEAEAEEFEFEEAEAAAA
9555595EAFFFFFEFAAAAAAAFEEEEAEAA999544000000000000000545599AAAAE
EFEFEFEAA9595555559AAAAA9AAAAAAAAEEFEAAA999A9AAAEEEFEEAEAEAFEFFF
FFEFEFFFEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFF03BFFFBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB
BBFBFBFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFFFBFBBBBBBBBBBBBBBFFBBBFF
FBFFFFFFFFFFFBFFFBFFFFBBBBBBAA9AABBBBBBBBBBBBBFFFBFBBBFBBBFFFFFF
FFFFFBFFFBFFFBFFFBFBBBBBBBBBBBBBBBBBBBBBBA565551165BBBFBBBBBBB96
6ABBBBBBBB9A6645511000000000000011155656ABBBBBBBBBBBB65511556656
66566656A69ABBBBBA96665666ABBBBBBBBBBBBBBBFFBBBBBBBBBBBFFBFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFFFBFFFFFFFFFFFFFFFFFFFFF02AAA
AAAEEEFFFFFFFEEEEEFFFFFFFEFFFFFFEEEEFEFFFEFEEEEEFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFEEAEEEAEEEAEEEEFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFEEAEEEAEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFEEEAA554040045556AAAAEAAA9550444000000000000000
0000000000555555555555555569AAAAAAAAA9555599AAFEEAAAAAEEAAAAAAFF
FFFEEEAAAAAAAAAAAAAAAAEEEEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF02965696AAABBBBBFBFBABAAA
A9696969A9AAAAAABABABABABABABABBBFBFBFBFFFBFBFBFBFBFBFBFBFBFBFBF
BABABABBBBBFBFBABABABABABABABABBBBBFBFBBBFBFBFFFBFBBBABABABABABB
BFBFBFBFBFBFFFFFFFFFFFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFFEBB
A91400010565640000000000000000000010657ABABABABABABABABBBFBFBAB9
6965141015596AAABAAA65555565656565696565656AAABABAA9A9697ABBBABA
BABABABABABBBBBFBFBFFFBFFFBFBFBFBFFFFFBFBFBFBFFFFFFFBFBFBFBFFFFF
BFBFBFBFFFFFFFFFFFF02AAAAAAAAEAFFFFFFFEEAAAAAAAAAAAAAAAAAAAAAAAE
AEAAAAAEEEEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFEFEFEFEFFFFFEFEFEE
EEAEEFEFEFEFFFFFFFFFFFFFFFFFFFFFEFEEAEAFEFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFAA554000095958000000
00000000000000449AAEAFEFEEEEEEEEEFEFFFFFFEAEA9555545555AAAAAAAAA
9A555555595AAAAA9A599AAAAEAEEEAAAAAAAAAFEFEEAEAAAEAEEFEFEFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
3BBBBABABBBBBBBBBBBAAAA6AAAAAA6666A6BBBBBBBBBBBBBBBBBBBBBFFFFFFF
FFFFFFFBFBBBBBFBFFFFFFFBFBBBBBBBBBBBFBFFFBFBBBBBBBBBBBBBBBBBBBBB
BBBBBBBBBBBFFBBBBBBBBBBBBBBBBBFBFFFBFFFFFFFFFFFFFFFFFFFBFBFBFBBB
BBBBFBBBBBBBBBFFFFFFFFBBBB66510000000000000000265AA5551165A6BBBF
FBFBFFFFFFFBBBBBFFFBFBBBBBBBAAA65551166656A666665666ABBAAA665555
5565666666ABBBBBBBBABBBBBBBBBBBBBBBBBBBBFBFFFFFFFFFFFFFFFFFFFFFF
FFFBFFFFFFFBFBFBFFFFFFFFFFFFFFFFFFFFFFFFFFF02EAAAAAAAAAEEEFEEEAA
AAAAAAAAAAAAAAAAAAAEFFFEFEEEEEEEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFEFEEEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFEFFFFFFFFFFFFFAEEAA
EEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FEFEAAA9844000000000000000199AA5555555AAEEFFFFFFFFFFFFFFFFFFFFFF
FFFEFEEEAA9995555556AAAAA995956AAEEEA9555555555559999AAAAAEEEAAA
AAAEEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFF03FBABBBABFBABBBAAAAAAABABFBABBBABBBABBBA
BBBABBBEBFBFBFBFBFFFBFFFBFFFBFBFBFBFBFBFBFFFBFBFBFBEBFBEBBBEBFBF
BFFFBFBFBFBFBFBFBFBFBFBEBFBABBBABBBABBBABBBABBBABBBFBFFFBFFFBFBF
BFFFBFFFFFFFBFBFBFBFBFFFBBBEBBBEBFBFBFBFBFBFBFBAAABAA54000000000
00001110145567BABBBABBBABBBABBBABBBABBBABBBEBBBEBBFFBBBAAAA56414
1165AABAA56555656565A9BEBBBAAAAAA96AA9AAA969696AAABABBBABFBEBFBE
BFBFBFFFBFFFBFFFBFBFBFBFBFBFBFFFBFBFBFBFBFFFBFFFBFFFBFBFBFFFFFFF
FFF03FFFFFFFFFFFFFFFEFEEEEEFEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFEFEFEFFFFFEFEFEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFEAEAA5540000000000000005555555AABEEAA9A
555544000000000000000545599A9AAAAEAFEFFEAA99544445555AAAAAAA9AAA
AAAAAEAFEFFFEEAEAA9AAAAEAFFEAEAAAAAEAEAFEFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF03BFBBBBBBBFBBBBB
BBBBBBBBBBBBBBBBBBFFFFFFFFFFFBFFFFFFFFFFFFFFFFFFFFFFFFFFFBFFFFFF
FFFFFFFFFFFFFFFFFBBBBBFFFFFFFFFFFBFFFBFBBBFBBBFFFFFFFFFBBBBBBBBB
BBBBBBBBBBBBBBFBFBFFFBFFFFFFFFFFFFFFFFFFFFFFFBFBBBFBBBFBFBFFFBFF
FFFBBBBB665540000000000000005155565AABBBBB5666511110000000000011
1115565666AABBBBBBBBB65511111155665AA6566656A6AABBBBBBBBBBBA6656
6ABBBBBBBABBBBBBBBBBBBBFFFFFFFFFFFFFFFFFFFFFFFFFFBFFFBFFFBFFFBFF
FBFFFFFFFFFFFFFFFFFFFFFFFFF03FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFE
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFEFEEEFEAA9555444049
9AA80000EEC440000000000000000000000000000000000000004054556AAAAA
AAAAA955555569AAAAAAAAAAAA9999AAAAAAA9AAAAAAAAAAAEEFFFFFFEEEFEFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFF03FBFFFBFBFBFBFBFBFBBBABBBFBFBFBFBFBFFFBFBFBFBFBFBFBFBFBF
FFFFFFFFBFBFBFBFBFBFBFBFBFBFBFBFBFBBBABBBABABABBBFBFFFFFBFBFFFFF
FFBFBFBFBFBFBFBFBFBBBABBBABBBABBBBBFBFBFFFBFBFBFBFBFBFBFBFBFFFBF
BFBFBFBFBFBFBFBFBFBBBABABABABABAAA655010101565640001BA9010000000
00000000000000000000000110111110101055656969AAA965551055656AA9AA
AAAA696565656969696569AAAAAAAABBBBBFBABABABBBFBFBFBFBFBFBFBFBFBF
FFBFFFBFBFBFBFBFBFFFFFBFBFBFBFBFBFBFBFBFBFBFBFBFFFF03FFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFEFEFEFEFFFFFEFEFEFEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
EFEFEFEFEFEFAEAAAAAAAA90000000000000000000000000555AAAAEAEAEAEEE
EFEFEFEEEAAA99555555595AAEAAEFEEAA5555599AAA99995555555959999AAA
AAAEAAAAAAAAAAAAAEEEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF03FFBFFFBFFFFFFFFFFFFFFFBFBFBFBFB
FFFBFFFFFFFFFFFFFFFBFFFFFFFFFFFFFFFFFFFBFFFFFFFFFFFFFFFBFBBBBBBB
BBFBFFFBFBFBBBBBBBBBBBBBBBBBBBBBBBFBFBFBFFFFFFFBBBBBBBBBFBBBFFFB
FBFBFBFBFFFFFFFFFFFFFFFFFFFBFFFFFBFBBBBBFBFFFBFBBBBBBBFBFBBBBA95
6000000000000000000000000066BBBBBBBBBBBBBBFBFFFBFFFBFBBBBBBBBBA6
6665566656AAAAAAA6665666A666BAFBFBBBBBBBFBBAA6667ABBBBBBBAAAAAAA
BBBBBBBBFBFFFFFFFFFFFFFFFFFFFFFBFBFBFFFFFFFFFFFFFFFFFFFFFFFBFBFB
FFFFFFFFFFF03FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEA9550000000000000000000
00000055EEFFFFFFFFFFFFFFFFFFFFFFFFFEFEEEAAAA95555556AAAAAAAA9999
9AAAA999AAFFEEEAAEEFFEAAAAAAAAAEEFFAAAAAAAAAAAAEEFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF03FBFBFFF
BFBEBFBEBFBFBFBFFFBFBFBFFFFFBFBFBFBFBFBFBFBFBFFFFFFFBFFFBFFFBFBF
BFBFBFFFBFFFBFFFFFFFBFBEBFBEBFBFBFFFBFBFBFBFBFFFFFFFBFBEBFBEBBBE
BBBEBBBABBBABBBABFBFBFFFBFFFBFFFBFFFFFFFBFFFBFFFBFBFBFBFBFBFBFBF
BFBFBFFFBBBABBBABBBAA95010000000110000000000115569AABBBFBBBABBBA
BBBABFBEBFBABFBEBBBFBFBABAB564141155656565656565656565697ABABBBA
B9AAA9A969696AAABBBEBBBABBBABBBFBFFFBFFFBFFFBFFFBFFFBFBFBFBFBFBF
BFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFF03FFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFEFEFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFEFEFEF
EA95400000000400000000040556AAAAEFFFEFFFEEEEAEEFFFFFFFFFEFFFEFFF
FFEFEAAA955555559AAA995959995AAA9AAAAAAFEFFEAEAAAAAAAAAAAAAFEFFE
AEAEAEFFEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFF03BFFFBFFFBFBBBBBBBBBBBFFFBFFFBFFFBFFFFFFFFFFFBFF
FBFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFB
FBFFFBFFFBFFFFFFFFFFFBFFFBFBBBFFFFFBBBBBBBFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFBFFFFFFFFFFFBFBFBFFFFFFFBFBBBBBBB9AA6566656665666566656
6BBFFBBBBB56655100100000000000111115565667BBBBBBBBBBB69665111156
7BBBB656ABBB6651514555466657BBBBA65666566656669ABBBBBBBBBBFBFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFBFFFBFFFFFFFBFBBBFBFBFBBBFBBBFFFFF03FFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFEEAAAAAAAAEEEEAAAEEAA8000000000000000000000
000000000000000000000044556AAAAEEFFEA995555555555595555555555555
59AAA9A955556AAAAAA9999595A9AAAAEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF03FBFBFBFFFBFBFBFBFBFBFBF
BFBFBFBFBFBFBFBFBFFFBFBFBFBFBFBFBFFFFFBFFFFFFFBFBFBFBFFFFFBFBFBF
BFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFFFBFFFBFBFBFBFBBBFBFBFBF
BFBFBFBFBFBFBFBFBFBFBFBFBFBFFFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBF
BABABABABABABAB969BA69511000000000000000000000000000000000000001
101054656AAABFBEA965541414145565541014141455556569655555656AA965
65656565A9BABABFBFBFBFBFBFBFBFBFFFFFFFBFBFBFBFBFBFBFBFBFBFBFBFBF
BFBFBFBFBFBFBFBFBFB03FFFFFFFFFFFFFFFFFFFFFEFEFEFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFEFEFEFEFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFEFEFEEAA99440000
000000000000000000002EA959555559AEAFEAAAAAA95545040004054556ABFF
AA5555595EEEA959AAAEAFEEAAAAAAA95955595A9AAAABFEAAAAAAAEEFEFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
3BBBBBFBFFFBFFFBBBBBBBBBBBBBFBFBFBFBFFFBBBBBBBBBBBFFFFFFFFFFFFFF
FFFFFFFBFBBBBBBBFFFFFFFFFFFBFBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB
BBFBFFFFFFFFFFFFFFFBFBFBFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFBFBFFFFFFFFFFFFFFFBBAB6656510000000000000000000000011
566AAABBBBBBBBBBFBBBFBBBBBBBAAA6511000011266BB665111111111115166
6AAAA6611167BBBBA651111111565666BBBBBBBBBBBBFFFFFFFBFBFBFFFFFFFF
FFFFFFFFFFFFFFFFFFFBFFFFFFFFFFFFFFFFFFFFFFF03FFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFEAAAA55444000000000000000000000015599AAAAAEAEEFFFFFFFF
FEFEEEAAAA998440000056AAFFA98440000040445595AAAAA5555556AAAA9554
5445555555AAAAAEEEEEEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFF03FBEBFBFBFBFBFBEBBBABBBEBFBFBFFFBFBFBFBF
BBBEBBBEBFBFBFFFBFFFBFFFFFFFBFBFBFBEBFBFBFBFBFBFBFBEBBBFBFBFBFBF
BFFFBFFFBFBEBFBEBBBEBFBFBFBEBFBEBFBEBFBFBFBFBFBFBFBFBFBFBFFFBFBF
BFBFBFFFBFFFFFFFBFFFBFFFBFFFBFBFBFBFBFBFBFBFBFBEBBBABBAAA9AABBBA
BBAAAABABBBAA965656969BABBBAABBABBBABBBFBBBABBBABBBFBBBAA9601000
00000000141555656BBA1000000000000110011011256AB56414111055656ABA
BBBFBFBEBFBEBFBFBFBFBFFFBFFFBFFFBFFFFFFFBFBFBFBFBFFFBFFFBFBFBFFF
BFF03FFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFEEAAAAAEABEEAEAAAABFEEEAAA9A9AAA
AAAEAEAAAAAFEFEFFFFFEFEEAFEFFFFFEFEFEAA540000000000015555556AAAE
5500000000000000000005599EAA99554555556A9AAFEFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF03BBBBBBBBBBBBBBB
BBBBFBFFFBFFFBFFFBFFFBFFFFFFFBFBFBFFFFFFFFFFFFFFFFFFFFFFFBFBBBFB
FBFFFBFFFBFBBBFFFBFFFFFFFFFFFFFFFFFFFBFFFBFFFFFFFFFFFBFFBBFBBBFF
FBFFFBFFFFFFFBFFFBFFFBFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFFFBFFFFFF
FBFBBBFBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBABA661110000000000000000000
00011546669ABBBBBBBBB6540000000000101000000000000011155BBA551100
0011165BBBBA6611666AABBBBBFBBBBBBBBFFFFFFBFFFBFFFFFFFBFFFFFFFFFF
FFFFFBFBFBFFFBFFFFFFFFFFFFF03FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFEEEEEAA99955555540000000000000000000000000000000000000059AAAE
EAA95400000000000554000044AABFEAA594445555AA9440000000000000556E
EFFFFEFEEEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFF03FBFBFBBBBBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFFFFFFFBFBFBFBFBF
FFBFFFBFFFFFFFFFFFBFBFBFBFBFBFBFBFBFBFBFBFBFFFFFFFBFBFBFBFBFBFBF
FFFFBFBFFFFFFFFFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFFFBFFFFFFFFFFFFF
FFBFFFFFFFFFFFBFBFBFBFBFBFBFBFBFBFBBBABFBFBBBABABABAA9A565656410
00000000000000000000000000000000000010256AAABAA81501000000000555
100010AABFBAB560101165655000000000000000557ABBBBBABABABBBBBFBFFF
BFBFBFBFBFBFBFBFBFFFFFBFBFBFBFBFBFBFFFFFBFBFBFBFFFF03FFFFFFFFFEF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFEFEEEEAAAA995545040000000000000000000000000000AA
EFD99554400000000000000000019AAA59000000000000000000000000000000
0000056AA950000000000005499AAAEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF03BBBBBBBBBBBBBBBBBBBFFFFFFFFFFFF
FFFBFFFBFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFBBB
BBBBBBBBBBBBFFFBFBFBFBFFFFFFFFFFFFFFFFFFFFFBFBFBFBFBFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBBBBBBBBB
BBBABA66661111000000000000000000000000000066BBA65111111000000000
0000011267BB661000000000000000000000000000000000113BB66000000000
0011166ABBBBBBBBBBBBBBBBFBBBBBBBFBFFFFFFFFFFFFFFFFFBFFFFFFFFFFFB
FFFBFFFFFFF03FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEEEAA9A995559999AAA994
44000000000000000156AAEEFFFEEEEEFFFEEEAA9994400000000155AA444000
0000459900000000000554000000000000000156AA000004499AABFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF03FBFBFBF
BFBEBFBEBBBEBFBFBFBFBFFFBFBFBFBEBFBEBFBFBFBFBFFFBFFFBFFFBFFFFFFF
BFFFBFBFBFFFBFFFFFFFBFBFBFFFBFBFBFBEBFBEBFBEBBBEBFBEBFBFBFBFBFBF
BFBFBFBFBFBFBFBFBFBFBFBFBFFFBFFFBFFFFFFFFFFFBFFFBFBFBFFFBFBFBFBF
BFBFBFFFBFFFBFBFBBBABBBABAAAABBABBBEBBBABBBABABABBBABBBABBBEBFBA
BBBEBBBABBBABBBABFBFBBBAA560000000000000255010000000000000101000
000000694000000000000000012AABBABBBABBBFBFBFBFBFBFFFBFBFBFBFBFBF
BFBFBFBFBFFFBFBFBFBFBFFFBFFFBFFFFFF03FFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEF
EEEEAAAAAAAFEFFFEFEFEEEEAEAAAEEFEEEFFFFFFEEFEFFFFFEFEEEEAEEFFFFF
EFEE9990000000000000198400000000000000000000000000AA800000000000
0000002AAFFEAEEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFF03BFFFBFBBBBBBBFBFBFFFBFFFBFFFFFFFFFFFFFFFBBBBBFB
FFFFFFFFFFFFFFFFFFFFFFFFFBFFFBFFFFFFFFFFFFFFFBFFFBFFFFFFFFFFFFFF
FFFFFBFFFFFFFFFFFBFBBBFBBBFFFBFFFFFFFBFFFBFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFBFBBBFFFBFFFFFFFBFBBBBBBBBBBBFBBBBBBBBBBBBB
BBBBBBBA665511000000000000000000000000011145665ABBBBB11000000000
00000000000000FB910000000000000000000000000000000011165BBBBBFBBB
BBBBBBFFFFFFFBFBFBFFFBFFFFFFFFFFFBFBBBBBBBFBFFFFFFFFFFFFFFF03FFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFFFFEEFFFFFFFEEAAA5544400000
000000000000000000000155A9AAAEEAA4440000000000000000000000FFC000
00000000000000000000000000000004499AAAFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF03FBFBFBFBFBBBFBFBFFFFFFF
BFBFBFBFBFBFBFBFBFBFBFBFBFBFFFBFFFFFFFFFFFFFBFBFBFBFBFBFBFFFFFBF
BFBFBFFFBFBFBFFFFFFFBFFFFFFFFFFFFFFFBFBFBFBFBFBFFFFFFFBFBFBFBFBF
FFBFFFFFFFFFFFFFFFFFFFFFFFFFFFBFBFBFBFBFBFBFBFBFFFFFFFFFFFFFFFFF
BFBFBFBFBFBFBEBABABBBAAAAAA9695400000000000000000000000000000000
0000000000000110000000000000000000000000000000000000000000000004
156565101025696ABABABABBBABBBABBBABBBABBBFBFBFBFBFBFBFBFBFBFBFBF
BFBFBFBFBFBFBFBFFFF03FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEEAEAAAA9A
5955554404000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000045559AAEAFFFFFFFFF
FFFFFFFFFFFFEFEFEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
3FFFFFFFFBBBBBBBBBFBFFFFFBFBFBBBFBFBFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFBFBFBBBBBBBBAAA6656555111100000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000001116566BBBBBFFBFFBBFFFFFFFBFBBBBBBBBBBB
FBFFFFFFFFFFFFFBFFFBFBFBFBBBBBBBFBFBFFFFFFF03FFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFEEAEEAAAAAAAAAAAAAAAAAAEAEEEEEAAAA9A95555440004599A
AEEEA80000000000000000000000000000000000000000000000000000000000
0444444555AAAABEFFFEFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFF03FFFFFFFBFBEBBBEBBBEBFBFBFBFBFBFBFFFBFFF
BFFFBFFFBFFFFFFFFFFFFFFFFFFFBFFFBFFFBFFFFFFFBFFFBFFFBFBFBFBFBFBF
BFBFBFFFBFFFBFFFBFFFBFFFBFFFFFFFBFFFBFFFBFFFBFFFFFFFFFFFFFFFFFFF
FFFFBFFFFFFFBFFFBFFFBFFFBFFFBFFFFFFFBFFFBFFFBFFFBFFFBFBEBBBABABA
AAA969696AAAAABABBBABBBAA965656554101110256ABBB96910000000000000
00000000000000000000000000000000000000000000011011105465BABABBBA
BBBABBBEBFBEBBBABBBABBBABBBEBFBFBFFFBFBFBFBFBFBFFFFFBFBEBFBFBFFF
FFF03FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFEFEFEFEFFFFFFFEFEEAAAAAEAFEFEFEED54000000000000000000000000000
0000000000000000000000155AAAAAAAAAAAEEFFEEEEAEAFEFFFFFFFEFEFEFFF
FFFFEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF03BFBBBFFFFFFFFFF
FBFFBBFBBBFFFFFFFFFFFBFBFBFFFBFFFFFFFFFFFFFFFFFFFFFFFFFFFBFFFBFF
FBFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFFFBFFFFFFFFFFFBFFFBFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFFFFFF
FFFFFFFFFBFBBBBBBBFFFFFFFFFFBBFFFFFFFFBBBB9A66554010000000000000
000000000111667BA69660000000000000000000000000000000000000000011
000001166656A69AAABBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBFFFFFFFFFFFBFB
BBFBBBFBFBFFFFFFFFFFFFFFFFF03FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFEFEEEAA9995400000000000000000000000004499AAAAA5
500000000000000000000000000000000000000000444000004556AAAAAAAAAA
AAEEEEFFFFFFFEFEFEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFF03FBFBFBFBFBFBFBFBBBBBFBFBFBFBFBFBFBFBFBFBFBFBFBFFFFFFFFF
FFBFFFBFFFFFFFFFFFBFBFBFFFBFFFFFFFFFFFFFFFBFBFBFBFBFBFBFBFBFBFBF
BFBFBFBFBFBFBFBFBFBFBFBFBFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFBFBFBFBFBFBFFFFFFFFFFFFFFFBFBFBFBFBFBFBFBBBABABABABAAAA969
5501000000000000000000000000000000000000000015651011000000000000
000000000000000002B965555414555555556565A9BABFBFBFBFBFBFBFBFBFBF
BFBFFFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFFFBFFFF03FFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFEEAEAAAA9A999955555545040000000000000000
0000000000000000000000000000000055554000000000000000001554000000
0000156AAEAEAFEEAEAAAAAEEFEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF03FFBFFFBFBBBBBBBFBFFFFFBFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFB
FFFBFBFBFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFFFFFFFFFFFFFFFFFFFFFFFFFFFB
FBBBBBBBBBAA5666566565511111110000000000000000000000000000000000
000000000000515540000000000000000015611000000000157BBBBBBBBBBBBB
BBBBBBBBFBFFFFFBFBFBFFFFFFFBFBFBFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFF03FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEEEEEEEEEEEEEEAAAAA
AAAAEEFFFFFFFFFFFEEEAAAAAAAEFEFAAAA95400000000000000000000000015
50000000005540000000000000545555559AAAAAAAFEFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF03FBFBFBF
BFBFBFBEBFBEBFBFBFBFBFBFBFFFBFFFBFFFBFFFBFFFBFFFBFFFBFFFFFFFBFFF
BFFFBFFFBFFFBFFFBFBFBFFFBFBFBFBFBFFFBFFFBFFFBFFFBFFFBFFFBFFFBFBF
BFFFBFFFBFBFBFFFBFFFBFFFBFFFFFFFFFFFBFFFBFFFBFFFBFFFBFFFBFFFBFBF
BFFFBFFFBFFFBFFFBFBFBBBABBBABBBABBBABBBABABAAABABBBEBBBEBFBABBBA
AABAAABABBBAA9A9540000000000000000000000001410000000001000000000
000000101455556565AABABAFFFABBBEBBBFFFBFBFBFBFBFBFBFBFBFBFFFBFFF
BFFFBFFFFFFFFFFFBFBFBFFFBFFFBFFFFFF03FFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFEFFFFFFFFFFFFFFFFFFFFFFFFFFFEFEFFFFFFFFFFFFFFFFFFFFFFFFFEEEE
EFDA854000000000000000000000000000000000040EAE9959AAAA9A9A9A9AAA
AAAAAEAEAFEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFF03BFFFBFBBBFBBBBBBBBBBBBBBBFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFF
FFFFFFFFFFFFFBFFFBFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFFFBFBBBFFFBFFFBBBBBFB
BBBBBBFBBBBBBBBBA651111000100000000115455656BBBABBBBB65400000000
00000000000000000000000000000011267BBBFBBBBBBBBBBBBBBBBBBBFBFFFF
FBFFFBFFFFFFFFFFFBFFFBFFFFFFFFFFFFFFFFFFFBFFFFFFFFFFFFFFFFF03FFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEEEAEA9554
5444000000000005555555AAAAAAAAEAA5540000000000000000000000000000
00000000004455AAEFFFFEFEAAAAEEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF03FBFBFBFBBBFBFBFBFBFBABB
BABBBFBFBFBFBFBFBFBFBFFFFFFFFFFFFFFFFFFFFFBFBFBFBFBFBFBFBFBFFFBF
FFFFFFBFFFBFFFFFFFFFFFFFBFBFBFBFBFBFBFBFFFFFFFFFFFFFBFBFFFFFFFBF
FFBFBFBFFFFFFFFFFFFFFFFFFFFFFFBFFFBFBFBFBFBFBFBFBFBFBFBFBFFFFFBF
FFBFBFBFFFBFBEBBBBBFBABABAA9696965551000000000000000000000000000
0000000010156AAAA96965000000000016AA0000001114100000106565656969
AAA9A9BABABBBFBFBFBFBFBFBFBFBFBFBFBFFFBFBFBFBFFFFFFFFFBFFFBFBFBF
BFBFBFBFFFFFFFFFFFF03FFFFFFFFFFFFFFFFFFFEFEFEFEFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
EFEAAAAAAAAA9A5504000000000000000000000000000000000004095AAAAAAA
59000000000156AA000000040550000045999A9A9AAAAAAAAAAAEFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
3FFFFFFBFBBBBBBBBBFBFBFBBBBBBBBBFBFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFBFBFBFBFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFBFFFBFFFFFFFFFFFFFFFFFFFBBBBBBBBBBBBBAAA66666655555111111
0000000000000000000000000000000000066BBA566551112651100000001166
40000000000000112566666666665666AABBBBBBBBBBBBBBFBFBFBFBFBFBFBFB
FFFFFFFFFFFFFFFFFFFFFFFFFFFBFFFFFFFFFFFFFFF03FFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFEEEEEEEFEFEFFEEEAAAAAAAEEFFFFFEEEEFFFFFFFFFFFFFFFFA
EAAAA9995540400000000000000000000000000000000000055FFD540000146A
AFFEFEFEAAAAAAAEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFF03FFFBFFFBBBABBBABBBEBFBEBBBEBBBFBFFFBFFF
BFFFBFFFFFFFBFFFBFFFBFFFFFFFFFFFBFBFBFBFBFBFBFFFBFFFBFFFBFFFFFFF
FFFFBFFFFFFFFFFFFFFFBFFFBFFFBFFFBFFFBFBFBFBFBFFFBFFFBFFFFFFFBFFF
BFFFBFFFBFFFBFFFBFFFFFFFBFFFBFBFBFFFFFFFBFFFBFFFBFBEBBBABBBABBBA
BBBABBBABABAABBABBBEBFBABBBABBBABFBEBFFEBBBABABAB965555000000000
0000000000000000000000000001056EBC540000112AAFBABBBAAAA9AABABBBF
BFBEBFBEBFBFBFFFBFBFBFFFBFFFBFBFBFBFBFBFBFBFBFFFFFFFBFBFBFFFFFFF
FFF03FFFFFFFFFFFEFEFEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFEFEFEFFFFFFFEFFFEFEFEFFFFFFFFFEEAAA9500000000000000000000000
0000002EA5500000000004440555555959AAAABFEFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF03FFFFFFFFBBBBBBB
BBFBFFFFFBFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFBFFFBFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFBBBBBBBFBFFFFFFFBFFFFFFFFFFFBBBBBFBBBBBBBBBFFFFBBBB
BBBBBBBBFBFBBBBBAAB66000000000000000000000000000003BB54000000011
1111154666566656BBBBBBBBBBFFBBFBFFFFFBFBBBBBBBFBFBFFFBFFFFFFFFFF
FBFFFFFFFFFFFBFFFBFFFFFFFFF03FFFFFFFFFFEEEEEEEFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFEEEA955444000000000000000000015599AAAEEE
EAAAA800000000000000000000000000000000000055554445555444005595AA
AAAEEEFFFFFFFFFFEEFEEEFFFEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFF03FBFBFBFBFBFBEBABABABABBBFBFBFBFBFBFBFBFBFFFFFBFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFBFBFBFBFBFBFFFFFFFBFBFBFFFFFFFBF
FFFFFFBFBFBFBFBFBFBFBFBFBFBFBFBFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFBFBFBFBFBFBFFFFFFFFFBFBFBFBFBFBFBFBFBFBABABAA9A9A96969
6565140000000000000000000000000000000000000000000010100000000000
0000000000000000000101000000055565656565657ABFBABABBBFBBBABABFBF
BABBBABFBFBFFFBFBFBFBFBFBFBBBFBFBFBFBFBFBFBFBFBFFFF03FFFFFFFFFFF
FFEFEFEFEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFAEAAAAAAAAAAAA9A5540000000000000
0000000000000000000000000000014545000000000000000000000000000000
0000000005595A999955AAAEEFFFEFEFFFEFEFEFFFFFFFEFEFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF03FFFFFFFFFFFFFFBBBBBBBBBBBBBBBBB
FBFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFFFB
FBBBBBBABBAA5666656565551111000000000000000000000000000000000000
0000000000000000001110000000000000000000000000000000000001111166
BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBFBFFFFFFFFFFFFFBFBFBFFFFFFFFFFFF
FFFFFFFFFFF03FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFEEEEEEEEAEEEEEEEA
AAAAAAEEEEEAAEEEEEEEEEAAEAEAEAA995544400000000000000000000000000
04440000000000000000000000000000000000000054A9AAAAAAAAEFFFEEAAAA
AEEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF03FFFBFFF
BFFFBFBFBFFFBFFFBFBFBFBFBFBFBFFFFFFFBFFFFFFFBFFFBFFFFFFFBFFFFFFF
FFFFBFFFFFFFBFFFBFFFBFFFBFBFBFFFFFFFFFFFBFFFBFBFBFFFBFFFBFFFBFFF
BFFFBFFFFFFFBFFFBFFFBFFFFFFFFFFFFFFFFFFFBFFFBFFFBFFFBFFFBFFFBFFF
BFFFBFFFBFFFBFFFBFBFBBBABBBABBBABBBABBBABBBAAABABBBABBBABBBABBBA
BBBABBBAA9A56554100000000000000000000000000001100000000000000000
000000000000000000000010656AAAAABBBBBFBABABABBBABFFFBFBEBFBFBFFF
BFFFBFBFBFBEBFBFBFBFBFBFBFFFFFFFFFF03FFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFFFFFEFFFFFFFFFFFFFFFFFEF
AEEA995000000000000000000000029A00000000000000000000000405500001
45AAAAAEEEAEAEAEAEEEEFEFEFFFEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFF03FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFFFBFFFBFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFBBBFBFBFFFFFFFFFF
FBFFFFFBBBBBBBBBBBFBBBBBBBBBFBFBBBFFFBFBFBBBBB9AA650100000000000
000000000256000000000000000000000011111000011156BBBBBBBBBBBBBBBB
BBBBBBBBBBBBBBBBFBFFFFFFFFFFFFFFFFFFFFFFFBFFFBFBFBFFFFFFFFF03FFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEAEAAAAAAAA9550000000000
000000000000000555555599AAAAAEEAAAAAA955000000000000000000554000
00000000000000000000000155AAAAAAAEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF03FBFFFBFBFBFBFBFBFBFBFBF
BFFFFFFFBFBFBFBFBFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFBFBFFFFF
FFBFBFBFBFBFBFFFFFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFFFBFFFBF
BFFFFFBFBBBBBABBBABA65501000000000000000000000000000000000000000
00000000000000015565BA654000000000000000000000000000000000000000
0000000001256ABBBBBBBABBBABABABFBFBFBFBFBFBFBFBBBABBBBBBBFBFBFBF
BFBFBFBFBFBFBFBFBFF03FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFEFEFEE
9A8540000000000000000000000000000000000000000000000000000001569A
AEAA80000000000000000000000000000000000000000000000000195EAFEFFF
FFEFEFEFEFEFFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
3FFFFFFFFFFFFFFFFFFBFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFBBBBBBBBBBAAA66565111000000000000000000
000000000000000000000000000000000000000000000000002AA66400000000
002656600001116566656110000000000011166BBBBBBBBBBBBBBBBBBBBBBBBB
FFFFFBBBBBBBFBFFFFBBBBBBBBBBFBFFFFFFFFFFFFF03FFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFEEEEAAAAAA999550000000000000000000000000000000000000000
0000000000000000000000000000002AAAA8000000000029AAA0000000555555
5440000000000000099AEBFEFFEEEEEEFEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFF03FFFBFBFBFBFBFBFBFFFBFFFBFBFBFFFFFFFFFFF
FFFFBFFFBFFFFFFFFFFFFFFFBFFFBFFFBFFFBFFFBFFFBFBFBFBFBFBFBFFFBFFF
BFFFFFFFBFFFBFFFFFFFBFFFBFFFBFFFBFFFBFFFFFFFFFFFBFFFBFFFBFFFFFFF
FFFFFFFFFFFFFFFFBFFFFFFFFFFFBFFFBFFFBFFFFFFFBFFFBFBABBBABAAAA9A9
69656565656554545465A9A9A9696AA965656565656554141000000000000000
0000000000256564556514000000056AB81400011425656AB9640000001559AA
ABBABBFFBBBABBBFBFBFBFBFBFBEBBBEBBBFBFFFBFBFBFBFBFBFBFBFBFBFBFBF
BFF03FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFFFFFAEEAAAAAAAAEAAAE
EFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFEEEAAAA55400000000000000000155
59AA9540000000000055595955555400000000195AAEAEAFEFEFFFFFEFFFEFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF03FFFFFFFFBFBBBFB
BBFBBBFBBBFFFBFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFBFBBBBBBBFBFBFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFBFFFBFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFBBFBBBBBBBFBFBFFFFBBBBBBBABBBBBBBBBBBBBBBBFFFFFFBBBBBBBF
FBFFFFFFFFBBBBBBBAB661500000000000000001125666565140000000000011
265666515010000011166AABBBBBBBBBBBBBBBBBBBBBBBFFFBFBBBBBBBBBFBFF
FFFFFBFFFFFFFFFFFFFFFFFFFFF03FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEEEEEEE
EEEEEEFEEEFEEEFEEEFEEEFEEEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFE
EEAAAAA9544000000046AAFEAAAAAAAAAAEFFFEEEEEEEAAFFFFEEBFFFFFEFFFE
FFFFFEEEAA99954000000000559599AAA554400155AABEFFFFFAA9A955000055
5AAFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFF03FFFFFBFBFBFBFBFBFBFBFBFBFBFBFFFFFFFFFFFFFBFBFBFFFFFFFFF
FFFFFFFFFFFFFFFFFFBFBFBFBFFFBFBFBFBBBABABABABABABABABABABABABABA
BABABABBBABBBABBBBBBBFBFBFBFFFFFFFFFFFBFBFBFBFBFFFBFFFFFFFFFFFBF
BFBFFFFFFFBFFFBFBFBFBFBFFFFFBFBFFFBFBFBFBABABAB9A965100000000012
BABA69696AAABABBBBBABABABABBBFBEBABBBABABFBABABBBABABA6554000000
0000146565696550110155A9BABFBABAA9641411101559ABBBBFBFBFBFBFBFBB
BBBBBFBFFFFFBFBFBFBFBFBFBFBFBFBFBFFFFFBFFFFFFFFFFFF03FFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFEFEFEEEEEEEFAEEEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAAAEAA
AEAFEFEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFEEEAAAA9500000000000000000000000000000000000000000
0000000000000000000415595AAAAEAEAEEFFFEAA95954040445555A9AAAAAA9
555555595A9AAAA95959AAAAAEAFEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF03BFBFFFBFBFBFBFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFBBBBBBB
BBFBFBFBFBFBFBBBFBBBFBFBFBFBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBFFF
FFFBFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFBFBBBBAA540
0000000000000000000000000000000000000000000000000000000000000000
0000011166AAA666667BBBBBBBBBBB6655515666A6AA566666666555555666A6
BBBBBBBBBBFFFFFFFFFFFBFBFBBBFBFBFFFFFFFFFFFBFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFF03FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEEEEFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFEFEFEEEEEEAEAAAAAEAEEFEFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFAA954000000000000000000000
000000000000000000000000000000000000000000000000000156AAAAAAAAAA
AFFFFEEEAA999555555AAAAAAA9995555555555555AAFEFEFEEEFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF03FFFFFFF
BFFFBFBFBFFFBFFFBFBFBFFFBFFFFFFFFFFFFFFFBFFFBFFFBFFFFFFFFFFFFFFF
FFFFFFFFBFFFBFBABBBABBBABBBFBFFFBFFFBFFFFFFFBFFFBFFFFFFFFFFFBFFF
BFFFBFBABBBABBBABBBABBBEBFBFBFFFBFFFBFFFBFFFBFFFFFFFFFFFFFFFBFFF
FFFFBFFFBFFFBFBAAA6551000000000000000000010000001110101555556565
6569696969A9656AA965656554501110111011101125556AAABABBBAAAA56565
6566BBBABBBABBBABAB9A96969696AAABBBABBBFBFBFBFBFBFBEBFBEBFBFBFBF
BFBFBFFFBFBFBFBFBFFFBFFFBFFFBFFFFFF03FFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEEEE
AEEFEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFEEEEEFEF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFAA59
400000000000000000000000000004445555555956AA9AAAAAAAAAAAAAAAAA9A
5955555545454404044405555AAAAAAEAEEFEA9A95595AABEEEFEEAFEEEAAAAA
AAAAAAAAAAAEAFEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFF03FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBBBBBA9AABBBBBBBBBFBFFFFFFFF
FFFFFFFFFFFFFFFFFBFFFFFFFFFFFFFFFBFFFFFBBBBBBBBBBBBBBBFBFBFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFBBBBB665555566BBFFFBBBBFBBBFB
BBBBBBFFFBFBBBFFFBFFFFFBFBFBBBBBFBFFFBFBBBFFBBBFFBFBBBBBBBBBA656
664551566656669ABBBBBBBAAA5666566ABBBBBBBBBBBBBBBBBBBA9BBBBBFBFB
BBFBBBFFFFFFFBFFFBFFFBFBBBFBBBFBFBFFFFFFFFFFFFFFFFFFFFFFFFF03FFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFEEEA9555544555559559A999AAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAEEEEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFEAAAAA9AAAAAEEFFFFFFFFEFFFFFEFFFEFFFFFFFFFFFFFF
FEFFFFFFFFFFFFFFFFFEFFFFFFFFFFFFFFFFFFFFFFFFEEEEEAAAA9A999A9AAAA
AFFFFEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAEEBFFFEFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF03FFFFFBFBFBFBFBFFFBFFFFF
FFFFBFBFBFBFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFBFBFBFBFBFFFBFBA
A9555010101455656565656565656969696969AAAABABABABABABABABABBBFBF
BFBFBFBFBFBFBFBFBFBFFFBFBFBFFFFFFFBFBFBFFFFFFFBFBFBFFFBFBFBBBABA
6565696AAABBBBBFBFBABFBFBABBBABBBFBFBFBFBFBFBEBBBFBFBFBFBFBFBFBE
BBBFBFBFBFFFBFBFBFBFBFBBBABABAA965656565696AAABFBEBAAAAAA9A96969
6969696565656AAABABBBABBBBBFBFBFBFBFFFBFBFBFBFBFBFBFBFBFBFBFBFBF
BFBFFFBFBFBFFFFFFFF03FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFEA995000000000000000
0000000000000000000000000000000000054556AAAAAEAFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEAEAA555559555555454545
55555A9AAAAAAA9A59595955555955555555555959599AAAAAAAAAAEEFEFEFFF
FFFFFFFFFFFFFFEFEFAAAAAAAAAAAAAFEFFFEFEFEFEFEFEEAEAAAAAAAAAEAFEF
EFEFEFEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
3FFBFBFBFBFBFBFBFBFBFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFBFBFBAAA66511115155555551111151515155515151
111111111111101111115566BBBBBBFBBBBBBBBBFBBBFBFBBBBBBBBBBBBBFBFF
FFFBFBFBFFFFFFFFFFFBBBBBBA66510000000000000000000000011111111111
1111100111111111111111111111111115556666566666AABBBBBBBBBBBBBBBB
BBBBBBBAAAAAAAAABBBBBBBBBBBBFBFBBBBBBABBBBBBBBFBFBFBFBFBBBBBBBBB
FFFBFBBBBBBBBBFBFFFBFBBBFBFBFFFFFFFFFFFFFFF03FFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFEAA5555555555555555555555555555555555555544440000000000045
55A9AABFFFFFFEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FEFEAA5540000000000000000000000000000000000000000000004000004444
4444545455555555555599A9AAAAAAAEEEEEFFFFFFFFEEEAAAAAAAAAAAAAAAEE
EFFFFFFFFFFFEEEAAAAAAAEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFF03FFFFFFFFFFFBFFFBFFFBFFFBFFFFFFFBFFFFFFF
FFFFFFFFBFFFFFFFFFFFFFFFFFFFFFFFFFFFBFFFBFBFBFBABAA9696AABBABFFF
BFFFBFBFBFFFBFBFBFFFBFBFBFBEBBBEBBBABBBABAAAA9AAAABABBBABBBABBBF
BFBEBFBEBFBFBFFFBFBFBFFFBFFFBFFFBFFFBFFFFFBFBFFFBB69545011001110
1154656565696969A9AAAAAAAAAAABBABAAABBBABBBABBBAAABAAAAAA9A96569
65656565656565656AAABABABBBEBBBABBBABBBABBBABBBABBBABBBABABABBBE
BBBEBBBEBFBFBFBFBFBEBFBEBFBFBFBFBFBFBFBFBFBFBFBFBFFFFFFFBFFFBFFF
FFF03FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFEFEEAAAAAAABEFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFEFEFEEAEAAAAAAAAAAAEAEEFEFEFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFEFAA954400040445455555595AAAAAAAAAAA
AAAAAAAAAAEEAAAAAEAEAEAEAEAEAAAEAAAAAAAAAAAA9A9A9A99595A9A9AAAAA
AAAEAFFFFFEFEFFEAEEEAEAEAEAEAEAEAEAEAAAEAEEFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF03FFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFBBBBBAAAABBBBBBBFBFFFFFFFFFFFBFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FBFFFBFBBBBBBBBBBBBBBBBBBBBBBBBBBBFBFBFFFFFFFFFFFFFFFFFFFFFFFFFF
FBFBBBBBBB9AAABBBBBBBBBBFBFFBBFBBFFFFFFFBBFFBBFBFFFFFFFBFFFBBBFF
FBFFFFFFBBFFFFFFFFFBFBBBFBBBBBBBBBBBBA9A6656665666BBBBBBBBBBBBFF
FBFBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBFFFBFBFBFF
FFFFFFFFFFFFFFFFFFFFFFFFFFF03FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEAAAAAAAAABFEFF
FEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEEEAAEAEEFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFEEAAAAAAAAAAAAAAAAEAAEEEEEEEEEEEEEFFFEFF
FFFFFEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFF03FBFBFBFBFBFFFFFFFBFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFBFBABAA969AABBBABBBABFBFBFBFBFBFBFBFBF
BFBFBFBFBFBFBFBFBFBFBFBFBFBFBFFFFFBFFFFFFFFFFFBFBFBFBFBFBFBFBFBF
FFFFFFFFFFFFFFFFFFFFFFFFFFBBBABABABABABFBFFFBFBFFFBFFFBFFFFFFFBF
BBBFBFBFBFFFFFBBFFBFBFBFFFBFBFBFBBBFBFBFFFFFBFFFBFBFBFBFBFBFFFBF
BEBBBABAAAA969696AAAAABABABABABABABABABBBABBBBBBBABBBBBFBFBFBFBF
BFBBBBBBBFBFBFBFBFBFBFBFBFBFBFBFBFBFFFFFFFFFFFFFFFF03FFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFEFAAAA995955555999999A9AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAEAFEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFEEEAEAEAFFFFFFFEFEEEEEEEEEEAEAEEFEEAEEFAEAEAEAEEEAEAEEF
EEEEAEAEEEAEAFEFEEEFEFEFEFEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEEEEAA
AAAAAAAAAAAAAAAAAAAAAAAEAEEEEEAEAEAEAEAEEFEFEFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF03FFBFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBBBBBA6665666
6666666656666666A6A6AAAAAAAAAAAAAAAAAAAAAABABBBBBBBBBBBBFBFBFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBBBBBBBBBBBBB
FBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB
BBBBBBBBBBFBBBFBFFFBFFFFFFFFFFFBFBBBBBBBBBBBBBBABAAABABABABABABA
BBBBBBBBBBBBBBBBBBBBBBBBBBBBFFFBFBFBFFFFFFFBFFFBFFFBFFFBFFFBFFFF
FFFFFFFFFFF03FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEEEAAAAAA9A999999999A9A9A9AAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAEEEEFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEEEEFEEE
EFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFEEEEEEEEEEEEEEEEEEEEE
EEEEEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF03FFFBFFF
FFFFBFFFBFFFBFFFBFFFFFFFFFFFFFFFFFFFBFFFBFFFBFFFBFFFFFFFFFFFBFFF
BFFFBFFFFFFFBFBFBFBFBFBEBBBEBFBEBFBABBBEBFBEBBBEBBBEBBBEBBBABBBA
BBBABBBABBBABBBABBBABBBABBBABBBABBBEBFBFBFBFBFFFFFFFFFFFBFFFBFFF
FFFFFFFFBFFFBFBEBBBABBBABBBABBBABBBABBBABBBABBBABBBABBBABBBABBBA
BBBEBBBABBBABBBABBBABBBABBBABBBABBBABBBABBBABBBABBBABBBABBBABBBE
BBBABFBEBFBFBFBFBFBFBFBFBFBFBFFFBFBFBFFFBFFFBFBEBFBFBFBFBFFFBFBF
BFBFBFFFBFFFBFFFBFFFBFFFBFFFBFFFBFF03FFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFEFFFEFEFEFEFEFEFEFEF
EFEFEFFFEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFEE
EEAEAEAEAEEEAEEFEEEEAEEFEFEEAEEFEFEFEFEFEFEFEFFFEFEFEFEFEFEEAFEF
EEEFEFEFEFEFEFEFEEEFEEEFEEEFEFEFEFEFEFFFEFEFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFF03FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFFFBFFFFFFFFFFFFFFFBFF
FFFFFFFFBBFFFBFFFFFFFFBBFFFFFBFFFFFFFFFFBBFFFBFFFFFFFFFFFBFFFFFF
FFFBBFFFBBFBBBBBBBBBBBFBBBFBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBFBFBFF
FBFFFBFFFBFFFBFFFBFFFBFBFBFFFBFFFBFFFFFFFFFFFFFFFFFFFFFFFFF03FFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF03FFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFBFBFFFFFBFFFFFBFFFFFBFFFFFBFFFFFFFFFFFFFFFBFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFBFBFBFFFBFFFFFFFBFBFFFBFBFBFFFFFBFFFBFBFBFFFFFFFBF
BFBFBFBFBFFFFFFFFFBFFFBFFFBFBFFFBFFFFFFFFFBFBFBFBFBFBFBFBFBFBFBF
BFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFFFBFBFBFFFBFFFBF
FFFFFFFFFFFFFFFFFFF03FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBBFFFFFF
FFFFFFBBFFFBFFFFFFFFFFFFBBFFFFFFFFFFFFFFFFFFFFFFFFFBFFFFFFFFFFFF
FFFFFBFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000
grestore end

%%EndDocument
 GE /Times-Bold SF
14327 54367 MT
(Figure 3-1:)SH
/Times-Roman SF
20100 XM
(Waveform envelope and 0-4kHz spectrogram of the phrase "Steve Jobs".)SH
13 /Times-Bold AF
10800 58118 MT
(3.2. Spectrogram Reading and Feature-Based Recognition)SH
11 /Times-Roman AF
13300 61033 MT
(A spectrogram is a two-dimensional representation of)
174 W( the speech signal with time along the)175 W
10800 62772 MT
(horizontal axis, frequency along the vertical axis, and density)
11 W( denoting amplitude \050see Figure 3-1\051.  In)10 W
10800 64511 MT
(Cole)SH
/Times-Italic SF
13208 XM
(et al.)55 W
/Times-Roman SF
15738 XM
([27], researchers demonstrated that it is possible)
55 W( for an experienced person to identify the)56 W
10800 66250 MT
(phonetic segments in a spectrogram with a high)
44 W( degree of accuracy.  Spectrogram reading involves a)43 W
10800 67989 MT
(complex decision process based on knowledge)
116 W( of speech production.  It requires the detection of a)117 W
10800 69728 MT
(relatively small set of fundamental cues in the)
49 W( spectrogram and associated displays of the waveform,)48 W
10800 71467 MT
(zero crossings, or energy versus)
176 W( time.  A detailed example can be found in a paper by Zue)
177 W( [28].)SH
ES
%%Page: 55 56
BS
0 SI
10 /Times-Roman AF
54800 4286 MT
(55)SH
11 SS 
506 1000 0 11700 17724 GB 
%%BeginDocument: /usr0/rozzi/Documentation/PhDThesis/Chapter3/greasy.eps
%!PS-Adobe-2.0 EPSF-1.2
%%Creator:Icon
%%Title:greasy.eps
%%CreationDate:Fri Jan  2 06:41:35 1970
%%Origin:0 720
%%BoundingBox: 0.000 0.000 853.000 208.000
%%EndComments
%ImageData: 853 208 2 1 0 214 0 "beginimage"
20 dict begin
/rows 208 def
/cols 853 def
/str1 214 string def
/readit {currentfile exch readhexstring pop} def
/beginimage
{{str1 readit} image}
def
gsave
cols rows scale
cols rows 2
[cols 0 0 rows neg 0 rows]
beginimage
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0300000000333FFFFFFFFF
F3333333FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC0FFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5FFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0FFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFF0FCC0CCC000000CC0CCFFFFFFFFFFFFFCCCC0CC00CCC0
CFF3FFFFFCF0FCFFFFFFFFFFFFFFFFF0CCC0CCCFFFFFFFF0FFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5FFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFC0FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5FFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5FFFFFFFFF
FF3F33300000000F3FFFFFFFFFFFFFFF3F000000303F3FFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFF3F3F3F3FFFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFF5FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFC0FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFF5FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5FFFFFFFFFFFFFFFFFFFCCCCCFFFFF
FFFFFFFFFCCCCCC00CCFFFFFFFFFFFFFFFFFCCCCCFFFFFFFFFFFCCCCCCCCCCCF
FF5FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFF5FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC0FFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5FFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFF5FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
F3FFFFFFFFFFFFFFFFFFF3FFFFFFFFFF00000303FFFFFF5333FFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5FFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFC0FFFFFFFFFFFFCCCC0CCC3FFFFFFFFFFFFFFF
FCFFFFFFFFFF3FFFFFFFFFFFFFFFFFFFFFFFFF5FFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5FFFFF
FFFFFFFFFCFCCCFFFFFFFFFFFFFFFFFFFCFFFFFFFCCCCCCCCCFFFFFFFFFFFFFC
FCCCFFFFFFFFCCC000CCFFFCCC5CCCCFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFC0FFFFFFFFFFFFF3F3F3F3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFF5FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5FFFFFFFFFFFFFFFFF3F00333F
FFFFFFFFFFFFFF3F3F3F300000000003FFFFFFFFFF3030000000000000033C30
00000050000003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFF5FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC0FFFFFFFFFFFF
CCCCCCCCCCCFFFFFFFFFFFCCCCCFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5F
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFCCCFFFFFFFFFFFFF5FFFFFFFFFFFFFFFFCCCCCCCCCCCFFFFFFFFCFCCCCCCCC
C0C000000CCFCFFFFFFFCCCCC0C0000CCC00CCCCCCCC000000500000C3FFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCFCCCFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5FFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC0FFFFFF3333FFFFFF03000003FFFFFFFF
FF3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5FFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF35F
FFFFFFFFFFFFF3F00000000000FFF3F000000003FFF3F00000000003FFFFFFFF
333FFFFF33000000000FFFFFFFFFFF5FF3F003FFF3FFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFF003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5FFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFC00CCFFFCCCCCCFFFCCC000CCFFFFFFFFCCCFCFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFF5FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC
FCF0FFFCFCFFFFFFFFFFFFFFCCC0CCC0FFFFFFFFFF5FFFFFFFF0FCC0CCCFFFFF
FFF00C000000000000000000000000000000003FFFF0CCC00000000000000000
0000CCC0CF50FCF0CFF0FFF0CCFFCCC0CCFFFFF0CCC0CCC0CCF0FFFCFCFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFF5FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC03FFFFF00
0000000030F3000000000000003033FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FF5FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFF333F3C30FFFFFFFFFF5FFFFFFFFFFF3F303FFFFFFFF00000000000000000
0000000000000000003FFFFF3F00000000000000000000003030335FFFFF33FF
FFFF3FFFFF3033FFFFFFFF30303030FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5FFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC0CCCFFF0000000000CCCCCCCC00CC
C0000C0CCCCFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5FFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFCCCCCC000CCCCCCCCFFCCC000CCC000CCC0C0C0CC
FF5FFFFFCCC00000000000000FFCCC00000000CCC00000000CCC000000000000
0FFFFFCCCCCC00000000000003FF000000500000000000000000000CCCFFFFFF
FFCCC00000FFFFFFFFCFCFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5FFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFC00003FF3FFFFFFFFFFFFFC00000000333FFFFF333FFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFF5FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFF3F33003033303F3FFF3300000000333000003F3FF5FFFFFF33000000000
00003FF33300000000000000000003300000000000000FFFFFFFF30000000000
000003FF000000500000000000000000000333FFFFFFFF33300000FFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFF5FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC00003
C0FC3FCC0CCC000000000000000000000CCC3FFFF0000FFFFFFFFFFFFFFFFFFF
FFFFFF5FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCFFFFFFFCFFFFCCCCFFFFFCFFFF
00000000000CFFFFCCC00000005CCCCCC000000000000000000000FFFCFC0000
0000000000000000000000000000000000000000000000000000000000500000
00003FF00000000C0CCCCCCC000C0CCCCC0CCCCCFCCCCFFCCCCC0CCCFCFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
5FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC00FFFC0FFFF30303000000000
00000000000003F3FFFFF00003FFFFFFFFFFFFFFFFFFFFFFFF5FFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFF3F3030003FFFFFFFFFF00000000F3FFFFFFC000000
00003F5FFFFFFFFFFC00000000000000000000000000000000000000003FF030
0000000000000000000000000000000000000050000003FFFFF3330000000000
0000003F3FFFFFFFFFFC3033300000000000303F3F3FFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5FFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFC00000C00000000003FF00000000000000CCCCCFFFFFC0
0000003FFFFFFFFFFFFFFFFFFFFFFF5FFFFFFFFFFFFFFFFFFFFFCFCFFFFFFFFC
CCCCCCCCCCFFFFFFFFFFF00000000CCCFFFFFCCCC0000000CC5CCFFFFFFFFC00
000000000000000000000000000000000000003FFCCC00000000000000000000
00000000000000000050000000CFFFFCCC0000000000000000CCCFFFFFFFFCCC
CCCCC000000CC000CCCCCCCCFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFF5FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC0
0000000000000003FF00000000000000033FFFFFFFC00000003FFFFFFFFFFFFF
FFFFFFFFFF5FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF03000003FFFFFFFF3300
000000000000333FFFFFFFF00333005000000000000000000000000000000000
00FFF00000000000000000000000000000000000FFC000000000000000000050
000000000000000300000000000000000000000000000033FFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFF5FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC000000000000000000000
0000000000000000000000000000003FFFFFFFFFFFFFFFFFFFFFFF5FFFFFFFFF
FFFFFFFFFFF3FFFFFFFFFCF0CC000CC3FFFFFFFCCCC000000000CC00CCF0CFFF
FFF0CCC000500000000000000000000000000000000000F0C000000000000000
0CC00000000000000000FFC00000000000000000005000000000000000C0C000
0000000000000000000000000C00CFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5FFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFC00000000000000000000000000000000000000000
00000000303FFFFFFFFFFFFFFFFFFFFFFF5FFFFFFFFFFFFFFFFFFFFFFFFFFFFF
F000003F3FFFFFFFF00030000000000000000000000000000000005FFC000000
000000000000000000000000000000000000000000300FFC3000000000000000
00000000000003FF000000500000000000000000000000000000000000000000
0003FFFFFF3C00333F3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFF5FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFC0000000000000000000000000000000000000000000000000CFFFFFFFFFFF
FFFFFFFFFFFFFF5FFFFFFFFFFFFFFFFFFFFFFFFFFFCCCFFCCFFFFFFCCCCCCCCC
0000000000000000000000000000000000500000000000000000000000000000
00000000000000000000000CCFFFFFC000000000000000000000000000000000
0050000000000000000000000000000000000000000000000000000000000000
000CCCCCCCCCCCCCFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFF5FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC00000000000000000
0000000000000FFC00000000000000000FFFFFFFFFFFFFFFFFFFFFFFFF5FFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF3F3300000000000000000000000
0000000000000050000000000000000000000000000000000000000000000000
00000FFFFFC00000000000000000000000000000000000500000000000000000
00000000000000000000000000000000000000000000000003F3330003FFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5FFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFC000000000000000000000000000000FFC0000
0000000000000FFFFFFFFFFFFFFFFFFFFFFFFF5FFFFFFCFCCC00000000000000
000000000000000000000003FFC0000000000000000000000000000000500000
00000000000000000C0FFFCCC00000000000000000000000000000000000003F
F000000000000000000000000050000000000000000000000000000000000000
00000000000000000C000000000CCCFCCCCCCFFFFFFCCCCCCCCCCCFCFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5CFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFC00000000000000003FF000000000000000000000000000030FFFFFFFF
FFFFFFFFFFFFFFFFFF5FFFFFFFFFFF000000000000000000000000000000003F
F000000000000000000000000000000000000050000000000030000000000000
00000000000000000000000000000F3C00000000000000003000000000000000
0000005000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000FFFFFFFFF3C300000003F3FFFFFFFFFFF
FFFFF03000005F3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC0000000000000
000000000000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFF5F
FFFFFFFFFFCCC000000000000000000000000000003FF0000000000000000000
000000000000000000500000000000CCC0000000000000000000000000000000
000000000CCC0000000000000000CCC000000000000000000050000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000FFFFFFFFCCCCCC0CCCCCCFFFFFFFFFFFFFFCFCCCC00C05CCFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC000000000000000000000000000000000
0000000000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFF5FFFFFFFFFFFFFFFF00000
3FFC000000000000000000000000000000000000000000000000000000000050
0000000000000000000000000000000000000000000000000033FFFC00000000
0000000000000000000000000000005000000000000000000000000000000000
000000000000000000000000000000000000003FFC0000000000000000000000
000000000000000FFFFFC0000000000000005FFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFC000000000000000000000000000000000003FF00000000000003F
FFFFFFFFFFFFFFFFFFF0FF5FFFFFFFFFFFFFFFF00C003FFC0000000000000000
0000000000000000000000000000000000000000005000000000000000000000
00000000000000000000000000000000CCF00000000000000000000000000000
0000000000500000000000000000000000000000000000000000000000000000
0000000000000000003FFC00000000000CC00C0000000000000000000000FFF0
CC000000000000005FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC000000000
0000000000000000000000300000000000000000F3FFFFFFFFFFFFFFFFFFFFFF
FF5F3C00000000003FFFFF000000000000000000000000000000000000000000
0000000000000000000000500000000000000000000000000000000000000000
00000000000000000000000000000000000003FFFFF000000000005000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000300000000000000000005FFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC00000000000000000000000000000
0CCC0000000000000000CCFFFFFFFFFFFFFFFFFFFCCCC0500000000000000000
0000000000000000000000000000000000000000000000000000000000000000
005000000000000000000000000000CCC003FFCCC00000000000CCFFFCCFCFFF
F000000CCFFF0000000000000000000000500000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000CCFFFCCC000000000000000000500000CCCFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFC0000000000000000000000000000000000000000000000000
FFFFFFFFFFFFFFFFFFFFFFF30050000000000000000000000000000000000000
0000000000000000000000000000000000000000000000500000000000000000
0000000000330003FF00000000000003F3FFF003FFFFF00000030FFF00000000
0000000000000050000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000FFFFF3
030000000000000000005000003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC00000
000000000000000000000000000000000000000000003CFFFFFFFFFF0C000000
0000005000000000000000000000000000000000000000000000000000000000
0000000000000000000000000050000000000000000000000000000000000000
0003FF0000000000000000000000000000000000000000000000000000500000
00000000000000000000000000000000000000000000000000000FFF00000000
0000000000000000000000000000000000000000000000000000000000000000
5000003FFFFFFFFCFCFCFFFFFFFFFFFFFFFFFFC0000000000000000000003FFF
FF0000000000000000000000003FFFF330CC0000000000000050000000000000
0000000000000000000000000000000000000000000000000000000000000000
000000500000000000000000000000000000000000000003FF00000000000000
0000000000000000000000000000000000000050000000000000000000000000
000000000000000000000000000000000FFF0000000000000000000000000000
000000000000000000000000000000000000000000005000003FFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFC000000000000000000000000000000003FFCCC000003F
FFCFCCC000C00000000000000000005000CCCCC0000000000000000000000000
0000000000000000000000000000000000000000000000000050000000000000
00000000000000000000000000000000000000000000CCFFFCCCC0000FFFCCC0
0000000003FF0000005000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000005003FFCCCCCCCCC00000000CCFFFFFFFFFFFFFC0
00000000000000000000000000000003FFC30000003FFFFF0000000000000000
000000FFC0500000000FFFFFC000000000000000000000000000000000000000
0000000000000000000000000000005000000000000000000000000000000000
00000FFFFFFFFFFC0000000000000FFFFFC0000000000000000000000000035F
C000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000500000000FFFFFF3300000000303FFFFFFFFFFC000000000000000000000
00000000000000000000000000000000000000000000000003FFCC5000000CC0
CCFFCC0000000000000000000000000000000000000000000000000000000000
00000000005000000C0000000000000000000000000000000FFFFFFFFFFCCCC0
000000000CC0FFC00000000000000000000000000F5FCC000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000500000000CF3FFC0
C00000000CC0FFFFFFFFFFC00000000000000000000000000000000000000000
0000000000000000000000000000000000500000000000000000000000000000
0003FF0000000000000000000000000000000000000000000000005000000000
0000000000000000000030333F0000000000000000000FFFFFC0000000000000
00000000FFF00000000000500000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000500000000030333F3F3FFFFFFFFFFFFFFFFF
FFC00000000000000003FF00000000000CCFFFC0000CCCFFFCCC000000000000
0000000000CCC05000000000000000000000000000000003FF00000000000000
0000000000000000000000000000000000500000000000C00000000000000000
0CCCCC0000000000000000000FFFFFCCC0000000000000000000CCC000000000
00500CC000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000500000000CCCCCCCCCCCCCFFFFFFFFFFFFFFFFC0000000FFFFF000CC
C00000000000000000000FFFFFC0000000000000000000000000000000500000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000050000000000000000000000000000000000000000000FFF3FC
00000003FFFFF333000000000000000000000000033FFC500000000000000000
0000000000000000000000000000000000000000000000000000000000000000
03330000000000000000000000000000000000000000000000005000003FFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFC000FFFF33033FFFFFC33000000033C0000000
0FFC0CC0000000300000000003FF0C000000005CCFFFFFF00000000000000000
0000000000000000000000000000000000000000000000000000000000500000
00000000000000000CCFFFCCC0000000000000CCCCFCCCCCCCCFFFFFFFFFFCCC
CFFFFFFFFCCC0000000000000050000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000FC00000000005CCC00000000CCFFFFFFCCCCCCCCFCFF
FFFFFFC000000000000CFC00000000FCFFFCC0000000000000000FFFFFF00000
003FFFFF00000000005033FFFFF0000000000000000000000000000000000000
000000000000000000000000000000000000005000000000000000000000303F
FF3F000000000000003F3FFF3F003F3FFFFFFFFFFFF03FFFFFFFFF3F00000000
0000005000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000003
FF00000000005F3C000000033F3FFFFFFFFF3F3FFFFFFFFFFFC0000000000003
3300000000333F3F000000000000000CCFFFFFFFCC0000FFFCCCCCCFFFFFCC5C
CFFFFFFFFFCCC000000000000000000000000000000000000000000000000000
CCC0000000000000005000000CCFFCCCCCC00000000000CCCCCC00000CC3CCFF
FFFFFFCCC0000000000000000000CCCCCCCCCCCCCFFFCCC00050000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000050000000
0000000CCCCCFFFFFFFFFFFFFFFFFFC00000CC00000000000000000000000000
00000003333FFFFF003FFFFFFFFFFFFFF33FFFFFF35FFFFFFFFFFF3300000000
0000000000000000000000000000000000000000000033000000000000000050
00003FFFFC003330000000000003333000000003FFFFFFFFFFFFF00000000000
00000000030000000003FFFF3330005000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000500000000000000003F3FFFFFFFF
FFFFFFFFFFC00000003030300000000000FFFFFFFFFFFFCCCCFFFFFFFFFFCCFF
FFFFFFF0FFFFFFFFFFFFCC500000000000000000000000000000000000000000
00000000000000000000000000000000000000000050FFFFCCC0CFFFFFF0CC00
00000CF0FFFCFFF0FFFFFFFFFFFFFFC0C00000000FFFFFC000000C3FFFFFFFFF
FCC0000000500000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000005000003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC000000000
00000000000000FFFFFFFFFFFFF03FFFFFFFFFFFF3FFFFFFFFFFFFFFFFF03000
0050000000000000000000000000000000000000000000000000000000000000
00000000000000000000005000000000033F000000003F3FFF303033FFFFF000
000000000000000000000000333FF0300000000000000000000000503FFF3C00
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000005000
003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC00CCF3F0003000000000333333FFF
CCCC0000000000000000003FFFFFFFFFFFFFCFCCCC0000500000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00500000000000CCC00000000CCFCFCCCCCFFFCCCCCC000000C0000000000000
00C0CCCCCCCC00000000000CCC000000005CFFFCCC0000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000005000003FFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFC00003FF000000000000000CCFFFFFC3000000000000000000
003FFFFFFFFFFFFFF3F00000005FFFFFF3300000000000000000000000000000
0000000000000000000000000000000000000000000000500333000000000000
00000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00000000
00000000000FFF5FC33000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000500000333FFFFFFFFFFFFFFFFFFFFFFFFFFFFFC00000
00333FFFFFF3FFFFFFF3C3F3F0C000000FFFFFC00000003FFFFFFFFFFCFCFCFF
FCCCCC5CCCCCFCC0000000000000000000000000000000000000000000000000
000000000000000000000000005000000C0C0C00000000003FFFFFFCCCCCCC0C
0000000000000C0CCCFFFFFFFFFFFFFFFCFCCCCCCCCCCCC0000CCCCFFF5FFFF0
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
5000003FFCFFFFFFFFFFFFFFFFFFFFFFFFFFFFC0000000000000000000CFFFFF
FCCC0000303FF3300000000003FFFFFFFFFFFFFFFFFFFFFFC050033FFFF00000
0000000000000000000000000000000000000000000000000000000000000000
00000050000000000000000000003FFFFFFFFFFF3F0000000000000000303FFF
FFFFFFFFFFFFFFFF3F3FFF3F000000003F3FFF5FFFF000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000005000003FFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFC000000000000000003333FFFFF3330000CCCCCCCC0C00
003FFFFFFFFFFFFFFFFFFFFFFFFFCC5000C0CCC0000000000000000000000000
000000000000000000000000000000000000000000000000005CCFCFC000C000
000000CCCCCFFFFFFFFFFFFFFFFCCC00000000000FFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFC5CC0000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000005000003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC0
0003FFFFC0000000000000CCFFFFC003FFFFFFFFFFFFFFFFFFFFFFFF000CCF33
FFFFFFFFC05000003FF000000000000000000000000000000000000000000000
0000000000000000000000000000005003FFC00000000000000333FFFFFFFFFF
FFFFFFFF3300000000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF53
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00005000003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC00003FFFFF03000000003
33333333CCCCFCFFFFFFFFFFFFFFFFFFFFFC00000C0C03300000005000000000
0000000000000000000000000000000000000000000000000000000000000000
000000C0005000000CCFFFFFFCFFFFFFFCF0FCF3FCF0CCC0CCC0CC000C000CC0
CCF3FFFFFFFFFFFFFFFFFFFFFFFFFFF0FFFFFFFFFF5FCC000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000003FF0000000000000000000005000FCFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFC00003FFFFFFF0000000000000000033F3FFFFFFFF
FFFFFFFFFFFFFFFF0000000000000000005FFFFFC00000000000000000000000
0000000000000000000000000000000000000000000000000000005000000000
0000000033FFFFFF330000000000000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFF3330333FFFFFFF5FFFF0000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000005000003FFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFC000033333333000003333FF333FFFFFFFFFFFFFFFFFFFFFFFFFFFFFCC0000
000000000000005FFFFFC0000000000000000000000000000000000000000000
000000000000000000000000000000000050000000000000000CCCFFFFFCCCCC
C0000000000000FFFFFCCFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCCCCCCCCCCCCCF
FF5FFFF000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
000000005000000FCFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC0000000CCC0000000
0CCFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF33000000000000000000500000
0000000033300000000000000000000000000000000000000000000000000000
000000000000005003FFFFF0000000000000333FFFFFFFFC0000000000000000
00000333FFFFFFFFFFFFF3F3F3FFFFFFFFFFFFFFFFFFFF5FFFF0000000000000
0000000000000000000000FFF000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000005003FFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFC00003C3FFFFF000000000000000333FFFFFFF
FFFFFFFFFFFFFFFCFCCC000000000000000000500000000000000CC000000000
00000000000000000000000000000000000000000000000000000000005003FF
FFFC0C00000000CCCCCCCCFFFCFC0000000000000C0CCCCCCCCCCCFFFFFFFFFC
FCCCCCFCFCFCFCFFFFFFFFFFFF5FFCF000000000000000000000000000000000
00CCF00000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000005C0CCCFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFC00003FFFFFFF00000000000000000FFFFFFFFFFFFFFFFFFFFFFFFFFFF
00000000000000000050000000000000000FFF00000000000000000000000000
00000000000000000000FFC0000000000000005003FFFFFFFC00000000000000
0000000000000F3F3FFFFFFFFFF33FFFFFFFFFFFFFFF30303F3FFFFFFFFFFFFF
FFFFFF5FFFFF3C000000303F0000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000003FF000000000
0000000000005000003F3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFC00CCFFF3FF330
00033FFFFF3333333FFFFFFFFFFFFFFFFFFFFFFFFFFF00000000000000000050
00000000000000000000000000000000000000000000000000000000CCC00000
0000000000000000005000CCCCCCCC00000CCCFFCCCFFFFFCCCC000000C0CCC0
C000C0CCCCCCCCFFFFFFFFFFFCCCCCCCCCCCCCCCCCCCCFCFFF5FCCCFFFFFCCC0
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000FFC0000000000000005000CCFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC00003FF0CC00000000CCFFFFFFFFC3F3F
3F3FFFFFFFFFFFFFFFFFFFFFFFF3300000000000005000000000000000000000
0000000000000000000000000000000000000000000000000000000000000050
000033300000000333FFFFFFFFFFFFF0000000000000000000000003FFFFFFFF
FFFFFFFF3333F3FFFFF3F3FFFFFFFF5FFFFFFFFFF33000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
000000000000000000FFC0000000000000005000003FFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFC00C0FFF33000000003333FFFFF3F33CCCCCFCFFFFFFFFFCFFFEFF
FFFFFFFFFC000000000000500000000000000000000000000000000000000000
0000000000000000000000000000000000000000005000F0FFFFFC0000000000
00000CC0CCC00C00000000C0CFFFFFFFFCC0CCC0CCF0FFFFFFFFFFFFFFFFFFFF
FFFFFFFFFF5FFFF0CC000000000000000000000000000CC00000000000000000
000000000000000000000000000000000000000000000C000000000000000000
000000C0C00000005CC3FFFFFFFCFCF0CCF0FFFFFFFFFFFFFFFFFFC00003FFFF
C000000000C3FFFFFFFFF3F03033FFFFFFFFFFFFFFFFFFFFFFFFFC0000000000
0050000000000000000000000000000000000000000000000000000000000000
00000000000000000000005003FFFFFFFC000000000000000033333000000000
00303FFFFFFFFF3C30303FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5FFFFF3C00
0000000000000000000000000FFC000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000030300000005333
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC000000000000333FFF33333333F33
0CCCCCFFFFFFFFFFFCFFFFFFFFFFCCC0C00000000000005CC3FFC00000000000
000000C000000000000000000000000000000000000000000000000000000000
005CCFFFCFFCCC0000CFFFFFCCCCCCCCFFFCCCCCCFFFFFFFFFCFFFFFFFFFCFCC
CCCCCFFFFFFFFFFFFFFFFFFFFFFFFFFFFC5CCCC0000000000000000000000000
00000003FF000000000000000000000000000000CCC000000000000000000000
00000000000000003FF0000000000000000000005003FFFFFFFFCFFFFFFFFFFF
FFFFFFFFFFFFFFC000000000000FFFFFCCCCCCFFFFFFF333FFFFFFFFFFFFFFFF
FFFFFFFFFFF3300000FFFFFFC050000000000000000000000000000000000000
00000000000000000000000000000000000000000000005003FFC33000000003
33FFFFFFFF0300000000033333333333333333F3FFFFFFFFFFFFFFFFFFFFFFFF
33FFFFFF33300353030FFFF3333FF30000000000000000000000000000033300
0000000000000000000000000000000000000003300000000000000000000000
000033FC0000000000005000003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC00000
0000000000000333FFFFC3F03FFFFFFFFFFC3CCC0CFFFFFFFFFFFFFCCCC000FF
FFFFC0500000000000000CC00000000000000000000000000000000000000000
000000000000000000000000005C0FFFCCC00000000CCCFFFFFCFCCCCC0C0C0C
0CCCCCCCCCCCCCCCCCCFFFFFFFFFFFFFFFFFFFFCFCCCCCCCFCCCCCCCCC5CCCCC
CCCCCCCCCC000000000000000000000000000000CCC000000000000000000000
0000000000000000000CCC000000000000000000000000000CCC000000000000
5000CCFFFFFFFCFFFFFFFFFFFFFFFFFFFFFFFFC000000000000000003CFFFFFF
FFFC3FFFFFFFFFFFFFF0303FFFFFFFFFFFF33030FFFFFC300050000000000000
00000000000000000000000000000000000000000000003FF000000000000000
0000005003FFFFF00000000030FFFFFFFFFFFFFFFFFFFF3F3FFFFFFFFFF03003
3F3FFFFFFFFFFFFFFFF3300000000000303FFF5FFFFFFFFFFFF0000000000000
0000000000000000000000000000000000000030300000000000000000000000
00000000000000000000000000000003FF00000000005033FFFFFFFFFFFFFF3F
FFFFFFFFFFFFFFFFFFC000000000000000003FFFFF3333333FFFFFFFFFCCCCCC
CFFFFFFFFFFFFFFFFFFFCCC00000005000000000000000000000000000000000
00000000000000000000000000000000000000000000000000500000000000CC
FFFCCCCCCCCFCCCCCCCFFFCCCCCCCCCCCCCCCCCCCFCFFFFFFFFFFFFFFFFFCCC0
0000000000CCFFFFFF5FFFFCCC00000000000000000000000000000000000000
00000000000000000000000000000000000000CC000000000000000000000000
3FF0000000000000000000005CCFCFFFFFFFFFCCCCCCFFFFFFFFFFFFFFFFFFC0
0FFC000000000000000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
3330000000500000000000000000000000000000000000000000000000000000
000000000000000000000000000000500000000003FFFFF333333FFFFFFFFFFF
FFFFF33333F3F33333333FFFFFFFFFFFFFFFFFFF0000000000000000FFFFFF5F
FFF0000000000000000000000000000000000000000000000000000000000000
000000000000000003F30000000000000000000000003FF00000000000000000
00005333FFFFFFFFFFF333F3FFFFFFFFFFFFFFFFFFC00FFC0000000000000003
33FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCF0CCC00CC0CC5FFFFFFFF0
CC00000000000000000000000000000000000CC0000000000000000000000000
0000000000500000000000000000CCFFFFF0FC00000000C00CC3FFFFFFFFFFC0
CCC0CCFFFFFFFFFFFFFFFFC0CC00CCCFFFFFFCF0CC50C0000000000000000000
000000000000000000F0F0000000000000000000000000000000000000000000
000000000000000000000000000000000CC000000000000050000000CFFFFFF0
FCC0FCFFFFFFFFFFFFFFFFC000000000000000000000FCFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFF333000303F5FFFFFFFF030000000000000000000
0000000000000000003000000000000000000000000000000000005000000000
0000000F3FFFFFFFFF00000000000FFFFFFFFFFFFFFF3F3FFFFFFFFFFFFFFFFF
FFFF3000333FFFFFFFFF3C5000000000000000000000000000000000000000FF
F000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000005000003F3FFFFFFFFFFFFFFFFFFFFFFFFFFF
FFC00000000000000000000333FFFFFFCCCFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFCF5FCFFFFFFFFFFFFFFCC00000000000000000000000CCCCC000
000000000000000000000000000000000050000000000000000FFFFFCCCCCCCC
CCCCCCFFFFFFFFFFFFFFCFCCCCCCCCFFFFFFFFFFFFFFFFFFFCCCC0C00000000C
CF5FC0000000000000FFC00000000CCC00000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
000000005000CFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC00003FFFFFFFCCC00
0FCFFFFFFFFFC003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF500000
000000000000000000000000000000000FFC0000000000000000FFFFF0000000
000000000000005FFC0000000000000000003FFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF03300000000000500303333300000000
0000000000000000000000000000000000000000000000000000000000000000
000000000000000FFFF3000000FFC330000000000000000000005303FFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFC00003FFFFFFFFCFFFFFFFFFFFFFFFCFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCC50000000000000000000000000
0000000000CCCCFC0000000000000000CCFCF000000C0C0000000000005FFC00
00000000000000CCFFFFFFFFFFFFFFFFFFFFFFFFFFFCCCCCCCFFFFFFFFFFFFFF
FFFFFFFFFFFFCCC000000000005C0CCCCCCCC000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000FFCCC
CCCCCCCCCCC0000000000000000000005CCFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFC00003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFF05000000000000000000000000000000003FF3FF0000000
000000000FFFFFFFF000000000000000000000500000000000000000003F3FFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC0000000000
00000050333FFC0000000000000000000000000000000000000000000000003F
F0000000000000333000000000003F3F3C000000000000000000000000000000
0000000000005F3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC0000333333333
33333333FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCCCCC50
C0000000000000000000000000000000CCCCC0000000000000000FFFFFFFF000
00000000000000000050000000000000000000CCFFFFFFFFFFFFFFFFFFFFFFCC
CCCFFFFFFFFFFFFFFFFFFFFFFFFFFFCFCC0000000000000000500CCFFC000000
00000000C0000000000000000000000000000000003FF00000000000000CCC00
00000000CCCCCC000000000000000000000000000CCC0000000000005CCFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC00000CCFFFFFCCCCCFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5FFFFFFFF3330000000000
0000000000000000000000333FFFFFFFFFFFFFC0000000000000000000000050
03FFFFFFFF330003F3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFC0000030333F3FFFF5FFFF00000000000000000000000000000
000000000000000000000000000000000000000003FF00000000000000000000
000000000000000000003FFFFF00000000005FFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFC000000000000000003333FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFF5FFFFFFFFFFFFFFFF0CC0000000000000000000000
CCFFFCC000000000000000000000000000000000005003FFFFFFFFF3FFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF3FFFFFFFF
FFFFFFFFFF5FFCF0000000000000000000000000000000000000000000000000
0000000000000C000000000000000000000000003FFFFCC0CCC0CCC0CCC00000
00000000000000005FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC000000000
00C0C0FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FF5FFFFFFFFFFFFFFFFF3300000000000000000000033F3FF030000000000000
00000000000000000000005003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5FFFF00000
0000000000000000000000000000000000000000000000000000000000000000
000000000000000000003FFFFF3F333030303F30000000000000000000005FFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC000000033333333333FFFFFFFFFFF
CFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5CCC000000000000C0
000000000000000000FFFCCC000000000000000000000000FFC0000000000000
005000CCCCCCCCCCCCCCCCFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5FC00000000CC00000000000000000
0000000000000000000000000000000000000000FFC00000000000CCCCC00000
00000000000000CCCCCCCCFFFFFC0000000000CC5FFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFC00FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFF500000000000019998000000000000000000FF
FFFC000000000000000000000000FFC0000000000000005003333FFFFF33333F
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFF5FC00000000000000000000000000000000000000000000000
00000000000000000000FFC0000000000333F3F00000000000000000000033F3
33FFFFFC0000000000005FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC000FF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFCC5000000002666666666664000000000000FCCCC0000000000000000CCC
CCFFFCCC0C0000CCFFF000000050000000000000000CCCFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCFCFFFFFFFFFC5CC000
000000000000000000CCC000000000000000000000000000003FF00000000000
000C0CCC0000000CFFFFFC0C0000000C0CCC0C00000000000CCCCCCCC00000CC
5FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC00FFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5FFFFF99999998
0001999999933FFFFFFC0000000000000FFFFFFFF03000000000000003FFFFF0
000000500000000030303FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFF3FFFFFFF5FFFF000000000000000000000
00000000000000000033FFC0000000000000000000000000000000000000303F
3FFFFFFFFFFFFFFFFFFFFFF0300030333F33300030FF5FFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFC00FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5FFF666664CCCCC000000266666CFFFF30
000000000000CCCFFFFFFCCCC0000000000000FFCCC00000005000000CCCCCCC
CCCFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFCCCCCCFFFFFF5FCFC00000000000000000000000000000000000000CCF
FFC0000000000000000000000000000000000000CCCCCCCCFFFFFFFFFFFFFFFF
FFFCCCC0CCCCCCCCCCCCCCCC5FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC0
0FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFF5FD999FFFFFFFFFFFFFFFFFFF99980000000000003333FFFFF3300
0000000000000000000000000000005FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5F
FFF0000000000000000000000000000000000000000000000000000000000003
000000000000000003FFFFFFFFFFFFFFFF33030333FFFFFFFFFFFFFFFF030303
FFFF5FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC0000333FFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5666FFFFFF
FFFFFFFFFFF0FCF006660000000000000030CC00000000000000000000000000
000000000050FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0CCF0FFFFFF5FCCC00000000000000000
00000000000000000000000000000000000000000C00CCC00000000000000FFF
FFF0FCC0CCF0FCC0CCC0CCF0FCFFFFFFFFFCCCC0CCC0CCF35FFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFC00F3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFD99B000000000000000000000000019
9800000000000000000000000000000000000000000000000000005FFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFF3FFFFF5FFFF0000000000000000000000000003F30300000
000000000FFFFFFFF33F00000030FFF0300000000330FFFFFFFFFFF0333F3330
3330303FFFFFFFFFFFFFFFFFFFFF5FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFC00CCFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFF66CCC0000000000000000000000000066000000000000000000
0000000000000003C00000CC00000000005FFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFCCCFCFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCCCC
CC5CCCC0000000000000000FFF0000000000000000CCCCCC0000000000000000
00000000CCFFFFFFCCC000CCCCCCCFFFFFFFFFFFFFFFFFFFCFCCCCCCCCCCCCCC
CCCCCFFF5FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC00FFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF9B530000
000000000000000000000000019000000000000000000000000000000000C000
003300000000005FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5FC330000000000000
000FFF0000000000000000FFF000000000000000000000000000003FFFFF0300
0000030FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF3F3FFFF5FFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFC000FFC3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF66F5FFFFFCCC00000000000000000
00000066000000000000000000000000000000000000000000000000005000CC
FFFFFFFFFFFFFFFFFFFFFFFFFFFCFCCCFCCCCCFCFCFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFCFF5FCCC000000000000000000000000000000000
000000000000000000000000CCFFFCCC0C0C0C0CCCCCCFFFFFFCFCFCFFFFFFFF
FFFFFFFFFFFFFFFFFFFCFCCCCCCCCCFF5FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFC00FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFF99FF5FFFFFFFFFFFFFFFF00000000000000009900000000000
000000000000000000000000000000000000005F3FFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
3F3F3F5FFFFFFC00000000FFC00000000000000000000000000000000003FFC0
000000000030FFFFFF3F303FFFFFFFFFFFFFFFFF3FFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFF5FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC0000333FFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE6FFF5F
FFFFFFFFFFFFFFFC000000000000000064000000000000000000000000000000
0000000000000000005CCFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCCCCCCCCF5FFFFFFC000000
00FFCCC0000000C0000000000000000000000003FFC0000000000CCCFFFFFCCC
CCCFCFFFFFFFFFFFCCCCCCCFCCCCCCCCFFFFCFFFFFFFFFFFFFFFFFFF5FFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC00003FFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFD9FFFF53FC003330330000000000
0000000000000980000000000300333FF000000000000000000000000000005F
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFF33300000333FFF5FFFFFFFFFF330000000000000000000FF
FFFC0000000000000000003FF33300000000333FFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5FFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFC00003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFF67FFFF40000000000C000000000000000000000002600000
0003FFFFFFFFFCC00000000000000000000000000050FFF0FFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCCC0
0C00CCCFFF5FFFFFFFFFCCC0000000000000000000F3FFFC0C00000000000000
0C3FFCC000000000CCF0FFFFFFF0CCF0FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFF5FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC00003FFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDBFFF
FF50000000000000000000000000000000000018000000003030000000000000
00000000000000000000005FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF3030FFFFFF5FFFFFFFFF
C00000000000000000000000000000000033FFC0000000000000003F33303030
333F303333FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5FFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC000C3FFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF6FFFFFF5C0000000000000000
00000000000000000006000C00000000CCFFFFFFFFFFFFFFCCC00000000FFCCC
005003CCFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5FFFFFFCC000000000000000000000
0000000000000000000000C0CCC00000CCFFFFFFFFCCCC00C0CCCFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5FFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFC000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFDBFFFFFF5FFC0000000000000000000000000000000031
B3F00000000333FFFFFFFFFFFFFFF3C00000000FFC00005003FFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFF5FFFFFFC000000000000000000000000000000000000000000
000303000000003FFFFFFFFFF000000FF3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFF5FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC000CF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF6F
FFFFFF5FFFC000003FCCC000000000000000000000006000CCCCCFFFFFFFFFFF
FF3330000000000000000000005003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5FFFFC
CC00000CCCFCC00000000000000000000000000000000000000C0C0C00000CCC
CCCCCCCCCCCCCCCCCCCCFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCFCFCFCFCFFFFFF
5FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC00003FFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDBFFFFFFF5FFFFFFD57FF33
0000000000000033300000001800303FFFFFFFFFFFFF00000000000000000000
0000005003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5FFFF33000000F3FFFC0000000
000000000000000000000000000000000000000000003F3F3C303033333FFF3F
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5FFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFC00003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFF6FFFFFFFF5FFCCCCCC5000000000000000000000000
00C0C6CFFFFFFFFFFFC000000000000000000000000000000050C3FFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFF5FCFCCCFCFFFCCCCC0C00CCC0000000000000000000CCC
00000000000CCFFFCCC00000000CCFFFFFFFFFFFFFFFFFFFFFFFFCCCCCCFCFFF
FFFFFFFFFFFFFFCCCCCCCCFF5FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC0
000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
DBFFFFFFFF5000000000000000000000000000000FFFFFFFF1B3030000000000
00000000000000000000000000000050FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5F
FFFFFFFFFFF0000000000000000000000003FFFFF00000000000000003F3FFF3
300000000000000333F3FFFFFFFFFFFFFFFFF3300000330FFFFFFFFFFFFFF333
33FF5FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC00003FFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF6FFFFFFFFF500C000000
000000000000000000000CF3FFFFFC60CC000000000000000000000000000000
000000000050CFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0FF5FFFFFFFFFFFF000000000
0000000000000000CCFFFCC00000000000000CC0FFC0C00000000000CCC0CCC0
CCFFFFFFFFFFFCF0CCC0CCC0CCC0FCFFFFFFFFF0FCC0CCF05FFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFC00003FFFFFFFFFFFFFFFFF3333FFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFF9FFFFFFFFF50300000000000000000000000003F
3FFFFFFFF0900000000000000000000000000000000000000000005003FFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFF3F5F3FF0300000000000000000000000000000000000
000000000FFFFFF03000000000000000000000000000000333FF3F3FFFFFFFFF
FF3F3FFFFFFFFFFFFFFFFFFFFFFF5FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFC00003FFFCCFFFFFFCCCC00CCC0FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFE7FFFFFFFCC5CCC000000000000000000000000CCCFFFFFFFCC2400000000
00000000000000000000000000000000005003FFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCFCC
CC5CCFCCCC0000000000000000000000000000000000000000000FFFFFCCC000
0000000000C0000000000000000000000000CFFFFFFCCFCCFFFFFFFFFFFFFFCC
CFFFFFFF5FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC00FFFF3333333F333
333333333FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDBFFFFFFFFF5FFFFF
FFF33304000000003FFFFFFFFFFFF30000180000000000000000000000000000
000000000000005000003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5FFFFFFC00000000FF
FFFFFF00000000FFFFFC00000000000000000000000000000000000000000000
00000000000000003033000000003FFFFFFFFFFFFFFFF33333FF5FFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFC00FFCC00000000000C0FFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFF6FFFFFFFFCC50000000000000000000003FFF
FFCCCC0C00000006000000000000000000000000000000000000000C005003FF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFF5FFFFCCCCCFCFFFFFFCCC00000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000CCFFFFFCCC005CCFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFC00000000000000333FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFF9FFFFFFFFFF50000000000000000000003FFFFFFFF000000000090000
000000000000000000000000000000000000005003FFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFF5FFFFFFF3F3FFFFFFFF030000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
30FFFFFC3000500FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC0000000000000
0003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE7FFFFFFFFCC50
0000000000000000000000000000000000000002400000000000000000000000
0000000000000000005000000CCCCCCCFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCFFFFFFFFFFFFFFF5FFFFFFCCCCCCC
CCCCFFF000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000005CCFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC000033003333FFFFFF3C333030FFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDBFFFFFFF3C05003330000000000000000
000000000003000000018000000000000000000000000000000000000000005F
FFFFF33003333FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5FFFF33000000FFFFFC000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000005FFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFC0000CC000CCFFFFFFFFFCF0C00FFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFF6FFFFFFCC0C05000C0C00000000000000000000000000000000000
60000000000000000000000000000000000000000050CFFFCCC0CCC0FFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFD7FFF0CC000000CCF0C00000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000005FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC0000FF333
0300000000333FFF0FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF9FFFFFFFFF
C0500000000000000000003F000000000000000000009000000000000000FFFF
FFFFFFFFFFFF30300000005003FFFFFFFF3F333FFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFD7FFF03000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000053FF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC0000FFFFC0CC00000000000000FFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF6FFFFFFFFFCC500000000000000000
00CCC00000000000000000006000000000000000FFFFFFFFCFFFFFFFCCC00000
005003CCFFFFFCCCCCCCCFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFD7FFFCCC0000000000000000000000
0000000000000000000000000000000000000000000000000000000CCCC00000
000000000000000000000000000000000000000053FFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFC0000FFFFF33000000000000303FFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFF9FFFFFFF330050000000000000000000000000000000000000
00009000000000000FFFFFFFFFFFFFFFFFFFFFFFFF00005003FFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFD7FFFFFFFFFFF0000000000000000000000000000000000000
0000000000000000000000000000000003FFFFF0000000000000000000000000
000000000000000000005FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC0000F
F0000000000000000000CFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF6FFFFF
FFFFC0500000000000000000000000000000000000000000600CCCFCCCC00000
0C3FFFFFCCCC0C0000000000CC5FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCD4CCC0
00000000000000000000000000000000000000000C0000000000000000000CCC
FFFFFFFFCCCCCCCCFFFC0C0FC3C300C0CC30CCFC000000000000000000000000
53FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC0000F30000000000000000000
3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF9FFFFFFFFF0050000000000000
000000000000000000000000000090003FFC30000000003FFFFF3F0000000000
00003F5FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF17F03000000000000000000000
00000000000000000000000000000000000000000F3FFFFFFFFFFFF333FFFFFF
FFFFFFFFFFFFFFFFFFFF0C0F3C0000000000000000005FFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFC0000FF000000C0CCFCFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFE7FCCC0C000005000000000000000000000000000000000
00000FFFE7FFFFFFFFCCC000000CCCCCCCC0C000000000C0FF5FFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFCD4C000000000000000000000000000CCFFFFFFFFCCC000
CCFFFFFFFFFFFFCFCCC00CCCCFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCFCFFFFF
FFFFFFFFCF0C0000000000005FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC0
0FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDBF
FFF0000000500000000000000000000000000000000000000FFFDBFFFFFFFFC3
0000000000000000000000000000FF5FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF17
000000000000000000000000000303FFFFFFFF000003333FFFFFFFFFFFFF0000
0000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF3F0C000
00005FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC000FFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC600C000000005000000000
000000000000000000000FFCCCFFFFFC6CC0CCC0CCC0CCF0FFFFFFFFFFFFFFFF
FFFFFCF0FF5FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0FFD7FFF00000000000000CC0
FF000000FCFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCF0CCF0FFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5FFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFC00FFFFFFFFFFFFFFFFFFFFFFF0FFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFF9FFFC000000050000000000000000000000003FFFF
F03000000000903F3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5FFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFF17000000000000000000000000000030FFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFF5FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFC00FFFFFFFFFFFFFFFFFFFFFFF0FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FF6CC00000000050000000000000000000000003FFFFFCCC000000006CCCCCCF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5FFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC
CCD4C0C00000000000000CC000000000CCCCCFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFF5FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC00FFFFFFFF3F3FFFF
FFFFF3F30FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC0900000000000500000
000000000000000000000000000000000FFF9FFFFFFFFFFFFFFFFFFFFFFF333F
FFFFFFFFFFFFFF5FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFD7FFFFFFF3F3FFFFFF
FFFFFFFFFFFFFF33330003000003333FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5FFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFC0000FFFFFFFFFFCFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFC060000000000050000000000000000000000000
0000000000000CCF6FFFFFFFFFFFFFFFFFFFFCCCCCCCCFFFFFFFFFFFFF5FFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFD7FFFFFCCCCCCFFFFFFFFFFFFFFFFCCCCCCCCC
CCCCCC0CCCFCFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFC00F3FFFFFFF333333FFFFFFFF3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFC09000000000005000000000000000000000000000000F3FFFFFFFFF9FFF
FFFFFFF030000000000000000000000F3FFFFF5FFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFD7FFFFFFFFF33F3FFFFFFFFFFFFFFFFFFFFFFFFFFFFF3C303F3FFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFF5FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC00CCFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCCC00024000000000050
00000000000000000000000000CCCFFFFFFFFFFE7FFFFFCCCCC00000C00CCCCC
CCCCCCCCCCCCCFCFFF5FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFD7FFFFCCCCCCCC
CCFFFFFFFFCFCCCCCCFFFFFFFFFFFFFFFFCFCCCCCCCCCFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5FFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC00FFF3FFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFF000180000000000500000000000000000003F
000000FFFFFFFFFFFFFDBFFFFFFF0300000000030333000003F3333FFFFFFF5F
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFD7FFFFFF330003F3FFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5FFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFC000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF3FFF
FFFFCC000006000000000050000000000000000FFFFFFFFFFFFFFFF0CCC0CCC6
0C00CCC0FCFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5FFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFD7FFF0FCC0CCC0CCFFFFFFFFFFFFF0CCF0FFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFF5FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC00FFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00003FFFFF3000000900003C00
0050000000000000000FFFFFFFFFFFFFFFFF3F303039003F3F3FFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFF5FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFD7FFFFFF3F
333F3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5FFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC000033FFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFC0000000000000000024000FC0000500000000000000000
00F03FFFFFFFFFFCCCCCCCE4CCFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FF5FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFD7FFFFFFFFFFFFFFCCCFCFFFFFFFFF
FFFFFFFFCFCCCCCFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5FFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFC0000CCCCFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC0000
0000000000000001800000000050000000000000000000000FFFFFFFFFFFFFFF
FFDBFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5FFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFD7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFF5FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC0000F
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCFC000000000000000000006000
00000050000000000000000000000CCFFFFFFCFCFCFFFF6FFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFF5FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFD7FFFF
FFFFFFFFFFFFFCFCFCFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
5FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC0000CCCCFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFC00000000000000000000900000000050033F00000000
0000000FCF3FFFFFFFFFFFFFFF9FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFF5FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFD7FFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5FFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFC000C03FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC
0000000000000000000024CCCC0000500000000CCCFFFFFFFFFFFFFFFFFFFFFF
FFFFFE7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5FFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFD7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFF5FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC0
00FC0CCC0CFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000
39F3F00000500000000000FFFFFFFFFFFFFFFFFFFFFFFFFFF9FFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFD7
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFF5FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC000C3C30303FFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFCC0000000000000CFFFE7F3C00005000000000
00FFFFFFFFFFFFFFFFF0FCF0CCF0E7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFF5FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFD7FFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5FFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFC0000FFCFCCCFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFF0000000000003FFFFF9C000000500000000000FFFFFFFFFFFFFFFFFF
FFFF3FFF9FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5FFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFD7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFF5FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFC0000F3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCC000000CCCCF
FFFFCCE4000000500000000000CCFFFFFFFFFFFFFFFFFFFFFFFE7FFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5FFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFD7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFF5FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC0000CFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0333FFFFFFFFFF000009000000500000
000000003FFFFFFFFFFFFFFFFFFFFFF9FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFF5FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFD7FFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5FFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFC0000033F3FFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFCCCFFFFFFFFFFCCC000240000050000000000CCCFCFFFFFFFFFF
FFFFFFFFFFE7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5FFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFD7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFC0000CFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFF30309800005000000000FFFFFFFFFFFFFFFFFFFFFFFFFD9FFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5FFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFD7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFF5FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC0000FFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCFC00026000050
00000000FFFFFFFFFFFFFFFFFFFFFFFFF67FFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFF5FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFD7FFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5FFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC00FFC0CCFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC0000190005000000003FFFFFFFFFFFF
FFFFFFFFFFFF9BFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5F
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFD7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5FFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFC000C3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFCC00000066005000000000FFFFFFFFFFFFFFFFFFF0FFF66FFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5FFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFD7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFF5FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC0000FFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000000009
905000003F3FFFFFFFFFFFFFFFFFFFFFFF99FFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFF5FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFD7FFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5FFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC0000FFFFF333FFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCC0000000006450000000CCCCCCCCCC
CFFFFFFFFFFFFE6FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FF5FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFD7FFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5FFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFC0000000FC0003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFF000000000009900000000303FFFFFFFFFFFFFFFFFF99FFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5FFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFD7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFF5FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC00000
00F00003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCC00000
000002667FFFFFFFFFFFFFFFFFFFFFFFFFE667FFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFCFFFFFFFFFFFFFFFF5FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFD7FFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
5FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC0000000C0000FFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF3000000000000005999FFFFFFFFFF
FFFFFFFFFFFFF999FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFF5FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFD7FFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5FFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFC0000000C00003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFC0000000000000000005FE666FFFFFFFFFFFFFFFFFFF6667FFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5FFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFD7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFF5FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC0
00033FC00003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC00000000
000000003F5FFF99999BFFFFFFFFFFFD99999FFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFD7
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFF5FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC00000FFF00003FFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00000000000000000FF5FFFFF6666
6667FFFE6666666FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFF5FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFD7FFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5FFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFC0000000F0000CFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFF300000000000000000335FFFFFFFFD99999999999BFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5FFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFD7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFF5FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFC0000000CFFCC00FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000000
0000000000FFFF5FFFFFFFFFFFFE6667FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5FFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFD7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFF5FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC0000000FFFCC00FF3
3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00000000000000003FFFF5FFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFF5FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFD7FFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5FFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFC0000000FFFC0000000FFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFCCCCC0000000000000FFFFFFFFF5FFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5FFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFD7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFC0000FFFFFFC0000C00FFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000
000000003FFFFFFFFF5FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5FFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFD7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFF5FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC0000CFFFFF000
00000FFFFFFFFFFFFFFFFFFFFFFFFFFCCCC000000000000000003FFFFFFFFF5F
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFF5FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFD7FFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5FFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC0000FFFFFFCCFF3FF3FFFFFFFFFFFFFFF
FFFFFFFFFFF0000000000000000000003FFFFFFFFF5FFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5F
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFD7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5FFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFC0000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000
0000000000C0FFFFFFFFFF5FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5FFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFD7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFF5FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC0000FFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5000000000000000000003FFFFFFFFFF
FF5FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFF5FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFD7FFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5FFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC0000FFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFF0000000000000000000C0FFFFFFFFFFFFF5FFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FF5FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFD7FFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5FFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFC0000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00000000
000000003FFFFFFFFFFFFFFFFF5FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5FFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFD7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFF5FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC0000F
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000CFFFFFFFFFFFF
FFFFFF5FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFF5FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFD7FFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
5FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC00003FFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFF00000000000003FFFFFFFFFFFFFFFFFFFF5FFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFF5FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFD7FFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5FFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFC00003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5FFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFD7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFF5FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC0
0003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFF5FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFD7
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFF5FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC0000FFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5FFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFF5FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFD7FFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5FFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFC00003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5FFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5FFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFD7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFF5FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFC00003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFF5FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5FFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFD7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFF5FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC00003FFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5FFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFF5FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFD7FFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5FFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFC00003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5FFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5FFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFD7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFC00003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFF5FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5FFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFD7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFF5FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC00003FFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5F
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFF5FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFD7FFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5FFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC00003FFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5FFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5F
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFD7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5FFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFC00003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFF5FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5FFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFD7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFF5FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC0000FFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FF5FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFF5FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFD7FFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5FFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC0000FFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5FFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FF5FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFD7FFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5FFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFC0000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFF5FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5FFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFD7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFF5FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC0003F
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFF5FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFCFCFCFFFFF5FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFD7FFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
5FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC0003FFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5FFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFF5FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFD7FFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5FFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFC0003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFCCCCCFCFFFFFFFFFFFFFFFFFCFCCFFF5FFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFD7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFF5FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC0
00FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFF5FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFD7
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFF5FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC000FFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5FFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC3CCC3FFFF
FFFFFFFFFF5FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFD7FFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5FFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFC003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5FFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5FFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFD7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFF5FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFC0FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFF5FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5FFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFD7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF3F3F3FFFF
FFFFFFFF5FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC0FFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5FFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCCC3F
FFFFFFFFFFFFFF5FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFD7FFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5FFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFC0FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5FFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5FFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFD7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF33333F
3FFFFFFFFFFFFFFFFF3F333FFFFFFFFF5FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFC0FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFF5FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFCFFFFFFFFFFFFFFFFCCCCCCFCFFFFFFFFFFF5FFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFD7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFCFCCCFCF5FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC0FFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5F
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF3F030F3FFFFFFFFFFFF
FFFFFFFFFFFFFFFFFF5FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFD7FFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F330FFFFFFFFFFFFF33033303350FFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC0FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFC3330333C3FFFFFFFFFFF5FFFFFFFFF3FFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFCFCCCC0CCCFFFFFFFCCCCFFFFFFFFFFFFFFFF5F
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFD7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFCFC000CCF5FFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFC0FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFF5FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFF33300003FFFFF3333FFFFFFFFFFFFFFFFFF5FFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFD7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFF333333333F3FFFFFFFFFFFFFFFF333333F3F
FFFFFFF3333333335FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC0FFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FF5FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
CCCCCC000000000CC03FFF5FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFD7FFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFCFC0C3CFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCFCCFFFF5FFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC0FFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCCCF5FFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC300000000000003F
FF5FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFD7FFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF3F3
330333333333333333FFFFFFFFFFFFFFFF3333335FFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFC0FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFF33333353FFFFFFFFFFFFFFFFFFFFFC3CCC3CFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFCFC000003FC0CC03FFF5FFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFD7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCCCC00000C000CCCCFFFFF
FFFFFFFFFFFFFFFCFCFF5FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC0FFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC0C00000000
00000050000003CFFFFFFFFFFFFFFFFFFC00000003FFFFFFFFFFFFF333000003
FFFFFFFF030000000000003FFF5FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFD7FFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF3333300000000033000000000000
50303333FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC0FFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFF333000003003333333335333333333FFFF
FFFFFFFFFFFFCCCCC00CCFCFFFFFFFFFFFFCCC000CCFFFFFFFFCCC0000000000
003FFF5FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFD7FFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFF0C0000000000000000000000050000FCFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFC0FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFF333333F33300000000000CCC00050FCCCCFFFFFFF333FFFFFFFFFFFF3C000
00000000000000000000000000000000000000000000003FFF5FFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFD7FFFFF3F3FFFFFFFF03003FFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFF0F330F3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF3
F000000FF03300000000000050FFFFFF33FFFFFFFFFFFFFFFFFFFFFFFFFFFFC0
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000000
03FFFFFFFF5FFFFFFFFFFCCCCCCCCFFFFFFFFCCCC0000000000000000000C000
0000000000000000000000000000CC5FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFD7
FFFFCCCCCCCCCCCFFF003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFF00000000FFFFFFFFFFFFFCCCC00000FFFFFFFFC0C000000000000000000
000050000CCFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC0FFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF33333F3FFFFFFFFFFFF5FFFFFFFFF
FFFF000000000000000000000000000000000000000000000000000000000000
0000000000503FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFD7FF33000000FFFFFC0000
3FFFFFFFFFFFFF3F3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF333300333F3FFFFF
FFFFFFF33000333FFFFFFFF330000000000000000000000050003333F3FFFFFF
FFFFFFFFFFFFFFFFFFFFFFC0FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFCFCFFFFFFFFFFFFFC50000000000CC00000000000000000
0000000000000000000000000000000000000000000000000000005003FFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFD7FF0CC000000CCF0C00000003CF030FFFFFFFFFFF
FFFFFFFFFFFFFFFCCCFFFFFFFFFFFFCF00000000000000000000000000000000
000000000000000000000000000050C0FFCFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFC0FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF333
3333333300000050000000000000000000000000000000000000000000000000
00000000000000000000000000000000005003FFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFD7FF0300000000000000000000000003F330C330300C3C3F0303FFF3333333
3FFFFFFFF3330000000000000000000300000000000000000000000000000000
0000000050333333FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC0FFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCCC000003FFFFF000000500000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000500FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFD7FFCCC00000000000
0000000000000000000000000000000000FFFFFC000000000000000000000000
0000000000000000000000000000000000000000000000FFFFFF5FFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFC0FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFC33000000333C300000050000000000000000000000000
00000000000000000000000000000000000000000000000000000000005003FF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFD7FFFFFFFFFF00000000000000000000000000
0000000000000033330000000000000000000000000000000000000000000000
0000000000000000000000000000000353FFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFC0FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC0
C000000000000000005000000000000000000000000000000000000000000000
0000000000000000000000000000000030C0005003FFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFCCD4CC000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000050FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC0FFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF330000000000000000050
0000000000000000000000000000000000000000000000000000000000000000
0000000000303000005003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF3D7030000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000030F33000000350FFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC0FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC000000000005000000000000000000000
0000000000000000000000000000000000000000000000000000000000000050
0FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFCCD400000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000003FFFFF0000005CFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFC0FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF333
330000000000000000000050000000000000000000000000000000003FF00000
00FFFCFFFFFC0000000000000000000000000000005003FFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFF3140000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00FFF333333333335FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC0FFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCFFC0C00000000000000000
0050000000000000000000000000000000000003CCCCCCFFFFFFFFFFFC333300
00C000000003F0000000005003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFD7FF000000
00000000CC0FC000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000C0FFFFFFFFCFCF5FFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC0FFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFF3330000000000000000000000500000000000000000
00000000000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF30000000F0000000
005003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF3D40000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000333FFFFFF3F33353FFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFC0FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FCCC0000000000000000000000500000000000000000000000000000000CFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFCCC00003FCCC000000500FFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFCCD4000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
000000000000000000035FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC0FFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF3FFFFFFC0000000000000
00000050000FFFFFFFFFFFFFFFF30300000000003FFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFF0000FFFFFFFFFFF5FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFD7FFCC
0000000000000000000000000000000000000000000000000000000000000030
0000000000000000000000000000000000000000000000000000000000000003
333F3333FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC0FFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFCFC000000000000000000000050000FFFFFFFFC
FFFFFFFCCC00000000003CCFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF333FFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCCDC0C0000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000003FFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFC0FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFF33333030000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFFF0000000
3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFF3F3FFFFFFFFFFFFFFFFFFFF33F33FFFFFF3000
0000000000000000000000300000000000000000000000000000000000000000
000000000000000000000003333F333333FFFFFFFFFFFFFFFFFFFFFFFFFFFFC0
grestore end
% draw box around image
gsave
0 setgray
2.0 setlinewidth
0 0 moveto
0 208 lineto
853 208 lineto
853 0 lineto
0 0 lineto
stroke
grestore


%%EndDocument
 GE /Times-Bold SF
17843 19476 MT
(Figure 3-2:)SH
/Times-Roman SF
23616 XM
(Spectrogram of the word)SH
/Times-Italic SF
34856 XM
(greasy)SH
/Times-Roman SF
38063 XM
(illustrating the phoneme)SH
23967 20672 MT
(/)SH
/Times-Italic SF
(iy)SH
/Times-Roman SF
(/ in neutral \050right\051 and non-neutral \050/)SH
/Times-Italic SF
(r)SH
/Times-Roman SF
(/, left\051 contexts.)SH
10800 22623 MT
(Although every spectrogram reader uses visual cues in)
48 W( a unique manner, the basic steps are typically)47 W
10800 24362 MT
(segmentation followed by labeling.)SH
13300 27347 MT
(During the segmentation process boundaries are placed at points of large spectral or waveform)67 W
10800 29086 MT
(change, which)
101 W( can indicate a change in the manner of articulation and the production of a different)100 W
10800 30825 MT
(phoneme. Boundaries)
315 W( may also be placed on the basis of duration, as when an event is too long to be)20 W
10800 32564 MT
(comprised of a single segment, or on the basis of)
53 W( formant trajectory where nonmonotonic movement)52 W
10800 34303 MT
(can indicate)
137 W( the presence of multiple sonorants. When spectrographic information is ambiguous or)138 W
10800 36042 MT
(insufficient for positive decisions, alternate segmentations may be provided.)
80 W( An)
433 W( experienced reader)79 W
10800 37781 MT
(will identify the presence of more than 95% of the segments in an utterance.)SH
13300 40766 MT
(Segments are)
72 W( labeled based on knowledge of a phoneme's characteristic spectral pattern, coar-)73 W
10800 42505 MT
(ticulation effects,)
266 W( and phonological and phonotactic constraints.  Produced in a neutral context,)265 W
9 SS 
29916 43881 MT
(9)SH
11 SS 
10800 44244 MT
(phonemes exhibit unique spectral patterns)151 W
30792 XM
(which allows)
151 W( the reader to assign a segment label.  In)152 W
10800 45983 MT
(continuous speech,)
178 W( context can produce dramatic changes in these spectral patterns for which the)177 W
10800 47722 MT
(expert must compensate.  Knowledge of the legal)
122 W( subset of speech sounds in the language and the)123 W
10800 49461 MT
(rules for combining them adds constraints)
39 W( to the labeling process.  In English, for instance, not every)38 W
10800 51200 MT
(phone can)
79 W( precede any other phone.  Labeling performance of the best spectrogram readers exceeds)80 W
10800 52939 MT
(80% first choice accuracy.)SH
13300 55924 MT
(When decoding continuous speech, knowledge of coarticulation or contextual effects)
32 W( is perhaps)31 W
10800 57663 MT
(the most important.  These effects)
229 W( occur due to the different degrees of sluggishness of the ar-)230 W
10800 59402 MT
(ticulators, and can)
112 W( include formant motion, anticipatory coarticulation, combination in clusters, and)111 W
10800 61141 MT
(end-of-utterance effects.  The semi-vowels /)48 W
/Times-Italic SF
(l)SH
/Times-Roman SF
(,)SH
/Times-Italic SF
(r)SH
/Times-Roman SF
(,)SH
/Times-Italic SF
(y)SH
/Times-Roman SF
(,)SH
/Times-Italic SF
(w)SH
/Times-Roman SF
(/ produce strong)
48 W( coarticulation effects, an example)49 W
10800 62880 MT
(of which is given in)
50 W( Figure 3-2.  The right-hand portion shows the phoneme /)49 W
/Times-Italic SF
(iy)SH
/Times-Roman SF
(/ in a neutral context,)49 W
10800 64619 MT
(while the left-hand portion shows an /)157 W
/Times-Italic SF
(iy)SH
/Times-Roman SF
(/ in)
157 W( the context of a preceding /)158 W
/Times-Italic SF
(r)SH
/Times-Roman SF
(/. In)
591 W( the /)158 W
/Times-Italic SF
(r)SH
/Times-Roman SF
(/ context, the)158 W
10800 66358 MT
(second and third formants are lowered in the first half of the /iy/ \050within the gray ellipse\051, and)
92 W( then)91 W
10800 68097 MT
(rise to attain their target values as in the neutral context.)
31 W( End-of-utterance)
339 W( effects are a weakening of)32 W
10800 50 10800 70172 UL
7 SS 
11700 71673 MT
(9)SH
9 SS 
12050 72000 MT
(See Cole [COLE80] or Zue [ZUE86B].)SH
ES
%%Page: 56 57
BS
0 SI
10 /Times-Roman AF
54800 4286 MT
(56)SH
11 SS 
10800 7955 MT
(the speech signal, lengthening of sonorant regions, and)
71 W( potentially large amounts of glottalization or)70 W
10800 9694 MT
(irregularities.)SH
13300 12679 MT
(Feature-based recognition)
211 W( systems attempt to encode knowledge of the spectrogram-reading)212 W
10800 14418 MT
(task, at the lowest levels of the system, through)
80 W( the choice of features extracted from the signal and)79 W
10800 16157 MT
(the manner in which these cues are combined to assign labels)
27 W( to segments.  The features are typically)28 W
10800 17896 MT
(measures of formant values and)
268 W( their trajectories and amplitudes, waveform amplitude, spectral)267 W
10800 19635 MT
(shape, segment durations, zero crossings, and)
331 W( energy in selected spectral bands.  Chigier)
332 W( [29])SH
10800 21374 MT
(provides a thorough discussion of)
34 W( feature selection for classification of stop consonants in the)33 W
9 SS 
52750 XM
(ANGEL)SH
11 SS 
10800 23113 MT
(system. The)
319 W( continuous-valued speech measures may be combined with a parametric or hand-crafted)22 W
10800 24852 MT
(classifier, as in the)15 W
9 SS 
19321 XM
(ANGEL)SH
11 SS 
22661 XM
(system, or they may be quantized to form descriptions of speech events for)15 W
10800 26591 MT
(use in rule-based classification schemes.  Lamel)
66 W( [30])
SH( developed an)
66 W( expert system for stop consonant)67 W
10800 28330 MT
(classification which used a set of \050human-generated\051 feature descriptions as input.)SH
13300 31315 MT
(The features extracted from the acoustic signal will)
63 W( exhibit different degrees of speaker depen-)62 W
10800 33054 MT
(dence due to natural variations in vocal apparatus and speaking)
191 W( style.  Since one goal of speech)192 W
10800 34793 MT
(recognition research is speaker independence, it)
300 W( is often necessary to incorporate a method of)299 W
10800 36532 MT
(dynamic speaker adaptation to enable)
146 W( the system to learn an unfamiliar speaker's acoustic charac-)147 W
10800 38271 MT
(teristics. In)
615 W( systems using parametric classifiers, adaptation can)
170 W( be performed by modification of)169 W
10800 40010 MT
(those parameters.)SH
13300 42995 MT
(One such adaptive system was the CMU)160 W
9 SS 
32536 XM
(FEATURE)SH
11 SS 
36861 XM
([23] system for speaker-independent, iso-)161 W
10800 44734 MT
(lated letter recognition.)124 W
9 SS 
22079 XM
(FEATURE)SH
11 SS 
26528 XM
(was based on)
124 W( a set of about 60 measures such as formant infor-)123 W
10800 46473 MT
(mation, energy contours of)
22 W( unvoiced segments, and time to vowel onset.  Because some measures are)23 W
10800 48212 MT
(meaningful for only some letters,)
93 W( a decision-tree structure with adaptive gaussian classifiers at each)92 W
10800 49951 MT
(node was used for)
84 W( classification.  The EMAP algorithm was used to update all classes at each node)85 W
10800 51690 MT
(after each observation.  The average dogmatism of the data was around 0.40, and 0.14 at)
60 W( the lowest,)59 W
10800 53429 MT
(so adaptation proved to be quite successful.  The error rate in a supervised mode was)
14 W( reduced by 49%)15 W
10800 55168 MT
(after four training tokens, and by 31% in an unsupervised adaptation mode.)SH
13300 58153 MT
(Continuous speech has a number of effects or constraints not present in isolated)
86 W( speech which)85 W
10800 59892 MT
(include inter-word contextual effects, lack of well-defined word boundaries, and the)
64 W( impossibility of)65 W
10800 61631 MT
(perfect feedback.  These effects distort feature measures and tend)
163 W( to increase their variability and)162 W
10800 63370 MT
(consequently the dogmatism of the data.  The lack of reliable feedback degrades adaptation)
18 W( algorithm)19 W
10800 65109 MT
(performance as means are adapted on samples from the wrong)
84 W( class.  Initial adaptation experiments)83 W
10800 66848 MT
(by the author with the)3 W
9 SS 
20744 XM
(ANGEL)SH
11 SS 
24072 XM
(system attempted to extend the)3 W
9 SS 
37988 XM
(FEATURE)SH
11 SS 
42317 XM
(work to the continuous-speech)4 W
10800 68587 MT
(case, in light of these limitations.)SH
ES
%%Page: 57 58
BS
0 SI
10 /Times-Roman AF
54800 4286 MT
(57)SH
13 /Times-Bold AF
10800 8071 MT
(3.3. Overview of the)SH
11 SS 
22208 XM
(ANGEL)SH
13 SS 
26445 XM
(System)SH
11 /Times-Roman AF
13300 10986 MT
(The Carnegie Mellon)185 W
9 SS 
23538 XM
(ANGEL)SH
11 SS 
27048 XM
(system was a knowledge-based)
185 W( expert system, founded on the)184 W
10800 12725 MT
(research by Cole,)267 W
/Times-Italic SF
19541 XM
(et al.)267 W
/Times-Roman SF
22283 XM
([27] and designed for large-vocabulary, speaker-independent continuous)267 W
10800 14464 MT
(speech recognition.  The three main knowledge sources or modules)
328 W( in)327 W
9 SS 
45440 XM
(ANGEL)SH
11 SS 
49092 XM
(were acoustic-)327 W
10800 16203 MT
(phonetics, word hypothesization, and parsing.  Data flowed)
39 W( from the low-level modules to the higher)40 W
10800 17942 MT
(levels with little or no top-down feedback.)SH
731 1000 0 15300 41506 GB 
%%BeginDocument: /usr0/rozzi/Documentation/PhDThesis/Chapter3/APNet.eps
%!PS-Adobe-2.0 EPSF-2.0
%%Title: 
%%Creator: TopDraw
%%CreationDate: Mon Feb 25 22:56:22 1991
%%For: rozzi
%%DocumentFonts: (atend)
%%%Pages: 0 1
%%BoundingBox: 0 0 492 306
%%EndComments

%%BeginDocument: /usr/lib/NextStep/printPackage.ps
%!PS-Adobe-2.0
%%Title: Printing Package
%%EndComments
%Version: 2.0
%Copyright: 1988, NeXT, Inc.

/__NXdef{1 index where{pop pop pop}{def}ifelse}bind def
/__NXbdef{1 index where{pop pop pop}{bind def}ifelse}bind def
/UserObjects 10 array __NXdef
/defineuserobject{
        exch dup 1 add dup UserObjects length gt{
                array dup 0 UserObjects putinterval
                /UserObjects exch def
        }{pop}ifelse UserObjects exch 3 -1 roll put
}__NXbdef
/undefineuserobject{UserObjects exch null put}__NXbdef
/execuserobject{UserObjects exch get exec}__NXbdef
/__NXRectPath{4 2 roll moveto 1 index 0 rlineto
0 exch rlineto neg 0 rlineto closepath}__NXbdef
/__NXProcessRectArgs{
        1 index type /arraytype eq{
                exch 0 4 2 index length 1 sub{
                        dup 3 add 1 exch{1 index exch get exch}for
                        5 1 roll 5 index exec
                }for pop pop
        }{exec}ifelse
}__NXbdef
/rectfill{gsave newpath {__NXRectPath fill} __NXProcessRectArgs grestore}__NXbdef
/rectclip{newpath {__NXRectPath} __NXProcessRectArgs clip newpath}__NXbdef
/rectstroke{
        gsave newpath dup type /arraytype eq{dup length 6 eq}{false}ifelse{
                {gsave __NXRectPath null concat stroke grestore}
                dup length array cvx copy dup 2 4 -1 roll put __NXProcessRectArgs
        }{{__NXRectPath stroke} __NXProcessRectArgs}ifelse grestore
}__NXbdef
/xyshow{
        0 1 3 index length 1 sub{
                currentpoint 4 index 3 index 1 getinterval show
                3 index 3 index 2 mul 1 add get add exch
                3 index 3 index 2 mul get add exch moveto pop
        }for pop pop
}__NXbdef
/xshow{
        0 1 3 index length 1 sub{
                currentpoint 4 index 3 index 1 getinterval show
                exch 3 index 3 index get add exch moveto pop
        }for pop pop
}__NXbdef
/yshow{
        0 1 3 index length 1 sub{
                currentpoint 4 index 3 index 1 getinterval show
                3 index 3 index get add moveto pop
        }for pop pop
}__NXbdef
/arct{arcto pop pop pop pop}__NXbdef
/setbbox{pop pop pop pop}__NXbdef
/ucache{}__NXbdef
/ucachestatus{mark 0 0 0 0 0}__NXbdef
/setucacheparams{cleartomark}__NXbdef
/uappend{systemdict begin cvx exec end}__NXbdef
/ueofill{gsave newpath uappend eofill grestore}__NXbdef
/ufill{gsave newpath uappend fill grestore}__NXbdef
/ustroke{
        gsave newpath dup length 6 eq
        {exch uappend concat}{uappend}ifelse
        stroke grestore
}__NXbdef
/__NXustrokepathMatrix dup where {pop pop}{matrix def}ifelse
/ustrokepath{
        newpath dup length 6 eq{
                exch uappend __NXustrokepathMatrix currentmatrix exch concat
                strokepath setmatrix
        }{uappend strokepath}ifelse
} __NXbdef
/upath{
        [exch {/ucache cvx}if pathbbox /setbbox cvx
         {/moveto cvx}{/lineto cvx}{/curveto cvx}{/closepath cvx}pathforall]cvx
} __NXbdef
/setstrokeadjust{pop}__NXbdef
/currentstrokeadjust{false}__NXbdef
/selectfont{exch findfont exch
dup type /arraytype eq {makefont}{scalefont}ifelse setfont}__NXbdef
/_NXCombineArrays{
        counttomark dup 2 add index dup length 3 -1 roll {
                2 index length sub dup 4 1 roll 1 index exch 4 -1 roll putinterval exch
        }repeat pop pop pop
}__NXbdef
/setcmykcolor{
        1.0 exch sub dup dup 6 -1 roll
        sub dup 0 lt{pop 0}if 5 1 roll
        4 -1 roll sub dup 0 lt{pop 0}if 3 1 roll
        exch sub dup 0 lt{pop 0}if setrgbcolor
}__NXbdef
/currentcmykcolor{currentrgbcolor 3{1.0 exch sub 3 1 roll}repeat 0}__NXbdef
/flushgraphics{}def
/setwindowtype{pop pop}def
/currentwindowtype{pop 0}def
/setalpha{pop}def
/currentalpha{1.0}def
/hidecursor{}def
/obscurecursor{}def
/revealcursor{}def
/setcursor{4 {pop}repeat}bind def
/showcursor{}def
/NextStepEncoding where not{
/NextStepEncoding StandardEncoding 256 array copy def
0 [129/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/Ccedilla/Egrave
/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex/Idieresis
/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis/Ugrave/Uacute
/Ucircumflex/Udieresis/Yacute/Thorn/mu/multiply/divide/copyright
176/registered 181/brokenbar 190/logicalnot 192/onesuperior 201/twosuperior
204/threesuperior 209/plusminus/onequarter/onehalf/threequarters/agrave
/aacute/acircumflex/atilde/adieresis/aring/ccedilla/egrave/eacute
/ecircumflex/edieresis/igrave 226/iacute 228/icircumflex/idieresis/eth
/ntilde 236/ograve/oacute/ocircumflex/otilde/odieresis 242/ugrave/uacute
/ucircumflex 246/udieresis/yacute 252/thorn/ydieresis]
{dup type /nametype eq
 {NextStepEncoding 2 index 2 index put pop 1 add}{exch pop}ifelse
}forall pop
/NextStepEncoding NextStepEncoding readonly def   
/_NXfstr 128 string dup 0 (_NX) putinterval def   
/findfont{
 % Because we can never let NextStepEncoding get into
 % SharedFontDirectory, we cannot reencode a font to NextStepEncoding
 % if we are in shared mode.  So if currentshared is true,
 % we call the normal findfont and return that
 /currentshared where {pop currentshared} {false} ifelse
 {//findfont exec}
 {dup _NXfstr 3 125 getinterval cvs length 3 add _NXfstr 0 3 -1 roll
  getinterval cvn exch FontDirectory 2 index known 
  {pop FontDirectory exch get}
  {//findfont exec dup /Encoding get StandardEncoding eq
   {    dup length dict exch
        {1 index /FID ne {2 index 3 1 roll put}{pop pop}ifelse}forall
         dup /Encoding NextStepEncoding put definefont
        }{exch pop} ifelse
   }ifelse
 }ifelse
}bind def
}{pop}ifelse
/_NXProcArray 5 array __NXdef
/_NXChannels 0 __NXdef
/_NXTotalBytes 0 __NXdef
/_NXDoImageOp{
        1 index{dup}{1}ifelse /_NXChannels exch store
        _NXChannels 2 add 2 roll _NXProcArray 0 _NXChannels getinterval astore pop
        5 index 4 index mul 2 index{1 sub 8 idiv 1 add mul}{mul 1 sub 8 idiv 1 add}ifelse
        4 index mul /_NXTotalBytes exch store pop exch pop
        gsave matrix invertmatrix concat 0.5 setgray 0 0 4 2 roll rectfill grestore
        {       0 1 _NXChannels 1 sub{
                        _NXProcArray exch get exec
                        length _NXTotalBytes exch sub /_NXTotalBytes exch store}for
                _NXTotalBytes 0 le{exit}if
        }loop /_NXProcArray 5 array def
}__NXbdef
/colorimage{_NXDoImageOp}__NXbdef
/alphaimage{1 add _NXDoImageOp}def
%%EndDocument

gsave
 /__NXbasematrix matrix currentmatrix def
grestore
%%EndProlog
%%BeginSetup
/TopDrawDict 200 dict def
/xyshow {
    mark exch aload length -2 2 {
        2 roll
    } for counttomark dup 2 add -1 roll pop 1 add -1 roll gsave {
        pop pop grestore rmoveto gsave
    } exch kshow grestore rmoveto
} bind def /currentalpha {
    1
} def /setalpha {
    pop
} bind def
TopDrawDict begin /prt_stack {
    (***Top of Stack\012) print pstack (---Bottom of Stack\012) print flush
} def /prt_top {
    (top item of stack) == dup == flush
} def /prtmat matrix def /prt_ctm {
    (current transformation matrix: ) print prtmat currentmatrix == flush
} def /tmmat matrix def /obmat matrix def /strmat matrix def /pgmat matrix def /idmat matrix def /sc1mt matrix def /sc2mt matrix def /sc3mt matrix def /sc4mt matrix def /sc5mt matrix def /sc6mt matrix def /sc7mt matrix def /inmat matrix def /ctmmt matrix def /octmmt matrix def /clpmt matrix def /weglet_mat matrix def /crlinw 1 def crlinw setlinewidth /crlinjn 0 def crlinjn setlinejoin /crlincp 0 def crlincp setlinecap /crmtrlmt currentmiterlimit def /crstrpat 0 def /crfilpat 0 def /crflat currentflat def /dftflat currentflat def /strinclr false def /crlingry 0 def /crlinred 0 def /crlingrn 0 def /crlinblu 0 def /crlinalph 1 def /filinclr false def /crfilgry 0 def /crfilred 0 def /crfilgrn 0 def /crfilblu 0 def /crfilalph 1 def /crfilstyl 0 def /txtdraw true def /txtinclr false def /txtwpat false def /txtwittrans false def /crtxtgry 0 def /crtxtred 0 def /crtxtgrn 0 def /crtxtblu 0 def /crtxtalph 1 def /crtxtpat 0 def /txlndraw true def /txlninclr false def /txlnwpat false def /txlnwittrans false def /crtxlngry 0 def /crtxlnred 0 def /crtxlngrn 0 def /crtxlnblu 0 def /crtxlnalph 1 def /crtxlnpat 0 def /hilittxt false def /strdsh [2 2] def /dshpatoff 0 def /usedash false def /filwpat false def /strwpat false def /filwittrans false def /strwittrans false def /crfrtarw false def /crendarw false def /rsave 0 def /esave 0 def /sslsave 0 def /lsave 0 def /clpsave 0 def /pathsave 0 def /tpatstr 10 string def /ptdist {
    sub dup mul 3 1 roll sub dup mul add sqrt
} bind def /dodrawctm {
    octmmt currentmatrix pop idmat obmat concatmatrix ctmmt currentmatrix sc1mt concatmatrix setmatrix
} bind def /undrawctm {
    obmat inmat invertmatrix ctmmt currentmatrix sc1mt concatmatrix setmatrix
} bind def /undrawmat {
    obmat aload pop 7 -1 roll astore
} bind def /unpagectm {
    octmmt setmatrix
} bind def /unpagemat {
    pgmat aload pop 7 -1 roll astore
} bind def /drtan {
    gsave 1 setalpha 0 setlinewidth 0.333333 setgray moveto lineto stroke grestore
} bind def /drdgrdln {
    gsave 1 setalpha 0 setlinewidth [1 2] 0 setdash setgray moveto lineto stroke grestore
} bind def /drgrdln {
    gsave 1 setalpha 0 setlinewidth setgray moveto lineto stroke grestore
} bind def end
TopDrawDict begin /TDeps_dict 20 dict def TDeps_dict begin /showpage {
    
} def /copypage {
    
} def /grestoreall {
    
} def /erasepage {
    
} def /nulldevice {
    
} def /exitserver {
    
} def /initgraphics {
    
} def /renderbands {
    
} def /initmatrix {
    
} def /banddevice {
    
} def /setpageparams {
    
} def /framedevice {
    
} def /note {
    
} def end end
TopDrawDict begin /rpath {
    newpath moveto dup 0 exch rlineto exch 0 rlineto 0 exch neg rlineto closepath
} bind def /rfpath {
    /rad3 exch def /hh3 exch def /ww3 exch def /yy1 exch def /xx1 exch def /xx2 xx1 ww3 add def /yy2 yy1 hh3 add def ww3 0.5 mul rad3 lt {
        /rad3 ww3 0.5 mul def
    } if hh3 0.5 mul rad3 lt {
        /rad3 hh3 0.5 mul def
    } if newpath xx1 yy1 hh3 0.5 mul add moveto xx1 yy2 xx2 yy2 rad3 arcto 4 {
        pop
    } repeat xx2 yy2 xx2 yy1 rad3 arcto 4 {
        pop
    } repeat xx2 yy1 xx1 yy1 rad3 arcto 4 {
        pop
    } repeat xx1 yy1 xx1 yy2 rad3 arcto 4 {
        pop
    } repeat closepath
} bind def /rfill {
    gsave dodrawctm crfilalph setalpha filinclr {
        crfilred crfilgrn crfilblu setrgbcolor
    } {
        crfilgry setgray
    } ifelse filwpat {
        4 2 roll rpath crfilpat findfont filwittrans {
            trpatfil
        } {
            oppatfil
        } ifelse
    } {
        rectfill
    } ifelse grestore
} bind def /rstroke {
    gsave dodrawctm crlinalph setalpha crlinw setlinewidth crlincp setlinecap crlinjn setlinejoin crmtrlmt setmiterlimit usedash {
        strdsh dshpatoff setdash
    } if strinclr {
        crlinred crlingrn crlinblu setrgbcolor
    } {
        crlingry setgray
    } ifelse 4 2 roll rpath unpagectm concat strwpat {
        crstrpat findfont strwittrans {
            trpatstrk
        } {
            oppatstrk
        } ifelse
    } {
        stroke
    } ifelse grestore
} bind def /mkrpath {
    dodrawctm rpath unpagectm
} bind def end
TopDrawDict begin /p1x 0 def /p1y 0 def /p2x 0 def /p2y 0 def /ssl {
    gsave dodrawctm crfrtarw crendarw or {
        /p1y 1 index def /p1x 2 index def /p2y 1 index 4 index add def /p2x 2 index 5 index add def newpath moveto rlineto
    } {
        newpath moveto rlineto
    } ifelse crlinalph setalpha crlinw setlinewidth crlincp setlinecap usedash {
        strdsh dshpatoff setdash
    } if strinclr {
        crlinred crlingrn crlinblu setrgbcolor
    } {
        crlingry setgray
    } ifelse aload pop strmat astore crfrtarw {
        currentlinewidth strmat p2x p2y p1x p1y arow
    } if crendarw {
        currentlinewidth strmat p1x p1y p2x p2y arow
    } if unpagectm concat strwpat {
        crstrpat findfont strwittrans {
            trpatstrk
        } {
            oppatstrk
        } ifelse
    } {
        stroke
    } ifelse grestore
} bind def end
TopDrawDict begin /closedspl false def /nspans 0 def /sstrt {
    gsave dodrawctm /closedspl exch def /nspans 0 def newpath
} bind def /sstrtpath {
    dodrawctm /closedspl exch def /nspans 0 def newpath
} bind def /sadd {
    nspans 0 eq {
        moveto
    } {
        pop pop
    } ifelse curveto /nspans nspans 1 add def
} bind def /splstroke {
    nspans 0 gt {
        unpagectm concat closedspl {
            closepath
        } if crlincp setlinecap crlinjn setlinejoin crlinalph setalpha crlinw setlinewidth crmtrlmt setmiterlimit usedash {
            strdsh dshpatoff setdash
        } if strinclr {
            crlinred crlingrn crlinblu setrgbcolor
        } {
            crlingry setgray
        } ifelse strwpat {
            flattenpath crstrpat findfont strwittrans {
                trpatstrk
            } {
                oppatstrk
            } ifelse
        } {
            stroke
        } ifelse
    } {
        pop
    } ifelse grestore
} bind def /splfill {
    nspans 0 gt {
        closedspl {
            closepath
        } if crfilalph setalpha filinclr {
            crfilred crfilgrn crfilblu setrgbcolor
        } {
            crfilgry setgray
        } ifelse filwpat {
            flattenpath crfilpat findfont crfilstyl 0 eq {
                filwittrans {
                    trpateofil
                } {
                    oppateofil
                } ifelse
            } {
                filwittrans {
                    trpatfil
                } {
                    oppatfil
                } ifelse
            } ifelse
        } {
            crfilstyl 0 eq {
                eofill
            } {
                fill
            } ifelse
        } ifelse
    } if grestore
} bind def /mksplpath {
    nspans 0 gt {
        closedspl {
            closepath
        } if
    } if
} bind def end
TopDrawDict begin /dotx {
    gsave txtdraw {
        concat selectfont txtinclr {
            crtxtred crtxtgrn crtxtblu setrgbcolor
        } {
            crtxtgry setgray
        } ifelse crtxtalph setalpha moveto xyshow
    } {
        pop pop pop pop pop pop pop
    } ifelse grestore
} bind def /txtlin {
    gsave txlndraw {
        concat txlninclr {
            crtxlnred crtxlngrn crtxlnblu setrgbcolor
        } {
            crtxlngry setgray
        } ifelse crtxlnalph setalpha setlinewidth 0 setlinecap newpath moveto 0 rlineto stroke
    } {
        pop pop pop pop pop
    } ifelse grestore
} bind def end
%%EndSetup
gsave
0 0 492 305.247009 rectclip
-40 -124.752998 translate
40 124.752998 492 305.247009 rectclip
gsave
TopDrawDict begin
/invpats true def
/crlincp 0 def
/crlinjn 0 def
/crmtrlmt 10 def
/crlinw 1 def
/crlinalph 1 def
/crlinred 0 def /crlingrn 0 def /crlinblu 0 def /strinclr true def
/crfilalph 1 def
/crfilred 1 def /crfilgrn 1 def /crfilblu 1 def /filinclr true def
/filwpat false def
TopDrawDict /piddict known TopDrawDict /ipiddict known or {
    1 getpat /crfilpat exch def
} if
/filwittrans false def
/strwpat false def
TopDrawDict /piddict known TopDrawDict /ipiddict known or {
    1 getpat /crstrpat exch def
} if
/strwittrans false def
/usedash false def
/strdsh [2 2] def /dshpatoff 0 def
/crendarw false def
/crfrtarw false def
/txtdraw false def
/crtxtalph 1 def
/crtxtred 0 def /crtxtgrn 0 def /crtxtblu 0 def /txtinclr true def
/txtwpat false def
/txtwittrans false def
/txlndraw false def
/crtxlnalph 1 def
/crtxlnred 0 def /crtxlngrn 0 def /crtxlnblu 0 def /txlninclr true def
/txlnwittrans false def
/txlnwpat false def
gsave clpmt currentmatrix pop newpath
867 222 -217.5 69 [0.566321 0 0 0.941441 163.174744 156.040527] mkrpath
clip
newpath
clpmt setmatrix
gsave
/epssave save def TDeps_dict begin userdict begin
[1 0 0 1 -98 145] dodrawctm
-217.5 69 translate
%%BeginFile: /tmp/topdraw_eps_176_2
%!PS-Adobe-2.0 EPSF-1.2
%%Creator:Icon
%%Title:starKey.eps
%%CreationDate:Fri Jan  2 06:41:35 1970
%%Origin:0 720
%%BoundingBox: 0.000 0.000 867.000 222.000
%%EndComments
%ImageData: 867 222 2 1 0 217 0 "beginimage"
20 dict begin
/rows 222 def
/cols 867 def
/str1 217 string def
/readit {currentfile exch readhexstring pop} def
/beginimage
{{str1 readit} image}
def
gsave
cols rows scale
cols rows 2
[cols 0 0 rows neg 0 rows]
beginimage
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000002AAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA02AAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAA02AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAA02AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA02AAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA02AA00000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000002AA02AA3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000456AA
A94000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFC40000056840000003FFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFF2AA02AA3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC3FFFFFFFFF15556AA515691133FFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFF3000000000005381003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF2A
A02AA3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC40055555AA8400FFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC4
000000000056D4003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF2AA02AA3FFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFF3033FFFFFFFFC000400000000033FFF30CCCFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC00330001395013B10000000
0033FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF2AA02AA3FFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCFFFFF
FFF00000154500004FFCCC00003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000015503FFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFF2AA02AA3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF030FFFFF00300000000400
0003C00100000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFF00000000000000000001003FFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFF2AA02AA3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC000004000000000000000000003F
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
000000000000000000000003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF2AA02AA3
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFF000111000000000000000000003FFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0001000100000000
0000000003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF2AA02AA3FFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFF0000000001100000010014444FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC0040005000000000004000003FFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFF2AA02AA3FFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF10000
11410000000010010003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFF311455541000000000001000003FFFFFFFFFFFFFFFFFF
FFC3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFF2AA02AA3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC0000004000400000000
00000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFC15AFE940000000000145544FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
2AA02AA3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC00000100000010001110041133FFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00000000
00000011FD000000FFFFFFFFFFFFFFFFFFFFFFF3333FFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF2AA02AA3FFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFC004445400000140004040010FFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000FD4000
00FFFFFFFFFFFFFFFFFFFFFFC404FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF2AA02AA3FFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCF
C3000001500010050100000005033FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFF00000000000000000000000003FFFFFFFFFF
FFFFFFFFFFF0333FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC33003FFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFF2AA02AA3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000FFFFFFFFC40555555
0000000000004FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFC0000000000000000000000FFFFFFFFFFFFFFFFFFFFFFC0FF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFF2AA02AA3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFF10003FFFFFFFF005556650000000000003F
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FC000000000000000000000033FFFFFFFFFFFFFFFFFFFFF13FFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFF333FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF2AA02A
A3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFF0000003FFFFFF000000000155551554000FFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCC000000A80000
0000000000FFFFFFFFFFFFFFFFFFFFFFC0003FFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF2AA02AA3FFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
F3000033F003F30000000001375555950003FFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF30000010B800000000000000FFFF
FFFFFFFFFFFFFFFFFFC0000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFF2AA02AA3FFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC00FFF
0000017E5400000001AA0000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFC00002A0000000000000000003CFFFFFFFFFFFFFF
FFFFC00003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFF2AA02AA3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC003C000000000000165
00000000003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFF300000000000000000000000000003FFFFFFFFFFFFFFFFFFFFF00113FFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF3333FFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FF2AA02AA3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC00000000014000000A800000000004FFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC00000000
00000000000000000003FFFFFFFFFFFFFFFFFFFFCC000FFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFCC043FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF2AA02AA3FFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFC0000011555501A9000000000000000FFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF003000000000A80000000000
00000033CFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFF013FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0303C3FFFFFF
F3C3CFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF2AA02AA3FFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFC001000400000000000000000003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC40000000000000000000000000FFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC00003FFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCFCFCFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFF2AA02AA3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF10051010000
00000000000000003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFF300000000000000000000000003FFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000033FFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFF3333333FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFF2AA02AA3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCCFC0555400050000000000000000
003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFC000000000000000000000FFFFFFFFFFFFFFFFFFFCCC3FFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFCCFFFF0000003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF2AA0
2AA3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFF103001121000500000010000000000033FFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF3FF000001
1000000000000000FFFFFFFFFFFFFFFFFFCF3303FFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFF1033F000000030FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF2AA02AA3FFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFCC00000000000000000540000000040003FFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC000000005400000000000000
00FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC04FFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCC0000FFC000F0C000
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF2AA02AA3FFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF3FFFFFFFFFFFFFFFFFFFFFFF3000
0000140000000000000000133FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFF33FFD0000111165005FFE100000003FFFFFFFFFFF
FFFFFFFFFFFFFFFFFFF33FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000033FFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF31000000033FFFFF113FFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFF2AA02AA3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00000002500400000
000000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFD00000004A9405FFD04000000CFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFCC0003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFC0000000FFFFFFFCC3FFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFF2AA02AA3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000000000000100128000010003FF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC00000
00000000000000000000FFC3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC30FFFFFFF
FFFFFFFFFFFFFFFF0003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFC000033FFFFFC30FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFCFFF0033FFC30FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF2AA02AA3FF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFF000000005400000002800000503FFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000
000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCFFFFFFFFFFFFFFFFFFFFFF
FC40FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFC00004FFFFFC0FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
00FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF2AA02AA3FFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF300
0000001255100011111551000000000033FFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF3000000000000001100000000FFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF3C00033FFF3033
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000
000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF300000333333F3000033FFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFF2AA02AA3FFCFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFCCFCFFFFFFFFFFFFFFFFFFFFFFFFF0000000555544555
00000019A8005540003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFC0046FFFC00000000000000003FFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000003FFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC4FFFF00000000FFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC4000FFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFF2AA02AA3FFC3F3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFF3033FFFFFFFFFFFFFFFFFFFFFFFFF000001114450040110000016540001
00003FC3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFC0012FFFC000000000000000103FFFFFFFFFFFFFFFFFFC33FFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFF3000003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFF03FFF00000030FFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFF3FF30000FFFFFFF33FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF2A
A02AA3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFF0004AA900010000000000000015554000000003FFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC00000002
C00000000000000000FFFFFFFFFFFFFFFFFFFCFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFC00FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFCC03FFFFCF0FFFCFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCFFFFFFFF
FFFFFFF000CCC04FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF2AA02AA3FFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFF3000167500000000000000000016610000000033FFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF3C0000000380000000000000
0013FFFFFFFFFFFFFFFFFFF13FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF1033
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF11133FF
FF3333333FFFFFFFFFFFFFFFFFFFFFFFFFFFFFF3333FFFFFFFFFFFFF30003311
133FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF2AA02AA3FFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC000049B90
00000000000000000000015500000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000015A9400000FFFFFFFFFF
FFFFFFFFFC0C3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCC0003FFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC0043FFFCC0FFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0C0000000FFFFFC0003FFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFF2AA02AA3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFF3C303330FFFFFFFFFFFFFFFFFFFF1100000000000000001
560000000000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFF00000000003D100000290000000000FFFFFFFFFFFFFFFFFC3CFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC103FFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFF3F013FFF3F00003FFC30FFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFCFC30000133FFFFFCFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFF2AA02AA3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFCF0404FFFFFFFFFFFFFFFFFFFFC00000000000000005555000000000000
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000
00000003C00000028000000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFCFCFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFC00FFFFFC0003FFFFCFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFC00004FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF2AA02AA3
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF311133F
FFFFFFFFFFFFFF3F33FFFF330000000000000002510011113FFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF300000000000001100
00000000013FFFFFFFFFFFFFFFFFFFF3333FFFFFFFFFF333FFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
133FFFFFC007FC00000033FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
F33333333FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF2AA02AA3FFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCCCFFFFFFFFFFFFFFFFF
FFFFFFFFFFC010000000000001840000003FFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000001400000000000FFFF
FFFFFFFFFFFFFFFFC40FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCFFFFFFFC007D8
00000003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCCC4C4FFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFF2AA02AA3FFC3333FFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF300
00000000000013FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFF3FFFFC00000026A00000001113FFFFFFFFFFFFFFFFF
F3C0033FFFFFFFFF33033FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF3030FF000000000000000FFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFF033303FFFFF3C3FFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFF2AA02AA3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC03CFFFF0000
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFC00000000000000000003FFFFFFFFFFFFFFFFFFFC0FFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFF000000007F80002E0400FFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
2AA02AA3FFFF3F3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF3333FFFF000033FFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC0
00000000000000000033FFFFFFFFFFFFFFFFFFF13FFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFF000000003F80003B1000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF2AA02AA3FFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000CFFC0002A58003FFFFF
0003FFFFFFFFFFFFFFFFFFFFC44FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000018
00000000000000CFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF2AA02AA3FFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
00330FFFC3300033FFFFFFFFF000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFF0003CFFF011000127FFFFFFFFF0303FFFFFFFF
FFFFFFFFFFF13FFFFFFFFFCFC303FFC33303FFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000001FFFF000
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF330303FFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFF2AA02AA3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000FFFFFF0000
03FFFFFFFFC00000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFCF003FFFFFC400001BFFEFFFFFFFCFFFFFFFFFFFFFFFFFFFFC04F
FFFFFFFFFFFCFFFFFC00FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFCF00000000000000FFFF000FFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFCCCCCFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFF2AA02AA3FFFFFFFFFF33333FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFF33000033FFF300003FFF3FFF3133333FFFFFF31
113FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
3F30003F1000001113FFFFFFFC003FFFFFFFFFFFFFFFFFC00033FFFFFFF33FFF
F333FFFFF3333FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFF30000003F0011FFFFF100033FFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF2AA02A
A3FFFFFFFFFCC44FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFC000000CFFC400004FFFFFFFFCCC4FFFFFFFFFC0CFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC00003FCC0000
005FFD57FFFC004FFFFFFFFFFFFFFFFFC0003FFFFFFFC40FFFFFCFFFFFFFCFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
F0000003F0004FFFFFFC004FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF2AA02AA3FFFFFFFFFFC3
33FFFFC3333FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF303FFFF
1013FF00000000033FFFFFFFF1000003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000FFC000003FD0012B6400
3FFFFFFFFFFFFFFFFFC3FFFFFFFFF3011FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000001065000
010FFC0013FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFF2AA02AA3FFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCF0C0CFFFFFFC00000CFCFFFFFF
FFFFFFFFC000000043FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFCC4FFFC0000000007F4000000000FFFFFFFFFFFFFF
FFFFFFFFFFFFFCF05FFFC0CFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC0000000000000002FF0000FFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCFCFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFF2AA02AA3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFF33333FFFFFFC000003333FFFFFFFFFFFFF300000
0033FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFF333FFFC000000000110000000033FFFFFFFFFFFFFFFFFFF3FFFFFFFF
312FFF013FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFC0000000000000013FF00003FFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFF3F33333FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FF2AA02AA3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFC00004FFFFFFFFFFFFFFFFFFFC0003FFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC00
00015500005400000003FFFFFFFFFFFFFFFFFFFFC00FFFFFFFF00000000CFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFC000000A800015F00000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF2AA02AA3FFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFC00030FFFFFFFFFFFFFFFFFFFF3033FFFC3CFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC33000010100000000
000003FFFFFFFFFFFFFFFFFFFFF113FFFFFF000000000303FFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000
000A800002F00000C3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF3C3
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF2AA02AA3FFFFFFFFFFFFFFCCFF
FFFFC0FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0C00FFFFFFFF000000000FFFF
FFFFFFFFFFFFFFFFFFFFFFFC00000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC4000000000000003FFFFFFFF
FFFFFFFFFFFFC0003FFFFFF0400003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000014400000000000
0000CFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFF2AA02AA3FFFFFFFF33330333FFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFF30000333000006FF000000333FFFFFFFFFFFFFF
FFFFFFFFF10013FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFF00013FFFFFFFFFFFFFFFFFFFFFFFFFFFFFF300
003FFFFFF3000013FFF333FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFC00000000000007FC000000000FFFFFFFFF
FFFFFFFF3333FFFFFFFFFFFFFFF33333FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFF2AA02AA3FFFFFFFFFC40003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFC00000000000FFF00000004FFFFFFFFFFFFFFFFFFFFFFFC0000F
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFC00003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC40003FFFFFFFC000
0FFFFCCFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFC0000000000000BFC000000000FFFFFFFFFFFFFFFFFFC0CFF
FFFFFFFFFFFFFFFCFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF2AA0
2AA3FFFFFFFFF00013FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
33FFF00000FFD1FFFFFD1303FFFFFFFFFFFFFFFFFFFFFF01130FFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC0
000FFFC3000033FFFFFFFFFFFFFFFFFFF100013FFFFFFFFFF0003303FFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FC00000000013FFF00000000000000000003F333FFF333FF3303F3FFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF2AA02AA3FFFFFFFFFC
00CFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCFFFFF000000005
FFFFFC40FFFFFFFFFFFFFFFFFFFFFFFFFCC0FFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC0003FFFFC0000FF
FFFFFFFFFFFFFFFFFFFC4004FFFFFFFFFFF00000FFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC00000000007F
FF40000000000000000004FC44FFC00FFFCC00FFFFFFFFFFCFFCFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF2AA02AA3FFFFFFFFFF3FFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF30006BA6ABFFFFD3FFFFFFF
FFFFFFFFFF333FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF33300000000333FFFFFFFFFFFF
FFFFFF00033FFFFFFFFFF100033FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC000000000113F1011100000001
1001333333333F0003FFFF3333FFFFF3000000000FFFF333FFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFF2AA02AA3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFCFFFFFC40000004555000003FFFFFFFFFFFC000000
003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFCFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC40FFFFF
FC0000003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFC00000000000000000017E000000004FFFFFFFFFC
004FFFFFFFFFFFFFC0000040000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFF2AA02AA3FFFFFFFFFFFFFFFFFFC303FFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFC303FFFFF00000001141100033CFFFFFFFFF000000000103C3FFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFC303FFFFFFFFC3FFFFFFFFFFFFFFFFFFC0333FFFCF00000003FFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFC00000000000000000003D000000003FFFFFFFFC01003FFFFFFFFFF
FFC0000103F00000CFFFFFFFFFFFC3FFFFFFFFFFFFFFFFFFFFFFFF2AA02AA3FF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC00CFFFC
C000000040000004FFFFFFFFFFFFFFFFFCC0003CFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFCFFFFFFFFF000003FFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC0000
00000000000000000000000000FFFFFFFFFC0054FFFFFFFFFFFFC0005FFBFF10
00C0FCFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF2AA02AA3FFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF3013FFFFFF0000116110000
0033FFFFFFFFF30033FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF33000000FFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFC000033FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00000000000000007
C0000000FFFFFFFFFF330001513FFFFFFFFFFFFFFF1FF11FFFF0F3313FFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFF2AA02AA3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFCC0CFFFFFC000014500000000FFFFFFFFFFC4
0000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCC000000FFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFC00003CFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00000000000000007C0000000FFFFFF
FFFFF0000440FFFFFFFFFFFFFFFCC04444FFF3FFCCFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFF2AA02AA3FFFFFFC333FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFCFFFCFF3C3F3000000000000000000000000033300000033FFFFFF0000
33FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFC10003F3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
3013FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFC00000000000F40000000000F3FFFFFFFFCF30000000
330033FFFCCFFFF311014FD3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF2A
A02AA3FFFFFFFC43FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFC400000000000000000000000FCF00000003FFFFFFC40003CFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFC00000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF003FFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFC00000000000F40000000000FFFFFFFFFF0FFC00000000004FFF33FFFF
FFC040000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF2AA02AA3FFFFFFF3
333FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF3333FFFFFFFFF0000011664
000003FFFFFF3FFFF3000000003303033333333FFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF3FFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF33333FFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF3000000000
38000000000FFF3033FFFF333000F333FFF300000030FC3F00300125413FFF33
3FFFFFFF3FFFFFFFFFFFFFFFFFFFFFFFFF2AA02AA3FFFFFFFFFFFFFFFFFFFFFC
3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC00000000000000E0000CFFFFFFF
FFFFFFC0000003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC00000003D00000000003FFFF
FFCFFF0C000003FFFFFFFFFFC0003FF3FF0000000000403FFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFF2AA02AA3FFFFFFFFFFFFFFFFFFFF0303FFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFF3000010000000000B000003FFFFFFFFFFFFF3000003
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFF3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCFFFFF
FFFFFFFFFFFFC3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFC00000003D00000000003FFFFC303CF30000333
FFFFFFFFFF30030FFFFF10000000000400FFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFF2AA02AA3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFC0000000000000000000000000FFFFFFFFFFFFFFC0000FFFFFFFFFFF000
0000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCFCC0
CCFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0C3FF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFC000000000000000000000FFFFFFFFFFCFFFFFFFFFFFFFFFFFFFF
FFFFFC40C33C40000003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF2AA02AA3
FFFFFFFFFFFFFFFFFFFF3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000
000000000000000003FFFFFFFFFFFFFF00033FFFFFFFFF310000333FFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF3333333FFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF3FFFFFF33FFFF333FFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC00
0000000000000000000FFFFFFFFFFF3FFFFFFFFFFFFFFFFFFFFFFFF333FF3F30
000000FFFF3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF2AA02AA3FFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC0000A80000000000000004FFF
FFFF000CFFFFFFFF000003FFFFFFCC00003FFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF03FFFFFF0C0003FFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFC00000CFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC0000000000000000
000000CFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF3100000CFFFFC
033FFFFFFFFFFFFFFFFFFFFFFFFF2AA02AA3FFFFFFFFF3FFFFFFFF0033FFFFFF
FFFFFFFFFFFFFFFFFFFFFFC0033C0000000000000003F110000000000003FFFF
000000000000000013CFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFF33303100033FF00000000FFFFF3FFFFFFFFFFFFFFFFFF
FFC33FFFFFC3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC0000000000000000010003F3FFFFFF
FFFFFFFFFFFFFFFFFFC3FFFFFFFFFFC3333FF3C3FFFFFFFFF00000003FFFFFFF
FFFFFFFFFFFFFF2AA02AA3FFFFFFFFFFFFFFFFFFC043FFFFFFFFFFFFFFFFFFFF
FFFFFFFFCC0FFC0000000000000043FC000000000000FFFFFCC0000000000000
0000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFCF0C00003FF00000000FFFFFFFFFFFFFFFFFFFFFFFFFFFCFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFC000000000000000000C000FFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFCFFFFFFFCFFFFFFFFFC000000FFFFFFFFFFFFFFFFFFFFFF
2AA02AA3FFFFFF03333FFFFFFF0013FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF300
0000000000000003FFFFFFFFF0000FFFFFFFFFFC000000000003FFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF1
0000000000113333FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF3FFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFC000000000013333FFFFFFFFFFFFFFFFFFFFFFF33FFFFFFFFFFFFFFFFFF
EBBB7FFFF3333FF33FFFFFC000003FFFFFFFFFFFFFFFFFFFFF2AA02AA3FFFFFC
C003FFFFFFFC000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC000000000000000
03FFFFFFFFF0000FFFFFFFFFFC000000000003FFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC0000000000000CC
CFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC00000000
000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBEABFFFFFFFFF
FFFFFFFFFCC000CFFFFFFFFFFFFFFFFFFFFF2AA02AA3FFFFFFC3C3FFFFC30000
13FFFFFFFFFFFFFFFFFFFFFFFFFFF303F0000000064400000003CFFFF3003000
0033FFFFFFFF00000003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
C3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC303FFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFC3030FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000000033FFFC3FFFFFF
FFFFFFFFFFFFFFFF03CFFFFFFFCFFFFFFFFFC50143FFFFFFF3C3FFFFFFFFFFCF
FFFFFFFFFFFFFFFFFFFFFF2AA02AA3FFFFFCFCFFFFFFFFC40003FFFFFFFFFFFF
FFFFFFFFFFFFFFF0400000098000000FC000FFFC000FFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFCC0CFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC4CFFFFFFFFFFF
FFFFFCC000000000CFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFC0CFFFFFC00003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC00003FFFFFFCFFFFFFFFFFFFFFFFCFFFF
FFFFFFFFFFFFFFFFFFFFFFFC400000FFFFFFFFFFFFFFFFC0FFFFFFFFFFFFFFFF
FFFFFFFF2AA02AA3FFFFFF33FFFFFFFF100013FFFFFFFFFFFFFFFFFFFFFFFFFF
F30000000650000003F000FFF3010FFFFFFFFF33FFFFFFFFFFFFFF333F31113F
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF33FFFFFFFFFFFFFFFF311100001
013FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF3113FFFFFF0
0003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFC00013FFFFF313FFFFFFFFFFFFFFFF33FFFFFFFFFFFFFFFF
FFFFFFFFFF0300333F3FFFFFFFFFFFFF1133FFFFFFFFFFFFFFFFFFFFFF2AA02A
A3FFFFFFFF00FFFFFF000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC0000000
000FC404FFFF0000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFC404FFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000FFFC000FFFFFFFFFFF
FFFC000000CFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000FFFC0003FFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FCC0000000000000003FFFFFFFFFFF004FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFC03FFFFFFFFFFFFFFFFFFFFFFF2AA02AA3FFFFFFC3113F
FFFF1000033FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC000000003F3C033C3F330
33C3FFFFFFFFFFFFFFFFFFFFFFFFFFFF300FFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFF333FF0000FFF3000FFFFFFFFFFFC33300000033FF
FFFFFFFFFFFFFFFFFFFFFFFFF0000003F3000003FFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF1000000000000
000033FFFFFFFFF3330FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFF3303FFFFFFFFFFFFFFFFFFFFFF2AA02AA3FFFFFFC0000000000000FFFFFF
FFFFFFFFFFFFFFFFFFFFC0000000000000000FFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFC000000FFFFFFFFFFFFFFFFFFC0FFFFFCFFFFFFFFFFFFFFFFFFFF
FFFFFCFFFFF000000000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00000000003FFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFF2AA02AA3FFFFFF00013FFFC003FFFFFFFFFFFFFFFFFFFFFF
FFFFFFF000000000000003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFF3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF3000000000
000FFFFFFFFFFFFFFFFFFFFF3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFF133300000
000000033FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFF30000011003FFFF3333333FFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF3FFFFFFFFFFFFFFFFFFFF
FF2AA02AA3FFFFFCC0003FFFC003FFFFFFFFFFFFFFFFFFFFFFFFFFFFC0000000
0000003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC4000000000000FFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC04CC000000000003CFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFF0000004003FFFC44004CCFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF2AA02AA3FFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF1400000000303FFF333
0FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0303FFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFC11000000001100003CFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFC303FFF00001000003FFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC00000
00000333C30303FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
0303FFFFF3F30033FFFFFFFFFFFFC3FFFFFFFF2AA02AA3FFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFC00000000000FFFFCC4FCFFFFFFFFFFFFFC
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFC0450000000040FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFC00000000003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00000000003FFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC0000FFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFF2AA02AA3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFF10000000113FFFFF33333FFFFFFFFFFFF133FFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF111
00000001133FFFFF33FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFF000000000003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00000000003FFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFF3100113FFFFFFFFFFFFFFFFF3FFFFFFFFFFFFFFF
FFFFFFFFFF2AA02AA3FFFFFFFFFC0003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FC00000000044C0003FFFFFFFFFFFFFFFFFC4FFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC000004A9404FFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00FFF
C000033FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFF0000000003FFFFFFFFFFFFFFFFFFF000FFFFFFFFFFFFFFF
FFFFFFFFFFC4440400003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF2AA0
2AA3FFC3F3FFF10033FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC000000000100
0003FFFFFFFFFFFFFFFF3303FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000001B90033FFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF103F30000004FFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFF0000000003FFFFFFFFFFFFFFFFFFF1003FFFFFFFFFFFFFFFFFFFFFFC33303
30000303FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF2AA02AA3FFFFFFFFFC
FCFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC00000000005400000FFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFF0000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFCFCFFFC000000133FFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCC00000003F
FFFFFFFFFFFFFFFFFC0000F0FFFFCCFFFFFFFCFFFFFCC0FFFFFFFFFFFFFFFFFF
FFFFC0003CFFFFFFFFFFFFFFFFFFFFFF2AA02AA3FFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFF30000010011000000033FFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFF33311013FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFF33FC0000000333333FFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFF1113C00F3300033F3F000033FFFF333333333FFFFFFFFFFFFFFF113FFFFF
FFFFFFFFFFFFFFFFFF2AA02AA3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFF000000400040000003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC00CF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFC44F000000000444FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCC0CF00C00
00003FFCC0000CFFFFC4000C00CFFFFFFFFFFFFFFFCC3FFFFF3330CCCC33FFFF
FFFF2AA02AA3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF300000000
0010113FFFFFFFFFFFFFFFFFFF0303FFFFFFFFFFFFFFFFFFFFFFFF03030FFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF3F0300000000010
00001133CFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC30100110033FFFF03FF
FFC303FFFF03FFFFFFC30FFFFFFFFFC0CCFC000001000FFFFFFFFF2AA02AA3FF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC000000000000000FFFFFFFF
FFFFFFFFFFFFFCFFFFFFFFFFFFFFFFFFFFFFFFFFFC40FFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC000000000000000000003FFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF30C4000000FFFFFFFFFFFFFFFFFCFFFF
FFFFFCFFFFFFFFCC0000010110044403FFFFFFFF2AA02AA3FFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFF1000000000133333FFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFF30003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFF3000001000000013FFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFF000013FFF00033FFFF30000013FF3000000033FFFF3
100000100CC033300FFFFFFFFF2AA02AA3FFFFCCCFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFF000004000000003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFC454C0000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCCCFCC000FFFFFFFFFFFFFFFFFFF0C
0FFFFF0000000C0C00003FFFFFC40000000000096A003F3FC00000030FFFFFFF
FFFFFFFFFFFF2AA02AA3FFC3330333FFFFFFFFFFFFFFFFFFFFFFFFFFFFFF1000
010000000003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC3FFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC33FFFFFFFFFFF
FFFF113CC0000003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFF3F103310033CFFFFFFFCFFFFFFFFF1103FFFF00000003
3000013FFFFF10000000000005551000FCC000003FFFFFC3FFFFFFFFFFFFFF2A
A02AA3FFC0FFFFFCFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000000000000FFFFF
FFFFFCFCFCFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCC004FFFC0040
0000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFC04FFC403FFFFFFFFFFFFFFFFFFC0000000F033FFFFFFC400000CC0000
1400004440000000003F00003CFFFFFFFFFFFFFFFFFFFFFF2AA02AA3FF3333FF
FF3FFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000000000013FFFFFFFFFF333313FFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF300013F330000000133FFFF3FFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF3013FFF10
33FFFFFFFFFFFFFFFFF300000103FFFFFFFF3333033311000010000010100000
0000FCC30033FFFFFFFFFFFFFFFFFFFFFF2AA02AA3FFFFFCC00FFFFFFFFFFFFF
FFFFFFFFFFFFFFFFC00000000000000FFFFFFCCFFFFFCC0FFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFC40003FF00000000FFF00000FFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC4000000003FFFFFFFFFFFF
FFFFFF000000CFFFFFFFFFFFFFFFFF000000000014040400000000CFFFFFFFFF
FFFFFFFFFFFFFFFFFFFF2AA02AA3FFFFFFC103FFFFFFFFFFFFFFFFFFFFFFFFFF
F3000000000000000003CFC01033CFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFC10FFFFFFF0000000000000033FFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFF1110FFFFFFFFFFFFFFFFFFFFFFFFF1003FFFF
FFFFFFFFFFFFFFFFFFC300000000001133F3113FFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFF2AA02AA3FFFFFFCCCFFFFFFFFFFFFFFFFFFFFFFFFFFFFC400000000000
000003FFFC0003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCFF
FFFFFFF0000000000000C3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFC40FFFFFFFFFFFFFFFFFFFFFFFFFFC000FFFFFFFFFFFFFFFFFF
FFFFFF000000000000FFFFC03FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF2AA02AA3
FFFFFFFFFF03FFFFFFFF3333FFFFFFFFFFFFFF00000000010113FFFC0003033F
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF3313FFFFFFFFFFF1000
011000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF1
00033FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFF3333FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF2AA02AA3FFFFCCCFCC0000
3FFFFFFC00003FFFFFFFFFF0000000000000000FC0003FFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFCC00000FFFFFFFFF000FFC00000003FFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000003FFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFF2AA02AA3FFFF330330000003FFFFF0000003
FFFFFFFFF00000000000000333000003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFC0300033FFFFFFF3113FC000000003FFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000003FFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFF2AA02AA3FFFCFFFFFFFFFCFFFFFF0000FFFFFFFFFFFCFFC000
2BFC0004FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFC404FC00000000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFF04000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
2AA02AA3FFF333FFFFFF3F33FFFF0013FFFFFFFFFFF13FC00027FC03333FFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF3FFFFFFF
F3333330000000000133FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFF300033FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF2AA02AA3FFFFFF
FFFFFFCC0000000000FFFFFFFFF0000000000004FFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000
000003FFFFFFFFFFFFFFFCC0003FFFCC0000FFFFFFFFFFFFFFFFFFFFFFC00FFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF2AA02AA3FFFF30000000000003FF
C3C10FFFFFFFF100000000000033FFF0003FFFFFFFFFF3C30FFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF30000000003FFFF3333
FFFFC333FFFC0000000000CFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFF2AA02AA3FFFF00000000000043FFFFFCFFFFFFFFFC
40000000000003FFC0003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000000000000FFC043FFFFFC43FFFC00
00000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFF2AA02AA3FF00033F0033FF000333FFFFFFFFFFFF312A500000000000
0000003FFFF00003FFFF3333FF3F33FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFF300001B9100003FF00033FFFF100003100000000003FFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF2AA02A
A3FFC003FF003FFC00003FFFFFFFFFFFFFC46A5000000000000000003FFFFC00
03FFFFFCFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FC000004AC0000000C00003FFFCC0000454000000000FFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF2AA02AA3300033033003
FFFF0000033FFFFFFFFF3000000000165000000001FFF300000000033FFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0003FC1100
000C0003FF03FF0000000000000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFF2AA02AA3FFFFFFFFFC00CFFFFFC000FFFF
FFFFFFF04000007FFF045F400000FC003FFF404FC0FFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFF0C0CFFFFFFFFFFFFFFFFFFC47FFFDFD10000043FF0000
00000000000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFF2AA02AA3FF3FFFFF300013FFFF00013FFFFFFFFFF3000000
7FFFFFFF100003FC003FFF0333333FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFF3333FFFFFFFFFFFFFFFFFFF11BFFEFD40000013FF000000000000000003
3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FF2AA02AA3FFFFFFFFFC4000FFFFFFC44CFFFFFFFFFFC000000000FFFF000007
FC0004400FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFC007FFD00000000000000000000000000000FFFFFFFFFFFFFFF
FFFFFFFFFFCC0FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF2AA02AA3FFFF
FFFFFF00033FFFC3030303C3FFFFFFC000000013FFD00000011000110003FFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC3CFFFFFFFFFFFFFFFFF00
0057A5000000000100000000000000000003FFFFFFFFFFFFFFFFFFFFFFFFC013
3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF2AA02AA3FFFFFFC00000FFFFFF
FFFFFFFFFFFFFF00000000002BFFC000000000000000000FFFFFFC0000CFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC00000000000000
00000015A8000000001540FFFFFFFFFFFFFFFFFFFFFFFFC0003FFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFF2AA02AA3FFFF30000133FFFFFFFFFFFFFFFFFFFF
000000000011B1000000000000000F000000000000000033FFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF333FFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFF33333FFFFFFFFFFFFFFFF300000003FFFFFFFF0011BA91000000
000000013FFFFFFFFFFFFFFFFFFFFFF300003FFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFF2AA02AA3FFFFC400003FFFFFFFFFFFFFFFFFFFFF000000000005E0
000000000000000F4000000000000000CFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC
CFFFFFFFFFFFFFFFFFF00000000FFFFFFFFF0004AA95000000000000003FFFFF
FFFFFFFFFFFFFFFFFCC0003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF2AA0
2AA3FFFF1003FFFFFFFFFF030003FFFFFFFF0000000000000000000000000000
000000000003FFC13FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF3CFFFFFFFFFFFFFFFFF
FFFFF003FFFFFFFFFF000000000150000000000000FFFFFFFFFFFFFFFFFFFFFF
FFF3C00033FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF2AA02AA3FFFFC000FF
FFFFFFFC400014FFFFFFFF0000000000000000000000000000000000000003FF
FCCFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF003FFFFFF
FFFFFC0000000140000000000000FFFFFFFFFFFFFFFFFFFFFFFFFFC0003FFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF2AA02AA330000000033FFFF30015BA51
0333FFC00000067B0000000000000000000000000000000003FFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFF3333FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF100033FFFFFF0000000001
150000003B0000003FFFFFFFFFFFFFFFFFFFFFFFC00033FFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFF2AA02AA3000003FFFFFFFFFFFC000000FFFFFFC0000000
0000044980001400000000000000000003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC4003FFF
FFFFFFFCC00CFFFFFFFFFFFFFFFF000003FFFFFC002A54000000000000000000
04FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFF2AA02AA3000003FFFFFFFFFF00000000FFFFFFC000000000001106500000
00000000000000000033FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00003FFFFFFFFF100033F
FFFFFFFFFFCFFF000003FFFFF1001654000000000000000000033FFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF2AA02AA3FF
FFC0FCFFFFFCC0000000000CFFFFFF0000002A5000000000000000000000000F
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFCCCFFFFFFFFFC000000FFFFFFFFFFFFFFC00
0000000FFFF0000000FFFCC0000000000000FFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF2AA02AA3FFFFFF3FFFFFFC00
0033FF11133FFFFF10000000000000000000000110000000033FFFFF333FFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF10FFFFFFFFFFFFFFFFFFF3FFFFFFFFFFF
F3113FFFC10000000000003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFF2AA02AA3FFFFFFFFFFFFFC00003FFFCCCFFFFF
FF00000000000000000000000000000000003FFFFC0CFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFC00FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0CFFFFC00000
00000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFF2AA02AA3FFFFFFFFFFFFFF00000033FFFFFFFFFFFFC000000540
00000000000000011000000000003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF303F3CFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFC00003FFFFFFFFFFFF3303FFFFFFFFFFFFFFFFF303FFF40000000010CFFFFF
FFFFFFFFFFFFFFFFFFFFFFCFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF2A
A02AA3FFFFFFFFFFFFFCC0000003FFFFFFFFFFFFC00000054000000000000000
005000000000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC54FFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC0003FFFFFFF
FFFFFCF043FFFFFFFFFFFFFFFFFFFFFFF40000000000FFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF2AA02AA3FFFF3000
0033FFFFFFFFFFFFFFFFFFFF3000000000000666600000000001167910000000
03FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFC000003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFF3FFFF000000000000FFFFFFFFFFFFFFFFF133333
3FFFFF33FFFFC0000001000000033FFFFFFFFFFFFFFFFFFFFFFFFFFFF0033FFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF2AA02AA3FFC0000000FFFFFFFFFFFC
00000CFFFF0000000000000000000000015ABFFF40045550000FFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFCC000000000CCFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFF000000000144CFFFFFFFFFFFFFFFF0000000FFFFF00000000
00000000000003FFFFFFFFFFFFFFFFFFFFFFFFFFFFC0003FFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFF2AA02AA3FFC00000033FFFFFFFFFC0000003FFC30000
0000000000000001001FFFFFFF501101000033FFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCFFFFFFF001000
100103FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC3FFFF
C00000000001013FFFFFFFFFF3FFFF0000010FFFFF1000000000000000000003
FFFFFFFFFFFFFFFFFFFFFFFFFFF3C0003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFF2AA02AA3FCC000FFFFFFFFFFFFC00000003FFCC0000000000000000000
00001FFFFFFFFFD0004FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCFFFFFFFC000000000040FFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC4000000000014000000
0000FFFFFCC4FFFF0000004FFFFC5695000000000000000003FFFFFFFFFFFFFF
FFFFFFFFFFFFFFC004FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF2AA02AA3
FF00033FFFFFFFFFFFC00000013F33FF000000000000000000000027FFFFFFFF
D0033FFFF333FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFF13FFFFFF00000000001133FFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF1011000000110000000000333FFFF13FF
FF0000013FFFF112A6000000110000000003FFFFFFFFFFFFFFFFFFFFFFFFFFFF
F0013FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF2AA02AA3FFFFFFFFFFFFFF
FFFC000000000C47FF4000000000000A97FFC00003FFFFFFC4000FFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFC00FFFFFFC000000000513FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFC00003FFCC00000000003FFFFC00000FFFFF0000000FFCC0
000000000000000003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCC0C3FFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFF2AA02AA33303F3C3000000000001BA9FD000
3FFF100000000000003FFFF5110FFFFFFF40013FFFFFF303FFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF103FFFF
FF0011000000030FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFF303FFFFF3000000003FFFFFFFCC00C3FFFFF3013FFFF3FFFF0000000001
33FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFF2AA02AA3FFFFFFFC000000000014FFFFD0003FFF5000000000
00003FFFF47FFFFFFFFF80003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCCFFFFFFC504150000000
CFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FC0000003FFFFFFFFC00FFFFFFFFC04FFFFFFFFF0000000040FFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
2AA02AA3FF0000000000110000003FFF6FFD3FFF0000000000000003FFDFFFFF
FFFFFC00013FFFFFFFFF3333FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00000000000FFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00000000117C0000003FF
FF3000033FFFFF1003FFF333FF000000000000FFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF2AA02AA3FCC000
000000040000003FFFFFFFFFFD0000000000000000001FFFFFFFFFFC00003FFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFC00000000004FFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFC000000004BC0000004FFFFFC00000FFFFF
000FFFF04FFF000000000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF2AA02AA3FFFFFFFFFFC141560000
003FFF1FFFF600000000065600000000000000000033FFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFC00000000003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFF033FF00000000000000140000000000000000002A30000000000
000000000033FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFF2AA02AA3FFFFFFFFFFC40000000042C00003FFF000
0000000015FFFFFFC000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
F00000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC44
FC00000000000000000000000000000000000000000500000000000003FFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFF2AA02AA3FF3FFFFFFFF110000000138100001100000000110015FFFF
FFD000000F3FF33FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF300003FFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF33333300000000000
000000000000000000000000000106000000000000033FFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF2AA02A
A30000CFCC00004440000000000000000000000000000000000FF444FFFFC000
0FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000014000000000000040000
000000000000000000000000003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF2AA02AA3103033030000
1100000000000000000000000000000000000FF5133FFFC00003FFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFF000011400000000000000000000000000000000
0000000000003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFF2AA02AA3C0FFFFFFFC0000000000000055
400000000000000000000000000FFFFFC0FFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFCC0000000000000000000000000000000000044000000000000000C
FCFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFF2AA02AA33F333333327B0011640000000013FFC000000000
3FF3FFFFFFF1133F33000000033FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF3000
0012F00000000000060000000000000000000000000000000033FFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFF3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FF2AA02AA3FC4003FFC56A0000980000000000FFC000000000FFFFFFFFFFCCCF
FFFC0000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000005F000000000
000A00000000000000000000000000000000CFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF2AA02AA30256
000000000030000003303303FFFF116B00000030FFFFFFFFFFFFFFFFF300000F
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC0000000000111010000000000
000011001001165503FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF2AA02AA300000000003FFFFFFC
00FFFFFFFFFFFFC000000000000003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000
00000000CCFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFF2AA02AA3000000000033FFFF3013FFFFFFFFFFFF
3000000000000033FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFF000000000000000000000000000000000001100000133333FFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFF2AA02AA300000000003FFCC00000CFFFFFFFFFFFF00005450FFFFF
FCCCCFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC00
0000000000000000000000000000000000005440003FFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF2AA0
2AA3000010000003F330000033FFFFFFFFFFF000014113FFFFFF33033FFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC3000000000000000
00000000000000000000000100003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF2AA02AA3FC000015A8
40FFFFFCFFFFFFFFFFFFFFFCC000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFC000FCF0C0000040000AFEA0004500000000
015A95955440FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF2AA02AA330000000003FFFFFFF3333FF
FFFFFFFFFFC000000000000000333FFFFFFFF3333FFFFF33FFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFF3133FFFFFFC0000000000000000000000000114000100000033
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFF2AA02AA3FC000000003FFFFFFC0CFFFFFFFFFFFFFFC000
0000000000000FCFFFFFFFFC03FFFFFFCFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC
C3FFFFFFFC00000000000000000000000004540000400000CFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFF2AA02AA3FC000000C3FFFFFFC3FFFFFFFFFFFFFFC0000000000000000000
00030FC00000003000C3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF3F00303FFFFF3F0
00000000000000000FF41003C000000003C3FFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF2AA02AA3FC
000000FFFFFFFFFFFFFFFFFFFFFFFFF00000000000000000000000CFFC000000
0000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC0003FFFFFFFCC00000000000000
000FF400FFF000000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF2AA02AA3FFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFF3000003FFFFFFFFFFFFF333FFFFFF30000030FFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFF30000003FFFFFFFFFF100000000000010FFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFF2AA02AA3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFC000003FFFFFFFFFFFFFFFFFFFFFFFFC0003FFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFC4000000000C0000000045500000000FFFFFFFFFFFFFFFFF0CCC
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFF2AA02AA3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF30000003FFFF
FFFFFFFFFFFFFFFFFFFC0003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC0
00000000010000000001500000000FFFFFFFFFFFFFFFF30333CFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF2A
A02AA3FFFCC0C0000000FFFFFC00000FFFFFFFFFFFF000000000000000000000
000CFC500000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0400000000000
00000000000003FCC0CCFCFFFFFF0000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF2AA02AA3FFF33111
0000013FFFF330003FFFFFFFFFFFF00000000000000000000000013F10000033
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF100001000000000000000000013
F13333333FFFFF3000333FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF2AA02AA3FFFFFC00000000CFFFFFFF
CC003FFFFFFFFFFFC00FFFFFC0000000000000000000000003FFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFC0000000559555A4400000A54000004FFFFFFFFFFCF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFF2AA02AA3FFFF0000003FFFFFFFFFFFFFFFFFFFFFFFFF
C000033FFFFFFFCC10130FFFFFF013FF03FFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCFCFFF
FFFFFFFC00000000000005B900000003FFFFD100000300000033FFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFF2AA02AA3FFFFC000003FFFFFFFFFFFFFFFFFFFFFFFFFF0000FFFFFFFFF
FC0003FFFFFFC00FFCFCFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC000000
00000005FCF0000047FFFFD400000040000043FFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF2AA02AA3
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF3000000000000033FFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF3FFF30033FFF300000033332
6B10001261000000000000033FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF2AA02AA3FFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFF00040000000000000000000000000003FFFFFCFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC00000000005FFF
C5FFFCFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFF2AA02AA3FFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFF10011000000000000000000000000013FFFF33FFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC00000000004FFFC1FFFD3FFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFF2AA02AA3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000009A
AAA5945554000000000003FFFC00FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFCC000000000C0000000000005F4007FFF4000003CC00003FFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
2AA02AA3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000116AAA666511240000
00000003FFFF33FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF33FFFFFFFFFF33FFFF1000000
000110000000000006F0017FFF10000131100013FFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF2AA02AA3FFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFC000001940000000000005695A8004000003FF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC0000000000000000000000
00000000000000000000000003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF2AA02AA3FFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFC000000000000000000000000001100003CFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFC303C3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFCFFFFFFFF300000007FFFE110694000000000000000001100003
FF113FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFF2AA02AA3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
C000000000000000000000000000400003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCFCFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFF04000000BFFFD0049A80000000000000000050000FFFFCCFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFF2AA02AA3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000001150000000
0000000000000014003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF33F3FFFFFF1000000
00000000000000000000000001000000000000FFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF2AA02A
A3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00000045000000000000000000000
04003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC4FFFFFFFF000000000000000000000
000000000005000000000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF2AA03FF3FFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000003FFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFC33FFFFFC3F10000000000000000000000000000000000
000000000000000033FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFF2AA03FF3FFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFC000000000000000000000000050000000000000FFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFC0000FFC0FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFF0C005800000000000000000000000000000000000000000000000
0000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFF2AA03FF3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC000000000
00000000000000011001000000000033FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF30001133
133FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF101
164000100000000000000000000000000000000000000000000013FFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FF2AA03FF3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC00000000000000000000000
0000000003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00000000003FFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00000000000000000
00000000000900000000000003C001F001FFFF8003FFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF2AA03FF3FFFF
FFFFFFFFFFCFFFFFFFFFFFFFFFC0000000000000000000000000000000030FFF
CFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFC00000000003CFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000010600
000000000013D001F001FFFF40033FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF2AA03FF3FFFFFFFFFFFFFFFCFF
FFFFFFFFFFFFC0000000000980000000000000000000000FFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFC000000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFF0415A8000000000000000000000000000000000000000
000000000000000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFF2AA03FF3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF1
000000000000000001111AA6AA90000003333FFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF3
00000000001033FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFF0000000110000000000000000000000110000000000000000000000000
00013FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF333FFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFF2AA03FF3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCC00000000000000
0004404AAAAA840000000FCFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00000000000003
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC0000005
4400000000000000000000050400000000000000000000000000003FFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF2AA0
3FF3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000013
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF3C00000000000000033FFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF3113FFC0001140000000000
00000000000133FFFFFFFFFFF3FF3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFF3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF2AA03FF3FFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000003FFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFC000000000000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFF0C0CFFC0000480000000000000000000000FF
FFFFFFFFFFFFFFFFFC3FF00CFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF2AA03FF3FFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFF11000000000000000000000000000FFFFFF333FFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFF000000000000003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFF30000000000000000000000000000013300000000000000
0000000003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFF330303333FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFF2AA03FF3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00000F
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCFFFFFFFFC
04040CFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFCFFFFFCFFFC40000000000004FFC00000000000000000000000000FFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC00004444
4CFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFF2AA03FF3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC30000033FFFFFFFFFFFFF
FFFFFFFFFFCFCFCFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC3CFFFFFC1330333FFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF030FC333
03300000000000030FFF30000000000000000000000003C3FFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC3303333030303C30303C3FF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF2AA03FF3FF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00000000000000000000CCFCCCFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCC000FFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC3FFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFF111004FFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFC33FF3FFFFFFFFFFFFFFFFFFF2AA03FF333FFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFF10000000000000000000000000333FFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFF30000000003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF33FF3333FFFFFFFFFFFFFFFFFFFF
FFFFFFFF3F3300000003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFF300000003330003FFFFFFFFFFFFFFFFFFFC0033FFFFFFFCC0
000FCFCFFFFFFFFFFFFFFFFFFF2AA03FF3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFF000000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FC0000000003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC0
000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FC0000000000000000003330CC300CF0333000003FFCCCF0000003FF3FFFFFFF
FFFFFFFFFFFF2AA03FF3333FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFC131033303FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF11303
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF303
3FFFFFFFF30333C3F3C3FFFFFFFF33C3FFFFFFFFF3033303CCCCC003FFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00000000000000
000000000000000000000000000CC0000000000FFFFFFFFFFFFFFFFFFFFFFF2A
A02AA3C0FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FCFCFCCCFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCC0CFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC0FFFFFFFFFFFCCF
FFFFFFFFFFFFFCFCFFFFFFFFFFFFFCCCFFFFFFFCFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCC000000000000000000000000000
000000000000101000030003FFFFFFFFFFFFFFFFFFFFFFFF2AA02AA30033FFFF
FFFFFFFFFFFFFFFFFFFFFFFFF300003333333FFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF33333FFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFF30003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000C03FD5544
040003FFFFFFFFFFFFFFFFFFFFFFFFFFFF2AA02AA00000FFFFFFFFFFFFFFFFFF
FFFFFFFFFFC0000000000000000000000000000000CFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFF00000000003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFCCFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFF000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFA651500FFFFCCC33
FFFFFFFFFFFFFFFFFFFF2AA02AA0000003FFFFFFFFFFFFFFFFFFFFFFFFFF0000
00000000000000000000000011330FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC00000
000033CFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFC3330FFFFFFFFFFFCFFFFFFFFF03CFFFFFFFFFFFFFFFFFFFFF010000
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC303
CFFFFFFFF3FFCCF030C30003FFFFFFFD4000000000CCC0000FCCFFFFFFFFFFFF
FFFFFF2AA02AA00000FFFFFFFFFFFFFFFFFFFFFFFFFFFFF0FFFFFFFFFFFFFFFC
FC44FC404444FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCFC
FFFFFCFCFCF0CCCCFCF040C0C0FCFCFFFFFFFFFFFFFF00C000FFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCF0000000000000000F00
00000010000000000000000000000000440313FFFFFFFFFFFFFFFFFF2AA02AA3
0000FFFFFFFFFFFFFFFFFFFFFFFFFFFF3333FF3FFFFFFFFF3333333333333333
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF3333F3F33FFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF33333333333333333
333333333333333333333F3FFFFFFF33FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFF3300030300000000000000000000000000
000000000000000003300FCFFFFFFFFFFFFFFFFFFF2AA02AA3000003FFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFC0FFFFFFFC0000000000100000000000000003
330FFFFFFFFFFFFFFFFFFFFFFFFF2AA02AA3301033FFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFC000CC000000003000F3FFFFFFFFFFFFFFF
FFFFFFFFFFFFFF2AA02AA3FC00FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFF33300003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
2AA02AA3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBBBFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF2AA02AA3FFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF2AA02AA3FFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFBFFFFFFFFFFFFFFFFFFFFFFFFFBFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFF2AA02AA3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFF2AA02AA3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBBBFBFBFBF
BFBFBFBFBBBFBFBFBBBBFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFBBBFBBBBBBBFBBBFBFBFBBBFBFBFBFBBBFBFFF2AA02A
A000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000002AA02AAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA02AAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAA02AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAA02AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA02AAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA00000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000
grestore end
%%EndFile
end end epssave restore
grestore
grestore
1 0 0 1 -98 145 sc5mt astore -217.5 69 867 222 0.566321 0 0 0.941441 163.174744 156.040527 sc6mt astore rstroke
/crlinw 1.5 def
1 0 0 1 1 8 sc5mt astore 491 0 39 191 1 0 0 1 1 8 sc6mt astore ssl
1 0 0 1 1 8 sc5mt astore 0 -9 40 200 1 0 0 1 1 8 sc6mt astore ssl
1 0 0 1 1 8 sc5mt astore 0 -9 98 200 1 0 0 1 1 8 sc6mt astore ssl
1 0 0 1 1 8 sc5mt astore 0 -9 135 200 1 0 0 1 1 8 sc6mt astore ssl
1 0 0 1 1 8 sc5mt astore 0 -9 333 200 1 0 0 1 1 8 sc6mt astore ssl
1 0 0 1 1 8 sc5mt astore 0 -9 285 200 1 0 0 1 1 8 sc6mt astore ssl
1 0 0 1 1 8 sc5mt astore 0 -9 148 200 1 0 0 1 1 8 sc6mt astore ssl
1 0 0 1 1 8 sc5mt astore 0 -9 529 200 1 0 0 1 1 8 sc6mt astore ssl
1 0 0 1 1 8 sc5mt astore 0 -9 392 200 1 0 0 1 1 8 sc6mt astore ssl
/txtdraw true def
/txlndraw true def
(s ) [7 0 0 0] 63 201 /Helvetica [ 14 1 mul 0 0 14 0 0 ] [1 0 0 1 2 2.210007] dotx
(tcl ) [3.891998 0 7 0 3.108002 0 0 0] 108 205 /Helvetica [ 14 1 mul 0 0 14 0 0 ] [1 0 0 1 3 -1.789993] dotx
(t ) [3.891998 0 0 0] 138 209 /Helvetica [ 14 1 mul 0 0 14 0 0 ] [1 0 0 1 2 -5.901993] dotx
(axr ) [7.783997 0 7 0 4.662003 0 0 0] 187 204 /Helvetica [ 14 1 mul 0 0 14 0 0 ] [1 0 0 1 17 -0.789993] dotx
(kcl ) [7 0 7 0 3.108002 0 0 0] 304 203 /Helvetica [ 14 1 mul 0 0 14 0 0 ] [1 0 0 1 -3 0.210007] dotx
(k ) [7 0 0 0] 349 202 /Helvetica [ 14 1 mul 0 0 14 0 0 ] [1 0 0 1 9 1] dotx
(iy ) [3.108002 0 7 0 0 0] 433 201 /Helvetica [ 14 1 mul 0 0 14 0 0 ] [1 0 0 1 18 1.996002] dotx
/crlinw 0.75 def
false [0.95082 0 0 1 -47.475403 41] sstrt
systemdict
begin
89 132 160 152 setbbox
92 151 moveto
92 151 98 134 98 134 curveto
98 134 147 134 147 134 curveto
147 134 153 151 153 151 curveto
end
/nspans 3 def [1 0 0 1 -52 41] splstroke
false [0.606557 0 0 1 43.196724 40] sstrt
systemdict
begin
89 132 160 152 setbbox
92 151 moveto
92 151 98 134 98 134 curveto
98 134 147 134 147 134 curveto
147 134 153 151 153 151 curveto
end
/nspans 3 def [1 0 0 1 -2 49] splstroke
false [0.229508 0 0 1 114.885246 40] sstrt
systemdict
begin
89 132 160 152 setbbox
92 151 moveto
92 151 98 134 98 134 curveto
98 134 147 134 147 134 curveto
147 134 153 151 153 151 curveto
end
/nspans 3 def [1 0 0 1 26 58] splstroke
false [0.868852 0 0 3.058824 18.065575 -271.882355] sstrt
systemdict
begin
89 132 160 152 setbbox
92 151 moveto
92 151 98 134 98 134 curveto
98 134 147 134 147 134 curveto
147 134 153 151 153 151 curveto
end
/nspans 3 def [1 0 0 1 -21 31] splstroke
false [1.262295 0 0 1 34.868858 40] sstrt
systemdict
begin
89 132 160 152 setbbox
92 151 moveto
92 151 98 134 98 134 curveto
98 134 147 134 147 134 curveto
147 134 153 151 153 151 curveto
end
/nspans 3 def [1 0 0 1 23 76] splstroke
false [1.081967 0 0 1 129.459015 40] sstrt
systemdict
begin
89 132 160 152 setbbox
92 151 moveto
92 151 98 134 98 134 curveto
98 134 147 134 147 134 curveto
147 134 153 151 153 151 curveto
end
/nspans 3 def [1 0 0 1 92 85] splstroke
false [2.377049 0 0 3.17647 -67.688499 -288.647034] sstrt
systemdict
begin
89 132 160 152 setbbox
92 151 moveto
92 151 98 134 98 134 curveto
98 134 147 134 147 134 curveto
147 134 153 151 153 151 curveto
end
/nspans 3 def [1 0 0 1 5 57] splstroke
false [0.721311 0 0 1 228.639343 40] sstrt
systemdict
begin
89 132 160 152 setbbox
92 151 moveto
92 151 98 134 98 134 curveto
98 134 147 134 147 134 curveto
147 134 153 151 153 151 curveto
end
/nspans 3 def [1 0 0 1 140 103] splstroke
false [0.836066 0 0 1 262.08197 40] sstrt
systemdict
begin
89 132 160 152 setbbox
92 151 moveto
92 151 98 134 98 134 curveto
98 134 147 134 147 134 curveto
147 134 153 151 153 151 curveto
end
/nspans 3 def [1 0 0 1 175 112] splstroke
false [2.295082 0 0 1 178.852463 39] sstrt
systemdict
begin
89 132 160 152 setbbox
92 151 moveto
92 151 98 134 98 134 curveto
98 134 147 134 147 134 curveto
147 134 153 151 153 151 curveto
end
/nspans 3 def [1 0 0 1 217 120] splstroke
/txtdraw true def
/txlndraw true def
(s 60 z 30 ) [6.5 0 3.613998 0 7.227997 0 7.227997 0 -24.569992 -15.028 6.5 0 3.613998 0 7.227997 0 7.227997 0 0 0] 58 158 /Helvetica [ 13 1 mul 0 0 13 0 0 ] [1 0 0 1 -2 4] dotx
(cl 100 ) [6.5 0 2.885986 0 3.614014 0 7.227997 0 7.227997 0 7.227997 0 0 0] 305 153 /Helvetica [ 13 1 mul 0 0 13 0 0 ] [1 0 0 1 -4 8] dotx
(k 54 g 32 ) [6.5 0 3.614014 0 7.227997 0 7.227997 0 -24.570007 -15.028 7.227997 0 3.614014 0 7.227997 0 7.227997 0 0 0] 356 151 /Helvetica [ 13 1 mul 0 0 13 0 0 ] [1 0 0 1 -3 10] dotx
(iy 44 ey 18 ih 22 ) [2.885986 0 6.5 0 3.614014 0 7.227997 0 7.227997 0 -27.455994 -15.028 6.967987 0 6.5 0 3.614014 0 7.227997 0 7.227997 0 -31.537994 -15.028 2.885986 0 7.227997 0 3.614014 0 7.227997 0 7.227997 0 0 0] 439 153 /Helvetica [ 13 1 mul 0 0 13 0 0 ] [1 0 0 1 4 7] dotx
(cl 98 ) [6.5 0 2.886002 0 3.613998 0 7.227997 0 7.227997 0 0 0] 112 155 /Helvetica [ 13 1 mul 0 0 13 0 0 ] [1 0 0 1 -8 7] dotx
(axr 67 ) [7.227997 0 6.5 0 4.328995 0 3.613998 0 7.227997 0 7.227997 0 0 0] 203 119 /Helvetica [ 13 1 mul 0 0 13 0 0 ] [1 0 0 1 2 6] dotx
(ah 47 ) [7.227997 0 7.227997 0 3.613998 0 7.227997 0 7.227997 0 0 0] 177 157 /Helvetica [ 13 1 mul 0 0 13 0 0 ] [1 0 0 1 -3 5] dotx
(r 83 ) [4.328995 0 3.613998 0 7.227997 0 7.227997 0 0 0] 250 159 /Helvetica [ 13 1 mul 0 0 13 0 0 ] [1 0 0 1 -1 3] dotx
(t 56 th 24 ) [3.613998 0 3.613998 0 7.227997 0 7.227997 0 -21.68399 -15.028 3.613998 0 7.227997 0 3.613998 0 7.227997 0 7.227997 0 0 0] 141 157 /Helvetica [ 13 1 mul 0 0 13 0 0 ] [1 0 0 1 -7 5] dotx
(th 15 ) [3.613998 0 7.227997 0 3.613998 0 7.227997 0 7.227997 0 0 0] 115 119 /Helvetica [ 13 1 mul 0 0 13 0 0 ] [1 0 0 1 -5 7] dotx
end
grestore
grestore
%%Trailer

%%EndDocument
 GE /Times-Bold SF
20044 43258 MT
(Figure 3-3:)SH
/Times-Roman SF
25817 XM
(Spectrogram and associated phoneme network.)SH
13300 46243 MT
(The acoustic-phonetic module was responsible for signal)
182 W( processing, feature extraction, seg-)181 W
10800 47982 MT
(mentation, and phonetic classification.  An)
37 W( example of the acoustic-phonetic module output is shown)38 W
10800 49721 MT
(in Figure 3-3.  The basic signal representation was DFT coefficients computed every)
55 W( 3 milliseconds,)54 W
10800 51460 MT
(plus amplitude)
232 W( and pitch information.  A broad-class phonetic network was generated from this)233 W
10800 53199 MT
(representation using an algorithm which combines rules and statistics)
163 W( [31].)
SH( For)
601 W( segmentation,)
163 W( the)162 W
10800 54938 MT
(DFT coefficients were smoothed in both time and frequency, and potential)
45 W( phonetic boundaries were)46 W
10800 56677 MT
(tagged at points where there was a large Euclidean distance between)
93 W( adjacent frames.  These boun-)92 W
10800 58416 MT
(daries defined seed regions which were)
155 W( combined on the basis of time-averaged spectra in an ag-)156 W
10800 60155 MT
(glomerative hierarchical clustering)
224 W( procedure to obtain a dendrogram)
223 W( [32].)
SH( A)
721 W( gaussian classifier)223 W
10800 61894 MT
(assigned broad class phonetic)
22 W( labels to the dendrogram segments, which were then pruned using a set)23 W
10800 63633 MT
(of rules to form a preliminary phonetic network.  A number of fine phonetic classification methods)96 W
10800 65372 MT
(were explored, including hand-crafted)
42 W( classifiers, single gaussian classifiers per broad class, pairwise)43 W
10800 67111 MT
(gaussian classifiers with a voting heuristic, and decision trees with gaussian classifiers at each node.)SH
13300 70096 MT
(The phonetic network was passed to)
4 W( the word hypothesizer module to generate word candidates.)3 W
10800 71835 MT
(As the network was traversed, it was matched against the task vocabulary stored in)
195 W( a lexicon to)196 W
ES
%%Page: 58 59
BS
0 SI
10 /Times-Roman AF
54800 4286 MT
(58)SH
11 SS 
10800 7955 MT
(produce a word lattice containing begin and)
26 W( end times, and an acoustic-phonetic score.  Each word in)25 W
10800 9694 MT
(the lexicon was)
211 W( stored as a network of phonetic events; multiple paths indicated where multiple)212 W
10800 11433 MT
(pronunciations were allowed.  A word's score was)
169 W( the cumulative cost of traversing a path in its)168 W
10800 13172 MT
(reference network.  The parsing module applied semantic and syntactic constraints imposed by)
125 W( the)126 W
10800 14911 MT
(language model to reduce the word lattice produced)
46 W( by the word module to a single sentence.  These)45 W
10800 16650 MT
(constraints were represented by second-order Markov models of sequences)
44 W( of syntactic and semantic)45 W
10800 18389 MT
(categories of word candidates [33].)SH
13 /Times-Bold AF
10800 22140 MT
(3.4. Adaptation Methodology and Empirical Predictions)SH
11 /Times-Roman AF
13300 25055 MT
(Speaker adaptation experiments are performed)
286 W( within the acoustic-phonetic module of the)285 W
9 SS 
10800 26794 MT
(ANGEL)SH
11 SS 
14197 XM
(system. By)
419 W( statistically characterizing the speaker-to-speaker variability of)
72 W( training data and)73 W
10800 28533 MT
(the variability)
45 W( of observations, the estimation procedures from the previous chapter can be applied to)44 W
10800 30272 MT
(adjust the fine phonetic classifiers.  Details of the)
50 W( supervised adaptation methodology are as follows.)51 W
10800 32011 MT
(The unsupervised adaptation methods employed in the)46 W
9 SS 
35409 XM
(PROPHET)SH
11 SS 
39730 XM
(and)SH
9 SS 
41639 XM
(SPIRIT)SH
11 SS 
44710 XM
(systems incorporate only)46 W
10800 33750 MT
(minor modifications to the supervised approach and are discussed in Section 3.6.)SH
366 1000 0 11700 58370 GB 
%%BeginDocument: /usr0/rozzi/Documentation/PhDThesis/Chapter3/DataPoints.eps
%!PS-Adobe-2.0 EPSF-1.2
%%Creator:Rozzi
%%Title:DataPoints.eps
%%Origin:0 720
%%BoundingBox: 0.000 0.000 590.000 640.000
%%EndComments
%
gsave
gsave
%
/Times-Roman findfont  16.0 scalefont setfont
%
% draw a box to enclose the graph
2 setlinewidth
580 10 moveto
10 10 lineto
10 635 lineto
580 635 lineto
closepath                                % makes sure corner isn't notched out
%
stroke
% label
525 35 moveto
(\(a\)) show


0.5 setlinewidth
%
1187 srand                             % initialize seed so random documents aren't produced
%class 1 data
gsave
375 220  translate                 % the origin is (375,220)
0 0 moveto                              % move to it 
650 -1 0                                   %start, increment, end
{rand  360 mod rotate           % move to a random angle (rand mod 360)
  rand  200 mod  0  lineto      % draw a line of random length (max 300) along the new axis
 0 0 moveto} for                      % go back to the origin
stroke
grestore
%
% class 2
gsave
275 320  translate
0 0 moveto 
650 -1 0
{rand  360 mod rotate
  rand  200 mod  0  lineto
 0 0 moveto} for
stroke
grestore
%
% class 3
gsave
225 420  translate
0 0 moveto 
650 -1 0
{rand  360 mod rotate
  rand  200 mod  0  lineto
 0 0 moveto} for
stroke
grestore
%
% draw classifier boundaries
gsave
4 setlinewidth
0.5 setgray
120 90 moveto
525 410 lineto
30 280 moveto
500 490 lineto
stroke
grestore
%
grestore
grestore
%%EOF

%%EndDocument
 GE 366 1000 0 33300 58370 GB 
%%BeginDocument: /usr0/rozzi/Documentation/PhDThesis/Chapter3/DrawingDists.eps
%!PS-Adobe-2.0 EPSF-1.2
%%Creator:Rozzi
%%Title:DataPoints.eps
%%Origin:0 720
%%BoundingBox: 0.000 0.000 590.000 640.000
%%EndComments
%
gsave
gsave
%
/Times-Roman findfont  16.0 scalefont setfont
%
% draw a box to enclose the graph
2 setlinewidth
580 10 moveto
10 10 lineto
10 635 lineto
580 635 lineto
closepath                                % makes sure corner isn't notched out
stroke
%
%
% Define function for drawing a speaker's datapoints
/drawStar {                              % numPoints  x-origin y-origin
gsave
translate                                  % move  the origin to the specified point
%(numPoints)
{ newpath
  0 0 moveto                            % go back to the origin
  rand  360 mod rotate           % move to a random angle (rand mod 360)
  rand  80 mod  0  lineto        % draw a line of random length (max 80) along the new axis
  stroke}repeat
grestore
} def
%
%
% Now define a function for drawing a class' datapoints
/drawClass {                           % numSpeakers  x-origin y-origin
gsave
translate                                  % move  the origin to the specified point
0 0 moveto                              % move to it 
%(numSpeakers)
{
rand  360 mod rotate           % move to a random angle (rand mod 360)
60  rand 120 mod  0  drawStar            % draw a star at a random length along x axis
}repeat
grestore
} def
%
%/shw{1. -1. scale show 1. -1. scale} def % to get text  orientation correctly
%
%
% try it out
0.5 setlinewidth
13 srand                             % initialize seed so random documents aren't produced
0.4 setgray
11 375 220 drawClass
0.3 setgray
11 275 320 drawClass
0.4 setgray
11 225 420 drawClass
0.0 setgray
40 400 190 drawStar
40 290 255 drawStar
40 225 380 drawStar
%
% Legend
4 setlinewidth
0.65 setgray
330 80 moveto
355 80 lineto
stroke
0.15 setgray
330 65 moveto
355 65 lineto
stroke
0.0 setgray
525 35 moveto
(\(b\)) show
360 76 moveto
(Speaker-Independent Boundary) show
360 61 moveto
(Adapted Boundary) show
%
% draw SI classifier boundaries
4 setlinewidth
0.65 setgray
120 90 moveto
525 410 lineto
30 280 moveto
500 490 lineto
stroke
%
% draw SA classifier boundaries
4 setlinewidth
0.15 setgray
200 80 moveto
525 390 lineto
75 180 moveto
520 465 lineto
stroke
%
grestore
grestore
%%EOF

%%EndDocument
 GE /Times-Bold SF
17021 60122 MT
(Figure 3-4:)SH
/Times-Roman SF
22794 XM
(Three classes of data from multiple speakers: \050a\051 pooled data)SH
20671 61318 MT
(and speaker-independent boundaries, and \050b\051 individual speakers' data)SH
26810 62514 MT
(and a single speaker's adapted boundaries.)SH
13300 65499 MT
(Let the set of observations)22 W
/Symbol SF
25293 XM
(c)SH
/Times-Roman SF
26194 XM
(be points in a D-dimensional hyperspace with feature values)
22 W( as the)23 W
10800 67238 MT
(axes. Parametric)
421 W( or hand-crafted classifiers divide)
73 W( this space into mutually exclusive regions.  Con-)72 W
10800 68977 MT
(sidering the data from C classes)
100 W( for many speakers, and assuming a multivariate Gaussian distribu-)101 W
10800 70716 MT
(tion, the data will appear as C possibly)
149 W( overlapping hyperellipsoidal clusters centered about the C)148 W
ES
%%Page: 59 60
BS
0 SI
10 /Times-Roman AF
54800 4286 MT
(59)SH
11 SS 
10800 7955 MT
(class means)203 W
/Symbol SF
16704 XM
(m)SH
/Times-Roman SF
17788 XM
(, as illustrated in Figure 3-4\050a\051 for C=3 and)
203 W( D=2.  Speaker-independent classifier)204 W
9 /Times-Italic AF
17338 8315 MT
(o)SH
11 /Times-Roman AF
10800 9694 MT
(boundaries are placed to minimize classification errors for this pooled data \050see)
104 W( the figure\051.  The C)103 W
10800 11433 MT
(clusters are actually composed of a number of)
37 W( smaller clusters, one per speaker, which are composed)38 W
10800 13172 MT
(of points distributed about)
37 W( the speaker's mean)36 W
/Symbol SF
31614 XM
(m)SH
/Times-Roman SF
(. Figure)
347 W( 3-4\050b\051 illustrates this point for a case with a)36 W
10800 14911 MT
(dogmatism of 1.0.  The gray distributions represent the data)
175 W( from multiple speakers for the three)176 W
10800 16650 MT
(classes, while the black distributions represent the data from a hypothetical speaker of)
74 W( interest.  The)73 W
10800 18389 MT
(speaker-independent classifier boundaries cut through)
79 W( a large portion of this speaker's data distribu-)80 W
10800 20128 MT
(tions, which would result in a significant error rate.  By replacing the)46 W
/Times-Italic SF
42037 XM
(a priori)46 W
/Times-Roman SF
45797 XM
(mean with)
46 W( an estimate)45 W
10800 21867 MT
(of the speaker's mean, it is possible to shift the classifier boundaries to)
9 W( orientations which are a closer)10 W
10800 23606 MT
(match to the speaker's data and reduce the error rate.)SH
900 1000 0 18000 39922 GB 
%%BeginDocument: /usr0/rozzi/Documentation/PhDThesis/Chapter3/ProbErr.eps
%!PS-Adobe-2.0 EPSF-1.2
%%BoundingBox: 0 0 340 168
%%Creator: Mathematica
%%Title: Clipboard
%%CreationDate: Never Never
%%EndComments
50 dict begin
/Mnodistort false def
/pageDashArray [4] def
/nullDashArray [] def

% Compute the minimum of two numbers.
/Mmin {         % p q Mmin min(p,q)
        2 copy          % p q p q
        gt              % p q p>q?
        { exch } if     % min(p,q) max(p,q)
        pop             % min(p,q)
} bind def


% Compute the maximum of two numbers.
/Mmax {         % p q Mmax max(p,q)
        2 copy          % p q p q
        lt              % p q p<q?
        { exch } if     % max(p,q) min(p,q)
        pop             % max(p,q)
} bind def

/Mpstart {
    MathPictureStart
} bind def
/Mpend {
    MathPictureEnd
} bind def
/Mscale {
    0 1 0 1
    5 -1 roll
    MathScale
} bind def
/Plain
        /Courier findfont
def
/Bold
        /Courier-Bold findfont
def
/Italic
        /Courier-Oblique findfont
def
/MathPictureStart {
        gsave
        newpath
        /Mtmatrix
        matrix currentmatrix
        def
        Plain
        Mfontsize scalefont
        setfont
0 setgray 0 setlinewidth
} bind def
/MathPictureEnd {
        grestore
} bind def
/Mdot {
        moveto
        0 0 rlineto
        stroke
} def
/Mtetra {
        moveto
        lineto
        lineto
        lineto
        fill
} def
/Metetra {
        moveto
        lineto
        lineto
        lineto
        closepath
        gsave
        fill
        grestore
        0 setgray
        stroke
} def
/Mistroke {
        flattenpath
        0 0 0
        {
        4 2 roll
        pop pop
        }
        {
        4 -1 roll
        2 index
        sub dup mul
        4 -1 roll
        2 index
        sub dup mul
        add sqrt
        4 -1 roll
        add
        3 1 roll
        }
        {
        stop
        }
        {
        stop
        }
        pathforall
        pop pop
        currentpoint
        stroke
        moveto
        currentdash
        3 -1 roll
        add
        setdash
} def
/Mfstroke {
        stroke
        currentdash
        pop 0
        setdash
} def
/Msboxa {
        newpath
        5 -1 roll
        Mvboxa
        pop
        6 -1 roll
        5 -1 roll
        4 -1 roll
        Msboxa1
        5 -3 roll
        Msboxa1
        [
        7 -2 roll
        [ 2 index 2 index
        10 -1 roll
        9 -1 roll
        ]
        6 1 roll
        5 -2 roll
        ]
} bind def
        
/Msboxa1 {
        sub
        2 div
        dup
        2 index
        1 add
        mul
        3 -1 roll
        -1 add
        3 -1 roll
        mul
} bind def
/Mvboxa {
        gsave
        newpath
        [ true
        3 -1 roll
        {
        Mbbox
        5 -1 roll
        {
        0
        5 1 roll
        }
        {
        7 -1 roll
        exch sub
        (m) stringwidth pop
        .3 mul
        sub
        7 1 roll
        6 -1 roll
        4 -1 roll
        Mmin
        3 -1 roll
        5 index
        add
        5 -1 roll
        4 -1 roll
        Mmax
        4 -1 roll
        }
        ifelse
        false
        }
        forall
        { stop } if
        counttomark
        1 add
        4 roll
        ]
        grestore
} bind def
/Mbbox {
        0 0 moveto
        false charpath
        flattenpath
        pathbbox
        newpath
} bind def
/Mmin {
        2 copy
        gt
        { exch } if
        pop
} bind def
/Mmax {
        2 copy
        lt
        { exch } if
        pop
} bind def
/Mshowa {
        4 -2 roll
        moveto
        2 index
        Mtmatrix setmatrix
        Mvboxa
        7 1 roll
        6 -1 roll
        5 -1 roll
        4 -1 roll
        Mshowa1
        4 1 roll
        Mshowa1
        rmoveto
        currentpoint
        0 1
        4 index length
        -1 add
        {
        2 index
        4 index
        2 index
        get
        3 index
        add
        moveto
        4 index
        exch get
        show
        } for
        pop pop pop pop
        Mgmatrix setmatrix
} bind def
/Mshowa1 {
        2 copy
        add
        4 1 roll
        sub
        mul
        sub
        -2 div
} bind def
/MathScale {
        Mwidth
        Mheight
        Mlp
        translate
        scale
        /Mgmatrix
        matrix currentmatrix
        def
        /Msaveaa exch def
        /Msavebb exch def
        /Msavecc exch def
        /Msavedd exch def
} bind def
/Mlp {
        3 copy
        Mlpfirst
        {
        Mnodistort
        {
        Mmin
        dup
        } if
        4 index
        2 index
        2 index
        Mlprun
        11 index
        11 -1 roll
        10 -4 roll
        Mlp1
        8 index
        9 -5 roll
        Mlp1
        4 -1 roll
        and
        { exit } if
        3 -1 roll
        pop pop
        } loop
        exch
        3 1 roll
        7 -3 roll
        pop pop pop
} bind def
/Mlpfirst {
        3 -1 roll
        dup length
        2 copy
        -2 add
        get
        aload
        pop pop pop
        4 -2 roll
        -1 add
        get
        aload
        pop pop pop
        6 -1 roll
        3 -1 roll
        5 -1 roll
        sub
        dup /MsaveAx exch def
        div
        4 1 roll
        exch sub
        dup /MsaveAy exch def
        div
} bind def
/Mlprun {
        2 copy
        4 index
        0 get
        dup
        4 1 roll
        Mlprun1
        3 copy
        8 -2 roll
        9 -1 roll
        {
        3 copy
        Mlprun1
        3 copy
        11 -3 roll
        /gt Mlpminmax
        8 3 roll
        11 -3 roll
        /lt Mlpminmax
        8 3 roll
        } forall
        pop pop pop pop
        3 1 roll
        pop pop
        aload pop
        5 -1 roll
        aload pop
        exch
        6 -1 roll
        Mlprun2
        8 2 roll
        4 -1 roll
        Mlprun2
        6 2 roll
        3 -1 roll
        Mlprun2
        4 2 roll
        exch
        Mlprun2
        6 2 roll
} bind def
/Mlprun1 {
        aload pop
        exch
        6 -1 roll
        5 -1 roll
        mul add
        4 -2 roll
        mul
        3 -1 roll
        add
} bind def
/Mlprun2 {
        2 copy
        add 2 div
        3 1 roll
        exch sub
} bind def
/Mlpminmax {
        cvx
        2 index
        6 index
        2 index
        exec
        {
        7 -3 roll
        4 -1 roll
        } if
        1 index
        5 index
        3 -1 roll
        exec
        {
        4 1 roll
        pop
        5 -1 roll
        aload
        pop pop
        4 -1 roll
        aload pop
        [
        8 -2 roll
        pop
        5 -2 roll
        pop
        6 -2 roll
        pop
        5 -1 roll
        ]
        4 1 roll
        pop
        }
        {
        pop pop pop
        } ifelse
} bind def
/Mlp1 {
        5 index
        3 index sub
        5 index
        2 index mul
        1 index
        le
        1 index
        0 le
        or
        dup
        not
        {
        1 index
        3 index div
        .99999 mul
        8 -1 roll
        pop
        7 1 roll
        }
        if
        8 -1 roll
        2 div
        7 -2 roll
        pop sub
        5 index
        6 -3 roll
        pop pop
        mul sub
        exch
} bind def
/Mfontsize      12 def
/Mleft          0.000000 def
/Mbottom        168.000000 def
/Mwidth         340.000000 def
/Mheight        168.000000 def
/Courier findfont 12 scalefont setfont
%!
%%Creator: Mathematica
%%AspectRatio: 0.61803 
MathPictureStart
% Scaling calculations
0.34127 0.07937 0.01472 0.5886 [
[(-4)] 0.02381 0.00222 0 1 Msboxa
[(-2)] 0.18254 0.00222 0 1 Msboxa
[(0)] 0.34127 0.00222 0 1 Msboxa
[(2)] 0.5 0.00222 0 1 Msboxa
[(4)] 0.65873 0.00222 0 1 Msboxa
[(6)] 0.81746 0.00222 0 1 Msboxa
[(8)] 0.97619 0.00222 0 1 Msboxa
[(x)] 1.00625 0.01472 -1 0 Msboxa
[(0.1)] 0.09067 0.13244 1 0 Msboxa
[(0.2)] 0.09067 0.25016 1 0 Msboxa
[(0.3)] 0.09067 0.36788 1 0 Msboxa
[(0.4)] 0.09067 0.4856 1 0 Msboxa
[(0.5)] 0.09067 0.60332 1 0 Msboxa
[(p\(x|c\))] 0.10317 0.65428 0 -1 Msboxa
[ -0.001 -0.001 0 0 ]
[ 1.001 0.61903 0 0 ]
] MathScale
% Start of Graphics
1 setlinecap
1 setlinejoin
newpath
%%Object: Graphics
[ ] 0 setdash
0 setgray
gsave
gsave
0.002 setlinewidth
0 0.01472 moveto
1 0.01472 lineto
stroke
0.02381 0.00847 moveto
0.02381 0.02097 lineto
stroke
0 setgray
%[(-4)] 0.02381 0.00222 0 1 Mshowa
0.18254 0.00847 moveto
0.18254 0.02097 lineto
stroke
0 setgray
%[(-2)] 0.18254 0.00222 0 1 Mshowa
0.34127 0.00847 moveto
0.34127 0.02097 lineto
stroke
0 setgray
%[(0)] 0.34127 0.00222 0 1 Mshowa
0.5 0.00847 moveto
0.5 0.02097 lineto
stroke
0 setgray
%[(2)] 0.5 0.00222 0 1 Mshowa
0.65873 0.00847 moveto
0.65873 0.02097 lineto
stroke
0 setgray
%[(4)] 0.65873 0.00222 0 1 Mshowa
0.81746 0.00847 moveto
0.81746 0.02097 lineto
stroke
0 setgray
%[(6)] 0.81746 0.00222 0 1 Mshowa
0.97619 0.00847 moveto
0.97619 0.02097 lineto
stroke
0 setgray
%[(8)] 0.97619 0.00222 0 1 Mshowa
0 setgray
[(x)] 1.00625 0.01472 -1 0 Mshowa
0.10317 0 moveto
0.10317 0.61803 lineto
stroke
0.09692 0.13244 moveto
0.10942 0.13244 lineto
stroke
0 setgray
%[(0.1)] 0.09067 0.13244 1 0 Mshowa
0.09692 0.25016 moveto
0.10942 0.25016 lineto
stroke
0 setgray
%[(0.2)] 0.09067 0.25016 1 0 Mshowa
0.09692 0.36788 moveto
0.10942 0.36788 lineto
stroke
0 setgray
%[(0.3)] 0.09067 0.36788 1 0 Mshowa
0.09692 0.4856 moveto
0.10942 0.4856 lineto
stroke
0 setgray
%[(0.4)] 0.09067 0.4856 1 0 Mshowa
0.09692 0.60332 moveto
0.10942 0.60332 lineto
stroke
0 setgray
%[(0.5)] 0.09067 0.60332 1 0 Mshowa
0 setgray
%[(p\(x|c\))] 0.10317 0.65428 0 -1 Mshowa
grestore
grestore
0 0 moveto
1 0 lineto
1 0.618034 lineto
0 0.618034 lineto
closepath
clip
newpath
0 setgray
gsave
gsave
gsave
% draw the threshold and labels
0 setgray
[(U)] 0.567 0.60332 1 0 Mshowa
[(A)] 0.613 0.60332 1 0 Mshowa
[(p\(x|c1\))] 0.34 0.4 0 -1 Mshowa
[(p\(x|c2\))] 0.87 0.4 0 -1 Mshowa
%[(1)] 0.587 0.246 0 -1 Mshowa
%[(2)] 0.61 0.04 0 -1 Mshowa
%[(3)] 0.549 0.04 0 -1 Mshowa
stroke
0.5 setgray
0.005 setlinewidth
0.56 0.0 moveto
0.56 0.57 lineto
stroke
0.25 setgray
0.606 0.0 moveto
0.606 0.57 lineto
stroke 
0.0 setgray
%done
0.004 setlinewidth
0.02381 0.01472 moveto
0.02629 0.01472 lineto
0.02877 0.01472 lineto
0.03125 0.01472 lineto
0.03373 0.01472 lineto
0.03621 0.01472 lineto
0.03869 0.01472 lineto
0.04117 0.01472 lineto
0.04365 0.01472 lineto
0.04613 0.01472 lineto
0.04861 0.01472 lineto
0.05109 0.01472 lineto
0.05357 0.01472 lineto
0.05605 0.01472 lineto
0.05853 0.01472 lineto
0.06101 0.01472 lineto
0.06349 0.01472 lineto
0.06597 0.01472 lineto
0.06845 0.01472 lineto
0.07093 0.01472 lineto
0.07341 0.01472 lineto
0.07589 0.01472 lineto
0.07837 0.01472 lineto
0.08085 0.01472 lineto
0.08333 0.01472 lineto
0.08581 0.01472 lineto
0.08829 0.01472 lineto
0.09077 0.01472 lineto
0.09325 0.01472 lineto
0.09573 0.01472 lineto
0.09821 0.01472 lineto
0.10069 0.01472 lineto
0.10317 0.01472 lineto
0.10565 0.01472 lineto
0.10813 0.01472 lineto
0.11062 0.01472 lineto
0.1131 0.01472 lineto
0.11558 0.01472 lineto
0.11806 0.01472 lineto
0.12302 0.01472 lineto
0.12798 0.01472 lineto
0.13294 0.01472 lineto
0.1379 0.01472 lineto
0.14286 0.01472 lineto
0.14782 0.01472 lineto
0.15278 0.01472 lineto
0.15774 0.01472 lineto
0.1627 0.01472 lineto
0.16766 0.01472 lineto
0.17262 0.01472 lineto
Mistroke
0.13 0. translate
0.17758 0.01472 lineto
0.18254 0.01472 lineto
0.1875 0.01472 lineto
0.19246 0.01472 lineto
0.19742 0.01472 lineto
0.20238 0.01472 lineto
0.20734 0.01473 lineto
0.2123 0.01473 lineto
0.21726 0.01473 lineto
0.22222 0.01474 lineto
0.22718 0.01475 lineto
0.23214 0.01476 lineto
0.2371 0.01477 lineto
0.24206 0.01479 lineto
0.24702 0.01481 lineto
0.25198 0.01483 lineto
0.25694 0.01487 lineto
0.2619 0.01491 lineto
0.26687 0.01497 lineto
0.27183 0.01504 lineto
0.27679 0.01513 lineto
0.28175 0.01524 lineto
0.28671 0.01537 lineto
0.29167 0.01554 lineto
0.29663 0.01575 lineto
0.30159 0.016 lineto
0.30655 0.01631 lineto
0.31151 0.01669 lineto
0.31647 0.01715 lineto
0.32143 0.01771 lineto
0.33135 0.01917 lineto
0.34127 0.02125 lineto
0.35119 0.02415 lineto
0.36111 0.02813 lineto
0.37103 0.03349 lineto
0.38095 0.04058 lineto
0.39087 0.04979 lineto
0.40079 0.06154 lineto
0.41071 0.07627 lineto
0.42063 0.09437 lineto
0.44048 0.14201 lineto
0.46032 0.20581 lineto
0.5 0.37172 lineto
0.51984 0.45902 lineto
0.52976 0.49889 lineto
0.53968 0.53416 lineto
0.5496 0.56335 lineto
0.55456 0.57527 lineto
0.55952 0.58521 lineto
0.56448 0.59306 lineto
Mistroke
0.56696 0.59618 lineto
0.56944 0.59874 lineto
0.57192 0.60074 lineto
0.57316 0.60153 lineto
0.5744 0.60217 lineto
0.57564 0.60267 lineto
0.57688 0.60303 lineto
0.57812 0.60325 lineto
0.57937 0.60332 lineto
0.58061 0.60325 lineto
0.58185 0.60303 lineto
0.58309 0.60267 lineto
0.58433 0.60217 lineto
0.58681 0.60074 lineto
0.58929 0.59874 lineto
0.59425 0.59306 lineto
0.59921 0.58521 lineto
0.60913 0.56335 lineto
0.61905 0.53416 lineto
0.65873 0.37172 lineto
0.67857 0.2842 lineto
0.69841 0.20581 lineto
0.71825 0.14201 lineto
0.72817 0.1162 lineto
0.7381 0.09437 lineto
0.74802 0.07627 lineto
0.75794 0.06154 lineto
0.76786 0.04979 lineto
0.77778 0.04058 lineto
0.7877 0.03349 lineto
0.79762 0.02813 lineto
0.80754 0.02415 lineto
0.81746 0.02125 lineto
0.82738 0.01917 lineto
0.83234 0.01838 lineto
0.8373 0.01771 lineto
0.84226 0.01715 lineto
0.84722 0.01669 lineto
0.85218 0.01631 lineto
0.85714 0.016 lineto
0.8621 0.01575 lineto
0.86706 0.01554 lineto
0.87202 0.01537 lineto
0.87698 0.01524 lineto
0.88194 0.01513 lineto
0.8869 0.01504 lineto
0.89187 0.01497 lineto
0.89683 0.01491 lineto
0.90179 0.01487 lineto
0.90675 0.01483 lineto
Mistroke
0.91171 0.01481 lineto
0.91667 0.01479 lineto
0.92163 0.01477 lineto
0.92659 0.01476 lineto
0.93155 0.01475 lineto
0.93651 0.01474 lineto
0.94147 0.01473 lineto
0.94643 0.01473 lineto
0.95139 0.01473 lineto
0.95635 0.01472 lineto
0.96131 0.01472 lineto
0.96627 0.01472 lineto
0.97123 0.01472 lineto
0.97619 0.01472 lineto
Mfstroke
grestore
grestore
gsave
gsave
0.004 setlinewidth
0.02381 0.01472 moveto
0.02629 0.01472 lineto
0.02877 0.01472 lineto
0.03125 0.01472 lineto
0.03373 0.01472 lineto
0.03621 0.01472 lineto
0.03869 0.01472 lineto
0.04365 0.01472 lineto
0.04861 0.01472 lineto
0.05357 0.01472 lineto
0.05853 0.01472 lineto
0.06349 0.01472 lineto
0.06845 0.01472 lineto
0.07341 0.01472 lineto
0.07837 0.01472 lineto
0.08333 0.01472 lineto
0.08829 0.01472 lineto
0.09325 0.01472 lineto
0.09821 0.01472 lineto
0.10317 0.01472 lineto
0.10813 0.01472 lineto
0.1131 0.01472 lineto
0.11806 0.01472 lineto
0.12302 0.01472 lineto
0.12798 0.01473 lineto
0.13294 0.01473 lineto
0.1379 0.01473 lineto
0.14286 0.01474 lineto
0.14782 0.01475 lineto
0.15278 0.01476 lineto
0.15774 0.01477 lineto
0.1627 0.01479 lineto
0.16766 0.01481 lineto
0.17262 0.01483 lineto
0.17758 0.01487 lineto
0.18254 0.01491 lineto
0.1875 0.01497 lineto
0.19246 0.01504 lineto
0.19742 0.01513 lineto
0.20238 0.01524 lineto
0.20734 0.01537 lineto
0.2123 0.01554 lineto
0.21726 0.01575 lineto
0.22222 0.016 lineto
0.22718 0.01631 lineto
0.23214 0.01669 lineto
0.2371 0.01715 lineto
0.24206 0.01771 lineto
0.25198 0.01917 lineto
0.2619 0.02125 lineto
Mistroke
0.27183 0.02415 lineto
0.28175 0.02813 lineto
0.29167 0.03349 lineto
0.30159 0.04058 lineto
0.31151 0.04979 lineto
0.32143 0.06154 lineto
0.33135 0.07627 lineto
0.34127 0.09437 lineto
0.36111 0.14201 lineto
0.38095 0.20581 lineto
0.42063 0.37172 lineto
0.44048 0.45902 lineto
0.4504 0.49889 lineto
0.46032 0.53416 lineto
0.47024 0.56335 lineto
0.4752 0.57527 lineto
0.48016 0.58521 lineto
0.48512 0.59306 lineto
0.4876 0.59618 lineto
0.49008 0.59874 lineto
0.49256 0.60074 lineto
0.4938 0.60153 lineto
0.49504 0.60217 lineto
0.49628 0.60267 lineto
0.49752 0.60303 lineto
0.49876 0.60325 lineto
0.5 0.60332 lineto
0.50124 0.60325 lineto
0.50248 0.60303 lineto
0.50372 0.60267 lineto
0.50496 0.60217 lineto
0.50744 0.60074 lineto
0.50992 0.59874 lineto
0.51488 0.59306 lineto
0.51984 0.58521 lineto
0.52976 0.56335 lineto
0.53968 0.53416 lineto
0.57937 0.37172 lineto
0.59921 0.2842 lineto
0.61905 0.20581 lineto
0.63889 0.14201 lineto
0.64881 0.1162 lineto
0.65873 0.09437 lineto
0.66865 0.07627 lineto
0.67857 0.06154 lineto
0.68849 0.04979 lineto
0.69841 0.04058 lineto
0.70833 0.03349 lineto
0.71825 0.02813 lineto
0.72817 0.02415 lineto
Mistroke
0.7381 0.02125 lineto
0.74802 0.01917 lineto
0.75298 0.01838 lineto
0.75794 0.01771 lineto
0.7629 0.01715 lineto
0.76786 0.01669 lineto
0.77282 0.01631 lineto
0.77778 0.016 lineto
0.78274 0.01575 lineto
0.7877 0.01554 lineto
0.79266 0.01537 lineto
0.79762 0.01524 lineto
0.80258 0.01513 lineto
0.80754 0.01504 lineto
0.8125 0.01497 lineto
0.81746 0.01491 lineto
0.82242 0.01487 lineto
0.82738 0.01483 lineto
0.83234 0.01481 lineto
0.8373 0.01479 lineto
0.84226 0.01477 lineto
0.84722 0.01476 lineto
0.85218 0.01475 lineto
0.85714 0.01474 lineto
0.8621 0.01473 lineto
0.86706 0.01473 lineto
0.87202 0.01473 lineto
0.87698 0.01472 lineto
0.88194 0.01472 lineto
0.8869 0.01472 lineto
0.89187 0.01472 lineto
0.89683 0.01472 lineto
0.90179 0.01472 lineto
0.90675 0.01472 lineto
0.91171 0.01472 lineto
0.91667 0.01472 lineto
0.92163 0.01472 lineto
0.92659 0.01472 lineto
0.93155 0.01472 lineto
0.93651 0.01472 lineto
0.94147 0.01472 lineto
0.94643 0.01472 lineto
0.95139 0.01472 lineto
0.95635 0.01472 lineto
0.95883 0.01472 lineto
0.96131 0.01472 lineto
0.96379 0.01472 lineto
0.96627 0.01472 lineto
0.96875 0.01472 lineto
0.97123 0.01472 lineto
Mistroke
0.97619 0.01472 lineto
Mfstroke
grestore
grestore
grestore
% End of Graphics
MathPictureEnd
%%EPS Trailer
end

%%EndDocument
 GE /Times-Bold SF
17322 41674 MT
(Figure 3-5:)SH
/Times-Roman SF
23095 XM
(Hypothetical within-class data distributions with unadapted)SH
27085 42870 MT
(\050U\051 and adapted \050A\051 decision boundaries.)SH
13300 45855 MT
(To provide some feeling for the potential gain)
24 W( due to this form of adaptation, consider again the)23 W
10800 47594 MT
(2-class, 1-feature case)
21 W( from Chapter 2.  Assume that the data from a particular speaker are distributed)22 W
10800 49333 MT
(as shown in Figure 3-5, and that the)
12 W( unadapted decision boundary is at the value indicated by)11 W
/Times-Italic SF
52234 XM
(U)SH
/Times-Roman SF
53314 XM
(in the)11 W
10800 51072 MT
(figure. The)
356 W( probability of error for this speaker would equal the area under the)41 W
/Times-Italic SF
46414 XM
(p)SH
/Times-Roman SF
(\050)SH
/Times-Italic SF
(x)SH
/Times-Roman SF
(|)SH
/Times-Italic SF
(c)SH
/Times-Roman SF
48976 XM
(\051 to the right of)41 W
9 /Times-Italic AF
48526 51432 MT
(1)SH
11 SS 
10800 52811 MT
(U)SH
/Times-Roman SF
(, plus the area under)65 W
/Times-Italic SF
21080 XM
(p)SH
/Times-Roman SF
(\050)SH
/Times-Italic SF
(x)SH
/Times-Roman SF
(|)SH
/Times-Italic SF
(c)SH
/Times-Roman SF
23642 XM
(\051 to the left of)64 W
/Times-Italic SF
30285 XM
(U)SH
/Times-Roman SF
(. Assuming)
403 W( equal prior probabilities)64 W
/Times-Italic SF
47870 XM
(p)SH
/Times-Roman SF
(\050)SH
/Times-Italic SF
(c)SH
/Times-Roman SF
49724 XM
(\051)
150 MX(=)
150 MX(0.5)
150 MX(=)SH
/Times-Italic SF
53305 XM
(p)SH
/Times-Roman SF
(\050)SH
/Times-Italic SF
(c)SH
/Times-Roman SF
55159 XM
(\051,)SH
9 /Times-Italic AF
23192 53171 MT
(2)SH
49274 XM
(1)SH
54709 XM
(2)SH
11 /Times-Roman AF
10800 54550 MT
(the unadapted probability of error would then be)SH
/Times-Italic SF
23545 56202 MT
(U)SH
/Symbol SF
24489 XM
(-)
150 MX(m)SH
/Times-Italic SF
29201 XM
(U)SH
/Symbol SF
30145 XM
(-)
150 MX(m)SH
9 /Times-Italic AF
25877 56562 MT
(1)SH
31533 XM
(2)SH
2782 50 23545 56947 UL
2782 50 29201 56947 UL
11 SS 
15200 57192 MT
(P)SH
/Times-Roman SF
17542 XM
(=)
150 MX(0.5 [1)175 W
/Symbol SF
21203 XM
(-)SH
/Times-Italic SF
21957 XM
(erf)SH
/Times-Roman SF
(\050 \051)
150 2507 WX(+)SH
/Times-Italic SF
27613 XM
(erf)SH
/Times-Roman SF
(\050 \051])2507 W
53693 XM
(\0503.1\051)SH
9 /Symbol AF
15872 57552 MT
(e)SH
/Times-Italic SF
(,un)SH
11 /Symbol AF
24604 57943 MT
(s)SH
30260 XM
(s)SH
/Times-Roman SF
10800 59682 MT
(where)SH
/Times-Italic SF
13761 XM
(erf)SH
/Times-Roman SF
(\050)SH
/Times-Italic SF
(x)SH
/Times-Roman SF
(\051 is the standard normal error function)SH
8 /Times-Italic AF
21068 61128 MT
(x)SH
7 /Times-Roman AF
23309 61362 MT
(2)SH
11 SS 
19166 61366 MT
(1)SH
9 /Symbol AF
22365 61689 MT
(-)SH
/Times-Italic SF
(u)SH
/Times-Roman SF
23659 XM
(/2)SH
1758 50 18562 61807 UL
11 /Times-Italic AF
15200 62052 MT
(erf)SH
/Times-Roman SF
(\050)SH
/Times-Italic SF
(x)SH
/Times-Roman SF
(\051)
150 MX(=)SH
/Times-Italic SF
21877 XM
(e)SH
24359 XM
(du)SH
/Times-Roman SF
53693 XM
(\0503.2\051)SH
1154 50 19166 62249 UL
20 /Symbol AF
20320 62612 MT
(\362)SH
8 SS 
20868 62993 MT
(-\245)SH
-2 SI
11 SS 
18562 63245 MT
(\326)SH
0 SI
/Times-Roman SF
(2)SH
/Symbol SF
(p)SH
/Times-Roman SF
10800 64984 MT
(If the)
135 W( speaker's mean values are estimated exactly, the adapted decision threshold will be midway)136 W
10800 66723 MT
(between the two class means as indicated by the line at)SH
/Times-Italic SF
35267 XM
(A)SH
/Times-Roman SF
(. The)
275 W( probability of error now becomes)SH
/Symbol SF
19900 68375 MT
(m)SH
21134 XM
(-)
150 MX(m)SH
9 /Times-Italic AF
20534 68735 MT
(1)SH
22522 XM
(2)SH
3072 50 19900 69120 UL
11 SS 
15200 69365 MT
(P)SH
/Times-Roman SF
17542 XM
(=)SH
/Times-Italic SF
18312 XM
(erf)SH
/Times-Roman SF
(\050 \051)2797 W
53693 XM
(\0503.3\051)SH
9 /Symbol AF
15872 69725 MT
(e)SH
/Times-Italic SF
(,ad)SH
11 /Times-Roman AF
20829 70116 MT
(2)SH
/Symbol SF
(s)SH
/Times-Roman SF
10800 71855 MT
(and the percentage change in the error rate is)SH
ES
%%Page: 60 61
BS
0 SI
10 /Times-Roman AF
54800 4286 MT
(60)SH
11 /Times-Italic AF
16793 7955 MT
(P)SH
/Symbol SF
19135 XM
(-)SH
/Times-Italic SF
19889 XM
(P)SH
9 /Symbol AF
17465 8315 MT
(e)SH
/Times-Italic SF
(,un)SH
/Symbol SF
20561 XM
(e)SH
/Times-Italic SF
(,ad)SH
5288 50 16793 8700 UL
11 /Symbol AF
15200 8945 MT
(D)SH
/Times-Roman SF
16023 XM
(=)SH
53693 XM
(\0503.4\051)SH
/Times-Italic SF
18341 9696 MT
(P)SH
9 /Symbol AF
19013 10056 MT
(e)SH
/Times-Italic SF
(,un)SH
11 /Times-Roman AF
10800 12631 MT
(An analytical solution for)17 W
/Symbol SF
22416 XM
(D)SH
/Times-Roman SF
23381 XM
(in terms of dogmatism, correlation, and)17 W
/Times-Italic SF
41141 XM
(a priori)16 W
/Times-Roman SF
44841 XM
(means is not possible.)16 W
/Symbol SF
55127 XM
(D)SH
/Times-Roman SF
10800 14370 MT
(was therefore averaged over 1000)
182 W( random values of)183 W
/Symbol SF
35346 XM
(m)SH
/Times-Roman SF
36438 XM
(for various values of correlation and dog-)183 W
10800 16109 MT
(matism, assuming)135 W
/Symbol SF
19291 XM
(|)
150 MX(m)SH
21345 XM
(-)
150 MX(m)SH
23783 XM
(|)SH
/Times-Roman SF
24153 XM
(=)
150 MX(1. The)
545 W( results are shown in Figure 3-6.  As one would)
135 W( expect, the)134 W
9 /Times-Italic AF
20295 16469 MT
(o1)SH
22733 XM
(o2)SH
11 /Times-Roman AF
10800 17848 MT
(error rate reduction decreases with)
194 W( increasing dogmatism since the variation of means around)195 W
/Symbol SF
54716 XM
(m)SH
9 /Times-Italic AF
55350 18208 MT
(o)SH
11 /Times-Roman AF
10800 19587 MT
(becomes smaller, making the unadapted boundary location a better match to the data.  The)
14 W( increase in)13 W
10800 21326 MT
(adaptation gains with respect to correlation occurs)
94 W( because as the correlation rises there is a greater)95 W
10800 23065 MT
(tendency for both class means to)
46 W( be located on the same side of the unadapted boundary, making the)45 W
10800 24804 MT
(unadapted error rate very large.)SH
546 1000 0 18000 46475 GB 
%%BeginDocument: /usr0/rozzi/Documentation/PhDThesis/Chapter3/PeChange.eps
%!PS-Adobe-2.0 EPSF-1.2
%%Creator:Rozzi
%%Title:f1.ps
%%Origin:0 720
%%BoundingBox: 0 0 560 375  %CHANGE?
%%EndComments

gsave

%some definitions necessary for Macintosh graphs
/gm{exch moveto} def
/gr{setgray} def
/lin {exch lineto}def   % y x
/ashw{1. -1. scale ashow 1. -1. scale} def
/shw{1. -1. scale show 1. -1. scale} def
/shwrotate{1. -1. scale 90 rotate show  -90 rotate 1. -1. scale} def
/setTxMode {pop} def

% adjust the coordinate system
-85.  455.000 translate %ADJUST?
0.92 -0.92 scale
/Times-Roman findfont  14.0 scalefont setfont

% <<MAC BODY GOES HERE; CONVERT show & ashow to shw & ashw! >>
% may have to get a few commands from the beginning of a file- be careful
%  to save the original .ps until complete!
%
487 575 gm
(Correlation) shw
255 110 gm
(% Reduction in Error Rate) shwrotate
stroke
%% legend
167 575 gm
(0.25) shw
277 575 gm
(1.0) shw
432 575 gm
(4.0) shw
%
458 138 gm
458 658 lin
98 658 lin
98 138 lin
458 138 lin
461 126 gm
(0)shw
386 138 gm
0 gr
386 143 lin
386 653 gm
386 658 lin
389 126 gm
1 setTxMode
(5)shw
314 138 gm
0 gr
314 143 lin
314 653 gm
314 658 lin
317 120 gm
1 setTxMode
(10)shw
242 138 gm
0 gr
242 143 lin
242 653 gm
242 658 lin
245 120 gm
1 setTxMode
(15)shw
170 138 gm
0 gr
170 143 lin
170 653 gm
170 658 lin
173 120 gm
1 setTxMode
(20)shw
101 120 gm
(25)shw
471 135 gm
(0.1)shw
458 203 gm
0 gr
454 203 lin
102 203 gm
98 203 lin
471 200 gm
1 setTxMode
(0.2)shw
458 268 gm
0 gr
454 268 lin
102 268 gm
98 268 lin
471 265 gm
1 setTxMode
(0.3)shw
458 333 gm
0 gr
454 333 lin
102 333 gm
98 333 lin
471 330 gm
1 setTxMode
(0.4)shw
458 398 gm
0 gr
454 398 lin
102 398 gm
98 398 lin
471 395 gm
1 setTxMode
(0.5)shw
458 463 gm
0 gr
454 463 lin
102 463 gm
98 463 lin
471 460 gm
1 setTxMode
(0.6)shw
458 528 gm
0 gr
454 528 lin
102 528 gm
98 528 lin
471 525 gm
1 setTxMode
(0.7)shw
458 593 gm
0 gr
454 593 lin
102 593 gm
98 593 lin
471 590 gm
1 setTxMode
(0.8)shw
471 655 gm
(0.9)shw
stroke
%first plot
345 138 gm
0 gr
2 setlinewidth
336 203 lin
312 268 lin
296 333 lin
275 398 lin
251 463 lin
233 528 lin
179 593 lin
153 658 lin
stroke
0.2 gr
%second plot
368 138 gm
368 143 lin
367 148 lin
367 153 lin
367 158 lin
366 163 lin
366 168 lin
366 173 lin
366 178 lin
365 183 lin
365 188 lin
365 193 lin
364 198 lin
364 203 lin
364 203 lin
363 208 lin
361 213 lin
360 218 lin
359 223 lin
357 228 lin
356 233 lin
355 238 lin
354 243 lin
352 248 lin
351 253 lin
350 258 lin
348 263 lin
347 268 lin
346 273 lin
345 278 lin
344 283 lin
343 288 lin
342 293 lin
341 298 lin
340 303 lin
339 308 lin
338 313 lin
337 318 lin
336 323 lin
335 328 lin
334 333 lin
334 333 lin
332 338 lin
330 343 lin
328 348 lin
325 353 lin
323 358 lin
321 363 lin
319 368 lin
317 373 lin
315 378 lin
312 383 lin
310 388 lin
308 393 lin
306 398 lin
305 403 lin
303 408 lin
302 413 lin
301 418 lin
299 423 lin
298 428 lin
297 433 lin
296 438 lin
294 443 lin
293 448 lin
292 453 lin
290 458 lin
289 463 lin
289 463 lin
289 468 lin
289 473 lin
289 478 lin
290 483 lin
290 488 lin
290 493 lin
290 498 lin
290 503 lin
290 508 lin
291 513 lin
291 518 lin
291 523 lin
291 528 lin
290 533 lin
290 538 lin
289 543 lin
289 548 lin
288 553 lin
287 558 lin
287 563 lin
286 568 lin
285 573 lin
285 578 lin
284 583 lin
284 588 lin
283 593 lin
283 593 lin
282 598 lin
281 603 lin
280 608 lin
279 613 lin
278 618 lin
277 623 lin
275 628 lin
274 633 lin
273 638 lin
272 643 lin
271 648 lin
270 653 lin
stroke
0.4 gr
%
% third plot
444 138 gm
444 142 lin
444 146 lin
444 150 lin
444 154 lin
444 158 lin
444 162 lin
444 166 lin
444 170 lin
443 174 lin
443 178 lin
443 182 lin
443 186 lin
443 190 lin
443 194 lin
443 198 lin
443 202 lin
443 206 lin
443 211 lin
442 216 lin
442 221 lin
442 226 lin
442 231 lin
441 236 lin
441 241 lin
441 246 lin
441 251 lin
441 256 lin
440 261 lin
440 266 lin
440 271 lin
440 275 lin
440 279 lin
440 283 lin
440 287 lin
440 291 lin
440 295 lin
440 299 lin
441 303 lin
441 307 lin
441 311 lin
441 315 lin
441 319 lin
441 323 lin
441 327 lin
441 331 lin
441 335 lin
441 339 lin
441 343 lin
441 347 lin
441 351 lin
441 355 lin
441 359 lin
441 363 lin
440 367 lin
440 371 lin
440 375 lin
440 379 lin
440 383 lin
440 387 lin
440 391 lin
440 395 lin
440 399 lin
440 404 lin
440 409 lin
440 414 lin
439 419 lin
439 424 lin
439 429 lin
439 434 lin
439 439 lin
439 444 lin
438 449 lin
438 454 lin
438 459 lin
438 464 lin
438 468 lin
438 472 lin
438 476 lin
438 480 lin
438 484 lin
438 488 lin
438 492 lin
437 496 lin
437 500 lin
437 504 lin
437 508 lin
437 512 lin
437 516 lin
437 520 lin
437 524 lin
437 528 lin
437 533 lin
437 538 lin
437 543 lin
438 548 lin
438 553 lin
438 558 lin
438 563 lin
438 568 lin
438 573 lin
439 578 lin
439 583 lin
439 588 lin
439 593 lin
439 598 lin
438 603 lin
438 608 lin
438 613 lin
437 618 lin
437 623 lin
437 628 lin
437 633 lin
436 638 lin
436 643 lin
436 648 lin
435 653 lin

stroke
grestore
%%EOF

%%EndDocument
 GE /Times-Bold SF
17756 48227 MT
(Figure 3-6:)SH
/Times-Roman SF
23529 XM
(Percentage reduction in error rate vs. correlation for three)SH
22881 49423 MT
(values of dogmatism, using the model from Equation \0502.60\051.)SH
13300 52408 MT
(Application of the)
52 W( above methodology within the feature-based recognition systems considered)53 W
10800 54147 MT
(in this chapter will be demonstrated for the class of)
15 W( front vowels /)14 W
/Times-Italic SF
(iy)SH
/Times-Roman SF
(,)SH
/Times-Italic SF
(ih)SH
/Times-Roman SF
(,)SH
/Times-Italic SF
(eh)SH
/Times-Roman SF
(/ which are known to exhibit)14 W
10800 55886 MT
(a fair degree of correlation between formant frequencies.  For the feature data statistics)
68 W( in Appendix)69 W
10800 57625 MT
(C, which were)
16 W( generated from context-independent front vowel formant data from the)15 W
9 SS 
49129 XM
(ANGEL)SH
11 SS 
52469 XM
(system,)SH
10800 59364 MT
(the average correlation between features is approximately 0.5.  The average dogmatism)
217 W( of these)218 W
10800 61103 MT
(features is 2.0.  Figure 3-7\050a\051 shows)
62 W( the distributions of the first and second formant mean values as)61 W
10800 62842 MT
(specified by the statistics, and 3-7\050b\051 illustrates the within-class)
68 W( data distributions for)69 W
/Symbol SF
49289 XM
(m)SH
/Times-Roman SF
50073 XM
(=)SH
/Symbol SF
50843 XM
(m)SH
/Times-Roman SF
51927 XM
(. In)
413 W( two)69 W
9 /Times-Italic AF
51477 63202 MT
(o)SH
11 /Times-Roman AF
10800 64581 MT
(dimensions these classes are highly confusable, and they remain so even as additional features)
136 W( are)135 W
10800 66320 MT
(included. Note)
441 W( that 3-7\050a\051 represents only the)
83 W( within-class correlation of the mean vector elements;)84 W
10800 68059 MT
(six dimensions would be necessary to graphically represent the full interaction of the three class)199 W
10800 69798 MT
(means.)SH
ES
%%Page: 61 62
BS
0 SI
10 /Times-Roman AF
54800 4286 MT
(61)SH
11 SS 
765 1000 0 11700 28773 GB 
%%BeginDocument: /usr0/rozzi/Documentation/PhDThesis/Chapter3/FVMuDists.eps
%!PS-Adobe-2.0 EPSF-1.2
%%BoundingBox: 0 0 282 282
%%Creator: Mathematica
%%Title: Clipboard
%%CreationDate: Never Never
%%EndComments
50 dict begin
/Mnodistort true def
/pageDashArray [4] def
/nullDashArray [] def

% Compute the minimum of two numbers.
/Mmin {         % p q Mmin min(p,q)
        2 copy          % p q p q
        gt              % p q p>q?
        { exch } if     % min(p,q) max(p,q)
        pop             % min(p,q)
} bind def


% Compute the maximum of two numbers.
/Mmax {         % p q Mmax max(p,q)
        2 copy          % p q p q
        lt              % p q p<q?
        { exch } if     % max(p,q) min(p,q)
        pop             % max(p,q)
} bind def

/Mpstart {
    MathPictureStart
} bind def
/Mpend {
    MathPictureEnd
} bind def
/Mscale {
    0 1 0 1
    5 -1 roll
    MathScale
} bind def
/Plain
        /Courier findfont
def
/Bold
        /Courier-Bold findfont
def
/Italic
        /Courier-Oblique findfont
def
/MathPictureStart {
        gsave
        newpath
        /Mtmatrix
        matrix currentmatrix
        def
        Plain
        Mfontsize scalefont
        setfont
0 setgray 0 setlinewidth
} bind def
/MathPictureEnd {
        grestore
} bind def
/Mdot {
        moveto
        0 0 rlineto
        stroke
} def
/Mtetra {
        moveto
        lineto
        lineto
        lineto
        fill
} def
/Metetra {
        moveto
        lineto
        lineto
        lineto
        closepath
        gsave
        fill
        grestore
        0 setgray
        stroke
} def
/Mistroke {
        flattenpath
        0 0 0
        {
        4 2 roll
        pop pop
        }
        {
        4 -1 roll
        2 index
        sub dup mul
        4 -1 roll
        2 index
        sub dup mul
        add sqrt
        4 -1 roll
        add
        3 1 roll
        }
        {
        stop
        }
        {
        stop
        }
        pathforall
        pop pop
        currentpoint
        stroke
        moveto
        currentdash
        3 -1 roll
        add
        setdash
} def
/Mfstroke {
        stroke
        currentdash
        pop 0
        setdash
} def
/Msboxa {
        newpath
        5 -1 roll
        Mvboxa
        pop
        6 -1 roll
        5 -1 roll
        4 -1 roll
        Msboxa1
        5 -3 roll
        Msboxa1
        [
        7 -2 roll
        [ 2 index 2 index
        10 -1 roll
        9 -1 roll
        ]
        6 1 roll
        5 -2 roll
        ]
} bind def
        
/Msboxa1 {
        sub
        2 div
        dup
        2 index
        1 add
        mul
        3 -1 roll
        -1 add
        3 -1 roll
        mul
} bind def
/Mvboxa {
        gsave
        newpath
        [ true
        3 -1 roll
        {
        Mbbox
        5 -1 roll
        {
        0
        5 1 roll
        }
        {
        7 -1 roll
        exch sub
        (m) stringwidth pop
        .3 mul
        sub
        7 1 roll
        6 -1 roll
        4 -1 roll
        Mmin
        3 -1 roll
        5 index
        add
        5 -1 roll
        4 -1 roll
        Mmax
        4 -1 roll
        }
        ifelse
        false
        }
        forall
        { stop } if
        counttomark
        1 add
        4 roll
        ]
        grestore
} bind def
/Mbbox {
        0 0 moveto
        false charpath
        flattenpath
        pathbbox
        newpath
} bind def
/Mmin {
        2 copy
        gt
        { exch } if
        pop
} bind def
/Mmax {
        2 copy
        lt
        { exch } if
        pop
} bind def
/Mshowa {
        4 -2 roll
        moveto
        2 index
        Mtmatrix setmatrix
        Mvboxa
        7 1 roll
        6 -1 roll
        5 -1 roll
        4 -1 roll
        Mshowa1
        4 1 roll
        Mshowa1
        rmoveto
        currentpoint
        0 1
        4 index length
        -1 add
        {
        2 index
        4 index
        2 index
        get
        3 index
        add
        moveto
        4 index
        exch get
        show
        } for
        pop pop pop pop
        Mgmatrix setmatrix
} bind def
/Mshowa1 {
        2 copy
        add
        4 1 roll
        sub
        mul
        sub
        -2 div
} bind def
/MathScale {
        Mwidth
        Mheight
        Mlp
        translate
        scale
        /Mgmatrix
        matrix currentmatrix
        def
        /Msaveaa exch def
        /Msavebb exch def
        /Msavecc exch def
        /Msavedd exch def
} bind def
/Mlp {
        3 copy
        Mlpfirst
        {
        Mnodistort
        {
        Mmin
        dup
        } if
        4 index
        2 index
        2 index
        Mlprun
        11 index
        11 -1 roll
        10 -4 roll
        Mlp1
        8 index
        9 -5 roll
        Mlp1
        4 -1 roll
        and
        { exit } if
        3 -1 roll
        pop pop
        } loop
        exch
        3 1 roll
        7 -3 roll
        pop pop pop
} bind def
/Mlpfirst {
        3 -1 roll
        dup length
        2 copy
        -2 add
        get
        aload
        pop pop pop
        4 -2 roll
        -1 add
        get
        aload
        pop pop pop
        6 -1 roll
        3 -1 roll
        5 -1 roll
        sub
        dup /MsaveAx exch def
        div
        4 1 roll
        exch sub
        dup /MsaveAy exch def
        div
} bind def
/Mlprun {
        2 copy
        4 index
        0 get
        dup
        4 1 roll
        Mlprun1
        3 copy
        8 -2 roll
        9 -1 roll
        {
        3 copy
        Mlprun1
        3 copy
        11 -3 roll
        /gt Mlpminmax
        8 3 roll
        11 -3 roll
        /lt Mlpminmax
        8 3 roll
        } forall
        pop pop pop pop
        3 1 roll
        pop pop
        aload pop
        5 -1 roll
        aload pop
        exch
        6 -1 roll
        Mlprun2
        8 2 roll
        4 -1 roll
        Mlprun2
        6 2 roll
        3 -1 roll
        Mlprun2
        4 2 roll
        exch
        Mlprun2
        6 2 roll
} bind def
/Mlprun1 {
        aload pop
        exch
        6 -1 roll
        5 -1 roll
        mul add
        4 -2 roll
        mul
        3 -1 roll
        add
} bind def
/Mlprun2 {
        2 copy
        add 2 div
        3 1 roll
        exch sub
} bind def
/Mlpminmax {
        cvx
        2 index
        6 index
        2 index
        exec
        {
        7 -3 roll
        4 -1 roll
        } if
        1 index
        5 index
        3 -1 roll
        exec
        {
        4 1 roll
        pop
        5 -1 roll
        aload
        pop pop
        4 -1 roll
        aload pop
        [
        8 -2 roll
        pop
        5 -2 roll
        pop
        6 -2 roll
        pop
        5 -1 roll
        ]
        4 1 roll
        pop
        }
        {
        pop pop pop
        } ifelse
} bind def
/Mlp1 {
        5 index
        3 index sub
        5 index
        2 index mul
        1 index
        le
        1 index
        0 le
        or
        dup
        not
        {
        1 index
        3 index div
        .99999 mul
        8 -1 roll
        pop
        7 1 roll
        }
        if
        8 -1 roll
        2 div
        7 -2 roll
        pop sub
        5 index
        6 -3 roll
        pop pop
        mul sub
        exch
} bind def
/Mfontsize      12 def
/Mleft          0.000000 def
/Mbottom        282.000000 def
/Mwidth         282.000000 def
/Mheight        282.000000 def
/Courier findfont 12 scalefont setfont
%!
%%Creator: Mathematica
%%AspectRatio: 1 
MathPictureStart
% Scaling calculations
-0.11111 0.00111 -0.36585 0.00049 [
[(200)] 0.11111 -0.0225 0 1 Msboxa
[(400)] 0.33333 -0.0225 0 1 Msboxa
[(600)] 0.55556 -0.0225 0 1 Msboxa
[(800)] 0.77778 -0.0225 0 1 Msboxa
[(1000)] 1 -0.0225 0 1 Msboxa
[(F1)] 1.15 -0.0225 0 1 Msboxa
[(F2)]  -0.0525 1.0  0 1 Msboxa
[(1000)] -0.0225 0.12195 1 0 Msboxa
[(1500)] -0.0225 0.36585 1 0 Msboxa
[(2000)] -0.0225 0.60976 1 0 Msboxa
[(2500)] -0.0225 0.85366 1 0 Msboxa
[ -0.01725 -0.01725 0 0 ]
[ 1.001 1.001 0 0 ]
] MathScale
% Start of Graphics
1 setlinecap
1 setlinejoin
newpath
%%Object: ContourGraphics
[ ] 0 setdash
0 setgray
gsave
0.002 setlinewidth
0 -0.01 moveto
1 -0.01 lineto
stroke
0.11111 -0.01625 moveto
0.11111 -0.00375 lineto
stroke
0 setgray
[(200)] 0.11111 -0.0225 0 1 Mshowa
0.33333 -0.01625 moveto
0.33333 -0.00375 lineto
stroke
0 setgray
[(400)] 0.33333 -0.0225 0 1 Mshowa
0.55556 -0.01625 moveto
0.55556 -0.00375 lineto
stroke
0 setgray
[(600)] 0.55556 -0.0225 0 1 Mshowa
0.77778 -0.01625 moveto
0.77778 -0.00375 lineto
stroke
0 setgray
[(800)] 0.77778 -0.0225 0 1 Mshowa
1 -0.01625 moveto
1 -0.00375 lineto
stroke
0 setgray
[(1000)] 1 -0.0225 0 1 Mshowa
[(F1)] 1.15  -0.0225 0 1 Mshowa
[(F2)]  -0.0525 1.0 0 1 Mshowa
[(/iy/)] 0.11  0.7525 0 1 Mshowa
[(/ih/)] 0.12  0.3025 0 1 Mshowa
[(/eh/)] 0.88 0.4225 0 1 Mshowa
-0.01 0 moveto
-0.01 1 lineto
stroke
-0.01625 0.12195 moveto
-0.00375 0.12195 lineto
stroke
0 setgray
[(1000)] -0.0225 0.12195 1 0 Mshowa
-0.01625 0.36585 moveto
-0.00375 0.36585 lineto
stroke
0 setgray
[(1500)] -0.0225 0.36585 1 0 Mshowa
-0.01625 0.60976 moveto
-0.00375 0.60976 lineto
stroke
0 setgray
[(2000)] -0.0225 0.60976 1 0 Mshowa
-0.01625 0.85366 moveto
-0.00375 0.85366 lineto
stroke
0 setgray
[(2500)] -0.0225 0.85366 1 0 Mshowa
grestore
0 0 moveto
1 0 lineto
1 1 lineto
0 1 lineto
closepath
clip
% the EH contours
newpath
0.4 setgray
0.004 setlinewidth
0.29041 0.15789 moveto
0.29667 0.14662 0.30723 0.13835 0.31579 0.1287 curveto
stroke
0.27246 0.21053 moveto
0.27465 0.19212 0.2814 0.1741 0.29041 0.15789 curveto
stroke
0.29453 0.21053 moveto
0.29705 0.19713 0.31079 0.18828 0.31579 0.17561 curveto
stroke
0.27036 0.26316 moveto
0.26996 0.2456 0.27039 0.22796 0.27246 0.21053 curveto
stroke
0.28666 0.26316 moveto
0.28658 0.24542 0.29125 0.22796 0.29453 0.21053 curveto
stroke
0.30297 0.26316 moveto
0.303 0.24586 0.31244 0.22985 0.31579 0.21288 curveto
stroke
0.27482 0.31579 moveto
0.27307 0.29827 0.27076 0.28076 0.27036 0.26316 curveto
stroke
0.2947 0.31579 moveto
0.29291 0.29813 0.28674 0.2809 0.28666 0.26316 curveto
stroke
0.31458 0.31579 moveto
0.31276 0.29792 0.30293 0.28112 0.30297 0.26316 curveto
stroke
0.29166 0.36842 moveto
0.28866 0.35025 0.27665 0.33412 0.27482 0.31579 curveto
stroke
0.31579 0.35415 moveto
0.31371 0.33971 0.29617 0.33031 0.2947 0.31579 curveto
stroke
0.31579 0.318 moveto
0.3157 0.31716 0.31466 0.31662 0.31458 0.31579 curveto
stroke
0.31579 0.40113 moveto
0.31328 0.38781 0.29387 0.38179 0.29166 0.36842 curveto
stroke
0.36756 0.10526 moveto
0.36789 0.10522 0.36809 0.10479 0.36842 0.10474 curveto
stroke
0.31579 0.1287 moveto
0.32836 0.11452 0.3488 0.10793 0.36756 0.10526 curveto
stroke
0.32618 0.15789 moveto
0.33944 0.14528 0.35097 0.12833 0.36842 0.1228 curveto
stroke
0.34744 0.15789 moveto
0.35529 0.15332 0.35997 0.14382 0.36842 0.14047 curveto
stroke
0.31579 0.17561 moveto
0.3183 0.16924 0.32122 0.16261 0.32618 0.15789 curveto
stroke
0.31602 0.21053 moveto
0.32039 0.19057 0.32979 0.16818 0.34744 0.15789 curveto
stroke
0.32239 0.21053 moveto
0.32979 0.18845 0.34716 0.16747 0.36842 0.15799 curveto
stroke
0.32876 0.21053 moveto
0.33669 0.1921 0.35134 0.17578 0.36842 0.16526 curveto
stroke
0.33513 0.21053 moveto
0.34277 0.19552 0.35504 0.18275 0.36842 0.17253 curveto
stroke
0.3415 0.21053 moveto
0.3483 0.19873 0.35826 0.18887 0.36842 0.1798 curveto
stroke
0.34787 0.21053 moveto
0.35343 0.20174 0.3611 0.19445 0.36842 0.18707 curveto
stroke
0.35424 0.21053 moveto
0.35828 0.2046 0.36362 0.19967 0.36842 0.19434 curveto
stroke
0.31579 0.21288 moveto
0.31594 0.21211 0.31586 0.2113 0.31602 0.21053 curveto
stroke
0.31649 0.26316 moveto
0.3167 0.24551 0.31678 0.22727 0.32239 0.21053 curveto
stroke
0.31975 0.26316 moveto
0.32047 0.24537 0.32173 0.22688 0.32876 0.21053 curveto
stroke
0.32301 0.26316 moveto
0.32416 0.24519 0.32697 0.22657 0.33513 0.21053 curveto
stroke
0.32627 0.26316 moveto
0.32779 0.24496 0.33239 0.22635 0.3415 0.21053 curveto
stroke
0.32953 0.26316 moveto
0.33138 0.24467 0.33794 0.22623 0.34787 0.21053 curveto
stroke
0.33279 0.26316 moveto
0.33494 0.24434 0.34357 0.22618 0.35424 0.21053 curveto
stroke
0.31842 0.31579 moveto
0.31676 0.29831 0.31628 0.28071 0.31649 0.26316 curveto
stroke
0.32122 0.31579 moveto
0.31967 0.29831 0.31904 0.28069 0.31975 0.26316 curveto
stroke
0.32402 0.31579 moveto
0.32254 0.2983 0.32189 0.28067 0.32301 0.26316 curveto
stroke
0.32682 0.31579 moveto
0.32541 0.2983 0.32481 0.28064 0.32627 0.26316 curveto
stroke
0.32963 0.31579 moveto
0.32826 0.2983 0.32779 0.28061 0.32953 0.26316 curveto
stroke
0.33243 0.31579 moveto
0.33111 0.29829 0.3308 0.28059 0.33279 0.26316 curveto
stroke
0.31579 0.35415 moveto
0.31647 0.35889 0.31656 0.36371 0.31737 0.36842 curveto
stroke
0.31579 0.318 moveto
0.31753 0.33482 0.31838 0.35178 0.32136 0.36842 curveto
stroke
0.32536 0.36842 moveto
0.32217 0.35102 0.32009 0.33341 0.31842 0.31579 curveto
stroke
0.32936 0.36842 moveto
0.3261 0.35097 0.3228 0.33347 0.32122 0.31579 curveto
stroke
0.33335 0.36842 moveto
0.33005 0.35091 0.32552 0.33354 0.32402 0.31579 curveto
stroke
0.33735 0.36842 moveto
0.334 0.35085 0.32827 0.33362 0.32682 0.31579 curveto
stroke
0.34134 0.36842 moveto
0.33796 0.35077 0.33102 0.33371 0.32963 0.31579 curveto
stroke
0.34534 0.36842 moveto
0.34192 0.35068 0.33379 0.3338 0.33243 0.31579 curveto
stroke
0.31579 0.40113 moveto
0.31704 0.40775 0.31767 0.4145 0.31926 0.42105 curveto
stroke
0.32867 0.42105 moveto
0.32405 0.40371 0.32041 0.38611 0.31737 0.36842 curveto
stroke
0.33808 0.42105 moveto
0.33319 0.40331 0.32461 0.38654 0.32136 0.36842 curveto
stroke
0.34749 0.42105 moveto
0.34235 0.40273 0.32879 0.38714 0.32536 0.36842 curveto
stroke
0.3569 0.42105 moveto
0.3515 0.402 0.33299 0.38789 0.32936 0.36842 curveto
stroke
0.36631 0.42105 moveto
0.36063 0.40115 0.33719 0.38876 0.33335 0.36842 curveto
stroke
0.36842 0.41628 moveto
0.36342 0.39793 0.34091 0.38711 0.33735 0.36842 curveto
stroke
0.36842 0.41012 moveto
0.36428 0.39407 0.34447 0.3847 0.34134 0.36842 curveto
stroke
0.36842 0.40397 moveto
0.36506 0.39025 0.34802 0.38229 0.34534 0.36842 curveto
stroke
0.34163 0.47368 moveto
0.33528 0.45571 0.32375 0.43958 0.31926 0.42105 curveto
stroke
0.36842 0.47058 moveto
0.36142 0.4506 0.33413 0.44151 0.32867 0.42105 curveto
stroke
0.36842 0.45886 moveto
0.36347 0.44348 0.34238 0.43663 0.33808 0.42105 curveto
stroke
0.36842 0.44713 moveto
0.36517 0.43647 0.3505 0.43178 0.34749 0.42105 curveto
stroke
0.36842 0.43541 moveto
0.36669 0.42952 0.35858 0.42695 0.3569 0.42105 curveto
stroke
0.36842 0.42368 moveto
0.36811 0.4226 0.36662 0.42213 0.36631 0.42105 curveto
stroke
0.36842 0.5038 moveto
0.36366 0.49124 0.3461 0.48635 0.34163 0.47368 curveto
stroke
0.36842 0.10474 moveto
0.38592 0.1023 0.40341 0.09771 0.42105 0.09853 curveto
stroke
0.36842 0.1228 moveto
0.38534 0.11745 0.40331 0.11476 0.42105 0.11482 curveto
stroke
0.36842 0.14047 moveto
0.38537 0.13373 0.40281 0.12582 0.42105 0.12548 curveto
stroke
0.36876 0.15789 moveto
0.38605 0.15032 0.40218 0.13672 0.42105 0.13614 curveto
stroke
0.39438 0.15789 moveto
0.40387 0.15627 0.41143 0.14717 0.42105 0.1468 curveto
stroke
0.42 0.15789 moveto
0.42038 0.15788 0.42067 0.15747 0.42105 0.15746 curveto
stroke
0.36842 0.15799 moveto
0.36853 0.15794 0.36865 0.15794 0.36876 0.15789 curveto
stroke
0.36842 0.16526 moveto
0.37608 0.16054 0.38551 0.15941 0.39438 0.15789 curveto
stroke
0.36842 0.17253 moveto
0.38262 0.16168 0.40215 0.15876 0.42 0.15789 curveto
stroke
0.36842 0.1798 moveto
0.38234 0.16738 0.40245 0.16215 0.42105 0.16076 curveto
stroke
0.36842 0.18707 moveto
0.38194 0.17346 0.40196 0.16569 0.42105 0.16375 curveto
stroke
0.36842 0.19434 moveto
0.38169 0.17964 0.4014 0.1692 0.42105 0.16674 curveto
stroke
0.36842 0.41628 moveto
0.36885 0.41785 0.36899 0.41949 0.36944 0.42105 curveto
stroke
0.36842 0.41012 moveto
0.36935 0.41373 0.3697 0.41748 0.37076 0.42105 curveto
stroke
0.36842 0.40397 moveto
0.36981 0.40962 0.37039 0.41548 0.37207 0.42105 curveto
stroke
0.36842 0.47058 moveto
0.36878 0.4716 0.369 0.47267 0.36938 0.47368 curveto
stroke
0.36842 0.45886 moveto
0.37001 0.46378 0.37107 0.46889 0.37301 0.47368 curveto
stroke
0.36842 0.44713 moveto
0.37113 0.45599 0.37302 0.46515 0.37663 0.47368 curveto
stroke
0.36842 0.43541 moveto
0.3722 0.44822 0.37492 0.46144 0.38026 0.47368 curveto
stroke
0.36842 0.42368 moveto
0.37324 0.44045 0.37678 0.45775 0.38388 0.47368 curveto
stroke
0.38751 0.47368 moveto
0.37985 0.45679 0.37463 0.43886 0.36944 0.42105 curveto
stroke
0.39113 0.47368 moveto
0.38328 0.45659 0.37612 0.43909 0.37076 0.42105 curveto
stroke
0.39476 0.47368 moveto
0.38672 0.45635 0.37761 0.43934 0.37207 0.42105 curveto
stroke
0.36842 0.5038 moveto
0.37129 0.51137 0.37367 0.51918 0.37748 0.52632 curveto
stroke
0.39397 0.52632 moveto
0.38431 0.50954 0.37615 0.49183 0.36938 0.47368 curveto
stroke
0.41045 0.52632 moveto
0.39951 0.50777 0.38106 0.49365 0.37301 0.47368 curveto
stroke
0.42105 0.52483 moveto
0.40965 0.50533 0.38542 0.49448 0.37663 0.47368 curveto
stroke
0.42105 0.52065 moveto
0.41089 0.50258 0.38854 0.49269 0.38026 0.47368 curveto
stroke
0.42105 0.51648 moveto
0.412 0.49989 0.39157 0.49094 0.38388 0.47368 curveto
stroke
0.42105 0.5123 moveto
0.41303 0.49726 0.39455 0.48922 0.38751 0.47368 curveto
stroke
0.42105 0.50813 moveto
0.41401 0.49465 0.39748 0.48751 0.39113 0.47368 curveto
stroke
0.42105 0.50396 moveto
0.41494 0.49207 0.40038 0.48581 0.39476 0.47368 curveto
stroke
0.42105 0.57301 moveto
0.40927 0.55528 0.38752 0.54509 0.37748 0.52632 curveto
stroke
0.42105 0.55534 moveto
0.41411 0.54408 0.40057 0.53778 0.39397 0.52632 curveto
stroke
0.42105 0.53767 moveto
0.41839 0.53323 0.41309 0.53078 0.41045 0.52632 curveto
stroke
0.42105 0.09853 moveto
0.42655 0.09879 0.43065 0.10487 0.43614 0.10526 curveto
stroke
0.47368 0.10844 moveto
0.46126 0.10657 0.44867 0.10617 0.43614 0.10526 curveto
stroke
0.42105 0.11482 moveto
0.43871 0.11489 0.45621 0.11826 0.47368 0.12082 curveto
stroke
0.42105 0.12548 moveto
0.43878 0.12516 0.45614 0.13066 0.47368 0.13321 curveto
stroke
0.42105 0.13614 moveto
0.43887 0.13559 0.45604 0.14304 0.47368 0.14559 curveto
stroke
0.42105 0.1468 moveto
0.43886 0.14611 0.45571 0.15537 0.47335 0.15789 curveto
stroke
0.42105 0.15746 moveto
0.42176 0.15743 0.42382 0.15787 0.42312 0.15789 curveto
stroke
0.47368 0.15791 moveto
0.47357 0.15789 0.47346 0.15791 0.47335 0.15789 curveto
stroke
0.47368 0.16034 moveto
0.45696 0.15805 0.40625 0.1585 0.42312 0.15789 curveto
stroke
0.42105 0.16076 moveto
0.43856 0.15946 0.45628 0.16049 0.47368 0.16277 curveto
stroke
0.42105 0.16375 moveto
0.43851 0.16198 0.45627 0.16301 0.47368 0.16519 curveto
stroke
0.42105 0.16674 moveto
0.43846 0.16457 0.45626 0.16552 0.47368 0.16762 curveto
stroke
0.42105 0.52483 moveto
0.42134 0.52531 0.42158 0.52583 0.42187 0.52632 curveto
stroke
0.42105 0.52065 moveto
0.42211 0.52253 0.423 0.5245 0.42416 0.52632 curveto
stroke
0.42105 0.51648 moveto
0.42284 0.51976 0.42438 0.5232 0.42644 0.52632 curveto
stroke
0.42105 0.5123 moveto
0.42356 0.517 0.42573 0.52192 0.42873 0.52632 curveto
stroke
0.42105 0.50813 moveto
0.42426 0.51426 0.42706 0.52065 0.43102 0.52632 curveto
stroke
0.42105 0.50396 moveto
0.42494 0.51151 0.42837 0.5194 0.4333 0.52632 curveto
stroke
0.42105 0.57301 moveto
0.42238 0.57501 0.42364 0.57707 0.42515 0.57895 curveto
stroke
0.42105 0.55534 moveto
0.42607 0.56347 0.43091 0.57185 0.43732 0.57895 curveto
stroke
0.42105 0.53767 moveto
0.42965 0.552 0.43802 0.5668 0.44949 0.57895 curveto
stroke
0.46166 0.57895 moveto
0.44638 0.56312 0.43329 0.54511 0.42187 0.52632 curveto
stroke
0.47368 0.57892 moveto
0.45684 0.5617 0.43711 0.54662 0.42416 0.52632 curveto
stroke
0.47368 0.57649 moveto
0.45785 0.55985 0.43913 0.54546 0.42644 0.52632 curveto
stroke
0.47368 0.57406 moveto
0.4588 0.55806 0.44105 0.54437 0.42873 0.52632 curveto
stroke
0.47368 0.57163 moveto
0.45969 0.55631 0.44291 0.54332 0.43102 0.52632 curveto
stroke
0.47368 0.5692 moveto
0.46056 0.5546 0.44471 0.5423 0.4333 0.52632 curveto
stroke
0.47368 0.62839 moveto
0.45653 0.61293 0.43956 0.59699 0.42515 0.57895 curveto
stroke
0.47368 0.61599 moveto
0.46128 0.60393 0.44891 0.59179 0.43732 0.57895 curveto
stroke
0.47368 0.6036 moveto
0.46554 0.59546 0.45739 0.58732 0.44949 0.57895 curveto
stroke
0.47368 0.5912 moveto
0.46966 0.58713 0.46563 0.58306 0.46166 0.57895 curveto
stroke
0.47368 0.10844 moveto
0.49162 0.11113 0.50879 0.11759 0.52632 0.12227 curveto
stroke
0.47368 0.12082 moveto
0.49349 0.12373 0.507 0.14449 0.52632 0.14976 curveto
stroke
0.47368 0.13321 moveto
0.48888 0.13542 0.4976 0.15451 0.51258 0.15789 curveto
stroke
0.47368 0.14559 moveto
0.48126 0.14669 0.48553 0.15655 0.49307 0.15789 curveto
stroke
0.52632 0.16058 moveto
0.52182 0.15933 0.51713 0.15892 0.51258 0.15789 curveto
stroke
0.52632 0.1644 moveto
0.51545 0.16133 0.50418 0.15988 0.49307 0.15789 curveto
stroke
0.47368 0.15791 moveto
0.49138 0.16047 0.50913 0.1633 0.52632 0.16821 curveto
stroke
0.47368 0.16034 moveto
0.49149 0.16277 0.50905 0.16705 0.52632 0.17203 curveto
stroke
0.47368 0.16277 moveto
0.49161 0.1651 0.50895 0.17081 0.52632 0.17585 curveto
stroke
0.47368 0.16519 moveto
0.49174 0.16745 0.50885 0.17457 0.52632 0.17966 curveto
stroke
0.47368 0.16762 moveto
0.49188 0.16982 0.50873 0.17834 0.52632 0.18348 curveto
stroke
0.47368 0.57892 moveto
0.47369 0.57893 0.4737 0.57894 0.47371 0.57895 curveto
stroke
0.47368 0.57649 moveto
0.47447 0.57732 0.47527 0.57815 0.47609 0.57895 curveto
stroke
0.47368 0.57406 moveto
0.47524 0.57573 0.4768 0.57739 0.47846 0.57895 curveto
stroke
0.47368 0.57163 moveto
0.47598 0.57415 0.47831 0.57665 0.48084 0.57895 curveto
stroke
0.47368 0.5692 moveto
0.47672 0.57258 0.47981 0.57594 0.48322 0.57895 curveto
stroke
0.47368 0.62839 moveto
0.47491 0.62949 0.47617 0.63056 0.47747 0.63158 curveto
stroke
0.47368 0.61599 moveto
0.47946 0.62161 0.48551 0.62705 0.49218 0.63158 curveto
stroke
0.47368 0.6036 moveto
0.48392 0.61383 0.4947 0.62377 0.50689 0.63158 curveto
stroke
0.47368 0.5912 moveto
0.48836 0.60607 0.50387 0.62054 0.5216 0.63158 curveto
stroke
0.52632 0.63001 moveto
0.50564 0.61698 0.49081 0.59641 0.47371 0.57895 curveto
stroke
0.52632 0.62771 moveto
0.5067 0.61507 0.4928 0.59523 0.47609 0.57895 curveto
stroke
0.52632 0.6254 moveto
0.50773 0.61321 0.49468 0.59415 0.47846 0.57895 curveto
stroke
0.52632 0.62309 moveto
0.50873 0.61139 0.49648 0.59315 0.48084 0.57895 curveto
stroke
0.52632 0.62079 moveto
0.50971 0.6096 0.49822 0.59221 0.48322 0.57895 curveto
stroke
0.52632 0.67853 moveto
0.50666 0.6674 0.49522 0.64554 0.47747 0.63158 curveto
stroke
0.52632 0.66439 moveto
0.51278 0.65628 0.50524 0.64044 0.49218 0.63158 curveto
stroke
0.52632 0.65025 moveto
0.51865 0.64557 0.51445 0.63643 0.50689 0.63158 curveto
stroke
0.52632 0.63611 moveto
0.52446 0.63497 0.52345 0.63273 0.5216 0.63158 curveto
stroke
0.52632 0.12227 moveto
0.54421 0.12704 0.55145 0.15181 0.56894 0.15789 curveto
stroke
0.52632 0.14976 moveto
0.53039 0.15087 0.53198 0.15675 0.53605 0.15789 curveto
stroke
0.57895 0.16139 moveto
0.57569 0.16002 0.57228 0.15906 0.56894 0.15789 curveto
stroke
0.57895 0.1729 moveto
0.56513 0.16669 0.55063 0.16201 0.53605 0.15789 curveto
stroke
0.52632 0.16058 moveto
0.54487 0.16574 0.56145 0.17636 0.57895 0.1844 curveto
stroke
0.52632 0.1644 moveto
0.54599 0.16996 0.5604 0.18729 0.57895 0.1959 curveto
stroke
0.52632 0.16821 moveto
0.54735 0.17422 0.55913 0.19814 0.57895 0.20741 curveto
stroke
0.52632 0.17203 moveto
0.5463 0.17779 0.5564 0.20209 0.5754 0.21053 curveto
stroke
0.52632 0.17585 moveto
0.54431 0.18106 0.55324 0.20332 0.57054 0.21053 curveto
stroke
0.52632 0.17966 moveto
0.54232 0.18432 0.55016 0.20441 0.56567 0.21053 curveto
stroke
0.52632 0.18348 moveto
0.54034 0.18758 0.54713 0.20539 0.56081 0.21053 curveto
stroke
0.57895 0.21192 moveto
0.5778 0.21138 0.57656 0.21104 0.5754 0.21053 curveto
stroke
0.57895 0.21383 moveto
0.57623 0.21252 0.57332 0.21168 0.57054 0.21053 curveto
stroke
0.57895 0.21575 moveto
0.57468 0.21366 0.5701 0.21227 0.56567 0.21053 curveto
stroke
0.57895 0.21766 moveto
0.57312 0.21478 0.56689 0.21281 0.56081 0.21053 curveto
stroke
0.52632 0.63001 moveto
0.52722 0.63058 0.52818 0.63104 0.5291 0.63158 curveto
stroke
0.52632 0.62771 moveto
0.52853 0.62913 0.5309 0.6303 0.5332 0.63158 curveto
stroke
0.52632 0.6254 moveto
0.52983 0.6277 0.53359 0.62961 0.5373 0.63158 curveto
stroke
0.52632 0.62309 moveto
0.53112 0.62629 0.53627 0.62895 0.5414 0.63158 curveto
stroke
0.52632 0.62079 moveto
0.5324 0.62489 0.53893 0.62833 0.54551 0.63158 curveto
stroke
0.52632 0.67853 moveto
0.5301 0.68068 0.53409 0.68245 0.53808 0.68421 curveto
stroke
0.52632 0.66439 moveto
0.53934 0.6722 0.55315 0.67882 0.56735 0.68421 curveto
stroke
0.52632 0.65025 moveto
0.54381 0.66094 0.55977 0.67481 0.57895 0.68206 curveto
stroke
0.52632 0.63611 moveto
0.54549 0.64794 0.55795 0.67034 0.57895 0.67849 curveto
stroke
0.57895 0.67492 moveto
0.55847 0.66683 0.54806 0.64277 0.5291 0.63158 curveto
stroke
0.57895 0.67136 moveto
0.56019 0.66385 0.55085 0.64142 0.5332 0.63158 curveto
stroke
0.57895 0.66779 moveto
0.56189 0.6609 0.55355 0.64021 0.5373 0.63158 curveto
stroke
0.57895 0.66423 moveto
0.56359 0.65797 0.55617 0.63912 0.5414 0.63158 curveto
stroke
0.57895 0.66066 moveto
0.56528 0.65506 0.55875 0.63812 0.54551 0.63158 curveto
stroke
0.57895 0.72078 moveto
0.56174 0.71461 0.5548 0.69159 0.53808 0.68421 curveto
stroke
0.57895 0.69459 moveto
0.57408 0.69279 0.5722 0.68605 0.56735 0.68421 curveto
stroke
0.57895 0.16139 moveto
0.60011 0.17034 0.6124 0.19325 0.63158 0.20592 curveto
stroke
0.57895 0.1729 moveto
0.59586 0.1805 0.60371 0.20152 0.61993 0.21053 curveto
stroke
0.57895 0.1844 moveto
0.59065 0.18977 0.59593 0.20468 0.6074 0.21053 curveto
stroke
0.57895 0.1959 moveto
0.58548 0.19894 0.58839 0.20738 0.59487 0.21053 curveto
stroke
0.57895 0.20741 moveto
0.58034 0.20806 0.58095 0.20987 0.58235 0.21053 curveto
stroke
0.63158 0.2178 moveto
0.62786 0.21513 0.62393 0.21275 0.61993 0.21053 curveto
stroke
0.63158 0.22561 moveto
0.62396 0.21994 0.61586 0.21484 0.6074 0.21053 curveto
stroke
0.63158 0.23343 moveto
0.62009 0.22471 0.60784 0.21683 0.59487 0.21053 curveto
stroke
0.63158 0.24124 moveto
0.61624 0.22946 0.59984 0.21877 0.58235 0.21053 curveto
stroke
0.57895 0.21192 moveto
0.59834 0.22113 0.6146 0.23591 0.63158 0.24906 curveto
stroke
0.57895 0.21383 moveto
0.59936 0.22368 0.6137 0.24294 0.63158 0.25687 curveto
stroke
0.57895 0.21575 moveto
0.60007 0.22608 0.6126 0.24874 0.63117 0.26316 curveto
stroke
0.57895 0.21766 moveto
0.59917 0.22766 0.61101 0.24962 0.62906 0.26316 curveto
stroke
0.63158 0.26346 moveto
0.63144 0.26336 0.6313 0.26326 0.63117 0.26316 curveto
stroke
0.63158 0.26503 moveto
0.63076 0.26437 0.6299 0.26379 0.62906 0.26316 curveto
stroke
0.57895 0.68206 moveto
0.5813 0.68295 0.58379 0.68342 0.58617 0.68421 curveto
stroke
0.57895 0.67849 moveto
0.58517 0.68091 0.59172 0.68234 0.59812 0.68421 curveto
stroke
0.57895 0.67492 moveto
0.58902 0.67891 0.59961 0.68145 0.61008 0.68421 curveto
stroke
0.57895 0.67136 moveto
0.59286 0.67693 0.60747 0.68067 0.62204 0.68421 curveto
stroke
0.57895 0.66779 moveto
0.59595 0.67467 0.6137 0.67976 0.63158 0.68386 curveto
stroke
0.57895 0.66423 moveto
0.59611 0.67122 0.61351 0.67802 0.63158 0.68214 curveto
stroke
0.57895 0.66066 moveto
0.59629 0.66777 0.6133 0.67627 0.63158 0.68041 curveto
stroke
0.57895 0.72078 moveto
0.59616 0.72694 0.61371 0.73235 0.63158 0.73622 curveto
stroke
0.57895 0.69459 moveto
0.59832 0.70172 0.61143 0.72275 0.63158 0.72725 curveto
stroke
0.63158 0.71828 moveto
0.61312 0.7141 0.60412 0.6902 0.58617 0.68421 curveto
stroke
0.63158 0.70931 moveto
0.61799 0.70621 0.61151 0.68812 0.59812 0.68421 curveto
stroke
0.63158 0.70034 moveto
0.62285 0.69834 0.61874 0.68649 0.61008 0.68421 curveto
stroke
0.63158 0.69137 moveto
0.6277 0.69048 0.6259 0.68515 0.62204 0.68421 curveto
stroke
0.63158 0.20592 moveto
0.63341 0.20713 0.63446 0.20931 0.63629 0.21053 curveto
stroke
0.68421 0.2538 moveto
0.66957 0.23803 0.65422 0.22244 0.63629 0.21053 curveto
stroke
0.63158 0.2178 moveto
0.64906 0.23034 0.66187 0.24838 0.67751 0.26316 curveto
stroke
0.63158 0.22561 moveto
0.64587 0.23624 0.65619 0.25143 0.6696 0.26316 curveto
stroke
0.63158 0.23343 moveto
0.64281 0.24195 0.65087 0.2541 0.66168 0.26316 curveto
stroke
0.63158 0.24124 moveto
0.63982 0.24758 0.64571 0.25659 0.65377 0.26316 curveto
stroke
0.63158 0.24906 moveto
0.63687 0.25315 0.64063 0.25898 0.64585 0.26316 curveto
stroke
0.63158 0.25687 moveto
0.63393 0.25871 0.6356 0.26131 0.63794 0.26316 curveto
stroke
0.68421 0.27047 moveto
0.68206 0.26795 0.67991 0.26543 0.67751 0.26316 curveto
stroke
0.68421 0.2791 moveto
0.67965 0.27352 0.67502 0.2679 0.6696 0.26316 curveto
stroke
0.68421 0.28773 moveto
0.67728 0.27905 0.6702 0.2703 0.66168 0.26316 curveto
stroke
0.68421 0.29636 moveto
0.67492 0.28456 0.6654 0.27265 0.65377 0.26316 curveto
stroke
0.68421 0.30499 moveto
0.67258 0.29007 0.66063 0.27498 0.64585 0.26316 curveto
stroke
0.68421 0.31362 moveto
0.67025 0.29557 0.65586 0.2773 0.63794 0.26316 curveto
stroke
0.63158 0.26346 moveto
0.65082 0.27857 0.66788 0.2966 0.68306 0.31579 curveto
stroke
0.63158 0.26503 moveto
0.65013 0.27984 0.66654 0.29738 0.68152 0.31579 curveto
stroke
0.68421 0.31735 moveto
0.68382 0.31683 0.68346 0.3163 0.68306 0.31579 curveto
stroke
0.68421 0.31943 moveto
0.68331 0.31822 0.68247 0.31696 0.68152 0.31579 curveto
stroke
0.63158 0.68386 moveto
0.63246 0.68406 0.63338 0.68402 0.63426 0.68421 curveto
stroke
0.63158 0.68214 moveto
0.63681 0.68333 0.64225 0.6833 0.64753 0.68421 curveto
stroke
0.63158 0.68041 moveto
0.64116 0.68259 0.65106 0.68296 0.6608 0.68421 curveto
stroke
0.63158 0.73622 moveto
0.63297 0.73652 0.63441 0.73656 0.63581 0.73684 curveto
stroke
0.63158 0.72725 moveto
0.64892 0.73112 0.66654 0.73379 0.68421 0.73564 curveto
stroke
0.63158 0.71828 moveto
0.64909 0.72224 0.66632 0.72817 0.68421 0.72977 curveto
stroke
0.63158 0.70931 moveto
0.64933 0.71335 0.66606 0.72245 0.68421 0.7239 curveto
stroke
0.63158 0.70034 moveto
0.64962 0.70447 0.66575 0.71668 0.68421 0.71803 curveto
stroke
0.63158 0.69137 moveto
0.64996 0.69559 0.66539 0.71087 0.68421 0.71217 curveto
stroke
0.68421 0.7063 moveto
0.66604 0.70511 0.65204 0.68812 0.63426 0.68421 curveto
stroke
0.68421 0.70043 moveto
0.67087 0.69959 0.6607 0.68649 0.64753 0.68421 curveto
stroke
0.68421 0.69456 moveto
0.67569 0.69405 0.66926 0.6853 0.6608 0.68421 curveto
stroke
0.68421 0.76599 moveto
0.66549 0.76392 0.65427 0.74058 0.63581 0.73684 curveto
stroke
0.68421 0.2538 moveto
0.68719 0.257 0.69045 0.25994 0.69341 0.26316 curveto
stroke
0.73562 0.31579 moveto
0.72417 0.29643 0.70862 0.27972 0.69341 0.26316 curveto
stroke
0.68421 0.27047 moveto
0.69776 0.28634 0.71564 0.29855 0.72739 0.31579 curveto
stroke
0.68421 0.2791 moveto
0.6949 0.29218 0.7093 0.30208 0.71917 0.31579 curveto
stroke
0.68421 0.28773 moveto
0.69227 0.29782 0.70325 0.30541 0.71095 0.31579 curveto
stroke
0.68421 0.29636 moveto
0.68974 0.30339 0.69733 0.30865 0.70272 0.31579 curveto
stroke
0.68421 0.30499 moveto
0.68727 0.30891 0.69148 0.31184 0.6945 0.31579 curveto
stroke
0.68421 0.31362 moveto
0.68482 0.31441 0.68566 0.315 0.68627 0.31579 curveto
stroke
0.73684 0.3181 moveto
0.73642 0.31734 0.73606 0.31654 0.73562 0.31579 curveto
stroke
0.73684 0.33361 moveto
0.73385 0.32759 0.73118 0.32135 0.72739 0.31579 curveto
stroke
0.73684 0.34912 moveto
0.73141 0.33778 0.72652 0.326 0.71917 0.31579 curveto
stroke
0.73684 0.36463 moveto
0.72901 0.34795 0.72192 0.33059 0.71095 0.31579 curveto
stroke
0.73544 0.36842 moveto
0.72643 0.34983 0.71516 0.33228 0.70272 0.31579 curveto
stroke
0.73358 0.36842 moveto
0.72376 0.3489 0.70776 0.33315 0.6945 0.31579 curveto
stroke
0.73172 0.36842 moveto
0.72106 0.34784 0.70042 0.33415 0.68627 0.31579 curveto
stroke
0.68421 0.31735 moveto
0.69802 0.33553 0.71916 0.34825 0.72986 0.36842 curveto
stroke
0.68421 0.31943 moveto
0.69728 0.337 0.71757 0.34916 0.728 0.36842 curveto
stroke
0.73684 0.37185 moveto
0.73633 0.37072 0.73597 0.36953 0.73544 0.36842 curveto
stroke
0.73684 0.37638 moveto
0.7357 0.37375 0.73486 0.37098 0.73358 0.36842 curveto
stroke
0.73684 0.38091 moveto
0.73509 0.37677 0.73379 0.37242 0.73172 0.36842 curveto
stroke
0.73684 0.38545 moveto
0.73451 0.37978 0.73273 0.37384 0.72986 0.36842 curveto
stroke
0.73684 0.38998 moveto
0.73394 0.38278 0.7317 0.37525 0.728 0.36842 curveto
stroke
0.68421 0.73564 moveto
0.69738 0.73702 0.73717 0.73678 0.72393 0.73684 curveto
stroke
0.68421 0.72977 moveto
0.70168 0.73133 0.71941 0.73191 0.73684 0.72995 curveto
stroke
0.68421 0.7239 moveto
0.7017 0.7253 0.71951 0.7253 0.73684 0.72256 curveto
stroke
0.68421 0.71803 moveto
0.70173 0.71932 0.71958 0.71846 0.73684 0.71517 curveto
stroke
0.68421 0.71217 moveto
0.70177 0.71338 0.71963 0.71147 0.73684 0.70778 curveto
stroke
0.68421 0.7063 moveto
0.70183 0.70745 0.71965 0.7044 0.73684 0.7004 curveto
stroke
0.68421 0.70043 moveto
0.70189 0.70154 0.71964 0.69727 0.73684 0.69301 curveto
stroke
0.68421 0.69456 moveto
0.70197 0.69564 0.71962 0.69009 0.73684 0.68562 curveto
stroke
0.68421 0.76599 moveto
0.70174 0.76793 0.71921 0.772 0.73684 0.77154 curveto
stroke
0.73684 0.73901 moveto
0.73248 0.73922 0.71956 0.73686 0.72393 0.73684 curveto
stroke
0.73684 0.3181 moveto
0.74772 0.3379 0.77356 0.34756 0.78222 0.36842 curveto
stroke
0.73684 0.33361 moveto
0.7438 0.3476 0.76183 0.35417 0.76823 0.36842 curveto
stroke
0.73684 0.34912 moveto
0.74058 0.35693 0.75062 0.36055 0.75424 0.36842 curveto
stroke
0.73684 0.36463 moveto
0.73756 0.36617 0.73954 0.36688 0.74026 0.36842 curveto
stroke
0.78947 0.39199 moveto
0.78712 0.38411 0.78536 0.37601 0.78222 0.36842 curveto
stroke
0.78814 0.42105 moveto
0.78284 0.40306 0.77591 0.38553 0.76823 0.36842 curveto
stroke
0.78444 0.42105 moveto
0.77834 0.40177 0.76271 0.38679 0.75424 0.36842 curveto
stroke
0.78074 0.42105 moveto
0.77381 0.40003 0.74962 0.38848 0.74026 0.36842 curveto
stroke
0.73684 0.37185 moveto
0.74556 0.39115 0.77024 0.40099 0.77703 0.42105 curveto
stroke
0.73684 0.37638 moveto
0.74452 0.39401 0.76705 0.40288 0.77333 0.42105 curveto
stroke
0.73684 0.38091 moveto
0.74356 0.39683 0.76391 0.40475 0.76963 0.42105 curveto
stroke
0.73684 0.38545 moveto
0.74268 0.39962 0.7608 0.40661 0.76592 0.42105 curveto
stroke
0.73684 0.38998 moveto
0.74184 0.40238 0.75771 0.40846 0.76222 0.42105 curveto
stroke
0.78947 0.42689 moveto
0.78896 0.42496 0.7887 0.42297 0.78814 0.42105 curveto
stroke
0.78947 0.44309 moveto
0.78771 0.43577 0.78671 0.42824 0.78444 0.42105 curveto
stroke
0.78947 0.4593 moveto
0.7866 0.44654 0.78483 0.43347 0.78074 0.42105 curveto
stroke
0.78929 0.47368 moveto
0.78548 0.45608 0.78281 0.43811 0.77703 0.42105 curveto
stroke
0.78768 0.47368 moveto
0.78376 0.45593 0.77927 0.43824 0.77333 0.42105 curveto
stroke
0.78606 0.47368 moveto
0.78204 0.45575 0.77571 0.4384 0.76963 0.42105 curveto
stroke
0.78444 0.47368 moveto
0.78032 0.45555 0.77214 0.43858 0.76592 0.42105 curveto
stroke
0.78282 0.47368 moveto
0.7786 0.45532 0.76857 0.43879 0.76222 0.42105 curveto
stroke
0.78947 0.47494 moveto
0.78939 0.47452 0.78938 0.4741 0.78929 0.47368 curveto
stroke
0.78947 0.48609 moveto
0.7887 0.48198 0.78858 0.47776 0.78768 0.47368 curveto
stroke
0.78947 0.49724 moveto
0.78815 0.48941 0.78779 0.48142 0.78606 0.47368 curveto
stroke
0.78947 0.50839 moveto
0.78772 0.49683 0.78703 0.48508 0.78444 0.47368 curveto
stroke
0.78947 0.51954 moveto
0.78737 0.50424 0.78628 0.48874 0.78282 0.47368 curveto
stroke
0.78937 0.63158 moveto
0.78944 0.63137 0.78941 0.63115 0.78947 0.63094 curveto
stroke
0.78167 0.68421 moveto
0.78466 0.68192 0.78729 0.6791 0.78947 0.67603 curveto
stroke
0.77097 0.68421 moveto
0.77881 0.67992 0.7853 0.67272 0.78947 0.66482 curveto
stroke
0.76028 0.68421 moveto
0.77329 0.67878 0.78401 0.66661 0.78947 0.65361 curveto
stroke
0.74958 0.68421 moveto
0.76786 0.67814 0.78313 0.66059 0.78947 0.6424 curveto
stroke
0.73888 0.68421 moveto
0.76235 0.67785 0.78236 0.65486 0.78937 0.63158 curveto
stroke
0.74186 0.73684 moveto
0.75815 0.7358 0.7756 0.73397 0.78947 0.72537 curveto
stroke
0.73684 0.72995 moveto
0.75583 0.72781 0.77501 0.71973 0.78947 0.70724 curveto
stroke
0.73684 0.72256 moveto
0.75737 0.71931 0.77492 0.70396 0.78947 0.68911 curveto
stroke
0.73684 0.71517 moveto
0.75468 0.71178 0.76726 0.69526 0.78167 0.68421 curveto
stroke
0.73684 0.70778 moveto
0.75036 0.70489 0.75884 0.69085 0.77097 0.68421 curveto
stroke
0.73684 0.7004 moveto
0.74609 0.69824 0.75152 0.68787 0.76028 0.68421 curveto
stroke
0.73684 0.69301 moveto
0.74185 0.69177 0.74468 0.68584 0.74958 0.68421 curveto
stroke
0.73684 0.68562 moveto
0.73764 0.68541 0.73809 0.68443 0.73888 0.68421 curveto
stroke
0.73684 0.77154 moveto
0.75502 0.77107 0.77226 0.76303 0.78947 0.75714 curveto
stroke
0.73684 0.73901 moveto
0.73866 0.73892 0.74004 0.73696 0.74186 0.73684 curveto
stroke
0.78947 0.39199 moveto
0.79312 0.4042 0.81089 0.40877 0.8143 0.42105 curveto
stroke
0.83638 0.47368 moveto
0.83279 0.455 0.81939 0.43938 0.8143 0.42105 curveto
stroke
0.78947 0.42689 moveto
0.7945 0.44567 0.82038 0.45464 0.82432 0.47368 curveto
stroke
0.78947 0.44309 moveto
0.79245 0.45545 0.80962 0.46125 0.81225 0.47368 curveto
stroke
0.78947 0.4593 moveto
0.79079 0.46513 0.79893 0.46784 0.80019 0.47368 curveto
stroke
0.84211 0.51896 moveto
0.84019 0.50387 0.83926 0.48862 0.83638 0.47368 curveto
stroke
0.83641 0.52632 moveto
0.83417 0.50846 0.82796 0.49131 0.82432 0.47368 curveto
stroke
0.83024 0.52632 moveto
0.82791 0.50792 0.81609 0.49182 0.81225 0.47368 curveto
stroke
0.82407 0.52632 moveto
0.82163 0.5072 0.80423 0.49252 0.80019 0.47368 curveto
stroke
0.78947 0.47494 moveto
0.79355 0.49408 0.81541 0.5069 0.8179 0.52632 curveto
stroke
0.78947 0.48609 moveto
0.79232 0.50114 0.80978 0.51111 0.81173 0.52632 curveto
stroke
0.78947 0.49724 moveto
0.79132 0.50816 0.80415 0.51533 0.80556 0.52632 curveto
stroke
0.78947 0.50839 moveto
0.7905 0.51514 0.79852 0.51954 0.79939 0.52632 curveto
stroke
0.78947 0.51954 moveto
0.78982 0.5221 0.79289 0.52375 0.79322 0.52632 curveto
stroke
0.84043 0.57895 moveto
0.83957 0.56137 0.83861 0.54377 0.83641 0.52632 curveto
stroke
0.83523 0.57895 moveto
0.83469 0.56133 0.83246 0.5438 0.83024 0.52632 curveto
stroke
0.83003 0.57895 moveto
0.8297 0.56129 0.82631 0.54383 0.82407 0.52632 curveto
stroke
0.82482 0.57895 moveto
0.82464 0.56125 0.82015 0.54387 0.8179 0.52632 curveto
stroke
0.81962 0.57895 moveto
0.81955 0.56121 0.81399 0.54391 0.81173 0.52632 curveto
stroke
0.81441 0.57895 moveto
0.81443 0.56116 0.80784 0.54396 0.80556 0.52632 curveto
stroke
0.80921 0.57895 moveto
0.80929 0.5611 0.80168 0.54402 0.79939 0.52632 curveto
stroke
0.80401 0.57895 moveto
0.80414 0.56104 0.79552 0.54408 0.79322 0.52632 curveto
stroke
0.8402 0.63158 moveto
0.84162 0.61409 0.8413 0.59647 0.84043 0.57895 curveto
stroke
0.83292 0.63158 moveto
0.83552 0.61421 0.83576 0.5965 0.83523 0.57895 curveto
stroke
0.82564 0.63158 moveto
0.82901 0.6143 0.83035 0.59655 0.83003 0.57895 curveto
stroke
0.81836 0.63158 moveto
0.82228 0.61435 0.825 0.59662 0.82482 0.57895 curveto
stroke
0.81107 0.63158 moveto
0.81542 0.61435 0.81969 0.59672 0.81962 0.57895 curveto
stroke
0.80379 0.63158 moveto
0.80848 0.61431 0.8144 0.59685 0.81441 0.57895 curveto
stroke
0.79651 0.63158 moveto
0.80148 0.61423 0.80913 0.59699 0.80921 0.57895 curveto
stroke
0.78947 0.63094 moveto
0.79453 0.61367 0.80387 0.59694 0.80401 0.57895 curveto
stroke
0.82824 0.68421 moveto
0.83713 0.66857 0.83875 0.64951 0.8402 0.63158 curveto
stroke
0.81116 0.68421 moveto
0.82285 0.66925 0.83012 0.65035 0.83292 0.63158 curveto
stroke
0.79409 0.68421 moveto
0.80794 0.66916 0.82172 0.65165 0.82564 0.63158 curveto
stroke
0.78947 0.67603 moveto
0.79972 0.66163 0.81443 0.64881 0.81836 0.63158 curveto
stroke
0.78947 0.66482 moveto
0.79565 0.65314 0.80784 0.64439 0.81107 0.63158 curveto
stroke
0.78947 0.65361 moveto
0.79287 0.64554 0.80149 0.64003 0.80379 0.63158 curveto
stroke
0.78947 0.6424 moveto
0.79089 0.63834 0.79532 0.63572 0.79651 0.63158 curveto
stroke
0.81451 0.73684 moveto
0.82787 0.72979 0.83711 0.71514 0.84211 0.70088 curveto
stroke
0.78947 0.72537 moveto
0.80549 0.71544 0.81892 0.7006 0.82824 0.68421 curveto
stroke
0.78947 0.70724 moveto
0.79746 0.70035 0.80467 0.69252 0.81116 0.68421 curveto
stroke
0.78947 0.68911 moveto
0.79105 0.68751 0.79257 0.68586 0.79409 0.68421 curveto
stroke
0.78947 0.75714 moveto
0.79964 0.75367 0.80501 0.74186 0.81451 0.73684 curveto
stroke
0.84211 0.51896 moveto
0.84248 0.52189 0.84668 0.52339 0.84704 0.52632 curveto
stroke
0.86826 0.57895 moveto
0.86715 0.56006 0.84935 0.54509 0.84704 0.52632 curveto
stroke
0.87021 0.63158 moveto
0.871 0.61404 0.86929 0.59647 0.86826 0.57895 curveto
stroke
0.85373 0.68421 moveto
0.85864 0.66649 0.86939 0.64994 0.87021 0.63158 curveto
stroke
0.84211 0.70088 moveto
0.84434 0.69449 0.85192 0.69074 0.85373 0.68421 curveto
stroke
 % Draw the IH Contour
newpath
0.25 setgray
0.004 setlinewidth
0.17984 0.31579 moveto
0.18368 0.29842 0.20502 0.28904 0.21053 0.27212 curveto
stroke
0.16676 0.36842 moveto
0.16864 0.35044 0.17595 0.33344 0.17984 0.31579 curveto
stroke
0.1852 0.36842 moveto
0.18733 0.35035 0.20662 0.33783 0.21053 0.32006 curveto
stroke
0.20365 0.36842 moveto
0.20425 0.36352 0.20984 0.36018 0.21053 0.35529 curveto
stroke
0.16321 0.42105 moveto
0.16356 0.40347 0.16493 0.38591 0.16676 0.36842 curveto
stroke
0.17734 0.42105 moveto
0.17772 0.40332 0.18313 0.38604 0.1852 0.36842 curveto
stroke
0.19146 0.42105 moveto
0.19186 0.40305 0.20146 0.3863 0.20365 0.36842 curveto
stroke
0.20558 0.42105 moveto
0.20573 0.41456 0.21018 0.40869 0.21053 0.4022 curveto
stroke
0.16427 0.47368 moveto
0.1632 0.45617 0.16286 0.4386 0.16321 0.42105 curveto
stroke
0.17995 0.47368 moveto
0.17866 0.45617 0.17696 0.43861 0.17734 0.42105 curveto
stroke
0.19562 0.47368 moveto
0.19425 0.45614 0.19107 0.43865 0.19146 0.42105 curveto
stroke
0.21053 0.46721 moveto
0.20951 0.45177 0.20524 0.43652 0.20558 0.42105 curveto
stroke
0.1716 0.52632 moveto
0.16859 0.50886 0.16535 0.49136 0.16427 0.47368 curveto
stroke
0.19682 0.52632 moveto
0.19329 0.50823 0.1813 0.49206 0.17995 0.47368 curveto
stroke
0.21053 0.50925 moveto
0.20866 0.49653 0.19662 0.4865 0.19562 0.47368 curveto
stroke
0.1978 0.57895 moveto
0.19141 0.56042 0.17494 0.54563 0.1716 0.52632 curveto
stroke
0.21053 0.54788 moveto
0.20859 0.53959 0.19844 0.53468 0.19682 0.52632 curveto
stroke
0.21053 0.59512 moveto
0.20811 0.5887 0.20004 0.58543 0.1978 0.57895 curveto
stroke
0.24761 0.21053 moveto
0.25249 0.20486 0.25809 0.19985 0.26316 0.19435 curveto
stroke
0.21325 0.26316 moveto
0.22129 0.24381 0.23393 0.2264 0.24761 0.21053 curveto
stroke
0.22835 0.26316 moveto
0.23657 0.24754 0.25274 0.23749 0.26316 0.22324 curveto
stroke
0.24345 0.26316 moveto
0.2484 0.25447 0.25773 0.24895 0.26316 0.24056 curveto
stroke
0.25855 0.26316 moveto
0.25974 0.26115 0.26195 0.25987 0.26316 0.25787 curveto
stroke
0.21053 0.27212 moveto
0.21149 0.26915 0.21205 0.26604 0.21325 0.26316 curveto
stroke
0.21121 0.31579 moveto
0.21556 0.29786 0.21976 0.27949 0.22835 0.26316 curveto
stroke
0.21686 0.31579 moveto
0.22224 0.29689 0.23372 0.28024 0.24345 0.26316 curveto
stroke
0.22251 0.31579 moveto
0.22882 0.29548 0.2477 0.28145 0.25855 0.26316 curveto
stroke
0.22816 0.31579 moveto
0.23428 0.29715 0.25374 0.28568 0.26316 0.26846 curveto
stroke
0.2338 0.31579 moveto
0.23912 0.30022 0.25586 0.29085 0.26316 0.2761 curveto
stroke
0.23945 0.31579 moveto
0.24385 0.30325 0.25763 0.29582 0.26316 0.28374 curveto
stroke
0.2451 0.31579 moveto
0.24851 0.30626 0.25916 0.30067 0.26316 0.29137 curveto
stroke
0.25075 0.31579 moveto
0.25313 0.30925 0.26053 0.30545 0.26316 0.29901 curveto
stroke
0.21053 0.32006 moveto
0.21084 0.31865 0.21087 0.31719 0.21121 0.31579 curveto
stroke
0.21053 0.35529 moveto
0.21238 0.34208 0.21321 0.32861 0.21686 0.31579 curveto
stroke
0.21245 0.36842 moveto
0.21479 0.35071 0.21721 0.33285 0.22251 0.31579 curveto
stroke
0.21551 0.36842 moveto
0.21807 0.35056 0.22253 0.33293 0.22816 0.31579 curveto
stroke
0.21857 0.36842 moveto
0.22131 0.35036 0.22791 0.33308 0.2338 0.31579 curveto
stroke
0.22163 0.36842 moveto
0.22453 0.35013 0.23332 0.33327 0.23945 0.31579 curveto
stroke
0.2247 0.36842 moveto
0.22773 0.34985 0.23875 0.3335 0.2451 0.31579 curveto
stroke
0.22776 0.36842 moveto
0.23093 0.34954 0.24419 0.33378 0.25075 0.31579 curveto
stroke
0.21053 0.4022 moveto
0.21113 0.39094 0.21097 0.3796 0.21245 0.36842 curveto
stroke
0.21209 0.42105 moveto
0.21249 0.40348 0.21302 0.38582 0.21551 0.36842 curveto
stroke
0.2145 0.42105 moveto
0.21491 0.40346 0.21593 0.38582 0.21857 0.36842 curveto
stroke
0.2169 0.42105 moveto
0.21732 0.40344 0.21888 0.38582 0.22163 0.36842 curveto
stroke
0.21931 0.42105 moveto
0.21974 0.40342 0.22185 0.38583 0.2247 0.36842 curveto
stroke
0.22172 0.42105 moveto
0.22215 0.4034 0.22483 0.38584 0.22776 0.36842 curveto
stroke
0.21053 0.46721 moveto
0.21067 0.46936 0.21049 0.47153 0.21066 0.47368 curveto
stroke
0.2134 0.47368 moveto
0.21181 0.45621 0.21169 0.4386 0.21209 0.42105 curveto
stroke
0.21614 0.47368 moveto
0.2144 0.45622 0.21408 0.4386 0.2145 0.42105 curveto
stroke
0.21888 0.47368 moveto
0.21703 0.45623 0.21648 0.4386 0.2169 0.42105 curveto
stroke
0.22162 0.47368 moveto
0.21967 0.45623 0.21888 0.43861 0.21931 0.42105 curveto
stroke
0.22436 0.47368 moveto
0.22234 0.45624 0.22128 0.43861 0.22172 0.42105 curveto
stroke
0.21053 0.50925 moveto
0.21136 0.51492 0.21137 0.52072 0.21259 0.52632 curveto
stroke
0.21711 0.52632 moveto
0.21285 0.50916 0.21208 0.4913 0.21066 0.47368 curveto
stroke
0.22164 0.52632 moveto
0.21701 0.50917 0.21502 0.49137 0.2134 0.47368 curveto
stroke
0.22616 0.52632 moveto
0.22125 0.50915 0.21791 0.49146 0.21614 0.47368 curveto
stroke
0.23069 0.52632 moveto
0.22554 0.50909 0.22078 0.49156 0.21888 0.47368 curveto
stroke
0.23521 0.52632 moveto
0.22986 0.509 0.22363 0.49169 0.22162 0.47368 curveto
stroke
0.23973 0.52632 moveto
0.23421 0.50889 0.22647 0.49184 0.22436 0.47368 curveto
stroke
0.21053 0.54788 moveto
0.21297 0.55833 0.21457 0.56917 0.21901 0.57895 curveto
stroke
0.22983 0.57895 moveto
0.22131 0.56257 0.21652 0.54435 0.21259 0.52632 curveto
stroke
0.24066 0.57895 moveto
0.23128 0.56217 0.22175 0.54497 0.21711 0.52632 curveto
stroke
0.25148 0.57895 moveto
0.24131 0.56153 0.2269 0.54579 0.22164 0.52632 curveto
stroke
0.26231 0.57895 moveto
0.25134 0.56071 0.23202 0.54678 0.22616 0.52632 curveto
stroke
0.26316 0.57296 moveto
0.25415 0.55629 0.23611 0.54447 0.23069 0.52632 curveto
stroke
0.26316 0.56646 moveto
0.25598 0.55182 0.24002 0.54189 0.23521 0.52632 curveto
stroke
0.26316 0.55996 moveto
0.25753 0.54751 0.24387 0.53934 0.23973 0.52632 curveto
stroke
0.21053 0.59512 moveto
0.21533 0.60784 0.22022 0.62107 0.22885 0.63158 curveto
stroke
0.26316 0.63049 moveto
0.24769 0.61398 0.22836 0.59955 0.21901 0.57895 curveto
stroke
0.26316 0.61785 moveto
0.25281 0.60427 0.23772 0.59409 0.22983 0.57895 curveto
stroke
0.26316 0.60522 moveto
0.25667 0.59569 0.24628 0.58901 0.24066 0.57895 curveto
stroke
0.26316 0.59258 moveto
0.25995 0.58753 0.2545 0.58411 0.25148 0.57895 curveto
stroke
0.26316 0.57994 moveto
0.26293 0.57957 0.26253 0.57932 0.26231 0.57895 curveto
stroke
0.26316 0.66695 moveto
0.25096 0.65595 0.23928 0.64427 0.22885 0.63158 curveto
stroke
0.3127 0.15789 moveto
0.31394 0.15731 0.31454 0.15574 0.31579 0.15516 curveto
stroke
0.26316 0.19435 moveto
0.27705 0.17928 0.29416 0.16666 0.3127 0.15789 curveto
stroke
0.27426 0.21053 moveto
0.28847 0.19793 0.29942 0.18116 0.31579 0.17156 curveto
stroke
0.28939 0.21053 moveto
0.29898 0.2032 0.30561 0.19224 0.31579 0.18575 curveto
stroke
0.30452 0.21053 moveto
0.30873 0.20756 0.3115 0.2028 0.31579 0.19995 curveto
stroke
0.26316 0.22324 moveto
0.26648 0.2187 0.27005 0.21426 0.27426 0.21053 curveto
stroke
0.26316 0.24056 moveto
0.27038 0.2294 0.27883 0.21859 0.28939 0.21053 curveto
stroke
0.26316 0.25787 moveto
0.27403 0.23995 0.28739 0.2226 0.30452 0.21053 curveto
stroke
0.26595 0.26316 moveto
0.27891 0.24307 0.29614 0.22521 0.31579 0.21158 curveto
stroke
0.26996 0.26316 moveto
0.2826 0.24518 0.29819 0.22891 0.31579 0.21574 curveto
stroke
0.27397 0.26316 moveto
0.28601 0.24712 0.30007 0.23235 0.31579 0.21989 curveto
stroke
0.27798 0.26316 moveto
0.28923 0.24893 0.30184 0.23563 0.31579 0.22404 curveto
stroke
0.28199 0.26316 moveto
0.29231 0.25065 0.30351 0.23877 0.31579 0.22819 curveto
stroke
0.26316 0.26846 moveto
0.26412 0.26671 0.26486 0.26484 0.26595 0.26316 curveto
stroke
0.26316 0.2761 moveto
0.26532 0.27173 0.26715 0.26714 0.26996 0.26316 curveto
stroke
0.26316 0.28374 moveto
0.26638 0.27669 0.26932 0.26935 0.27397 0.26316 curveto
stroke
0.26316 0.29137 moveto
0.26735 0.28161 0.27139 0.27149 0.27798 0.26316 curveto
stroke
0.26316 0.29901 moveto
0.26826 0.28651 0.2734 0.27357 0.28199 0.26316 curveto
stroke
0.26316 0.57296 moveto
0.26423 0.57494 0.26505 0.57707 0.26629 0.57895 curveto
stroke
0.26316 0.56646 moveto
0.26523 0.57068 0.26696 0.57512 0.26968 0.57895 curveto
stroke
0.26316 0.55996 moveto
0.2661 0.56647 0.26876 0.57326 0.27308 0.57895 curveto
stroke
0.26316 0.63049 moveto
0.2635 0.63086 0.26385 0.63122 0.2642 0.63158 curveto
stroke
0.26316 0.61785 moveto
0.267 0.62289 0.27134 0.62766 0.27632 0.63158 curveto
stroke
0.26316 0.60522 moveto
0.27001 0.61528 0.27839 0.62471 0.28844 0.63158 curveto
stroke
0.26316 0.59258 moveto
0.27281 0.60779 0.28528 0.62203 0.30055 0.63158 curveto
stroke
0.26316 0.57994 moveto
0.27549 0.60035 0.2921 0.61952 0.31267 0.63158 curveto
stroke
0.31579 0.62903 moveto
0.29579 0.61674 0.27919 0.59855 0.26629 0.57895 curveto
stroke
0.31579 0.62559 moveto
0.29752 0.61359 0.28236 0.59676 0.26968 0.57895 curveto
stroke
0.31579 0.62216 moveto
0.29915 0.61062 0.28533 0.59508 0.27308 0.57895 curveto
stroke
0.26316 0.66695 moveto
0.27129 0.67428 0.28106 0.67984 0.29109 0.68421 curveto
stroke
0.31579 0.67765 moveto
0.2947 0.66833 0.28044 0.64795 0.2642 0.63158 curveto
stroke
0.31579 0.66683 moveto
0.30003 0.6589 0.29018 0.64249 0.27632 0.63158 curveto
stroke
0.31579 0.65601 moveto
0.30502 0.65022 0.29853 0.63848 0.28844 0.63158 curveto
stroke
0.31579 0.64519 moveto
0.30985 0.64186 0.30633 0.63519 0.30055 0.63158 curveto
stroke
0.31579 0.63437 moveto
0.31458 0.63367 0.31387 0.63228 0.31267 0.63158 curveto
stroke
0.31579 0.70453 moveto
0.30576 0.70091 0.30087 0.68847 0.29109 0.68421 curveto
stroke
0.31579 0.15516 moveto
0.33516 0.14611 0.34758 0.12327 0.36842 0.11849 curveto
stroke
0.35102 0.15789 moveto
0.35792 0.1559 0.36146 0.14695 0.36842 0.1452 curveto
stroke
0.31579 0.17156 moveto
0.32665 0.16519 0.33892 0.1614 0.35102 0.15789 curveto
stroke
0.31579 0.18575 moveto
0.33218 0.17531 0.34969 0.16584 0.36842 0.16069 curveto
stroke
0.31579 0.19995 moveto
0.33318 0.1884 0.34843 0.17202 0.36842 0.16601 curveto
stroke
0.31755 0.21053 moveto
0.33548 0.19884 0.34802 0.17782 0.36842 0.17133 curveto
stroke
0.32446 0.21053 moveto
0.34051 0.20134 0.35086 0.18246 0.36842 0.17665 curveto
stroke
0.33136 0.21053 moveto
0.34522 0.20338 0.35366 0.187 0.36842 0.18197 curveto
stroke
0.33827 0.21053 moveto
0.34974 0.2051 0.35644 0.19146 0.36842 0.18729 curveto
stroke
0.34517 0.21053 moveto
0.35413 0.20659 0.3592 0.19588 0.36842 0.19261 curveto
stroke
0.31579 0.21158 moveto
0.31635 0.21119 0.31698 0.2109 0.31755 0.21053 curveto
stroke
0.31579 0.21574 moveto
0.31849 0.21372 0.32153 0.2122 0.32446 0.21053 curveto
stroke
0.31579 0.21989 moveto
0.32053 0.21612 0.32598 0.2133 0.33136 0.21053 curveto
stroke
0.31579 0.22404 moveto
0.32251 0.21845 0.33037 0.21426 0.33827 0.21053 curveto
stroke
0.31579 0.22819 moveto
0.32445 0.22073 0.33471 0.21513 0.34517 0.21053 curveto
stroke
0.31579 0.62903 moveto
0.31747 0.63006 0.31937 0.63068 0.32112 0.63158 curveto
stroke
0.31579 0.62559 moveto
0.31965 0.62813 0.32408 0.62968 0.3283 0.63158 curveto
stroke
0.31579 0.62216 moveto
0.32177 0.6263 0.32872 0.62887 0.33548 0.63158 curveto
stroke
0.31579 0.67765 moveto
0.32316 0.68091 0.33124 0.68228 0.33907 0.68421 curveto
stroke
0.31579 0.66683 moveto
0.33219 0.67508 0.35035 0.67982 0.36842 0.68306 curveto
stroke
0.31579 0.65601 moveto
0.33256 0.66503 0.34976 0.67441 0.36842 0.6782 curveto
stroke
0.31579 0.64519 moveto
0.33315 0.65491 0.34899 0.66908 0.36842 0.67334 curveto
stroke
0.31579 0.63437 moveto
0.33391 0.64479 0.34805 0.66377 0.36842 0.66848 curveto
stroke
0.36842 0.66361 moveto
0.3499 0.65917 0.33804 0.64031 0.32112 0.63158 curveto
stroke
0.36842 0.65875 moveto
0.35274 0.65488 0.34302 0.63821 0.3283 0.63158 curveto
stroke
0.36842 0.65389 moveto
0.35556 0.65064 0.34779 0.63651 0.33548 0.63158 curveto
stroke
0.31579 0.70453 moveto
0.33363 0.71097 0.34966 0.72339 0.36842 0.72613 curveto
stroke
0.36842 0.70236 moveto
0.35708 0.70047 0.35024 0.68696 0.33907 0.68421 curveto
stroke
0.36842 0.11849 moveto
0.38576 0.11451 0.40331 0.11097 0.42105 0.10961 curveto
stroke
0.36842 0.1452 moveto
0.38661 0.14061 0.40237 0.12692 0.42105 0.12528 curveto
stroke
0.38562 0.15789 moveto
0.39849 0.15553 0.40801 0.14215 0.42105 0.14095 curveto
stroke
0.4184 0.15789 moveto
0.41938 0.1578 0.42008 0.15672 0.42105 0.15663 curveto
stroke
0.36842 0.16069 moveto
0.37402 0.15914 0.3799 0.15894 0.38562 0.15789 curveto
stroke
0.36842 0.16601 moveto
0.38458 0.16114 0.4016 0.15955 0.4184 0.15789 curveto
stroke
0.36842 0.17133 moveto
0.38547 0.1659 0.40325 0.16262 0.42105 0.16084 curveto
stroke
0.36842 0.17665 moveto
0.38555 0.17098 0.40311 0.16593 0.42105 0.16405 curveto
stroke
0.36842 0.18197 moveto
0.38567 0.1761 0.40294 0.16922 0.42105 0.16725 curveto
stroke
0.36842 0.18729 moveto
0.38582 0.18124 0.40275 0.17251 0.42105 0.17046 curveto
stroke
0.36842 0.19261 moveto
0.386 0.18639 0.40253 0.17578 0.42105 0.17366 curveto
stroke
0.36842 0.68306 moveto
0.37308 0.6839 0.37787 0.68364 0.38257 0.68421 curveto
stroke
0.36842 0.6782 moveto
0.38568 0.6817 0.40344 0.68262 0.42105 0.68296 curveto
stroke
0.36842 0.67334 moveto
0.38567 0.67712 0.4034 0.67904 0.42105 0.67945 curveto
stroke
0.36842 0.66848 moveto
0.38569 0.67246 0.40334 0.67548 0.42105 0.67594 curveto
stroke
0.36842 0.66361 moveto
0.38572 0.66777 0.40327 0.67193 0.42105 0.67243 curveto
stroke
0.36842 0.65875 moveto
0.38577 0.66304 0.40319 0.66839 0.42105 0.66892 curveto
stroke
0.36842 0.65389 moveto
0.38583 0.6583 0.4031 0.66486 0.42105 0.66541 curveto
stroke
0.36842 0.72613 moveto
0.38585 0.72868 0.40344 0.73055 0.42105 0.73076 curveto
stroke
0.36842 0.70236 moveto
0.38609 0.70531 0.40315 0.71286 0.42105 0.71315 curveto
stroke
0.42105 0.69553 moveto
0.40768 0.6953 0.39585 0.68581 0.38257 0.68421 curveto
stroke
0.42105 0.10961 moveto
0.43855 0.10826 0.45615 0.10801 0.47368 0.10868 curveto
stroke
0.42105 0.12528 moveto
0.43854 0.12374 0.45615 0.1226 0.47368 0.12346 curveto
stroke
0.42105 0.14095 moveto
0.43855 0.13935 0.45614 0.13731 0.47368 0.13824 curveto
stroke
0.42105 0.15663 moveto
0.43856 0.15499 0.45613 0.15206 0.47368 0.15302 curveto
stroke
0.42105 0.16084 moveto
0.43851 0.1591 0.45617 0.15892 0.47368 0.15997 curveto
stroke
0.42105 0.16405 moveto
0.4385 0.16222 0.45618 0.16192 0.47368 0.16308 curveto
stroke
0.42105 0.16725 moveto
0.4385 0.16536 0.45618 0.16494 0.47368 0.16618 curveto
stroke
0.42105 0.17046 moveto
0.43849 0.16851 0.45618 0.16798 0.47368 0.16928 curveto
stroke
0.42105 0.17366 moveto
0.43849 0.17167 0.45619 0.17103 0.47368 0.17239 curveto
stroke
0.42105 0.68296 moveto
0.43861 0.6833 0.45628 0.68285 0.47368 0.68048 curveto
stroke
0.42105 0.67945 moveto
0.43862 0.67985 0.45629 0.67893 0.47368 0.67641 curveto
stroke
0.42105 0.67594 moveto
0.43863 0.67639 0.4563 0.67497 0.47368 0.67234 curveto
stroke
0.42105 0.67243 moveto
0.43864 0.67292 0.4563 0.67098 0.47368 0.66827 curveto
stroke
0.42105 0.66892 moveto
0.43866 0.66944 0.45629 0.66698 0.47368 0.6642 curveto
stroke
0.42105 0.66541 moveto
0.43868 0.66595 0.45628 0.66296 0.47368 0.66013 curveto
stroke
0.42105 0.73076 moveto
0.43862 0.73096 0.45622 0.72981 0.47368 0.72791 curveto
stroke
0.42105 0.71315 moveto
0.43872 0.71342 0.45615 0.70907 0.47368 0.70695 curveto
stroke
0.42105 0.69553 moveto
0.43888 0.69584 0.45599 0.68819 0.47368 0.68598 curveto
stroke
0.47368 0.10868 moveto
0.49132 0.10936 0.50897 0.11119 0.52632 0.11443 curveto
stroke
0.47368 0.12346 moveto
0.49176 0.12435 0.50862 0.133 0.52632 0.13683 curveto
stroke
0.47368 0.13824 moveto
0.49168 0.1392 0.50644 0.15411 0.52406 0.15789 curveto
stroke
0.47368 0.15302 moveto
0.47815 0.15327 0.48172 0.15752 0.48617 0.15789 curveto
stroke
0.52632 0.15818 moveto
0.52558 0.15801 0.5248 0.15805 0.52406 0.15789 curveto
stroke
0.52632 0.16301 moveto
0.51326 0.15963 0.49961 0.15902 0.48617 0.15789 curveto
stroke
0.47368 0.15997 moveto
0.49139 0.16104 0.50924 0.16304 0.52632 0.16783 curveto
stroke
0.47368 0.16308 moveto
0.49148 0.16426 0.50922 0.16758 0.52632 0.17266 curveto
stroke
0.47368 0.16618 moveto
0.49158 0.16745 0.50917 0.17218 0.52632 0.17749 curveto
stroke
0.47368 0.16928 moveto
0.49171 0.17063 0.5091 0.17681 0.52632 0.18231 curveto
stroke
0.47368 0.17239 moveto
0.49185 0.1738 0.509 0.18147 0.52632 0.18714 curveto
stroke
0.52379 0.63158 moveto
0.52461 0.63126 0.5255 0.63116 0.52632 0.63081 curveto
stroke
0.5152 0.68421 moveto
0.51888 0.68335 0.52271 0.68312 0.52632 0.68201 curveto
stroke
0.47691 0.68421 moveto
0.49356 0.68203 0.51046 0.67993 0.52632 0.67442 curveto
stroke
0.47368 0.68048 moveto
0.49164 0.67804 0.50932 0.67314 0.52632 0.66683 curveto
stroke
0.47368 0.67641 moveto
0.49195 0.67377 0.5091 0.6659 0.52632 0.65924 curveto
stroke
0.47368 0.67234 moveto
0.49232 0.66953 0.5088 0.65862 0.52632 0.65166 curveto
stroke
0.47368 0.66827 moveto
0.49276 0.6653 0.50842 0.65133 0.52632 0.64407 curveto
stroke
0.47368 0.6642 moveto
0.49326 0.66107 0.50798 0.64403 0.52632 0.63648 curveto
stroke
0.47368 0.66013 moveto
0.49266 0.65704 0.50591 0.63864 0.52379 0.63158 curveto
stroke
0.47368 0.72791 moveto
0.49184 0.72594 0.5087 0.7175 0.52632 0.71267 curveto
stroke
0.47368 0.70695 moveto
0.48935 0.70505 0.49984 0.68781 0.5152 0.68421 curveto
stroke
0.47368 0.68598 moveto
0.4749 0.68583 0.4757 0.68437 0.47691 0.68421 curveto
stroke
0.52632 0.11443 moveto
0.54541 0.11801 0.56118 0.13159 0.57895 0.13944 curveto
stroke
0.52632 0.13683 moveto
0.5385 0.13947 0.54531 0.1542 0.55721 0.15789 curveto
stroke
0.57895 0.16587 moveto
0.57218 0.16216 0.56458 0.16018 0.55721 0.15789 curveto
stroke
0.52632 0.15818 moveto
0.54459 0.16235 0.56304 0.16802 0.57895 0.17794 curveto
stroke
0.52632 0.16301 moveto
0.5454 0.16795 0.56253 0.17908 0.57895 0.19 curveto
stroke
0.52632 0.16783 moveto
0.54646 0.17349 0.56174 0.19015 0.57895 0.20206 curveto
stroke
0.52632 0.17266 moveto
0.54654 0.17867 0.55953 0.19873 0.57702 0.21053 curveto
stroke
0.52632 0.17749 moveto
0.5439 0.18293 0.55471 0.20117 0.57056 0.21053 curveto
stroke
0.52632 0.18231 moveto
0.54129 0.18709 0.5502 0.20318 0.5641 0.21053 curveto
stroke
0.52632 0.18714 moveto
0.5387 0.19119 0.54589 0.20488 0.55763 0.21053 curveto
stroke
0.57895 0.21173 moveto
0.57833 0.21129 0.57765 0.21095 0.57702 0.21053 curveto
stroke
0.57895 0.21578 moveto
0.57636 0.21374 0.5734 0.2122 0.57056 0.21053 curveto
stroke
0.57895 0.21983 moveto
0.57448 0.21607 0.56926 0.21326 0.5641 0.21053 curveto
stroke
0.57895 0.22388 moveto
0.57268 0.21832 0.56519 0.21416 0.55763 0.21053 curveto
stroke
0.56974 0.63158 moveto
0.5729 0.62965 0.5761 0.62774 0.57895 0.62538 curveto
stroke
0.5604 0.63158 moveto
0.56696 0.62804 0.57339 0.62406 0.57895 0.61909 curveto
stroke
0.55105 0.63158 moveto
0.56112 0.62665 0.5708 0.6205 0.57895 0.61279 curveto
stroke
0.5417 0.63158 moveto
0.55533 0.62538 0.56829 0.61701 0.57895 0.6065 curveto
stroke
0.53236 0.63158 moveto
0.54956 0.6242 0.56583 0.61356 0.57895 0.6002 curveto
stroke
0.52632 0.63081 moveto
0.54606 0.62248 0.56413 0.60939 0.57895 0.59391 curveto
stroke
0.56328 0.68421 moveto
0.5686 0.68216 0.57405 0.68028 0.57895 0.67738 curveto
stroke
0.52632 0.68201 moveto
0.54522 0.6762 0.56273 0.66596 0.57895 0.65465 curveto
stroke
0.52632 0.67442 moveto
0.54761 0.66702 0.56078 0.64528 0.57895 0.63193 curveto
stroke
0.52632 0.66683 moveto
0.5438 0.66034 0.55384 0.64132 0.56974 0.63158 curveto
stroke
0.52632 0.65924 moveto
0.53996 0.65397 0.54751 0.63852 0.5604 0.63158 curveto
stroke
0.52632 0.65166 moveto
0.53618 0.64773 0.54151 0.63625 0.55105 0.63158 curveto
stroke
0.52632 0.64407 moveto
0.53244 0.64159 0.53569 0.63431 0.5417 0.63158 curveto
stroke
0.52632 0.63648 moveto
0.52871 0.63549 0.52997 0.6326 0.53236 0.63158 curveto
stroke
0.52632 0.71267 moveto
0.54131 0.70856 0.54877 0.68981 0.56328 0.68421 curveto
stroke
0.57895 0.13944 moveto
0.58754 0.14324 0.59189 0.15363 0.60026 0.15789 curveto
stroke
0.63158 0.18198 moveto
0.62284 0.17213 0.612 0.16386 0.60026 0.15789 curveto
stroke
0.57895 0.16587 moveto
0.59797 0.17632 0.61156 0.19462 0.62632 0.21053 curveto
stroke
0.57895 0.17794 moveto
0.59239 0.18631 0.60162 0.20008 0.61353 0.21053 curveto
stroke
0.57895 0.19 moveto
0.58725 0.19552 0.59288 0.20436 0.60073 0.21053 curveto
stroke
0.57895 0.20206 moveto
0.58233 0.2044 0.58461 0.2081 0.58793 0.21053 curveto
stroke
0.63158 0.2174 moveto
0.62992 0.21503 0.62828 0.21264 0.62632 0.21053 curveto
stroke
0.63158 0.23412 moveto
0.62661 0.22556 0.62097 0.21706 0.61353 0.21053 curveto
stroke
0.63158 0.25085 moveto
0.62372 0.23586 0.61404 0.22098 0.60073 0.21053 curveto
stroke
0.63058 0.26316 moveto
0.62023 0.24309 0.60615 0.22386 0.58793 0.21053 curveto
stroke
0.57895 0.21173 moveto
0.59789 0.2255 0.61518 0.24284 0.62682 0.26316 curveto
stroke
0.57895 0.21578 moveto
0.59589 0.22914 0.61168 0.24482 0.62305 0.26316 curveto
stroke
0.57895 0.21983 moveto
0.59404 0.23254 0.6084 0.24669 0.61928 0.26316 curveto
stroke
0.57895 0.22388 moveto
0.59233 0.23575 0.6053 0.24847 0.61551 0.26316 curveto
stroke
0.63158 0.26558 moveto
0.6312 0.26479 0.63098 0.26393 0.63058 0.26316 curveto
stroke
0.63158 0.27475 moveto
0.62999 0.27089 0.62889 0.26678 0.62682 0.26316 curveto
stroke
0.63158 0.28392 moveto
0.62901 0.27689 0.62699 0.26952 0.62305 0.26316 curveto
stroke
0.63158 0.29309 moveto
0.62817 0.28285 0.62522 0.27216 0.61928 0.26316 curveto
stroke
0.63158 0.30226 moveto
0.62744 0.28879 0.62355 0.27473 0.61551 0.26316 curveto
stroke
0.6313 0.52632 moveto
0.63143 0.52597 0.63146 0.5256 0.63158 0.52526 curveto
stroke
0.62911 0.52632 moveto
0.63027 0.52328 0.63063 0.51999 0.63158 0.51688 curveto
stroke
0.62692 0.52632 moveto
0.62921 0.52062 0.62996 0.51443 0.63158 0.50851 curveto
stroke
0.62906 0.57895 moveto
0.63005 0.57731 0.6307 0.57549 0.63158 0.57378 curveto
stroke
0.62308 0.57895 moveto
0.62673 0.57362 0.62897 0.56744 0.63158 0.56153 curveto
stroke
0.61709 0.57895 moveto
0.62366 0.57012 0.62749 0.55949 0.63158 0.54928 curveto
stroke
0.61111 0.57895 moveto
0.62074 0.56674 0.62615 0.5516 0.63158 0.53702 curveto
stroke
0.60513 0.57895 moveto
0.61759 0.56382 0.6247 0.54476 0.6313 0.52632 curveto
stroke
0.59915 0.57895 moveto
0.61224 0.56358 0.62192 0.54518 0.62911 0.52632 curveto
stroke
0.59317 0.57895 moveto
0.60689 0.56326 0.61915 0.54566 0.62692 0.52632 curveto
stroke
0.62669 0.63158 moveto
0.62848 0.62969 0.63003 0.62758 0.63158 0.62549 curveto
stroke
0.603 0.63158 moveto
0.61484 0.62203 0.62385 0.60911 0.63158 0.596 curveto
stroke
0.57931 0.63158 moveto
0.59875 0.61727 0.61657 0.59961 0.62906 0.57895 curveto
stroke
0.57895 0.62538 moveto
0.5954 0.61177 0.61101 0.59656 0.62308 0.57895 curveto
stroke
0.57895 0.61909 moveto
0.5927 0.60678 0.60608 0.59376 0.61709 0.57895 curveto
stroke
0.57895 0.61279 moveto
0.59025 0.6021 0.60148 0.59117 0.61111 0.57895 curveto
stroke
0.57895 0.6065 moveto
0.58797 0.5976 0.59708 0.58873 0.60513 0.57895 curveto
stroke
0.57895 0.6002 moveto
0.5858 0.59323 0.59281 0.58639 0.59915 0.57895 curveto
stroke
0.57895 0.59391 moveto
0.58371 0.58894 0.58864 0.58413 0.59317 0.57895 curveto
stroke
0.57895 0.67738 moveto
0.59792 0.66614 0.61148 0.64755 0.62669 0.63158 curveto
stroke
0.57895 0.65465 moveto
0.58806 0.64829 0.59435 0.63855 0.603 0.63158 curveto
stroke
0.57895 0.63193 moveto
0.57908 0.63183 0.57917 0.63168 0.57931 0.63158 curveto
stroke
0.63158 0.18198 moveto
0.64023 0.19173 0.65059 0.20002 0.6583 0.21053 curveto
stroke
0.68288 0.26316 moveto
0.67708 0.24468 0.66976 0.22613 0.6583 0.21053 curveto
stroke
0.63158 0.2174 moveto
0.6429 0.23356 0.6615 0.24497 0.66915 0.26316 curveto
stroke
0.63158 0.23412 moveto
0.63786 0.24495 0.65014 0.2518 0.65542 0.26316 curveto
stroke
0.63158 0.25085 moveto
0.63405 0.25555 0.63936 0.25839 0.64169 0.26316 curveto
stroke
0.68421 0.26927 moveto
0.68368 0.26726 0.6835 0.26515 0.68288 0.26316 curveto
stroke
0.68264 0.31579 moveto
0.67951 0.29795 0.67617 0.27985 0.66915 0.26316 curveto
stroke
0.67662 0.31579 moveto
0.67273 0.29728 0.66338 0.28031 0.65542 0.26316 curveto
stroke
0.67059 0.31579 moveto
0.66609 0.29629 0.65046 0.28115 0.64169 0.26316 curveto
stroke
0.63158 0.26558 moveto
0.6402 0.28365 0.65981 0.29634 0.66457 0.31579 curveto
stroke
0.63158 0.27475 moveto
0.63781 0.28988 0.6545 0.29993 0.65854 0.31579 curveto
stroke
0.63158 0.28392 moveto
0.63595 0.29585 0.64929 0.30349 0.65252 0.31579 curveto
stroke
0.63158 0.29309 moveto
0.63444 0.30168 0.64415 0.30704 0.64649 0.31579 curveto
stroke
0.63158 0.30226 moveto
0.63316 0.30742 0.63905 0.31058 0.64047 0.31579 curveto
stroke
0.68421 0.33279 moveto
0.68354 0.32714 0.68362 0.32139 0.68264 0.31579 curveto
stroke
0.68247 0.36842 moveto
0.68133 0.35081 0.68024 0.33307 0.67662 0.31579 curveto
stroke
0.67864 0.36842 moveto
0.67732 0.35072 0.67458 0.33308 0.67059 0.31579 curveto
stroke
0.67481 0.36842 moveto
0.67335 0.35061 0.66882 0.33315 0.66457 0.31579 curveto
stroke
0.67098 0.36842 moveto
0.66942 0.35046 0.66299 0.33326 0.65854 0.31579 curveto
stroke
0.66714 0.36842 moveto
0.6655 0.35029 0.65714 0.3334 0.65252 0.31579 curveto
stroke
0.66331 0.36842 moveto
0.66159 0.35008 0.65127 0.33358 0.64649 0.31579 curveto
stroke
0.65948 0.36842 moveto
0.65769 0.34985 0.64538 0.33378 0.64047 0.31579 curveto
stroke
0.68306 0.42105 moveto
0.68363 0.40352 0.68361 0.38593 0.68247 0.36842 curveto
stroke
0.67953 0.42105 moveto
0.68014 0.40352 0.67995 0.38592 0.67864 0.36842 curveto
stroke
0.67599 0.42105 moveto
0.67663 0.40352 0.67624 0.38591 0.67481 0.36842 curveto
stroke
0.67246 0.42105 moveto
0.67312 0.40351 0.67249 0.38591 0.67098 0.36842 curveto
stroke
0.66893 0.42105 moveto
0.66961 0.40351 0.66873 0.3859 0.66714 0.36842 curveto
stroke
0.6654 0.42105 moveto
0.66609 0.40351 0.66496 0.3859 0.66331 0.36842 curveto
stroke
0.66187 0.42105 moveto
0.66256 0.4035 0.66117 0.3859 0.65948 0.36842 curveto
stroke
0.67951 0.47368 moveto
0.68199 0.45628 0.68249 0.43863 0.68306 0.42105 curveto
stroke
0.6748 0.47368 moveto
0.67749 0.45628 0.67892 0.43866 0.67953 0.42105 curveto
stroke
0.67008 0.47368 moveto
0.67293 0.45626 0.67535 0.4387 0.67599 0.42105 curveto
stroke
0.66536 0.47368 moveto
0.66833 0.45623 0.6718 0.43874 0.67246 0.42105 curveto
stroke
0.66064 0.47368 moveto
0.6637 0.45619 0.66825 0.4388 0.66893 0.42105 curveto
stroke
0.65592 0.47368 moveto
0.65905 0.45614 0.6647 0.43887 0.6654 0.42105 curveto
stroke
0.6512 0.47368 moveto
0.6544 0.45607 0.66116 0.43894 0.66187 0.42105 curveto
stroke
0.67611 0.52632 moveto
0.68093 0.50932 0.68207 0.49149 0.68421 0.47396 curveto
stroke
0.66697 0.52632 moveto
0.67238 0.50911 0.67697 0.49154 0.67951 0.47368 curveto
stroke
0.65784 0.52632 moveto
0.66364 0.50882 0.67197 0.4919 0.6748 0.47368 curveto
stroke
0.6487 0.52632 moveto
0.65484 0.5084 0.66702 0.49237 0.67008 0.47368 curveto
stroke
0.63956 0.52632 moveto
0.64602 0.50788 0.66208 0.49295 0.66536 0.47368 curveto
stroke
0.63158 0.52526 moveto
0.63808 0.50663 0.65724 0.49312 0.66064 0.47368 curveto
stroke
0.63158 0.51688 moveto
0.63642 0.50108 0.65302 0.48996 0.65592 0.47368 curveto
stroke
0.63158 0.50851 moveto
0.6351 0.49566 0.64882 0.48679 0.6512 0.47368 curveto
stroke
0.67205 0.57895 moveto
0.67836 0.56564 0.68085 0.55082 0.68421 0.53648 curveto
stroke
0.64641 0.57895 moveto
0.65604 0.56125 0.67062 0.5457 0.67611 0.52632 curveto
stroke
0.63158 0.57378 moveto
0.64059 0.55622 0.66106 0.54514 0.66697 0.52632 curveto
stroke
0.63158 0.56153 moveto
0.6375 0.54814 0.65323 0.54021 0.65784 0.52632 curveto
stroke
0.63158 0.54928 moveto
0.63513 0.54041 0.64561 0.53535 0.6487 0.52632 curveto
stroke
0.63158 0.53702 moveto
0.63313 0.53285 0.63809 0.53052 0.63956 0.52632 curveto
stroke
0.63158 0.62549 moveto
0.64379 0.60895 0.66326 0.59753 0.67205 0.57895 curveto
stroke
0.63158 0.596 moveto
0.63541 0.58951 0.64281 0.58557 0.64641 0.57895 curveto
stroke
0.68421 0.26927 moveto
0.68883 0.28679 0.7096 0.29788 0.71233 0.31579 curveto
stroke
0.72257 0.36842 moveto
0.72165 0.35057 0.71503 0.33346 0.71233 0.31579 curveto
stroke
0.68421 0.33279 moveto
0.6857 0.34541 0.69703 0.35574 0.69776 0.36842 curveto
stroke
0.72349 0.42105 moveto
0.724 0.40351 0.72347 0.38594 0.72257 0.36842 curveto
stroke
0.70003 0.42105 moveto
0.70057 0.4035 0.69877 0.38595 0.69776 0.36842 curveto
stroke
0.71653 0.47368 moveto
0.71853 0.4561 0.72298 0.43874 0.72349 0.42105 curveto
stroke
0.68436 0.47368 moveto
0.68658 0.45551 0.69946 0.43935 0.70003 0.42105 curveto
stroke
0.69146 0.52632 moveto
0.69569 0.50735 0.71432 0.49299 0.71653 0.47368 curveto
stroke
0.68421 0.47396 moveto
0.68422 0.47385 0.68435 0.47379 0.68436 0.47368 curveto
stroke
0.68421 0.53648 moveto
0.68516 0.53243 0.69056 0.53038 0.69146 0.52632 curveto
stroke
% IY Contours
newpath
0.0 setgray
0.004 setlinewidth
0.09805 0.52632 moveto
0.09783 0.51325 0.10432 0.50082 0.10526 0.48778 curveto
stroke
0.10526 0.5493 moveto
0.1048 0.54129 0.09818 0.53435 0.09805 0.52632 curveto
stroke
0.11903 0.42105 moveto
0.12741 0.40379 0.14479 0.39261 0.15789 0.37861 curveto
stroke
0.152 0.42105 moveto
0.1535 0.41856 0.15635 0.41708 0.15789 0.41462 curveto
stroke
0.10582 0.47368 moveto
0.10803 0.45573 0.11114 0.43733 0.11903 0.42105 curveto
stroke
0.1196 0.47368 moveto
0.12349 0.45345 0.14141 0.43872 0.152 0.42105 curveto
stroke
0.13338 0.47368 moveto
0.13649 0.4595 0.15244 0.45113 0.15789 0.43768 curveto
stroke
0.14716 0.47368 moveto
0.14861 0.46749 0.15612 0.46402 0.15789 0.45792 curveto
stroke
0.10526 0.48778 moveto
0.1056 0.48309 0.10525 0.47835 0.10582 0.47368 curveto
stroke
0.11391 0.52632 moveto
0.11394 0.50867 0.11628 0.49101 0.1196 0.47368 curveto
stroke
0.12363 0.52632 moveto
0.12382 0.50847 0.12956 0.49111 0.13338 0.47368 curveto
stroke
0.13336 0.52632 moveto
0.13364 0.50818 0.14303 0.49135 0.14716 0.47368 curveto
stroke
0.14308 0.52632 moveto
0.14338 0.51022 0.15474 0.49614 0.15789 0.48035 curveto
stroke
0.1528 0.52632 moveto
0.15292 0.52079 0.15752 0.51604 0.15789 0.51052 curveto
stroke
0.10526 0.5493 moveto
0.10583 0.55918 0.10571 0.56913 0.10692 0.57895 curveto
stroke
0.11851 0.57895 moveto
0.11621 0.56149 0.11388 0.54393 0.11391 0.52632 curveto
stroke
0.13009 0.57895 moveto
0.12773 0.56143 0.12344 0.54399 0.12363 0.52632 curveto
stroke
0.14167 0.57895 moveto
0.13927 0.56135 0.13308 0.54407 0.13336 0.52632 curveto
stroke
0.15325 0.57895 moveto
0.15082 0.56124 0.14275 0.54418 0.14308 0.52632 curveto
stroke
0.15789 0.55086 moveto
0.15747 0.54252 0.15263 0.53467 0.1528 0.52632 curveto
stroke
0.11718 0.63158 moveto
0.11258 0.61431 0.10912 0.59669 0.10692 0.57895 curveto
stroke
0.14043 0.63158 moveto
0.13527 0.61329 0.12099 0.59779 0.11851 0.57895 curveto
stroke
0.15789 0.62663 moveto
0.1532 0.60884 0.13254 0.59718 0.13009 0.57895 curveto
stroke
0.15789 0.60677 moveto
0.15584 0.59623 0.14312 0.58959 0.14167 0.57895 curveto
stroke
0.15789 0.58691 moveto
0.15744 0.58387 0.15367 0.58199 0.15325 0.57895 curveto
stroke
0.15789 0.68281 moveto
0.14894 0.66292 0.12278 0.65266 0.11718 0.63158 curveto
stroke
0.15789 0.65355 moveto
0.15503 0.64464 0.14298 0.64058 0.14043 0.63158 curveto
stroke
0.17188 0.36842 moveto
0.18612 0.36037 0.19511 0.34365 0.21053 0.33815 curveto
stroke
0.15789 0.37861 moveto
0.16184 0.3744 0.16686 0.37126 0.17188 0.36842 curveto
stroke
0.15789 0.41462 moveto
0.17009 0.39525 0.18966 0.37992 0.21053 0.37052 curveto
stroke
0.16643 0.42105 moveto
0.17869 0.4052 0.19334 0.39047 0.21053 0.38015 curveto
stroke
0.17681 0.42105 moveto
0.18714 0.40973 0.19796 0.39856 0.21053 0.38979 curveto
stroke
0.1872 0.42105 moveto
0.19474 0.41359 0.20212 0.40588 0.21053 0.39942 curveto
stroke
0.19759 0.42105 moveto
0.20191 0.41706 0.20598 0.41278 0.21053 0.40905 curveto
stroke
0.20798 0.42105 moveto
0.20885 0.42029 0.20965 0.41944 0.21053 0.41869 curveto
stroke
0.15789 0.43768 moveto
0.16023 0.4319 0.16261 0.42598 0.16643 0.42105 curveto
stroke
0.15789 0.45792 moveto
0.16176 0.44466 0.16751 0.43126 0.17681 0.42105 curveto
stroke
0.15871 0.47368 moveto
0.16357 0.45433 0.17302 0.43509 0.1872 0.42105 curveto
stroke
0.16242 0.47368 moveto
0.16828 0.45341 0.18208 0.43536 0.19759 0.42105 curveto
stroke
0.16613 0.47368 moveto
0.17296 0.45234 0.19112 0.43583 0.20798 0.42105 curveto
stroke
0.16984 0.47368 moveto
0.1768 0.45356 0.19523 0.43925 0.21053 0.42444 curveto
stroke
0.17355 0.47368 moveto
0.18023 0.45552 0.19748 0.44322 0.21053 0.42893 curveto
stroke
0.15789 0.48035 moveto
0.15833 0.47816 0.15817 0.47586 0.15871 0.47368 curveto
stroke
0.15789 0.51052 moveto
0.15873 0.49818 0.15899 0.48557 0.16242 0.47368 curveto
stroke
0.15896 0.52632 moveto
0.15943 0.50862 0.16073 0.49055 0.16613 0.47368 curveto
stroke
0.16121 0.52632 moveto
0.16185 0.50855 0.16403 0.49049 0.16984 0.47368 curveto
stroke
0.16345 0.52632 moveto
0.16424 0.50847 0.16738 0.49045 0.17355 0.47368 curveto
stroke
0.15789 0.55086 moveto
0.15837 0.56022 0.15799 0.56966 0.15927 0.57895 curveto
stroke
0.16157 0.57895 moveto
0.15915 0.56155 0.1585 0.54387 0.15896 0.52632 curveto
stroke
0.16387 0.57895 moveto
0.16144 0.56155 0.16058 0.54387 0.16121 0.52632 curveto
stroke
0.16616 0.57895 moveto
0.16372 0.56155 0.16268 0.54387 0.16345 0.52632 curveto
stroke
0.15789 0.62663 moveto
0.15832 0.62826 0.15841 0.62996 0.15889 0.63158 curveto
stroke
0.15789 0.60677 moveto
0.15951 0.61505 0.16037 0.62352 0.16286 0.63158 curveto
stroke
0.15789 0.58691 moveto
0.16016 0.60193 0.1622 0.61712 0.16684 0.63158 curveto
stroke
0.17082 0.63158 moveto
0.1652 0.61452 0.16173 0.59674 0.15927 0.57895 curveto
stroke
0.17479 0.63158 moveto
0.16903 0.61443 0.16406 0.59686 0.16157 0.57895 curveto
stroke
0.17877 0.63158 moveto
0.17289 0.61432 0.16639 0.59701 0.16387 0.57895 curveto
stroke
0.18274 0.63158 moveto
0.17674 0.61419 0.16872 0.59716 0.16616 0.57895 curveto
stroke
0.15789 0.68281 moveto
0.1581 0.68327 0.15824 0.68375 0.15845 0.68421 curveto
stroke
0.15789 0.65355 moveto
0.16126 0.66402 0.16481 0.67455 0.17007 0.68421 curveto
stroke
0.18169 0.68421 moveto
0.17218 0.66762 0.16425 0.64993 0.15889 0.63158 curveto
stroke
0.19331 0.68421 moveto
0.18303 0.66674 0.16885 0.65094 0.16286 0.63158 curveto
stroke
0.20494 0.68421 moveto
0.19382 0.66562 0.17345 0.6522 0.16684 0.63158 curveto
stroke
0.21053 0.68161 moveto
0.19994 0.66314 0.17747 0.6518 0.17082 0.63158 curveto
stroke
0.21053 0.6766 moveto
0.20157 0.65966 0.18089 0.64974 0.17479 0.63158 curveto
stroke
0.21053 0.67159 moveto
0.20299 0.65632 0.18426 0.6477 0.17877 0.63158 curveto
stroke
0.21053 0.66658 moveto
0.20424 0.65308 0.1876 0.64566 0.18274 0.63158 curveto
stroke
0.1956 0.73684 moveto
0.18124 0.72088 0.16759 0.70364 0.15845 0.68421 curveto
stroke
0.21053 0.72762 moveto
0.19852 0.7119 0.17953 0.70158 0.17007 0.68421 curveto
stroke
0.21053 0.71515 moveto
0.20261 0.70349 0.1887 0.69644 0.18169 0.68421 curveto
stroke
0.21053 0.70268 moveto
0.20601 0.69558 0.19758 0.69146 0.19331 0.68421 curveto
stroke
0.21053 0.69021 moveto
0.2091 0.68788 0.20634 0.68656 0.20494 0.68421 curveto
stroke
0.21053 0.7517 moveto
0.20573 0.74658 0.2003 0.74206 0.1956 0.73684 curveto
stroke
0.21053 0.33815 moveto
0.22771 0.33202 0.24506 0.32546 0.26316 0.32318 curveto
stroke
0.21723 0.36842 moveto
0.23402 0.36257 0.24562 0.34423 0.26316 0.34133 curveto
stroke
0.248 0.36842 moveto
0.25374 0.36719 0.25739 0.36052 0.26316 0.35948 curveto
stroke
0.21053 0.37052 moveto
0.21266 0.36956 0.21502 0.36919 0.21723 0.36842 curveto
stroke
0.21053 0.38015 moveto
0.22175 0.37342 0.23521 0.37118 0.248 0.36842 curveto
stroke
0.21053 0.38979 moveto
0.22586 0.37908 0.24485 0.37418 0.26316 0.37038 curveto
stroke
0.21053 0.39942 moveto
0.22595 0.38758 0.24427 0.3789 0.26316 0.37425 curveto
stroke
0.21053 0.40905 moveto
0.22627 0.39616 0.24354 0.38354 0.26316 0.37812 curveto
stroke
0.21053 0.41869 moveto
0.22675 0.40475 0.24268 0.38816 0.26316 0.38199 curveto
stroke
0.21456 0.42105 moveto
0.23031 0.40873 0.24412 0.39198 0.26316 0.38586 curveto
stroke
0.2199 0.42105 moveto
0.23451 0.41088 0.2463 0.39544 0.26316 0.38973 curveto
stroke
0.21053 0.42444 moveto
0.21179 0.42322 0.21318 0.42213 0.21456 0.42105 curveto
stroke
0.21053 0.42893 moveto
0.21328 0.42591 0.21655 0.42339 0.2199 0.42105 curveto
stroke
0.21053 0.68161 moveto
0.21101 0.68246 0.21138 0.68338 0.21189 0.68421 curveto
stroke
0.21053 0.6766 moveto
0.21187 0.67914 0.21299 0.6818 0.21453 0.68421 curveto
stroke
0.21053 0.67159 moveto
0.21263 0.67585 0.21455 0.68024 0.21717 0.68421 curveto
stroke
0.21053 0.66658 moveto
0.21333 0.6726 0.21608 0.67871 0.21981 0.68421 curveto
stroke
0.21053 0.72762 moveto
0.21303 0.7309 0.21583 0.73397 0.2188 0.73684 curveto
stroke
0.21053 0.71515 moveto
0.21598 0.72319 0.22275 0.73036 0.22999 0.73684 curveto
stroke
0.21053 0.70268 moveto
0.21874 0.71559 0.22958 0.72687 0.24117 0.73684 curveto
stroke
0.21053 0.69021 moveto
0.22141 0.70803 0.23636 0.72342 0.25236 0.73684 curveto
stroke
0.26316 0.73675 moveto
0.2443 0.72116 0.22473 0.70504 0.21189 0.68421 curveto
stroke
0.26316 0.73404 moveto
0.24572 0.71873 0.22705 0.70376 0.21453 0.68421 curveto
stroke
0.26316 0.73134 moveto
0.24702 0.71646 0.22927 0.70253 0.21717 0.68421 curveto
stroke
0.26316 0.72864 moveto
0.24824 0.7143 0.23142 0.70134 0.21981 0.68421 curveto
stroke
0.21053 0.7517 moveto
0.22528 0.76745 0.24433 0.77887 0.26316 0.78941 curveto
stroke
0.26316 0.77883 moveto
0.24646 0.76718 0.23343 0.751 0.2188 0.73684 curveto
stroke
0.26316 0.76824 moveto
0.25102 0.75905 0.24133 0.747 0.22999 0.73684 curveto
stroke
0.26316 0.75765 moveto
0.25524 0.7514 0.24882 0.74342 0.24117 0.73684 curveto
stroke
0.26316 0.74706 moveto
0.25931 0.74394 0.25616 0.74003 0.25236 0.73684 curveto
stroke
0.26316 0.32318 moveto
0.2806 0.32098 0.29821 0.32013 0.31579 0.3199 curveto
stroke
0.26316 0.34133 moveto
0.2807 0.33843 0.29801 0.33314 0.31579 0.33263 curveto
stroke
0.26316 0.35948 moveto
0.28104 0.35627 0.29764 0.34599 0.31579 0.34536 curveto
stroke
0.2834 0.36842 moveto
0.29466 0.36717 0.30446 0.35851 0.31579 0.35809 curveto
stroke
0.26316 0.37038 moveto
0.2698 0.36901 0.27666 0.36917 0.2834 0.36842 curveto
stroke
0.26316 0.37425 moveto
0.28028 0.37004 0.29817 0.3696 0.31579 0.36886 curveto
stroke
0.26316 0.37812 moveto
0.28021 0.37341 0.29812 0.37216 0.31579 0.37119 curveto
stroke
0.26316 0.38199 moveto
0.28017 0.37687 0.29806 0.37468 0.31579 0.37352 curveto
stroke
0.26316 0.38586 moveto
0.28016 0.3804 0.29798 0.37717 0.31579 0.37585 curveto
stroke
0.26316 0.38973 moveto
0.28017 0.38397 0.29789 0.37965 0.31579 0.37818 curveto
stroke
0.26316 0.73675 moveto
0.2632 0.73678 0.26324 0.73681 0.26328 0.73684 curveto
stroke
0.26316 0.73404 moveto
0.26429 0.73503 0.2655 0.73592 0.26668 0.73684 curveto
stroke
0.26316 0.73134 moveto
0.26533 0.73334 0.26773 0.73507 0.27009 0.73684 curveto
stroke
0.26316 0.72864 moveto
0.26633 0.73169 0.26994 0.73426 0.27349 0.73684 curveto
stroke
0.26316 0.78941 moveto
0.2632 0.78944 0.26324 0.78945 0.26328 0.78947 curveto
stroke
0.26316 0.77883 moveto
0.26959 0.78331 0.277 0.78623 0.28415 0.78947 curveto
stroke
0.26316 0.76824 moveto
0.27563 0.77768 0.2906 0.7834 0.30502 0.78947 curveto
stroke
0.26316 0.75765 moveto
0.27906 0.77021 0.29717 0.78006 0.31579 0.78805 curveto
stroke
0.26316 0.74706 moveto
0.27997 0.76069 0.29611 0.77608 0.31579 0.78511 curveto
stroke
0.31579 0.78217 moveto
0.29496 0.77213 0.28113 0.75154 0.26328 0.73684 curveto
stroke
0.31579 0.77923 moveto
0.29646 0.76955 0.28371 0.75018 0.26668 0.73684 curveto
stroke
0.31579 0.77629 moveto
0.29791 0.76706 0.28617 0.74894 0.27009 0.73684 curveto
stroke
0.31579 0.77335 moveto
0.29933 0.76464 0.28856 0.74779 0.27349 0.73684 curveto
stroke
0.31579 0.83368 moveto
0.29422 0.82604 0.28326 0.80062 0.26328 0.78947 curveto
stroke
0.31579 0.81611 moveto
0.30296 0.81106 0.2967 0.79517 0.28415 0.78947 curveto
stroke
0.31579 0.79854 moveto
0.31144 0.79677 0.30934 0.79129 0.30502 0.78947 curveto
stroke
0.31579 0.3199 moveto
0.33334 0.31967 0.3509 0.32014 0.36842 0.32121 curveto
stroke
0.31579 0.33263 moveto
0.33334 0.33212 0.3509 0.33344 0.36842 0.33455 curveto
stroke
0.31579 0.34536 moveto
0.33334 0.34475 0.35089 0.34677 0.36842 0.34789 curveto
stroke
0.31579 0.35809 moveto
0.33335 0.35742 0.35088 0.3601 0.36842 0.36123 curveto
stroke
0.31579 0.36886 moveto
0.33332 0.36812 0.35091 0.36828 0.36842 0.36939 curveto
stroke
0.31579 0.37119 moveto
0.33331 0.37023 0.35091 0.37041 0.36842 0.37149 curveto
stroke
0.31579 0.37352 moveto
0.3333 0.37238 0.35091 0.37253 0.36842 0.3736 curveto
stroke
0.31579 0.37585 moveto
0.33329 0.37455 0.35091 0.37465 0.36842 0.3757 curveto
stroke
0.31579 0.37818 moveto
0.33328 0.37675 0.35091 0.37677 0.36842 0.3778 curveto
stroke
0.31579 0.78805 moveto
0.31715 0.78863 0.31861 0.78894 0.31998 0.78947 curveto
stroke
0.31579 0.78511 moveto
0.3199 0.787 0.32438 0.78796 0.32865 0.78947 curveto
stroke
0.31579 0.78217 moveto
0.32261 0.78546 0.33012 0.7871 0.33732 0.78947 curveto
stroke
0.31579 0.77923 moveto
0.32529 0.78399 0.33584 0.7863 0.34598 0.78947 curveto
stroke
0.31579 0.77629 moveto
0.32794 0.78257 0.34155 0.78556 0.35465 0.78947 curveto
stroke
0.31579 0.77335 moveto
0.33058 0.78118 0.34724 0.78484 0.36332 0.78947 curveto
stroke
0.31579 0.83368 moveto
0.32758 0.83785 0.34011 0.83951 0.35234 0.84211 curveto
stroke
0.31579 0.81611 moveto
0.33337 0.82303 0.35001 0.8329 0.36842 0.83715 curveto
stroke
0.31579 0.79854 moveto
0.33486 0.80631 0.34845 0.82587 0.36842 0.83087 curveto
stroke
0.36842 0.82458 moveto
0.34913 0.81955 0.33857 0.7967 0.31998 0.78947 curveto
stroke
0.36842 0.8183 moveto
0.35261 0.81406 0.34408 0.79494 0.32865 0.78947 curveto
stroke
0.36842 0.81202 moveto
0.35607 0.80865 0.34948 0.79349 0.33732 0.78947 curveto
stroke
0.36842 0.80574 moveto
0.35952 0.80327 0.3548 0.79223 0.34598 0.78947 curveto
stroke
0.36842 0.79946 moveto
0.36296 0.79793 0.36008 0.7911 0.35465 0.78947 curveto
stroke
0.36842 0.79317 moveto
0.3664 0.7926 0.36534 0.79006 0.36332 0.78947 curveto
stroke
0.36842 0.85401 moveto
0.36188 0.8527 0.35886 0.84349 0.35234 0.84211 curveto
stroke
0.36842 0.32121 moveto
0.38607 0.3223 0.40354 0.32542 0.42105 0.32785 curveto
stroke
0.36842 0.33455 moveto
0.38655 0.3357 0.40308 0.34607 0.42105 0.34873 curveto
stroke
0.36842 0.34789 moveto
0.38663 0.34906 0.40112 0.36578 0.41918 0.36842 curveto
stroke
0.36842 0.36123 moveto
0.3748 0.36164 0.37984 0.36786 0.38621 0.36842 curveto
stroke
0.42105 0.36858 moveto
0.42043 0.36849 0.4198 0.36851 0.41918 0.36842 curveto
stroke
0.42105 0.37142 moveto
0.40954 0.36957 0.39782 0.36944 0.38621 0.36842 curveto
stroke
0.36842 0.36939 moveto
0.386 0.37051 0.40368 0.37134 0.42105 0.37426 curveto
stroke
0.36842 0.37149 moveto
0.38603 0.37258 0.40367 0.37409 0.42105 0.3771 curveto
stroke
0.36842 0.3736 moveto
0.38606 0.37467 0.40365 0.37685 0.42105 0.37994 curveto
stroke
0.36842 0.3757 moveto
0.38609 0.37675 0.40363 0.37963 0.42105 0.38278 curveto
stroke
0.36842 0.3778 moveto
0.38613 0.37884 0.40361 0.38242 0.42105 0.38562 curveto
stroke
0.36842 0.83715 moveto
0.37994 0.83981 0.39183 0.84046 0.40353 0.84211 curveto
stroke
0.36842 0.83087 moveto
0.3857 0.83519 0.40339 0.83778 0.42105 0.84007 curveto
stroke
0.36842 0.82458 moveto
0.38584 0.82913 0.40321 0.83428 0.42105 0.83671 curveto
stroke
0.36842 0.8183 moveto
0.38605 0.82303 0.40298 0.83081 0.42105 0.83335 curveto
stroke
0.36842 0.81202 moveto
0.3863 0.8169 0.4027 0.82735 0.42105 0.82999 curveto
stroke
0.36842 0.80574 moveto
0.38661 0.81077 0.40238 0.82389 0.42105 0.82664 curveto
stroke
0.36842 0.79946 moveto
0.38697 0.80464 0.40201 0.82044 0.42105 0.82328 curveto
stroke
0.36842 0.79317 moveto
0.38736 0.79851 0.40159 0.81699 0.42105 0.81992 curveto
stroke
0.36842 0.85401 moveto
0.38738 0.85779 0.40185 0.87614 0.42105 0.8784 curveto
stroke
0.42105 0.85236 moveto
0.41434 0.85153 0.41023 0.84305 0.40353 0.84211 curveto
stroke
0.42105 0.32785 moveto
0.43996 0.33047 0.45508 0.34612 0.47368 0.3504 curveto
stroke
0.42105 0.34873 moveto
0.43331 0.35054 0.4404 0.36616 0.45259 0.36842 curveto
stroke
0.47368 0.37204 moveto
0.46678 0.37023 0.4596 0.36972 0.45259 0.36842 curveto
stroke
0.42105 0.36858 moveto
0.43866 0.37125 0.45656 0.37287 0.47368 0.37778 curveto
stroke
0.42105 0.37142 moveto
0.43882 0.37428 0.45645 0.37832 0.47368 0.38351 curveto
stroke
0.42105 0.37426 moveto
0.43904 0.37728 0.45626 0.38384 0.47368 0.38925 curveto
stroke
0.42105 0.3771 moveto
0.43931 0.38027 0.45602 0.38938 0.47368 0.39498 curveto
stroke
0.42105 0.37994 moveto
0.43962 0.38324 0.45573 0.39494 0.47368 0.40072 curveto
stroke
0.42105 0.38278 moveto
0.43998 0.3862 0.45539 0.4005 0.47368 0.40646 curveto
stroke
0.42105 0.38562 moveto
0.44038 0.38917 0.45502 0.40605 0.47368 0.41219 curveto
stroke
0.42105 0.84007 moveto
0.43146 0.84142 0.44199 0.84136 0.45246 0.84211 curveto
stroke
0.42105 0.83671 moveto
0.43848 0.83909 0.45611 0.83982 0.47368 0.84052 curveto
stroke
0.42105 0.83335 moveto
0.43849 0.83581 0.45609 0.8372 0.47368 0.83784 curveto
stroke
0.42105 0.82999 moveto
0.4385 0.83251 0.45607 0.83457 0.47368 0.83515 curveto
stroke
0.42105 0.82664 moveto
0.43852 0.8292 0.45604 0.83192 0.47368 0.83247 curveto
stroke
0.42105 0.82328 moveto
0.43854 0.82588 0.45601 0.82927 0.47368 0.82978 curveto
stroke
0.42105 0.81992 moveto
0.43856 0.82256 0.45598 0.82661 0.47368 0.8271 curveto
stroke
0.42105 0.8784 moveto
0.43863 0.88047 0.456 0.88464 0.47368 0.88541 curveto
stroke
0.42105 0.85236 moveto
0.43917 0.85459 0.45545 0.86665 0.47368 0.86744 curveto
stroke
0.47368 0.84947 moveto
0.4662 0.84915 0.45993 0.84264 0.45246 0.84211 curveto
stroke
0.47368 0.3504 moveto
0.4833 0.35262 0.48761 0.366 0.49717 0.36842 curveto
stroke
0.52632 0.37635 moveto
0.51698 0.37259 0.50693 0.37089 0.49717 0.36842 curveto
stroke
0.47368 0.37204 moveto
0.49203 0.37684 0.50903 0.38587 0.52632 0.39368 curveto
stroke
0.47368 0.37778 moveto
0.49363 0.38349 0.50753 0.40219 0.52632 0.411 curveto
stroke
0.47368 0.38351 moveto
0.4935 0.38948 0.5043 0.4125 0.52315 0.42105 curveto
stroke
0.47368 0.38925 moveto
0.49043 0.39445 0.4994 0.41431 0.51559 0.42105 curveto
stroke
0.47368 0.39498 moveto
0.48738 0.39933 0.49465 0.41582 0.50803 0.42105 curveto
stroke
0.47368 0.40072 moveto
0.48435 0.40416 0.48997 0.41714 0.50047 0.42105 curveto
stroke
0.47368 0.40646 moveto
0.48134 0.40895 0.48534 0.41834 0.49292 0.42105 curveto
stroke
0.47368 0.41219 moveto
0.47832 0.41372 0.48074 0.41945 0.48536 0.42105 curveto
stroke
0.52632 0.42234 moveto
0.52529 0.42183 0.52418 0.42152 0.52315 0.42105 curveto
stroke
0.52632 0.4254 moveto
0.5229 0.4236 0.51915 0.42254 0.51559 0.42105 curveto
stroke
0.52632 0.42846 moveto
0.52057 0.42526 0.51415 0.42345 0.50803 0.42105 curveto
stroke
0.52632 0.43152 moveto
0.51827 0.42686 0.50918 0.4243 0.50047 0.42105 curveto
stroke
0.52632 0.43458 moveto
0.516 0.42842 0.50423 0.4251 0.49292 0.42105 curveto
stroke
0.52632 0.43764 moveto
0.51376 0.42994 0.49928 0.42587 0.48536 0.42105 curveto
stroke
0.47368 0.84052 moveto
0.49121 0.84122 0.50882 0.84131 0.52632 0.84004 curveto
stroke
0.47368 0.83784 moveto
0.49122 0.83847 0.50884 0.8384 0.52632 0.83683 curveto
stroke
0.47368 0.83515 moveto
0.49123 0.83573 0.50886 0.83542 0.52632 0.83362 curveto
stroke
0.47368 0.83247 moveto
0.49123 0.83301 0.50887 0.83239 0.52632 0.83041 curveto
stroke
0.47368 0.82978 moveto
0.49124 0.83029 0.50888 0.82933 0.52632 0.82719 curveto
stroke
0.47368 0.8271 moveto
0.49125 0.82758 0.50889 0.82625 0.52632 0.82398 curveto
stroke
0.47368 0.88541 moveto
0.49121 0.88617 0.50878 0.88642 0.52632 0.88576 curveto
stroke
0.47368 0.86744 moveto
0.49121 0.86819 0.5088 0.86816 0.52632 0.86724 curveto
stroke
0.47368 0.84947 moveto
0.49121 0.85022 0.5088 0.84972 0.52632 0.84872 curveto
stroke
0.52632 0.37635 moveto
0.54743 0.38486 0.55866 0.40895 0.57795 0.42105 curveto
stroke
0.52632 0.39368 moveto
0.53902 0.39941 0.54557 0.41462 0.55794 0.42105 curveto
stroke
0.52632 0.411 moveto
0.53095 0.41317 0.53332 0.41882 0.53793 0.42105 curveto
stroke
0.57895 0.42165 moveto
0.57862 0.42144 0.57828 0.42126 0.57795 0.42105 curveto
stroke
0.57895 0.43354 moveto
0.57262 0.42841 0.56517 0.42481 0.55794 0.42105 curveto
stroke
0.57895 0.44544 moveto
0.567 0.43494 0.55224 0.428 0.53793 0.42105 curveto
stroke
0.52632 0.42234 moveto
0.54522 0.43164 0.56342 0.4431 0.57895 0.45734 curveto
stroke
0.52632 0.4254 moveto
0.54651 0.43606 0.56232 0.45359 0.57895 0.46924 curveto
stroke
0.52632 0.42846 moveto
0.54606 0.43944 0.56014 0.45842 0.57681 0.47368 curveto
stroke
0.52632 0.43152 moveto
0.54455 0.44207 0.55754 0.45981 0.57339 0.47368 curveto
stroke
0.52632 0.43458 moveto
0.54309 0.4446 0.55505 0.46108 0.56997 0.47368 curveto
stroke
0.52632 0.43764 moveto
0.54167 0.44705 0.55263 0.46227 0.56656 0.47368 curveto
stroke
0.57895 0.4757 moveto
0.57825 0.47501 0.57753 0.47435 0.57681 0.47368 curveto
stroke
0.57895 0.47891 moveto
0.5772 0.47707 0.57531 0.47536 0.57339 0.47368 curveto
stroke
0.57895 0.48213 moveto
0.57619 0.47908 0.57311 0.47633 0.56997 0.47368 curveto
stroke
0.57895 0.48535 moveto
0.57523 0.48106 0.57095 0.47728 0.56656 0.47368 curveto
stroke
0.54388 0.84211 moveto
0.5556 0.84105 0.56754 0.84089 0.57895 0.83801 curveto
stroke
0.52632 0.84004 moveto
0.544 0.83876 0.56198 0.83741 0.57895 0.83225 curveto
stroke
0.52632 0.83683 moveto
0.54412 0.83523 0.56202 0.83226 0.57895 0.8265 curveto
stroke
0.52632 0.83362 moveto
0.54428 0.83177 0.562 0.82699 0.57895 0.82075 curveto
stroke
0.52632 0.83041 moveto
0.54448 0.82834 0.56191 0.82163 0.57895 0.81499 curveto
stroke
0.52632 0.82719 moveto
0.54471 0.82494 0.56178 0.81623 0.57895 0.80924 curveto
stroke
0.52632 0.82398 moveto
0.54499 0.82156 0.56159 0.81079 0.57895 0.80349 curveto
stroke
0.52632 0.88576 moveto
0.544 0.88508 0.5615 0.88176 0.57895 0.87882 curveto
stroke
0.52632 0.86724 moveto
0.54472 0.86627 0.56087 0.85389 0.57895 0.8503 curveto
stroke
0.52632 0.84872 moveto
0.53256 0.84836 0.53765 0.84267 0.54388 0.84211 curveto
stroke
0.57895 0.42165 moveto
0.59852 0.43443 0.6169 0.44978 0.63158 0.46797 curveto
stroke
0.57895 0.43354 moveto
0.59387 0.44565 0.60723 0.45962 0.62033 0.47368 curveto
stroke
0.57895 0.44544 moveto
0.5891 0.45437 0.59853 0.46409 0.60806 0.47368 curveto
stroke
0.57895 0.45734 moveto
0.58472 0.46263 0.59019 0.46823 0.5958 0.47368 curveto
stroke
0.57895 0.46924 moveto
0.5805 0.47069 0.58199 0.47221 0.58353 0.47368 curveto
stroke
0.63158 0.48836 moveto
0.62829 0.48314 0.62453 0.47819 0.62033 0.47368 curveto
stroke
0.63158 0.50435 moveto
0.62525 0.49313 0.61714 0.48282 0.60806 0.47368 curveto
stroke
0.63158 0.52035 moveto
0.62238 0.50304 0.60985 0.48735 0.5958 0.47368 curveto
stroke
0.62968 0.52632 moveto
0.61857 0.5058 0.60042 0.48978 0.58353 0.47368 curveto
stroke
0.57895 0.4757 moveto
0.59542 0.49202 0.61525 0.50613 0.62665 0.52632 curveto
stroke
0.57895 0.47891 moveto
0.5939 0.49465 0.61268 0.50756 0.62362 0.52632 curveto
stroke
0.57895 0.48213 moveto
0.59252 0.49714 0.61019 0.50895 0.62059 0.52632 curveto
stroke
0.57895 0.48535 moveto
0.59125 0.49952 0.60777 0.51031 0.61755 0.52632 curveto
stroke
0.63158 0.53061 moveto
0.6309 0.5292 0.63042 0.52769 0.62968 0.52632 curveto
stroke
0.63158 0.53745 moveto
0.62995 0.53373 0.62864 0.52985 0.62665 0.52632 curveto
stroke
0.63158 0.5443 moveto
0.62913 0.53822 0.62692 0.53198 0.62362 0.52632 curveto
stroke
0.63158 0.55115 moveto
0.6284 0.54267 0.62524 0.53408 0.62059 0.52632 curveto
stroke
0.63158 0.55799 moveto
0.62773 0.54711 0.62358 0.53617 0.61755 0.52632 curveto
stroke
0.62806 0.78947 moveto
0.62927 0.78848 0.63047 0.78747 0.63158 0.78636 curveto
stroke
0.62043 0.78947 moveto
0.6245 0.78664 0.6284 0.78342 0.63158 0.77962 curveto
stroke
0.6128 0.78947 moveto
0.61991 0.78509 0.62666 0.77963 0.63158 0.77287 curveto
stroke
0.60517 0.78947 moveto
0.61543 0.78374 0.62517 0.77598 0.63158 0.76613 curveto
stroke
0.59754 0.78947 moveto
0.611 0.78253 0.62385 0.77241 0.63158 0.75938 curveto
stroke
0.59203 0.84211 moveto
0.6056 0.83901 0.61993 0.8363 0.63158 0.82869 curveto
stroke
0.57895 0.83801 moveto
0.59774 0.83325 0.61636 0.82526 0.63158 0.81324 curveto
stroke
0.57895 0.83225 moveto
0.59901 0.82615 0.61576 0.81156 0.63158 0.79779 curveto
stroke
0.57895 0.8265 moveto
0.59835 0.81989 0.61221 0.80247 0.62806 0.78947 curveto
stroke
0.57895 0.82075 moveto
0.5952 0.81476 0.60622 0.79937 0.62043 0.78947 curveto
stroke
0.57895 0.81499 moveto
0.59211 0.80986 0.60077 0.79688 0.6128 0.78947 curveto
stroke
0.57895 0.80924 moveto
0.58909 0.80512 0.59561 0.79481 0.60517 0.78947 curveto
stroke
0.57895 0.80349 moveto
0.5861 0.80048 0.59064 0.79303 0.59754 0.78947 curveto
stroke
0.57895 0.87882 moveto
0.59856 0.87552 0.61324 0.85842 0.63158 0.85074 curveto
stroke
0.57895 0.8503 moveto
0.584 0.8493 0.58701 0.84325 0.59203 0.84211 curveto
stroke
0.63158 0.46797 moveto
0.63326 0.47005 0.63555 0.47159 0.63722 0.47368 curveto
stroke
0.68062 0.52632 moveto
0.67152 0.50548 0.65139 0.49147 0.63722 0.47368 curveto
stroke
0.63158 0.48836 moveto
0.64069 0.50283 0.65855 0.51097 0.66608 0.52632 curveto
stroke
0.63158 0.50435 moveto
0.63644 0.51297 0.64704 0.5175 0.65154 0.52632 curveto
stroke
0.63158 0.52035 moveto
0.63284 0.52272 0.63576 0.52393 0.637 0.52632 curveto
stroke
0.68421 0.53693 moveto
0.68301 0.53339 0.68212 0.52974 0.68062 0.52632 curveto
stroke
0.68409 0.57895 moveto
0.67962 0.56095 0.67425 0.54296 0.66608 0.52632 curveto
stroke
0.67887 0.57895 moveto
0.67376 0.55985 0.66053 0.54392 0.65154 0.52632 curveto
stroke
0.67365 0.57895 moveto
0.6679 0.55836 0.64687 0.54528 0.637 0.52632 curveto
stroke
0.63158 0.53061 moveto
0.64041 0.54884 0.66284 0.55947 0.66843 0.57895 curveto
stroke
0.63158 0.53745 moveto
0.63855 0.55339 0.65833 0.56226 0.66321 0.57895 curveto
stroke
0.63158 0.5443 moveto
0.637 0.55777 0.65386 0.56503 0.65799 0.57895 curveto
stroke
0.63158 0.55115 moveto
0.63567 0.56206 0.64942 0.56779 0.65277 0.57895 curveto
stroke
0.63158 0.55799 moveto
0.63451 0.56627 0.64501 0.57054 0.64755 0.57895 curveto
stroke
0.68421 0.57968 moveto
0.68415 0.57944 0.68415 0.57919 0.68409 0.57895 curveto
stroke
0.68421 0.61127 moveto
0.6826 0.60047 0.68169 0.5895 0.67887 0.57895 curveto
stroke
0.68308 0.63158 moveto
0.6811 0.61387 0.67845 0.59611 0.67365 0.57895 curveto
stroke
0.67992 0.63158 moveto
0.67792 0.61373 0.67339 0.59621 0.66843 0.57895 curveto
stroke
0.67676 0.63158 moveto
0.67475 0.61358 0.6683 0.59633 0.66321 0.57895 curveto
stroke
0.67359 0.63158 moveto
0.67157 0.61339 0.6632 0.59649 0.65799 0.57895 curveto
stroke
0.67043 0.63158 moveto
0.66838 0.61319 0.65809 0.59667 0.65277 0.57895 curveto
stroke
0.66727 0.63158 moveto
0.66519 0.61296 0.65298 0.59688 0.64755 0.57895 curveto
stroke
0.68421 0.66648 moveto
0.68405 0.65484 0.68438 0.64315 0.68308 0.63158 curveto
stroke
0.68156 0.68421 moveto
0.68241 0.66668 0.68187 0.64902 0.67992 0.63158 curveto
stroke
0.67833 0.68421 moveto
0.67939 0.66669 0.67871 0.64902 0.67676 0.63158 curveto
stroke
0.67509 0.68421 moveto
0.67633 0.6667 0.67554 0.64902 0.67359 0.63158 curveto
stroke
0.67185 0.68421 moveto
0.67323 0.66671 0.67238 0.64902 0.67043 0.63158 curveto
stroke
0.66862 0.68421 moveto
0.67012 0.66673 0.66922 0.64902 0.66727 0.63158 curveto
stroke
0.6839 0.73684 moveto
0.68409 0.73607 0.68403 0.73526 0.68421 0.73448 curveto
stroke
0.6783 0.73684 moveto
0.6827 0.7224 0.68339 0.70701 0.68421 0.69193 curveto
stroke
0.6727 0.73684 moveto
0.67853 0.72003 0.6807 0.70198 0.68156 0.68421 curveto
stroke
0.6671 0.73684 moveto
0.67344 0.72006 0.67724 0.70212 0.67833 0.68421 curveto
stroke
0.6615 0.73684 moveto
0.66826 0.72003 0.67381 0.70228 0.67509 0.68421 curveto
stroke
0.6559 0.73684 moveto
0.66303 0.71995 0.67041 0.70249 0.67185 0.68421 curveto
stroke
0.6503 0.73684 moveto
0.65776 0.71983 0.66703 0.70272 0.66862 0.68421 curveto
stroke
0.67325 0.78947 moveto
0.67831 0.78311 0.68145 0.77532 0.68421 0.76767 curveto
stroke
0.65683 0.78947 moveto
0.67056 0.7753 0.67917 0.75599 0.6839 0.73684 curveto
stroke
0.64042 0.78947 moveto
0.65621 0.77472 0.67199 0.75752 0.6783 0.73684 curveto
stroke
0.63158 0.78636 moveto
0.64675 0.7712 0.66567 0.75711 0.6727 0.73684 curveto
stroke
0.63158 0.77962 moveto
0.64346 0.7654 0.66054 0.75418 0.6671 0.73684 curveto
stroke
0.63158 0.77287 moveto
0.64076 0.76025 0.65567 0.75132 0.6615 0.73684 curveto
stroke
0.63158 0.76613 moveto
0.6385 0.75549 0.65096 0.74853 0.6559 0.73684 curveto
stroke
0.63158 0.75938 moveto
0.63656 0.75098 0.64637 0.74579 0.6503 0.73684 curveto
stroke
0.64231 0.84211 moveto
0.65832 0.83488 0.6744 0.82471 0.68421 0.81014 curveto
stroke
0.63158 0.82869 moveto
0.64754 0.81825 0.66136 0.80439 0.67325 0.78947 curveto
stroke
0.63158 0.81324 moveto
0.64065 0.80608 0.64879 0.79778 0.65683 0.78947 curveto
stroke
0.63158 0.79779 moveto
0.63463 0.79514 0.63746 0.79224 0.64042 0.78947 curveto
stroke
0.63158 0.85074 moveto
0.63581 0.84896 0.63812 0.84399 0.64231 0.84211 curveto
stroke
0.68421 0.53693 moveto
0.68989 0.55368 0.71252 0.56174 0.71661 0.57895 curveto
stroke
0.73003 0.63158 moveto
0.72811 0.61358 0.7208 0.59656 0.71661 0.57895 curveto
stroke
0.68421 0.57968 moveto
0.6889 0.59885 0.71053 0.61196 0.71269 0.63158 curveto
stroke
0.68421 0.61127 moveto
0.68535 0.61891 0.6945 0.6239 0.69536 0.63158 curveto
stroke
0.73281 0.68421 moveto
0.73293 0.66664 0.73189 0.64905 0.73003 0.63158 curveto
stroke
0.71753 0.68421 moveto
0.71798 0.6666 0.71462 0.64909 0.71269 0.63158 curveto
stroke
0.70226 0.68421 moveto
0.70282 0.66653 0.69732 0.64916 0.69536 0.63158 curveto
stroke
0.68421 0.66648 moveto
0.6843 0.67246 0.68719 0.67823 0.68698 0.68421 curveto
stroke
0.72836 0.73684 moveto
0.73144 0.71951 0.73269 0.70182 0.73281 0.68421 curveto
stroke
0.70566 0.73684 moveto
0.70963 0.7193 0.71708 0.70219 0.71753 0.68421 curveto
stroke
0.68421 0.73448 moveto
0.68817 0.71713 0.70169 0.70201 0.70226 0.68421 curveto
stroke
0.68421 0.69193 moveto
0.68436 0.6892 0.68689 0.68694 0.68698 0.68421 curveto
stroke
0.70312 0.78947 moveto
0.71263 0.7725 0.72497 0.756 0.72836 0.73684 curveto
stroke
0.68421 0.76767 moveto
0.68845 0.75589 0.70289 0.74905 0.70566 0.73684 curveto
stroke
0.68421 0.81014 moveto
0.68942 0.80239 0.69856 0.79762 0.70312 0.78947 curveto
stroke

% End of Graphics
MathPictureEnd
%%EPS Trailer
end

%%EndDocument
 GE 765 1000 0 33300 28773 GB 
%%BeginDocument: /usr0/rozzi/Documentation/PhDThesis/Chapter3/FVDataDists.eps
%!PS-Adobe-2.0 EPSF-1.2
%%BoundingBox: 0 0 282 282
%%Creator: Mathematica
%%Title: Clipboard
%%CreationDate: Never Never
%%EndComments
50 dict begin
/Mnodistort true def
/pageDashArray [4] def
/nullDashArray [] def

% Compute the minimum of two numbers.
/Mmin {         % p q Mmin min(p,q)
        2 copy          % p q p q
        gt              % p q p>q?
        { exch } if     % min(p,q) max(p,q)
        pop             % min(p,q)
} bind def


% Compute the maximum of two numbers.
/Mmax {         % p q Mmax max(p,q)
        2 copy          % p q p q
        lt              % p q p<q?
        { exch } if     % max(p,q) min(p,q)
        pop             % max(p,q)
} bind def

/Mpstart {
    MathPictureStart
} bind def
/Mpend {
    MathPictureEnd
} bind def
/Mscale {
    0 1 0 1
    5 -1 roll
    MathScale
} bind def
/Plain
        /Courier findfont
def
/Bold
        /Courier-Bold findfont
def
/Italic
        /Courier-Oblique findfont
def
/MathPictureStart {
        gsave
        newpath
        /Mtmatrix
        matrix currentmatrix
        def
        Plain
        Mfontsize scalefont
        setfont
0 setgray 0 setlinewidth
} bind def
/MathPictureEnd {
        grestore
} bind def
/Mdot {
        moveto
        0 0 rlineto
        stroke
} def
/Mtetra {
        moveto
        lineto
        lineto
        lineto
        fill
} def
/Metetra {
        moveto
        lineto
        lineto
        lineto
        closepath
        gsave
        fill
        grestore
        0 setgray
        stroke
} def
/Mistroke {
        flattenpath
        0 0 0
        {
        4 2 roll
        pop pop
        }
        {
        4 -1 roll
        2 index
        sub dup mul
        4 -1 roll
        2 index
        sub dup mul
        add sqrt
        4 -1 roll
        add
        3 1 roll
        }
        {
        stop
        }
        {
        stop
        }
        pathforall
        pop pop
        currentpoint
        stroke
        moveto
        currentdash
        3 -1 roll
        add
        setdash
} def
/Mfstroke {
        stroke
        currentdash
        pop 0
        setdash
} def
/Msboxa {
        newpath
        5 -1 roll
        Mvboxa
        pop
        6 -1 roll
        5 -1 roll
        4 -1 roll
        Msboxa1
        5 -3 roll
        Msboxa1
        [
        7 -2 roll
        [ 2 index 2 index
        10 -1 roll
        9 -1 roll
        ]
        6 1 roll
        5 -2 roll
        ]
} bind def
        
/Msboxa1 {
        sub
        2 div
        dup
        2 index
        1 add
        mul
        3 -1 roll
        -1 add
        3 -1 roll
        mul
} bind def
/Mvboxa {
        gsave
        newpath
        [ true
        3 -1 roll
        {
        Mbbox
        5 -1 roll
        {
        0
        5 1 roll
        }
        {
        7 -1 roll
        exch sub
        (m) stringwidth pop
        .3 mul
        sub
        7 1 roll
        6 -1 roll
        4 -1 roll
        Mmin
        3 -1 roll
        5 index
        add
        5 -1 roll
        4 -1 roll
        Mmax
        4 -1 roll
        }
        ifelse
        false
        }
        forall
        { stop } if
        counttomark
        1 add
        4 roll
        ]
        grestore
} bind def
/Mbbox {
        0 0 moveto
        false charpath
        flattenpath
        pathbbox
        newpath
} bind def
/Mmin {
        2 copy
        gt
        { exch } if
        pop
} bind def
/Mmax {
        2 copy
        lt
        { exch } if
        pop
} bind def
/Mshowa {
        4 -2 roll
        moveto
        2 index
        Mtmatrix setmatrix
        Mvboxa
        7 1 roll
        6 -1 roll
        5 -1 roll
        4 -1 roll
        Mshowa1
        4 1 roll
        Mshowa1
        rmoveto
        currentpoint
        0 1
        4 index length
        -1 add
        {
        2 index
        4 index
        2 index
        get
        3 index
        add
        moveto
        4 index
        exch get
        show
        } for
        pop pop pop pop
        Mgmatrix setmatrix
} bind def
/Mshowa1 {
        2 copy
        add
        4 1 roll
        sub
        mul
        sub
        -2 div
} bind def
/MathScale {
        Mwidth
        Mheight
        Mlp
        translate
        scale
        /Mgmatrix
        matrix currentmatrix
        def
        /Msaveaa exch def
        /Msavebb exch def
        /Msavecc exch def
        /Msavedd exch def
} bind def
/Mlp {
        3 copy
        Mlpfirst
        {
        Mnodistort
        {
        Mmin
        dup
        } if
        4 index
        2 index
        2 index
        Mlprun
        11 index
        11 -1 roll
        10 -4 roll
        Mlp1
        8 index
        9 -5 roll
        Mlp1
        4 -1 roll
        and
        { exit } if
        3 -1 roll
        pop pop
        } loop
        exch
        3 1 roll
        7 -3 roll
        pop pop pop
} bind def
/Mlpfirst {
        3 -1 roll
        dup length
        2 copy
        -2 add
        get
        aload
        pop pop pop
        4 -2 roll
        -1 add
        get
        aload
        pop pop pop
        6 -1 roll
        3 -1 roll
        5 -1 roll
        sub
        dup /MsaveAx exch def
        div
        4 1 roll
        exch sub
        dup /MsaveAy exch def
        div
} bind def
/Mlprun {
        2 copy
        4 index
        0 get
        dup
        4 1 roll
        Mlprun1
        3 copy
        8 -2 roll
        9 -1 roll
        {
        3 copy
        Mlprun1
        3 copy
        11 -3 roll
        /gt Mlpminmax
        8 3 roll
        11 -3 roll
        /lt Mlpminmax
        8 3 roll
        } forall
        pop pop pop pop
        3 1 roll
        pop pop
        aload pop
        5 -1 roll
        aload pop
        exch
        6 -1 roll
        Mlprun2
        8 2 roll
        4 -1 roll
        Mlprun2
        6 2 roll
        3 -1 roll
        Mlprun2
        4 2 roll
        exch
        Mlprun2
        6 2 roll
} bind def
/Mlprun1 {
        aload pop
        exch
        6 -1 roll
        5 -1 roll
        mul add
        4 -2 roll
        mul
        3 -1 roll
        add
} bind def
/Mlprun2 {
        2 copy
        add 2 div
        3 1 roll
        exch sub
} bind def
/Mlpminmax {
        cvx
        2 index
        6 index
        2 index
        exec
        {
        7 -3 roll
        4 -1 roll
        } if
        1 index
        5 index
        3 -1 roll
        exec
        {
        4 1 roll
        pop
        5 -1 roll
        aload
        pop pop
        4 -1 roll
        aload pop
        [
        8 -2 roll
        pop
        5 -2 roll
        pop
        6 -2 roll
        pop
        5 -1 roll
        ]
        4 1 roll
        pop
        }
        {
        pop pop pop
        } ifelse
} bind def
/Mlp1 {
        5 index
        3 index sub
        5 index
        2 index mul
        1 index
        le
        1 index
        0 le
        or
        dup
        not
        {
        1 index
        3 index div
        .99999 mul
        8 -1 roll
        pop
        7 1 roll
        }
        if
        8 -1 roll
        2 div
        7 -2 roll
        pop sub
        5 index
        6 -3 roll
        pop pop
        mul sub
        exch
} bind def
/Mfontsize      12 def
/Mleft          0.000000 def
/Mbottom        282.000000 def
/Mwidth         282.000000 def
/Mheight        282.000000 def
/Courier findfont 12 scalefont setfont
%!
%%Creator: Mathematica
%%AspectRatio: 1 
MathPictureStart
% Scaling calculations
-0.11111 0.00111 -0.36585 0.00049 [
[(200)] 0.11111 -0.0225 0 1 Msboxa
[(400)] 0.33333 -0.0225 0 1 Msboxa
[(600)] 0.55556 -0.0225 0 1 Msboxa
[(800)] 0.77778 -0.0225 0 1 Msboxa
[(1000)] 1 -0.0225 0 1 Msboxa
[(F1)] 1.15 -0.0225 0 1 Msboxa
[(F2)]  -0.0525 1.0  0 1 Msboxa
[(1000)] -0.0225 0.12195 1 0 Msboxa
[(1500)] -0.0225 0.36585 1 0 Msboxa
[(2000)] -0.0225 0.60976 1 0 Msboxa
[(2500)] -0.0225 0.85366 1 0 Msboxa
[ -0.01725 -0.01725 0 0 ]
[ 1.001 1.001 0 0 ]
] MathScale
% Start of Graphics
1 setlinecap
1 setlinejoin
newpath
%%Object: ContourGraphics
[ ] 0 setdash
0 setgray
gsave
0.002 setlinewidth
0 -0.01 moveto
1 -0.01 lineto
stroke
0.11111 -0.01625 moveto
0.11111 -0.00375 lineto
stroke
0 setgray
[(200)] 0.11111 -0.0225 0 1 Mshowa
0.33333 -0.01625 moveto
0.33333 -0.00375 lineto
stroke
0 setgray
[(400)] 0.33333 -0.0225 0 1 Mshowa
0.55556 -0.01625 moveto
0.55556 -0.00375 lineto
stroke
0 setgray
[(600)] 0.55556 -0.0225 0 1 Mshowa
0.77778 -0.01625 moveto
0.77778 -0.00375 lineto
stroke
0 setgray
[(800)] 0.77778 -0.0225 0 1 Mshowa
1 -0.01625 moveto
1 -0.00375 lineto
stroke
0 setgray
[(1000)] 1 -0.0225 0 1 Mshowa
[(F1)] 1.15 -0.0225 0 1 Mshowa
[(F2)]  -0.0525 1.0 0 1 Mshowa
-0.01 0 moveto
-0.01 1 lineto
stroke
-0.01625 0.12195 moveto
-0.00375 0.12195 lineto
stroke
0 setgray
[(1000)] -0.0225 0.12195 1 0 Mshowa
-0.01625 0.36585 moveto
-0.00375 0.36585 lineto
stroke
0 setgray
[(1500)] -0.0225 0.36585 1 0 Mshowa
-0.01625 0.60976 moveto
-0.00375 0.60976 lineto
stroke
0 setgray
[(2000)] -0.0225 0.60976 1 0 Mshowa
-0.01625 0.85366 moveto
-0.00375 0.85366 lineto
stroke
0 setgray
[(2500)] -0.0225 0.85366 1 0 Mshowa
grestore
0 0 moveto
1 0 lineto
1 1 lineto
0 1 lineto
closepath
clip
% IY within-speaker dist
newpath
0 setgray
0.0045 setlinewidth
0.01573 0.36842 moveto
0.02725 0.35612 0.03982 0.34482 0.05263 0.33387 curveto
stroke
0 0.38727 moveto
0.00508 0.38086 0.01014 0.37439 0.01573 0.36842 curveto
stroke
0.04643 0.47368 moveto
0.04816 0.47045 0.05079 0.46775 0.05263 0.46457 curveto
stroke
0.0231 0.52632 moveto
0.02843 0.50788 0.03734 0.49059 0.04643 0.47368 curveto
stroke
0.01363 0.57895 moveto
0.01492 0.56117 0.01814 0.54344 0.0231 0.52632 curveto
stroke
0.01523 0.63158 moveto
0.01288 0.61418 0.01235 0.59645 0.01363 0.57895 curveto
stroke
0.02827 0.68421 moveto
0.02222 0.66718 0.01764 0.64949 0.01523 0.63158 curveto
stroke
0.05263 0.73075 moveto
0.04392 0.71556 0.03414 0.70071 0.02827 0.68421 curveto
stroke
0 0.8074 moveto
0.00957 0.81961 0.01989 0.83129 0.03102 0.84211 curveto
stroke
0.05263 0.86173 moveto
0.0453 0.85533 0.038 0.84889 0.03102 0.84211 curveto
stroke
0.07652 0.31579 moveto
0.0861 0.30895 0.09527 0.30149 0.10526 0.29526 curveto
stroke
0.05263 0.33387 moveto
0.06022 0.32738 0.06839 0.32159 0.07652 0.31579 curveto
stroke
0.08324 0.42105 moveto
0.09007 0.41322 0.09783 0.40626 0.10526 0.399 curveto
stroke
0.05263 0.46457 moveto
0.0615 0.44921 0.07158 0.43442 0.08324 0.42105 curveto
stroke
0.08698 0.52632 moveto
0.09134 0.51391 0.099 0.50292 0.10526 0.49135 curveto
stroke
0.07506 0.57895 moveto
0.07666 0.56103 0.08102 0.54329 0.08698 0.52632 curveto
stroke
0.07691 0.63158 moveto
0.07416 0.61424 0.0735 0.59643 0.07506 0.57895 curveto
stroke
0.09295 0.68421 moveto
0.08576 0.66734 0.07978 0.64969 0.07691 0.63158 curveto
stroke
0.05263 0.73075 moveto
0.05376 0.73272 0.05451 0.7349 0.05569 0.73684 curveto
stroke
0.10526 0.70517 moveto
0.10144 0.69802 0.09612 0.69167 0.09295 0.68421 curveto
stroke
0.09717 0.78947 moveto
0.08166 0.7734 0.06736 0.75589 0.05569 0.73684 curveto
stroke
0.10526 0.79724 moveto
0.1026 0.79462 0.09977 0.79216 0.09717 0.78947 curveto
stroke
0.05263 0.86173 moveto
0.06674 0.87403 0.08241 0.88449 0.09807 0.89474 curveto
stroke
0.10526 0.89981 moveto
0.10279 0.89823 0.10053 0.89634 0.09807 0.89474 curveto
stroke
0.10526 0.29526 moveto
0.12203 0.28481 0.13995 0.27627 0.15789 0.26802 curveto
stroke
0.14268 0.36842 moveto
0.14776 0.36481 0.15267 0.36096 0.15789 0.35756 curveto
stroke
0.10526 0.399 moveto
0.11679 0.38774 0.12954 0.37774 0.14268 0.36842 curveto
stroke
0.11471 0.47368 moveto
0.12675 0.45576 0.14198 0.43998 0.15789 0.42539 curveto
stroke
0.10526 0.49135 moveto
0.10844 0.48548 0.11099 0.47923 0.11471 0.47368 curveto
stroke
0.13948 0.52632 moveto
0.14409 0.51543 0.1516 0.506 0.15789 0.49599 curveto
stroke
0.12536 0.57895 moveto
0.12731 0.56089 0.13239 0.54304 0.13948 0.52632 curveto
stroke
0.12739 0.63158 moveto
0.1242 0.61431 0.12347 0.5964 0.12536 0.57895 curveto
stroke
0.14601 0.68421 moveto
0.13756 0.66763 0.13077 0.64988 0.12739 0.63158 curveto
stroke
0.10526 0.70517 moveto
0.11109 0.71607 0.11705 0.72703 0.12457 0.73684 curveto
stroke
0.15789 0.70179 moveto
0.15415 0.69579 0.14922 0.69051 0.14601 0.68421 curveto
stroke
0.15789 0.7719 moveto
0.14619 0.76081 0.13438 0.74964 0.12457 0.73684 curveto
stroke
0.10526 0.79724 moveto
0.12123 0.81298 0.13924 0.82668 0.15789 0.83912 curveto
stroke
0.10526 0.89981 moveto
0.12243 0.91072 0.13956 0.9219 0.15789 0.93073 curveto
stroke
0.17061 0.26316 moveto
0.18408 0.25749 0.19668 0.24971 0.21053 0.24502 curveto
stroke
0.15789 0.26802 moveto
0.16202 0.26613 0.16643 0.26492 0.17061 0.26316 curveto
stroke
0.15789 0.35756 moveto
0.17467 0.34661 0.19231 0.3369 0.21053 0.32859 curveto
stroke
0.16265 0.42105 moveto
0.1775 0.40818 0.19362 0.39667 0.21053 0.38665 curveto
stroke
0.15789 0.42539 moveto
0.15948 0.42394 0.16103 0.42246 0.16265 0.42105 curveto
stroke
0.17308 0.47368 moveto
0.18409 0.46067 0.19718 0.44945 0.21053 0.43884 curveto
stroke
0.15789 0.49599 moveto
0.16268 0.48838 0.16727 0.48055 0.17308 0.47368 curveto
stroke
0.18773 0.52632 moveto
0.19367 0.51489 0.20244 0.50514 0.21053 0.49512 curveto
stroke
0.17073 0.57895 moveto
0.17312 0.56067 0.17922 0.54267 0.18773 0.52632 curveto
stroke
0.17301 0.63158 moveto
0.16927 0.61442 0.16845 0.59636 0.17073 0.57895 curveto
stroke
0.195 0.68421 moveto
0.18494 0.66807 0.17705 0.65016 0.17301 0.63158 curveto
stroke
0.15789 0.70179 moveto
0.16569 0.71427 0.1745 0.72627 0.18474 0.73684 curveto
stroke
0.21053 0.70348 moveto
0.20539 0.69703 0.19937 0.69121 0.195 0.68421 curveto
stroke
0.15789 0.7719 moveto
0.16446 0.77812 0.17137 0.78398 0.17855 0.78947 curveto
stroke
0.21053 0.7596 moveto
0.20164 0.75236 0.19271 0.74508 0.18474 0.73684 curveto
stroke
0.15789 0.83912 moveto
0.15947 0.84017 0.16113 0.84108 0.16273 0.84211 curveto
stroke
0.21053 0.81183 moveto
0.19943 0.80505 0.18888 0.79737 0.17855 0.78947 curveto
stroke
0.21053 0.8702 moveto
0.19384 0.86227 0.1783 0.85207 0.16273 0.84211 curveto
stroke
0.15789 0.93073 moveto
0.17195 0.93749 0.18699 0.94198 0.20162 0.94737 curveto
stroke
0.21053 0.95147 moveto
0.20745 0.95038 0.20469 0.9485 0.20162 0.94737 curveto
stroke
0.21053 0.24502 moveto
0.22788 0.23915 0.24533 0.23343 0.26316 0.22921 curveto
stroke
0.24595 0.31579 moveto
0.25179 0.31377 0.25725 0.31067 0.26316 0.30886 curveto
stroke
0.21053 0.32859 moveto
0.22195 0.32338 0.23408 0.31988 0.24595 0.31579 curveto
stroke
0.24861 0.36842 moveto
0.25354 0.36633 0.25816 0.36353 0.26316 0.36162 curveto
stroke
0.21053 0.38665 moveto
0.22264 0.37948 0.23566 0.37392 0.24861 0.36842 curveto
stroke
0.23673 0.42105 moveto
0.24542 0.41586 0.25403 0.41047 0.26316 0.40609 curveto
stroke
0.21053 0.43884 moveto
0.21879 0.43227 0.22767 0.42647 0.23673 0.42105 curveto
stroke
0.23013 0.47368 moveto
0.24031 0.4646 0.2516 0.45673 0.26316 0.44947 curveto
stroke
0.21053 0.49512 moveto
0.2166 0.48758 0.2229 0.48013 0.23013 0.47368 curveto
stroke
0.23625 0.52632 moveto
0.24358 0.51536 0.25351 0.50631 0.26316 0.49732 curveto
stroke
0.21444 0.57895 moveto
0.21748 0.5602 0.22569 0.5421 0.23625 0.52632 curveto
stroke
0.26018 0.57895 moveto
0.26068 0.57661 0.2625 0.57471 0.26316 0.57241 curveto
stroke
0.21716 0.63158 moveto
0.2127 0.61459 0.21163 0.59629 0.21444 0.57895 curveto
stroke
0.26316 0.6315 moveto
0.25757 0.61487 0.25649 0.5961 0.26018 0.57895 curveto
stroke
0.24484 0.68421 moveto
0.23241 0.66877 0.22219 0.65075 0.21716 0.63158 curveto
stroke
0.21053 0.70348 moveto
0.22039 0.71587 0.23179 0.7272 0.24435 0.73684 curveto
stroke
0.26316 0.70232 moveto
0.25692 0.69642 0.25022 0.6909 0.24484 0.68421 curveto
stroke
0.21053 0.7596 moveto
0.22481 0.77123 0.24065 0.78103 0.25702 0.78947 curveto
stroke
0.26316 0.75005 moveto
0.25671 0.74591 0.25043 0.74151 0.24435 0.73684 curveto
stroke
0.21053 0.81183 moveto
0.22716 0.82199 0.24505 0.8301 0.26316 0.83734 curveto
stroke
0.26316 0.79289 moveto
0.26106 0.79185 0.2591 0.79055 0.25702 0.78947 curveto
stroke
0.21053 0.8702 moveto
0.22746 0.87826 0.24532 0.88428 0.26316 0.89007 curveto
stroke
0.21053 0.95147 moveto
0.22807 0.9577 0.24514 0.96544 0.26316 0.97013 curveto
stroke
0.26316 0.22921 moveto
0.2805 0.22511 0.29815 0.22236 0.31579 0.21981 curveto
stroke
0.26316 0.30886 moveto
0.28054 0.30352 0.29792 0.29789 0.31579 0.29453 curveto
stroke
0.26316 0.36162 moveto
0.28036 0.35505 0.29784 0.34895 0.31579 0.34482 curveto
stroke
0.26316 0.40609 moveto
0.28003 0.398 0.29776 0.39158 0.31579 0.38655 curveto
stroke
0.26316 0.44947 moveto
0.27957 0.43916 0.29743 0.43097 0.31579 0.42475 curveto
stroke
0.29506 0.47368 moveto
0.30184 0.46982 0.30865 0.46594 0.31579 0.46278 curveto
stroke
0.26316 0.49732 moveto
0.27284 0.48831 0.28356 0.48023 0.29506 0.47368 curveto
stroke
0.29101 0.52632 moveto
0.29831 0.51885 0.30709 0.51293 0.31579 0.50715 curveto
stroke
0.26316 0.57241 moveto
0.26806 0.55514 0.27845 0.53915 0.29101 0.52632 curveto
stroke
0.3152 0.57895 moveto
0.31532 0.5786 0.31567 0.57837 0.31579 0.57803 curveto
stroke
0.26316 0.6315 moveto
0.26317 0.63152 0.26315 0.63155 0.26316 0.63158 curveto
stroke
0.31579 0.58708 moveto
0.31522 0.58974 0.31432 0.58152 0.3152 0.57895 curveto
stroke
0.30221 0.68421 moveto
0.28539 0.67027 0.27014 0.65228 0.26316 0.63158 curveto
stroke
0.26316 0.70232 moveto
0.27802 0.71636 0.2953 0.72825 0.31385 0.73684 curveto
stroke
0.31579 0.69398 moveto
0.31116 0.69087 0.3065 0.68777 0.30221 0.68421 curveto
stroke
0.26316 0.75005 moveto
0.27954 0.76057 0.29748 0.76875 0.31579 0.77536 curveto
stroke
0.31579 0.73784 moveto
0.31513 0.73754 0.31451 0.73715 0.31385 0.73684 curveto
stroke
0.26316 0.83734 moveto
0.26797 0.83926 0.27306 0.8404 0.27795 0.84211 curveto
stroke
0.26316 0.79289 moveto
0.28009 0.80123 0.29769 0.80843 0.31579 0.81381 curveto
stroke
0.26316 0.89007 moveto
0.26928 0.89206 0.27569 0.89303 0.2819 0.89474 curveto
stroke
0.31579 0.85503 moveto
0.30285 0.85184 0.29054 0.84648 0.27795 0.84211 curveto
stroke
0.31579 0.90488 moveto
0.30424 0.90251 0.29327 0.89786 0.2819 0.89474 curveto
stroke
0.26316 0.97013 moveto
0.28052 0.97464 0.2981 0.97843 0.31579 0.98144 curveto
stroke
0.31579 0.21981 moveto
0.33322 0.21728 0.35084 0.21613 0.36842 0.21504 curveto
stroke
0.31579 0.29453 moveto
0.3332 0.29125 0.35077 0.28866 0.36842 0.28723 curveto
stroke
0.31579 0.34482 moveto
0.33311 0.34083 0.35073 0.33798 0.36842 0.33624 curveto
stroke
0.31579 0.38655 moveto
0.33299 0.38175 0.35069 0.37863 0.36842 0.37655 curveto
stroke
0.33035 0.42105 moveto
0.34292 0.41757 0.35551 0.41387 0.36842 0.41203 curveto
stroke
0.31579 0.42475 moveto
0.32053 0.42314 0.32552 0.42239 0.33035 0.42105 curveto
stroke
0.31579 0.46278 moveto
0.33251 0.45539 0.35043 0.45059 0.36842 0.44734 curveto
stroke
0.31579 0.50715 moveto
0.33168 0.49659 0.34987 0.48911 0.36842 0.48465 curveto
stroke
0.31579 0.57803 moveto
0.32384 0.55557 0.34623 0.53829 0.36842 0.52952 curveto
stroke
0.31579 0.58708 moveto
0.31889 0.57249 0.31372 0.61843 0.32078 0.63158 curveto
stroke
0.36842 0.66901 moveto
0.34989 0.66098 0.33034 0.64937 0.32078 0.63158 curveto
stroke
0.31579 0.69398 moveto
0.33158 0.70459 0.35001 0.71124 0.36842 0.71605 curveto
stroke
0.31579 0.77536 moveto
0.33282 0.78151 0.35054 0.78597 0.36842 0.78882 curveto
stroke
0.31579 0.73784 moveto
0.33251 0.7454 0.35042 0.75043 0.36842 0.75399 curveto
stroke
0.31579 0.81381 moveto
0.33298 0.81892 0.35065 0.82252 0.36842 0.82494 curveto
stroke
0.31579 0.85503 moveto
0.33312 0.85931 0.35068 0.86293 0.36842 0.86499 curveto
stroke
0.31579 0.90488 moveto
0.33322 0.90844 0.35072 0.91198 0.36842 0.91371 curveto
stroke
0.31579 0.98144 moveto
0.3332 0.9844 0.35082 0.98604 0.36842 0.98751 curveto
stroke
0.36842 0.21504 moveto
0.38593 0.21397 0.40351 0.21376 0.42105 0.21408 curveto
stroke
0.36842 0.28723 moveto
0.38592 0.28582 0.40351 0.28529 0.42105 0.28567 curveto
stroke
0.36842 0.33624 moveto
0.38589 0.33452 0.4035 0.33391 0.42105 0.33434 curveto
stroke
0.36842 0.37655 moveto
0.38586 0.3745 0.4035 0.37381 0.42105 0.37428 curveto
stroke
0.36842 0.41203 moveto
0.38582 0.40955 0.40349 0.40854 0.42105 0.40907 curveto
stroke
0.36842 0.44734 moveto
0.38573 0.44422 0.40348 0.44306 0.42105 0.44368 curveto
stroke
0.36842 0.48465 moveto
0.38557 0.48054 0.40343 0.47847 0.42105 0.47923 curveto
stroke
0.38232 0.52632 moveto
0.39491 0.52307 0.40807 0.52081 0.42105 0.52161 curveto
stroke
0.36842 0.52952 moveto
0.37284 0.52777 0.37772 0.5275 0.38232 0.52632 curveto
stroke
0.36842 0.66901 moveto
0.38489 0.67615 0.40312 0.68116 0.42105 0.68039 curveto
stroke
0.36842 0.71605 moveto
0.38551 0.72051 0.4034 0.72261 0.42105 0.72216 curveto
stroke
0.36842 0.78882 moveto
0.37134 0.78928 0.37433 0.7891 0.37726 0.78947 curveto
stroke
0.36842 0.75399 moveto
0.3857 0.7574 0.40345 0.75883 0.42105 0.75853 curveto
stroke
0.36842 0.82494 moveto
0.38584 0.82731 0.40348 0.82832 0.42105 0.82816 curveto
stroke
0.42105 0.79278 moveto
0.40642 0.79296 0.39178 0.79135 0.37726 0.78947 curveto
stroke
0.36842 0.86499 moveto
0.38587 0.86702 0.40348 0.86803 0.42105 0.86792 curveto
stroke
0.36842 0.91371 moveto
0.3859 0.91543 0.40349 0.91643 0.42105 0.91636 curveto
stroke
0.36842 0.98751 moveto
0.38592 0.98896 0.4035 0.9894 0.42105 0.98938 curveto
stroke
0.42105 0.21408 moveto
0.43862 0.21441 0.4562 0.21501 0.47368 0.21674 curveto
stroke
0.42105 0.28567 moveto
0.43864 0.28605 0.45623 0.28738 0.47368 0.28955 curveto
stroke
0.42105 0.33434 moveto
0.43865 0.33476 0.45627 0.33619 0.47368 0.33876 curveto
stroke
0.42105 0.37428 moveto
0.43867 0.37475 0.45632 0.37629 0.47368 0.37931 curveto
stroke
0.42105 0.40907 moveto
0.43871 0.40961 0.45638 0.41178 0.47368 0.41534 curveto
stroke
0.42105 0.44368 moveto
0.43876 0.44431 0.45653 0.44667 0.47368 0.45108 curveto
stroke
0.42105 0.47923 moveto
0.43892 0.47999 0.45676 0.48391 0.47368 0.48971 curveto
stroke
0.42105 0.52161 moveto
0.42833 0.52205 0.43532 0.52463 0.44242 0.52632 curveto
stroke
0.47368 0.53933 moveto
0.46404 0.53345 0.4534 0.52892 0.44242 0.52632 curveto
stroke
0.42105 0.68039 moveto
0.43955 0.6796 0.45785 0.67226 0.47368 0.66267 curveto
stroke
0.42105 0.72216 moveto
0.43885 0.72171 0.45677 0.71868 0.47368 0.71315 curveto
stroke
0.4538 0.78947 moveto
0.46042 0.78869 0.46714 0.78869 0.47368 0.78747 curveto
stroke
0.42105 0.75853 moveto
0.43872 0.75822 0.45649 0.75622 0.47368 0.75212 curveto
stroke
0.42105 0.82816 moveto
0.43865 0.828 0.4563 0.82669 0.47368 0.82397 curveto
stroke
0.42105 0.79278 moveto
0.43202 0.79265 0.44291 0.79076 0.4538 0.78947 curveto
stroke
0.42105 0.86792 moveto
0.43864 0.86781 0.45625 0.86655 0.47368 0.86428 curveto
stroke
0.42105 0.91636 moveto
0.43863 0.91629 0.45621 0.91511 0.47368 0.91324 curveto
stroke
0.42105 0.98938 moveto
0.43861 0.98935 0.45619 0.98887 0.47368 0.98735 curveto
stroke
0.47368 0.21674 moveto
0.49128 0.21849 0.50892 0.22024 0.52632 0.22345 curveto
stroke
0.47368 0.28955 moveto
0.4914 0.29176 0.50893 0.29545 0.52632 0.29952 curveto
stroke
0.47368 0.33876 moveto
0.49145 0.34139 0.50904 0.34534 0.52632 0.35023 curveto
stroke
0.47368 0.37931 moveto
0.4915 0.3824 0.50921 0.38656 0.52632 0.39243 curveto
stroke
0.47368 0.41534 moveto
0.48026 0.41669 0.48652 0.41929 0.493 0.42105 curveto
stroke
0.52632 0.43171 moveto
0.51556 0.42721 0.50425 0.42412 0.493 0.42105 curveto
stroke
0.47368 0.45108 moveto
0.49182 0.45574 0.50984 0.4618 0.52632 0.47068 curveto
stroke
0.47368 0.48971 moveto
0.49247 0.49616 0.51115 0.50481 0.52632 0.51764 curveto
stroke
0.47368 0.53933 moveto
0.4891 0.54873 0.50415 0.56209 0.51062 0.57895 curveto
stroke
0.5072 0.63158 moveto
0.51535 0.616 0.51692 0.59536 0.51062 0.57895 curveto
stroke
0.47368 0.66267 moveto
0.48672 0.65478 0.50014 0.64508 0.5072 0.63158 curveto
stroke
0.51777 0.73684 moveto
0.5206 0.73553 0.52355 0.73445 0.52632 0.73301 curveto
stroke
0.47368 0.71315 moveto
0.49227 0.70708 0.51114 0.69959 0.52632 0.68727 curveto
stroke
0.47368 0.78747 moveto
0.49164 0.78411 0.50938 0.77908 0.52632 0.77224 curveto
stroke
0.47368 0.75212 moveto
0.48881 0.74852 0.50365 0.74336 0.51777 0.73684 curveto
stroke
0.47368 0.82397 moveto
0.49149 0.82118 0.50917 0.81716 0.52632 0.81159 curveto
stroke
0.47368 0.86428 moveto
0.49145 0.86197 0.509 0.85799 0.52632 0.85341 curveto
stroke
0.47368 0.91324 moveto
0.49141 0.91135 0.50889 0.90756 0.52632 0.90381 curveto
stroke
0.47368 0.98735 moveto
0.49129 0.98582 0.50891 0.9841 0.52632 0.98106 curveto
stroke
0.52632 0.22345 moveto
0.54401 0.22672 0.56162 0.23056 0.57895 0.23539 curveto
stroke
0.52632 0.29952 moveto
0.54298 0.30342 0.55884 0.31021 0.57503 0.31579 curveto
stroke
0.57895 0.31692 moveto
0.57767 0.31646 0.57631 0.31623 0.57503 0.31579 curveto
stroke
0.52632 0.35023 moveto
0.5426 0.35485 0.55813 0.36184 0.57373 0.36842 curveto
stroke
0.57895 0.37038 moveto
0.57725 0.36963 0.57544 0.36914 0.57373 0.36842 curveto
stroke
0.52632 0.39243 moveto
0.54449 0.39866 0.56216 0.40656 0.57895 0.4159 curveto
stroke
0.52632 0.43171 moveto
0.54482 0.43947 0.56283 0.44895 0.57895 0.4609 curveto
stroke
0.52632 0.47068 moveto
0.52805 0.47162 0.52971 0.4727 0.53143 0.47368 curveto
stroke
0.57895 0.51289 moveto
0.56564 0.49725 0.54926 0.48387 0.53143 0.47368 curveto
stroke
0.52632 0.51764 moveto
0.52973 0.52053 0.53339 0.52315 0.53655 0.52632 curveto
stroke
0.56731 0.57895 moveto
0.56245 0.55922 0.55089 0.54071 0.53655 0.52632 curveto
stroke
0.56555 0.63158 moveto
0.5708 0.61483 0.57151 0.59599 0.56731 0.57895 curveto
stroke
0.5302 0.68421 moveto
0.54619 0.6704 0.55923 0.65174 0.56555 0.63158 curveto
stroke
0.52632 0.73301 moveto
0.54591 0.72277 0.56439 0.70929 0.57895 0.69265 curveto
stroke
0.52632 0.68727 moveto
0.52759 0.68623 0.52895 0.68529 0.5302 0.68421 curveto
stroke
0.5776 0.78947 moveto
0.57804 0.78924 0.57851 0.78906 0.57895 0.78882 curveto
stroke
0.52632 0.77224 moveto
0.54475 0.76481 0.5628 0.7558 0.57895 0.74421 curveto
stroke
0.55782 0.84211 moveto
0.56485 0.83964 0.5721 0.83776 0.57895 0.83483 curveto
stroke
0.52632 0.81159 moveto
0.54402 0.80585 0.56113 0.79816 0.5776 0.78947 curveto
stroke
0.55553 0.89474 moveto
0.56331 0.89258 0.57131 0.89121 0.57895 0.88861 curveto
stroke
0.52632 0.85341 moveto
0.5371 0.85056 0.54729 0.84579 0.55782 0.84211 curveto
stroke
0.52632 0.90381 moveto
0.53628 0.90166 0.5457 0.89746 0.55553 0.89474 curveto
stroke
0.52632 0.98106 moveto
0.54402 0.97797 0.56158 0.97402 0.57895 0.96939 curveto
stroke
0.57895 0.23539 moveto
0.59696 0.2404 0.61412 0.24812 0.63158 0.25481 curveto
stroke
0.57895 0.31692 moveto
0.5968 0.32328 0.61476 0.32967 0.63158 0.33841 curveto
stroke
0.57895 0.37038 moveto
0.59715 0.37844 0.6151 0.38742 0.63158 0.39859 curveto
stroke
0.57895 0.4159 moveto
0.58182 0.4175 0.58453 0.41938 0.58736 0.42105 curveto
stroke
0.63158 0.45365 moveto
0.61819 0.44116 0.60311 0.43038 0.58736 0.42105 curveto
stroke
0.57895 0.4609 moveto
0.58449 0.46502 0.59004 0.46915 0.59524 0.47368 curveto
stroke
0.63158 0.51589 moveto
0.62172 0.50016 0.60924 0.48588 0.59524 0.47368 curveto
stroke
0.57895 0.51289 moveto
0.58281 0.51744 0.58739 0.52141 0.59079 0.52632 curveto
stroke
0.61356 0.57895 moveto
0.60994 0.56018 0.60169 0.54202 0.59079 0.52632 curveto
stroke
0.61245 0.63158 moveto
0.61647 0.6145 0.61687 0.59618 0.61356 0.57895 curveto
stroke
0.58685 0.68421 moveto
0.59875 0.66875 0.60797 0.65057 0.61245 0.63158 curveto
stroke
0.58881 0.73684 moveto
0.60529 0.72382 0.62023 0.70824 0.63158 0.69056 curveto
stroke
0.57895 0.69265 moveto
0.58149 0.68975 0.5845 0.68727 0.58685 0.68421 curveto
stroke
0.57895 0.78882 moveto
0.59777 0.77875 0.6158 0.7667 0.63158 0.75232 curveto
stroke
0.57895 0.74421 moveto
0.58228 0.74181 0.58559 0.73939 0.58881 0.73684 curveto
stroke
0.57895 0.83483 moveto
0.59716 0.82704 0.61504 0.81814 0.63158 0.80725 curveto
stroke
0.57895 0.88861 moveto
0.59684 0.88251 0.61468 0.87597 0.63158 0.8675 curveto
stroke
0.57895 0.96939 moveto
0.597 0.96457 0.61403 0.95651 0.63158 0.95011 curveto
stroke
0.63158 0.25481 moveto
0.63747 0.25707 0.64274 0.26074 0.64856 0.26316 curveto
stroke
0.68421 0.27808 moveto
0.67277 0.27217 0.66046 0.26809 0.64856 0.26316 curveto
stroke
0.63158 0.33841 moveto
0.64819 0.34703 0.66368 0.35771 0.67903 0.36842 curveto
stroke
0.68421 0.37199 moveto
0.68252 0.37075 0.68075 0.36962 0.67903 0.36842 curveto
stroke
0.63158 0.39859 moveto
0.64184 0.40555 0.65171 0.41309 0.6612 0.42105 curveto
stroke
0.68421 0.44317 moveto
0.67699 0.43536 0.66936 0.42789 0.6612 0.42105 curveto
stroke
0.63158 0.45365 moveto
0.63859 0.46019 0.64591 0.46647 0.65223 0.47368 curveto
stroke
0.68421 0.52209 moveto
0.67594 0.50461 0.66498 0.48823 0.65223 0.47368 curveto
stroke
0.63158 0.51589 moveto
0.63385 0.51951 0.63698 0.52257 0.63902 0.52632 curveto
stroke
0.65767 0.57895 moveto
0.65473 0.56057 0.64793 0.54266 0.63902 0.52632 curveto
stroke
0.65691 0.63158 moveto
0.66017 0.61434 0.66044 0.59627 0.65767 0.57895 curveto
stroke
0.63634 0.68421 moveto
0.64592 0.66799 0.6534 0.65009 0.65691 0.63158 curveto
stroke
0.64819 0.73684 moveto
0.66251 0.72154 0.67508 0.70418 0.68421 0.68531 curveto
stroke
0.63158 0.69056 moveto
0.63301 0.68833 0.635 0.68649 0.63634 0.68421 curveto
stroke
0.65593 0.78947 moveto
0.66598 0.78161 0.67547 0.77296 0.68421 0.76367 curveto
stroke
0.63158 0.75232 moveto
0.63717 0.74723 0.64301 0.74237 0.64819 0.73684 curveto
stroke
0.67332 0.84211 moveto
0.67696 0.83974 0.68069 0.83752 0.68421 0.835 curveto
stroke
0.63158 0.80725 moveto
0.63997 0.80172 0.64802 0.79567 0.65593 0.78947 curveto
stroke
0.63158 0.8675 moveto
0.64614 0.8602 0.65967 0.85098 0.67332 0.84211 curveto
stroke
0.63742 0.94737 moveto
0.65312 0.9415 0.66922 0.93644 0.68421 0.92895 curveto
stroke
0.63158 0.95011 moveto
0.6336 0.94937 0.6354 0.94812 0.63742 0.94737 curveto
stroke
0.68421 0.27808 moveto
0.70258 0.28758 0.71977 0.29926 0.73684 0.31095 curveto
stroke
0.68421 0.37199 moveto
0.70309 0.38579 0.7211 0.40109 0.73684 0.41838 curveto
stroke
0.68421 0.44317 moveto
0.69338 0.45309 0.7031 0.46264 0.71087 0.47368 curveto
stroke
0.73684 0.52259 moveto
0.73007 0.50542 0.72148 0.48878 0.71087 0.47368 curveto
stroke
0.68421 0.52209 moveto
0.68491 0.52358 0.68609 0.52481 0.68677 0.52632 curveto
stroke
0.70295 0.57895 moveto
0.70047 0.56076 0.69428 0.54306 0.68677 0.52632 curveto
stroke
0.70241 0.63158 moveto
0.70512 0.61424 0.70531 0.59633 0.70295 0.57895 curveto
stroke
0.6849 0.68421 moveto
0.69287 0.66752 0.69956 0.64985 0.70241 0.63158 curveto
stroke
0.7084 0.73684 moveto
0.72 0.72112 0.72957 0.70374 0.73684 0.68561 curveto
stroke
0.68421 0.68531 moveto
0.6844 0.68492 0.68472 0.6846 0.6849 0.68421 curveto
stroke
0.73665 0.78947 moveto
0.73672 0.7894 0.73678 0.78932 0.73684 0.78925 curveto
stroke
0.68421 0.76367 moveto
0.69246 0.7549 0.70125 0.74653 0.7084 0.73684 curveto
stroke
0.68421 0.835 moveto
0.70304 0.82153 0.72087 0.80642 0.73665 0.78947 curveto
stroke
0.68421 0.92895 moveto
0.70267 0.91973 0.71965 0.90776 0.73684 0.89634 curveto
stroke
0.73684 0.31095 moveto
0.73908 0.31248 0.74115 0.31423 0.74337 0.31579 curveto
stroke
0.78947 0.35224 moveto
0.77526 0.33875 0.7594 0.32705 0.74337 0.31579 curveto
stroke
0.73684 0.41838 moveto
0.73768 0.4193 0.73862 0.42013 0.73945 0.42105 curveto
stroke
0.77904 0.47368 moveto
0.7682 0.45459 0.75409 0.43741 0.73945 0.42105 curveto
stroke
0.78947 0.49734 moveto
0.78602 0.48945 0.7833 0.48118 0.77904 0.47368 curveto
stroke
0.73684 0.52259 moveto
0.73736 0.5239 0.73832 0.525 0.73882 0.52632 curveto
stroke
0.75306 0.57895 moveto
0.75094 0.5609 0.74523 0.54332 0.73882 0.52632 curveto
stroke
0.75272 0.63158 moveto
0.75498 0.61418 0.75511 0.59637 0.75306 0.57895 curveto
stroke
0.73761 0.68421 moveto
0.74431 0.66723 0.75037 0.64968 0.75272 0.63158 curveto
stroke
0.77787 0.73684 moveto
0.78259 0.72879 0.7857 0.71989 0.78947 0.71135 curveto
stroke
0.73684 0.68561 moveto
0.73704 0.68512 0.73741 0.6847 0.73761 0.68421 curveto
stroke
0.73684 0.78925 moveto
0.75194 0.77299 0.76665 0.75598 0.77787 0.73684 curveto
stroke
0.73906 0.89474 moveto
0.75661 0.88298 0.774 0.87073 0.78947 0.85636 curveto
stroke
0.73684 0.89634 moveto
0.7376 0.89583 0.7383 0.89524 0.73906 0.89474 curveto
stroke
0.78947 0.35224 moveto
0.79514 0.35761 0.80097 0.36281 0.80641 0.36842 curveto
stroke
0.84211 0.412 moveto
0.83134 0.39661 0.81947 0.38191 0.80641 0.36842 curveto
stroke
0.78947 0.49734 moveto
0.79376 0.50714 0.79999 0.51613 0.80323 0.52632 curveto
stroke
0.81504 0.57895 moveto
0.81324 0.56106 0.80866 0.54346 0.80323 0.52632 curveto
stroke
0.81488 0.63158 moveto
0.81675 0.61413 0.81681 0.5964 0.81504 0.57895 curveto
stroke
0.80263 0.68421 moveto
0.80821 0.66709 0.81296 0.64949 0.81488 0.63158 curveto
stroke
0.78947 0.71135 moveto
0.79353 0.70215 0.79951 0.69377 0.80263 0.68421 curveto
stroke
0.80468 0.84211 moveto
0.81837 0.82838 0.83089 0.81341 0.84211 0.7976 curveto
stroke
0.78947 0.85636 moveto
0.79456 0.85163 0.79977 0.84702 0.80468 0.84211 curveto
stroke
0.84211 0.412 moveto
0.84431 0.41516 0.84715 0.41785 0.84929 0.42105 curveto
stroke
0.88031 0.47368 moveto
0.87207 0.45506 0.86058 0.438 0.84929 0.42105 curveto
stroke
0.89474 0.51835 moveto
0.89058 0.50327 0.88665 0.48799 0.88031 0.47368 curveto
stroke
0.88018 0.73684 moveto
0.88657 0.72256 0.89056 0.70729 0.89474 0.69221 curveto
stroke
0.84864 0.78947 moveto
0.86013 0.77255 0.87182 0.75551 0.88018 0.73684 curveto
stroke
0.84211 0.7976 moveto
0.84412 0.79477 0.84669 0.79235 0.84864 0.78947 curveto
stroke
0.89474 0.51835 moveto
0.8955 0.52111 0.89721 0.52354 0.89791 0.52632 curveto
stroke
0.90863 0.57895 moveto
0.90715 0.56111 0.90229 0.54368 0.89791 0.52632 curveto
stroke
0.90865 0.63158 moveto
0.91009 0.61409 0.91008 0.59643 0.90863 0.57895 curveto
stroke
0.89794 0.68421 moveto
0.90234 0.66686 0.90718 0.64942 0.90865 0.63158 curveto
stroke
0.89474 0.69221 moveto
0.8955 0.68944 0.89723 0.68699 0.89794 0.68421 curveto
stroke
%IH within-speaker dist
newpath
0.25 setgray
0.0045 setlinewidth
0.13272 0.21053 moveto
0.13901 0.193 0.14938 0.17721 0.15789 0.16064 curveto
stroke
0.11764 0.26316 moveto
0.12162 0.24535 0.12655 0.2277 0.13272 0.21053 curveto
stroke
0.10988 0.31579 moveto
0.11184 0.29816 0.11377 0.28046 0.11764 0.26316 curveto
stroke
0.10717 0.36842 moveto
0.1074 0.35086 0.10794 0.33325 0.10988 0.31579 curveto
stroke
0.10863 0.42105 moveto
0.10724 0.40356 0.10694 0.38597 0.10717 0.36842 curveto
stroke
0.11436 0.47368 moveto
0.11134 0.4563 0.11002 0.43864 0.10863 0.42105 curveto
stroke
0.12553 0.52632 moveto
0.12075 0.50903 0.11743 0.49135 0.11436 0.47368 curveto
stroke
0.14485 0.57895 moveto
0.13805 0.56154 0.13051 0.54433 0.12553 0.52632 curveto
stroke
0.15789 0.60383 moveto
0.15412 0.59526 0.14825 0.58767 0.14485 0.57895 curveto
stroke
0.19209 0.10526 moveto
0.198 0.09799 0.20414 0.09091 0.21053 0.08406 curveto
stroke
0.15915 0.15789 moveto
0.16882 0.13959 0.17904 0.12133 0.19209 0.10526 curveto
stroke
0.15789 0.16064 moveto
0.15835 0.15975 0.15868 0.15878 0.15915 0.15789 curveto
stroke
0.18678 0.26316 moveto
0.19261 0.24499 0.20179 0.22803 0.21053 0.21106 curveto
stroke
0.17413 0.31579 moveto
0.17709 0.29799 0.18126 0.28034 0.18678 0.26316 curveto
stroke
0.16918 0.36842 moveto
0.16981 0.35081 0.17124 0.33317 0.17413 0.31579 curveto
stroke
0.17035 0.42105 moveto
0.16889 0.40356 0.16854 0.38596 0.16918 0.36842 curveto
stroke
0.17758 0.47368 moveto
0.17403 0.45633 0.17182 0.4387 0.17035 0.42105 curveto
stroke
0.19229 0.52632 moveto
0.18647 0.50906 0.18123 0.49153 0.17758 0.47368 curveto
stroke
0.21053 0.566 moveto
0.20462 0.5527 0.19695 0.54011 0.19229 0.52632 curveto
stroke
0.15789 0.60383 moveto
0.16196 0.61305 0.16512 0.6227 0.16987 0.63158 curveto
stroke
0.20395 0.68421 moveto
0.19173 0.66726 0.17972 0.65001 0.16987 0.63158 curveto
stroke
0.21053 0.6926 moveto
0.2084 0.68975 0.20603 0.68709 0.20395 0.68421 curveto
stroke
0.24607 0.05263 moveto
0.25197 0.04832 0.25702 0.04284 0.26316 0.03887 curveto
stroke
0.21053 0.08406 moveto
0.22131 0.07249 0.23329 0.06195 0.24607 0.05263 curveto
stroke
0.24512 0.15789 moveto
0.25098 0.1512 0.25675 0.14439 0.26316 0.13821 curveto
stroke
0.21077 0.21053 moveto
0.22041 0.19193 0.23131 0.17365 0.24512 0.15789 curveto
stroke
0.21053 0.21106 moveto
0.21062 0.21089 0.21068 0.2107 0.21077 0.21053 curveto
stroke
0.23503 0.26316 moveto
0.24248 0.24578 0.25225 0.22935 0.26316 0.21391 curveto
stroke
0.21893 0.31579 moveto
0.22284 0.29786 0.2278 0.28002 0.23503 0.26316 curveto
stroke
0.25518 0.31579 moveto
0.25716 0.30873 0.26064 0.30217 0.26316 0.29529 curveto
stroke
0.21235 0.36842 moveto
0.21335 0.35077 0.21517 0.33306 0.21893 0.31579 curveto
stroke
0.24538 0.36842 moveto
0.24687 0.35064 0.25036 0.33297 0.25518 0.31579 curveto
stroke
0.21309 0.42105 moveto
0.21159 0.40357 0.21136 0.38594 0.21235 0.36842 curveto
stroke
0.24555 0.42105 moveto
0.244 0.40358 0.24391 0.3859 0.24538 0.36842 curveto
stroke
0.22077 0.47368 moveto
0.21677 0.45641 0.2146 0.43872 0.21309 0.42105 curveto
stroke
0.25519 0.47368 moveto
0.25068 0.45643 0.24712 0.43882 0.24555 0.42105 curveto
stroke
0.23671 0.52632 moveto
0.22991 0.50929 0.2249 0.49154 0.22077 0.47368 curveto
stroke
0.26316 0.49543 moveto
0.26072 0.48811 0.25715 0.48115 0.25519 0.47368 curveto
stroke
0.21053 0.566 moveto
0.21242 0.57027 0.21377 0.57477 0.21584 0.57895 curveto
stroke
0.26316 0.57692 moveto
0.25342 0.56057 0.24377 0.54399 0.23671 0.52632 curveto
stroke
0.2466 0.63158 moveto
0.2347 0.61511 0.22487 0.59715 0.21584 0.57895 curveto
stroke
0.26316 0.65259 moveto
0.25753 0.64567 0.25182 0.63881 0.2466 0.63158 curveto
stroke
0.21053 0.6926 moveto
0.22207 0.70808 0.23412 0.72336 0.24795 0.73684 curveto
stroke
0.26316 0.75203 moveto
0.25784 0.74724 0.25308 0.74184 0.24795 0.73684 curveto
stroke
0.26316 0.03887 moveto
0.27977 0.02812 0.29725 0.01833 0.31579 0.01143 curveto
stroke
0.30807 0.10526 moveto
0.3108 0.10376 0.31302 0.10143 0.31579 0.10002 curveto
stroke
0.26316 0.13821 moveto
0.27653 0.12533 0.29181 0.11423 0.30807 0.10526 curveto
stroke
0.26553 0.21053 moveto
0.27959 0.19156 0.29622 0.17383 0.31579 0.16062 curveto
stroke
0.26316 0.21391 moveto
0.26395 0.21278 0.26471 0.21163 0.26553 0.21053 curveto
stroke
0.27716 0.26316 moveto
0.28763 0.24486 0.30015 0.22721 0.31579 0.21308 curveto
stroke
0.26316 0.29529 moveto
0.26717 0.28432 0.27135 0.2733 0.27716 0.26316 curveto
stroke
0.28943 0.31579 moveto
0.29604 0.29828 0.30446 0.28112 0.31579 0.26623 curveto
stroke
0.27709 0.36842 moveto
0.27918 0.35052 0.28307 0.33265 0.28943 0.31579 curveto
stroke
0.30725 0.36842 moveto
0.30891 0.35824 0.31255 0.34847 0.31579 0.33867 curveto
stroke
0.2765 0.42105 moveto
0.27491 0.40358 0.27505 0.38585 0.27709 0.36842 curveto
stroke
0.30566 0.42105 moveto
0.30402 0.40358 0.30445 0.38575 0.30725 0.36842 curveto
stroke
0.28654 0.47368 moveto
0.28136 0.45659 0.27812 0.43884 0.2765 0.42105 curveto
stroke
0.31579 0.46844 moveto
0.31083 0.45307 0.30718 0.43713 0.30566 0.42105 curveto
stroke
0.26316 0.49543 moveto
0.26662 0.50583 0.26975 0.5164 0.27441 0.52632 curveto
stroke
0.30866 0.52632 moveto
0.29927 0.50976 0.29206 0.49189 0.28654 0.47368 curveto
stroke
0.26316 0.57692 moveto
0.26355 0.57759 0.26387 0.57829 0.26427 0.57895 curveto
stroke
0.30588 0.57895 moveto
0.29336 0.56279 0.28311 0.54481 0.27441 0.52632 curveto
stroke
0.31579 0.53761 moveto
0.31342 0.53384 0.31085 0.53019 0.30866 0.52632 curveto
stroke
0.30376 0.63158 moveto
0.28846 0.61586 0.27566 0.59769 0.26427 0.57895 curveto
stroke
0.31579 0.59126 moveto
0.31237 0.58726 0.30911 0.58311 0.30588 0.57895 curveto
stroke
0.26316 0.65259 moveto
0.27229 0.6638 0.28213 0.67452 0.29287 0.68421 curveto
stroke
0.31579 0.64415 moveto
0.31155 0.64019 0.3078 0.63574 0.30376 0.63158 curveto
stroke
0.31579 0.70519 moveto
0.30757 0.69889 0.30056 0.69115 0.29287 0.68421 curveto
stroke
0.26316 0.75203 moveto
0.27871 0.76606 0.29576 0.77853 0.31362 0.78947 curveto
stroke
0.31579 0.79112 moveto
0.31501 0.79065 0.31439 0.78995 0.31362 0.78947 curveto
stroke
0.31579 0.01143 moveto
0.33186 0.00544 0.349 0.00266 0.36594 0 curveto
stroke
0.31579 0.10002 moveto
0.33261 0.09144 0.34996 0.08306 0.36842 0.07908 curveto
stroke
0.32087 0.15789 moveto
0.33592 0.14852 0.35137 0.13894 0.36842 0.13406 curveto
stroke
0.31579 0.16062 moveto
0.31738 0.15954 0.31924 0.15891 0.32087 0.15789 curveto
stroke
0.31907 0.21053 moveto
0.33384 0.19794 0.35022 0.18636 0.36842 0.17963 curveto
stroke
0.31579 0.21308 moveto
0.31682 0.21215 0.31801 0.21142 0.31907 0.21053 curveto
stroke
0.31824 0.26316 moveto
0.33185 0.24628 0.34887 0.23114 0.36842 0.22176 curveto
stroke
0.31579 0.26623 moveto
0.31658 0.26519 0.31742 0.26418 0.31824 0.26316 curveto
stroke
0.32466 0.31579 moveto
0.33517 0.29562 0.34933 0.2758 0.36842 0.26344 curveto
stroke
0.36543 0.31579 moveto
0.36646 0.31462 0.36735 0.31333 0.36842 0.31221 curveto
stroke
0.31579 0.33867 moveto
0.31836 0.33091 0.32088 0.32304 0.32466 0.31579 curveto
stroke
0.3413 0.36842 moveto
0.34605 0.34972 0.35265 0.33025 0.36543 0.31579 curveto
stroke
0.33769 0.42105 moveto
0.33595 0.40355 0.33697 0.38546 0.3413 0.36842 curveto
stroke
0.31579 0.46844 moveto
0.31634 0.47015 0.31651 0.47198 0.3171 0.47368 curveto
stroke
0.35128 0.47368 moveto
0.34368 0.45724 0.33948 0.43908 0.33769 0.42105 curveto
stroke
0.34557 0.52632 moveto
0.33355 0.5104 0.32372 0.4925 0.3171 0.47368 curveto
stroke
0.36842 0.5032 moveto
0.36162 0.49408 0.35606 0.48401 0.35128 0.47368 curveto
stroke
0.31579 0.53761 moveto
0.3253 0.55273 0.33671 0.56687 0.34986 0.57895 curveto
stroke
0.36842 0.55313 moveto
0.35977 0.54519 0.35265 0.53569 0.34557 0.52632 curveto
stroke
0.31579 0.59126 moveto
0.32884 0.60652 0.34382 0.62046 0.36053 0.63158 curveto
stroke
0.36842 0.59605 moveto
0.36163 0.59108 0.35605 0.58464 0.34986 0.57895 curveto
stroke
0.31579 0.64415 moveto
0.33163 0.65895 0.34924 0.67224 0.36842 0.68236 curveto
stroke
0.36842 0.63772 moveto
0.36558 0.63598 0.3633 0.63343 0.36053 0.63158 curveto
stroke
0.31579 0.70519 moveto
0.33199 0.71762 0.34984 0.72807 0.36842 0.73652 curveto
stroke
0.31579 0.79112 moveto
0.33306 0.80158 0.34957 0.81388 0.36842 0.82112 curveto
stroke
0.36842 0.07908 moveto
0.38565 0.07536 0.40344 0.07358 0.42105 0.07411 curveto
stroke
0.36842 0.13406 moveto
0.38545 0.1292 0.40335 0.12661 0.42105 0.12686 curveto
stroke
0.36842 0.17963 moveto
0.38515 0.17344 0.40322 0.17011 0.42105 0.17004 curveto
stroke
0.41274 0.21053 moveto
0.41557 0.21028 0.41821 0.20865 0.42105 0.20858 curveto
stroke
0.36842 0.22176 moveto
0.38216 0.21516 0.39755 0.21184 0.41274 0.21053 curveto
stroke
0.36908 0.26316 moveto
0.38447 0.25335 0.40283 0.247 0.42105 0.24588 curveto
stroke
0.36842 0.26344 moveto
0.36862 0.26331 0.36888 0.26329 0.36908 0.26316 curveto
stroke
0.36842 0.31221 moveto
0.38196 0.29803 0.40158 0.28825 0.42105 0.28594 curveto
stroke
0.38463 0.36842 moveto
0.39236 0.35377 0.40504 0.33886 0.42105 0.33461 curveto
stroke
0.3735 0.42105 moveto
0.37155 0.40323 0.37626 0.38428 0.38463 0.36842 curveto
stroke
0.39754 0.47368 moveto
0.38516 0.45889 0.37559 0.44023 0.3735 0.42105 curveto
stroke
0.36842 0.5032 moveto
0.37506 0.51211 0.3836 0.51958 0.39244 0.52632 curveto
stroke
0.42105 0.49634 moveto
0.41138 0.49136 0.40453 0.48203 0.39754 0.47368 curveto
stroke
0.36842 0.55313 moveto
0.38025 0.56399 0.39425 0.57284 0.4091 0.57895 curveto
stroke
0.42105 0.54531 moveto
0.4103 0.54137 0.40155 0.53325 0.39244 0.52632 curveto
stroke
0.36842 0.59605 moveto
0.38426 0.60763 0.40213 0.61722 0.42105 0.62238 curveto
stroke
0.42105 0.58532 moveto
0.41674 0.584 0.41327 0.58066 0.4091 0.57895 curveto
stroke
0.36842 0.68236 moveto
0.36992 0.68315 0.37165 0.68346 0.37317 0.68421 curveto
stroke
0.36842 0.63772 moveto
0.38481 0.64776 0.4024 0.65663 0.42105 0.66126 curveto
stroke
0.36842 0.73652 moveto
0.36873 0.73666 0.36908 0.7367 0.36939 0.73684 curveto
stroke
0.42105 0.70414 moveto
0.4042 0.7003 0.38867 0.69187 0.37317 0.68421 curveto
stroke
0.42105 0.75681 moveto
0.40298 0.75303 0.38623 0.74441 0.36939 0.73684 curveto
stroke
0.36842 0.82112 moveto
0.38541 0.82764 0.40317 0.83229 0.42105 0.83565 curveto
stroke
0.47368 0.00382 moveto
0.46364 0.00137 0.45317 0.0013 0.44291 0 curveto
stroke
0.42105 0.07411 moveto
0.4388 0.07466 0.45652 0.07778 0.47368 0.08234 curveto
stroke
0.42105 0.12686 moveto
0.43882 0.12712 0.45664 0.13031 0.47368 0.13535 curveto
stroke
0.42105 0.17004 moveto
0.43883 0.16998 0.4568 0.17309 0.47368 0.17865 curveto
stroke
0.42105 0.20858 moveto
0.42471 0.20848 0.42821 0.21034 0.43187 0.21053 curveto
stroke
0.47368 0.21789 moveto
0.46041 0.21299 0.446 0.21125 0.43187 0.21053 curveto
stroke
0.42105 0.24588 moveto
0.43886 0.2448 0.45728 0.24853 0.47368 0.25552 curveto
stroke
0.42105 0.28594 moveto
0.43882 0.28383 0.45788 0.28816 0.47368 0.29655 curveto
stroke
0.42105 0.33461 moveto
0.43856 0.32998 0.45966 0.3366 0.47368 0.34805 curveto
stroke
0.42105 0.49634 moveto
0.43665 0.50437 0.45844 0.50486 0.47368 0.49618 curveto
stroke
0.42105 0.54531 moveto
0.43755 0.55134 0.45679 0.55253 0.47368 0.54775 curveto
stroke
0.42105 0.62238 moveto
0.43803 0.627 0.45622 0.62863 0.47368 0.62649 curveto
stroke
0.42105 0.58532 moveto
0.43787 0.59046 0.45638 0.59193 0.47368 0.58882 curveto
stroke
0.42105 0.66126 moveto
0.43814 0.6655 0.45614 0.66717 0.47368 0.66569 curveto
stroke
0.42105 0.70414 moveto
0.43823 0.70805 0.45609 0.70999 0.47368 0.70906 curveto
stroke
0.42105 0.75681 moveto
0.43831 0.76042 0.45606 0.76253 0.47368 0.76208 curveto
stroke
0.42105 0.83565 moveto
0.43836 0.83891 0.45608 0.84009 0.47368 0.84015 curveto
stroke
0.47368 0.00382 moveto
0.49156 0.00819 0.50952 0.01295 0.52632 0.02047 curveto
stroke
0.47368 0.08234 moveto
0.49168 0.08713 0.50805 0.09681 0.52464 0.10526 curveto
stroke
0.52632 0.10593 moveto
0.52578 0.10565 0.52518 0.10554 0.52464 0.10526 curveto
stroke
0.47368 0.13535 moveto
0.49007 0.1402 0.50481 0.14955 0.51973 0.15789 curveto
stroke
0.52632 0.16103 moveto
0.52424 0.15977 0.52185 0.15908 0.51973 0.15789 curveto
stroke
0.47368 0.17865 moveto
0.49262 0.18488 0.5101 0.19547 0.52632 0.20708 curveto
stroke
0.47368 0.21789 moveto
0.49301 0.22502 0.51078 0.23675 0.52632 0.25027 curveto
stroke
0.47368 0.25552 moveto
0.478 0.25736 0.48137 0.26094 0.48551 0.26316 curveto
stroke
0.52632 0.29587 moveto
0.51479 0.28279 0.50087 0.2714 0.48551 0.26316 curveto
stroke
0.47368 0.29655 moveto
0.4826 0.30129 0.48954 0.30907 0.49708 0.31579 curveto
stroke
0.52632 0.35245 moveto
0.519 0.33863 0.50875 0.32619 0.49708 0.31579 curveto
stroke
0.47368 0.34805 moveto
0.48045 0.35357 0.48519 0.36124 0.49015 0.36842 curveto
stroke
0.50671 0.42105 moveto
0.50577 0.40268 0.5006 0.38356 0.49015 0.36842 curveto
stroke
0.49391 0.47368 moveto
0.50395 0.45867 0.50764 0.43908 0.50671 0.42105 curveto
stroke
0.50726 0.52632 moveto
0.51449 0.51996 0.52133 0.51285 0.52632 0.50462 curveto
stroke
0.47368 0.49618 moveto
0.48245 0.49119 0.48831 0.48207 0.49391 0.47368 curveto
stroke
0.49641 0.57895 moveto
0.50703 0.57454 0.5177 0.56938 0.52632 0.56178 curveto
stroke
0.47368 0.54775 moveto
0.48646 0.54413 0.49728 0.53507 0.50726 0.52632 curveto
stroke
0.47368 0.62649 moveto
0.49222 0.62423 0.51048 0.61718 0.52632 0.60729 curveto
stroke
0.47368 0.58882 moveto
0.48181 0.58736 0.48878 0.58212 0.49641 0.57895 curveto
stroke
0.47368 0.66569 moveto
0.49183 0.66416 0.50986 0.65888 0.52632 0.65109 curveto
stroke
0.47368 0.70906 moveto
0.49162 0.7081 0.50945 0.70368 0.52632 0.69751 curveto
stroke
0.47368 0.76208 moveto
0.49146 0.76163 0.50919 0.75826 0.52632 0.75348 curveto
stroke
0.47368 0.84015 moveto
0.49129 0.84021 0.50903 0.8391 0.52632 0.83578 curveto
stroke
0.52632 0.02047 moveto
0.5447 0.02871 0.56064 0.04158 0.57748 0.05263 curveto
stroke
0.57895 0.05347 moveto
0.57848 0.05316 0.57795 0.05294 0.57748 0.05263 curveto
stroke
0.52632 0.10593 moveto
0.54511 0.1157 0.56285 0.12777 0.57895 0.14153 curveto
stroke
0.52632 0.16103 moveto
0.54583 0.17294 0.56325 0.18836 0.57895 0.20497 curveto
stroke
0.52632 0.20708 moveto
0.52775 0.2081 0.52891 0.20947 0.53033 0.21053 curveto
stroke
0.57895 0.26085 moveto
0.56514 0.24205 0.54904 0.22445 0.53033 0.21053 curveto
stroke
0.52632 0.25027 moveto
0.53084 0.25421 0.53464 0.2589 0.53886 0.26316 curveto
stroke
0.57663 0.31579 moveto
0.56656 0.29669 0.55406 0.2785 0.53886 0.26316 curveto
stroke
0.52632 0.29587 moveto
0.53181 0.30212 0.53663 0.30894 0.54135 0.31579 curveto
stroke
0.57895 0.32088 moveto
0.57812 0.31921 0.5775 0.31744 0.57663 0.31579 curveto
stroke
0.56648 0.36842 moveto
0.56048 0.34993 0.55239 0.33179 0.54135 0.31579 curveto
stroke
0.52632 0.35245 moveto
0.5291 0.35772 0.5321 0.3629 0.53435 0.36842 curveto
stroke
0.57699 0.42105 moveto
0.57581 0.4032 0.57201 0.38544 0.56648 0.36842 curveto
stroke
0.54539 0.42105 moveto
0.54428 0.40316 0.54111 0.38502 0.53435 0.36842 curveto
stroke
0.57365 0.47368 moveto
0.57699 0.45643 0.57815 0.43859 0.57699 0.42105 curveto
stroke
0.54008 0.47368 moveto
0.54512 0.45679 0.54648 0.43865 0.54539 0.42105 curveto
stroke
0.55374 0.52632 moveto
0.56331 0.51018 0.57009 0.4921 0.57365 0.47368 curveto
stroke
0.52632 0.50462 moveto
0.53216 0.49496 0.53686 0.4845 0.54008 0.47368 curveto
stroke
0.55758 0.57895 moveto
0.56587 0.57 0.57304 0.55991 0.57895 0.54923 curveto
stroke
0.52632 0.56178 moveto
0.53752 0.55189 0.54612 0.53917 0.55374 0.52632 curveto
stroke
0.55434 0.63158 moveto
0.56316 0.62515 0.57169 0.61811 0.57895 0.60995 curveto
stroke
0.52632 0.60729 moveto
0.53825 0.59984 0.54802 0.58926 0.55758 0.57895 curveto
stroke
0.54993 0.68421 moveto
0.56 0.67899 0.57014 0.67357 0.57895 0.66642 curveto
stroke
0.52632 0.65109 moveto
0.5366 0.64622 0.54514 0.63828 0.55434 0.63158 curveto
stroke
0.56165 0.73684 moveto
0.56739 0.73416 0.57352 0.73228 0.57895 0.72903 curveto
stroke
0.52632 0.69751 moveto
0.5348 0.69441 0.54191 0.68837 0.54993 0.68421 curveto
stroke
0.52632 0.75348 moveto
0.53886 0.74998 0.54986 0.74235 0.56165 0.73684 curveto
stroke
0.52632 0.83578 moveto
0.54428 0.83232 0.5621 0.82733 0.57895 0.82019 curveto
stroke
0.57895 0.05347 moveto
0.59786 0.06608 0.61539 0.08087 0.63158 0.09683 curveto
stroke
0.57895 0.14153 moveto
0.58488 0.1466 0.59004 0.1525 0.59568 0.15789 curveto
stroke
0.63158 0.20022 moveto
0.62072 0.18524 0.60905 0.17068 0.59568 0.15789 curveto
stroke
0.57895 0.20497 moveto
0.58065 0.20678 0.58223 0.20869 0.5839 0.21053 curveto
stroke
0.62196 0.26316 moveto
0.61102 0.24448 0.59847 0.22654 0.5839 0.21053 curveto
stroke
0.57895 0.26085 moveto
0.57951 0.26162 0.5801 0.26238 0.58067 0.26316 curveto
stroke
0.63158 0.28275 moveto
0.6284 0.27621 0.62563 0.26944 0.62196 0.26316 curveto
stroke
0.61085 0.31579 moveto
0.60261 0.29732 0.59251 0.27955 0.58067 0.26316 curveto
stroke
0.62806 0.36842 moveto
0.62375 0.35047 0.61837 0.33265 0.61085 0.31579 curveto
stroke
0.57895 0.32088 moveto
0.58649 0.33614 0.59305 0.35202 0.59759 0.36842 curveto
stroke
0.63158 0.39191 moveto
0.63033 0.38409 0.6299 0.37612 0.62806 0.36842 curveto
stroke
0.60646 0.42105 moveto
0.60525 0.4033 0.60234 0.38557 0.59759 0.36842 curveto
stroke
0.60461 0.47368 moveto
0.60711 0.45631 0.60765 0.43857 0.60646 0.42105 curveto
stroke
0.62492 0.52632 moveto
0.62823 0.51556 0.62971 0.50432 0.63158 0.49322 curveto
stroke
0.59075 0.52632 moveto
0.59761 0.50952 0.60203 0.49164 0.60461 0.47368 curveto
stroke
0.60178 0.57895 moveto
0.61188 0.56266 0.61929 0.54463 0.62492 0.52632 curveto
stroke
0.57895 0.54923 moveto
0.58311 0.54172 0.5875 0.53427 0.59075 0.52632 curveto
stroke
0.61215 0.63158 moveto
0.61961 0.62242 0.62582 0.61226 0.63158 0.60195 curveto
stroke
0.57895 0.60995 moveto
0.58748 0.60036 0.59501 0.58985 0.60178 0.57895 curveto
stroke
0.63118 0.68421 moveto
0.63131 0.68407 0.63145 0.68392 0.63158 0.68378 curveto
stroke
0.57895 0.66642 moveto
0.59141 0.65632 0.60202 0.64402 0.61215 0.63158 curveto
stroke
0.57895 0.72903 moveto
0.59862 0.71723 0.61571 0.70115 0.63118 0.68421 curveto
stroke
0.62756 0.78947 moveto
0.62886 0.78858 0.6303 0.78791 0.63158 0.78698 curveto
stroke
0.57895 0.82019 moveto
0.5966 0.81271 0.61175 0.80031 0.62756 0.78947 curveto
stroke
0.63158 0.09683 moveto
0.63435 0.09956 0.63691 0.10248 0.63963 0.10526 curveto
stroke
0.68186 0.15789 moveto
0.66903 0.13941 0.65534 0.12136 0.63963 0.10526 curveto
stroke
0.68421 0.16158 moveto
0.6834 0.16037 0.68269 0.15909 0.68186 0.15789 curveto
stroke
0.63158 0.20022 moveto
0.63409 0.20369 0.63684 0.20699 0.63927 0.21053 curveto
stroke
0.67025 0.26316 moveto
0.66145 0.2448 0.6508 0.22731 0.63927 0.21053 curveto
stroke
0.68421 0.30071 moveto
0.67977 0.28812 0.67602 0.2752 0.67025 0.26316 curveto
stroke
0.63158 0.28275 moveto
0.63694 0.29378 0.64339 0.30432 0.64771 0.31579 curveto
stroke
0.66349 0.36842 moveto
0.65963 0.35052 0.65418 0.33293 0.64771 0.31579 curveto
stroke
0.67069 0.42105 moveto
0.66946 0.40339 0.66721 0.38573 0.66349 0.36842 curveto
stroke
0.63158 0.39191 moveto
0.63313 0.40164 0.63581 0.41122 0.63649 0.42105 curveto
stroke
0.67058 0.47368 moveto
0.6719 0.45619 0.67191 0.43855 0.67069 0.42105 curveto
stroke
0.6356 0.47368 moveto
0.63739 0.45623 0.6377 0.43856 0.63649 0.42105 curveto
stroke
0.66265 0.52632 moveto
0.66681 0.50907 0.66924 0.49138 0.67058 0.47368 curveto
stroke
0.63158 0.49322 moveto
0.63268 0.48666 0.63493 0.4803 0.6356 0.47368 curveto
stroke
0.64441 0.57895 moveto
0.65207 0.56204 0.65829 0.54437 0.66265 0.52632 curveto
stroke
0.66935 0.63158 moveto
0.67545 0.62068 0.67966 0.60881 0.68421 0.59718 curveto
stroke
0.63158 0.60195 moveto
0.63586 0.59429 0.64078 0.58694 0.64441 0.57895 curveto
stroke
0.63158 0.68378 moveto
0.64601 0.66787 0.65885 0.65032 0.66935 0.63158 curveto
stroke
0.68362 0.73684 moveto
0.68382 0.73661 0.68401 0.73637 0.68421 0.73613 curveto
stroke
0.63158 0.78698 moveto
0.65112 0.77289 0.66814 0.7553 0.68362 0.73684 curveto
stroke
0.68421 0.16158 moveto
0.6951 0.17778 0.70738 0.19319 0.71636 0.21053 curveto
stroke
0.73684 0.26201 moveto
0.73036 0.24472 0.72486 0.22693 0.71636 0.21053 curveto
stroke
0.68421 0.30071 moveto
0.68603 0.30588 0.6891 0.31057 0.69076 0.31579 curveto
stroke
0.70595 0.36842 moveto
0.70254 0.35048 0.69631 0.33319 0.69076 0.31579 curveto
stroke
0.7131 0.42105 moveto
0.71187 0.40339 0.70926 0.38581 0.70595 0.36842 curveto
stroke
0.71363 0.47368 moveto
0.71452 0.45616 0.71432 0.43855 0.7131 0.42105 curveto
stroke
0.70736 0.52632 moveto
0.71053 0.50893 0.71274 0.49133 0.71363 0.47368 curveto
stroke
0.69244 0.57895 moveto
0.69826 0.56167 0.7041 0.54426 0.70736 0.52632 curveto
stroke
0.68421 0.59718 moveto
0.68664 0.59097 0.69031 0.58527 0.69244 0.57895 curveto
stroke
0.72162 0.68421 moveto
0.72782 0.6732 0.73199 0.66115 0.73684 0.64948 curveto
stroke
0.68421 0.73613 moveto
0.69784 0.71972 0.71114 0.70279 0.72162 0.68421 curveto
stroke
0.73684 0.26201 moveto
0.73699 0.26241 0.73727 0.26276 0.73742 0.26316 curveto
stroke
0.75832 0.31579 moveto
0.75351 0.29754 0.74401 0.28085 0.73742 0.26316 curveto
stroke
0.77028 0.36842 moveto
0.76738 0.35067 0.76291 0.33319 0.75832 0.31579 curveto
stroke
0.77619 0.42105 moveto
0.77497 0.40344 0.77312 0.38584 0.77028 0.36842 curveto
stroke
0.77727 0.47368 moveto
0.77771 0.45614 0.77739 0.43856 0.77619 0.42105 curveto
stroke
0.77358 0.52632 moveto
0.77576 0.50886 0.77683 0.49127 0.77727 0.47368 curveto
stroke
0.764 0.57895 moveto
0.76814 0.5616 0.77137 0.54401 0.77358 0.52632 curveto
stroke
0.7458 0.63158 moveto
0.75228 0.61418 0.7597 0.59701 0.764 0.57895 curveto
stroke
0.73684 0.64948 moveto
0.73941 0.64332 0.74347 0.63783 0.7458 0.63158 curveto
stroke
% EH within class distributions
newpath
0.5 setgray
0.0045 setlinewidth
0.09481 0.42105 moveto
0.09685 0.4147 0.10275 0.41016 0.10526 0.40397 curveto
stroke
0.08357 0.47368 moveto
0.08366 0.45575 0.08931 0.43813 0.09481 0.42105 curveto
stroke
0.09474 0.52632 moveto
0.08886 0.50937 0.08348 0.49162 0.08357 0.47368 curveto
stroke
0.10526 0.54253 moveto
0.10262 0.53665 0.09686 0.5324 0.09474 0.52632 curveto
stroke
0.12287 0.36842 moveto
0.13232 0.35425 0.14642 0.3438 0.15789 0.33122 curveto
stroke
0.10526 0.40397 moveto
0.11023 0.39172 0.11554 0.37943 0.12287 0.36842 curveto
stroke
0.10526 0.54253 moveto
0.1111 0.55552 0.11841 0.56808 0.12761 0.57895 curveto
stroke
0.15789 0.60606 moveto
0.14775 0.59708 0.13637 0.58929 0.12761 0.57895 curveto
stroke
0.17335 0.31579 moveto
0.18513 0.30518 0.19779 0.29556 0.21053 0.28612 curveto
stroke
0.15789 0.33122 moveto
0.1628 0.32584 0.16794 0.32066 0.17335 0.31579 curveto
stroke
0.19885 0.36842 moveto
0.20216 0.36402 0.20703 0.36101 0.21053 0.35676 curveto
stroke
0.16734 0.42105 moveto
0.17388 0.40168 0.18657 0.38477 0.19885 0.36842 curveto
stroke
0.1597 0.47368 moveto
0.15898 0.45597 0.16166 0.43785 0.16734 0.42105 curveto
stroke
0.20535 0.47368 moveto
0.20453 0.46388 0.20906 0.45435 0.21053 0.44461 curveto
stroke
0.17312 0.52632 moveto
0.16511 0.51008 0.16045 0.49177 0.1597 0.47368 curveto
stroke
0.21053 0.48719 moveto
0.20962 0.48246 0.20575 0.47849 0.20535 0.47368 curveto
stroke
0.21053 0.56954 moveto
0.19706 0.55606 0.18155 0.5434 0.17312 0.52632 curveto
stroke
0.15789 0.60606 moveto
0.16966 0.61647 0.18383 0.62389 0.19754 0.63158 curveto
stroke
0.21053 0.63949 moveto
0.20603 0.63714 0.20196 0.63406 0.19754 0.63158 curveto
stroke
0.2508 0.26316 moveto
0.25507 0.26078 0.25884 0.25754 0.26316 0.25523 curveto
stroke
0.21053 0.28612 moveto
0.22294 0.27692 0.23729 0.27067 0.2508 0.26316 curveto
stroke
0.25689 0.31579 moveto
0.25895 0.31422 0.26107 0.31273 0.26316 0.31118 curveto
stroke
0.21053 0.35676 moveto
0.22363 0.34084 0.24047 0.32827 0.25689 0.31579 curveto
stroke
0.24594 0.36842 moveto
0.25092 0.36239 0.25777 0.35815 0.26316 0.35248 curveto
stroke
0.21363 0.42105 moveto
0.22042 0.40162 0.23284 0.3843 0.24594 0.36842 curveto
stroke
0.24734 0.42105 moveto
0.2505 0.4123 0.25868 0.4062 0.26316 0.39804 curveto
stroke
0.21053 0.44461 moveto
0.21171 0.43678 0.21101 0.42853 0.21363 0.42105 curveto
stroke
0.24004 0.47368 moveto
0.2378 0.45611 0.24133 0.43771 0.24734 0.42105 curveto
stroke
0.21053 0.48719 moveto
0.21314 0.50077 0.21696 0.51459 0.22428 0.52632 curveto
stroke
0.26316 0.52144 moveto
0.25328 0.50677 0.24228 0.49123 0.24004 0.47368 curveto
stroke
0.21053 0.56954 moveto
0.21372 0.57274 0.21682 0.57607 0.22031 0.57895 curveto
stroke
0.26316 0.56424 moveto
0.24936 0.55252 0.23387 0.54167 0.22428 0.52632 curveto
stroke
0.26316 0.60751 moveto
0.2482 0.5991 0.23355 0.58987 0.22031 0.57895 curveto
stroke
0.21053 0.63949 moveto
0.22771 0.64848 0.2449 0.65775 0.26316 0.66428 curveto
stroke
0.26316 0.25523 moveto
0.28063 0.24588 0.2975 0.2352 0.31579 0.22756 curveto
stroke
0.26316 0.31118 moveto
0.27985 0.29882 0.29751 0.28768 0.31579 0.27782 curveto
stroke
0.31097 0.31579 moveto
0.31257 0.31472 0.31417 0.31364 0.31579 0.31259 curveto
stroke
0.26316 0.35248 moveto
0.27699 0.33791 0.29421 0.32687 0.31097 0.31579 curveto
stroke
0.28303 0.36842 moveto
0.29256 0.35781 0.30485 0.35005 0.31579 0.3409 curveto
stroke
0.26316 0.39804 moveto
0.26887 0.38761 0.27509 0.37727 0.28303 0.36842 curveto
stroke
0.27713 0.42105 moveto
0.28469 0.40069 0.30073 0.38424 0.31579 0.36858 curveto
stroke
0.30344 0.42105 moveto
0.30592 0.41457 0.31247 0.41038 0.31579 0.40429 curveto
stroke
0.27135 0.47368 moveto
0.2684 0.45628 0.27098 0.4376 0.27713 0.42105 curveto
stroke
0.29815 0.47368 moveto
0.29438 0.45646 0.29715 0.43752 0.30344 0.42105 curveto
stroke
0.26316 0.52144 moveto
0.26418 0.52295 0.26453 0.52486 0.26563 0.52632 curveto
stroke
0.30043 0.52632 moveto
0.28682 0.5116 0.27469 0.49345 0.27135 0.47368 curveto
stroke
0.31579 0.50215 moveto
0.31006 0.49257 0.30054 0.48459 0.29815 0.47368 curveto
stroke
0.26316 0.56424 moveto
0.26962 0.56973 0.27667 0.57454 0.28392 0.57895 curveto
stroke
0.31579 0.56649 moveto
0.29763 0.55512 0.27854 0.54341 0.26563 0.52632 curveto
stroke
0.31579 0.53862 moveto
0.31087 0.53428 0.30488 0.53113 0.30043 0.52632 curveto
stroke
0.26316 0.60751 moveto
0.27959 0.61675 0.29793 0.62217 0.31579 0.6282 curveto
stroke
0.31579 0.59649 moveto
0.3048 0.59136 0.29428 0.58525 0.28392 0.57895 curveto
stroke
0.26316 0.66428 moveto
0.28023 0.67039 0.29814 0.67384 0.31579 0.67795 curveto
stroke
0.31579 0.22756 moveto
0.3327 0.2205 0.35093 0.21711 0.36842 0.21162 curveto
stroke
0.3511 0.26316 moveto
0.35707 0.26065 0.36239 0.25669 0.36842 0.25432 curveto
stroke
0.31579 0.27782 moveto
0.32701 0.27178 0.33935 0.26809 0.3511 0.26316 curveto
stroke
0.31579 0.31259 moveto
0.3327 0.30163 0.35018 0.29141 0.36842 0.28284 curveto
stroke
0.35446 0.31579 moveto
0.35913 0.31311 0.36367 0.3102 0.36842 0.30765 curveto
stroke
0.31579 0.3409 moveto
0.32758 0.33103 0.34113 0.32344 0.35446 0.31579 curveto
stroke
0.31591 0.36842 moveto
0.33103 0.35274 0.35004 0.34122 0.36842 0.32954 curveto
stroke
0.34354 0.36842 moveto
0.35104 0.36133 0.36022 0.35626 0.36842 0.35 curveto
stroke
0.31579 0.36858 moveto
0.31584 0.36853 0.31587 0.36847 0.31591 0.36842 curveto
stroke
0.31579 0.40429 moveto
0.32303 0.39102 0.33255 0.37881 0.34354 0.36842 curveto
stroke
0.32792 0.42105 moveto
0.33576 0.40114 0.35265 0.38569 0.36842 0.37121 curveto
stroke
0.35077 0.42105 moveto
0.35429 0.41241 0.36315 0.40703 0.36842 0.39933 curveto
stroke
0.32404 0.47368 moveto
0.31942 0.45671 0.32147 0.43742 0.32792 0.42105 curveto
stroke
0.34816 0.47368 moveto
0.34248 0.45706 0.34414 0.43732 0.35077 0.42105 curveto
stroke
0.31579 0.50215 moveto
0.32096 0.5108 0.32641 0.51964 0.33396 0.52632 curveto
stroke
0.36648 0.52632 moveto
0.34823 0.51309 0.32996 0.49543 0.32404 0.47368 curveto
stroke
0.36842 0.49851 moveto
0.3618 0.49013 0.35162 0.48379 0.34816 0.47368 curveto
stroke
0.31579 0.56649 moveto
0.32369 0.57144 0.3323 0.57519 0.34084 0.57895 curveto
stroke
0.31579 0.53862 moveto
0.33092 0.55197 0.34992 0.56048 0.36842 0.56854 curveto
stroke
0.36842 0.54804 moveto
0.35661 0.54134 0.34413 0.53531 0.33396 0.52632 curveto
stroke
0.36842 0.52754 moveto
0.3678 0.5271 0.3671 0.52676 0.36648 0.52632 curveto
stroke
0.31579 0.6282 moveto
0.32008 0.62965 0.3246 0.63031 0.32894 0.63158 curveto
stroke
0.31579 0.59649 moveto
0.33265 0.60436 0.35051 0.61006 0.36842 0.61509 curveto
stroke
0.36842 0.59087 moveto
0.35896 0.58759 0.35001 0.58298 0.34084 0.57895 curveto
stroke
0.31579 0.67795 moveto
0.32963 0.68117 0.34391 0.68204 0.35795 0.68421 curveto
stroke
0.36842 0.64461 moveto
0.35486 0.64174 0.34225 0.63546 0.32894 0.63158 curveto
stroke
0.36842 0.68699 moveto
0.36485 0.68648 0.36152 0.68476 0.35795 0.68421 curveto
stroke
0.37296 0.21053 moveto
0.38951 0.2055 0.40425 0.19517 0.42105 0.19106 curveto
stroke
0.36842 0.21162 moveto
0.36991 0.21115 0.37147 0.21098 0.37296 0.21053 curveto
stroke
0.36842 0.25432 moveto
0.38596 0.24743 0.40299 0.2391 0.42105 0.23374 curveto
stroke
0.36842 0.28284 moveto
0.38522 0.27494 0.40342 0.27042 0.42105 0.26461 curveto
stroke
0.36842 0.30765 moveto
0.38542 0.29855 0.40303 0.29051 0.42105 0.28366 curveto
stroke
0.39445 0.31579 moveto
0.40332 0.31142 0.41195 0.30654 0.42105 0.30271 curveto
stroke
0.36842 0.32954 moveto
0.3767 0.32428 0.38565 0.32013 0.39445 0.31579 curveto
stroke
0.36842 0.35 moveto
0.38436 0.33784 0.40289 0.32939 0.42105 0.32089 curveto
stroke
0.37101 0.36842 moveto
0.38583 0.3555 0.4038 0.34661 0.42105 0.33719 curveto
stroke
0.39712 0.36842 moveto
0.40453 0.36263 0.41309 0.35849 0.42105 0.35348 curveto
stroke
0.36842 0.37121 moveto
0.36936 0.37035 0.37006 0.36926 0.37101 0.36842 curveto
stroke
0.36842 0.39933 moveto
0.37636 0.38773 0.38603 0.37707 0.39712 0.36842 curveto
stroke
0.37354 0.42105 moveto
0.38255 0.39973 0.40237 0.38408 0.42105 0.37041 curveto
stroke
0.3724 0.47368 moveto
0.36565 0.45748 0.36671 0.43722 0.37354 0.42105 curveto
stroke
0.36842 0.49851 moveto
0.37734 0.50981 0.38881 0.51944 0.40146 0.52632 curveto
stroke
0.42105 0.51662 moveto
0.40218 0.50605 0.38071 0.49365 0.3724 0.47368 curveto
stroke
0.36842 0.56854 moveto
0.37884 0.57307 0.38995 0.57588 0.40089 0.57895 curveto
stroke
0.36842 0.54804 moveto
0.38473 0.55728 0.40301 0.56275 0.42105 0.56783 curveto
stroke
0.36842 0.52754 moveto
0.38416 0.53869 0.40285 0.5452 0.42105 0.5516 curveto
stroke
0.42105 0.53537 moveto
0.41443 0.53256 0.40778 0.52975 0.40146 0.52632 curveto
stroke
0.36842 0.61509 moveto
0.38561 0.61992 0.4034 0.62234 0.42105 0.62501 curveto
stroke
0.36842 0.59087 moveto
0.3856 0.59681 0.40321 0.60166 0.42105 0.60512 curveto
stroke
0.42105 0.58522 moveto
0.41419 0.58367 0.40767 0.58085 0.40089 0.57895 curveto
stroke
0.36842 0.64461 moveto
0.3859 0.64832 0.40331 0.6526 0.42105 0.65471 curveto
stroke
0.36842 0.68699 moveto
0.38604 0.68949 0.40331 0.69457 0.42105 0.69592 curveto
stroke
0.42105 0.19106 moveto
0.43862 0.18676 0.45589 0.18116 0.47368 0.17792 curveto
stroke
0.42105 0.23374 moveto
0.43834 0.22862 0.45604 0.22496 0.47368 0.22122 curveto
stroke
0.42661 0.26316 moveto
0.44246 0.25816 0.45751 0.25055 0.47368 0.24673 curveto
stroke
0.42105 0.26461 moveto
0.42287 0.26401 0.42478 0.26373 0.42661 0.26316 curveto
stroke
0.42105 0.28366 moveto
0.43809 0.27717 0.45603 0.2733 0.47368 0.26876 curveto
stroke
0.42105 0.30271 moveto
0.43816 0.2955 0.45583 0.28958 0.47368 0.28449 curveto
stroke
0.4337 0.31579 moveto
0.44692 0.31033 0.46002 0.30443 0.47368 0.30022 curveto
stroke
0.42105 0.32089 moveto
0.42517 0.31897 0.4295 0.31752 0.4337 0.31579 curveto
stroke
0.42105 0.33719 moveto
0.43766 0.32812 0.45571 0.32184 0.47368 0.31593 curveto
stroke
0.42105 0.35348 moveto
0.43732 0.34324 0.45568 0.33664 0.47368 0.3299 curveto
stroke
0.42343 0.36842 moveto
0.43869 0.35772 0.45651 0.35114 0.47368 0.34388 curveto
stroke
0.42105 0.37041 moveto
0.42189 0.3698 0.42258 0.36901 0.42343 0.36842 curveto
stroke
0.42105 0.51662 moveto
0.42772 0.52036 0.43465 0.52369 0.44182 0.52632 curveto
stroke
0.42105 0.56783 moveto
0.43821 0.57267 0.45598 0.5752 0.47368 0.57722 curveto
stroke
0.42105 0.5516 moveto
0.43801 0.55756 0.4559 0.56074 0.47368 0.56339 curveto
stroke
0.42105 0.53537 moveto
0.43779 0.54245 0.45581 0.54626 0.47368 0.54955 curveto
stroke
0.47368 0.53571 moveto
0.46287 0.53334 0.45222 0.53013 0.44182 0.52632 curveto
stroke
0.42105 0.62501 moveto
0.43846 0.62765 0.4561 0.62853 0.47368 0.62948 curveto
stroke
0.42105 0.60512 moveto
0.43842 0.60848 0.45605 0.61053 0.47368 0.61191 curveto
stroke
0.42105 0.58522 moveto
0.43842 0.58915 0.45596 0.59262 0.47368 0.59433 curveto
stroke
0.42105 0.65471 moveto
0.43854 0.65678 0.45609 0.65851 0.47368 0.65921 curveto
stroke
0.42105 0.69592 moveto
0.43859 0.69725 0.4561 0.69919 0.47368 0.69949 curveto
stroke
0.47368 0.17792 moveto
0.49114 0.17474 0.50871 0.17223 0.52632 0.17004 curveto
stroke
0.47368 0.22122 moveto
0.49103 0.21754 0.50876 0.21604 0.52632 0.21361 curveto
stroke
0.47368 0.24673 moveto
0.49114 0.24262 0.50859 0.23829 0.52632 0.2356 curveto
stroke
0.50444 0.26316 moveto
0.51182 0.26172 0.51888 0.25877 0.52632 0.25758 curveto
stroke
0.47368 0.26876 moveto
0.48378 0.26617 0.49421 0.26514 0.50444 0.26316 curveto
stroke
0.47368 0.28449 moveto
0.49092 0.27958 0.50866 0.27662 0.52632 0.27358 curveto
stroke
0.47368 0.30022 moveto
0.49093 0.2949 0.50857 0.29081 0.52632 0.28755 curveto
stroke
0.47419 0.31579 moveto
0.49131 0.31019 0.50863 0.30495 0.52632 0.30151 curveto
stroke
0.52517 0.31579 moveto
0.52556 0.31571 0.52593 0.31555 0.52632 0.31548 curveto
stroke
0.47368 0.31593 moveto
0.47385 0.31587 0.47402 0.31584 0.47419 0.31579 curveto
stroke
0.47368 0.3299 moveto
0.49035 0.32367 0.50774 0.31938 0.52517 0.31579 curveto
stroke
0.47368 0.34388 moveto
0.49053 0.33676 0.50847 0.3324 0.52632 0.32841 curveto
stroke
0.47368 0.57722 moveto
0.48535 0.57856 0.49714 0.57858 0.50888 0.57895 curveto
stroke
0.47368 0.56339 moveto
0.49108 0.56598 0.50873 0.56691 0.52632 0.56703 curveto
stroke
0.47368 0.54955 moveto
0.49101 0.55273 0.5087 0.55399 0.52632 0.55433 curveto
stroke
0.47368 0.53571 moveto
0.49093 0.53948 0.50867 0.54107 0.52632 0.54164 curveto
stroke
0.47368 0.62948 moveto
0.4912 0.63044 0.50878 0.63052 0.52632 0.63006 curveto
stroke
0.47368 0.61191 moveto
0.49118 0.61328 0.50877 0.61367 0.52632 0.61336 curveto
stroke
0.47368 0.59433 moveto
0.49116 0.59603 0.50876 0.59686 0.52632 0.59667 curveto
stroke
0.52632 0.57998 moveto
0.52049 0.58001 0.5147 0.57913 0.50888 0.57895 curveto
stroke
0.47368 0.65921 moveto
0.49121 0.65991 0.50878 0.65998 0.52632 0.65944 curveto
stroke
0.47368 0.69949 moveto
0.49123 0.69979 0.50878 0.69934 0.52632 0.69868 curveto
stroke
0.52632 0.17004 moveto
0.54379 0.16787 0.56138 0.16682 0.57895 0.16559 curveto
stroke
0.56357 0.21053 moveto
0.56874 0.21006 0.57377 0.20844 0.57895 0.20807 curveto
stroke
0.52632 0.21361 moveto
0.53866 0.2119 0.55116 0.21164 0.56357 0.21053 curveto
stroke
0.52632 0.2356 moveto
0.54377 0.23295 0.56134 0.231 0.57895 0.22971 curveto
stroke
0.52632 0.25758 moveto
0.54381 0.25478 0.56127 0.25137 0.57895 0.25008 curveto
stroke
0.52632 0.27358 moveto
0.54371 0.27059 0.56135 0.26921 0.57895 0.26793 curveto
stroke
0.52632 0.28755 moveto
0.54369 0.28435 0.56132 0.28252 0.57895 0.28127 curveto
stroke
0.52632 0.30151 moveto
0.54369 0.29814 0.5613 0.29584 0.57895 0.2946 curveto
stroke
0.52632 0.31548 moveto
0.54368 0.31194 0.56127 0.30916 0.57895 0.30794 curveto
stroke
0.52632 0.32841 moveto
0.5436 0.32455 0.56127 0.32226 0.57895 0.32108 curveto
stroke
0.54067 0.57895 moveto
0.55344 0.57851 0.56625 0.57832 0.57895 0.57688 curveto
stroke
0.52632 0.56703 moveto
0.54388 0.56715 0.5615 0.56639 0.57895 0.56434 curveto
stroke
0.52632 0.55433 moveto
0.54388 0.55467 0.56151 0.55391 0.57895 0.5518 curveto
stroke
0.52632 0.54164 moveto
0.54387 0.54219 0.56152 0.54144 0.57895 0.53926 curveto
stroke
0.52632 0.63006 moveto
0.54388 0.6296 0.56147 0.62908 0.57895 0.62729 curveto
stroke
0.52632 0.61336 moveto
0.54389 0.61305 0.56147 0.61211 0.57895 0.61024 curveto
stroke
0.52632 0.59667 moveto
0.5439 0.59648 0.56147 0.59512 0.57895 0.59319 curveto
stroke
0.52632 0.57998 moveto
0.53111 0.57995 0.53587 0.57911 0.54067 0.57895 curveto
stroke
0.52632 0.65944 moveto
0.5439 0.6589 0.56144 0.65739 0.57895 0.65568 curveto
stroke
0.52632 0.69868 moveto
0.54393 0.69802 0.56139 0.69504 0.57895 0.69346 curveto
stroke
0.57895 0.16559 moveto
0.59646 0.16437 0.61403 0.16401 0.63158 0.16372 curveto
stroke
0.57895 0.20807 moveto
0.59648 0.2068 0.614 0.205 0.63158 0.20489 curveto
stroke
0.57895 0.22971 moveto
0.59645 0.22844 0.61403 0.22792 0.63158 0.22803 curveto
stroke
0.57895 0.25008 moveto
0.59645 0.2488 0.61403 0.24803 0.63158 0.24831 curveto
stroke
0.57895 0.26793 moveto
0.59645 0.26666 0.61404 0.26637 0.63158 0.26683 curveto
stroke
0.57895 0.28127 moveto
0.59645 0.28002 0.61405 0.27978 0.63158 0.28053 curveto
stroke
0.57895 0.2946 moveto
0.59645 0.29337 0.61406 0.29322 0.63158 0.29423 curveto
stroke
0.57895 0.30794 moveto
0.59645 0.30673 0.61408 0.30667 0.63158 0.30794 curveto
stroke
0.57895 0.32108 moveto
0.59645 0.31991 0.61411 0.32003 0.63158 0.32167 curveto
stroke
0.57895 0.57688 moveto
0.59658 0.57489 0.61428 0.57281 0.63158 0.56887 curveto
stroke
0.57895 0.56434 moveto
0.59661 0.56227 0.61431 0.55981 0.63158 0.55554 curveto
stroke
0.57895 0.5518 moveto
0.59665 0.54966 0.61434 0.54679 0.63158 0.54221 curveto
stroke
0.57895 0.53926 moveto
0.59669 0.53705 0.61437 0.53376 0.63158 0.52889 curveto
stroke
0.57895 0.62729 moveto
0.59653 0.62549 0.6142 0.62413 0.63158 0.62095 curveto
stroke
0.57895 0.61024 moveto
0.59659 0.60836 0.61417 0.60568 0.63158 0.60223 curveto
stroke
0.57895 0.59319 moveto
0.59668 0.59124 0.61412 0.58717 0.63158 0.58351 curveto
stroke
0.62534 0.68421 moveto
0.62741 0.68393 0.62951 0.68395 0.63158 0.68365 curveto
stroke
0.57895 0.65568 moveto
0.59663 0.65395 0.61405 0.65021 0.63158 0.6473 curveto
stroke
0.57895 0.69346 moveto
0.59465 0.69204 0.60972 0.68633 0.62534 0.68421 curveto
stroke
0.63158 0.16372 moveto
0.64912 0.16342 0.66668 0.16349 0.68421 0.16418 curveto
stroke
0.63158 0.20489 moveto
0.64914 0.20478 0.66669 0.20596 0.68421 0.20708 curveto
stroke
0.63158 0.22803 moveto
0.64914 0.22815 0.66672 0.22886 0.68421 0.2305 curveto
stroke
0.63158 0.24831 moveto
0.64917 0.2486 0.66673 0.2502 0.68421 0.25221 curveto
stroke
0.63158 0.26683 moveto
0.64916 0.26729 0.6668 0.26819 0.68421 0.27067 curveto
stroke
0.63158 0.28053 moveto
0.64919 0.28129 0.66685 0.28271 0.68421 0.28581 curveto
stroke
0.63158 0.29423 moveto
0.64924 0.29526 0.66691 0.29728 0.68421 0.30095 curveto
stroke
0.63158 0.30794 moveto
0.64868 0.30917 0.66572 0.31185 0.68241 0.31579 curveto
stroke
0.68421 0.31611 moveto
0.68362 0.31597 0.683 0.31593 0.68241 0.31579 curveto
stroke
0.63158 0.32167 moveto
0.64938 0.32334 0.66722 0.32648 0.68421 0.33205 curveto
stroke
0.67854 0.52632 moveto
0.68042 0.52554 0.68235 0.52487 0.68421 0.52405 curveto
stroke
0.63917 0.52632 moveto
0.65464 0.52159 0.66989 0.51579 0.68421 0.50828 curveto
stroke
0.64681 0.57895 moveto
0.6593 0.576 0.67203 0.57386 0.68421 0.56984 curveto
stroke
0.63158 0.56887 moveto
0.6493 0.56483 0.66715 0.56088 0.68421 0.5546 curveto
stroke
0.63158 0.55554 moveto
0.6494 0.55113 0.66719 0.54622 0.68421 0.53936 curveto
stroke
0.63158 0.54221 moveto
0.64755 0.53797 0.66327 0.53263 0.67854 0.52632 curveto
stroke
0.63158 0.52889 moveto
0.63415 0.52816 0.63662 0.5271 0.63917 0.52632 curveto
stroke
0.63158 0.62095 moveto
0.64921 0.61773 0.66692 0.61468 0.68421 0.60994 curveto
stroke
0.63158 0.60223 moveto
0.64942 0.59869 0.66678 0.59303 0.68421 0.58784 curveto
stroke
0.63158 0.58351 moveto
0.63677 0.58242 0.64165 0.58017 0.64681 0.57895 curveto
stroke
0.63158 0.68365 moveto
0.6491 0.68115 0.66687 0.68017 0.68421 0.67664 curveto
stroke
0.63158 0.6473 moveto
0.64956 0.64432 0.66648 0.63672 0.68421 0.63252 curveto
stroke
0.68421 0.16418 moveto
0.70177 0.16487 0.71936 0.16548 0.73684 0.16729 curveto
stroke
0.68421 0.20708 moveto
0.69209 0.20758 0.69978 0.20977 0.70764 0.21053 curveto
stroke
0.73684 0.21303 moveto
0.72718 0.21161 0.71736 0.21146 0.70764 0.21053 curveto
stroke
0.68421 0.2305 moveto
0.70186 0.23215 0.71946 0.23457 0.73684 0.23803 curveto
stroke
0.68421 0.25221 moveto
0.702 0.25426 0.7194 0.25896 0.73684 0.26302 curveto
stroke
0.68421 0.27067 moveto
0.70192 0.27319 0.71972 0.27589 0.73684 0.28107 curveto
stroke
0.68421 0.28581 moveto
0.70202 0.28899 0.71986 0.29283 0.73684 0.29907 curveto
stroke
0.68421 0.30095 moveto
0.70092 0.3045 0.71745 0.30932 0.73325 0.31579 curveto
stroke
0.73684 0.31721 moveto
0.73566 0.3167 0.73444 0.31628 0.73325 0.31579 curveto
stroke
0.68421 0.31611 moveto
0.70256 0.32059 0.72072 0.32725 0.73684 0.33708 curveto
stroke
0.68421 0.33205 moveto
0.70265 0.33809 0.72206 0.34437 0.73684 0.35695 curveto
stroke
0.71257 0.52632 moveto
0.72088 0.5222 0.72909 0.51781 0.73684 0.51273 curveto
stroke
0.68421 0.52405 moveto
0.70266 0.5159 0.72114 0.50683 0.73684 0.49418 curveto
stroke
0.68421 0.50828 moveto
0.70249 0.49869 0.72217 0.49016 0.73684 0.47563 curveto
stroke
0.70666 0.57895 moveto
0.71671 0.57554 0.7271 0.57303 0.73684 0.56882 curveto
stroke
0.68421 0.56984 moveto
0.70201 0.56396 0.72005 0.55838 0.73684 0.55007 curveto
stroke
0.68421 0.5546 moveto
0.70221 0.54797 0.72003 0.54057 0.73684 0.53133 curveto
stroke
0.68421 0.53936 moveto
0.69386 0.53547 0.70325 0.53094 0.71257 0.52632 curveto
stroke
0.68678 0.63158 moveto
0.70345 0.62758 0.72058 0.6253 0.73684 0.61992 curveto
stroke
0.68421 0.60994 moveto
0.7021 0.60505 0.7195 0.59843 0.73684 0.59185 curveto
stroke
0.68421 0.58784 moveto
0.69192 0.58554 0.69904 0.58153 0.70666 0.57895 curveto
stroke
0.68421 0.67664 moveto
0.7018 0.67305 0.71953 0.66995 0.73684 0.66521 curveto
stroke
0.68421 0.63252 moveto
0.6851 0.63231 0.6859 0.63179 0.68678 0.63158 curveto
stroke
0.73684 0.16729 moveto
0.75443 0.16911 0.77207 0.17086 0.78947 0.17401 curveto
stroke
0.73684 0.21303 moveto
0.75445 0.21562 0.77225 0.21746 0.78947 0.22193 curveto
stroke
0.73684 0.23803 moveto
0.75472 0.24158 0.77219 0.24709 0.78947 0.25287 curveto
stroke
0.73684 0.26302 moveto
0.73699 0.26306 0.73712 0.26312 0.73726 0.26316 curveto
stroke
0.78947 0.27854 moveto
0.77284 0.27128 0.75493 0.26729 0.73726 0.26316 curveto
stroke
0.73684 0.28107 moveto
0.75486 0.28652 0.77302 0.29242 0.78947 0.30157 curveto
stroke
0.73684 0.29907 moveto
0.74962 0.30377 0.7622 0.30917 0.7741 0.31579 curveto
stroke
0.78947 0.32603 moveto
0.78454 0.32235 0.77948 0.31878 0.7741 0.31579 curveto
stroke
0.73684 0.31721 moveto
0.75626 0.32565 0.77578 0.33662 0.78947 0.35277 curveto
stroke
0.73684 0.33708 moveto
0.75168 0.34613 0.76855 0.35418 0.77852 0.36842 curveto
stroke
0.73684 0.35695 moveto
0.74169 0.36107 0.74794 0.36361 0.7521 0.36842 curveto
stroke
0.78947 0.40824 moveto
0.78915 0.39448 0.78642 0.3797 0.77852 0.36842 curveto
stroke
0.77017 0.42105 moveto
0.77258 0.40266 0.76423 0.38245 0.7521 0.36842 curveto
stroke
0.7874 0.47368 moveto
0.78831 0.47259 0.7886 0.47108 0.78947 0.46996 curveto
stroke
0.76338 0.47368 moveto
0.77539 0.46043 0.78573 0.4443 0.78947 0.42681 curveto
stroke
0.73936 0.47368 moveto
0.75358 0.45917 0.76753 0.44121 0.77017 0.42105 curveto
stroke
0.77878 0.52632 moveto
0.78244 0.52392 0.78597 0.52133 0.78947 0.51871 curveto
stroke
0.74569 0.52632 moveto
0.76119 0.51733 0.77661 0.50763 0.78947 0.49518 curveto
stroke
0.73684 0.51273 moveto
0.75464 0.50105 0.77379 0.49006 0.7874 0.47368 curveto
stroke
0.73684 0.49418 moveto
0.74554 0.48716 0.75587 0.48196 0.76338 0.47368 curveto
stroke
0.73684 0.47563 moveto
0.73759 0.47488 0.73861 0.47444 0.73936 0.47368 curveto
stroke
0.76359 0.57895 moveto
0.7722 0.57523 0.78119 0.57231 0.78947 0.56791 curveto
stroke
0.73684 0.56882 moveto
0.75477 0.56108 0.77295 0.55351 0.78947 0.54311 curveto
stroke
0.73684 0.55007 moveto
0.75124 0.54295 0.76535 0.53513 0.77878 0.52632 curveto
stroke
0.73684 0.53133 moveto
0.73981 0.5297 0.74276 0.52802 0.74569 0.52632 curveto
stroke
0.73684 0.61992 moveto
0.75462 0.61402 0.77237 0.60784 0.78947 0.60021 curveto
stroke
0.73684 0.59185 moveto
0.7461 0.58834 0.7545 0.58287 0.76359 0.57895 curveto
stroke
0.73684 0.66521 moveto
0.75483 0.66028 0.77188 0.65238 0.78947 0.64619 curveto
stroke
0.78947 0.17401 moveto
0.80721 0.17722 0.82474 0.18153 0.84211 0.18635 curveto
stroke
0.78947 0.22193 moveto
0.80727 0.22656 0.82514 0.23132 0.84211 0.2384 curveto
stroke
0.78947 0.25287 moveto
0.79771 0.25562 0.80535 0.25992 0.8134 0.26316 curveto
stroke
0.84211 0.27581 moveto
0.83304 0.2706 0.8231 0.26706 0.8134 0.26316 curveto
stroke
0.78947 0.27854 moveto
0.80783 0.28655 0.82646 0.29502 0.84211 0.30753 curveto
stroke
0.78947 0.30157 moveto
0.79758 0.30609 0.80586 0.3104 0.81341 0.31579 curveto
stroke
0.84211 0.34452 moveto
0.83428 0.33348 0.82444 0.32364 0.81341 0.31579 curveto
stroke
0.78947 0.32603 moveto
0.80549 0.33797 0.82315 0.35043 0.83183 0.36842 curveto
stroke
0.78947 0.35277 moveto
0.79424 0.35839 0.80141 0.36204 0.80511 0.36842 curveto
stroke
0.83955 0.42105 moveto
0.8425 0.40357 0.83953 0.38439 0.83183 0.36842 curveto
stroke
0.81608 0.42105 moveto
0.81886 0.40335 0.81411 0.38392 0.80511 0.36842 curveto
stroke
0.78947 0.40824 moveto
0.78958 0.41263 0.79325 0.4167 0.79261 0.42105 curveto
stroke
0.83981 0.47368 moveto
0.84083 0.47227 0.84114 0.47044 0.84211 0.46899 curveto
stroke
0.8135 0.47368 moveto
0.82555 0.45825 0.83629 0.44035 0.83955 0.42105 curveto
stroke
0.78947 0.46996 moveto
0.80081 0.45527 0.81319 0.43938 0.81608 0.42105 curveto
stroke
0.78947 0.42681 moveto
0.78993 0.42467 0.79229 0.42321 0.79261 0.42105 curveto
stroke
0.81491 0.52632 moveto
0.82454 0.51926 0.83382 0.51162 0.84211 0.50304 curveto
stroke
0.78947 0.51871 moveto
0.8075 0.50522 0.82659 0.49191 0.83981 0.47368 curveto
stroke
0.78947 0.49518 moveto
0.7972 0.48771 0.80689 0.48216 0.8135 0.47368 curveto
stroke
0.82744 0.57895 moveto
0.8323 0.57637 0.83739 0.57422 0.84211 0.57138 curveto
stroke
0.78947 0.56791 moveto
0.80759 0.5583 0.82582 0.54853 0.84211 0.53607 curveto
stroke
0.78947 0.54311 moveto
0.79807 0.53769 0.80671 0.53232 0.81491 0.52632 curveto
stroke
0.8182 0.63158 moveto
0.82608 0.62851 0.83442 0.62662 0.84211 0.62311 curveto
stroke
0.78947 0.60021 moveto
0.80272 0.5943 0.81463 0.58575 0.82744 0.57895 curveto
stroke
0.78947 0.64619 moveto
0.79961 0.64263 0.80819 0.63548 0.8182 0.63158 curveto
stroke
0.84211 0.18635 moveto
0.86042 0.19143 0.87708 0.20123 0.89474 0.20827 curveto
stroke
0.84211 0.2384 moveto
0.8582 0.24512 0.87326 0.25417 0.88821 0.26316 curveto
stroke
0.89474 0.26716 moveto
0.89261 0.26575 0.8904 0.26447 0.88821 0.26316 curveto
stroke
0.84211 0.27581 moveto
0.86093 0.28662 0.88015 0.29808 0.89474 0.31416 curveto
stroke
0.84211 0.30753 moveto
0.84573 0.31042 0.84984 0.3127 0.85329 0.31579 curveto
stroke
0.89159 0.36842 moveto
0.88489 0.34778 0.86945 0.33027 0.85329 0.31579 curveto
stroke
0.84211 0.34452 moveto
0.84797 0.3528 0.85717 0.35901 0.86095 0.36842 curveto
stroke
0.89474 0.42023 moveto
0.8917 0.43726 0.89693 0.38488 0.89159 0.36842 curveto
stroke
0.86693 0.42105 moveto
0.86999 0.40366 0.86754 0.3848 0.86095 0.36842 curveto
stroke
0.87154 0.47368 moveto
0.88234 0.45788 0.89123 0.43998 0.89474 0.42117 curveto
stroke
0.84211 0.46899 moveto
0.85207 0.454 0.8638 0.43877 0.86693 0.42105 curveto
stroke
0.85524 0.52632 moveto
0.8696 0.51452 0.88379 0.502 0.89474 0.48699 curveto
stroke
0.84211 0.50304 moveto
0.85173 0.49307 0.86373 0.48513 0.87154 0.47368 curveto
stroke
0.84211 0.57138 moveto
0.86029 0.56041 0.87875 0.54946 0.89474 0.53549 curveto
stroke
0.84211 0.53607 moveto
0.84644 0.53275 0.85103 0.52978 0.85524 0.52632 curveto
stroke
0.84211 0.62311 moveto
0.86001 0.61492 0.87789 0.60651 0.89474 0.59633 curveto
stroke
0.89474 0.20827 moveto
0.89627 0.20888 0.8976 0.20991 0.89913 0.21053 curveto
stroke
0.94737 0.23215 moveto
0.93254 0.22264 0.91545 0.21717 0.89913 0.21053 curveto
stroke
0.89474 0.26716 moveto
0.91404 0.27995 0.93376 0.29377 0.94737 0.3125 curveto
stroke
0.89474 0.31416 moveto
0.89529 0.31477 0.89603 0.31518 0.89657 0.31579 curveto
stroke
0.92984 0.36842 moveto
0.92457 0.34835 0.91037 0.3313 0.89657 0.31579 curveto
stroke
0.93146 0.42105 moveto
0.93476 0.40381 0.93429 0.3854 0.92984 0.36842 curveto
stroke
0.89474 0.42023 moveto
0.89479 0.41996 0.89485 0.42078 0.8948 0.42105 curveto
stroke
0.90702 0.47368 moveto
0.91741 0.45737 0.92782 0.44005 0.93146 0.42105 curveto
stroke
0.89474 0.42117 moveto
0.89474 0.42113 0.89479 0.4211 0.8948 0.42105 curveto
stroke
0.90599 0.52632 moveto
0.92127 0.51216 0.93639 0.49719 0.94737 0.47949 curveto
stroke
0.89474 0.48699 moveto
0.8983 0.48211 0.90378 0.47878 0.90702 0.47368 curveto
stroke
0.91984 0.57895 moveto
0.92914 0.57276 0.93884 0.56704 0.94737 0.55982 curveto
stroke
0.89474 0.53549 moveto
0.89838 0.5323 0.90244 0.5296 0.90599 0.52632 curveto
stroke
0.89474 0.59633 moveto
0.90345 0.59106 0.91137 0.58459 0.91984 0.57895 curveto
stroke
0.94737 0.23215 moveto
0.96194 0.2415 0.97617 0.25158 0.98905 0.26316 curveto
stroke
1 0.27473 moveto
0.99644 0.27078 0.99299 0.26671 0.98905 0.26316 curveto
stroke
0.94737 0.3125 moveto
0.94827 0.31374 0.94968 0.31454 0.95055 0.31579 curveto
stroke
0.97772 0.36842 moveto
0.97388 0.34905 0.96187 0.33197 0.95055 0.31579 curveto
stroke
0.97738 0.42105 moveto
0.98087 0.40386 0.98114 0.38563 0.97772 0.36842 curveto
stroke
0.95239 0.47368 moveto
0.96226 0.45696 0.97351 0.44008 0.97738 0.42105 curveto
stroke
0.98552 0.52632 moveto
0.99096 0.52075 0.99516 0.51409 1 0.50799 curveto
stroke
0.94737 0.47949 moveto
0.94872 0.47731 0.95109 0.47589 0.95239 0.47368 curveto
stroke
0.94737 0.55982 moveto
0.96028 0.54888 0.97369 0.53842 0.98552 0.52632 curveto
stroke
0.0 setgray
[(/iy/)] 0.11  0.8525 0 1 Mshowa
[(/ih/)] 0.12  0.1525 0 1 Mshowa
[(/eh/)] 0.92 0.3225 0 1 Mshowa

% End of Graphics
MathPictureEnd
%%EPS Trailer
end

%%EndDocument
 GE /Times-Bold SF
17323 30525 MT
(Figure 3-7:)SH
/Times-Roman SF
23096 XM
(Distributions of the front-vowels first and second formants:)SH
23072 31721 MT
(\050a\051 mean distributions, and \050b\051 data distributions for)SH
/Symbol SF
46137 XM
(m)SH
/Times-Roman SF
47046 XM
(=)SH
/Symbol SF
47941 XM
(m)SH
/Times-Roman SF
49025 XM
(.)SH
9 /Times-Italic AF
48575 32081 MT
(o)SH
11 /Times-Roman AF
13300 34706 MT
(Using the expressions for mean-square error)
18 W( from Chapter 2, the learning curves as specified by)19 W
10800 36445 MT
(Equation \0502.61\051 and the front vowel statistics in Appendix)
58 W( D are shown in Figure 3-8.  The statistics)57 W
10800 38184 MT
(were generated with feature data from 179 speakers, 10 sentences per speaker, and a total)
125 W( of 6301)126 W
10800 39923 MT
(tokens. The)
301 W( average)
13 W( number of tokens per sentence is therefore approximately 3.5, so it appears from)12 W
10800 41662 MT
(the graph that after 10 sentences \05035 tokens\051 the EMAP or LMS-C mean-square estimation error)186 W
10800 43401 MT
(should be less than)
222 W( one-third that of the unadapted mean.  This assumes that the data obey the)221 W
10800 45140 MT
(gaussian assumption upon which the theoretical analysis is based.  Also, it should be noted)
55 W( that with)56 W
10800 46879 MT
(the dogmatism of the data near 2.0, the difference between the adapted and unadapted means)
41 W( may be)40 W
10800 48618 MT
(rather small, and \050from the analysis above\051 the percentage reduction)
111 W( in error rate should tend to be)112 W
10800 50357 MT
(less than that obtained with the)SH
9 SS 
24732 XM
(FEATURE)SH
11 SS 
29057 XM
(system.)SH
13300 53342 MT
(To better predict what effect adaptation has)
101 W( on front-vowel classification rate given normally-)100 W
10800 55081 MT
(distributed data, an empirical test was performed)
55 W( using the actual mean vectors of 9 speakers chosen)56 W
10800 56820 MT
(at random from the set of 179.  Five-hundred samples of computer-generated data were)
145 W( generated)144 W
10800 58559 MT
(using ML estimates of the test speakers' mean vectors, and)
92 W( additional data were generated as adap-)93 W
9 SS 
43925 59935 MT
(10)SH
11 SS 
10800 60298 MT
(tation data.)
147 W( The)
568 W( 500 samples were classified after both ML and EMAP)146 W
45246 XM
(mean vector adaptation)146 W
10800 62037 MT
(given perfect feedback)
31 W( of class membership.  The 9-speaker average error rates are plotted versus the)32 W
10800 63776 MT
(number of training tokens in Figure 3-9.  The unadapted error rate was 39.5%,)
42 W( and the asymptote for)41 W
10800 65515 MT
(the adapted means is around 26%, or a reduction of approximately 34%.  More realistically, the)198 W
10800 67254 MT
(EMAP error rate after 50 observations \050closest to the number of)
62 W( front-vowel tokens in 10 sentences\051)61 W
10800 50 10800 70172 UL
7 SS 
11700 71673 MT
(10)SH
9 SS 
12400 72000 MT
(The LMS-C algorithm had not been fully developed at the time of the)SH
7 SS 
37725 XM
(ANGEL)SH
9 SS 
40321 XM
(adaptation experiments.)SH
ES
%%Page: 62 63
BS
0 SI
10 /Times-Roman AF
54800 4286 MT
(62)SH
11 SS 
765 1000 0 18000 26248 GB 
%%BeginDocument: /usr0/rozzi/Documentation/PhDThesis/Chapter3/AngelPrMSE.eps
%!PS-Adobe-2.0 EPSF-1.2
%%BoundingBox: 0 0 400 249
%%Creator: Mathematica
%%Title: Clipboard
%%CreationDate: Never Never
%%EndComments
50 dict begin
/Mnodistort true def
/pageDashArray [4] def
/nullDashArray [] def

% Compute the minimum of two numbers.
/Mmin {         % p q Mmin min(p,q)
        2 copy          % p q p q
        gt              % p q p>q?
        { exch } if     % min(p,q) max(p,q)
        pop             % min(p,q)
} bind def


% Compute the maximum of two numbers.
/Mmax {         % p q Mmax max(p,q)
        2 copy          % p q p q
        lt              % p q p<q?
        { exch } if     % max(p,q) min(p,q)
        pop             % max(p,q)
} bind def

/Mpstart {
    MathPictureStart
} bind def
/Mpend {
    MathPictureEnd
} bind def
/Mscale {
    0 1 0 1
    5 -1 roll
    MathScale
} bind def
/Plain
        /Courier findfont
def
/Bold
        /Courier-Bold findfont
def
/Italic
        /Courier-Oblique findfont
def
/MathPictureStart {
        gsave
        newpath
        /Mtmatrix
        matrix currentmatrix
        def
        Plain
        Mfontsize scalefont
        setfont
0 setgray 0 setlinewidth
} bind def
/MathPictureEnd {
        grestore
} bind def
/Mdot {
        moveto
        0 0 rlineto
        stroke
} def
/Mtetra {
        moveto
        lineto
        lineto
        lineto
        fill
} def
/Metetra {
        moveto
        lineto
        lineto
        lineto
        closepath
        gsave
        fill
        grestore
        0 setgray
        stroke
} def
/Mistroke {
        flattenpath
        0 0 0
        {
        4 2 roll
        pop pop
        }
        {
        4 -1 roll
        2 index
        sub dup mul
        4 -1 roll
        2 index
        sub dup mul
        add sqrt
        4 -1 roll
        add
        3 1 roll
        }
        {
        stop
        }
        {
        stop
        }
        pathforall
        pop pop
        currentpoint
        stroke
        moveto
        currentdash
        3 -1 roll
        add
        setdash
} def
/Mfstroke {
        stroke
        currentdash
        pop 0
        setdash
} def
/Msboxa {
        newpath
        5 -1 roll
        Mvboxa
        pop
        6 -1 roll
        5 -1 roll
        4 -1 roll
        Msboxa1
        5 -3 roll
        Msboxa1
        [
        7 -2 roll
        [ 2 index 2 index
        10 -1 roll
        9 -1 roll
        ]
        6 1 roll
        5 -2 roll
        ]
} bind def
        
/Msboxa1 {
        sub
        2 div
        dup
        2 index
        1 add
        mul
        3 -1 roll
        -1 add
        3 -1 roll
        mul
} bind def
/Mvboxa {
        gsave
        newpath
        [ true
        3 -1 roll
        {
        Mbbox
        5 -1 roll
        {
        0
        5 1 roll
        }
        {
        7 -1 roll
        exch sub
        (m) stringwidth pop
        .3 mul
        sub
        7 1 roll
        6 -1 roll
        4 -1 roll
        Mmin
        3 -1 roll
        5 index
        add
        5 -1 roll
        4 -1 roll
        Mmax
        4 -1 roll
        }
        ifelse
        false
        }
        forall
        { stop } if
        counttomark
        1 add
        4 roll
        ]
        grestore
} bind def
/Mbbox {
        0 0 moveto
        false charpath
        flattenpath
        pathbbox
        newpath
} bind def
/Mmin {
        2 copy
        gt
        { exch } if
        pop
} bind def
/Mmax {
        2 copy
        lt
        { exch } if
        pop
} bind def
/Mshowa {
        4 -2 roll
        moveto
        2 index
        Mtmatrix setmatrix
        Mvboxa
        7 1 roll
        6 -1 roll
        5 -1 roll
        4 -1 roll
        Mshowa1
        4 1 roll
        Mshowa1
        rmoveto
        currentpoint
        0 1
        4 index length
        -1 add
        {
        2 index
        4 index
        2 index
        get
        3 index
        add
        moveto
        4 index
        exch get
        show
        } for
        pop pop pop pop
        Mgmatrix setmatrix
} bind def
/Mshowa1 {
        2 copy
        add
        4 1 roll
        sub
        mul
        sub
        -2 div
} bind def
/MathScale {
        Mwidth
        Mheight
        Mlp
        translate
        scale
        /Mgmatrix
        matrix currentmatrix
        def
        /Msaveaa exch def
        /Msavebb exch def
        /Msavecc exch def
        /Msavedd exch def
} bind def
/Mlp {
        3 copy
        Mlpfirst
        {
        Mnodistort
        {
        Mmin
        dup
        } if
        4 index
        2 index
        2 index
        Mlprun
        11 index
        11 -1 roll
        10 -4 roll
        Mlp1
        8 index
        9 -5 roll
        Mlp1
        4 -1 roll
        and
        { exit } if
        3 -1 roll
        pop pop
        } loop
        exch
        3 1 roll
        7 -3 roll
        pop pop pop
} bind def
/Mlpfirst {
        3 -1 roll
        dup length
        2 copy
        -2 add
        get
        aload
        pop pop pop
        4 -2 roll
        -1 add
        get
        aload
        pop pop pop
        6 -1 roll
        3 -1 roll
        5 -1 roll
        sub
        dup /MsaveAx exch def
        div
        4 1 roll
        exch sub
        dup /MsaveAy exch def
        div
} bind def
/Mlprun {
        2 copy
        4 index
        0 get
        dup
        4 1 roll
        Mlprun1
        3 copy
        8 -2 roll
        9 -1 roll
        {
        3 copy
        Mlprun1
        3 copy
        11 -3 roll
        /gt Mlpminmax
        8 3 roll
        11 -3 roll
        /lt Mlpminmax
        8 3 roll
        } forall
        pop pop pop pop
        3 1 roll
        pop pop
        aload pop
        5 -1 roll
        aload pop
        exch
        6 -1 roll
        Mlprun2
        8 2 roll
        4 -1 roll
        Mlprun2
        6 2 roll
        3 -1 roll
        Mlprun2
        4 2 roll
        exch
        Mlprun2
        6 2 roll
} bind def
/Mlprun1 {
        aload pop
        exch
        6 -1 roll
        5 -1 roll
        mul add
        4 -2 roll
        mul
        3 -1 roll
        add
} bind def
/Mlprun2 {
        2 copy
        add 2 div
        3 1 roll
        exch sub
} bind def
/Mlpminmax {
        cvx
        2 index
        6 index
        2 index
        exec
        {
        7 -3 roll
        4 -1 roll
        } if
        1 index
        5 index
        3 -1 roll
        exec
        {
        4 1 roll
        pop
        5 -1 roll
        aload
        pop pop
        4 -1 roll
        aload pop
        [
        8 -2 roll
        pop
        5 -2 roll
        pop
        6 -2 roll
        pop
        5 -1 roll
        ]
        4 1 roll
        pop
        }
        {
        pop pop pop
        } ifelse
} bind def
/Mlp1 {
        5 index
        3 index sub
        5 index
        2 index mul
        1 index
        le
        1 index
        0 le
        or
        dup
        not
        {
        1 index
        3 index div
        .99999 mul
        8 -1 roll
        pop
        7 1 roll
        }
        if
        8 -1 roll
        2 div
        7 -2 roll
        pop sub
        5 index
        6 -3 roll
        pop pop
        mul sub
        exch
} bind def
/Mfontsize      12 def
/Mleft          0.000000 def
/Mbottom        249.000000 def
/Mwidth         400.000000 def
/Mheight        249.000000 def
/Courier findfont 12 scalefont setfont
%!
%%Creator: Mathematica
%%AspectRatio: 0.625 
MathPictureStart
% Scaling calculations
0.02381 0.0381 0.01488 0 [
[(MSE for ANGEL Front Vowel Statistics)] 0.5 0.63125 0 -1 Msboxa
[(15)] 0.21429 0.00238 0 1 Msboxa
[(30)] 0.40476 0.00238 0 1 Msboxa
[(45)] 0.59524 0.00238 0 1 Msboxa
[(60)] 0.78571 0.00238 0 1 Msboxa
[(75)] 0.97619 0.00238 0 1 Msboxa
[(n)] 1.00625 0.01488 -1 0 Msboxa
[(50)] 0.01131 0.11699 1 0 Msboxa
[(100)] 0.01131 0.2191 1 0 Msboxa
[(150)] 0.01131 0.3212 1 0 Msboxa
[(200)] 0.01131 0.42331 1 0 Msboxa
[(250)] 0.01131 0.52542 1 0 Msboxa
[(MSE / 1000)] 0.02381 0.63125 0 -1 Msboxa
[ -0.001 -0.001 0 0 ]
[ 1.001 0.626 0 0 ]
] MathScale
% Start of Graphics
1 setlinecap
1 setlinejoin
newpath
%%Object: Graphics
[ ] 0 setdash
0 setgray
0 setgray
%[(MSE for ANGEL Front Vowel Statistics)] 0.5 0.63125 0 -1 Mshowa
gsave
gsave
0.002 setlinewidth
0 0.01488 moveto
1 0.01488 lineto
stroke
0.21429 0.00863 moveto
0.21429 0.02113 lineto
stroke
0 setgray
%[(EMAP)] 0.21429 0.12 0 1 Mshowa
%[(LMS-C)] 0.21429 0.22238 0 1 Mshowa
%[(ML)] 0.21429 0.50238 0 1 Mshowa
[(15)] 0.21429 0.00238 0 1 Mshowa
0.40476 0.00863 moveto
0.40476 0.02113 lineto
stroke
0 setgray
[(30)] 0.40476 0.00238 0 1 Mshowa
0.59524 0.00863 moveto
0.59524 0.02113 lineto
stroke
0 setgray
[(45)] 0.59524 0.00238 0 1 Mshowa
0.78571 0.00863 moveto
0.78571 0.02113 lineto
stroke
0 setgray
[(60)] 0.78571 0.00238 0 1 Mshowa
0.97619 0.00863 moveto
0.97619 0.02113 lineto
stroke
0 setgray
[(75)] 0.97619 0.00238 0 1 Mshowa
0 setgray
[(k)] 1.00625 0.01488 -1 0 Mshowa
0.02381 0 moveto
0.02381 0.625 lineto
stroke
0.01756 0.11699 moveto
0.03006 0.11699 lineto
stroke
0 setgray
[(50)] 0.01131 0.11699 1 0 Mshowa
0.01756 0.2191 moveto
0.03006 0.2191 lineto
stroke
0 setgray
[(100)] 0.01131 0.2191 1 0 Mshowa
0.01756 0.3212 moveto
0.03006 0.3212 lineto
stroke
0 setgray
[(150)] 0.01131 0.3212 1 0 Mshowa
0.01756 0.42331 moveto
0.03006 0.42331 lineto
stroke
0 setgray
[(200)] 0.01131 0.42331 1 0 Mshowa
0.01756 0.52542 moveto
0.03006 0.52542 lineto
stroke
0 setgray
[(250)] 0.01131 0.52542 1 0 Mshowa
0 setgray
[(MSE/1000)] 0.02381 0.63125 0 -1 Mshowa
grestore
grestore


% legend and panel label
[(ML)] 0.7 0.43125 0 -1 Mshowa
[(EMAP)] 0.73 0.38125 0 -1 Mshowa
[(LMS-C)] 0.74 0.33125 0 -1 Mshowa
gsave
0.67 setgray
0.005 setlinewidth
0.53 0.444 moveto
0.66 0.444 lineto
stroke
0.33 setgray
0.53 0.394 moveto
0.66 0.394 lineto
stroke
0. setgray
0.53 0.344 moveto
0.66 0.344 lineto
stroke
grestore

0 0 moveto
1 0 lineto
1 0.625 lineto
0 0.625 lineto
closepath
clip
newpath
0 setgray
gsave
gsave
gsave
gsave
0.67 setgray
0.005 setlinewidth
0.0619 1.83235 moveto
0.06667 1.63041 lineto
0.07143 1.46886 lineto
0.08095 1.22653 lineto
0.09048 1.05344 lineto
0.1 0.92362 lineto
0.10952 0.82265 lineto
0.11905 0.74187 lineto
0.1381 0.6207 lineto
0.15714 0.53416 lineto
0.17619 0.46925 lineto
0.19524 0.41876 lineto
0.21429 0.37838 lineto
0.25238 0.31779 lineto
0.29048 0.27452 lineto
0.32857 0.24206 lineto
0.36667 0.21682 lineto
0.40476 0.19663 lineto
0.44286 0.18011 lineto
0.48095 0.16634 lineto
0.51905 0.15469 lineto
0.55714 0.1447 lineto
0.59524 0.13605 lineto
0.63333 0.12847 lineto
0.67143 0.12179 lineto
0.70952 0.11585 lineto
0.74762 0.11054 lineto
0.78571 0.10575 lineto
0.82381 0.10143 lineto
0.8619 0.09749 lineto
0.9 0.0939 lineto
0.9381 0.09061 lineto
0.97619 0.08758 lineto
stroke
grestore
grestore
grestore
gsave
gsave
gsave
0.33 setgray
0.005 setlinewidth
0.0619 0.29428 moveto
0.07143 0.2709 lineto
0.08095 0.25211 lineto
0.1 0.22351 lineto
0.11905 0.20252 lineto
0.1381 0.18627 lineto
0.17619 0.16244 lineto
0.21429 0.14552 lineto
0.25238 0.13272 lineto
0.29048 0.12261 lineto
0.32857 0.11436 lineto
0.36667 0.10747 lineto
0.40476 0.1016 lineto
0.44286 0.09654 lineto
0.48095 0.09211 lineto
0.51905 0.08819 lineto
0.55714 0.0847 lineto
0.59524 0.08156 lineto
0.63333 0.07873 lineto
0.67143 0.07615 lineto
0.70952 0.07379 lineto
0.74762 0.07162 lineto
0.78571 0.06963 lineto
0.82381 0.06778 lineto
0.8619 0.06606 lineto
0.9 0.06446 lineto
0.9381 0.06297 lineto
0.97619 0.06157 lineto
stroke
grestore
grestore
grestore
gsave
gsave
gsave
0.005 setlinewidth
0.0619 0.31022 moveto
0.07143 0.28684 lineto
0.08095 0.26805 lineto
0.1 0.23945 lineto
0.11905 0.21845 lineto
0.1381 0.20221 lineto
0.17619 0.17838 lineto
0.21429 0.16146 lineto
0.25238 0.14866 lineto
0.29048 0.13855 lineto
0.32857 0.1303 lineto
0.36667 0.12341 lineto
0.40476 0.11754 lineto
0.44286 0.11248 lineto
0.48095 0.10804 lineto
0.51905 0.10413 lineto
0.55714 0.10064 lineto
0.59524 0.0975 lineto
0.63333 0.09467 lineto
0.67143 0.09209 lineto
0.70952 0.08973 lineto
0.74762 0.08756 lineto
0.78571 0.08557 lineto
0.82381 0.08372 lineto
0.8619 0.082 lineto
0.9 0.0804 lineto
0.9381 0.07891 lineto
0.97619 0.07751 lineto
stroke
grestore
grestore
grestore
grestore
% End of Graphics
MathPictureEnd
%%EPS Trailer
end

%%EndDocument
 GE /Times-Bold SF
12715 28000 MT
(Figure 3-8:)SH
/Times-Roman SF
18488 XM
(Learning curves as specified by Eqn. \0502.61\051 for the)SH
9 SS 
41119 XM
(ANGEL)SH
11 SS 
44444 XM
(front vowel statistics.)SH
10800 29951 MT
(was 35%, or an 11% reduction in error.  Although actual tests with)198 W
9 SS 
43036 XM
(ANGEL)SH
11 SS 
46560 XM
(use more than three)199 W
10800 31690 MT
(features for classification,)
213 W( and imperfect label feedback, the simulations do provide some expec-)212 W
10800 33429 MT
(tations for the upper bound on the improvement by applying these techniques to)
17 W( adaptation in the real)18 W
10800 35168 MT
(system.)SH
651 1000 0 18000 55894 GB 
%%BeginDocument: /usr0/rozzi/Documentation/PhDThesis/Chapter3/EmpAdaptRes.eps
%!PS-Adobe-2.0 EPSF-1.2
%%Creator:Rozzi
%%Title:f1.ps
%%Origin:0 720
%%BoundingBox: 0 0 470 300  %CHANGE?
%%EndComments

gsave

%some definitions necessary for Macintosh graphs
/gm{exch moveto} def
/gr{setgray} def
/lin {exch lineto}def   % y x
/ashw{1. -1. scale ashow 1. -1. scale} def
/shw{1. -1. scale show 1. -1. scale} def
/shwrotate{1. -1. scale 90 rotate show  -90 rotate 1. -1. scale} def
/setTxMode {pop} def
/pr {} def
/ep {pop} def
/pl {pop pop} def

% adjust the coordinate system
-85.  370.000 translate %ADJUST?
0.92 -0.92 scale
/Times-Roman findfont  14.0 scalefont setfont

% <<MAC BODY GOES HERE; CONVERT show & ashow to shw & ashw! >>
% may have to get a few commands from the beginning of a file- be careful
%  to save the original .ps until complete!
382 138 gm
(0)shw
382 243 gm
(50)shw
382 347 gm
(100)shw
382 454 gm
(150)shw
382 562 gm
(200)shw
366 141 gm
0. gr
362 141 lin
364 195 gm
362 195 lin
366 249 gm
362 249 lin
364 302 gm
362 302 lin
366 356 gm
362 356 lin
364 410 gm
362 410 lin
366 463 gm
362 463 lin
364 517 gm
362 517 lin
366 571 gm
362 571 lin
362 141 gm
362 571 lin
368 121 gm
1 setTxMode
(25)shw
300 121 gm
(30)shw
233 121 gm
(35)shw
166 121 gm
(40)shw
98 121 gm
(45)shw
362 141 gm
0 gr
362 137 lin
328 141 gm
328 139 lin
294 141 gm
294 137 lin
261 141 gm
261 139 lin
227 141 gm
227 137 lin
193 141 gm
193 139 lin
160 141 gm
160 137 lin
126 141 gm
126 139 lin
92 141 gm
92 137 lin
362 141 gm
92 141 lin
stroke
0.67  gr
2. setlinewidth
166 141 gm
183 195 lin
166 141 gm
166 141 lin
183 195 gm
173 249 lin
183 195 gm
183 195 lin
173 249 gm
234 302 lin
173 249 gm
173 249 lin
234 302 gm
261 356 lin
234 302 gm
234 302 lin
261 356 gm
278 463 lin
261 356 gm
261 356 lin
278 463 gm
301 571 lin
278 463 gm
278 463 lin
301 571 gm
301 571 lin
stroke
0.33 gr
166 141 gm
207 195 lin
224 249 lin
274 302 lin
284 356 lin
315 463 lin
328 571 lin
stroke
0. gr
166 141 gm
166 195 lin
166 249 lin
166 302 lin
166 356 lin
166 463 lin
166 571 lin
stroke
0. gr
398 428 gm
1 setTxMode
-0.12193 0.(Number of Training Tokens)ashw
150 110 gm
1 setTxMode
-0.12193 0.(Error Rate )shwrotate
159 510 gm
1 setTxMode
-0.12193 0.(Unadapted)ashw
284 533 gm
1 setTxMode
-0.99711 0.(ML)ashw
343 529 gm
1 setTxMode
-0.44366 0.(EMAP)ashw
stroke
grestore
%%EOF

%%EndDocument
 GE /Times-Bold SF
15843 57646 MT
(Figure 3-9:)SH
/Times-Roman SF
21616 XM
(Empirical adaptive classification results with computer-generated,)SH
20609 58842 MT
(normally-distributed data generated from)SH
9 SS 
38997 XM
(ANGEL)SH
11 SS 
42322 XM
(front vowel statistics.)SH
ES
%%Page: 63 64
BS
0 SI
10 /Times-Roman AF
54800 4286 MT
(63)SH
13 /Times-Bold AF
10800 8071 MT
(3.5. Adaptation Results from the)SH
11 SS 
29181 XM
(ANGEL)SH
13 SS 
33418 XM
(System)SH
11 /Times-Roman AF
13300 10986 MT
(The first set of experiments with real data from the)46 W
9 SS 
36424 XM
(ANGEL)SH
11 SS 
39795 XM
(system was conducted using)
46 W( perfect)45 W
10800 12725 MT
(feedback of phonetic class)
139 W( membership and segment boundaries available from phonetic transcrip-)140 W
10800 14464 MT
(tions produced by spectrogram readers.  The data were from)
99 W( the three front vowels, independent of)98 W
10800 16203 MT
(context, from 179 speakers with 10 sentences per speaker)
72 W( for a total of 6301 tokens.  Each sentence)73 W
10800 17942 MT
(was in turn held out and used)
143 W( for testing, while the remaining 9 sentences were used for adaptive)142 W
10800 19681 MT
(training. Ten)
384 W( features were selected from an available set of 130 features using a Fisher ratio test as)55 W
10800 21420 MT
(described in)
4 W( [29].)
SH( These)
282 W( features included segment duration, average pitch, average values of the first)3 W
10800 23159 MT
(three formants,)
3 W( and a few measures of energy in selected frequency bands.  Note that due to the use of)4 W
10800 24898 MT
(manual segmentation and labels, results from these)
229 W( experiments should be regarded as an upper)228 W
10800 26637 MT
(bound on the improvement in performance to be expected due to adaptation.)SH
/Times-Bold SF
23363 29473 MT
(Adaptation)SH
31926 XM
(Error)SH
38777 XM
(Percent)SH
24830 30669 MT
(Type)SH
32201 XM
(Rate)SH
38164 XM
(Reduction)SH
21834 50 22383 31260 LH BX1
-2884 50 29661 31260 LV BX1
-2884 50 36939 31260 LV BX1
/Times-Roman SF
22782 32375 MT
(Unadapted)SH
31879 XM
(33.8%)SH
40212 XM
(--)SH
21834 50 22383 32976 LH BX1
22782 34091 MT
(ML)SH
31879 XM
(26.4%)SH
39157 XM
(21.8%)SH
21834 6316 50 22383 34692 BX BX1
-3432 50 29661 34692 LV BX1
-3432 50 36939 34692 LV BX1
/Times-Bold SF
20304 36444 MT
(Table 3-1:)SH
/Times-Roman SF
25651 XM
(Classification error rates for the)SH
9 SS 
39914 XM
(ANGEL)SH
11 SS 
43239 XM
(system)SH
24947 37640 MT
(front vowels after 10 and 20 adaptation sentences.)SH
13300 40625 MT
(The maximum likelihood algorithm)
1 W( was used for adaptation to facilitate rotation through the test)SH
9 SS 
15289 42001 MT
(11)SH
11 SS 
10800 42364 MT
(sentences.)SH
16565 XM
(As shown in Table)
101 W( 3-1, the unadapted and adapted error rates were 33.8% and 26.4%,)102 W
10800 44103 MT
(respectively, which represents a)
41 W( reduction of 21.8% due to adaptation.  These figures are comparable)40 W
10800 45842 MT
(to the predictions obtained using computer-generated data.  The larger gains with the real)
8 W( data may be)9 W
10800 47581 MT
(attributable to the additional features which were used in)
215 W( the)214 W
9 SS 
39828 XM
(ANGEL)SH
11 SS 
43367 XM
(tests. Given)
703 W( the imperfect)214 W
10800 49320 MT
(segmentation in the system's acoustic-phonetic module and unsupervised adaptation)
397 W( methods,)398 W
10800 51059 MT
(however, these gains will be lower in practice.)SH
13300 54044 MT
(The context-independent result does not approach the gains)
132 W( obtained in the)131 W
9 SS 
48013 XM
(FEATURE)SH
11 SS 
52469 XM
(system,)SH
10800 55783 MT
(which showed a 49% reduction in error rate in the supervised adaptation mode.)
272 W( In)821 W
9 SS 
51475 XM
(FEATURE)SH
11 SS 
(,)SH
10800 57522 MT
(phonemes were produced in a limited number of contexts, so their acoustic realizations)
23 W( were likely to)22 W
10800 59261 MT
(have been consistent.  This consistency makes the)
170 W( within-class variance small with respect to the)171 W
10800 61000 MT
(between-speaker variance, producing the low dogmatism which was observed at)
168 W( each node in the)167 W
10800 62739 MT
(decision tree.  Contextual effects in continuous speech cause feature values)
47 W( to be less consistent than)48 W
10800 64478 MT
(the features from isolated)
52 W( words in the)51 W
9 SS 
28357 XM
(FEATURE)SH
11 SS 
32733 XM
(system, increasing the variability and dogmatism of)51 W
10800 66217 MT
(the features in)174 W
9 SS 
17827 XM
(ANGEL)SH
11 SS 
(. Several)
623 W( experiments with context-dependent classification in)175 W
9 SS 
50164 XM
(ANGEL)SH
11 SS 
53664 XM
(were)SH
10800 50 10800 69158 UL
7 SS 
11700 70659 MT
(11)SH
9 SS 
12400 70986 MT
(The experiments were structured such that the contribution of a set of data could be easily removed from)
42 W( the statistics,)43 W
10800 72000 MT
(which were originally estimated using ML techniques.)SH
ES
%%Page: 64 65
BS
0 SI
10 /Times-Roman AF
54800 4286 MT
(64)SH
11 SS 
10800 7955 MT
(performed to determine whether explicitly modeling contextual effects would produce a lower error)90 W
10800 9694 MT
(rate. Due)
689 W( to the increased number of classes, however, there were not enough training data)
207 W( for)208 W
10800 11433 MT
(reliable estimation of the adaptation statistics.)
60 W( As)
394 W( a result, the context-dependent adapted error rates)59 W
10800 13172 MT
(were higher than the unadapted rates and these tests were abandoned.)SH
13300 16157 MT
(Other types of classification schemes within)21 W
9 SS 
33160 XM
(ANGEL)SH
11 SS 
36506 XM
(were also investigated, including a decision)22 W
10800 17896 MT
(tree structure similar to that in)115 W
9 SS 
25054 XM
(FEATURE)SH
11 SS 
(. Unfortunately,)
505 W( classification rates at the highest decision)114 W
10800 19635 MT
(nodes were on the order of)
141 W( 80% which were not believed to be high enough to justify use of this)142 W
10800 21374 MT
(structure. Also, the dogmatism at these nodes was large enough to preclude the use of)
145 W( adaptation.)144 W
10800 23113 MT
(Chigier [29])
SH( performed extensive optimization of a decision tree classifier for stop consonants)
41 W( within)42 W
9 SS 
10800 24852 MT
(ANGEL)SH
11 SS 
(, but was able to reduce the error rate by only 7.5% over that of a single)
118 W( gaussian classifier)117 W
10800 26591 MT
(\05037% vs.  40% error rates\051.)SH
13300 29576 MT
(The)SH
9 SS 
15486 XM
(ANGEL)SH
11 SS 
19012 XM
(adaptation experiments were unsuccessful)
201 W( because the gaussian model does not)202 W
10800 31315 MT
(adequately represent the features of continuous speech, making the classification scheme in-)398 W
10800 33054 MT
(appropriate for)
128 W( the actual distributions of the data encountered by the)129 W
9 SS 
42915 XM
(ANGEL)SH
11 SS 
46369 XM
(system. Figure)
533 W( 3-10)129 W
10800 34793 MT
(shows four histograms of feature data for the vowel /)111 W
/Times-Italic SF
(iy)SH
/Times-Roman SF
(/ and the gaussian densities which model)
111 W( it.)110 W
10800 36532 MT
(The shape of a feature's distribution depends)
21 W( on the inherent variability of the feature and the manner)22 W
10800 38271 MT
(in which they are measured.)
140 W( Many)
553 W( feature distributions in the)139 W
9 SS 
39947 XM
(ANGEL)SH
11 SS 
43411 XM
(data were skewed, bimodal)139 W
10800 40010 MT
(\050usually a mixture of two normal distributions corresponding to the male and female)
21 W( subpopulations\051,)22 W
10800 41749 MT
(or uniformly distributed,)
250 W( as indicated in 3-10 \050a\051, \050b\051, and \050c\051.  Some features were adequately)249 W
10800 43488 MT
(modeled by a normal)
195 W( density; these features, like the formants shown in 3-10\050d\051, can usually be)196 W
10800 45227 MT
(related to anatomical characteristics.)
152 W( As)
578 W( was seen in the analysis of Chapter 2, the estimation al-)151 W
10800 46966 MT
(gorithms require a unimodal)
34 W( probability density function for the data that is centered about the mean,)35 W
10800 48705 MT
(and when this property is absent the estimates)
115 W( cannot converge.  Chigier)
114 W( [29])
SH( also observed a poor)114 W
10800 50444 MT
(match between stop features in)SH
9 SS 
24697 XM
(ANGEL)SH
11 SS 
28022 XM
(and gaussian densities used to model them.)SH
13300 53429 MT
(A single gaussian classifier, therefore, was not)
207 W( an appropriate structure for classification of)208 W
10800 55168 MT
(speech data in)215 W
9 SS 
17950 XM
(ANGEL)SH
11 SS 
(. Some)
705 W( features were derived for specific discriminations and are not)
215 W( ap-)214 W
10800 56907 MT
(propriate for all classes.  A decision tree structure is a better)
134 W( choice for the phonetic classification)135 W
10800 58646 MT
(problem, as)175 W
9 SS 
16557 XM
(FEATURE)SH
11 SS 
21057 XM
(demonstrated. Given)
625 W( the increased variability of continuous)
175 W( speech feature)174 W
10800 60385 MT
(data, however, this)
67 W( structure falls short of the requirements for highly accurate recognition.  When a)68 W
10800 62124 MT
(human expert decodes a spectrogram, some features are used qualitatively to narrow the)
135 W( candidate)134 W
10800 63863 MT
(classes, and other quantitative features are adjusted to compensate)
68 W( for contextual effects.  For vowel)69 W
10800 65602 MT
(classification, compensated)
83 W( formant values are mentally adapted given previous data from the given)82 W
10800 67341 MT
(speaker before the final labels are applied.  If feature-based)
35 W( recognition is based on the same features)36 W
10800 69080 MT
(as those used by an expert)
173 W( spectrogram reader, then a similar decision process should be used to)172 W
10800 70819 MT
(obtain classification results which approach the human expert)
54 W( levels.  This approach is demonstrated)55 W
10800 72558 MT
(by the)SH
9 SS 
13794 XM
(PROPHET)SH
11 SS 
18069 XM
(system, which is described in the remainder of this chapter.)SH
ES
%%Page: 65 66
BS
0 SI
10 /Times-Roman AF
54800 4286 MT
(65)SH
11 SS 
672 1000 270 29921 37440 GB 
%%BeginDocument: /usr0/rozzi/Documentation/PhDThesis/Chapter3/Hskew.eps
%!PS-Adobe-2.0 EPSF-1.2
%%BoundingBox: 0 0 450 190
%%Creator: Mathematica
%%Title: Clipboard
%%CreationDate: Never Never
%%EndComments
50 dict begin
/Mnodistort false def
/pageDashArray [4] def
/nullDashArray [] def

% Compute the minimum of two numbers.
/Mmin {         % p q Mmin min(p,q)
        2 copy          % p q p q
        gt              % p q p>q?
        { exch } if     % min(p,q) max(p,q)
        pop             % min(p,q)
} bind def


% Compute the maximum of two numbers.
/Mmax {         % p q Mmax max(p,q)
        2 copy          % p q p q
        lt              % p q p<q?
        { exch } if     % max(p,q) min(p,q)
        pop             % max(p,q)
} bind def

/Mpstart {
    MathPictureStart
} bind def
/Mpend {
    MathPictureEnd
} bind def
/Mscale {
    0 1 0 1
    5 -1 roll
    MathScale
} bind def
/Plain
        /Courier findfont
def
/Bold
        /Courier-Bold findfont
def
/Italic
        /Courier-Oblique findfont
def
/MathPictureStart {
        gsave
        newpath
        /Mtmatrix
        matrix currentmatrix
        def
        Plain
        Mfontsize scalefont
        setfont
0 setgray 0 setlinewidth
} bind def
/MathPictureEnd {
        grestore
} bind def
/Mdot {
        moveto
        0 0 rlineto
        stroke
} def
/Mtetra {
        moveto
        lineto
        lineto
        lineto
        fill
} def
/Metetra {
        moveto
        lineto
        lineto
        lineto
        closepath
        gsave
        fill
        grestore
        0 setgray
        stroke
} def
/Mistroke {
        flattenpath
        0 0 0
        {
        4 2 roll
        pop pop
        }
        {
        4 -1 roll
        2 index
        sub dup mul
        4 -1 roll
        2 index
        sub dup mul
        add sqrt
        4 -1 roll
        add
        3 1 roll
        }
        {
        stop
        }
        {
        stop
        }
        pathforall
        pop pop
        currentpoint
        stroke
        moveto
        currentdash
        3 -1 roll
        add
        setdash
} def
/Mfstroke {
        stroke
        currentdash
        pop 0
        setdash
} def
/Msboxa {
        newpath
        5 -1 roll
        Mvboxa
        pop
        6 -1 roll
        5 -1 roll
        4 -1 roll
        Msboxa1
        5 -3 roll
        Msboxa1
        [
        7 -2 roll
        [ 2 index 2 index
        10 -1 roll
        9 -1 roll
        ]
        6 1 roll
        5 -2 roll
        ]
} bind def
        
/Msboxa1 {
        sub
        2 div
        dup
        2 index
        1 add
        mul
        3 -1 roll
        -1 add
        3 -1 roll
        mul
} bind def
/Mvboxa {
        gsave
        newpath
        [ true
        3 -1 roll
        {
        Mbbox
        5 -1 roll
        {
        0
        5 1 roll
        }
        {
        7 -1 roll
        exch sub
        (m) stringwidth pop
        .3 mul
        sub
        7 1 roll
        6 -1 roll
        4 -1 roll
        Mmin
        3 -1 roll
        5 index
        add
        5 -1 roll
        4 -1 roll
        Mmax
        4 -1 roll
        }
        ifelse
        false
        }
        forall
        { stop } if
        counttomark
        1 add
        4 roll
        ]
        grestore
} bind def
/Mbbox {
        0 0 moveto
        false charpath
        flattenpath
        pathbbox
        newpath
} bind def
/Mmin {
        2 copy
        gt
        { exch } if
        pop
} bind def
/Mmax {
        2 copy
        lt
        { exch } if
        pop
} bind def
/Mshowa {
        4 -2 roll
        moveto
        2 index
        Mtmatrix setmatrix
        Mvboxa
        7 1 roll
        6 -1 roll
        5 -1 roll
        4 -1 roll
        Mshowa1
        4 1 roll
        Mshowa1
        rmoveto
        currentpoint
        0 1
        4 index length
        -1 add
        {
        2 index
        4 index
        2 index
        get
        3 index
        add
        moveto
        4 index
        exch get
        show
        } for
        pop pop pop pop
        Mgmatrix setmatrix
} bind def
/Mshowa1 {
        2 copy
        add
        4 1 roll
        sub
        mul
        sub
        -2 div
} bind def
/MathScale {
        Mwidth
        Mheight
        Mlp
        translate
        scale
        /Mgmatrix
        matrix currentmatrix
        def
        /Msaveaa exch def
        /Msavebb exch def
        /Msavecc exch def
        /Msavedd exch def
} bind def
/Mlp {
        3 copy
        Mlpfirst
        {
        Mnodistort
        {
        Mmin
        dup
        } if
        4 index
        2 index
        2 index
        Mlprun
        11 index
        11 -1 roll
        10 -4 roll
        Mlp1
        8 index
        9 -5 roll
        Mlp1
        4 -1 roll
        and
        { exit } if
        3 -1 roll
        pop pop
        } loop
        exch
        3 1 roll
        7 -3 roll
        pop pop pop
} bind def
/Mlpfirst {
        3 -1 roll
        dup length
        2 copy
        -2 add
        get
        aload
        pop pop pop
        4 -2 roll
        -1 add
        get
        aload
        pop pop pop
        6 -1 roll
        3 -1 roll
        5 -1 roll
        sub
        dup /MsaveAx exch def
        div
        4 1 roll
        exch sub
        dup /MsaveAy exch def
        div
} bind def
/Mlprun {
        2 copy
        4 index
        0 get
        dup
        4 1 roll
        Mlprun1
        3 copy
        8 -2 roll
        9 -1 roll
        {
        3 copy
        Mlprun1
        3 copy
        11 -3 roll
        /gt Mlpminmax
        8 3 roll
        11 -3 roll
        /lt Mlpminmax
        8 3 roll
        } forall
        pop pop pop pop
        3 1 roll
        pop pop
        aload pop
        5 -1 roll
        aload pop
        exch
        6 -1 roll
        Mlprun2
        8 2 roll
        4 -1 roll
        Mlprun2
        6 2 roll
        3 -1 roll
        Mlprun2
        4 2 roll
        exch
        Mlprun2
        6 2 roll
} bind def
/Mlprun1 {
        aload pop
        exch
        6 -1 roll
        5 -1 roll
        mul add
        4 -2 roll
        mul
        3 -1 roll
        add
} bind def
/Mlprun2 {
        2 copy
        add 2 div
        3 1 roll
        exch sub
} bind def
/Mlpminmax {
        cvx
        2 index
        6 index
        2 index
        exec
        {
        7 -3 roll
        4 -1 roll
        } if
        1 index
        5 index
        3 -1 roll
        exec
        {
        4 1 roll
        pop
        5 -1 roll
        aload
        pop pop
        4 -1 roll
        aload pop
        [
        8 -2 roll
        pop
        5 -2 roll
        pop
        6 -2 roll
        pop
        5 -1 roll
        ]
        4 1 roll
        pop
        }
        {
        pop pop pop
        } ifelse
} bind def
/Mlp1 {
        5 index
        3 index sub
        5 index
        2 index mul
        1 index
        le
        1 index
        0 le
        or
        dup
        not
        {
        1 index
        3 index div
        .99999 mul
        8 -1 roll
        pop
        7 1 roll
        }
        if
        8 -1 roll
        2 div
        7 -2 roll
        pop sub
        5 index
        6 -3 roll
        pop pop
        mul sub
        exch
} bind def
/Mfontsize      12 def
/Mleft          0.000000 def
/Mbottom        190.000000 def
/Mwidth         450.000000 def
/Mheight        190.000000 def
/Courier findfont 12 scalefont setfont
%!
%%Creator: Mathematica
%%AspectRatio: 0.61803 
MathPictureStart
% Scaling calculations
0.02381 0.02886 0 0.06867 [
[(5)] 0.16811 -0.0125 0 1 Msboxa
[(10)] 0.31241 -0.0125 0 1 Msboxa
[(15)] 0.45671 -0.0125 0 1 Msboxa
[(20)] 0.60101 -0.0125 0 1 Msboxa
[(25)] 0.74531 -0.0125 0 1 Msboxa
[(30)] 0.88961 -0.0125 0 1 Msboxa
[(2)] 0.01131 0.13734 1 0 Msboxa
[(4)] 0.01131 0.27468 1 0 Msboxa
[(6)] 0.01131 0.41202 1 0 Msboxa
[(8)] 0.01131 0.54936 1 0 Msboxa
[ -0.001 -0.00725 0 0 ]
[ 1.001 0.61903 0 0 ]
] MathScale
% Start of Graphics
1 setlinecap
1 setlinejoin
newpath
%%Object: Graphics
[ ] 0 setdash
0 setgray
gsave
gsave
0.002 setlinewidth
0 0 moveto
1 0 lineto
stroke
0.16811 -0.00625 moveto
0.16811 0.00625 lineto
stroke
0 setgray
%[(5)] 0.16811 -0.0125 0 1 Mshowa
0.31241 -0.00625 moveto
0.31241 0.00625 lineto
stroke
0 setgray
%[(10)] 0.31241 -0.0125 0 1 Mshowa
0.45671 -0.00625 moveto
0.45671 0.00625 lineto
stroke
0 setgray
%[(15)] 0.45671 -0.0125 0 1 Mshowa
0.60101 -0.00625 moveto
0.60101 0.00625 lineto
stroke
0 setgray
%[(20)] 0.60101 -0.0125 0 1 Mshowa
0.74531 -0.00625 moveto
0.74531 0.00625 lineto
stroke
0 setgray
%[(25)] 0.74531 -0.0125 0 1 Mshowa
0.88961 -0.00625 moveto
0.88961 0.00625 lineto
stroke
0 setgray
%[(30)] 0.88961 -0.0125 0 1 Mshowa
0.02381 0 moveto
0.02381 0.61803 lineto
stroke
0.01756 0.13734 moveto
0.03006 0.13734 lineto
stroke
0 setgray
%[(2)] 0.01131 0.13734 1 0 Mshowa
0.01756 0.27468 moveto
0.03006 0.27468 lineto
stroke
0 setgray
%[(4)] 0.01131 0.27468 1 0 Mshowa
0.01756 0.41202 moveto
0.03006 0.41202 lineto
stroke
0 setgray
%[(6)] 0.01131 0.41202 1 0 Mshowa
0.01756 0.54936 moveto
0.03006 0.54936 lineto
stroke
0 setgray
%[(8)] 0.01131 0.54936 1 0 Mshowa
[(\(b\))] 0.7 0.53125 0 -1 Mshowa
grestore
grestore
0 0 moveto
1 0 lineto
1 0.618034 lineto
0 0.618034 lineto
closepath
clip
newpath
0 setgray
gsave
gsave
gsave
gsave
0.33 setgray
0.004 setlinewidth
0.02381 0.03285 moveto
0.04365 0.04391 lineto
0.06349 0.05777 lineto
0.10317 0.09537 lineto
0.14286 0.14782 lineto
0.18254 0.21513 lineto
0.22222 0.29398 lineto
0.2619 0.37718 lineto
0.30159 0.45437 lineto
0.32143 0.48706 lineto
0.34127 0.51393 lineto
0.35119 0.52481 lineto
0.36111 0.53382 lineto
0.37103 0.54084 lineto
0.37599 0.54358 lineto
0.38095 0.5458 lineto
0.38343 0.54671 lineto
0.38591 0.54749 lineto
0.38839 0.54813 lineto
0.39087 0.54864 lineto
0.39211 0.54884 lineto
0.39335 0.54901 lineto
0.39459 0.54915 lineto
0.39583 0.54925 lineto
0.39707 0.54932 lineto
0.39831 0.54936 lineto
0.39955 0.54936 lineto
0.40079 0.54933 lineto
0.40203 0.54926 lineto
0.40327 0.54916 lineto
0.40451 0.54903 lineto
0.40575 0.54886 lineto
0.40823 0.54842 lineto
0.41071 0.54785 lineto
0.41567 0.54631 lineto
0.42063 0.54424 lineto
0.43056 0.53852 lineto
0.44048 0.53077 lineto
0.46032 0.50954 lineto
0.48016 0.48151 lineto
0.5 0.44791 lineto
0.53968 0.36969 lineto
0.57937 0.28649 lineto
0.61905 0.20846 lineto
0.65873 0.14242 lineto
0.69841 0.09135 lineto
0.71825 0.07146 lineto
0.7381 0.05502 lineto
0.75794 0.0417 lineto
0.77778 0.03111 lineto
Mistroke
0.79762 0.02285 lineto
0.81746 0.01652 lineto
0.8373 0.01176 lineto
0.85714 0.00824 lineto
0.87698 0.00568 lineto
0.8869 0.00469 lineto
0.89683 0.00386 lineto
0.90675 0.00316 lineto
0.91667 0.00258 lineto
0.92659 0.00209 lineto
0.93651 0.00169 lineto
0.94643 0.00137 lineto
0.95635 0.0011 lineto
0.97619 0.0007 lineto
Mfstroke
grestore
grestore
grestore
gsave
0.004 setlinewidth
0.05267 0 moveto
0.08153 0.01717 lineto
0.11039 0.0515 lineto
0.13925 0.10301 lineto
0.16811 0.18884 lineto
0.19697 0.34335 lineto
0.22583 0.44636 lineto
0.25469 0.39486 lineto
0.28355 0.54936 lineto
0.31241 0.48069 lineto
0.34127 0.39486 lineto
0.37013 0.30902 lineto
0.39899 0.27468 lineto
0.42785 0.32618 lineto
0.45671 0.34335 lineto
0.48557 0.20601 lineto
0.51443 0.17168 lineto
0.54329 0.13734 lineto
0.57215 0.17168 lineto
0.60101 0.12017 lineto
0.62987 0.10301 lineto
0.65873 0.08584 lineto
0.68759 0.0515 lineto
0.71645 0.0515 lineto
0.74531 0.06867 lineto
0.77417 0.06867 lineto
0.80303 0.03434 lineto
0.83189 0.03434 lineto
0.86075 0.01717 lineto
0.88961 0 lineto
0.91847 0.01717 lineto
0.94733 0 lineto
stroke
grestore
grestore
% End of Graphics
MathPictureEnd
%%EPS Trailer
end

%%EndDocument
 GE 670 1000 270 49446 37440 GB 
%%BeginDocument: /usr0/rozzi/Documentation/PhDThesis/Chapter3/Hnorm.eps
%!PS-Adobe-2.0 EPSF-1.2
%%BoundingBox: 0 0 451 190
%%Creator: Mathematica
%%Title: Clipboard
%%CreationDate: Never Never
%%EndComments
50 dict begin
/Mnodistort false def
/pageDashArray [4] def
/nullDashArray [] def

% Compute the minimum of two numbers.
/Mmin {         % p q Mmin min(p,q)
        2 copy          % p q p q
        gt              % p q p>q?
        { exch } if     % min(p,q) max(p,q)
        pop             % min(p,q)
} bind def


% Compute the maximum of two numbers.
/Mmax {         % p q Mmax max(p,q)
        2 copy          % p q p q
        lt              % p q p<q?
        { exch } if     % max(p,q) min(p,q)
        pop             % max(p,q)
} bind def

/Mpstart {
    MathPictureStart
} bind def
/Mpend {
    MathPictureEnd
} bind def
/Mscale {
    0 1 0 1
    5 -1 roll
    MathScale
} bind def
/Plain
        /Courier findfont
def
/Bold
        /Courier-Bold findfont
def
/Italic
        /Courier-Oblique findfont
def
/MathPictureStart {
        gsave
        newpath
        /Mtmatrix
        matrix currentmatrix
        def
        Plain
        Mfontsize scalefont
        setfont
0 setgray 0 setlinewidth
} bind def
/MathPictureEnd {
        grestore
} bind def
/Mdot {
        moveto
        0 0 rlineto
        stroke
} def
/Mtetra {
        moveto
        lineto
        lineto
        lineto
        fill
} def
/Metetra {
        moveto
        lineto
        lineto
        lineto
        closepath
        gsave
        fill
        grestore
        0 setgray
        stroke
} def
/Mistroke {
        flattenpath
        0 0 0
        {
        4 2 roll
        pop pop
        }
        {
        4 -1 roll
        2 index
        sub dup mul
        4 -1 roll
        2 index
        sub dup mul
        add sqrt
        4 -1 roll
        add
        3 1 roll
        }
        {
        stop
        }
        {
        stop
        }
        pathforall
        pop pop
        currentpoint
        stroke
        moveto
        currentdash
        3 -1 roll
        add
        setdash
} def
/Mfstroke {
        stroke
        currentdash
        pop 0
        setdash
} def
/Msboxa {
        newpath
        5 -1 roll
        Mvboxa
        pop
        6 -1 roll
        5 -1 roll
        4 -1 roll
        Msboxa1
        5 -3 roll
        Msboxa1
        [
        7 -2 roll
        [ 2 index 2 index
        10 -1 roll
        9 -1 roll
        ]
        6 1 roll
        5 -2 roll
        ]
} bind def
        
/Msboxa1 {
        sub
        2 div
        dup
        2 index
        1 add
        mul
        3 -1 roll
        -1 add
        3 -1 roll
        mul
} bind def
/Mvboxa {
        gsave
        newpath
        [ true
        3 -1 roll
        {
        Mbbox
        5 -1 roll
        {
        0
        5 1 roll
        }
        {
        7 -1 roll
        exch sub
        (m) stringwidth pop
        .3 mul
        sub
        7 1 roll
        6 -1 roll
        4 -1 roll
        Mmin
        3 -1 roll
        5 index
        add
        5 -1 roll
        4 -1 roll
        Mmax
        4 -1 roll
        }
        ifelse
        false
        }
        forall
        { stop } if
        counttomark
        1 add
        4 roll
        ]
        grestore
} bind def
/Mbbox {
        0 0 moveto
        false charpath
        flattenpath
        pathbbox
        newpath
} bind def
/Mmin {
        2 copy
        gt
        { exch } if
        pop
} bind def
/Mmax {
        2 copy
        lt
        { exch } if
        pop
} bind def
/Mshowa {
        4 -2 roll
        moveto
        2 index
        Mtmatrix setmatrix
        Mvboxa
        7 1 roll
        6 -1 roll
        5 -1 roll
        4 -1 roll
        Mshowa1
        4 1 roll
        Mshowa1
        rmoveto
        currentpoint
        0 1
        4 index length
        -1 add
        {
        2 index
        4 index
        2 index
        get
        3 index
        add
        moveto
        4 index
        exch get
        show
        } for
        pop pop pop pop
        Mgmatrix setmatrix
} bind def
/Mshowa1 {
        2 copy
        add
        4 1 roll
        sub
        mul
        sub
        -2 div
} bind def
/MathScale {
        Mwidth
        Mheight
        Mlp
        translate
        scale
        /Mgmatrix
        matrix currentmatrix
        def
        /Msaveaa exch def
        /Msavebb exch def
        /Msavecc exch def
        /Msavedd exch def
} bind def
/Mlp {
        3 copy
        Mlpfirst
        {
        Mnodistort
        {
        Mmin
        dup
        } if
        4 index
        2 index
        2 index
        Mlprun
        11 index
        11 -1 roll
        10 -4 roll
        Mlp1
        8 index
        9 -5 roll
        Mlp1
        4 -1 roll
        and
        { exit } if
        3 -1 roll
        pop pop
        } loop
        exch
        3 1 roll
        7 -3 roll
        pop pop pop
} bind def
/Mlpfirst {
        3 -1 roll
        dup length
        2 copy
        -2 add
        get
        aload
        pop pop pop
        4 -2 roll
        -1 add
        get
        aload
        pop pop pop
        6 -1 roll
        3 -1 roll
        5 -1 roll
        sub
        dup /MsaveAx exch def
        div
        4 1 roll
        exch sub
        dup /MsaveAy exch def
        div
} bind def
/Mlprun {
        2 copy
        4 index
        0 get
        dup
        4 1 roll
        Mlprun1
        3 copy
        8 -2 roll
        9 -1 roll
        {
        3 copy
        Mlprun1
        3 copy
        11 -3 roll
        /gt Mlpminmax
        8 3 roll
        11 -3 roll
        /lt Mlpminmax
        8 3 roll
        } forall
        pop pop pop pop
        3 1 roll
        pop pop
        aload pop
        5 -1 roll
        aload pop
        exch
        6 -1 roll
        Mlprun2
        8 2 roll
        4 -1 roll
        Mlprun2
        6 2 roll
        3 -1 roll
        Mlprun2
        4 2 roll
        exch
        Mlprun2
        6 2 roll
} bind def
/Mlprun1 {
        aload pop
        exch
        6 -1 roll
        5 -1 roll
        mul add
        4 -2 roll
        mul
        3 -1 roll
        add
} bind def
/Mlprun2 {
        2 copy
        add 2 div
        3 1 roll
        exch sub
} bind def
/Mlpminmax {
        cvx
        2 index
        6 index
        2 index
        exec
        {
        7 -3 roll
        4 -1 roll
        } if
        1 index
        5 index
        3 -1 roll
        exec
        {
        4 1 roll
        pop
        5 -1 roll
        aload
        pop pop
        4 -1 roll
        aload pop
        [
        8 -2 roll
        pop
        5 -2 roll
        pop
        6 -2 roll
        pop
        5 -1 roll
        ]
        4 1 roll
        pop
        }
        {
        pop pop pop
        } ifelse
} bind def
/Mlp1 {
        5 index
        3 index sub
        5 index
        2 index mul
        1 index
        le
        1 index
        0 le
        or
        dup
        not
        {
        1 index
        3 index div
        .99999 mul
        8 -1 roll
        pop
        7 1 roll
        }
        if
        8 -1 roll
        2 div
        7 -2 roll
        pop sub
        5 index
        6 -3 roll
        pop pop
        mul sub
        exch
} bind def
/Mfontsize      12 def
/Mleft          0.000000 def
/Mbottom        190.000000 def
/Mwidth         451.000000 def
/Mheight        190.000000 def
/Courier findfont 12 scalefont setfont
%!
%%Creator: Mathematica
%%AspectRatio: 0.61803 
MathPictureStart
% Scaling calculations
0.02381 0.02116 0 0.07725 [
[(335)] 0.23545 -0.0125 0 1 Msboxa
[(365)] 0.44709 -0.0125 0 1 Msboxa
[(395)] 0.65873 -0.0125 0 1 Msboxa
[(425)] 0.87037 -0.0125 0 1 Msboxa
[(8)] 0.01131 0.07725 1 0 Msboxa
[(16)] 0.01131 0.15451 1 0 Msboxa
[(24)] 0.01131 0.23176 1 0 Msboxa
[(32)] 0.01131 0.30902 1 0 Msboxa
[(40)] 0.01131 0.38627 1 0 Msboxa
[(48)] 0.01131 0.46353 1 0 Msboxa
[(56)] 0.01131 0.54078 1 0 Msboxa
[(64)] 0.01131 0.61803 1 0 Msboxa
[ -0.001 -0.00725 0 0 ]
[ 1.001 0.61903 0 0 ]
] MathScale
% Start of Graphics
1 setlinecap
1 setlinejoin
newpath
%%Object: Graphics
[ ] 0 setdash
0 setgray
gsave
gsave
0.002 setlinewidth
0 0 moveto
1 0 lineto
stroke
0.23545 -0.00625 moveto
0.23545 0.00625 lineto
stroke
0 setgray
%[(335)] 0.23545 -0.0125 0 1 Mshowa
0.44709 -0.00625 moveto
0.44709 0.00625 lineto
stroke
0 setgray
%[(365)] 0.44709 -0.0125 0 1 Mshowa
0.65873 -0.00625 moveto
0.65873 0.00625 lineto
stroke
0 setgray
%[(395)] 0.65873 -0.0125 0 1 Mshowa
0.87037 -0.00625 moveto
0.87037 0.00625 lineto
stroke
0 setgray
%[(425)] 0.87037 -0.0125 0 1 Mshowa
0.02381 0 moveto
0.02381 0.61803 lineto
stroke
0.01756 0.07725 moveto
0.03006 0.07725 lineto
stroke
0 setgray
%[(8)] 0.01131 0.07725 1 0 Mshowa
0.01756 0.15451 moveto
0.03006 0.15451 lineto
stroke
0 setgray
%[(16)] 0.01131 0.15451 1 0 Mshowa
0.01756 0.23176 moveto
0.03006 0.23176 lineto
stroke
0 setgray
%[(24)] 0.01131 0.23176 1 0 Mshowa
0.01756 0.30902 moveto
0.03006 0.30902 lineto
stroke
0 setgray
%[(32)] 0.01131 0.30902 1 0 Mshowa
0.01756 0.38627 moveto
0.03006 0.38627 lineto
stroke
0 setgray
%[(40)] 0.01131 0.38627 1 0 Mshowa
0.01756 0.46353 moveto
0.03006 0.46353 lineto
stroke
0 setgray
%[(48)] 0.01131 0.46353 1 0 Mshowa
0.01756 0.54078 moveto
0.03006 0.54078 lineto
stroke
0 setgray
%[(56)] 0.01131 0.54078 1 0 Mshowa
0.01756 0.61803 moveto
0.03006 0.61803 lineto
stroke
0 setgray
%[(64)] 0.01131 0.61803 1 0 Mshowa
[(\(d\))] 0.7 0.53125 0 -1 Mshowa
grestore
grestore
0 0 moveto
1 0 lineto
1 0.618034 lineto
0 0.618034 lineto
closepath
clip
newpath
0 setgray
gsave
gsave
gsave
gsave
0.004 setlinewidth
0.33 setgray
0.02381 0.00078 moveto
0.03373 0.001 lineto
0.04365 0.00128 lineto
0.05357 0.00164 lineto
0.06349 0.00208 lineto
0.07341 0.00262 lineto
0.08333 0.00329 lineto
0.09325 0.00412 lineto
0.10317 0.00512 lineto
0.1131 0.00634 lineto
0.12302 0.0078 lineto
0.14286 0.01166 lineto
0.1627 0.01708 lineto
0.18254 0.02451 lineto
0.20238 0.0345 lineto
0.22222 0.04758 lineto
0.24206 0.06433 lineto
0.2619 0.08526 lineto
0.30159 0.14105 lineto
0.34127 0.21541 lineto
0.38095 0.30373 lineto
0.42063 0.39536 lineto
0.44048 0.43776 lineto
0.46032 0.47512 lineto
0.48016 0.50547 lineto
0.49008 0.51748 lineto
0.5 0.52713 lineto
0.50496 0.53103 lineto
0.50992 0.53428 lineto
0.51488 0.53689 lineto
0.51736 0.53795 lineto
0.51984 0.53884 lineto
0.52232 0.53956 lineto
0.52356 0.53986 lineto
0.5248 0.54012 lineto
0.52604 0.54033 lineto
0.52728 0.54051 lineto
0.52852 0.54064 lineto
0.52976 0.54073 lineto
0.531 0.54077 lineto
0.53224 0.54078 lineto
0.53348 0.54074 lineto
0.53472 0.54066 lineto
0.53596 0.54054 lineto
0.5372 0.54037 lineto
0.53968 0.53992 lineto
0.54216 0.53929 lineto
0.54464 0.5385 lineto
0.5496 0.53642 lineto
0.55456 0.53368 lineto
Mistroke
0.55952 0.5303 lineto
0.56944 0.52163 lineto
0.57937 0.51055 lineto
0.59921 0.48181 lineto
0.61905 0.4457 lineto
0.65873 0.35922 lineto
0.69841 0.26728 lineto
0.7381 0.1836 lineto
0.77778 0.11643 lineto
0.79762 0.08999 lineto
0.81746 0.06817 lineto
0.8373 0.05062 lineto
0.85714 0.03685 lineto
0.87698 0.02629 lineto
0.89683 0.01839 lineto
0.91667 0.0126 lineto
0.92659 0.01036 lineto
0.93651 0.00847 lineto
0.94643 0.00689 lineto
0.95635 0.00558 lineto
0.97619 0.0036 lineto
Mfstroke
grestore
grestore
grestore
gsave
0.004 setlinewidth
0.04497 0 moveto
0.06614 0.01931 lineto
0.0873 0.03863 lineto
0.10847 0.05794 lineto
0.12963 0.03863 lineto
0.15079 0.01931 lineto
0.17196 0.07725 lineto
0.19312 0.05794 lineto
0.21429 0.11588 lineto
0.23545 0.13519 lineto
0.25661 0.17382 lineto
0.27778 0.09657 lineto
0.29894 0.21245 lineto
0.32011 0.17382 lineto
0.34127 0.15451 lineto
0.36243 0.25108 lineto
0.3836 0.30902 lineto
0.40476 0.38627 lineto
0.42593 0.23176 lineto
0.44709 0.36696 lineto
0.46825 0.40558 lineto
0.48942 0.32833 lineto
0.51058 0.44421 lineto
0.53175 0.61803 lineto
0.55291 0.36696 lineto
0.57407 0.27039 lineto
0.59524 0.46353 lineto
0.6164 0.48284 lineto
0.63757 0.23176 lineto
0.65873 0.4249 lineto
0.67989 0.36696 lineto
0.70106 0.19314 lineto
0.72222 0.30902 lineto
0.74339 0.19314 lineto
0.76455 0.17382 lineto
0.78571 0.11588 lineto
0.80688 0.11588 lineto
0.82804 0.07725 lineto
0.84921 0.01931 lineto
0.87037 0.05794 lineto
0.89153 0 lineto
0.9127 0.01931 lineto
0.93386 0 lineto
stroke
grestore
grestore
% End of Graphics
MathPictureEnd
%%EPS Trailer
end

%%EndDocument
 GE 672 1000 270 29902 68876 GB 
%%BeginDocument: /usr0/rozzi/Documentation/PhDThesis/Chapter3/Hbimodal.eps
%!PS-Adobe-2.0 EPSF-1.2
%%BoundingBox: 0 0 450 190
%%Creator: Mathematica
%%Title: Clipboard
%%CreationDate: Never Never
%%EndComments
50 dict begin
/Mnodistort false def
/pageDashArray [4] def
/nullDashArray [] def

% Compute the minimum of two numbers.
/Mmin {         % p q Mmin min(p,q)
        2 copy          % p q p q
        gt              % p q p>q?
        { exch } if     % min(p,q) max(p,q)
        pop             % min(p,q)
} bind def


% Compute the maximum of two numbers.
/Mmax {         % p q Mmax max(p,q)
        2 copy          % p q p q
        lt              % p q p<q?
        { exch } if     % max(p,q) min(p,q)
        pop             % max(p,q)
} bind def

/Mpstart {
    MathPictureStart
} bind def
/Mpend {
    MathPictureEnd
} bind def
/Mscale {
    0 1 0 1
    5 -1 roll
    MathScale
} bind def
/Plain
        /Courier findfont
def
/Bold
        /Courier-Bold findfont
def
/Italic
        /Courier-Oblique findfont
def
/MathPictureStart {
        gsave
        newpath
        /Mtmatrix
        matrix currentmatrix
        def
        Plain
        Mfontsize scalefont
        setfont
0 setgray 0 setlinewidth
} bind def
/MathPictureEnd {
        grestore
} bind def
/Mdot {
        moveto
        0 0 rlineto
        stroke
} def
/Mtetra {
        moveto
        lineto
        lineto
        lineto
        fill
} def
/Metetra {
        moveto
        lineto
        lineto
        lineto
        closepath
        gsave
        fill
        grestore
        0 setgray
        stroke
} def
/Mistroke {
        flattenpath
        0 0 0
        {
        4 2 roll
        pop pop
        }
        {
        4 -1 roll
        2 index
        sub dup mul
        4 -1 roll
        2 index
        sub dup mul
        add sqrt
        4 -1 roll
        add
        3 1 roll
        }
        {
        stop
        }
        {
        stop
        }
        pathforall
        pop pop
        currentpoint
        stroke
        moveto
        currentdash
        3 -1 roll
        add
        setdash
} def
/Mfstroke {
        stroke
        currentdash
        pop 0
        setdash
} def
/Msboxa {
        newpath
        5 -1 roll
        Mvboxa
        pop
        6 -1 roll
        5 -1 roll
        4 -1 roll
        Msboxa1
        5 -3 roll
        Msboxa1
        [
        7 -2 roll
        [ 2 index 2 index
        10 -1 roll
        9 -1 roll
        ]
        6 1 roll
        5 -2 roll
        ]
} bind def
        
/Msboxa1 {
        sub
        2 div
        dup
        2 index
        1 add
        mul
        3 -1 roll
        -1 add
        3 -1 roll
        mul
} bind def
/Mvboxa {
        gsave
        newpath
        [ true
        3 -1 roll
        {
        Mbbox
        5 -1 roll
        {
        0
        5 1 roll
        }
        {
        7 -1 roll
        exch sub
        (m) stringwidth pop
        .3 mul
        sub
        7 1 roll
        6 -1 roll
        4 -1 roll
        Mmin
        3 -1 roll
        5 index
        add
        5 -1 roll
        4 -1 roll
        Mmax
        4 -1 roll
        }
        ifelse
        false
        }
        forall
        { stop } if
        counttomark
        1 add
        4 roll
        ]
        grestore
} bind def
/Mbbox {
        0 0 moveto
        false charpath
        flattenpath
        pathbbox
        newpath
} bind def
/Mmin {
        2 copy
        gt
        { exch } if
        pop
} bind def
/Mmax {
        2 copy
        lt
        { exch } if
        pop
} bind def
/Mshowa {
        4 -2 roll
        moveto
        2 index
        Mtmatrix setmatrix
        Mvboxa
        7 1 roll
        6 -1 roll
        5 -1 roll
        4 -1 roll
        Mshowa1
        4 1 roll
        Mshowa1
        rmoveto
        currentpoint
        0 1
        4 index length
        -1 add
        {
        2 index
        4 index
        2 index
        get
        3 index
        add
        moveto
        4 index
        exch get
        show
        } for
        pop pop pop pop
        Mgmatrix setmatrix
} bind def
/Mshowa1 {
        2 copy
        add
        4 1 roll
        sub
        mul
        sub
        -2 div
} bind def
/MathScale {
        Mwidth
        Mheight
        Mlp
        translate
        scale
        /Mgmatrix
        matrix currentmatrix
        def
        /Msaveaa exch def
        /Msavebb exch def
        /Msavecc exch def
        /Msavedd exch def
} bind def
/Mlp {
        3 copy
        Mlpfirst
        {
        Mnodistort
        {
        Mmin
        dup
        } if
        4 index
        2 index
        2 index
        Mlprun
        11 index
        11 -1 roll
        10 -4 roll
        Mlp1
        8 index
        9 -5 roll
        Mlp1
        4 -1 roll
        and
        { exit } if
        3 -1 roll
        pop pop
        } loop
        exch
        3 1 roll
        7 -3 roll
        pop pop pop
} bind def
/Mlpfirst {
        3 -1 roll
        dup length
        2 copy
        -2 add
        get
        aload
        pop pop pop
        4 -2 roll
        -1 add
        get
        aload
        pop pop pop
        6 -1 roll
        3 -1 roll
        5 -1 roll
        sub
        dup /MsaveAx exch def
        div
        4 1 roll
        exch sub
        dup /MsaveAy exch def
        div
} bind def
/Mlprun {
        2 copy
        4 index
        0 get
        dup
        4 1 roll
        Mlprun1
        3 copy
        8 -2 roll
        9 -1 roll
        {
        3 copy
        Mlprun1
        3 copy
        11 -3 roll
        /gt Mlpminmax
        8 3 roll
        11 -3 roll
        /lt Mlpminmax
        8 3 roll
        } forall
        pop pop pop pop
        3 1 roll
        pop pop
        aload pop
        5 -1 roll
        aload pop
        exch
        6 -1 roll
        Mlprun2
        8 2 roll
        4 -1 roll
        Mlprun2
        6 2 roll
        3 -1 roll
        Mlprun2
        4 2 roll
        exch
        Mlprun2
        6 2 roll
} bind def
/Mlprun1 {
        aload pop
        exch
        6 -1 roll
        5 -1 roll
        mul add
        4 -2 roll
        mul
        3 -1 roll
        add
} bind def
/Mlprun2 {
        2 copy
        add 2 div
        3 1 roll
        exch sub
} bind def
/Mlpminmax {
        cvx
        2 index
        6 index
        2 index
        exec
        {
        7 -3 roll
        4 -1 roll
        } if
        1 index
        5 index
        3 -1 roll
        exec
        {
        4 1 roll
        pop
        5 -1 roll
        aload
        pop pop
        4 -1 roll
        aload pop
        [
        8 -2 roll
        pop
        5 -2 roll
        pop
        6 -2 roll
        pop
        5 -1 roll
        ]
        4 1 roll
        pop
        }
        {
        pop pop pop
        } ifelse
} bind def
/Mlp1 {
        5 index
        3 index sub
        5 index
        2 index mul
        1 index
        le
        1 index
        0 le
        or
        dup
        not
        {
        1 index
        3 index div
        .99999 mul
        8 -1 roll
        pop
        7 1 roll
        }
        if
        8 -1 roll
        2 div
        7 -2 roll
        pop sub
        5 index
        6 -3 roll
        pop pop
        mul sub
        exch
} bind def
/Mfontsize      12 def
/Mleft          0.000000 def
/Mbottom        190.000000 def
/Mwidth         450.000000 def
/Mheight        190.000000 def
/Courier findfont 12 scalefont setfont
%!
%%Creator: Mathematica
%%AspectRatio: 0.61803 
MathPictureStart
% Scaling calculations
0.02381 0.0112 0.01472 0.02264 [
[(20)] 0.2479 0.00222 0 1 Msboxa
[(40)] 0.47199 0.00222 0 1 Msboxa
[(60)] 0.69608 0.00222 0 1 Msboxa
[(80)] 0.92017 0.00222 0 1 Msboxa
[(5)] 0.01131 0.12791 1 0 Msboxa
[(10)] 0.01131 0.2411 1 0 Msboxa
[(15)] 0.01131 0.35429 1 0 Msboxa
[(20)] 0.01131 0.46749 1 0 Msboxa
[(25)] 0.01131 0.58068 1 0 Msboxa
[ -0.001 -0.001 0 0 ]
[ 1.001 0.61903 0 0 ]
] MathScale
% Start of Graphics
1 setlinecap
1 setlinejoin
newpath
%%Object: Graphics
[ ] 0 setdash
0 setgray
gsave
gsave
0.002 setlinewidth
0 0.01472 moveto
1 0.01472 lineto
stroke
0.2479 0.00847 moveto
0.2479 0.02097 lineto
stroke
0 setgray
%[(20)] 0.2479 0.00222 0 1 Mshowa
0.47199 0.00847 moveto
0.47199 0.02097 lineto
stroke
0 setgray
%[(40)] 0.47199 0.00222 0 1 Mshowa
0.69608 0.00847 moveto
0.69608 0.02097 lineto
stroke
0 setgray
%[(60)] 0.69608 0.00222 0 1 Mshowa
0.92017 0.00847 moveto
0.92017 0.02097 lineto
stroke
0 setgray
%[(80)] 0.92017 0.00222 0 1 Mshowa
0.02381 0 moveto
0.02381 0.61803 lineto
stroke
0.01756 0.12791 moveto
0.03006 0.12791 lineto
stroke
0 setgray
%[(5)] 0.01131 0.12791 1 0 Mshowa
0.01756 0.2411 moveto
0.03006 0.2411 lineto
stroke
0 setgray
%[(10)] 0.01131 0.2411 1 0 Mshowa
0.01756 0.35429 moveto
0.03006 0.35429 lineto
stroke
0 setgray
%[(15)] 0.01131 0.35429 1 0 Mshowa
0.01756 0.46749 moveto
0.03006 0.46749 lineto
stroke
0 setgray
%[(20)] 0.01131 0.46749 1 0 Mshowa
0.01756 0.58068 moveto
0.03006 0.58068 lineto
stroke
0 setgray
%[(25)] 0.01131 0.58068 1 0 Mshowa
[(\(a\))] 0.7 0.53125 0 -1 Mshowa

grestore
grestore
0 0 moveto
1 0 lineto
1 0.618034 lineto
0 0.618034 lineto
closepath
clip
newpath
0 setgray
gsave
gsave
0.004 setlinewidth
0.03501 0.01472 moveto
0.04622 0.01472 lineto
0.05742 0.01472 lineto
0.06863 0.01472 lineto
0.07983 0.03735 lineto
0.09104 0.03735 lineto
0.10224 0.01472 lineto
0.11345 0.03735 lineto
0.12465 0.05999 lineto
0.13585 0.03735 lineto
0.14706 0.10527 lineto
0.15826 0.15055 lineto
0.16947 0.15055 lineto
0.18067 0.10527 lineto
0.19188 0.21846 lineto
0.20308 0.37693 lineto
0.21429 0.19582 lineto
0.22549 0.39957 lineto
0.23669 0.46749 lineto
0.2479 0.60332 lineto
0.2591 0.28638 lineto
0.27031 0.46749 lineto
0.28151 0.37693 lineto
0.29272 0.19582 lineto
0.30392 0.28638 lineto
0.31513 0.26374 lineto
0.32633 0.17319 lineto
0.33754 0.08263 lineto
0.34874 0.21846 lineto
0.35994 0.19582 lineto
0.37115 0.05999 lineto
0.38235 0.10527 lineto
0.39356 0.15055 lineto
0.40476 0.17319 lineto
0.41597 0.08263 lineto
0.42717 0.12791 lineto
0.43838 0.17319 lineto
0.44958 0.12791 lineto
0.46078 0.19582 lineto
0.47199 0.2411 lineto
0.48319 0.26374 lineto
0.4944 0.17319 lineto
0.5056 0.35429 lineto
0.51681 0.28638 lineto
0.52801 0.17319 lineto
0.53922 0.44485 lineto
0.55042 0.39957 lineto
0.56162 0.37693 lineto
0.57283 0.2411 lineto
0.58403 0.46749 lineto
Mistroke
0.59524 0.46749 lineto
0.60644 0.21846 lineto
0.61765 0.44485 lineto
0.62885 0.30902 lineto
0.64006 0.42221 lineto
0.65126 0.19582 lineto
0.66246 0.46749 lineto
0.67367 0.28638 lineto
0.68487 0.19582 lineto
0.69608 0.26374 lineto
0.70728 0.2411 lineto
0.71849 0.30902 lineto
0.72969 0.17319 lineto
0.7409 0.21846 lineto
0.7521 0.15055 lineto
0.76331 0.08263 lineto
0.77451 0.15055 lineto
0.78571 0.12791 lineto
0.79692 0.10527 lineto
0.80812 0.05999 lineto
0.81933 0.08263 lineto
0.83053 0.05999 lineto
0.84174 0.03735 lineto
0.85294 0.08263 lineto
0.86415 0.03735 lineto
0.87535 0.05999 lineto
0.88655 0.03735 lineto
0.89776 0.05999 lineto
0.90896 0.03735 lineto
0.92017 0.01472 lineto
Mfstroke
grestore
gsave
gsave
gsave
0.33 setgray
0.004 setlinewidth
0.02381 0.02136 moveto
0.04365 0.02448 lineto
0.06349 0.02882 lineto
0.08333 0.03473 lineto
0.10317 0.04262 lineto
0.12302 0.05296 lineto
0.14286 0.06622 lineto
0.1627 0.08288 lineto
0.18254 0.10337 lineto
0.22222 0.15705 lineto
0.2619 0.22786 lineto
0.30159 0.3124 lineto
0.34127 0.4025 lineto
0.38095 0.48586 lineto
0.40079 0.52064 lineto
0.42063 0.5486 lineto
0.43056 0.55959 lineto
0.44048 0.56838 lineto
0.44544 0.57192 lineto
0.4504 0.57487 lineto
0.45536 0.57723 lineto
0.46032 0.57898 lineto
0.4628 0.57962 lineto
0.46404 0.57989 lineto
0.46528 0.58012 lineto
0.46652 0.58031 lineto
0.46776 0.58046 lineto
0.469 0.58057 lineto
0.47024 0.58064 lineto
0.47148 0.58068 lineto
0.47272 0.58067 lineto
0.47396 0.58063 lineto
0.4752 0.58055 lineto
0.47644 0.58043 lineto
0.47768 0.58028 lineto
0.48016 0.57985 lineto
0.48264 0.57926 lineto
0.48512 0.57853 lineto
0.49008 0.5766 lineto
0.49504 0.57407 lineto
0.5 0.57094 lineto
0.50992 0.56295 lineto
0.51984 0.55272 lineto
0.53968 0.52611 lineto
0.57937 0.45324 lineto
0.61905 0.36545 lineto
0.65873 0.27634 lineto
0.69841 0.19674 lineto
0.7381 0.13283 lineto
0.77778 0.0862 lineto
Mistroke
0.79762 0.0689 lineto
0.81746 0.05507 lineto
0.8373 0.04425 lineto
0.85714 0.03596 lineto
0.87698 0.02973 lineto
0.89683 0.02515 lineto
0.91667 0.02184 lineto
0.92659 0.02056 lineto
0.93651 0.01949 lineto
0.95635 0.01787 lineto
0.96627 0.01726 lineto
0.97619 0.01676 lineto
Mfstroke
grestore
grestore
grestore
grestore
% End of Graphics
MathPictureEnd
%%EPS Trailer
end

%%EndDocument
 GE 672 1000 270 49465 68876 GB 
%%BeginDocument: /usr0/rozzi/Documentation/PhDThesis/Chapter3/Huniform.eps
%!PS-Adobe-2.0 EPSF-1.2
%%BoundingBox: 0 0 450 190
%%Creator: Mathematica
%%Title: Clipboard
%%CreationDate: Never Never
%%EndComments
50 dict begin
/Mnodistort false def
/pageDashArray [4] def
/nullDashArray [] def

% Compute the minimum of two numbers.
/Mmin {         % p q Mmin min(p,q)
        2 copy          % p q p q
        gt              % p q p>q?
        { exch } if     % min(p,q) max(p,q)
        pop             % min(p,q)
} bind def


% Compute the maximum of two numbers.
/Mmax {         % p q Mmax max(p,q)
        2 copy          % p q p q
        lt              % p q p<q?
        { exch } if     % max(p,q) min(p,q)
        pop             % max(p,q)
} bind def

/Mpstart {
    MathPictureStart
} bind def
/Mpend {
    MathPictureEnd
} bind def
/Mscale {
    0 1 0 1
    5 -1 roll
    MathScale
} bind def
/Plain
        /Courier findfont
def
/Bold
        /Courier-Bold findfont
def
/Italic
        /Courier-Oblique findfont
def
/MathPictureStart {
        gsave
        newpath
        /Mtmatrix
        matrix currentmatrix
        def
        Plain
        Mfontsize scalefont
        setfont
0 setgray 0 setlinewidth
} bind def
/MathPictureEnd {
        grestore
} bind def
/Mdot {
        moveto
        0 0 rlineto
        stroke
} def
/Mtetra {
        moveto
        lineto
        lineto
        lineto
        fill
} def
/Metetra {
        moveto
        lineto
        lineto
        lineto
        closepath
        gsave
        fill
        grestore
        0 setgray
        stroke
} def
/Mistroke {
        flattenpath
        0 0 0
        {
        4 2 roll
        pop pop
        }
        {
        4 -1 roll
        2 index
        sub dup mul
        4 -1 roll
        2 index
        sub dup mul
        add sqrt
        4 -1 roll
        add
        3 1 roll
        }
        {
        stop
        }
        {
        stop
        }
        pathforall
        pop pop
        currentpoint
        stroke
        moveto
        currentdash
        3 -1 roll
        add
        setdash
} def
/Mfstroke {
        stroke
        currentdash
        pop 0
        setdash
} def
/Msboxa {
        newpath
        5 -1 roll
        Mvboxa
        pop
        6 -1 roll
        5 -1 roll
        4 -1 roll
        Msboxa1
        5 -3 roll
        Msboxa1
        [
        7 -2 roll
        [ 2 index 2 index
        10 -1 roll
        9 -1 roll
        ]
        6 1 roll
        5 -2 roll
        ]
} bind def
        
/Msboxa1 {
        sub
        2 div
        dup
        2 index
        1 add
        mul
        3 -1 roll
        -1 add
        3 -1 roll
        mul
} bind def
/Mvboxa {
        gsave
        newpath
        [ true
        3 -1 roll
        {
        Mbbox
        5 -1 roll
        {
        0
        5 1 roll
        }
        {
        7 -1 roll
        exch sub
        (m) stringwidth pop
        .3 mul
        sub
        7 1 roll
        6 -1 roll
        4 -1 roll
        Mmin
        3 -1 roll
        5 index
        add
        5 -1 roll
        4 -1 roll
        Mmax
        4 -1 roll
        }
        ifelse
        false
        }
        forall
        { stop } if
        counttomark
        1 add
        4 roll
        ]
        grestore
} bind def
/Mbbox {
        0 0 moveto
        false charpath
        flattenpath
        pathbbox
        newpath
} bind def
/Mmin {
        2 copy
        gt
        { exch } if
        pop
} bind def
/Mmax {
        2 copy
        lt
        { exch } if
        pop
} bind def
/Mshowa {
        4 -2 roll
        moveto
        2 index
        Mtmatrix setmatrix
        Mvboxa
        7 1 roll
        6 -1 roll
        5 -1 roll
        4 -1 roll
        Mshowa1
        4 1 roll
        Mshowa1
        rmoveto
        currentpoint
        0 1
        4 index length
        -1 add
        {
        2 index
        4 index
        2 index
        get
        3 index
        add
        moveto
        4 index
        exch get
        show
        } for
        pop pop pop pop
        Mgmatrix setmatrix
} bind def
/Mshowa1 {
        2 copy
        add
        4 1 roll
        sub
        mul
        sub
        -2 div
} bind def
/MathScale {
        Mwidth
        Mheight
        Mlp
        translate
        scale
        /Mgmatrix
        matrix currentmatrix
        def
        /Msaveaa exch def
        /Msavebb exch def
        /Msavecc exch def
        /Msavedd exch def
} bind def
/Mlp {
        3 copy
        Mlpfirst
        {
        Mnodistort
        {
        Mmin
        dup
        } if
        4 index
        2 index
        2 index
        Mlprun
        11 index
        11 -1 roll
        10 -4 roll
        Mlp1
        8 index
        9 -5 roll
        Mlp1
        4 -1 roll
        and
        { exit } if
        3 -1 roll
        pop pop
        } loop
        exch
        3 1 roll
        7 -3 roll
        pop pop pop
} bind def
/Mlpfirst {
        3 -1 roll
        dup length
        2 copy
        -2 add
        get
        aload
        pop pop pop
        4 -2 roll
        -1 add
        get
        aload
        pop pop pop
        6 -1 roll
        3 -1 roll
        5 -1 roll
        sub
        dup /MsaveAx exch def
        div
        4 1 roll
        exch sub
        dup /MsaveAy exch def
        div
} bind def
/Mlprun {
        2 copy
        4 index
        0 get
        dup
        4 1 roll
        Mlprun1
        3 copy
        8 -2 roll
        9 -1 roll
        {
        3 copy
        Mlprun1
        3 copy
        11 -3 roll
        /gt Mlpminmax
        8 3 roll
        11 -3 roll
        /lt Mlpminmax
        8 3 roll
        } forall
        pop pop pop pop
        3 1 roll
        pop pop
        aload pop
        5 -1 roll
        aload pop
        exch
        6 -1 roll
        Mlprun2
        8 2 roll
        4 -1 roll
        Mlprun2
        6 2 roll
        3 -1 roll
        Mlprun2
        4 2 roll
        exch
        Mlprun2
        6 2 roll
} bind def
/Mlprun1 {
        aload pop
        exch
        6 -1 roll
        5 -1 roll
        mul add
        4 -2 roll
        mul
        3 -1 roll
        add
} bind def
/Mlprun2 {
        2 copy
        add 2 div
        3 1 roll
        exch sub
} bind def
/Mlpminmax {
        cvx
        2 index
        6 index
        2 index
        exec
        {
        7 -3 roll
        4 -1 roll
        } if
        1 index
        5 index
        3 -1 roll
        exec
        {
        4 1 roll
        pop
        5 -1 roll
        aload
        pop pop
        4 -1 roll
        aload pop
        [
        8 -2 roll
        pop
        5 -2 roll
        pop
        6 -2 roll
        pop
        5 -1 roll
        ]
        4 1 roll
        pop
        }
        {
        pop pop pop
        } ifelse
} bind def
/Mlp1 {
        5 index
        3 index sub
        5 index
        2 index mul
        1 index
        le
        1 index
        0 le
        or
        dup
        not
        {
        1 index
        3 index div
        .99999 mul
        8 -1 roll
        pop
        7 1 roll
        }
        if
        8 -1 roll
        2 div
        7 -2 roll
        pop sub
        5 index
        6 -3 roll
        pop pop
        mul sub
        exch
} bind def
/Mfontsize      12 def
/Mleft          0.000000 def
/Mbottom        190.000000 def
/Mwidth         450.000000 def
/Mheight        190.000000 def
/Courier findfont 12 scalefont setfont
%!
%%Creator: Mathematica
%%AspectRatio: 0.61803 
MathPictureStart
% Scaling calculations
0.02381 0.01323 0 0.06867 [
[(10)] 0.15608 -0.0125 0 1 Msboxa
[(20)] 0.28836 -0.0125 0 1 Msboxa
[(30)] 0.42063 -0.0125 0 1 Msboxa
[(40)] 0.55291 -0.0125 0 1 Msboxa
[(50)] 0.68519 -0.0125 0 1 Msboxa
[(60)] 0.81746 -0.0125 0 1 Msboxa
[(70)] 0.94974 -0.0125 0 1 Msboxa
[(2)] 0.01131 0.13734 1 0 Msboxa
[(4)] 0.01131 0.27468 1 0 Msboxa
[(6)] 0.01131 0.41202 1 0 Msboxa
[(8)] 0.01131 0.54936 1 0 Msboxa
[ -0.001 -0.00725 0 0 ]
[ 1.001 0.61903 0 0 ]
] MathScale
% Start of Graphics
1 setlinecap
1 setlinejoin
newpath
%%Object: Graphics
[ ] 0 setdash
0 setgray
gsave
gsave
0.002 setlinewidth
0 0 moveto
1 0 lineto
stroke
0.15608 -0.00625 moveto
0.15608 0.00625 lineto
stroke
0 setgray
%[(10)] 0.15608 -0.0125 0 1 Mshowa
0.28836 -0.00625 moveto
0.28836 0.00625 lineto
stroke
0 setgray
%[(20)] 0.28836 -0.0125 0 1 Mshowa
0.42063 -0.00625 moveto
0.42063 0.00625 lineto
stroke
0 setgray
%[(30)] 0.42063 -0.0125 0 1 Mshowa
0.55291 -0.00625 moveto
0.55291 0.00625 lineto
stroke
0 setgray
%[(40)] 0.55291 -0.0125 0 1 Mshowa
0.68519 -0.00625 moveto
0.68519 0.00625 lineto
stroke
0 setgray
%[(50)] 0.68519 -0.0125 0 1 Mshowa
0.81746 -0.00625 moveto
0.81746 0.00625 lineto
stroke
0 setgray
%[(60)] 0.81746 -0.0125 0 1 Mshowa
0.94974 -0.00625 moveto
0.94974 0.00625 lineto
stroke
0 setgray
%[(70)] 0.94974 -0.0125 0 1 Mshowa
0.02381 0 moveto
0.02381 0.61803 lineto
stroke
0.01756 0.13734 moveto
0.03006 0.13734 lineto
stroke
0 setgray
%[(2)] 0.01131 0.13734 1 0 Mshowa
0.01756 0.27468 moveto
0.03006 0.27468 lineto
stroke
0 setgray
%[(4)] 0.01131 0.27468 1 0 Mshowa
0.01756 0.41202 moveto
0.03006 0.41202 lineto
stroke
0 setgray
%[(6)] 0.01131 0.41202 1 0 Mshowa
0.01756 0.54936 moveto
0.03006 0.54936 lineto
stroke
0 setgray
%[(8)] 0.01131 0.54936 1 0 Mshowa
[(\(c\))] 0.7 0.53125 0 -1 Mshowa
grestore
grestore
0 0 moveto
1 0 lineto
1 0.618034 lineto
0 0.618034 lineto
closepath
clip
newpath
0 setgray
gsave
gsave
gsave
gsave
0.33 setgray
0.004 setlinewidth
0.02381 0.03195 moveto
0.04365 0.04146 lineto
0.06349 0.05313 lineto
0.10317 0.08401 lineto
0.14286 0.12638 lineto
0.18254 0.18085 lineto
0.22222 0.24616 lineto
0.2619 0.31872 lineto
0.30159 0.39254 lineto
0.34127 0.45989 lineto
0.36111 0.48853 lineto
0.38095 0.51251 lineto
0.39087 0.52248 lineto
0.40079 0.53098 lineto
0.41071 0.53794 lineto
0.41567 0.54082 lineto
0.42063 0.54329 lineto
0.4256 0.54535 lineto
0.43056 0.54698 lineto
0.43304 0.54764 lineto
0.43552 0.5482 lineto
0.438 0.54864 lineto
0.43924 0.54883 lineto
0.44048 0.54898 lineto
0.44172 0.54911 lineto
0.44296 0.54921 lineto
0.4442 0.54929 lineto
0.44544 0.54934 lineto
0.44668 0.54936 lineto
0.44792 0.54936 lineto
0.44916 0.54933 lineto
0.4504 0.54927 lineto
0.45164 0.54918 lineto
0.45288 0.54907 lineto
0.45536 0.54877 lineto
0.45784 0.54836 lineto
0.46032 0.54784 lineto
0.46528 0.54649 lineto
0.47024 0.54471 lineto
0.48016 0.53991 lineto
0.49008 0.53348 lineto
0.5 0.52548 lineto
0.51984 0.50509 lineto
0.53968 0.47945 lineto
0.57937 0.41612 lineto
0.61905 0.34354 lineto
0.65873 0.26979 lineto
0.69841 0.20154 lineto
0.7381 0.14321 lineto
0.77778 0.0968 lineto
Mistroke
0.79762 0.07811 lineto
0.81746 0.06224 lineto
0.8373 0.04898 lineto
0.85714 0.03807 lineto
0.87698 0.02922 lineto
0.89683 0.02215 lineto
0.91667 0.01658 lineto
0.93651 0.01226 lineto
0.95635 0.00895 lineto
0.97619 0.00645 lineto
Mfstroke
grestore
grestore
grestore
gsave
0.004 setlinewidth
0.03704 0 moveto
0.05026 0.0515 lineto
0.06349 0.0515 lineto
0.07672 0.0515 lineto
0.08995 0.06867 lineto
0.10317 0.17168 lineto
0.1164 0.24035 lineto
0.12963 0.08584 lineto
0.14286 0.13734 lineto
0.15608 0.13734 lineto
0.16931 0.13734 lineto
0.18254 0.54936 lineto
0.19577 0.17168 lineto
0.20899 0.27468 lineto
0.22222 0.27468 lineto
0.23545 0.22318 lineto
0.24868 0.22318 lineto
0.2619 0.34335 lineto
0.27513 0.13734 lineto
0.28836 0.17168 lineto
0.30159 0.36052 lineto
0.31481 0.10301 lineto
0.32804 0.13734 lineto
0.34127 0.34335 lineto
0.3545 0.20601 lineto
0.36772 0.18884 lineto
0.38095 0.36052 lineto
0.39418 0.06867 lineto
0.40741 0.20601 lineto
0.42063 0.24035 lineto
0.43386 0.17168 lineto
0.44709 0.20601 lineto
0.46032 0.41202 lineto
0.47354 0.13734 lineto
0.48677 0.13734 lineto
0.5 0.34335 lineto
0.51323 0.30902 lineto
0.52646 0.24035 lineto
0.53968 0.29185 lineto
0.55291 0.34335 lineto
0.56614 0.27468 lineto
0.57937 0.13734 lineto
0.59259 0.20601 lineto
0.60582 0.30902 lineto
0.61905 0.17168 lineto
0.63228 0.13734 lineto
0.6455 0.18884 lineto
0.65873 0.24035 lineto
0.67196 0.13734 lineto
0.68519 0.29185 lineto
Mistroke
0.69841 0.20601 lineto
0.71164 0.25751 lineto
0.72487 0.08584 lineto
0.7381 0.18884 lineto
0.75132 0.13734 lineto
0.76455 0.13734 lineto
0.77778 0.18884 lineto
0.79101 0.12017 lineto
0.80423 0.12017 lineto
0.81746 0.10301 lineto
0.83069 0.06867 lineto
0.84392 0.0515 lineto
0.85714 0.03434 lineto
0.87037 0.17168 lineto
0.8836 0 lineto
0.89683 0.01717 lineto
0.91005 0.01717 lineto
0.92328 0.01717 lineto
0.93651 0.01717 lineto
0.94974 0 lineto
Mfstroke
grestore
grestore
% End of Graphics
MathPictureEnd
%%EPS Trailer
end

%%EndDocument
 GE /Times-Bold SF
18130 70628 MT
(Figure 3-10:)SH
/Times-Roman SF
24453 XM
(Histograms illustrating the fit of the gaussian model to)SH
9 SS 
28172 71824 MT
(ANGEL)SH
11 SS 
31497 XM
(feature data for the vowel /)SH
/Times-Italic SF
(iy)SH
/Times-Roman SF
(/.)SH
ES
%%Page: 66 67
BS
0 SI
10 /Times-Roman AF
54800 4286 MT
(66)SH
13 /Times-Bold AF
10800 8071 MT
(3.6. The)SH
11 SS 
15567 XM
(PROPHET)SH
13 SS 
21210 XM
(Phonetic Classifier)SH
12 SS 
10800 11755 MT
(3.6.1. Overview of)SH
10 SS 
20333 XM
(PROPHET)SH
11 /Times-Roman AF
13300 14670 MT
(The)SH
9 SS 
15317 XM
(PROPHET)SH
11 SS 
19624 XM
(system attempts to address the)
32 W( shortcomings of the)31 W
9 SS 
42546 XM
(ANGEL)SH
11 SS 
45902 XM
(phonetic classification)31 W
10800 16409 MT
(module by demonstrating feature-based recognition techniques derived from expert)
286 W( spectrogram)287 W
10800 18148 MT
(readers' decision processes.  Aspects of these processes are modeled with a rule-based system)
49 W( which)48 W
10800 19887 MT
(uses qualitative)
152 W( information to guide the application of statistical classifiers.  Often a spectrogram)153 W
10800 21626 MT
(reader uses qualitative descriptions of parameter values to prune the candidate decision classes)
73 W( for a)72 W
10800 23365 MT
(segment. Afterwards,)
585 W( quantitative judgements are made to assign a phonetic)
155 W( label.  For example,)156 W
10800 25104 MT
(when classifying front vowels,)
51 W( a human expert may first look at the waveform to verify the presence)50 W
10800 26843 MT
(of voicing or)
136 W( periodicity, and to determine whether the amplitude is sufficient for a vowel.  If the)137 W
10800 28582 MT
(formants are in a fronted pattern, then duration)
89 W( and formant values are used to assign a front-vowel)88 W
10800 30321 MT
(label to the segment.  The feature values may be adjusted to compensate for)
74 W( contextual effects or to)75 W
10800 32060 MT
(adapt to the acoustic characteristics of the speaker, especially if the reader has previously)
132 W( decoded)131 W
10800 33799 MT
(spectrograms from the speaker.)SH
13300 36784 MT
(Many aspects of the spectrogram reader's decision process are modeled in)281 W
9 SS 
49344 XM
(PROPHET)SH
11 SS 
53900 XM
(in a)281 W
10800 38523 MT
(straightforward manner.  Thresholds on feature values such as waveform amplitude or)
1 W( power, formant)SH
10800 40262 MT
(amplitudes, frontness, and probability of voicing are)
146 W( used to filter out any segments which do not)147 W
10800 42001 MT
(satisfy the characteristics of the)
143 W( target classes \050the front vowels\051.  Specifically, segments with low)142 W
10800 43740 MT
(power, low probability of voicing, or frontness less than 1.0 are ignored.)
27 W( Further,)
330 W( if any formants are)28 W
10800 45479 MT
(weak, as is often the case with)
197 W( semivowels, that segment is rejected.  Once a segment has been)196 W
10800 47218 MT
(selected by this sorting procedure, a gaussian classifier is used)
25 W( to assign one of the target class labels.)26 W
10800 48957 MT
(Only those features)
174 W( which are useful for discrimination between members of the target group are)173 W
10800 50696 MT
(combined in the classifier.  For the front vowels, these features are the first)
12 W( three formant frequencies,)13 W
10800 52435 MT
(and segment)
250 W( duration.  Note that the classifiers may have been previously updated given some)249 W
10800 54174 MT
(amount of adaptation training data from the current speaker.)SH
13300 57159 MT
(The lack of training data for)
49 W( context-dependent modeling implies a need to keep the number of)50 W
10800 58898 MT
(decision classes small and to compensate for)
45 W( the effects of context and other sources of variability in)44 W
10800 60637 MT
(the feature data, as opposed to modeling them explicitly.  One method of)
216 W( context compensation)217 W
10800 62376 MT
(investigated in)60 W
9 SS 
17642 XM
(PROPHET)SH
11 SS 
21977 XM
(was target frequency identification, which is applied to formant frequencies)59 W
10800 64115 MT
(within vowel segments.  This process attempts to identify the value which the formant would have)112 W
10800 65854 MT
(assumed if it were produced in a neutral context, much as a human spectrogram reader would do.  To)26 W
10800 67593 MT
(perform this identification, a)
34 W( set of rules are applied to a qualitative description of the formant trajec-)35 W
10800 69332 MT
(tory \050the time derivative of the)
10 W( formant frequency\051.  A rough estimate of this derivative is obtained by)9 W
10800 71071 MT
(computing the change in averaged frequencies)
6 W( between the first and middle thirds of the segment, and)7 W
ES
%%Page: 67 68
BS
0 SI
10 /Times-Roman AF
54800 4286 MT
(67)SH
11 SS 
10800 7955 MT
(between the)
112 W( middle and last thirds.  These changes are then quantized to obtain descriptions of the)111 W
10800 9694 MT
(formant evolution in each half of the segment.  For example, "RC" describes a)
1 W( formant which is rising)2 W
10800 11433 MT
(in the first half and constant in the)
7 W( second half.  The second and third formants in the circled region in)6 W
10800 13172 MT
(Figure 3-2 would be described in such a manner.)SH
13300 16157 MT
(The target frequency identification rules can be summarized as follows.  If)
72 W( the formant is con-)73 W
10800 17896 MT
(stant for any period, assume)
88 W( it has reached its target value and average over the constant region.  If)87 W
10800 19635 MT
(the formant rises then falls or)
15 W( vice versa, use the extremum as the target.  If none of these rules apply,)16 W
/Times-Italic SF
10800 21374 MT
(i.e.)SH
/Times-Roman SF
12475 XM
(the formant is)
56 W( rising or falling throughout the segment, then another set of formant-specific rules)55 W
10800 23113 MT
(is applied to consider the left and right contexts \050assumed to be)
7 W( available\051 to explain this behavior and)8 W
10800 24852 MT
(choose appropriate values.)
13 W( These)
299 W( context-dependent rules mostly apply to semivowel, nasal, or labial)12 W
10800 26591 MT
(contexts. For)
493 W( example, if the second formant was rising throughout a segment and the left context)109 W
10800 28330 MT
(was a /)31 W
/Times-Italic SF
(w)SH
/Times-Roman SF
(/ \050which pulls the second formant downward\051, then the values in)
31 W( the righthand portion of the)30 W
10800 30069 MT
(segment are likely)
163 W( to be closer to the target values.  Application of these rules should reduce the)164 W
10800 31808 MT
(dogmatism to levels closer to those seen with the)SH
9 SS 
32645 XM
(FEATURE)SH
11 SS 
36970 XM
(system.)SH
13300 34793 MT
(The)SH
9 SS 
15523 XM
(PROPHET)SH
11 SS 
20036 XM
(classification techniques described)
238 W( above place restrictions on the manner in)237 W
10800 36532 MT
(which features are used in)
169 W( the decision process.  These restrictions essentially state that a feature)170 W
10800 38271 MT
(should be applied to make only the)
137 W( decision or discrimination for which it was originally derived.)136 W
10800 40010 MT
(The restrictions help to overcome some of the problems with the gaussian model as applied to the)128 W
10800 41749 MT
(feature data, as they allow a number of features to be omitted from)
6 W( the gaussian classifiers.  To ensure)5 W
10800 43488 MT
(a reasonable match between the remaining)
56 W( features' distributions and the gaussian adaptation model,)57 W
10800 45227 MT
(additional restrictions are placed)
142 W( on feature selection.  The features chosen are limited to be those)141 W
10800 46966 MT
(which can be directly related to a speaker's physical characteristics, or to)
139 W( temporal variables.  For)140 W
10800 48705 MT
(example, formant frequencies, which are vocal tract resonance)
17 W( frequencies, exhibit a normal variation)16 W
10800 50444 MT
(related to the variation in the human vocal apparatus.  To avoid bimodal distributions, the)
82 W( male and)83 W
10800 52183 MT
(female subpopulations are modeled separately,)208 W
/Times-Italic SF
32732 XM
(i.e.)SH
/Times-Roman SF
34559 XM
(statistics are generated for each)
208 W( gender.  His-)207 W
10800 53922 MT
(tograms of features in the)202 W
9 SS 
23325 XM
(PROPHET)SH
11 SS 
27802 XM
(system, chosen under these restrictions, show the data to)
202 W( be)203 W
10800 55661 MT
(normally distributed.)SH
13300 58646 MT
(The)SH
9 SS 
15286 XM
(ANGEL)SH
11 SS 
18612 XM
(system was no longer available for experimentation by the time the)1 W
9 SS 
48468 XM
(PROPHET)SH
11 SS 
52744 XM
(system)SH
10800 60385 MT
(was ready to be evaluated.  For)
88 W( that reason, evaluations of the)89 W
9 SS 
39290 XM
(PROPHET)SH
11 SS 
43654 XM
(system were made in com-)89 W
10800 62124 MT
(parison with an approximation of the)43 W
9 SS 
27616 XM
(ANGEL)SH
11 SS 
30984 XM
(acoustic-phonetic module.)
43 W( This)
360 W( baseline system, which)42 W
10800 63863 MT
(is referred to here as)80 W
9 SS 
20451 XM
(SPIRIT)SH
11 SS 
(, is a single gaussian)
80 W( classifier which operates on segment-averaged fea-)81 W
10800 65602 MT
(ture values.  Evaluations of the two systems, both with and without)
92 W( adaptation, are presented in the)91 W
10800 67341 MT
(next section.)SH
ES
%%Page: 68 69
BS
0 SI
10 /Times-Roman AF
54800 4286 MT
(68)SH
12 /Times-Bold AF
10800 8004 MT
(3.6.2. Experiments with)SH
10 SS 
23201 XM
(PROPHET)SH
11 /Times-Roman AF
13300 10919 MT
(The previous section described how the)59 W
9 SS 
31371 XM
(PROPHET)SH
11 SS 
35706 XM
(system proposes to reduce variability in con-)60 W
10800 12658 MT
(tinuous speech and to improve the quality of the gaussian model.  The experiments described in)
65 W( this)64 W
10800 14397 MT
(section investigated classification rates with)
221 W( and without rules for segment selection and context)222 W
10800 16136 MT
(compensation. Also)
386 W( described are adaptation experiments which compare error rates for the adapted)55 W
10800 17875 MT
(systems using the estimation algorithms from Chapter 2 in an unsupervised adaptation)
34 W( mode.  This is)35 W
10800 19614 MT
(preceded by a description of the speech database and feature generation method.)SH
/Times-Bold SF
10800 22511 MT
(3.6.2.1. Database and Generation of Features and Adaptation Statistics)SH
/Times-Roman SF
13300 25066 MT
(The training, adaptation, and evaluation data)
27 W( were from the DARPA TIMIT)
26 W( [34])
SH( prototype CD-)26 W
10800 26805 MT
(ROM which consists of 10 sentences from each of 420 speakers, 290 male and 130 female.  Two)137 W
10800 28544 MT
(sentences, referred to as dialect calibration)
150 W( sentences, are common to all speakers in the database.)149 W
10800 30283 MT
(These sentences have been excluded to avoid biasing the adaptation)
40 W( statistics and recognition results.)41 W
10800 32022 MT
(The remaining 33,600)
143 W( sentences contain a total of 62,500 sonorant segments, 10,700 of which are)142 W
10800 33761 MT
(labeled as front vowels.  This is an average)
66 W( of 25 front vowels per speaker, consisting of 10.1 /)67 W
/Times-Italic SF
(iy)SH
/Times-Roman SF
(/'s,)SH
10800 35500 MT
(8.3 /)SH
/Times-Italic SF
(ih)SH
/Times-Roman SF
(/'s, and 6.6 /)SH
/Times-Italic SF
(eh)SH
/Times-Roman SF
(/'s.)SH
13300 38485 MT
(The TIMIT database is arranged into eight subdirectories)
157 W( representing different U.S. English)156 W
10800 40224 MT
(dialect regions.  For each recorded sentence, there is an associated orthographic)
88 W( transcription, and a)89 W
10800 41963 MT
(phonetic transcription which contains labels)
328 W( and segment boundaries produced by spectrogram)327 W
10800 43702 MT
(readers at MIT.  Since segmentation and broad phonetic class)
48 W( assignment are not under investigation)49 W
10800 45441 MT
(here, the information)
28 W( in the TIMIT phonetic transcriptions are used as input to)27 W
9 SS 
45855 XM
(PROPHET)SH
11 SS 
(. The)
329 W( TIMIT)27 W
10800 47180 MT
(CD-ROM is a prototype database developed as part of a standardization)
129 W( process within the speech)130 W
10800 48919 MT
(research community.  As a prototype, the data are)
41 W( known to contain a small number segmental label-)40 W
10800 50658 MT
(ing errors.  In)
115 W( the following it is assumed that the frequency of labeling errors for the classes con-)116 W
10800 52397 MT
(sidered is negligible.)SH
13300 55382 MT
(The digitized speech was analyzed using the)52 W
/Times-Italic SF
33487 XM
(formant)SH
/Times-Roman SF
37298 XM
(program from the)52 W
/Times-Italic SF
45487 XM
(waves+)SH
/Times-Roman SF
49245 XM
(software pack-)52 W
10800 57121 MT
(age by Entropic Speech, Inc.)
3 W( [35].)
SH( The)281 W
/Times-Italic SF
28382 XM
(formant)SH
/Times-Roman SF
32144 XM
(program incorporates an LPC-based formant-tracking)4 W
10800 58860 MT
(algorithm [36])
SH( and a pitch-tracking algorithm)
140 W( [37])
SH( which also)
140 W( provides waveform power and prob-)139 W
10800 60599 MT
(ability of voicing information on a)
96 W( frame-by-frame basis.  Formant frequencies are specified by the)97 W
10800 62338 MT
(algorithm, and formant amplitudes can be)
197 W( computed from the LPC pole locations in the formant)196 W
10800 64077 MT
(tracker output.  Formant amplitude information was normalized by the sum of the formant)
13 W( amplitudes)14 W
10800 65816 MT
(to reduce their dependence on changes in loudness or stress within)
105 W( an utterance.  Waveform power)104 W
10800 67555 MT
(was normalized to a maximum of 1.0 to reduce this dependence across utterances.)
131 W( The)
538 W( frame-by-)132 W
10800 69294 MT
(frame measures produced by)84 W
/Times-Italic SF
24084 XM
(formant)SH
/Times-Roman SF
27927 XM
(were then averaged over the extent of each phonetic)
84 W( segment.)83 W
10800 71033 MT
(Frontness was)
164 W( computed from the segment-averaged formant frequencies, and duration was deter-)165 W
ES
%%Page: 69 70
BS
0 SI
10 /Times-Roman AF
54800 4286 MT
(69)SH
11 SS 
10800 7955 MT
(mined from)
18 W( the phonetic transcription.  The processed feature values and phonetic transcription infor-)17 W
10800 9694 MT
(mation for each utterance were stored in the database.)
171 W( A)
619 W( similar process was used to generate a)172 W
10800 11433 MT
(second set of feature data files using the rule-based methods described in the previous section.)SH
13300 14418 MT
(Statistics were generated using)
207 W( maximum likelihood estimates of the means and covariance)206 W
10800 16157 MT
(matrices for the target classes /)68 W
/Times-Italic SF
(iy)SH
/Times-Roman SF
(/, /)68 W
/Times-Italic SF
(ih)SH
/Times-Roman SF
(/, and /)68 W
/Times-Italic SF
(eh)SH
/Times-Roman SF
(/, and for an additional generic class)68 W
/Times-Italic SF
48474 XM
(son)SH
/Times-Roman SF
50346 XM
(which is the)69 W
10800 17896 MT
(union of all other sonorants.  These statistics were computed for each speaker,)
144 W( and the number of)143 W
10800 19635 MT
(tokens which contributed to each speaker's statistics was recorded.  The token counts allow)
223 W( the)224 W
10800 21374 MT
(contribution of an individual's data to be)
31 W( removed from the statistics.  This facilitates rotation though)30 W
10800 23113 MT
(the data \050holding out one sentence for testing and training on the remainder\051 which was necessary)135 W
10800 24852 MT
(given the limited amount of available data per speaker.)SH
/Times-Bold SF
10800 27749 MT
(3.6.2.2. Experiments with TIMIT Data)SH
/Times-Roman SF
13300 30304 MT
(The first set of experiments compared the error rates)
49 W( of the)48 W
9 SS 
40009 XM
(SPIRIT)SH
11 SS 
43082 XM
(system, which uses no rules,)48 W
10800 32043 MT
(with)SH
9 SS 
13179 XM
(PROPHET)SH
11 SS 
17602 XM
(which uses rules)
148 W( to select segments for classification and to identify target formant)149 W
10800 33782 MT
(frequencies. The)
491 W( comparisons were performed between both)
108 W( unadapted systems and systems using)107 W
10800 35521 MT
(ML, EMAP, and LMS-C)
64 W( adaptation in an unsupervised mode.  Unlike the analysis in Chapter 2 and)65 W
10800 37260 MT
(the)SH
9 SS 
12601 XM
(ANGEL)SH
11 SS 
16108 XM
(experiments from Section)
182 W( 3.5 which assumed labeled training tokens, the experiments)181 W
10800 38999 MT
(reported here updated each class)
40 W( based on the probability that the current observation is a member of)41 W
10800 40738 MT
(the class.  In other words, during adaptive training, for each class)SH
/Times-Italic SF
39725 XM
(j)SH
/Times-Roman SF
40306 XM
(the ML mean)SH
/Times-Bold SF
46507 XM
(a)SH
/Times-Roman SF
47554 XM
(is updated as)SH
8 /Times-Italic AF
47057 41083 MT
(j)SH
17184 42184 MT
(n)SH
17584 42529 MT
(j)SH
11 SS 
18248 43684 MT
(f)SH
/Times-Roman SF
(\050)SH
/Times-Bold SF
(x)SH
/Times-Roman SF
19825 XM
(|)SH
/Times-Italic SF
(j)SH
/Times-Roman SF
(\051)SH
/Times-Bold SF
(x)SH
16 /Symbol AF
16924 43984 MT
(\345)SH
8 /Times-Italic AF
19470 44029 MT
(k)SH
21267 XM
(k)SH
16892 44778 MT
(k)SH
/Times-Roman SF
(=1)SH
4730 50 16892 45153 UL
11 /Times-Bold AF
15200 45398 MT
(a)SH
/Times-Roman SF
16122 XM
(=)SH
53693 XM
(\0503.5\051)SH
8 /Times-Italic AF
15750 45743 MT
(j)SH
17636 45943 MT
(n)SH
18036 46288 MT
(j)SH
11 SS 
18700 47443 MT
(f)SH
/Times-Roman SF
(\050)SH
/Times-Bold SF
(x)SH
/Times-Roman SF
20277 XM
(|)SH
/Times-Italic SF
(j)SH
/Times-Roman SF
(\051)SH
16 /Symbol AF
17376 47743 MT
(\345)SH
8 /Times-Italic AF
19922 47788 MT
(k)SH
17344 48537 MT
(k)SH
/Times-Roman SF
(=1)SH
9 SS 
18210 49417 MT
(th)SH
11 SS 
10800 49780 MT
(where)SH
/Times-Bold SF
13788 XM
(x)SH
/Times-Roman SF
15040 XM
(is the)27 W
/Times-Italic SF
17722 XM
(k)SH
19211 XM
(unlabeled)SH
/Times-Roman SF
23850 XM
(sample and)26 W
/Times-Italic SF
29156 XM
(f)SH
/Times-Roman SF
(\050)SH
/Times-Bold SF
(x)SH
/Times-Roman SF
30733 XM
(|)SH
/Times-Italic SF
(j)SH
/Times-Roman SF
(\051 is the probability that the sample is from Class)26 W
/Times-Italic SF
52907 XM
(j)SH
/Times-Roman SF
(. The)327 W
8 /Times-Italic AF
30378 50125 MT
(k)SH
9 SS 
14338 50140 MT
(k)SH
11 /Times-Roman AF
10800 51519 MT
(probabilities)SH
/Times-Italic SF
16576 XM
(f)SH
/Times-Roman SF
(\050)SH
/Times-Bold SF
(x)SH
/Times-Roman SF
18153 XM
(|)SH
/Times-Italic SF
(j)SH
/Times-Roman SF
(\051 are assigned)
1 W( by the the classifier during adaptive training.  The ML mean)2 W
/Times-Bold SF
51846 XM
(a)SH
/Times-Roman SF
52895 XM
(is then)2 W
8 /Times-Italic AF
17798 51864 MT
(k)SH
52396 XM
(j)SH
11 /Times-Roman AF
10800 53258 MT
(used in the EMAP and LMS-C procedures as in the supervised mode.)SH
/Times-Bold SF
15944 56094 MT
(Adaptation)SH
24890 XM
(Error Rate)SH
34688 XM
(Error Rate)SH
45296 XM
(Percent)SH
17411 57290 MT
(Type)SH
24093 XM
(Without Rules)SH
34655 XM
(With Rules)SH
45294 XM
(Change)SH
25301 58486 MT
(\050SPIRIT\051)SH
34274 XM
(\050PROPHET\051)SH
37392 50 14604 59077 LH BX1
-4080 50 22602 59077 LV BX1
-4080 50 32400 59077 LV BX1
-4080 50 42198 59077 LV BX1
/Times-Roman SF
15003 60192 MT
(Unadapted)SH
26080 XM
(55.3%)SH
35878 XM
(34.6%)SH
45493 XM
(-37.4%)SH
37392 50 14604 60793 LH BX1
15003 61908 MT
(ML)SH
23846 XM
(68.9% \050+24.6%\051)SH
33919 XM
(36.2% \050+4.6%\051)SH
45493 XM
(-47.5%)SH
37392 50 14604 62509 LH BX1
15003 63624 MT
(EMAP)SH
23846 XM
(71.6% \050+29.5%\051)SH
33771 XM
(24.6% \050-28.9%\051)SH
45493 XM
(-65.6%)SH
37392 50 14604 64225 LH BX1
15003 65340 MT
(LMS-C)SH
24121 XM
(58.7% \050+6.1%\051)SH
33771 XM
(24.6% \050-28.9%\051)SH
45493 XM
(-58.1%)SH
37392 10944 50 14604 65941 BX BX1
-6864 50 22602 65941 LV BX1
-6864 50 32400 65941 LV BX1
-6864 50 42198 65941 LV BX1
/Times-Bold SF
17128 67693 MT
(Table 3-2:)SH
/Times-Roman SF
22475 XM
(Error rates of the unadapted and adapted)SH
9 SS 
40584 XM
(SPIRIT)SH
11 SS 
43609 XM
(and)SH
9 SS 
45472 XM
(PROPHET)SH
11 SS 
21082 68889 MT
(systems for the four-class experiment, which includes the)SH
/Times-Italic SF
46649 XM
(son)SH
/Times-Roman SF
48452 XM
(class.)SH
13300 71874 MT
(The results for this first set of experiments)
82 W( are given in Table 3-2.  The second column shows)81 W
ES
%%Page: 70 71
BS
0 SI
10 /Times-Roman AF
54800 4286 MT
(70)SH
11 SS 
10800 7955 MT
(the error rates for the)107 W
9 SS 
20892 XM
(SPIRIT)SH
11 SS 
24024 XM
(system \050without rules\051 and the third column is the)
107 W( error rate using the)108 W
9 SS 
10800 9694 MT
(PROPHET)SH
11 SS 
15208 XM
(system \050with rules\051.  Entries)
133 W( in the last column show the percentage change in error rate)132 W
10800 11433 MT
(between the)171 W
9 SS 
16700 XM
(SPIRIT)SH
11 SS 
19896 XM
(and)SH
9 SS 
21930 XM
(PROPHET)SH
11 SS 
26376 XM
(systems,)SH
/Times-Italic SF
30581 XM
(i.e.)SH
/Times-Roman SF
32817 XM
(change across rows in the table.  The)
171 W( numbers in)172 W
10800 13172 MT
(parentheses in the second and third columns are)
193 W( the percentage change in error rate between the)192 W
10800 14911 MT
(unadapted and adapted systems.  The table indicates that the rules substantially reduced)
35 W( the error rate)36 W
10800 16650 MT
(over that of the baseline system.)
119 W( Inspection)
511 W( of confusion matrices from each experiment indicated)118 W
10800 18389 MT
(that the rules were effective in filtering out the non-front-vowel segments \050the)139 W
/Times-Italic SF
47044 XM
(son)SH
/Times-Roman SF
48986 XM
(class\051 from the)139 W
10800 20128 MT
(front-vowel classifier regions.  This ability to exclude the)133 W
/Times-Italic SF
37535 XM
(son)SH
/Times-Roman SF
39471 XM
(class is crucial for the unsupervised)132 W
10800 21867 MT
(form of adaptation used here, as comparison of columns two and three indicates.  As the)197 W
9 SS 
53050 XM
(SPIRIT)SH
11 SS 
10800 23606 MT
(system adapts, the front-vowel classes learn the characteristics of)
97 W( the)96 W
/Times-Italic SF
42341 XM
(son)SH
/Times-Roman SF
44240 XM
(class because of the large)96 W
10800 25345 MT
(number of)130 W
/Times-Italic SF
15886 XM
(son)SH
/Times-Roman SF
('s which fall in these regions.  This reduces the quality of)
130 W( the front-vowel classifier)131 W
10800 27084 MT
(parameters, resulting in more)115 W
/Times-Italic SF
24425 XM
(son)SH
/Times-Roman SF
26343 XM
(samples being labeled as one of the front vowels.  The)115 W
9 SS 
51800 XM
(PROPHET)SH
11 SS 
10800 28823 MT
(system automatically places segments without all of the characteristics of front vowels into the)107 W
/Times-Italic SF
54272 XM
(son)SH
/Times-Roman SF
10800 30562 MT
(class. These)
353 W( samples cannot adversely affect the front-vowel parameters)
39 W( or classifier boundaries, the)38 W
10800 32301 MT
(gains due to adaptation are therefore much greater.)SH
13300 35286 MT
(To assess the utility of the target-frequency identification rules, a)
116 W( series of three-class experi-)117 W
10800 37025 MT
(ments was performed.  These experiments were identical to)
105 W( the four-class tests in Table 3-2 except)104 W
10800 38764 MT
(that the)63 W
/Times-Italic SF
14470 XM
(son)SH
/Times-Roman SF
16336 XM
(class was excluded.  Results from the three-class experiments are listed in Table 3-3.)
63 W( It)403 W
10800 40503 MT
(appears that the target frequency identification rules)
100 W( adversely affect the error rate for both adapted)99 W
10800 42242 MT
(and unadapted systems.  Further inspection of Table)
80 W( 3-3 shows that the ML systems' error rates are)81 W
10800 43981 MT
(only slightly changed from)
75 W( the unadapted system, while the EMAP and LMS-C systems' error rates)74 W
10800 45720 MT
(are substantially worse than the unadapted.)
75 W( This)
426 W( counterintuitive result is due to inaccuracies in the)76 W
10800 47459 MT
(estimation of the covariance matrix)11 W
/Symbol SF
26708 XM
(S)SH
/Times-Roman SF
27809 XM
(, as will soon be shown.  Inaccurate estimation of)11 W
/Symbol SF
49913 XM
(S)SH
/Times-Roman SF
51300 XM
(causes the)11 W
9 /Times-Italic AF
27359 47819 MT
(o)SH
50564 XM
(o)SH
11 /Times-Roman AF
10800 49198 MT
(coefficient matrices, and hence the mean estimates, in the EMAP and LMS-C procedures to be)
90 W( less)91 W
10800 50937 MT
(than optimal for the data.  This moves the classifier boundaries to orientations)
255 W( which are poor)254 W
10800 52676 MT
(representations of the data,)
100 W( raising the classification error rate.  Given these estimation problems, it)101 W
10800 54415 MT
(cannot be determined whether the target frequency identification rules have any positive effect)
25 W( on the)24 W
10800 56154 MT
(adapted error rates.)SH
/Times-Bold SF
15944 58990 MT
(Adaptation)SH
24890 XM
(Error Rate)SH
34688 XM
(Error Rate)SH
45296 XM
(Percent)SH
17411 60186 MT
(Type)SH
24093 XM
(Without Rules)SH
34655 XM
(With Rules)SH
45294 XM
(Change)SH
25301 61382 MT
(\050SPIRIT\051)SH
34274 XM
(\050PROPHET\051)SH
37392 50 14604 61973 LH BX1
-4080 50 22602 61973 LV BX1
-4080 50 32400 61973 LV BX1
-4080 50 42198 61973 LV BX1
/Times-Roman SF
15003 63088 MT
(Unadapted)SH
26080 XM
(28.7%)SH
35878 XM
(36.7%)SH
45366 XM
(+27.9%)SH
37392 50 14604 63689 LH BX1
15003 64804 MT
(ML)SH
24121 XM
(29.3% \050+2.1%\051)SH
34504 XM
(36.1 \050-1.6%\051)SH
45366 XM
(+23.2%)SH
37392 50 14604 65405 LH BX1
15003 66520 MT
(EMAP)SH
23846 XM
(45.2% \050+57.5%\051)SH
33644 XM
(53.9% \050+46.9%\051)SH
45366 XM
(+19.2%)SH
37392 50 14604 67121 LH BX1
15003 68236 MT
(LMS-C)SH
23846 XM
(44.1% \050+53.6%\051)SH
33644 XM
(51.2% \050+39.5%\051)SH
45366 XM
(+16.1%)SH
37392 10944 50 14604 68837 BX BX1
-6864 50 22602 68837 LV BX1
-6864 50 32400 68837 LV BX1
-6864 50 42198 68837 LV BX1
/Times-Bold SF
17128 70589 MT
(Table 3-3:)SH
/Times-Roman SF
22475 XM
(Error rates of the unadapted and adapted)SH
9 SS 
40584 XM
(SPIRIT)SH
11 SS 
43609 XM
(and)SH
9 SS 
45472 XM
(PROPHET)SH
11 SS 
22809 71785 MT
(systems for the three-class experiment \050)SH
/Times-Italic SF
(son)SH
/Times-Roman SF
42113 XM
(class excluded\051.)SH
ES
%%Page: 71 72
BS
0 SI
10 /Times-Roman AF
54800 4286 MT
(71)SH
11 SS 
13300 7955 MT
(That the covariance matrix)105 W
/Symbol SF
25814 XM
(S)SH
/Times-Roman SF
27295 XM
(is poorly estimated can be deduced as follows.  First, the error)106 W
9 /Times-Italic AF
26465 8315 MT
(o)SH
11 /Times-Roman AF
10800 9694 MT
(rates from the ML-adapted systems are only slightly changed)
113 W( from the unadapted error rates.  This)112 W
10800 11433 MT
(small change is expected given the)
157 W( relatively small number of observations.  The main difference)158 W
10800 13172 MT
(between the ML and the other estimators is that the ML estimate does not make use of the statistics)73 W
/Symbol SF
10800 14911 MT
(m)SH
/Times-Roman SF
11884 XM
(,)SH
/Symbol SF
12506 XM
(S)SH
/Times-Roman SF
13607 XM
(, or)72 W
/Symbol SF
15492 XM
(S)SH
/Times-Roman SF
(. The)
419 W( mean)
72 W( vector)73 W
/Symbol SF
24995 XM
(m)SH
/Times-Roman SF
26427 XM
(and covariance matrix)73 W
/Symbol SF
36693 XM
(S)SH
/Times-Roman SF
37692 XM
(are reliably estimated because data from)73 W
9 /Times-Italic AF
11434 15271 MT
(o)SH
13157 XM
(o)SH
25629 XM
(o)SH
11 /Times-Roman AF
10800 16650 MT
(all speakers can be)
142 W( pooled to obtain them.  An estimate of the covariance matrix)141 W
/Symbol SF
48472 XM
(S)SH
/Times-Roman SF
49573 XM
(, on the other)141 W
9 /Times-Italic AF
49123 17010 MT
(o)SH
11 /Times-Roman AF
10800 18389 MT
(hand, is formed as the sum of the outer product of each speaker's mean)
124 W( vector and so is based on)125 W
10800 20128 MT
(fewer summands.  If these individuals' means)
187 W( are poorly estimated because few observations are)186 W
10800 21867 MT
(available from a class, the resulting statistic \050)75 W
/Symbol SF
(S)SH
/Times-Roman SF
32282 XM
(\051 will not accurately represent the distribution of the)76 W
9 /Times-Italic AF
31832 22227 MT
(o)SH
/Times-Roman SF
16106 23243 MT
(12)SH
11 SS 
10800 23606 MT
(true means.)236 W
17517 XM
(This claim is supported by the results experiments using computer-generated)
236 W( data)235 W
10800 25345 MT
(which are reported in the next section.)SH
/Times-Bold SF
10800 28242 MT
(3.6.2.3. Experiments with Computer-Generated Data)SH
/Times-Roman SF
13300 30797 MT
(The speech data from the TIMIT prototype CD-ROM were chosen for this thesis because they)73 W
10800 32536 MT
(represent the largest)
35 W( body of phonetically-transcribed data available on-line.  Unfortunately, there are)34 W
10800 34275 MT
(not enough data available per)
307 W( speaker to address some of the adaptation issues in this study.)308 W
10800 36014 MT
(Computer-generated data with statistics equal to those estimated from the TIMIT data)
33 W( will be used to)32 W
10800 37753 MT
(investigate these issues.  Tests on these computer-generated data will provide)
55 W( an upper bound on the)56 W
10800 39492 MT
(expected performance with real data.  Due to the good agreement between)
48 W( the)47 W
9 SS 
45992 XM
(SPIRIT)SH
11 SS 
49064 XM
(system's three-)47 W
10800 41231 MT
(class unadapted error rate \05028.7%\051 and the corresponding computer)
53 W( simulations \05029.8%\051, simulations)54 W
10800 42970 MT
(reported here consider only this set of statistics.)SH
13300 45955 MT
(For each experiment, the results were averaged over 25)
34 W( trials.  For each trial a true mean vector)33 W
/Symbol SF
10800 47694 MT
(m)SH
/Times-Roman SF
12070 XM
(was generated according to the distribution)111 W
/Times-Italic SF
31980 XM
(N)SH
/Times-Roman SF
(\050)SH
/Symbol SF
(m)SH
/Times-Roman SF
34164 XM
(,)SH
/Symbol SF
(S)SH
/Times-Roman SF
35540 XM
(\051 as specified by the)
111 W( front vowel statistics in)112 W
9 /Times-Italic AF
11434 48054 MT
(t)SH
33714 XM
(o)SH
35090 XM
(o)SH
11 /Times-Roman AF
10800 49433 MT
(Appendix C. Assuming)
20 W( equal prior class probabilities, 512 samples of evaluation data were generated)19 W
10800 51172 MT
(according to)61 W
/Times-Italic SF
16664 XM
(N)SH
/Times-Roman SF
(\050)SH
/Symbol SF
(m)SH
/Times-Roman SF
18648 XM
(,)SH
/Symbol SF
(S)SH
/Times-Roman SF
(\051. Additional)
397 W( adaptation training data were generated as)
61 W( needed.  The adaptation)62 W
9 /Times-Italic AF
18398 51532 MT
(t)SH
11 /Times-Roman AF
10800 52911 MT
(training data were used)
10 W( to find an estimate of the trial mean using ML, EMAP, or LMS-C procedures.)9 W
10800 54650 MT
(Each mean estimate was initialized)
4 W( with the)5 W
/Times-Italic SF
30412 XM
(a priori)5 W
/Times-Roman SF
34090 XM
(mean)SH
/Symbol SF
36752 XM
(m)SH
/Times-Roman SF
37836 XM
(. After)
285 W( the adaptive training process, the)5 W
9 /Times-Italic AF
37386 55010 MT
(o)SH
11 /Times-Roman AF
10800 56389 MT
(512 evaluation data were classified)
38 W( using the adapted mean vector and the)37 W
/Times-Italic SF
44112 XM
(a priori)37 W
/Times-Roman SF
47854 XM
(covariance matrix)37 W
10800 58128 MT
(as the classifier parameters.)SH
13300 61113 MT
(The first tests with computer-generated data were intended to show the effect on error)
107 W( rate of)108 W
10800 62852 MT
(the type of feedback)
48 W( describing which class was correct that is supplied to the adaptation algorithms.)47 W
10800 64591 MT
(In Chapter 2, it was assumed that)
102 W( the training samples were labeled.  Since this "supervised" adap-)103 W
10800 50 10800 68072 UL
7 SS 
11700 69573 MT
(12)SH
9 SS 
12400 69900 MT
(It should be pointed out that the)
109 W( ML mean estimate performed reasonably well in classification tests because it was)108 W
10800 70914 MT
(initialized with)79 W
/Symbol SF
16608 XM
(m)SH
/Times-Roman SF
17476 XM
(, which lessens the effect of a lack of data.)
79 W( This)
385 W( initialization wasn't used in estimation of)80 W
/Symbol SF
51607 XM
(S)SH
/Times-Roman SF
52795 XM
(to avoid)80 W
7 /Times-Italic AF
17126 71239 MT
(o)SH
52140 XM
(o)SH
9 /Times-Roman AF
10800 72000 MT
(adding any bias to this statistic.)SH
ES
%%Page: 72 73
BS
0 SI
10 /Times-Roman AF
54800 4286 MT
(72)SH
11 SS 
10800 7955 MT
(tation mode is unrealistic for phonetic classification in continuous speech,)
92 W( two methods of unsuper-)91 W
10800 9694 MT
(vised adaptation were considered.  The first method was the probabilistic update specified by)
79 W( Equa-)80 W
10800 11433 MT
(tion \0503.5\051.  The second)
50 W( method was similar in that it was based on the sample's probabilities of class)49 W
10800 13172 MT
(membership; the difference was that only the most likely class was updated.  These)
4 W( two approaches to)5 W
10800 14911 MT
(unsupervised feedback to the classifier are referred to as soft-decision and hard-decision)
139 W( feedback,)138 W
10800 16650 MT
(respectively.)SH
13300 19635 MT
(Figure 3-11 shows the error rate for ML adaptation versus the)
138 W( number of adaptation training)139 W
10800 21374 MT
(samples for the supervised and two unsupervised adaptation methods.  As)
186 W( one would expect, the)185 W
10800 23113 MT
(supervised adaptation error rates \050lower curve\051 are consistently)
31 W( lower than the unsupervised methods.)32 W
10800 24852 MT
(The soft-decision error rates are a few percent higher than the supervised)
36 W( rates, and the hard-decision)35 W
10800 26591 MT
(rates are, at least asymptotically, only slightly higher than those of the)
15 W( soft-decision method.  The rise)16 W
10800 28330 MT
(in the hard-decision error rate after 10 training samples occurs because 10 tokens)
176 W( do not provide)175 W
10800 30069 MT
(enough information to obtain a good mean)
220 W( vector estimate when some of the class membership)221 W
10800 31808 MT
(decisions are wrong.  The soft-decision curve does not exhibit this)
121 W( behavior because every class is)120 W
10800 33547 MT
(updated, even if only slightly, after each observation.  For these reasons, only)
238 W( the soft-decision)239 W
10800 35286 MT
(method of unsupervised adaptation is considered in the remainder of this section.)SH
765 1000 0 18000 55301 GB 
%%BeginDocument: /usr0/rozzi/Documentation/PhDThesis/Chapter3/MLProbErrVsFdbk.eps
%!PS-Adobe-2.0 EPSF-1.2
%%BoundingBox: 0 0 400 246
%%Creator: Mathematica
%%Title: Clipboard
%%CreationDate: Never Never
%%EndComments
50 dict begin
/Mnodistort true def
/pageDashArray [4] def
/nullDashArray [] def

% Compute the minimum of two numbers.
/Mmin {         % p q Mmin min(p,q)
        2 copy          % p q p q
        gt              % p q p>q?
        { exch } if     % min(p,q) max(p,q)
        pop             % min(p,q)
} bind def


% Compute the maximum of two numbers.
/Mmax {         % p q Mmax max(p,q)
        2 copy          % p q p q
        lt              % p q p<q?
        { exch } if     % max(p,q) min(p,q)
        pop             % max(p,q)
} bind def

/Mpstart {
    MathPictureStart
} bind def
/Mpend {
    MathPictureEnd
} bind def
/Mscale {
    0 1 0 1
    5 -1 roll
    MathScale
} bind def
/Plain
        /Courier findfont
def
/Bold
        /Courier-Bold findfont
def
/Italic
        /Courier-Oblique findfont
def
/MathPictureStart {
        gsave
        newpath
        /Mtmatrix
        matrix currentmatrix
        def
        Plain
        Mfontsize scalefont
        setfont
0 setgray 0 setlinewidth
} bind def
/MathPictureEnd {
        grestore
} bind def
/Mdot {
        moveto
        0 0 rlineto
        stroke
} def
/Mtetra {
        moveto
        lineto
        lineto
        lineto
        fill
} def
/Metetra {
        moveto
        lineto
        lineto
        lineto
        closepath
        gsave
        fill
        grestore
        0 setgray
        stroke
} def
/Mistroke {
        flattenpath
        0 0 0
        {
        4 2 roll
        pop pop
        }
        {
        4 -1 roll
        2 index
        sub dup mul
        4 -1 roll
        2 index
        sub dup mul
        add sqrt
        4 -1 roll
        add
        3 1 roll
        }
        {
        stop
        }
        {
        stop
        }
        pathforall
        pop pop
        currentpoint
        stroke
        moveto
        currentdash
        3 -1 roll
        add
        setdash
} def
/Mfstroke {
        stroke
        currentdash
        pop 0
        setdash
} def
/Msboxa {
        newpath
        5 -1 roll
        Mvboxa
        pop
        6 -1 roll
        5 -1 roll
        4 -1 roll
        Msboxa1
        5 -3 roll
        Msboxa1
        [
        7 -2 roll
        [ 2 index 2 index
        10 -1 roll
        9 -1 roll
        ]
        6 1 roll
        5 -2 roll
        ]
} bind def
        
/Msboxa1 {
        sub
        2 div
        dup
        2 index
        1 add
        mul
        3 -1 roll
        -1 add
        3 -1 roll
        mul
} bind def
/Mvboxa {
        gsave
        newpath
        [ true
        3 -1 roll
        {
        Mbbox
        5 -1 roll
        {
        0
        5 1 roll
        }
        {
        7 -1 roll
        exch sub
        (m) stringwidth pop
        .3 mul
        sub
        7 1 roll
        6 -1 roll
        4 -1 roll
        Mmin
        3 -1 roll
        5 index
        add
        5 -1 roll
        4 -1 roll
        Mmax
        4 -1 roll
        }
        ifelse
        false
        }
        forall
        { stop } if
        counttomark
        1 add
        4 roll
        ]
        grestore
} bind def
/Mbbox {
        0 0 moveto
        false charpath
        flattenpath
        pathbbox
        newpath
} bind def
/Mmin {
        2 copy
        gt
        { exch } if
        pop
} bind def
/Mmax {
        2 copy
        lt
        { exch } if
        pop
} bind def
/Mshowa {
        4 -2 roll
        moveto
        2 index
        Mtmatrix setmatrix
        Mvboxa
        7 1 roll
        6 -1 roll
        5 -1 roll
        4 -1 roll
        Mshowa1
        4 1 roll
        Mshowa1
        rmoveto
        currentpoint
        0 1
        4 index length
        -1 add
        {
        2 index
        4 index
        2 index
        get
        3 index
        add
        moveto
        4 index
        exch get
        show
        } for
        pop pop pop pop
        Mgmatrix setmatrix
} bind def
/Mshowa1 {
        2 copy
        add
        4 1 roll
        sub
        mul
        sub
        -2 div
} bind def
/MathScale {
        Mwidth
        Mheight
        Mlp
        translate
        scale
        /Mgmatrix
        matrix currentmatrix
        def
        /Msaveaa exch def
        /Msavebb exch def
        /Msavecc exch def
        /Msavedd exch def
} bind def
/Mlp {
        3 copy
        Mlpfirst
        {
        Mnodistort
        {
        Mmin
        dup
        } if
        4 index
        2 index
        2 index
        Mlprun
        11 index
        11 -1 roll
        10 -4 roll
        Mlp1
        8 index
        9 -5 roll
        Mlp1
        4 -1 roll
        and
        { exit } if
        3 -1 roll
        pop pop
        } loop
        exch
        3 1 roll
        7 -3 roll
        pop pop pop
} bind def
/Mlpfirst {
        3 -1 roll
        dup length
        2 copy
        -2 add
        get
        aload
        pop pop pop
        4 -2 roll
        -1 add
        get
        aload
        pop pop pop
        6 -1 roll
        3 -1 roll
        5 -1 roll
        sub
        dup /MsaveAx exch def
        div
        4 1 roll
        exch sub
        dup /MsaveAy exch def
        div
} bind def
/Mlprun {
        2 copy
        4 index
        0 get
        dup
        4 1 roll
        Mlprun1
        3 copy
        8 -2 roll
        9 -1 roll
        {
        3 copy
        Mlprun1
        3 copy
        11 -3 roll
        /gt Mlpminmax
        8 3 roll
        11 -3 roll
        /lt Mlpminmax
        8 3 roll
        } forall
        pop pop pop pop
        3 1 roll
        pop pop
        aload pop
        5 -1 roll
        aload pop
        exch
        6 -1 roll
        Mlprun2
        8 2 roll
        4 -1 roll
        Mlprun2
        6 2 roll
        3 -1 roll
        Mlprun2
        4 2 roll
        exch
        Mlprun2
        6 2 roll
} bind def
/Mlprun1 {
        aload pop
        exch
        6 -1 roll
        5 -1 roll
        mul add
        4 -2 roll
        mul
        3 -1 roll
        add
} bind def
/Mlprun2 {
        2 copy
        add 2 div
        3 1 roll
        exch sub
} bind def
/Mlpminmax {
        cvx
        2 index
        6 index
        2 index
        exec
        {
        7 -3 roll
        4 -1 roll
        } if
        1 index
        5 index
        3 -1 roll
        exec
        {
        4 1 roll
        pop
        5 -1 roll
        aload
        pop pop
        4 -1 roll
        aload pop
        [
        8 -2 roll
        pop
        5 -2 roll
        pop
        6 -2 roll
        pop
        5 -1 roll
        ]
        4 1 roll
        pop
        }
        {
        pop pop pop
        } ifelse
} bind def
/Mlp1 {
        5 index
        3 index sub
        5 index
        2 index mul
        1 index
        le
        1 index
        0 le
        or
        dup
        not
        {
        1 index
        3 index div
        .99999 mul
        8 -1 roll
        pop
        7 1 roll
        }
        if
        8 -1 roll
        2 div
        7 -2 roll
        pop sub
        5 index
        6 -3 roll
        pop pop
        mul sub
        exch
} bind def
/Mfontsize      12 def
/Mleft          0.000000 def
/Mbottom        246.000000 def
/Mwidth         400.000000 def
/Mheight        246.000000 def
/Courier findfont 12 scalefont setfont
%!
%%Creator: Mathematica
%%AspectRatio: 0.61803 
MathPictureStart
% Scaling calculations
0.02381 0.00476 -0.45712 0.03285 [
[(50)] 0.2619 0.02307 0 1 Msboxa
[(100)] 0.5 0.02307 0 1 Msboxa
[(150)] 0.7381 0.02307 0 1 Msboxa
[(200)] 0.97619 0.02307 0 1 Msboxa
[(17.5)] 0.01131 0.11769 1 0 Msboxa
[(20)] 0.01131 0.1998 1 0 Msboxa
[(22.5)] 0.01131 0.28192 1 0 Msboxa
[(25)] 0.01131 0.36403 1 0 Msboxa
[(27.5)] 0.01131 0.44615 1 0 Msboxa
[(30)] 0.01131 0.52827 1 0 Msboxa
[(32.5)] 0.01131 0.61038 1 0 Msboxa
[ -0.001 -0.001 0 0 ]
[ 1.001 0.61903 0 0 ]
] MathScale
% Start of Graphics
1 setlinecap
1 setlinejoin
newpath
%%Object: Graphics
[ ] 0 setdash
0 setgray
gsave
gsave
0.002 setlinewidth
0 0.03557 moveto
1 0.03557 lineto
stroke
0.2619 0.02932 moveto
0.2619 0.04182 lineto
stroke
0 setgray
[(50)] 0.2619 0.02307 0 1 Mshowa
0.5 0.02932 moveto
0.5 0.04182 lineto
stroke
0 setgray
[(100)] 0.5 0.02307 0 1 Mshowa
0.7381 0.02932 moveto
0.7381 0.04182 lineto
stroke
0 setgray
[(150)] 0.7381 0.02307 0 1 Mshowa
0.97619 0.02932 moveto
0.97619 0.04182 lineto
stroke
0 setgray
[(200)] 0.97619 0.02307 0 1 Mshowa
0.02381 0 moveto
0.02381 0.61803 lineto
stroke
0.01756 0.11769 moveto
0.03006 0.11769 lineto
stroke
0 setgray
[(17.5)] 0.01131 0.11769 1 0 Mshowa
0.01756 0.1998 moveto
0.03006 0.1998 lineto
stroke
0 setgray
[(20)] 0.01131 0.1998 1 0 Mshowa
0.01756 0.28192 moveto
0.03006 0.28192 lineto
stroke
0 setgray
[(22.5)] 0.01131 0.28192 1 0 Mshowa
0.01756 0.36403 moveto
0.03006 0.36403 lineto
stroke
0 setgray
[(25)] 0.01131 0.36403 1 0 Mshowa
0.01756 0.44615 moveto
0.03006 0.44615 lineto
stroke
0 setgray
[(27.5)] 0.01131 0.44615 1 0 Mshowa
0.01756 0.52827 moveto
0.03006 0.52827 lineto
stroke
0 setgray
[(30)] 0.01131 0.52827 1 0 Mshowa
0.01756 0.61038 moveto
0.03006 0.61038 lineto
stroke
0 setgray
[(32.5)] 0.01131 0.61038 1 0 Mshowa
grestore
grestore

% legend and panel label
[(Hard)] 0.72 0.48125 0 -1 Mshowa
[(Soft)] 0.72 0.43125 0 -1 Mshowa
[(Supervised)] 0.78 0.38125 0 -1 Mshowa
gsave
0.5 setgray
0.005 setlinewidth
0.53 0.494 moveto
0.66 0.494 lineto
stroke
0.25 setgray
0.53 0.444 moveto
0.66 0.444 lineto
stroke
0. setgray
0.53 0.394 moveto
0.66 0.394 lineto
stroke
grestore


0 0 moveto
1 0 lineto
1 0.618034 lineto
0 0.618034 lineto
closepath
clip
newpath
0 setgray
gsave
gsave
0.004 setlinewidth
0.0 setgray
0.02381 0.5212 moveto
0.07143 0.28097 lineto
0.14286 0.07246 lineto
0.2619 0.0606 lineto
0.5 0.03235 lineto
0.97619 0.01472 lineto
stroke
grestore
gsave
0.004 setlinewidth
0.25 setgray
0.02381 0.5212 moveto
0.07143 0.33483 lineto
0.14286 0.24375 lineto
0.2619 0.23607 lineto
0.5 0.21166 lineto
0.97619 0.19658 lineto
stroke
grestore
gsave
0.004 setlinewidth
0.5 setgray
0.02381 0.5212 moveto
0.07143 0.60332 lineto
0.14286 0.31013 lineto
0.2619 0.3374 lineto
0.5 0.24408 lineto
0.97619 0.22128 lineto
stroke
grestore
grestore
% End of Graphics
MathPictureEnd
%%EPS Trailer
end

%%EndDocument
 GE /Times-Bold SF
16578 57053 MT
(Figure 3-11:)SH
/Times-Roman SF
22901 XM
(Error rates for ML adapted baseline system for three forms of)SH
24382 58249 MT
(feedback: hard-decision, soft-decision, and supervised.)SH
13300 61234 MT
(Motivated by the reestimation procedures)
60 W( from hidden Markov model theory \050see Section 4.2\051,)59 W
10800 62973 MT
(a similar process of)
51 W( multiple iterations of the unsupervised adaptation algorithm was investigated for)52 W
10800 64712 MT
(the feature-based classification problem.  Each iteration consisted of initialization of the mean es-)158 W
10800 66451 MT
(timate to)47 W
/Symbol SF
15050 XM
(m)SH
/Times-Roman SF
16134 XM
(, followed by adaptive training.  After each pass through the adaptation training data,)
47 W( the)48 W
9 /Times-Italic AF
15684 66811 MT
(o)SH
11 /Times-Roman AF
10800 68190 MT
(current classifier mean vectors were replaced by)
148 W( the new estimates, and the process was repeated.)147 W
10800 69929 MT
(Since the probabilities assigned to each training sample \050and the elements)
44 W( of the matrix)45 W
/Times-Bold SF
50094 XM
(N)SH
/Times-Roman SF
(\051 are deter-)45 W
10800 71668 MT
(mined by the)
239 W( current classifier parameters, each iteration through the training data refines these)238 W
ES
%%Page: 73 74
BS
0 SI
10 /Times-Roman AF
54800 4286 MT
(73)SH
11 SS 
10800 7955 MT
(probabilities until they converge.  Iteration)
43 W( in this manner allows the unsupervised estimates to come)44 W
10800 9694 MT
(closer to the level of error of the supervised estimates.)SH
13300 12679 MT
(Figure 3-12 shows ML, EMAP, and LMS-C error rates)
64 W( as a function of the number of training)63 W
10800 14418 MT
(samples after one \050left\051 and five \050right\051 iterations of the soft-decision adaptation)
201 W( algorithm.  The)202 W
10800 16157 MT
(LMS-C error rates are close to the EMAP rates when the number of training samples is)
110 W( small, and)109 W
10800 17896 MT
(both are obviously better than)
154 W( the ML rates.  Specifically, given 10 training samples and a single)155 W
10800 19635 MT
(iteration of adaptive training, the ML estimate reduced the error rate by 19.1% \050comparable to the)131 W
9 SS 
10800 21374 MT
(ANGEL)SH
11 SS 
14297 XM
(result of 21.8%\051.  The EMAP and)
172 W( LMS-C estimates reduced the error rate by 29.3% and)173 W
10800 23113 MT
(26.3%, respectively.  The asymptotic error rate for all)
121 W( estimators is approximately 20.5% after one)120 W
10800 24852 MT
(iteration and)
73 W( 18.5% after five iterations.  The supervised asymptotic error rate was determined to be)74 W
10800 26591 MT
(15% \050see Figure 3-11\051, so the multiple iterations were able to)
89 W( reduce the error rate by an additional)88 W
10800 28330 MT
(10%, or about 36% of the difference between the one iteration and supervised levels.)SH
540 1000 0 11700 42972 GB 
%%BeginDocument: /usr0/rozzi/Documentation/PhDThesis/Chapter3/AllOneIter.eps
%!PS-Adobe-2.0 EPSF-1.2
%%BoundingBox: 0 0 400 249
%%Creator: Mathematica
%%Title: Clipboard
%%CreationDate: Never Never
%%EndComments
50 dict begin
/Mnodistort true def
/pageDashArray [4] def
/nullDashArray [] def

% Compute the minimum of two numbers.
/Mmin {         % p q Mmin min(p,q)
        2 copy          % p q p q
        gt              % p q p>q?
        { exch } if     % min(p,q) max(p,q)
        pop             % min(p,q)
} bind def


% Compute the maximum of two numbers.
/Mmax {         % p q Mmax max(p,q)
        2 copy          % p q p q
        lt              % p q p<q?
        { exch } if     % max(p,q) min(p,q)
        pop             % max(p,q)
} bind def

/Mpstart {
    MathPictureStart
} bind def
/Mpend {
    MathPictureEnd
} bind def
/Mscale {
    0 1 0 1
    5 -1 roll
    MathScale
} bind def
/Plain
        /Courier findfont
def
/Bold
        /Courier-Bold findfont
def
/Italic
        /Courier-Oblique findfont
def
/MathPictureStart {
        gsave
        newpath
        /Mtmatrix
        matrix currentmatrix
        def
        Plain
        Mfontsize scalefont
        setfont
0 setgray 0 setlinewidth
} bind def
/MathPictureEnd {
        grestore
} bind def
/Mdot {
        moveto
        0 0 rlineto
        stroke
} def
/Mtetra {
        moveto
        lineto
        lineto
        lineto
        fill
} def
/Metetra {
        moveto
        lineto
        lineto
        lineto
        closepath
        gsave
        fill
        grestore
        0 setgray
        stroke
} def
/Mistroke {
        flattenpath
        0 0 0
        {
        4 2 roll
        pop pop
        }
        {
        4 -1 roll
        2 index
        sub dup mul
        4 -1 roll
        2 index
        sub dup mul
        add sqrt
        4 -1 roll
        add
        3 1 roll
        }
        {
        stop
        }
        {
        stop
        }
        pathforall
        pop pop
        currentpoint
        stroke
        moveto
        currentdash
        3 -1 roll
        add
        setdash
} def
/Mfstroke {
        stroke
        currentdash
        pop 0
        setdash
} def
/Msboxa {
        newpath
        5 -1 roll
        Mvboxa
        pop
        6 -1 roll
        5 -1 roll
        4 -1 roll
        Msboxa1
        5 -3 roll
        Msboxa1
        [
        7 -2 roll
        [ 2 index 2 index
        10 -1 roll
        9 -1 roll
        ]
        6 1 roll
        5 -2 roll
        ]
} bind def
        
/Msboxa1 {
        sub
        2 div
        dup
        2 index
        1 add
        mul
        3 -1 roll
        -1 add
        3 -1 roll
        mul
} bind def
/Mvboxa {
        gsave
        newpath
        [ true
        3 -1 roll
        {
        Mbbox
        5 -1 roll
        {
        0
        5 1 roll
        }
        {
        7 -1 roll
        exch sub
        (m) stringwidth pop
        .3 mul
        sub
        7 1 roll
        6 -1 roll
        4 -1 roll
        Mmin
        3 -1 roll
        5 index
        add
        5 -1 roll
        4 -1 roll
        Mmax
        4 -1 roll
        }
        ifelse
        false
        }
        forall
        { stop } if
        counttomark
        1 add
        4 roll
        ]
        grestore
} bind def
/Mbbox {
        0 0 moveto
        false charpath
        flattenpath
        pathbbox
        newpath
} bind def
/Mmin {
        2 copy
        gt
        { exch } if
        pop
} bind def
/Mmax {
        2 copy
        lt
        { exch } if
        pop
} bind def
/Mshowa {
        4 -2 roll
        moveto
        2 index
        Mtmatrix setmatrix
        Mvboxa
        7 1 roll
        6 -1 roll
        5 -1 roll
        4 -1 roll
        Mshowa1
        4 1 roll
        Mshowa1
        rmoveto
        currentpoint
        0 1
        4 index length
        -1 add
        {
        2 index
        4 index
        2 index
        get
        3 index
        add
        moveto
        4 index
        exch get
        show
        } for
        pop pop pop pop
        Mgmatrix setmatrix
} bind def
/Mshowa1 {
        2 copy
        add
        4 1 roll
        sub
        mul
        sub
        -2 div
} bind def
/MathScale {
        Mwidth
        Mheight
        Mlp
        translate
        scale
        /Mgmatrix
        matrix currentmatrix
        def
        /Msaveaa exch def
        /Msavebb exch def
        /Msavecc exch def
        /Msavedd exch def
} bind def
/Mlp {
        3 copy
        Mlpfirst
        {
        Mnodistort
        {
        Mmin
        dup
        } if
        4 index
        2 index
        2 index
        Mlprun
        11 index
        11 -1 roll
        10 -4 roll
        Mlp1
        8 index
        9 -5 roll
        Mlp1
        4 -1 roll
        and
        { exit } if
        3 -1 roll
        pop pop
        } loop
        exch
        3 1 roll
        7 -3 roll
        pop pop pop
} bind def
/Mlpfirst {
        3 -1 roll
        dup length
        2 copy
        -2 add
        get
        aload
        pop pop pop
        4 -2 roll
        -1 add
        get
        aload
        pop pop pop
        6 -1 roll
        3 -1 roll
        5 -1 roll
        sub
        dup /MsaveAx exch def
        div
        4 1 roll
        exch sub
        dup /MsaveAy exch def
        div
} bind def
/Mlprun {
        2 copy
        4 index
        0 get
        dup
        4 1 roll
        Mlprun1
        3 copy
        8 -2 roll
        9 -1 roll
        {
        3 copy
        Mlprun1
        3 copy
        11 -3 roll
        /gt Mlpminmax
        8 3 roll
        11 -3 roll
        /lt Mlpminmax
        8 3 roll
        } forall
        pop pop pop pop
        3 1 roll
        pop pop
        aload pop
        5 -1 roll
        aload pop
        exch
        6 -1 roll
        Mlprun2
        8 2 roll
        4 -1 roll
        Mlprun2
        6 2 roll
        3 -1 roll
        Mlprun2
        4 2 roll
        exch
        Mlprun2
        6 2 roll
} bind def
/Mlprun1 {
        aload pop
        exch
        6 -1 roll
        5 -1 roll
        mul add
        4 -2 roll
        mul
        3 -1 roll
        add
} bind def
/Mlprun2 {
        2 copy
        add 2 div
        3 1 roll
        exch sub
} bind def
/Mlpminmax {
        cvx
        2 index
        6 index
        2 index
        exec
        {
        7 -3 roll
        4 -1 roll
        } if
        1 index
        5 index
        3 -1 roll
        exec
        {
        4 1 roll
        pop
        5 -1 roll
        aload
        pop pop
        4 -1 roll
        aload pop
        [
        8 -2 roll
        pop
        5 -2 roll
        pop
        6 -2 roll
        pop
        5 -1 roll
        ]
        4 1 roll
        pop
        }
        {
        pop pop pop
        } ifelse
} bind def
/Mlp1 {
        5 index
        3 index sub
        5 index
        2 index mul
        1 index
        le
        1 index
        0 le
        or
        dup
        not
        {
        1 index
        3 index div
        .99999 mul
        8 -1 roll
        pop
        7 1 roll
        }
        if
        8 -1 roll
        2 div
        7 -2 roll
        pop sub
        5 index
        6 -3 roll
        pop pop
        mul sub
        exch
} bind def
/Mfontsize      12 def
/Mleft          0.000000 def
/Mbottom        249.000000 def
/Mwidth         400.000000 def
/Mheight        249.000000 def
/Courier findfont 12 scalefont setfont
%!
%%Creator: Mathematica
%%AspectRatio: 0.61803 
MathPictureStart
% Scaling calculations
0.02381 0.00952 -0.8082 0.04754 [
[(20)] 0.21429 -0.0125 0 1 Msboxa
[(40)] 0.40476 -0.0125 0 1 Msboxa
[(60)] 0.59524 -0.0125 0 1 Msboxa
[(80)] 0.78571 -0.0125 0 1 Msboxa
[(100)] 0.97619 -0.0125 0 1 Msboxa
[(18)] 0.01131 0.04754 1 0 Msboxa
[(20)] 0.01131 0.14262 1 0 Msboxa
[(22)] 0.01131 0.23771 1 0 Msboxa
[(24)] 0.01131 0.33279 1 0 Msboxa
[(26)] 0.01131 0.42787 1 0 Msboxa
[(28)] 0.01131 0.52295 1 0 Msboxa
[(30)] 0.01131 0.61803 1 0 Msboxa
[ -0.001 -0.00725 0 0 ]
[ 1.001 0.61903 0 0 ]
] MathScale
% Start of Graphics
1 setlinecap
1 setlinejoin
newpath
%%Object: Graphics
[ ] 0 setdash
0 setgray
gsave
gsave
0.002 setlinewidth
0 0 moveto
1 0 lineto
stroke
0.21429 -0.00625 moveto
0.21429 0.00625 lineto
stroke
0 setgray
[(20)] 0.21429 -0.0125 0 1 Mshowa
0.40476 -0.00625 moveto
0.40476 0.00625 lineto
stroke
0 setgray
[(40)] 0.40476 -0.0125 0 1 Mshowa
0.59524 -0.00625 moveto
0.59524 0.00625 lineto
stroke
0 setgray
[(60)] 0.59524 -0.0125 0 1 Mshowa
0.78571 -0.00625 moveto
0.78571 0.00625 lineto
stroke
0 setgray
[(80)] 0.78571 -0.0125 0 1 Mshowa
0.97619 -0.00625 moveto
0.97619 0.00625 lineto
stroke
0 setgray
[(100)] 0.97619 -0.0125 0 1 Mshowa
0.02381 0 moveto
0.02381 0.61803 lineto
stroke
0.01756 0.04754 moveto
0.03006 0.04754 lineto
stroke
0 setgray
[(18)] 0.01131 0.04754 1 0 Mshowa
0.01756 0.14262 moveto
0.03006 0.14262 lineto
stroke
0 setgray
[(20)] 0.01131 0.14262 1 0 Mshowa
0.01756 0.23771 moveto
0.03006 0.23771 lineto
stroke
0 setgray
[(22)] 0.01131 0.23771 1 0 Mshowa
0.01756 0.33279 moveto
0.03006 0.33279 lineto
stroke
0 setgray
[(24)] 0.01131 0.33279 1 0 Mshowa
0.01756 0.42787 moveto
0.03006 0.42787 lineto
stroke
0 setgray
[(26)] 0.01131 0.42787 1 0 Mshowa
0.01756 0.52295 moveto
0.03006 0.52295 lineto
stroke
0 setgray
[(28)] 0.01131 0.52295 1 0 Mshowa
0.01756 0.61803 moveto
0.03006 0.61803 lineto
stroke
0 setgray
[(30)] 0.01131 0.61803 1 0 Mshowa
grestore
grestore

% legend and panel label
[(ML)] 0.7 0.43125 0 -1 Mshowa
[(EMAP)] 0.73 0.38125 0 -1 Mshowa
[(LMS-C)] 0.74 0.33125 0 -1 Mshowa
[(\(a\))] 0.7 0.53125 0 -1 Mshowa
gsave
0.67 setgray
0.005 setlinewidth
0.53 0.444 moveto
0.66 0.444 lineto
stroke
0.33 setgray
0.53 0.394 moveto
0.66 0.394 lineto
stroke
0. setgray
0.53 0.344 moveto
0.66 0.344 lineto
stroke
grestore

0 0 moveto
1 0 lineto
1 0.618034 lineto
0 0.618034 lineto
closepath
clip
newpath
0 setgray
gsave
gsave
0.004 setlinewidth
0.67 setgray
0.02381 0.60781 moveto
0.11905 0.33806 lineto
0.2619 0.20623 lineto
0.5 0.19511 lineto
0.97619 0.15979 lineto
stroke
grestore
gsave
0.004 setlinewidth
0.33 setgray
0.02381 0.60781 moveto
0.11905 0.19321 lineto
0.2619 0.14495 lineto
0.5 0.16307 lineto
0.97619 0.15793 lineto
stroke
grestore
gsave
0.004 setlinewidth
0.02381 0.60781 moveto
0.11905 0.23595 lineto
0.2619 0.18303 lineto
0.5 0.19092 lineto
0.97619 0.17096 lineto
stroke
grestore
grestore
% End of Graphics
MathPictureEnd
%%EPS Trailer
end

%%EndDocument
 GE 540 1000 0 33300 42972 GB 
%%BeginDocument: /usr0/rozzi/Documentation/PhDThesis/Chapter3/AllFiveIter.eps
%!PS-Adobe-2.0 EPSF-1.2
%%BoundingBox: 0 0 400 249
%%Creator: Mathematica
%%Title: Clipboard
%%CreationDate: Never Never
%%EndComments
50 dict begin
/Mnodistort true def
/pageDashArray [4] def
/nullDashArray [] def

% Compute the minimum of two numbers.
/Mmin {         % p q Mmin min(p,q)
        2 copy          % p q p q
        gt              % p q p>q?
        { exch } if     % min(p,q) max(p,q)
        pop             % min(p,q)
} bind def


% Compute the maximum of two numbers.
/Mmax {         % p q Mmax max(p,q)
        2 copy          % p q p q
        lt              % p q p<q?
        { exch } if     % max(p,q) min(p,q)
        pop             % max(p,q)
} bind def

/Mpstart {
    MathPictureStart
} bind def
/Mpend {
    MathPictureEnd
} bind def
/Mscale {
    0 1 0 1
    5 -1 roll
    MathScale
} bind def
/Plain
        /Courier findfont
def
/Bold
        /Courier-Bold findfont
def
/Italic
        /Courier-Oblique findfont
def
/MathPictureStart {
        gsave
        newpath
        /Mtmatrix
        matrix currentmatrix
        def
        Plain
        Mfontsize scalefont
        setfont
0 setgray 0 setlinewidth
} bind def
/MathPictureEnd {
        grestore
} bind def
/Mdot {
        moveto
        0 0 rlineto
        stroke
} def
/Mtetra {
        moveto
        lineto
        lineto
        lineto
        fill
} def
/Metetra {
        moveto
        lineto
        lineto
        lineto
        closepath
        gsave
        fill
        grestore
        0 setgray
        stroke
} def
/Mistroke {
        flattenpath
        0 0 0
        {
        4 2 roll
        pop pop
        }
        {
        4 -1 roll
        2 index
        sub dup mul
        4 -1 roll
        2 index
        sub dup mul
        add sqrt
        4 -1 roll
        add
        3 1 roll
        }
        {
        stop
        }
        {
        stop
        }
        pathforall
        pop pop
        currentpoint
        stroke
        moveto
        currentdash
        3 -1 roll
        add
        setdash
} def
/Mfstroke {
        stroke
        currentdash
        pop 0
        setdash
} def
/Msboxa {
        newpath
        5 -1 roll
        Mvboxa
        pop
        6 -1 roll
        5 -1 roll
        4 -1 roll
        Msboxa1
        5 -3 roll
        Msboxa1
        [
        7 -2 roll
        [ 2 index 2 index
        10 -1 roll
        9 -1 roll
        ]
        6 1 roll
        5 -2 roll
        ]
} bind def
        
/Msboxa1 {
        sub
        2 div
        dup
        2 index
        1 add
        mul
        3 -1 roll
        -1 add
        3 -1 roll
        mul
} bind def
/Mvboxa {
        gsave
        newpath
        [ true
        3 -1 roll
        {
        Mbbox
        5 -1 roll
        {
        0
        5 1 roll
        }
        {
        7 -1 roll
        exch sub
        (m) stringwidth pop
        .3 mul
        sub
        7 1 roll
        6 -1 roll
        4 -1 roll
        Mmin
        3 -1 roll
        5 index
        add
        5 -1 roll
        4 -1 roll
        Mmax
        4 -1 roll
        }
        ifelse
        false
        }
        forall
        { stop } if
        counttomark
        1 add
        4 roll
        ]
        grestore
} bind def
/Mbbox {
        0 0 moveto
        false charpath
        flattenpath
        pathbbox
        newpath
} bind def
/Mmin {
        2 copy
        gt
        { exch } if
        pop
} bind def
/Mmax {
        2 copy
        lt
        { exch } if
        pop
} bind def
/Mshowa {
        4 -2 roll
        moveto
        2 index
        Mtmatrix setmatrix
        Mvboxa
        7 1 roll
        6 -1 roll
        5 -1 roll
        4 -1 roll
        Mshowa1
        4 1 roll
        Mshowa1
        rmoveto
        currentpoint
        0 1
        4 index length
        -1 add
        {
        2 index
        4 index
        2 index
        get
        3 index
        add
        moveto
        4 index
        exch get
        show
        } for
        pop pop pop pop
        Mgmatrix setmatrix
} bind def
/Mshowa1 {
        2 copy
        add
        4 1 roll
        sub
        mul
        sub
        -2 div
} bind def
/MathScale {
        Mwidth
        Mheight
        Mlp
        translate
        scale
        /Mgmatrix
        matrix currentmatrix
        def
        /Msaveaa exch def
        /Msavebb exch def
        /Msavecc exch def
        /Msavedd exch def
} bind def
/Mlp {
        3 copy
        Mlpfirst
        {
        Mnodistort
        {
        Mmin
        dup
        } if
        4 index
        2 index
        2 index
        Mlprun
        11 index
        11 -1 roll
        10 -4 roll
        Mlp1
        8 index
        9 -5 roll
        Mlp1
        4 -1 roll
        and
        { exit } if
        3 -1 roll
        pop pop
        } loop
        exch
        3 1 roll
        7 -3 roll
        pop pop pop
} bind def
/Mlpfirst {
        3 -1 roll
        dup length
        2 copy
        -2 add
        get
        aload
        pop pop pop
        4 -2 roll
        -1 add
        get
        aload
        pop pop pop
        6 -1 roll
        3 -1 roll
        5 -1 roll
        sub
        dup /MsaveAx exch def
        div
        4 1 roll
        exch sub
        dup /MsaveAy exch def
        div
} bind def
/Mlprun {
        2 copy
        4 index
        0 get
        dup
        4 1 roll
        Mlprun1
        3 copy
        8 -2 roll
        9 -1 roll
        {
        3 copy
        Mlprun1
        3 copy
        11 -3 roll
        /gt Mlpminmax
        8 3 roll
        11 -3 roll
        /lt Mlpminmax
        8 3 roll
        } forall
        pop pop pop pop
        3 1 roll
        pop pop
        aload pop
        5 -1 roll
        aload pop
        exch
        6 -1 roll
        Mlprun2
        8 2 roll
        4 -1 roll
        Mlprun2
        6 2 roll
        3 -1 roll
        Mlprun2
        4 2 roll
        exch
        Mlprun2
        6 2 roll
} bind def
/Mlprun1 {
        aload pop
        exch
        6 -1 roll
        5 -1 roll
        mul add
        4 -2 roll
        mul
        3 -1 roll
        add
} bind def
/Mlprun2 {
        2 copy
        add 2 div
        3 1 roll
        exch sub
} bind def
/Mlpminmax {
        cvx
        2 index
        6 index
        2 index
        exec
        {
        7 -3 roll
        4 -1 roll
        } if
        1 index
        5 index
        3 -1 roll
        exec
        {
        4 1 roll
        pop
        5 -1 roll
        aload
        pop pop
        4 -1 roll
        aload pop
        [
        8 -2 roll
        pop
        5 -2 roll
        pop
        6 -2 roll
        pop
        5 -1 roll
        ]
        4 1 roll
        pop
        }
        {
        pop pop pop
        } ifelse
} bind def
/Mlp1 {
        5 index
        3 index sub
        5 index
        2 index mul
        1 index
        le
        1 index
        0 le
        or
        dup
        not
        {
        1 index
        3 index div
        .99999 mul
        8 -1 roll
        pop
        7 1 roll
        }
        if
        8 -1 roll
        2 div
        7 -2 roll
        pop sub
        5 index
        6 -3 roll
        pop pop
        mul sub
        exch
} bind def
/Mfontsize      12 def
/Mleft          0.000000 def
/Mbottom        249.000000 def
/Mwidth         400.000000 def
/Mheight        249.000000 def
/Courier findfont 12 scalefont setfont
%!
%%Creator: Mathematica
%%AspectRatio: 0.61803 
MathPictureStart
% Scaling calculations
0.02381 0.00952 -0.8082 0.04754 [
[(20)] 0.21429 -0.0125 0 1 Msboxa
[(40)] 0.40476 -0.0125 0 1 Msboxa
[(60)] 0.59524 -0.0125 0 1 Msboxa
[(80)] 0.78571 -0.0125 0 1 Msboxa
[(100)] 0.97619 -0.0125 0 1 Msboxa
[(18)] 0.01131 0.04754 1 0 Msboxa
[(20)] 0.01131 0.14262 1 0 Msboxa
[(22)] 0.01131 0.23771 1 0 Msboxa
[(24)] 0.01131 0.33279 1 0 Msboxa
[(26)] 0.01131 0.42787 1 0 Msboxa
[(28)] 0.01131 0.52295 1 0 Msboxa
[(30)] 0.01131 0.61803 1 0 Msboxa
[ -0.001 -0.00725 0 0 ]
[ 1.001 0.61903 0 0 ]
] MathScale
% Start of Graphics
1 setlinecap
1 setlinejoin
newpath
%%Object: Graphics
[ ] 0 setdash
0 setgray
gsave
gsave
0.002 setlinewidth
0 0 moveto
1 0 lineto
stroke
0.21429 -0.00625 moveto
0.21429 0.00625 lineto
stroke
0 setgray
[(20)] 0.21429 -0.0125 0 1 Mshowa
0.40476 -0.00625 moveto
0.40476 0.00625 lineto
stroke
0 setgray
[(40)] 0.40476 -0.0125 0 1 Mshowa
0.59524 -0.00625 moveto
0.59524 0.00625 lineto
stroke
0 setgray
[(60)] 0.59524 -0.0125 0 1 Mshowa
0.78571 -0.00625 moveto
0.78571 0.00625 lineto
stroke
0 setgray
[(80)] 0.78571 -0.0125 0 1 Mshowa
0.97619 -0.00625 moveto
0.97619 0.00625 lineto
stroke
0 setgray
[(100)] 0.97619 -0.0125 0 1 Mshowa
0.02381 0 moveto
0.02381 0.61803 lineto
stroke
0.01756 0.04754 moveto
0.03006 0.04754 lineto
stroke
0 setgray
[(18)] 0.01131 0.04754 1 0 Mshowa
0.01756 0.14262 moveto
0.03006 0.14262 lineto
stroke
0 setgray
[(20)] 0.01131 0.14262 1 0 Mshowa
0.01756 0.23771 moveto
0.03006 0.23771 lineto
stroke
0 setgray
[(22)] 0.01131 0.23771 1 0 Mshowa
0.01756 0.33279 moveto
0.03006 0.33279 lineto
stroke
0 setgray
[(24)] 0.01131 0.33279 1 0 Mshowa
0.01756 0.42787 moveto
0.03006 0.42787 lineto
stroke
0 setgray
[(26)] 0.01131 0.42787 1 0 Mshowa
0.01756 0.52295 moveto
0.03006 0.52295 lineto
stroke
0 setgray
[(28)] 0.01131 0.52295 1 0 Mshowa
0.01756 0.61803 moveto
0.03006 0.61803 lineto
stroke
0 setgray
[(30)] 0.01131 0.61803 1 0 Mshowa
[(\(b\))] 0.7 0.53125 0 -1 Mshowa
%
grestore
grestore
0 0 moveto
1 0 lineto
1 0.618034 lineto
0 0.618034 lineto
closepath
clip
newpath
0 setgray
gsave
gsave
0.004 setlinewidth
0.67 setgray
0.02381 0.60781 moveto
0.11905 0.57577 lineto
0.2619 0.2234 lineto
0.5 0.09294 lineto
0.97619 0.08458 lineto
stroke
grestore
gsave
0.004 setlinewidth
0.33 setgray
0.02381 0.60781 moveto
0.11905 0.12822 lineto
0.2619 0.02658 lineto
0.5 0.00333 lineto
0.97619 0.06927 lineto
stroke
grestore
gsave
0.004 setlinewidth
0.02381 0.60781 moveto
0.11905 0.35356 lineto
0.2619 0.05952 lineto
0.5 0.09294 lineto
0.97619 0.0716 lineto
stroke
grestore
grestore
% End of Graphics
MathPictureEnd
%%EPS Trailer
end

%%EndDocument
 GE /Times-Bold SF
16716 44724 MT
(Figure 3-12:)SH
/Times-Roman SF
23039 XM
(ML, EMAP, and LMS-C error rates after \050a\051 one and \050b\051 five)SH
22745 45920 MT
(iterations through the adaptation training data, as a function of)SH
29817 47116 MT
(the number of training tokens.)SH
13300 50101 MT
(It is believed that similar gains)
61 W( would be obtained using real data in the three-class experiment)62 W
10800 51840 MT
(that is summarized by)
88 W( Table 3-3 if an accurate estimate of)87 W
/Symbol SF
37569 XM
(S)SH
/Times-Roman SF
39032 XM
(were available.  As stated earlier, the)87 W
9 /Times-Italic AF
38220 52200 MT
(o)SH
11 /Times-Roman AF
10800 53579 MT
(estimate of)115 W
/Symbol SF
16162 XM
(S)SH
/Times-Roman SF
17653 XM
(for the front vowels in the TIMIT prototype database did)
115 W( not represent the true dis-)116 W
9 /Times-Italic AF
16813 53939 MT
(o)SH
11 /Times-Roman AF
10800 55318 MT
(tribution of the speakers' mean vectors.  The simulations reported above support this claim.)
151 W( His-)575 W
10800 57057 MT
(tograms of the pooled data from real experiments were closely)
52 W( matched by the gaussian model.  It is)53 W
10800 58796 MT
(believed, based on the the physical relevance of the features at issue, that data)
241 W( from individual)240 W
10800 60535 MT
(speakers are also normally distributed.  The only remaining difference between the)
149 W( data from real)150 W
10800 62274 MT
(experiments and simulations using computer-generated data is that the computer-generated data)
112 W( are)111 W
10800 64013 MT
(known to obey the specified statistics, or conversely the statistics truly)
75 W( reflect the distribution of the)76 W
10800 65752 MT
(data. Results)
315 W( from)
20 W( these experiments show that both EMAP and LMS-C perform well even when the)19 W
10800 67491 MT
(amount of training data is small, and similar)
66 W( results are to be expected in real systems having ample)67 W
10800 69230 MT
(training data.)SH
ES
%%Page: 74 75
BS
0 SI
10 /Times-Roman AF
54800 4286 MT
(74)SH
11 SS 
13300 7955 MT
(Finally, note)
33 W( that the LMS-C parameters)32 W
/Symbol SF
31610 XM
(h)SH
/Times-Roman SF
32580 XM
(and)SH
/Symbol SF
34475 XM
(b)SH
/Times-Roman SF
35386 XM
(can be adjusted to make the LMS-C error rate)32 W
10800 9694 MT
(closer to the EMAP rate at other points along the horizontal axis. Since all three estimators)
46 W( converge)47 W
10800 11433 MT
(as the number of training samples)
178 W( increases, it is best to optimize LMS-C performance for small)177 W
10800 13172 MT
(numbers of training samples and to use ML adaptation when the training data are plentiful.)SH
13 /Times-Bold AF
10800 16923 MT
(3.7. Summary)SH
11 /Times-Roman AF
13300 19838 MT
(In this chapter, the estimation algorithms derived in Chapter 2 were applied)
153 W( to adaptation in)154 W
10800 21577 MT
(feature-based continuous speech recognition systems.)
114 W( For)
501 W( the set of three front vowels, supervised)113 W
10800 23316 MT
(adaptation in the)130 W
9 SS 
18798 XM
(ANGEL)SH
11 SS 
22254 XM
(system produced a reduction in error rate of 21.8% using ML estimation.)131 W
10800 25055 MT
(This figure represents an upper bound on adaptation performance; results with)
146 W( unsupervised adap-)145 W
10800 26794 MT
(tation will be lower.)
156 W( The)589 W
9 SS 
23134 XM
(ANGEL)SH
11 SS 
26616 XM
(results were limited by the fact that many features are not ade-)157 W
10800 28533 MT
(quately described by the gaussian distribution.  As demonstrated)
160 W( in Chapter 2, performance of all)159 W
10800 30272 MT
(three estimators under investigation is degraded when the data violates the gaussian assumption.)SH
13300 33257 MT
(The)SH
9 SS 
15394 XM
(PROPHET)SH
11 SS 
19778 XM
(phonetic classification system was developed to address limitations observed in)109 W
10800 34996 MT
(the)SH
9 SS 
12533 XM
(ANGEL)SH
11 SS 
15972 XM
(system.)SH
9 SS 
20081 XM
(PROPHET)SH
11 SS 
24470 XM
(embodies rules derived from the spectrogram-reading process)
114 W( to deal)113 W
10800 36735 MT
(with the effects of context, and)
17 W( to make classification decisions using both gaussian and non-gaussian)18 W
10800 38474 MT
(features. Restrictions)
361 W( placed on adaptation features, including separate modeling of male and female)43 W
10800 40213 MT
(speakers, ensure that these features obey the gaussian assumptions of the adaptation algorithms.)SH
13300 43198 MT
(Comparisons of the baseline)90 W
9 SS 
26430 XM
(SPIRIT)SH
11 SS 
29545 XM
(system \050substituted for)90 W
9 SS 
40112 XM
(ANGEL)SH
11 SS 
43527 XM
(which was no longer)
90 W( avail-)91 W
10800 44937 MT
(able\051 and the)51 W
9 SS 
16908 XM
(PROPHET)SH
11 SS 
21234 XM
(system results)
51 W( show that the strength of the)50 W
9 SS 
40883 XM
(PROPHET)SH
11 SS 
45208 XM
(system lies in its ability)50 W
10800 46676 MT
(to filter out)
82 W( segments \050from the)83 W
/Times-Italic SF
25288 XM
(son)SH
/Times-Roman SF
27174 XM
(class\051 which should not be considered as members of the target)83 W
10800 48415 MT
(classes. The)
279 W( result was a 37% reduction in error rate for the unadapted systems.  Results on the)
2 W( use of)1 W
10800 50154 MT
(the context-compensation rules in)77 W
9 SS 
26261 XM
(PROPHET)SH
11 SS 
30614 XM
(were inconclusive due to poor estimation of the statistic)78 W
/Symbol SF
10800 51893 MT
(S)SH
/Times-Roman SF
12427 XM
(which is crucial in the)
251 W( EMAP and LMS-C procedures.  These results, based on the TIMIT)250 W
9 /Times-Italic AF
11451 52253 MT
(o)SH
11 /Times-Roman AF
10800 53632 MT
(prototype CD-ROM data, indicate that a certain minimum)
54 W( number of observations per speaker \050from)55 W
10800 55371 MT
(each class\051 are necessary to obtain reliable estimates of)SH
/Symbol SF
35323 XM
(S)SH
/Times-Roman SF
36424 XM
(.)SH
9 /Times-Italic AF
35974 55731 MT
(o)SH
11 /Times-Roman AF
13300 58356 MT
(Unsupervised adaptation using EMAP or LMS-C estimation algorithms within)159 W
9 SS 
49656 XM
(PROPHET)SH
11 SS 
54090 XM
(was)SH
10800 60095 MT
(shown to be)
59 W( effective in reducing the classification error rate, and LMS-C performance was equal to)60 W
10800 61834 MT
(that of the)
73 W( EMAP algorithm.  Soft-decision feedback, which is similar to the reestimation procedure)72 W
10800 63573 MT
(used in HMMs, was shown to be an effective method for)
110 W( unsupervised adaptation.  In experiments)111 W
10800 65312 MT
(using computer-generated data, the EMAP and LMS-C algorithms reduced the classification error)170 W
10800 67051 MT
(rate by 29.3% and 26.3%, respectively, after presentation of 10)
262 W( adaptation data samples.  This)263 W
10800 68790 MT
(represented a gain of approximately 40% with respect to)
3 W( the 19% reduction in error rate obtained with)2 W
10800 70529 MT
(the ML-adapted mean vectors.  The EMAP and LMS-C error rates after)
8 W( 10 observations were close to)9 W
10800 72268 MT
(their asymptotic values.)SH
ES
%%Page: 75 76
BS
0 SI
10 /Times-Roman AF
54800 4286 MT
(75)SH
11 SS 
13300 7955 MT
(Simulations showed that multiple iterations of the unsupervised adaptation)
144 W( algorithms reduce)143 W
10800 9694 MT
(the error rate further, as the probabilities of class membership)
188 W( used in the soft-decision feedback)189 W
10800 11433 MT
(method converge. When five iterations of this unsupervised adaptation were performed on the)
69 W( adap-)68 W
10800 13172 MT
(tation training data, the error rate was reduced by an additional 10% over that of)
63 W( one iteration.  This)64 W
10800 14911 MT
(difference represented 36% of the difference between)
109 W( the single-iteration and supervised-adaptation)108 W
10800 16650 MT
(error rates.)SH
ES
%%Page: 76 77
BS
0 SI
10 /Times-Roman AF
54800 4286 MT
(76)SH
15 /Times-Bold AF
30071 15405 MT
(Chapter 4)SH
21173 18058 MT
(Application to Hidden Markov Model)SH
24257 19797 MT
(Speech Recognition Systems)SH
13 SS 
10800 24268 MT
(4.1. Overview)SH
11 /Times-Roman AF
13300 27183 MT
(Speech is)
148 W( an observable signal.  Modeling the speech signal well allows the development of)149 W
10800 28922 MT
(devices which recognize it, synthesize it, or identify the speakers who)
27 W( produced it.  Statistical models)26 W
10800 30661 MT
(of signals such as speech treat the observation sequence as a realization of a stochastic)
98 W( process and)99 W
10800 32400 MT
(attempt to characterize the statistical properties of that process.  The)
15 W( hidden Markov model \050HMM\051 is)14 W
10800 34139 MT
(a stochastic signal model that has been widely applied to the speech recognition problem.)
42 W( A)
361 W( number)43 W
10800 35878 MT
(of variations of HMMs exist, the main difference between them being the form)
133 W( of the observation)132 W
10800 37617 MT
(density functions.  For HMMs)
93 W( using continuous density functions, estimation of possibly correlated)94 W
10800 39356 MT
(mean vectors is an integral part of the parameter estimation process.  This)
129 W( chapter investigates the)128 W
10800 41095 MT
(application of the algorithms from Chapter 2)
93 W( to the estimation of mean vectors in a hidden Markov)94 W
10800 42834 MT
(model. More)
335 W( precisely, the estimates are used to update the HMM parameters given speaker-specific)29 W
10800 44573 MT
(observations.)SH
13300 47558 MT
(Section 4.2 reviews the theory of hidden Markov models, and Section 4.3 describes the)
53 W( restric-)54 W
10800 49297 MT
(tions placed on them)
196 W( for the speech recognition task.  Discrete, continuous, and semi-continuous)195 W
10800 51036 MT
(HMMs are)
198 W( presented. Vector quantization and the estimation of continuous mixture densities are)199 W
10800 52775 MT
(briefly discussed as they apply to)
203 W( HMMs.  Section 4.4 describes speaker adaptation experiments)202 W
10800 54514 MT
(which were performed within a semi-continuous version of the CMU)399 W
9 SS 
45520 XM
(SPHINX)SH
11 SS 
49444 XM
(system called)399 W
9 SS 
10800 56253 MT
(SPHINX-SC)SH
11 SS 
(. Adaptation)
920 W( in)322 W
9 SS 
23858 XM
(SPHINX-SC)SH
11 SS 
29105 XM
(is achieved via modification of the mean vectors in its)322 W
10800 57992 MT
(continuous-density codebook, using the ML, EMAP, and)
129 W( LMS-C algorithms.  Several methods for)130 W
10800 59731 MT
(automatically identifying good candidates for)
142 W( adaptation are also described.  In Section 4.5 results)141 W
10800 61470 MT
(from a set of experiments)
24 W( with computer-generated hidden Markov models are described to provide a)25 W
10800 63209 MT
(better understanding of the)SH
9 SS 
22896 XM
(SPHINX-SC)SH
11 SS 
27821 XM
(results.)SH
ES
%%Page: 77 78
BS
0 SI
10 /Times-Roman AF
54800 4286 MT
(77)SH
13 /Times-Bold AF
10800 8071 MT
(4.2. Review of Hidden Markov Model Theory)SH
9 /Times-Roman AF
25135 10848 MT
(13)SH
11 SS 
13300 11211 MT
(The hidden Markov)
25 W( model)24 W
26334 XM
(is a model of a doubly-stochastic process.  It describes the random)24 W
10800 12950 MT
(traversal of a set of states, and the probabilistic emission of observations within each state.)
36 W( The)
349 W( state)37 W
10800 14689 MT
(sequence is assumed to be unobservable, or)
164 W( hidden, and the observations may take on discrete or)163 W
10800 16428 MT
(continuous values.  Let the)37 W
/Times-Italic SF
23083 XM
(N)SH
/Times-Roman SF
24129 XM
(distinct model states be denoted as)
37 W( {)38 W
/Times-Italic SF
(S)SH
/Times-Roman SF
41400 XM
(,)SH
/Times-Italic SF
41825 XM
(S)SH
/Times-Roman SF
42825 XM
(,)
150 MX(...,)SH
/Times-Italic SF
44500 XM
(S)SH
/Times-Roman SF
45650 XM
(} as depicted in Figure)38 W
9 /Times-Italic AF
40950 16788 MT
(1)SH
42375 XM
(2)SH
45050 XM
(N)SH
11 /Times-Roman AF
10800 18167 MT
(4-1 for)8 W
/Times-Italic SF
14114 XM
(N)SH
/Times-Roman SF
14998 XM
(=)
150 MX(3. State)
291 W( changes can be assumed to occur at times)8 W
/Times-Italic SF
38276 XM
(t)SH
/Times-Roman SF
38732 XM
(=)
150 MX(1,)
150 MX(2,)
150 MX(...,)SH
/Times-Italic SF
(T)SH
/Times-Roman SF
(, where)8 W
/Times-Italic SF
46690 XM
(T)SH
/Times-Roman SF
47584 XM
(is the length of the)7 W
10800 19906 MT
(observation sequence; the actual state at time)196 W
/Times-Italic SF
32301 XM
(t)SH
/Times-Roman SF
33078 XM
(will be referred to as)196 W
/Times-Italic SF
43433 XM
(q)SH
/Times-Roman SF
44233 XM
(. Assuming)
667 W( a first-order)196 W
9 /Times-Italic AF
43983 20266 MT
(t)SH
11 /Times-Roman AF
10800 21645 MT
(Markov chain, the state transition probabilities can be written as)SH
/Times-Italic SF
15200 23297 MT
(a)SH
/Times-Roman SF
16400 XM
(=)SH
/Times-Italic SF
17170 XM
(Pr)SH
/Times-Roman SF
(\050)SH
/Times-Italic SF
(q)SH
/Times-Roman SF
19586 XM
(=)SH
/Times-Italic SF
20356 XM
(S)SH
/Times-Roman SF
21156 XM
(|)SH
/Times-Italic SF
(q)SH
/Times-Roman SF
23076 XM
(=)SH
/Times-Italic SF
23846 XM
(S)SH
/Times-Roman SF
24646 XM
(\051)SH
53693 XM
(\0504.1\051)SH
9 /Times-Italic AF
15750 23657 MT
(ij)SH
19186 XM
(t)SH
20906 XM
(j)SH
21926 XM
(t-1)SH
24396 XM
(i)SH
11 /Times-Roman AF
10800 25036 MT
(subject to)SH
8 /Times-Italic AF
15619 26482 MT
(N)SH
11 SS 
16723 27637 MT
(a)SH
/Times-Roman SF
17923 XM
(=)
150 MX(1)SH
53693 XM
(\0504.2\051)SH
16 /Symbol AF
15316 27937 MT
(\345)SH
9 /Times-Italic AF
17273 27997 MT
(ij)SH
8 SS 
15200 28731 MT
(j)SH
/Times-Roman SF
15572 XM
(=)
150 MX(1)SH
11 SS 
10800 29874 MT
(and)SH
/Times-Italic SF
12754 XM
(a)SH
/Symbol SF
14104 XM
(\263)SH
/Times-Roman SF
15008 XM
(0. For)
457 W( a discrete-density HMM with the set of)91 W
/Times-Italic SF
36661 XM
(M)SH
/Times-Roman SF
37943 XM
(output symbols)
91 W( {)90 W
/Times-Italic SF
(v)SH
/Times-Roman SF
46570 XM
(}, the mapping from)90 W
9 /Times-Italic AF
13304 30234 MT
(ij)SH
46170 XM
(k)SH
/Times-Roman SF
24029 31250 MT
(th)SH
11 SS 
10800 31613 MT
(state)SH
/Times-Italic SF
13091 XM
(j)SH
/Times-Roman SF
13672 XM
(to observation,)SH
/Times-Italic SF
20485 XM
(i.e.)SH
/Times-Roman SF
22104 XM
(the)SH
/Times-Italic SF
23723 XM
(j)SH
/Times-Roman SF
24729 XM
(-state's output distribution, may be written as)SH
/Times-Italic SF
15200 33265 MT
(b)SH
/Times-Roman SF
16000 XM
(\050)SH
/Times-Italic SF
(k)SH
/Times-Roman SF
(\051)
150 MX(=)SH
/Times-Italic SF
18140 XM
(Pr)SH
/Times-Roman SF
(\050)SH
/Times-Italic SF
(v)SH
/Times-Roman SF
20494 XM
(|)SH
/Times-Italic SF
(q)SH
/Times-Roman SF
21664 XM
(=)SH
/Times-Italic SF
22434 XM
(S)SH
/Times-Roman SF
23234 XM
(\051)SH
53693 XM
(\0504.3\051)SH
9 /Times-Italic AF
15750 33625 MT
(j)SH
20094 XM
(k)SH
21264 XM
(t)SH
22984 XM
(j)SH
11 /Times-Roman AF
10800 35004 MT
(For continuous-density HMMs, the state-dependent output distributions are written as)SH
/Times-Italic SF
15200 36656 MT
(b)SH
/Times-Roman SF
16000 XM
(\050)SH
/Times-Bold SF
(x)SH
/Times-Roman SF
(\051)
150 MX(=)SH
/Times-Italic SF
18202 XM
(f)SH
/Times-Roman SF
(\050)SH
/Times-Bold SF
(x)SH
/Times-Roman SF
(|)SH
/Times-Italic SF
(q)SH
/Times-Roman SF
20594 XM
(=)SH
/Times-Italic SF
21364 XM
(S)SH
/Times-Roman SF
22164 XM
(\051)SH
53693 XM
(\0504.4\051)SH
9 /Times-Italic AF
15750 37016 MT
(j)SH
20194 XM
(t)SH
21914 XM
(j)SH
11 /Times-Roman AF
10800 38395 MT
(where)SH
/Times-Bold SF
13786 XM
(x)SH
/Times-Roman SF
14636 XM
(is the continuous-valued observation vector and)25 W
/Times-Italic SF
36108 XM
(f)SH
/Times-Roman SF
(\050)SH
/Symbol SF
(\327)SH
/Times-Roman SF
(\051 is typically a finite mixture density.  The)25 W
10800 40134 MT
(initial state distribution is denoted as)SH
/Symbol SF
27240 XM
(p)SH
/Times-Roman SF
(, where)SH
604 50 27240 40334 UL
/Symbol SF
15200 41786 MT
(p)SH
/Times-Roman SF
16204 XM
(=)SH
/Times-Italic SF
16974 XM
(Pr)SH
/Times-Roman SF
(\050)SH
/Times-Italic SF
(q)SH
/Times-Roman SF
19590 XM
(=)SH
/Times-Italic SF
20360 XM
(S)SH
/Times-Roman SF
21160 XM
(\051)SH
53693 XM
(\0504.5\051)SH
9 /Times-Italic AF
15804 42146 MT
(i)SH
18990 XM
(1)SH
20910 XM
(i)SH
11 /Times-Roman AF
10800 43525 MT
(An observation sequence)119 W
/Times-Italic SF
22488 XM
(O)SH
/Times-Roman SF
23432 XM
(=)SH
/Times-Italic SF
24202 XM
(O)SH
/Times-Roman SF
25446 XM
(,)SH
/Times-Italic SF
25871 XM
(O)SH
/Times-Roman SF
27115 XM
(,...,)SH
/Times-Italic SF
28640 XM
(O)SH
/Times-Roman SF
30327 XM
(is generated from this model by first choosing an initial)118 W
9 /Times-Italic AF
24996 43885 MT
(1)SH
26665 XM
(2)SH
29434 XM
(T)SH
11 /Times-Roman AF
10800 45264 MT
(state)SH
/Times-Italic SF
13286 XM
(q)SH
/Times-Roman SF
14436 XM
(=)SH
/Times-Italic SF
15206 XM
(S)SH
/Times-Roman SF
16476 XM
(according to)195 W
/Symbol SF
22608 XM
(p)SH
/Times-Roman SF
(. An)
665 W( observation)195 W
/Times-Italic SF
31843 XM
(O)SH
/Times-Roman SF
33557 XM
(is generated according to)195 W
/Times-Italic SF
45637 XM
(b)SH
/Times-Roman SF
46437 XM
(\050)SH
/Times-Bold SF
(x)SH
/Times-Roman SF
(\051, and a)
195 W( new state)196 W
604 50 22608 45464 UL
9 /Times-Italic AF
13836 45624 MT
(1)SH
15756 XM
(i)SH
32637 XM
(1)SH
46187 XM
(i)SH
11 SS 
10800 47003 MT
(q)SH
/Times-Roman SF
12808 XM
(=)SH
/Times-Italic SF
13578 XM
(S)SH
/Times-Roman SF
14676 XM
(is chosen according to the transition probabilities {)23 W
/Times-Italic SF
(a)SH
/Times-Roman SF
38320 XM
(}. This)
319 W( process of generating an obser-)22 W
9 /Times-Italic AF
11350 47363 MT
(t+1)SH
14128 XM
(j)SH
37820 XM
(ij)SH
11 /Times-Roman AF
10800 48742 MT
(vation followed by a transition to another state is repeated until)SH
/Times-Italic SF
38875 XM
(t)SH
/Times-Roman SF
39331 XM
(=)SH
/Times-Italic SF
40101 XM
(T)SH
/Times-Roman SF
(.)SH
13300 51727 MT
(Consider the following manufacturing model as an example of a hidden Markov process)
104 W( with)105 W
10800 53466 MT
(continuous observations.)
84 W( Imagine)
441 W( there are three machines which produce ball bearings at different)83 W
10800 55205 MT
(rates and with random diameters which obey the)
95 W( distributions in Figure 4-1.  The bearings from all)96 W
10800 56944 MT
(three machines are placed, as soon as they are produced, on)
152 W( a a single conveyor which transports)151 W
10800 58683 MT
(them to a sorting and)
46 W( packing facility.  From the packing facility's point of view, the machine which)47 W
10800 60422 MT
(produced a particular bearing at time)201 W
/Times-Italic SF
28498 XM
(t)SH
/Times-Roman SF
29280 XM
(is the hidden state)201 W
/Times-Italic SF
38272 XM
(q)SH
/Times-Roman SF
39222 XM
(=)SH
/Times-Italic SF
39992 XM
(S)SH
/Times-Roman SF
41268 XM
(and the)
201 W( bearing diameter is the)200 W
9 /Times-Italic AF
38822 60782 MT
(t)SH
40542 XM
(i)SH
11 /Times-Roman AF
10800 62161 MT
(observation)SH
/Times-Italic SF
16420 XM
(O)SH
/Times-Roman SF
17952 XM
(taken from the machine's output distribution)213 W
/Times-Italic SF
39150 XM
(b)SH
/Times-Roman SF
39950 XM
(\050)SH
/Times-Bold SF
(x)SH
/Times-Roman SF
(\051. The)
701 W( probability at which)
213 W( the)214 W
9 /Times-Italic AF
17214 62521 MT
(t)SH
39700 XM
(i)SH
11 /Times-Roman AF
10800 63900 MT
(conveyor feeder switches from machine)21 W
/Times-Italic SF
28770 XM
(i)SH
/Times-Roman SF
29372 XM
(to machine)21 W
/Times-Italic SF
34546 XM
(j)SH
/Times-Roman SF
35147 XM
(is the transition probability)20 W
/Times-Italic SF
47389 XM
(a)SH
/Times-Roman SF
48734 XM
(which would be)20 W
9 /Times-Italic AF
47939 64260 MT
(ij)SH
11 /Times-Roman AF
10800 65639 MT
(expressed in terms of the relative production rates of the three machines.)SH
10800 50 10800 70172 UL
7 SS 
11700 71673 MT
(13)SH
9 SS 
12400 72000 MT
(The notation in this section is consistent with the review of HMM theory in [38].)SH
ES
%%Page: 78 79
BS
0 SI
10 /Times-Roman AF
54800 4286 MT
(78)SH
11 SS 
730 1000 0 11700 35013 GB 
%%BeginDocument: /usr0/rozzi/Documentation/PhDThesis/Chapter4/HMMex.eps
%!PS-Adobe-2.0 EPSF-2.0
%%Title: 
%%Creator: TopDraw
%%CreationDate: Sun Mar 17 18:50:40 1991
%%For: rozzi
%%DocumentFonts: (atend)
%%%Pages: 0 1
%%BoundingBox: 0 0 591 381
%%EndComments

%%BeginDocument: /usr/lib/NextStep/printPackage.ps
%!PS-Adobe-2.0
%%Title: Printing Package
%%EndComments
%Version: 2.0
%Copyright: 1988, NeXT, Inc.

/__NXdef{1 index where{pop pop pop}{def}ifelse}bind def
/__NXbdef{1 index where{pop pop pop}{bind def}ifelse}bind def
/UserObjects 10 array __NXdef
/defineuserobject{
        exch dup 1 add dup UserObjects length gt{
                array dup 0 UserObjects putinterval
                /UserObjects exch def
        }{pop}ifelse UserObjects exch 3 -1 roll put
}__NXbdef
/undefineuserobject{UserObjects exch null put}__NXbdef
/execuserobject{UserObjects exch get exec}__NXbdef
/__NXRectPath{4 2 roll moveto 1 index 0 rlineto
0 exch rlineto neg 0 rlineto closepath}__NXbdef
/__NXProcessRectArgs{
        1 index type /arraytype eq{
                exch 0 4 2 index length 1 sub{
                        dup 3 add 1 exch{1 index exch get exch}for
                        5 1 roll 5 index exec
                }for pop pop
        }{exec}ifelse
}__NXbdef
/rectfill{gsave newpath {__NXRectPath fill} __NXProcessRectArgs grestore}__NXbdef
/rectclip{newpath {__NXRectPath} __NXProcessRectArgs clip newpath}__NXbdef
/rectstroke{
        gsave newpath dup type /arraytype eq{dup length 6 eq}{false}ifelse{
                {gsave __NXRectPath null concat stroke grestore}
                dup length array cvx copy dup 2 4 -1 roll put __NXProcessRectArgs
        }{{__NXRectPath stroke} __NXProcessRectArgs}ifelse grestore
}__NXbdef
/xyshow{
        0 1 3 index length 1 sub{
                currentpoint 4 index 3 index 1 getinterval show
                3 index 3 index 2 mul 1 add get add exch
                3 index 3 index 2 mul get add exch moveto pop
        }for pop pop
}__NXbdef
/xshow{
        0 1 3 index length 1 sub{
                currentpoint 4 index 3 index 1 getinterval show
                exch 3 index 3 index get add exch moveto pop
        }for pop pop
}__NXbdef
/yshow{
        0 1 3 index length 1 sub{
                currentpoint 4 index 3 index 1 getinterval show
                3 index 3 index get add moveto pop
        }for pop pop
}__NXbdef
/arct{arcto pop pop pop pop}__NXbdef
/setbbox{pop pop pop pop}__NXbdef
/ucache{}__NXbdef
/ucachestatus{mark 0 0 0 0 0}__NXbdef
/setucacheparams{cleartomark}__NXbdef
/uappend{systemdict begin cvx exec end}__NXbdef
/ueofill{gsave newpath uappend eofill grestore}__NXbdef
/ufill{gsave newpath uappend fill grestore}__NXbdef
/ustroke{
        gsave newpath dup length 6 eq
        {exch uappend concat}{uappend}ifelse
        stroke grestore
}__NXbdef
/__NXustrokepathMatrix dup where {pop pop}{matrix def}ifelse
/ustrokepath{
        newpath dup length 6 eq{
                exch uappend __NXustrokepathMatrix currentmatrix exch concat
                strokepath setmatrix
        }{uappend strokepath}ifelse
} __NXbdef
/upath{
        [exch {/ucache cvx}if pathbbox /setbbox cvx
         {/moveto cvx}{/lineto cvx}{/curveto cvx}{/closepath cvx}pathforall]cvx
} __NXbdef
/setstrokeadjust{pop}__NXbdef
/currentstrokeadjust{false}__NXbdef
/selectfont{exch findfont exch
dup type /arraytype eq {makefont}{scalefont}ifelse setfont}__NXbdef
/_NXCombineArrays{
        counttomark dup 2 add index dup length 3 -1 roll {
                2 index length sub dup 4 1 roll 1 index exch 4 -1 roll putinterval exch
        }repeat pop pop pop
}__NXbdef
/setcmykcolor{
        1.0 exch sub dup dup 6 -1 roll
        sub dup 0 lt{pop 0}if 5 1 roll
        4 -1 roll sub dup 0 lt{pop 0}if 3 1 roll
        exch sub dup 0 lt{pop 0}if setrgbcolor
}__NXbdef
/currentcmykcolor{currentrgbcolor 3{1.0 exch sub 3 1 roll}repeat 0}__NXbdef
/flushgraphics{}def
/setwindowtype{pop pop}def
/currentwindowtype{pop 0}def
/setalpha{pop}def
/currentalpha{1.0}def
/hidecursor{}def
/obscurecursor{}def
/revealcursor{}def
/setcursor{4 {pop}repeat}bind def
/showcursor{}def
/NextStepEncoding where not{
/NextStepEncoding StandardEncoding 256 array copy def
0 [129/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/Ccedilla/Egrave
/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex/Idieresis
/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis/Ugrave/Uacute
/Ucircumflex/Udieresis/Yacute/Thorn/mu/multiply/divide/copyright
176/registered 181/brokenbar 190/logicalnot 192/onesuperior 201/twosuperior
204/threesuperior 209/plusminus/onequarter/onehalf/threequarters/agrave
/aacute/acircumflex/atilde/adieresis/aring/ccedilla/egrave/eacute
/ecircumflex/edieresis/igrave 226/iacute 228/icircumflex/idieresis/eth
/ntilde 236/ograve/oacute/ocircumflex/otilde/odieresis 242/ugrave/uacute
/ucircumflex 246/udieresis/yacute 252/thorn/ydieresis]
{dup type /nametype eq
 {NextStepEncoding 2 index 2 index put pop 1 add}{exch pop}ifelse
}forall pop
/NextStepEncoding NextStepEncoding readonly def   
/_NXfstr 128 string dup 0 (_NX) putinterval def   
/findfont{
 % Because we can never let NextStepEncoding get into
 % SharedFontDirectory, we cannot reencode a font to NextStepEncoding
 % if we are in shared mode.  So if currentshared is true,
 % we call the normal findfont and return that
 /currentshared where {pop currentshared} {false} ifelse
 {//findfont exec}
 {dup _NXfstr 3 125 getinterval cvs length 3 add _NXfstr 0 3 -1 roll
  getinterval cvn exch FontDirectory 2 index known 
  {pop FontDirectory exch get}
  {//findfont exec dup /Encoding get StandardEncoding eq
   {    dup length dict exch
        {1 index /FID ne {2 index 3 1 roll put}{pop pop}ifelse}forall
         dup /Encoding NextStepEncoding put definefont
        }{exch pop} ifelse
   }ifelse
 }ifelse
}bind def
}{pop}ifelse
/_NXProcArray 5 array __NXdef
/_NXChannels 0 __NXdef
/_NXTotalBytes 0 __NXdef
/_NXDoImageOp{
        1 index{dup}{1}ifelse /_NXChannels exch store
        _NXChannels 2 add 2 roll _NXProcArray 0 _NXChannels getinterval astore pop
        5 index 4 index mul 2 index{1 sub 8 idiv 1 add mul}{mul 1 sub 8 idiv 1 add}ifelse
        4 index mul /_NXTotalBytes exch store pop exch pop
        gsave matrix invertmatrix concat 0.5 setgray 0 0 4 2 roll rectfill grestore
        {       0 1 _NXChannels 1 sub{
                        _NXProcArray exch get exec
                        length _NXTotalBytes exch sub /_NXTotalBytes exch store}for
                _NXTotalBytes 0 le{exit}if
        }loop /_NXProcArray 5 array def
}__NXbdef
/colorimage{_NXDoImageOp}__NXbdef
/alphaimage{1 add _NXDoImageOp}def
%%EndDocument

gsave
 /__NXbasematrix matrix currentmatrix def
grestore
%%EndProlog
%%BeginSetup
/TopDrawDict 200 dict def
/xyshow {
    mark exch aload length -2 2 {
        2 roll
    } for counttomark dup 2 add -1 roll pop 1 add -1 roll gsave {
        pop pop grestore rmoveto gsave
    } exch kshow grestore rmoveto
} bind def /currentalpha {
    1
} def /setalpha {
    pop
} bind def
TopDrawDict begin /prt_stack {
    (***Top of Stack\012) print pstack (---Bottom of Stack\012) print flush
} def /prt_top {
    (top item of stack) == dup == flush
} def /prtmat matrix def /prt_ctm {
    (current transformation matrix: ) print prtmat currentmatrix == flush
} def /tmmat matrix def /obmat matrix def /strmat matrix def /pgmat matrix def /idmat matrix def /sc1mt matrix def /sc2mt matrix def /sc3mt matrix def /sc4mt matrix def /sc5mt matrix def /sc6mt matrix def /sc7mt matrix def /inmat matrix def /ctmmt matrix def /octmmt matrix def /clpmt matrix def /weglet_mat matrix def /crlinw 1 def crlinw setlinewidth /crlinjn 0 def crlinjn setlinejoin /crlincp 0 def crlincp setlinecap /crmtrlmt currentmiterlimit def /crstrpat 0 def /crfilpat 0 def /crflat currentflat def /dftflat currentflat def /strinclr false def /crlingry 0 def /crlinred 0 def /crlingrn 0 def /crlinblu 0 def /crlinalph 1 def /filinclr false def /crfilgry 0 def /crfilred 0 def /crfilgrn 0 def /crfilblu 0 def /crfilalph 1 def /crfilstyl 0 def /txtdraw true def /txtinclr false def /txtwpat false def /txtwittrans false def /crtxtgry 0 def /crtxtred 0 def /crtxtgrn 0 def /crtxtblu 0 def /crtxtalph 1 def /crtxtpat 0 def /txlndraw true def /txlninclr false def /txlnwpat false def /txlnwittrans false def /crtxlngry 0 def /crtxlnred 0 def /crtxlngrn 0 def /crtxlnblu 0 def /crtxlnalph 1 def /crtxlnpat 0 def /hilittxt false def /strdsh [2 2] def /dshpatoff 0 def /usedash false def /filwpat false def /strwpat false def /filwittrans false def /strwittrans false def /crfrtarw false def /crendarw false def /rsave 0 def /esave 0 def /sslsave 0 def /lsave 0 def /clpsave 0 def /pathsave 0 def /tpatstr 10 string def /ptdist {
    sub dup mul 3 1 roll sub dup mul add sqrt
} bind def /dodrawctm {
    octmmt currentmatrix pop idmat obmat concatmatrix ctmmt currentmatrix sc1mt concatmatrix setmatrix
} bind def /undrawctm {
    obmat inmat invertmatrix ctmmt currentmatrix sc1mt concatmatrix setmatrix
} bind def /undrawmat {
    obmat aload pop 7 -1 roll astore
} bind def /unpagectm {
    octmmt setmatrix
} bind def /unpagemat {
    pgmat aload pop 7 -1 roll astore
} bind def /drtan {
    gsave 1 setalpha 0 setlinewidth 0.333333 setgray moveto lineto stroke grestore
} bind def /drdgrdln {
    gsave 1 setalpha 0 setlinewidth [1 2] 0 setdash setgray moveto lineto stroke grestore
} bind def /drgrdln {
    gsave 1 setalpha 0 setlinewidth setgray moveto lineto stroke grestore
} bind def end
TopDrawDict begin /TDeps_dict 20 dict def TDeps_dict begin /showpage {
    
} def /copypage {
    
} def /grestoreall {
    
} def /erasepage {
    
} def /nulldevice {
    
} def /exitserver {
    
} def /initgraphics {
    
} def /renderbands {
    
} def /initmatrix {
    
} def /banddevice {
    
} def /setpageparams {
    
} def /framedevice {
    
} def /note {
    
} def end end
TopDrawDict begin /rpath {
    newpath moveto dup 0 exch rlineto exch 0 rlineto 0 exch neg rlineto closepath
} bind def /rfpath {
    /rad3 exch def /hh3 exch def /ww3 exch def /yy1 exch def /xx1 exch def /xx2 xx1 ww3 add def /yy2 yy1 hh3 add def ww3 0.5 mul rad3 lt {
        /rad3 ww3 0.5 mul def
    } if hh3 0.5 mul rad3 lt {
        /rad3 hh3 0.5 mul def
    } if newpath xx1 yy1 hh3 0.5 mul add moveto xx1 yy2 xx2 yy2 rad3 arcto 4 {
        pop
    } repeat xx2 yy2 xx2 yy1 rad3 arcto 4 {
        pop
    } repeat xx2 yy1 xx1 yy1 rad3 arcto 4 {
        pop
    } repeat xx1 yy1 xx1 yy2 rad3 arcto 4 {
        pop
    } repeat closepath
} bind def /rfill {
    gsave dodrawctm crfilalph setalpha filinclr {
        crfilred crfilgrn crfilblu setrgbcolor
    } {
        crfilgry setgray
    } ifelse filwpat {
        4 2 roll rpath crfilpat findfont filwittrans {
            trpatfil
        } {
            oppatfil
        } ifelse
    } {
        rectfill
    } ifelse grestore
} bind def /rstroke {
    gsave dodrawctm crlinalph setalpha crlinw setlinewidth crlincp setlinecap crlinjn setlinejoin crmtrlmt setmiterlimit usedash {
        strdsh dshpatoff setdash
    } if strinclr {
        crlinred crlingrn crlinblu setrgbcolor
    } {
        crlingry setgray
    } ifelse 4 2 roll rpath unpagectm concat strwpat {
        crstrpat findfont strwittrans {
            trpatstrk
        } {
            oppatstrk
        } ifelse
    } {
        stroke
    } ifelse grestore
} bind def /mkrpath {
    dodrawctm rpath unpagectm
} bind def end
TopDrawDict begin /p1x 0 def /p1y 0 def /p2x 0 def /p2y 0 def /ssl {
    gsave dodrawctm crfrtarw crendarw or {
        /p1y 1 index def /p1x 2 index def /p2y 1 index 4 index add def /p2x 2 index 5 index add def newpath moveto rlineto
    } {
        newpath moveto rlineto
    } ifelse crlinalph setalpha crlinw setlinewidth crlincp setlinecap usedash {
        strdsh dshpatoff setdash
    } if strinclr {
        crlinred crlingrn crlinblu setrgbcolor
    } {
        crlingry setgray
    } ifelse aload pop strmat astore crfrtarw {
        currentlinewidth strmat p2x p2y p1x p1y arow
    } if crendarw {
        currentlinewidth strmat p1x p1y p2x p2y arow
    } if unpagectm concat strwpat {
        crstrpat findfont strwittrans {
            trpatstrk
        } {
            oppatstrk
        } ifelse
    } {
        stroke
    } ifelse grestore
} bind def end
TopDrawDict begin /elli {
    gsave dodrawctm translate scale newpath dup dup 0 360 arc closepath unpagectm {
        crfilalph setalpha filinclr {
            crfilred crfilgrn crfilblu setrgbcolor
        } {
            crfilgry setgray
        } ifelse gsave filwpat {
            crfilpat findfont filwittrans {
                trpatfil
            } {
                oppatfil
            } ifelse
        } {
            fill
        } ifelse grestore
    } if {
        crlinalph setalpha crlinw setlinewidth usedash {
            strdsh dshpatoff setdash
        } if strinclr {
            crlinred crlingrn crlinblu setrgbcolor
        } {
            crlingry setgray
        } ifelse concat strwpat {
            crstrpat findfont strwittrans {
                trpatstrk
            } {
                oppatstrk
            } ifelse
        } {
            stroke
        } ifelse
    } {
        pop
    } ifelse grestore
} bind def /estroke {
    gsave dodrawctm translate scale newpath dup dup 0 360 arc closepath crlinalph setalpha crlinw setlinewidth usedash {
        strdsh dshpatoff setdash
    } if strinclr {
        crlinred crlingrn crlinblu setrgbcolor
    } {
        crlingry setgray
    } ifelse unpagectm concat strwpat {
        crstrpat findfont strwittrans {
            trpatstrk
        } {
            oppatstrk
        } ifelse
    } {
        stroke
    } ifelse grestore
} bind def /efill {
    gsave dodrawctm translate scale newpath dup dup 0 360 arc closepath unpagectm crfilalph setalpha filinclr {
        crfilred crfilgrn crfilblu setrgbcolor
    } {
        crfilgry setgray
    } ifelse filwpat {
        crfilpat findfont filwittrans {
            trpatfil
        } {
            oppatfil
        } ifelse
    } {
        fill
    } ifelse grestore
} bind def /apstroke {
    gsave dodrawctm /pie exch def /radius exch def /yscale exch def /xscale exch def /yy exch def /xx exch def /angle2 exch def /angle1 exch def /closed exch def xx yy translate xscale yscale scale newpath pie {
        radius dup moveto
    } if radius dup dup angle1 angle2 arc closed pie or {
        closepath
    } if crlinalph setalpha closed not pie not and {
        crfrtarw {
            dup crlinw exch gsave newpath angle1 1 add cos radius mul radius add angle1 1 add sin radius mul radius add moveto angle1 cos radius mul radius add angle1 sin radius mul radius add lineto unpagectm {
                
            } {
                
            } {
                
            } {
                
            } pathforall arow grestore
        } if crendarw {
            dup crlinw exch gsave newpath angle2 1 sub cos radius mul radius add angle2 1 sub sin radius mul radius add moveto angle2 cos radius mul radius add angle2 sin radius mul radius add lineto unpagectm {
                
            } {
                
            } {
                
            } {
                
            } pathforall arow grestore
        } if
    } if crlincp setlinecap crlinalph setalpha crlinw setlinewidth usedash {
        strdsh dshpatoff setdash
    } if strinclr {
        crlinred crlingrn crlinblu setrgbcolor
    } {
        crlingry setgray
    } ifelse unpagectm concat strwpat {
        crstrpat findfont strwittrans {
            trpatstrk
        } {
            oppatstrk
        } ifelse
    } {
        stroke
    } ifelse grestore
} bind def /apfill {
    gsave dodrawctm /pie exch def /radius exch def /yscale exch def /xscale exch def /yy exch def /xx exch def xx yy translate xscale yscale scale newpath pie {
        radius dup moveto
    } if radius dup dup 5 -2 roll arc pie or {
        closepath
    } if 1 xscale div 1 yscale div scale crfilalph setalpha filinclr {
        crfilred crfilgrn crfilblu setrgbcolor
    } {
        crfilgry setgray
    } ifelse filwpat {
        crfilpat findfont filwittrans {
            trpatfil
        } {
            oppatfil
        } ifelse
    } {
        fill
    } ifelse grestore
} bind def /mkepath {
    dodrawctm /pie exch def /radius exch def /yscale exch def /xscale exch def /yy exch def /xx exch def /angle2 exch def /angle1 exch def /closed exch def xx yy translate xscale yscale scale newpath pie {
        radius dup moveto
    } if radius dup dup angle1 angle2 arc closed pie or {
        closepath
    } if unpagectm
} bind def end
TopDrawDict begin /dotx {
    gsave txtdraw {
        concat selectfont txtinclr {
            crtxtred crtxtgrn crtxtblu setrgbcolor
        } {
            crtxtgry setgray
        } ifelse crtxtalph setalpha moveto xyshow
    } {
        pop pop pop pop pop pop pop
    } ifelse grestore
} bind def /txtlin {
    gsave txlndraw {
        concat txlninclr {
            crtxlnred crtxlngrn crtxlnblu setrgbcolor
        } {
            crtxlngry setgray
        } ifelse crtxlnalph setalpha setlinewidth 0 setlinecap newpath moveto 0 rlineto stroke
    } {
        pop pop pop pop pop
    } ifelse grestore
} bind def end
%%EndSetup
gsave
0 0 591 381 rectclip
-60 -108 translate
60 108 591 381 rectclip
gsave
TopDrawDict begin
/invpats true def
/crlincp 0 def
/crlinjn 0 def
/crmtrlmt 10 def
/crlinw 0 def
/crlinalph 1 def
/crlinred 0 def /crlingrn 0 def /crlinblu 0 def /strinclr true def
/crfilalph 1 def
/crfilred 0 def /crfilgrn 0 def /crfilblu 0 def /filinclr true def
/filwpat false def
TopDrawDict /piddict known TopDrawDict /ipiddict known or {
    1 getpat /crfilpat exch def
} if
/filwittrans false def
/strwpat false def
TopDrawDict /piddict known TopDrawDict /ipiddict known or {
    1 getpat /crstrpat exch def
} if
/strwittrans false def
/usedash false def
/strdsh [2 2] def /dshpatoff 0 def
/crendarw false def
/crfrtarw false def
/txtdraw false def
/crtxtalph 1 def
/crtxtred 0 def /crtxtgrn 0 def /crtxtblu 0 def /txtinclr true def
/txtwpat false def
/txtwittrans false def
/txlndraw false def
/crtxlnalph 1 def
/crtxlnred 0 def /crtxlngrn 0 def /crtxlnblu 0 def /txlninclr true def
/txlnwittrans false def
/txlnwpat false def
/crlinw 1 def
gsave clpmt currentmatrix pop newpath
282 176 255 218 [0.595745 0 0 0.497825 330.585083 187.974182] mkrpath
clip
newpath
clpmt setmatrix
gsave
/epssave save def TDeps_dict begin userdict begin
[0.69839 0 0 0.69839 283.160004 136.068634] dodrawctm
255 218 translate
%%BeginFile: /tmp/topdraw_eps_477_61
%!PS-Adobe-2.0 EPSF-1.2
%%BoundingBox: 0 0 282 176
%%Creator: Mathematica
%%Title: Clipboard
%%CreationDate: Never Never
%%EndComments
50 dict begin
/Mnodistort true def
/pageDashArray [4] def
/nullDashArray [] def

% Compute the minimum of two numbers.
/Mmin {         % p q Mmin min(p,q)
        2 copy          % p q p q
        gt              % p q p>q?
        { exch } if     % min(p,q) max(p,q)
        pop             % min(p,q)
} bind def


% Compute the maximum of two numbers.
/Mmax {         % p q Mmax max(p,q)
        2 copy          % p q p q
        lt              % p q p<q?
        { exch } if     % max(p,q) min(p,q)
        pop             % max(p,q)
} bind def

/Mpstart {
    MathPictureStart
} bind def
/Mpend {
    MathPictureEnd
} bind def
/Mscale {
    0 1 0 1
    5 -1 roll
    MathScale
} bind def
/Plain
        /Courier findfont
def
/Bold
        /Courier-Bold findfont
def
/Italic
        /Courier-Oblique findfont
def
/MathPictureStart {
        gsave
        newpath
        /Mtmatrix
        matrix currentmatrix
        def
        Plain
        Mfontsize scalefont
        setfont
0 setgray 0 setlinewidth
} bind def
/MathPictureEnd {
        grestore
} bind def
/Mdot {
        moveto
        0 0 rlineto
        stroke
} def
/Mtetra {
        moveto
        lineto
        lineto
        lineto
        fill
} def
/Metetra {
        moveto
        lineto
        lineto
        lineto
        closepath
        gsave
        fill
        grestore
        0 setgray
        stroke
} def
/Mistroke {
        flattenpath
        0 0 0
        {
        4 2 roll
        pop pop
        }
        {
        4 -1 roll
        2 index
        sub dup mul
        4 -1 roll
        2 index
        sub dup mul
        add sqrt
        4 -1 roll
        add
        3 1 roll
        }
        {
        stop
        }
        {
        stop
        }
        pathforall
        pop pop
        currentpoint
        stroke
        moveto
        currentdash
        3 -1 roll
        add
        setdash
} def
/Mfstroke {
        stroke
        currentdash
        pop 0
        setdash
} def
/Msboxa {
        newpath
        5 -1 roll
        Mvboxa
        pop
        6 -1 roll
        5 -1 roll
        4 -1 roll
        Msboxa1
        5 -3 roll
        Msboxa1
        [
        7 -2 roll
        [ 2 index 2 index
        10 -1 roll
        9 -1 roll
        ]
        6 1 roll
        5 -2 roll
        ]
} bind def
        
/Msboxa1 {
        sub
        2 div
        dup
        2 index
        1 add
        mul
        3 -1 roll
        -1 add
        3 -1 roll
        mul
} bind def
/Mvboxa {
        gsave
        newpath
        [ true
        3 -1 roll
        {
        Mbbox
        5 -1 roll
        {
        0
        5 1 roll
        }
        {
        7 -1 roll
        exch sub
        (m) stringwidth pop
        .3 mul
        sub
        7 1 roll
        6 -1 roll
        4 -1 roll
        Mmin
        3 -1 roll
        5 index
        add
        5 -1 roll
        4 -1 roll
        Mmax
        4 -1 roll
        }
        ifelse
        false
        }
        forall
        { stop } if
        counttomark
        1 add
        4 roll
        ]
        grestore
} bind def
/Mbbox {
        0 0 moveto
        false charpath
        flattenpath
        pathbbox
        newpath
} bind def
/Mmin {
        2 copy
        gt
        { exch } if
        pop
} bind def
/Mmax {
        2 copy
        lt
        { exch } if
        pop
} bind def
/Mshowa {
        4 -2 roll
        moveto
        2 index
        Mtmatrix setmatrix
        Mvboxa
        7 1 roll
        6 -1 roll
        5 -1 roll
        4 -1 roll
        Mshowa1
        4 1 roll
        Mshowa1
        rmoveto
        currentpoint
        0 1
        4 index length
        -1 add
        {
        2 index
        4 index
        2 index
        get
        3 index
        add
        moveto
        4 index
        exch get
        show
        } for
        pop pop pop pop
        Mgmatrix setmatrix
} bind def
/Mshowa1 {
        2 copy
        add
        4 1 roll
        sub
        mul
        sub
        -2 div
} bind def
/MathScale {
        Mwidth
        Mheight
        Mlp
        translate
        scale
        /Mgmatrix
        matrix currentmatrix
        def
        /Msaveaa exch def
        /Msavebb exch def
        /Msavecc exch def
        /Msavedd exch def
} bind def
/Mlp {
        3 copy
        Mlpfirst
        {
        Mnodistort
        {
        Mmin
        dup
        } if
        4 index
        2 index
        2 index
        Mlprun
        11 index
        11 -1 roll
        10 -4 roll
        Mlp1
        8 index
        9 -5 roll
        Mlp1
        4 -1 roll
        and
        { exit } if
        3 -1 roll
        pop pop
        } loop
        exch
        3 1 roll
        7 -3 roll
        pop pop pop
} bind def
/Mlpfirst {
        3 -1 roll
        dup length
        2 copy
        -2 add
        get
        aload
        pop pop pop
        4 -2 roll
        -1 add
        get
        aload
        pop pop pop
        6 -1 roll
        3 -1 roll
        5 -1 roll
        sub
        dup /MsaveAx exch def
        div
        4 1 roll
        exch sub
        dup /MsaveAy exch def
        div
} bind def
/Mlprun {
        2 copy
        4 index
        0 get
        dup
        4 1 roll
        Mlprun1
        3 copy
        8 -2 roll
        9 -1 roll
        {
        3 copy
        Mlprun1
        3 copy
        11 -3 roll
        /gt Mlpminmax
        8 3 roll
        11 -3 roll
        /lt Mlpminmax
        8 3 roll
        } forall
        pop pop pop pop
        3 1 roll
        pop pop
        aload pop
        5 -1 roll
        aload pop
        exch
        6 -1 roll
        Mlprun2
        8 2 roll
        4 -1 roll
        Mlprun2
        6 2 roll
        3 -1 roll
        Mlprun2
        4 2 roll
        exch
        Mlprun2
        6 2 roll
} bind def
/Mlprun1 {
        aload pop
        exch
        6 -1 roll
        5 -1 roll
        mul add
        4 -2 roll
        mul
        3 -1 roll
        add
} bind def
/Mlprun2 {
        2 copy
        add 2 div
        3 1 roll
        exch sub
} bind def
/Mlpminmax {
        cvx
        2 index
        6 index
        2 index
        exec
        {
        7 -3 roll
        4 -1 roll
        } if
        1 index
        5 index
        3 -1 roll
        exec
        {
        4 1 roll
        pop
        5 -1 roll
        aload
        pop pop
        4 -1 roll
        aload pop
        [
        8 -2 roll
        pop
        5 -2 roll
        pop
        6 -2 roll
        pop
        5 -1 roll
        ]
        4 1 roll
        pop
        }
        {
        pop pop pop
        } ifelse
} bind def
/Mlp1 {
        5 index
        3 index sub
        5 index
        2 index mul
        1 index
        le
        1 index
        0 le
        or
        dup
        not
        {
        1 index
        3 index div
        .99999 mul
        8 -1 roll
        pop
        7 1 roll
        }
        if
        8 -1 roll
        2 div
        7 -2 roll
        pop sub
        5 index
        6 -3 roll
        pop pop
        mul sub
        exch
} bind def
/Mfontsize      12 def
/Mleft          0.000000 def
/Mbottom        176.000000 def
/Mwidth         282.000000 def
/Mheight        176.000000 def
/Courier findfont 12 scalefont setfont
%!
%%Creator: Mathematica
%%AspectRatio: 0.61803 
MathPictureStart
% Scaling calculations
0.02381 0.02721 0 6.18034 [
[(5)] 0.15986 -0.0125 0 1 Msboxa
[(10)] 0.29592 -0.0125 0 1 Msboxa
[(15)] 0.43197 -0.0125 0 1 Msboxa
[(20)] 0.56803 -0.0125 0 1 Msboxa
[(25)] 0.70408 -0.0125 0 1 Msboxa
[(30)] 0.84014 -0.0125 0 1 Msboxa
[(35)] 0.97619 -0.0125 0 1 Msboxa
[(0.02)] 0.01131 0.12361 1 0 Msboxa
[(0.04)] 0.01131 0.24721 1 0 Msboxa
[(0.06)] 0.01131 0.37082 1 0 Msboxa
[(0.08)] 0.01131 0.49443 1 0 Msboxa
[(0.1)] 0.01131 0.61803 1 0 Msboxa
[ -0.001 -0.00725 0 0 ]
[ 1.001 0.61903 0 0 ]
] MathScale
% Start of Graphics
1 setlinecap
1 setlinejoin
newpath
%%Object: Graphics
[ ] 0 setdash
0 setgray
gsave
gsave
0.002 setlinewidth
0 0 moveto
1 0 lineto
stroke
0.15986 -0.00625 moveto
0.15986 0.00625 lineto
stroke
0 setgray
[(5)] 0.15986 -0.0125 0 1 Mshowa
0.29592 -0.00625 moveto
0.29592 0.00625 lineto
stroke
0 setgray
[(10)] 0.29592 -0.0125 0 1 Mshowa
0.43197 -0.00625 moveto
0.43197 0.00625 lineto
stroke
0 setgray
[(15)] 0.43197 -0.0125 0 1 Mshowa
0.56803 -0.00625 moveto
0.56803 0.00625 lineto
stroke
0 setgray
[(20)] 0.56803 -0.0125 0 1 Mshowa
0.70408 -0.00625 moveto
0.70408 0.00625 lineto
stroke
0 setgray
[(25)] 0.70408 -0.0125 0 1 Mshowa
0.84014 -0.00625 moveto
0.84014 0.00625 lineto
stroke
0 setgray
[(30)] 0.84014 -0.0125 0 1 Mshowa
0.97619 -0.00625 moveto
0.97619 0.00625 lineto
stroke
0 setgray
[(35)] 0.97619 -0.0125 0 1 Mshowa
0.02381 0 moveto
0.02381 0.61803 lineto
stroke
0.01756 0.12361 moveto
0.03006 0.12361 lineto
stroke
0 setgray
[(0.02)] 0.01131 0.12361 1 0 Mshowa
0.01756 0.24721 moveto
0.03006 0.24721 lineto
stroke
0 setgray
[(0.04)] 0.01131 0.24721 1 0 Mshowa
0.01756 0.37082 moveto
0.03006 0.37082 lineto
stroke
0 setgray
[(0.06)] 0.01131 0.37082 1 0 Mshowa
0.01756 0.49443 moveto
0.03006 0.49443 lineto
stroke
0 setgray
[(0.08)] 0.01131 0.49443 1 0 Mshowa
0.01756 0.61803 moveto
0.03006 0.61803 lineto
stroke
0 setgray
[(0.1)] 0.01131 0.61803 1 0 Mshowa
grestore
grestore
0 0 moveto
1 0 lineto
1 0.618034 lineto
0 0.618034 lineto
closepath
clip
newpath
0 setgray
gsave
gsave
0.004 setlinewidth
0.02381 0.00031 moveto
0.02877 0.00041 lineto
0.03373 0.00052 lineto
0.03869 0.00067 lineto
0.04365 0.00086 lineto
0.04861 0.00109 lineto
0.05357 0.00138 lineto
0.05853 0.00174 lineto
0.06349 0.00219 lineto
0.07341 0.00339 lineto
0.07837 0.00418 lineto
0.08333 0.00514 lineto
0.09325 0.00764 lineto
0.10317 0.01109 lineto
0.1131 0.01575 lineto
0.12302 0.02187 lineto
0.13294 0.02968 lineto
0.14286 0.03938 lineto
0.1627 0.06478 lineto
0.18254 0.09769 lineto
0.22222 0.17581 lineto
0.2619 0.25095 lineto
0.30159 0.32186 lineto
0.34127 0.39753 lineto
0.36111 0.43169 lineto
0.37103 0.44557 lineto
0.37599 0.4514 lineto
0.38095 0.45638 lineto
0.38591 0.46044 lineto
0.39087 0.46351 lineto
0.39335 0.46466 lineto
0.39459 0.46513 lineto
0.39583 0.46554 lineto
0.39707 0.46588 lineto
0.39831 0.46615 lineto
0.39955 0.46635 lineto
0.40079 0.46649 lineto
0.40203 0.46655 lineto
0.40327 0.46655 lineto
0.40451 0.46647 lineto
0.40575 0.46633 lineto
0.40699 0.46611 lineto
0.40823 0.46582 lineto
0.41071 0.46504 lineto
0.41319 0.46397 lineto
0.41567 0.46261 lineto
0.42063 0.45907 lineto
0.4256 0.45441 lineto
0.43056 0.44869 lineto
0.44048 0.43423 lineto
Mistroke
0.46032 0.39514 lineto
0.5 0.29736 lineto
0.51984 0.25188 lineto
0.52976 0.23255 lineto
0.53968 0.21615 lineto
0.5496 0.20303 lineto
0.55456 0.19774 lineto
0.55952 0.19332 lineto
0.56448 0.18974 lineto
0.56944 0.187 lineto
0.57192 0.18593 lineto
0.5744 0.18506 lineto
0.57688 0.18438 lineto
0.57937 0.18389 lineto
0.58061 0.18371 lineto
0.58185 0.18358 lineto
0.58309 0.18349 lineto
0.58433 0.18344 lineto
0.58557 0.18343 lineto
0.58681 0.18346 lineto
0.58805 0.18353 lineto
0.58929 0.18365 lineto
0.59053 0.18379 lineto
0.59177 0.18398 lineto
0.59425 0.18445 lineto
0.59673 0.18506 lineto
0.59921 0.18578 lineto
0.60913 0.18972 lineto
0.61905 0.1948 lineto
0.63889 0.20555 lineto
0.64385 0.20787 lineto
0.64881 0.20988 lineto
0.65377 0.21152 lineto
0.65625 0.21218 lineto
0.65873 0.21273 lineto
0.66121 0.21315 lineto
0.66245 0.21331 lineto
0.66369 0.21344 lineto
0.66493 0.21354 lineto
0.66617 0.2136 lineto
0.66741 0.21363 lineto
0.66865 0.21362 lineto
0.66989 0.21357 lineto
0.67113 0.21349 lineto
0.67237 0.21338 lineto
0.67361 0.21322 lineto
0.67609 0.2128 lineto
0.67857 0.21223 lineto
0.68353 0.21062 lineto
0.68849 0.20838 lineto
Mistroke
0.69841 0.20205 lineto
0.70833 0.19335 lineto
0.71825 0.18252 lineto
0.7381 0.15599 lineto
0.77778 0.09589 lineto
0.79762 0.06889 lineto
0.81746 0.04666 lineto
0.82738 0.03757 lineto
0.8373 0.0298 lineto
0.84722 0.02329 lineto
0.85714 0.01794 lineto
0.86706 0.01362 lineto
0.87698 0.01018 lineto
0.8869 0.0075 lineto
0.89683 0.00545 lineto
0.90675 0.0039 lineto
0.91667 0.00275 lineto
0.92659 0.00191 lineto
0.93651 0.00131 lineto
0.94147 0.00107 lineto
0.94643 0.00088 lineto
0.95635 0.00059 lineto
0.96131 0.00047 lineto
0.96627 0.00038 lineto
0.97619 0.00025 lineto
Mfstroke
grestore
grestore
% End of Graphics
MathPictureEnd
%%EPS Trailer
end
%%EndFile
end end epssave restore
grestore
grestore
0.69839 0 0 0.69839 283.160004 137.951477 sc5mt astore 255 218 282 176 0.595745 0 0 0.497825 330.585083 187.974182 sc6mt astore rstroke
/crlinw 1.4 def
-0.529671 0.848203 0.848203 0.529671 471.314819 78.668976 sc6mt astore 20.5 1 -3.414634 274 326 -0.284214 0.455133 0.848203 0.529671 395.059509 177.370087 sc5mt astore estroke
0.81122 0.584741 -0.584741 0.81122 324.885223 -10.596222 sc6mt astore 14.5 1 -6.62069 153 389 0.81122 0.584741 -0.535362 0.742715 318.240204 14.013996 sc5mt astore estroke
-0.81122 0.584741 0.584741 0.81122 391.099152 -1.596222 sc6mt astore 14.5 1 -6.62069 153 389 -0.81122 0.584741 0.535362 0.742715 388.744171 14.013996 sc5mt astore estroke
-4.371139e-08 1 -1 -4.371139e-08 628.500793 219.00563 sc6mt astore 14.5 1 -6.62069 153 389 -4.371139e-08 1 -1 -4.371139e-08 646.500793 237.00563 sc5mt astore estroke
1 0 0 1 60.5 -69 sc6mt astore 20.5 1 -3.414634 274 326 0.560976 0 0 1 189.792679 -78 sc5mt astore estroke
0.529671 0.848203 -0.848203 0.529671 244.685181 72.668976 sc6mt astore 20.5 1 -3.414634 274 326 0.284214 0.455133 -0.848203 0.529671 311.940491 180.370087 sc5mt astore estroke
/crlinw 2.8 def
/crfilred 0.9167 def /crfilgrn 0.9167 def /crfilblu 0.9167 def /filinclr true def
17.5 1.057143 -1 86 514 0.972973 0 0 1.028571 252.824326 -254.68573 sc5mt astore efill
1 0 0 1 241.5 -231 sc6mt astore 17.5 1.057143 -1 86 514 0.972973 0 0 1.028571 252.824326 -254.68573 sc5mt astore estroke
17.5 1.057143 -1 86 514 0.972973 0 0 1.028571 144.824326 -104.68573 sc5mt astore efill
1 0 0 1 142.5 -90 sc6mt astore 17.5 1.057143 -1 86 514 0.972973 0 0 1.028571 144.824326 -104.68573 sc5mt astore estroke
17.5 1.057143 -1 86 514 0.972973 0 0 1.028571 361.824341 -104.68573 sc5mt astore efill
1 0 0 1 350.5 -81 sc6mt astore 17.5 1.057143 -1 86 514 0.972973 0 0 1.028571 361.824341 -104.68573 sc5mt astore estroke
/txtdraw true def
/txlndraw true def
(a) [0 0] 249 325 /Helvetica [ 14 1 mul 0 0 14 0 0 ] [1 0 0 1 7.5 -11] dotx
/txtdraw true def
/txlndraw true def
(12 ) [7.783997 0 7.783997 0 0 0] 256.783997 319.399994 /Helvetica [ 14 1 mul 0 0 14 0 0 ] [1 0 0 1 7.5 -11] dotx
/txtdraw true def
/txlndraw true def
(a) [0 0] 306 352 /Helvetica [ 14 1 mul 0 0 14 0 0 ] [1 0 0 1 4.5 -8] dotx
/txtdraw true def
/txlndraw true def
(21 ) [7.783997 0 7.783997 0 0 0] 313.783997 346.399994 /Helvetica [ 14 1 mul 0 0 14 0 0 ] [1 0 0 1 4.5 -8] dotx
/txtdraw true def
/txlndraw true def
(a) [0 0] 417 300 /Helvetica [ 14 1 mul 0 0 14 0 0 ] [1 0 0 1 6.5 9] dotx
/txtdraw true def
/txlndraw true def
(23 ) [7.783997 0 7.783997 0 0 0] 424.783997 294.399994 /Helvetica [ 14 1 mul 0 0 14 0 0 ] [1 0 0 1 6.5 9] dotx
/txtdraw true def
/txlndraw true def
(a) [0 0] 371 346 /Helvetica [ 14 1 mul 0 0 14 0 0 ] [1 0 0 1 -1.5 -2] dotx
/txtdraw true def
/txlndraw true def
(32 ) [7.783997 0 7.783997 0 0 0] 378.783997 340.399994 /Helvetica [ 14 1 mul 0 0 14 0 0 ] [1 0 0 1 -1.5 -2] dotx
/txtdraw true def
/txlndraw true def
(a) [0 0] 375 172 /Helvetica [ 14 1 mul 0 0 14 0 0 ] [1 0 0 1 -2.5 1] dotx
/txtdraw true def
/txlndraw true def
(22 ) [7.783997 0 7.783997 0 0 0] 382.783997 166.399994 /Helvetica [ 14 1 mul 0 0 14 0 0 ] [1 0 0 1 -2.5 1] dotx
/txtdraw true def
/txlndraw true def
(a) [0 0] 183 475 /Helvetica [ 14 1 mul 0 0 14 0 0 ] [1 0 0 1 1.5 -9] dotx
/txtdraw true def
/txlndraw true def
(11 ) [7.783997 0 7.783997 0 0 0] 190.783997 469.399994 /Helvetica [ 14 1 mul 0 0 14 0 0 ] [1 0 0 1 1.5 -9] dotx
/txtdraw true def
/txlndraw true def
(a) [0 0] 571 440 /Helvetica [ 14 1 mul 0 0 14 0 0 ] [1 0 0 1 -28.5 -9] dotx
/txtdraw true def
/txlndraw true def
(33 ) [7.783997 0 7.783997 0 0 0] 578.783997 434.399994 /Helvetica [ 14 1 mul 0 0 14 0 0 ] [1 0 0 1 -28.5 -9] dotx
/txtdraw true def
/txlndraw true def
(a) [0 0] 341 436 /Helvetica [ 14 1 mul 0 0 14 0 0 ] [1 0 0 1 0.5 -4] dotx
/txtdraw true def
/txlndraw true def
(31 ) [7.783997 0 7.783997 0 0 0] 348.783997 430.399994 /Helvetica [ 14 1 mul 0 0 14 0 0 ] [1 0 0 1 0.5 -4] dotx
/txtdraw true def
/txlndraw true def
(a) [0 0] 344 377 /Helvetica [ 14 1 mul 0 0 14 0 0 ] [1 0 0 1 -0.5 0] dotx
/txtdraw true def
/txlndraw true def
(13 ) [7.783997 0 7.783997 0 0 0] 351.783997 371.399994 /Helvetica [ 14 1 mul 0 0 14 0 0 ] [1 0 0 1 -0.5 0] dotx
/txtdraw true def
/txlndraw true def
(S) [0 0] 206 387 /Helvetica-Bold [ 14 1 mul 0 0 14 0 0 ] [1 0 0 1 33.5 14] dotx
/txtdraw true def
/txlndraw true def
(1 ) [7.783997 0 0 0] 215.337997 381.399994 /Helvetica-Bold [ 14 1 mul 0 0 14 0 0 ] [1 0 0 1 33.5 14] dotx
/txtdraw true def
/txlndraw true def
(S) [0 0] 381 241 /Helvetica-Bold [ 14 1 mul 0 0 14 0 0 ] [1 0 0 1 -34.5 10] dotx
/txtdraw true def
/txlndraw true def
(2 ) [7.783997 0 0 0] 390.338013 235.399994 /Helvetica-Bold [ 14 1 mul 0 0 14 0 0 ] [1 0 0 1 -34.5 10] dotx
/txtdraw true def
/txlndraw true def
(S) [0 0] 479 381 /Helvetica-Bold [ 14 1 mul 0 0 14 0 0 ] [1 0 0 1 -23.5 21] dotx
/txtdraw true def
/txlndraw true def
(3 ) [7.783997 0 0 0] 488.338013 375.399994 /Helvetica-Bold [ 14 1 mul 0 0 14 0 0 ] [1 0 0 1 -23.5 21] dotx
/crlinw 1.4 def
-0.621182 0.783666 -0.783666 -0.621182 871.836487 534.80188 sc5mt astore -3.5 -11.5 97.5 359.5 -0.621182 0.783666 -0.783666 -0.621182 877.685913 585.376465 sc6mt astore ssl
0.621182 -0.783666 -0.783666 -0.621182 738.764709 688.997864 sc5mt astore -3.5 -11.5 106.5 350.5 0.621182 -0.783666 -0.783666 -0.621182 744.614136 739.572449 sc6mt astore ssl
1 0 0 1 224 -133 sc5mt astore -3.5 -11.5 97.5 359.5 1 0 0 1 269 -178 sc6mt astore ssl
-1 0 0 1 427.5 -124.5 sc5mt astore -3.5 -11.5 106.5 350.5 -1 0 0 1 472.5 -169.5 sc6mt astore ssl
0.534773 0.844995 -0.844995 0.534773 358.322083 170.375595 sc5mt astore -3.5 -11.5 97.5 359.5 0.534773 0.844995 -0.844995 0.534773 432.82962 187.127594 sc6mt astore ssl
-0.534773 -0.844995 -0.844995 0.534773 459.965973 346.877747 sc5mt astore -3.5 -11.5 106.5 350.5 -0.534773 -0.844995 -0.844995 0.534773 534.473511 363.629761 sc6mt astore ssl
-0.027111 -0.999632 0.999632 -0.027111 67.701324 558.066833 sc5mt astore -3.5 -11.5 97.5 359.5 -0.027111 -0.999632 0.999632 -0.027111 3.016495 496.797974 sc6mt astore ssl
0.027111 0.999632 0.999632 -0.027111 70.681114 354.411194 sc5mt astore -3.5 -11.5 106.5 350.5 0.027111 0.999632 0.999632 -0.027111 5.996283 293.142334 sc6mt astore ssl
0.822064 0.569395 -0.569395 0.822064 330.90033 9.71888 sc5mt astore -3.5 -11.5 97.5 359.5 0.822064 0.569395 -0.569395 0.822064 431.085388 -8.47329 sc6mt astore ssl
-0.822064 -0.569395 -0.569395 0.822064 493.350525 132.578308 sc5mt astore -3.5 -11.5 106.5 350.5 -0.822064 -0.569395 -0.569395 0.822064 593.535583 114.386139 sc6mt astore ssl
-0.822064 -0.569395 0.569395 -0.822064 270.850525 643.483948 sc5mt astore -3.5 -11.5 97.5 359.5 -0.822064 -0.569395 0.569395 -0.822064 161.665466 670.676147 sc6mt astore ssl
0.822064 0.569395 0.569395 -0.822064 108.40036 520.624512 sc5mt astore -3.5 -11.5 106.5 350.5 0.822064 0.569395 0.569395 -0.822064 -0.784699 547.816711 sc6mt astore ssl
0.822064 -0.569395 -0.569395 -0.822064 421.40033 669.483948 sc5mt astore -3.5 -11.5 97.5 359.5 0.822064 -0.569395 -0.569395 -0.822064 521.585388 687.676147 sc6mt astore ssl
-0.822064 0.569395 -0.569395 -0.822064 583.850525 546.624512 sc5mt astore -3.5 -11.5 106.5 350.5 -0.822064 0.569395 -0.569395 -0.822064 684.035583 564.816711 sc6mt astore ssl
-0.822064 0.569395 0.569395 0.822064 411.350464 -11.78104 sc5mt astore -3.5 -11.5 97.5 359.5 -0.822064 0.569395 0.569395 0.822064 302.165405 -20.973232 sc6mt astore ssl
0.822064 -0.569395 0.569395 0.822064 248.900314 111.078415 sc5mt astore -3.5 -11.5 106.5 350.5 0.822064 -0.569395 0.569395 0.822064 139.715256 101.886223 sc6mt astore ssl
0.027111 -0.999632 -0.999632 -0.027111 648.703857 596.066833 sc5mt astore -3.5 -11.5 97.5 359.5 0.027111 -0.999632 -0.999632 -0.027111 704.388672 525.797974 sc6mt astore ssl
-0.027111 0.999632 -0.999632 -0.027111 645.72406 392.411194 sc5mt astore -3.5 -11.5 106.5 350.5 -0.027111 0.999632 -0.999632 -0.027111 701.408875 322.142334 sc6mt astore ssl
/crlinw 1 def
gsave clpmt currentmatrix pop newpath
282 176 255 218 [0.594487 0 0 0.498767 6.405685 46.268818] mkrpath
clip
newpath
clpmt setmatrix
gsave
/epssave save def TDeps_dict begin userdict begin
[0.684109 0 0 0.684109 -36.932346 -2.128021] dodrawctm
255 218 translate
%%BeginFile: /tmp/topdraw_eps_477_41
%!PS-Adobe-2.0 EPSF-1.2
%%BoundingBox: 0 0 282 176
%%Creator: Mathematica
%%Title: Clipboard
%%CreationDate: Never Never
%%EndComments
50 dict begin
/Mnodistort true def
/pageDashArray [4] def
/nullDashArray [] def

% Compute the minimum of two numbers.
/Mmin {         % p q Mmin min(p,q)
        2 copy          % p q p q
        gt              % p q p>q?
        { exch } if     % min(p,q) max(p,q)
        pop             % min(p,q)
} bind def


% Compute the maximum of two numbers.
/Mmax {         % p q Mmax max(p,q)
        2 copy          % p q p q
        lt              % p q p<q?
        { exch } if     % max(p,q) min(p,q)
        pop             % max(p,q)
} bind def

/Mpstart {
    MathPictureStart
} bind def
/Mpend {
    MathPictureEnd
} bind def
/Mscale {
    0 1 0 1
    5 -1 roll
    MathScale
} bind def
/Plain
        /Courier findfont
def
/Bold
        /Courier-Bold findfont
def
/Italic
        /Courier-Oblique findfont
def
/MathPictureStart {
        gsave
        newpath
        /Mtmatrix
        matrix currentmatrix
        def
        Plain
        Mfontsize scalefont
        setfont
0 setgray 0 setlinewidth
} bind def
/MathPictureEnd {
        grestore
} bind def
/Mdot {
        moveto
        0 0 rlineto
        stroke
} def
/Mtetra {
        moveto
        lineto
        lineto
        lineto
        fill
} def
/Metetra {
        moveto
        lineto
        lineto
        lineto
        closepath
        gsave
        fill
        grestore
        0 setgray
        stroke
} def
/Mistroke {
        flattenpath
        0 0 0
        {
        4 2 roll
        pop pop
        }
        {
        4 -1 roll
        2 index
        sub dup mul
        4 -1 roll
        2 index
        sub dup mul
        add sqrt
        4 -1 roll
        add
        3 1 roll
        }
        {
        stop
        }
        {
        stop
        }
        pathforall
        pop pop
        currentpoint
        stroke
        moveto
        currentdash
        3 -1 roll
        add
        setdash
} def
/Mfstroke {
        stroke
        currentdash
        pop 0
        setdash
} def
/Msboxa {
        newpath
        5 -1 roll
        Mvboxa
        pop
        6 -1 roll
        5 -1 roll
        4 -1 roll
        Msboxa1
        5 -3 roll
        Msboxa1
        [
        7 -2 roll
        [ 2 index 2 index
        10 -1 roll
        9 -1 roll
        ]
        6 1 roll
        5 -2 roll
        ]
} bind def
        
/Msboxa1 {
        sub
        2 div
        dup
        2 index
        1 add
        mul
        3 -1 roll
        -1 add
        3 -1 roll
        mul
} bind def
/Mvboxa {
        gsave
        newpath
        [ true
        3 -1 roll
        {
        Mbbox
        5 -1 roll
        {
        0
        5 1 roll
        }
        {
        7 -1 roll
        exch sub
        (m) stringwidth pop
        .3 mul
        sub
        7 1 roll
        6 -1 roll
        4 -1 roll
        Mmin
        3 -1 roll
        5 index
        add
        5 -1 roll
        4 -1 roll
        Mmax
        4 -1 roll
        }
        ifelse
        false
        }
        forall
        { stop } if
        counttomark
        1 add
        4 roll
        ]
        grestore
} bind def
/Mbbox {
        0 0 moveto
        false charpath
        flattenpath
        pathbbox
        newpath
} bind def
/Mmin {
        2 copy
        gt
        { exch } if
        pop
} bind def
/Mmax {
        2 copy
        lt
        { exch } if
        pop
} bind def
/Mshowa {
        4 -2 roll
        moveto
        2 index
        Mtmatrix setmatrix
        Mvboxa
        7 1 roll
        6 -1 roll
        5 -1 roll
        4 -1 roll
        Mshowa1
        4 1 roll
        Mshowa1
        rmoveto
        currentpoint
        0 1
        4 index length
        -1 add
        {
        2 index
        4 index
        2 index
        get
        3 index
        add
        moveto
        4 index
        exch get
        show
        } for
        pop pop pop pop
        Mgmatrix setmatrix
} bind def
/Mshowa1 {
        2 copy
        add
        4 1 roll
        sub
        mul
        sub
        -2 div
} bind def
/MathScale {
        Mwidth
        Mheight
        Mlp
        translate
        scale
        /Mgmatrix
        matrix currentmatrix
        def
        /Msaveaa exch def
        /Msavebb exch def
        /Msavecc exch def
        /Msavedd exch def
} bind def
/Mlp {
        3 copy
        Mlpfirst
        {
        Mnodistort
        {
        Mmin
        dup
        } if
        4 index
        2 index
        2 index
        Mlprun
        11 index
        11 -1 roll
        10 -4 roll
        Mlp1
        8 index
        9 -5 roll
        Mlp1
        4 -1 roll
        and
        { exit } if
        3 -1 roll
        pop pop
        } loop
        exch
        3 1 roll
        7 -3 roll
        pop pop pop
} bind def
/Mlpfirst {
        3 -1 roll
        dup length
        2 copy
        -2 add
        get
        aload
        pop pop pop
        4 -2 roll
        -1 add
        get
        aload
        pop pop pop
        6 -1 roll
        3 -1 roll
        5 -1 roll
        sub
        dup /MsaveAx exch def
        div
        4 1 roll
        exch sub
        dup /MsaveAy exch def
        div
} bind def
/Mlprun {
        2 copy
        4 index
        0 get
        dup
        4 1 roll
        Mlprun1
        3 copy
        8 -2 roll
        9 -1 roll
        {
        3 copy
        Mlprun1
        3 copy
        11 -3 roll
        /gt Mlpminmax
        8 3 roll
        11 -3 roll
        /lt Mlpminmax
        8 3 roll
        } forall
        pop pop pop pop
        3 1 roll
        pop pop
        aload pop
        5 -1 roll
        aload pop
        exch
        6 -1 roll
        Mlprun2
        8 2 roll
        4 -1 roll
        Mlprun2
        6 2 roll
        3 -1 roll
        Mlprun2
        4 2 roll
        exch
        Mlprun2
        6 2 roll
} bind def
/Mlprun1 {
        aload pop
        exch
        6 -1 roll
        5 -1 roll
        mul add
        4 -2 roll
        mul
        3 -1 roll
        add
} bind def
/Mlprun2 {
        2 copy
        add 2 div
        3 1 roll
        exch sub
} bind def
/Mlpminmax {
        cvx
        2 index
        6 index
        2 index
        exec
        {
        7 -3 roll
        4 -1 roll
        } if
        1 index
        5 index
        3 -1 roll
        exec
        {
        4 1 roll
        pop
        5 -1 roll
        aload
        pop pop
        4 -1 roll
        aload pop
        [
        8 -2 roll
        pop
        5 -2 roll
        pop
        6 -2 roll
        pop
        5 -1 roll
        ]
        4 1 roll
        pop
        }
        {
        pop pop pop
        } ifelse
} bind def
/Mlp1 {
        5 index
        3 index sub
        5 index
        2 index mul
        1 index
        le
        1 index
        0 le
        or
        dup
        not
        {
        1 index
        3 index div
        .99999 mul
        8 -1 roll
        pop
        7 1 roll
        }
        if
        8 -1 roll
        2 div
        7 -2 roll
        pop sub
        5 index
        6 -3 roll
        pop pop
        mul sub
        exch
} bind def
/Mfontsize      12 def
/Mleft          0.000000 def
/Mbottom        176.000000 def
/Mwidth         282.000000 def
/Mheight        176.000000 def
/Courier findfont 12 scalefont setfont
%!
%%Creator: Mathematica
%%AspectRatio: 0.61803 
MathPictureStart
% Scaling calculations
0.02381 0.02721 0 6.18034 [
[(5)] 0.15986 -0.0125 0 1 Msboxa
[(10)] 0.29592 -0.0125 0 1 Msboxa
[(15)] 0.43197 -0.0125 0 1 Msboxa
[(20)] 0.56803 -0.0125 0 1 Msboxa
[(25)] 0.70408 -0.0125 0 1 Msboxa
[(30)] 0.84014 -0.0125 0 1 Msboxa
[(35)] 0.97619 -0.0125 0 1 Msboxa
[(0.02)] 0.01131 0.12361 1 0 Msboxa
[(0.04)] 0.01131 0.24721 1 0 Msboxa
[(0.06)] 0.01131 0.37082 1 0 Msboxa
[(0.08)] 0.01131 0.49443 1 0 Msboxa
[(0.1)] 0.01131 0.61803 1 0 Msboxa
[ -0.001 -0.00725 0 0 ]
[ 1.001 0.61903 0 0 ]
] MathScale
% Start of Graphics
1 setlinecap
1 setlinejoin
newpath
%%Object: Graphics
[ ] 0 setdash
0 setgray
gsave
gsave
0.002 setlinewidth
0 0 moveto
1 0 lineto
stroke
0.15986 -0.00625 moveto
0.15986 0.00625 lineto
stroke
0 setgray
[(5)] 0.15986 -0.0125 0 1 Mshowa
0.29592 -0.00625 moveto
0.29592 0.00625 lineto
stroke
0 setgray
[(10)] 0.29592 -0.0125 0 1 Mshowa
0.43197 -0.00625 moveto
0.43197 0.00625 lineto
stroke
0 setgray
[(15)] 0.43197 -0.0125 0 1 Mshowa
0.56803 -0.00625 moveto
0.56803 0.00625 lineto
stroke
0 setgray
[(20)] 0.56803 -0.0125 0 1 Mshowa
0.70408 -0.00625 moveto
0.70408 0.00625 lineto
stroke
0 setgray
[(25)] 0.70408 -0.0125 0 1 Mshowa
0.84014 -0.00625 moveto
0.84014 0.00625 lineto
stroke
0 setgray
[(30)] 0.84014 -0.0125 0 1 Mshowa
0.97619 -0.00625 moveto
0.97619 0.00625 lineto
stroke
0 setgray
[(35)] 0.97619 -0.0125 0 1 Mshowa
0.02381 0 moveto
0.02381 0.61803 lineto
stroke
0.01756 0.12361 moveto
0.03006 0.12361 lineto
stroke
0 setgray
[(0.02)] 0.01131 0.12361 1 0 Mshowa
0.01756 0.24721 moveto
0.03006 0.24721 lineto
stroke
0 setgray
[(0.04)] 0.01131 0.24721 1 0 Mshowa
0.01756 0.37082 moveto
0.03006 0.37082 lineto
stroke
0 setgray
[(0.06)] 0.01131 0.37082 1 0 Mshowa
0.01756 0.49443 moveto
0.03006 0.49443 lineto
stroke
0 setgray
[(0.08)] 0.01131 0.49443 1 0 Mshowa
0.01756 0.61803 moveto
0.03006 0.61803 lineto
stroke
0 setgray
[(0.1)] 0.01131 0.61803 1 0 Mshowa
grestore
grestore
0 0 moveto
1 0 lineto
1 0.618034 lineto
0 0.618034 lineto
closepath
clip
newpath
0 setgray
gsave
gsave
0.004 setlinewidth
0.02381 0.00065 moveto
0.02877 0.00086 lineto
0.03373 0.00113 lineto
0.03869 0.00147 lineto
0.04365 0.00191 lineto
0.04861 0.00246 lineto
0.05357 0.00315 lineto
0.05853 0.00402 lineto
0.06349 0.00509 lineto
0.07341 0.00802 lineto
0.07837 0.00998 lineto
0.08333 0.01234 lineto
0.09325 0.01852 lineto
0.10317 0.0271 lineto
0.1131 0.03866 lineto
0.12302 0.05377 lineto
0.14286 0.09639 lineto
0.1627 0.15617 lineto
0.18254 0.22896 lineto
0.20238 0.30455 lineto
0.2123 0.33909 lineto
0.22222 0.36918 lineto
0.23214 0.39345 lineto
0.2371 0.4031 lineto
0.24206 0.41102 lineto
0.24702 0.41718 lineto
0.2495 0.41961 lineto
0.25198 0.42161 lineto
0.25446 0.42319 lineto
0.25694 0.42437 lineto
0.25818 0.42481 lineto
0.25942 0.42515 lineto
0.26066 0.4254 lineto
0.2619 0.42556 lineto
0.26314 0.42563 lineto
0.26438 0.42561 lineto
0.26563 0.42551 lineto
0.26687 0.42532 lineto
0.26811 0.42505 lineto
0.26935 0.42471 lineto
0.27183 0.4238 lineto
0.27431 0.42261 lineto
0.27679 0.42118 lineto
0.28175 0.41766 lineto
0.30159 0.39863 lineto
0.31151 0.3888 lineto
0.32143 0.38035 lineto
0.33135 0.37398 lineto
0.33631 0.37166 lineto
0.33879 0.37072 lineto
Mistroke
0.34127 0.36992 lineto
0.34375 0.36925 lineto
0.34623 0.36871 lineto
0.34871 0.3683 lineto
0.34995 0.36813 lineto
0.35119 0.36799 lineto
0.35243 0.36788 lineto
0.35367 0.36779 lineto
0.35491 0.36773 lineto
0.35615 0.36768 lineto
0.35739 0.36766 lineto
0.35863 0.36765 lineto
0.35987 0.36766 lineto
0.36111 0.36769 lineto
0.36235 0.36773 lineto
0.36359 0.36778 lineto
0.36607 0.36792 lineto
0.37103 0.36826 lineto
0.37599 0.36861 lineto
0.37847 0.36876 lineto
0.37971 0.36881 lineto
0.38095 0.36886 lineto
0.38219 0.36889 lineto
0.38343 0.36891 lineto
0.38467 0.36892 lineto
0.38591 0.3689 lineto
0.38715 0.36887 lineto
0.38839 0.36881 lineto
0.39087 0.36864 lineto
0.39211 0.36851 lineto
0.39335 0.36836 lineto
0.39583 0.36798 lineto
0.39831 0.36748 lineto
0.40079 0.36685 lineto
0.40575 0.36517 lineto
0.41071 0.3629 lineto
0.41567 0.35998 lineto
0.42063 0.3564 lineto
0.43056 0.34718 lineto
0.44048 0.33529 lineto
0.46032 0.30452 lineto
0.5 0.22937 lineto
0.51984 0.19476 lineto
0.52976 0.18013 lineto
0.53968 0.16781 lineto
0.5496 0.15805 lineto
0.55456 0.15417 lineto
0.55952 0.15095 lineto
0.56448 0.14841 lineto
0.56696 0.14738 lineto
Mistroke
0.56944 0.14651 lineto
0.57192 0.14579 lineto
0.5744 0.14523 lineto
0.57564 0.14501 lineto
0.57688 0.14482 lineto
0.57813 0.14467 lineto
0.57937 0.14455 lineto
0.58061 0.14447 lineto
0.58185 0.14442 lineto
0.58309 0.14441 lineto
0.58433 0.14443 lineto
0.58557 0.14448 lineto
0.58681 0.14456 lineto
0.58805 0.14468 lineto
0.58929 0.14482 lineto
0.59425 0.14567 lineto
0.59673 0.14626 lineto
0.59921 0.14693 lineto
0.60913 0.15042 lineto
0.61905 0.15476 lineto
0.63889 0.16379 lineto
0.64385 0.16573 lineto
0.64881 0.16741 lineto
0.65377 0.16878 lineto
0.65625 0.16934 lineto
0.65873 0.1698 lineto
0.66121 0.17017 lineto
0.66245 0.17031 lineto
0.66369 0.17043 lineto
0.66493 0.17051 lineto
0.66617 0.17058 lineto
0.66741 0.17061 lineto
0.66865 0.17061 lineto
0.66989 0.17059 lineto
0.67113 0.17053 lineto
0.67237 0.17045 lineto
0.67361 0.17034 lineto
0.67609 0.17002 lineto
0.67857 0.16957 lineto
0.68105 0.16901 lineto
0.68353 0.16832 lineto
0.68849 0.16655 lineto
0.69345 0.16429 lineto
0.69841 0.16153 lineto
0.71825 0.14596 lineto
0.7381 0.12476 lineto
0.77778 0.07671 lineto
0.79762 0.05511 lineto
0.81746 0.03733 lineto
0.82738 0.03005 lineto
Mistroke
0.8373 0.02384 lineto
0.84722 0.01864 lineto
0.85714 0.01435 lineto
0.86706 0.01089 lineto
0.87698 0.00815 lineto
0.8869 0.006 lineto
0.89683 0.00436 lineto
0.90675 0.00312 lineto
0.91667 0.0022 lineto
0.92659 0.00153 lineto
0.93651 0.00105 lineto
0.94147 0.00086 lineto
0.94643 0.0007 lineto
0.95635 0.00047 lineto
0.96131 0.00038 lineto
0.96627 0.00031 lineto
0.97619 0.0002 lineto
Mfstroke
grestore
grestore
% End of Graphics
MathPictureEnd
%%EPS Trailer
end
%%EndFile
end end epssave restore
grestore
grestore
0.684109 0 0 0.684109 -36.932343 -2.128021 sc5mt astore 255 218 282 176 0.594487 0 0 0.498767 6.405685 46.268818 sc6mt astore rstroke
gsave clpmt currentmatrix pop newpath
282 176 255 218 [0.597844 0 0 0.500167 -91.950203 188.463516] mkrpath
clip
newpath
clpmt setmatrix
gsave
/epssave save def TDeps_dict begin userdict begin
[0.693378 0 0 0.693378 -137.011353 137.993652] dodrawctm
255 218 translate
%%BeginFile: /tmp/topdraw_eps_477_42
%!PS-Adobe-2.0 EPSF-1.2
%%BoundingBox: 0 0 282 176
%%Creator: Mathematica
%%Title: Clipboard
%%CreationDate: Never Never
%%EndComments
50 dict begin
/Mnodistort true def
/pageDashArray [4] def
/nullDashArray [] def

% Compute the minimum of two numbers.
/Mmin {         % p q Mmin min(p,q)
        2 copy          % p q p q
        gt              % p q p>q?
        { exch } if     % min(p,q) max(p,q)
        pop             % min(p,q)
} bind def


% Compute the maximum of two numbers.
/Mmax {         % p q Mmax max(p,q)
        2 copy          % p q p q
        lt              % p q p<q?
        { exch } if     % max(p,q) min(p,q)
        pop             % max(p,q)
} bind def

/Mpstart {
    MathPictureStart
} bind def
/Mpend {
    MathPictureEnd
} bind def
/Mscale {
    0 1 0 1
    5 -1 roll
    MathScale
} bind def
/Plain
        /Courier findfont
def
/Bold
        /Courier-Bold findfont
def
/Italic
        /Courier-Oblique findfont
def
/MathPictureStart {
        gsave
        newpath
        /Mtmatrix
        matrix currentmatrix
        def
        Plain
        Mfontsize scalefont
        setfont
0 setgray 0 setlinewidth
} bind def
/MathPictureEnd {
        grestore
} bind def
/Mdot {
        moveto
        0 0 rlineto
        stroke
} def
/Mtetra {
        moveto
        lineto
        lineto
        lineto
        fill
} def
/Metetra {
        moveto
        lineto
        lineto
        lineto
        closepath
        gsave
        fill
        grestore
        0 setgray
        stroke
} def
/Mistroke {
        flattenpath
        0 0 0
        {
        4 2 roll
        pop pop
        }
        {
        4 -1 roll
        2 index
        sub dup mul
        4 -1 roll
        2 index
        sub dup mul
        add sqrt
        4 -1 roll
        add
        3 1 roll
        }
        {
        stop
        }
        {
        stop
        }
        pathforall
        pop pop
        currentpoint
        stroke
        moveto
        currentdash
        3 -1 roll
        add
        setdash
} def
/Mfstroke {
        stroke
        currentdash
        pop 0
        setdash
} def
/Msboxa {
        newpath
        5 -1 roll
        Mvboxa
        pop
        6 -1 roll
        5 -1 roll
        4 -1 roll
        Msboxa1
        5 -3 roll
        Msboxa1
        [
        7 -2 roll
        [ 2 index 2 index
        10 -1 roll
        9 -1 roll
        ]
        6 1 roll
        5 -2 roll
        ]
} bind def
        
/Msboxa1 {
        sub
        2 div
        dup
        2 index
        1 add
        mul
        3 -1 roll
        -1 add
        3 -1 roll
        mul
} bind def
/Mvboxa {
        gsave
        newpath
        [ true
        3 -1 roll
        {
        Mbbox
        5 -1 roll
        {
        0
        5 1 roll
        }
        {
        7 -1 roll
        exch sub
        (m) stringwidth pop
        .3 mul
        sub
        7 1 roll
        6 -1 roll
        4 -1 roll
        Mmin
        3 -1 roll
        5 index
        add
        5 -1 roll
        4 -1 roll
        Mmax
        4 -1 roll
        }
        ifelse
        false
        }
        forall
        { stop } if
        counttomark
        1 add
        4 roll
        ]
        grestore
} bind def
/Mbbox {
        0 0 moveto
        false charpath
        flattenpath
        pathbbox
        newpath
} bind def
/Mmin {
        2 copy
        gt
        { exch } if
        pop
} bind def
/Mmax {
        2 copy
        lt
        { exch } if
        pop
} bind def
/Mshowa {
        4 -2 roll
        moveto
        2 index
        Mtmatrix setmatrix
        Mvboxa
        7 1 roll
        6 -1 roll
        5 -1 roll
        4 -1 roll
        Mshowa1
        4 1 roll
        Mshowa1
        rmoveto
        currentpoint
        0 1
        4 index length
        -1 add
        {
        2 index
        4 index
        2 index
        get
        3 index
        add
        moveto
        4 index
        exch get
        show
        } for
        pop pop pop pop
        Mgmatrix setmatrix
} bind def
/Mshowa1 {
        2 copy
        add
        4 1 roll
        sub
        mul
        sub
        -2 div
} bind def
/MathScale {
        Mwidth
        Mheight
        Mlp
        translate
        scale
        /Mgmatrix
        matrix currentmatrix
        def
        /Msaveaa exch def
        /Msavebb exch def
        /Msavecc exch def
        /Msavedd exch def
} bind def
/Mlp {
        3 copy
        Mlpfirst
        {
        Mnodistort
        {
        Mmin
        dup
        } if
        4 index
        2 index
        2 index
        Mlprun
        11 index
        11 -1 roll
        10 -4 roll
        Mlp1
        8 index
        9 -5 roll
        Mlp1
        4 -1 roll
        and
        { exit } if
        3 -1 roll
        pop pop
        } loop
        exch
        3 1 roll
        7 -3 roll
        pop pop pop
} bind def
/Mlpfirst {
        3 -1 roll
        dup length
        2 copy
        -2 add
        get
        aload
        pop pop pop
        4 -2 roll
        -1 add
        get
        aload
        pop pop pop
        6 -1 roll
        3 -1 roll
        5 -1 roll
        sub
        dup /MsaveAx exch def
        div
        4 1 roll
        exch sub
        dup /MsaveAy exch def
        div
} bind def
/Mlprun {
        2 copy
        4 index
        0 get
        dup
        4 1 roll
        Mlprun1
        3 copy
        8 -2 roll
        9 -1 roll
        {
        3 copy
        Mlprun1
        3 copy
        11 -3 roll
        /gt Mlpminmax
        8 3 roll
        11 -3 roll
        /lt Mlpminmax
        8 3 roll
        } forall
        pop pop pop pop
        3 1 roll
        pop pop
        aload pop
        5 -1 roll
        aload pop
        exch
        6 -1 roll
        Mlprun2
        8 2 roll
        4 -1 roll
        Mlprun2
        6 2 roll
        3 -1 roll
        Mlprun2
        4 2 roll
        exch
        Mlprun2
        6 2 roll
} bind def
/Mlprun1 {
        aload pop
        exch
        6 -1 roll
        5 -1 roll
        mul add
        4 -2 roll
        mul
        3 -1 roll
        add
} bind def
/Mlprun2 {
        2 copy
        add 2 div
        3 1 roll
        exch sub
} bind def
/Mlpminmax {
        cvx
        2 index
        6 index
        2 index
        exec
        {
        7 -3 roll
        4 -1 roll
        } if
        1 index
        5 index
        3 -1 roll
        exec
        {
        4 1 roll
        pop
        5 -1 roll
        aload
        pop pop
        4 -1 roll
        aload pop
        [
        8 -2 roll
        pop
        5 -2 roll
        pop
        6 -2 roll
        pop
        5 -1 roll
        ]
        4 1 roll
        pop
        }
        {
        pop pop pop
        } ifelse
} bind def
/Mlp1 {
        5 index
        3 index sub
        5 index
        2 index mul
        1 index
        le
        1 index
        0 le
        or
        dup
        not
        {
        1 index
        3 index div
        .99999 mul
        8 -1 roll
        pop
        7 1 roll
        }
        if
        8 -1 roll
        2 div
        7 -2 roll
        pop sub
        5 index
        6 -3 roll
        pop pop
        mul sub
        exch
} bind def
/Mfontsize      12 def
/Mleft          0.000000 def
/Mbottom        176.000000 def
/Mwidth         282.000000 def
/Mheight        176.000000 def
/Courier findfont 12 scalefont setfont
%!
%%Creator: Mathematica
%%AspectRatio: 0.61803 
MathPictureStart
% Scaling calculations
0.02381 0.02721 0 6.18034 [
[(5)] 0.15986 -0.0125 0 1 Msboxa
[(10)] 0.29592 -0.0125 0 1 Msboxa
[(15)] 0.43197 -0.0125 0 1 Msboxa
[(20)] 0.56803 -0.0125 0 1 Msboxa
[(25)] 0.70408 -0.0125 0 1 Msboxa
[(30)] 0.84014 -0.0125 0 1 Msboxa
[(35)] 0.97619 -0.0125 0 1 Msboxa
[(0.02)] 0.01131 0.12361 1 0 Msboxa
[(0.04)] 0.01131 0.24721 1 0 Msboxa
[(0.06)] 0.01131 0.37082 1 0 Msboxa
[(0.08)] 0.01131 0.49443 1 0 Msboxa
[(0.1)] 0.01131 0.61803 1 0 Msboxa
[ -0.001 -0.00725 0 0 ]
[ 1.001 0.61903 0 0 ]
] MathScale
% Start of Graphics
1 setlinecap
1 setlinejoin
newpath
%%Object: Graphics
[ ] 0 setdash
0 setgray
gsave
gsave
0.002 setlinewidth
0 0 moveto
1 0 lineto
stroke
0.15986 -0.00625 moveto
0.15986 0.00625 lineto
stroke
0 setgray
[(5)] 0.15986 -0.0125 0 1 Mshowa
0.29592 -0.00625 moveto
0.29592 0.00625 lineto
stroke
0 setgray
[(10)] 0.29592 -0.0125 0 1 Mshowa
0.43197 -0.00625 moveto
0.43197 0.00625 lineto
stroke
0 setgray
[(15)] 0.43197 -0.0125 0 1 Mshowa
0.56803 -0.00625 moveto
0.56803 0.00625 lineto
stroke
0 setgray
[(20)] 0.56803 -0.0125 0 1 Mshowa
0.70408 -0.00625 moveto
0.70408 0.00625 lineto
stroke
0 setgray
[(25)] 0.70408 -0.0125 0 1 Mshowa
0.84014 -0.00625 moveto
0.84014 0.00625 lineto
stroke
0 setgray
[(30)] 0.84014 -0.0125 0 1 Mshowa
0.97619 -0.00625 moveto
0.97619 0.00625 lineto
stroke
0 setgray
[(35)] 0.97619 -0.0125 0 1 Mshowa
0.02381 0 moveto
0.02381 0.61803 lineto
stroke
0.01756 0.12361 moveto
0.03006 0.12361 lineto
stroke
0 setgray
[(0.02)] 0.01131 0.12361 1 0 Mshowa
0.01756 0.24721 moveto
0.03006 0.24721 lineto
stroke
0 setgray
[(0.04)] 0.01131 0.24721 1 0 Mshowa
0.01756 0.37082 moveto
0.03006 0.37082 lineto
stroke
0 setgray
[(0.06)] 0.01131 0.37082 1 0 Mshowa
0.01756 0.49443 moveto
0.03006 0.49443 lineto
stroke
0 setgray
[(0.08)] 0.01131 0.49443 1 0 Mshowa
0.01756 0.61803 moveto
0.03006 0.61803 lineto
stroke
0 setgray
[(0.1)] 0.01131 0.61803 1 0 Mshowa
grestore
grestore
0 0 moveto
1 0 lineto
1 0.618034 lineto
0 0.618034 lineto
closepath
clip
newpath
0 setgray
gsave
gsave
0.004 setlinewidth
0.02381 0.00035 moveto
0.02877 0.00045 lineto
0.03373 0.00059 lineto
0.03869 0.00077 lineto
0.04365 0.001 lineto
0.04861 0.00129 lineto
0.05357 0.00164 lineto
0.05853 0.00209 lineto
0.06349 0.00265 lineto
0.07341 0.00416 lineto
0.07837 0.00517 lineto
0.08333 0.00638 lineto
0.09325 0.00956 lineto
0.10317 0.01397 lineto
0.1131 0.01992 lineto
0.12302 0.0277 lineto
0.14286 0.04969 lineto
0.1627 0.08072 lineto
0.18254 0.1189 lineto
0.20238 0.15937 lineto
0.22222 0.1955 lineto
0.23214 0.21003 lineto
0.24206 0.22156 lineto
0.24702 0.22614 lineto
0.25198 0.22994 lineto
0.25694 0.233 lineto
0.2619 0.23535 lineto
0.26438 0.23629 lineto
0.26687 0.23707 lineto
0.26935 0.23772 lineto
0.27183 0.23823 lineto
0.27431 0.23862 lineto
0.27555 0.23878 lineto
0.27679 0.23891 lineto
0.27803 0.23902 lineto
0.27927 0.2391 lineto
0.28051 0.23916 lineto
0.28175 0.23921 lineto
0.30159 0.23842 lineto
0.30407 0.23829 lineto
0.30655 0.23817 lineto
0.30779 0.23813 lineto
0.30903 0.23809 lineto
0.31027 0.23806 lineto
0.31151 0.23804 lineto
0.31275 0.23804 lineto
0.31399 0.23804 lineto
0.31523 0.23806 lineto
0.31647 0.23809 lineto
0.31771 0.23814 lineto
Mistroke
0.31895 0.23819 lineto
0.32143 0.23835 lineto
0.32391 0.23857 lineto
0.32639 0.23885 lineto
0.33135 0.23959 lineto
0.33631 0.24056 lineto
0.34127 0.24176 lineto
0.36111 0.24797 lineto
0.37103 0.25119 lineto
0.37599 0.25261 lineto
0.38095 0.25383 lineto
0.38343 0.25435 lineto
0.38591 0.25479 lineto
0.38839 0.25516 lineto
0.39087 0.25544 lineto
0.39211 0.25554 lineto
0.39335 0.25563 lineto
0.39459 0.25569 lineto
0.39583 0.25572 lineto
0.39707 0.25574 lineto
0.39831 0.25572 lineto
0.39955 0.25568 lineto
0.40079 0.25562 lineto
0.40203 0.25552 lineto
0.40327 0.2554 lineto
0.40575 0.25508 lineto
0.40823 0.25465 lineto
0.41071 0.2541 lineto
0.41567 0.25266 lineto
0.42063 0.25076 lineto
0.43056 0.24562 lineto
0.44048 0.23885 lineto
0.46032 0.22183 lineto
0.48016 0.20352 lineto
0.49008 0.19541 lineto
0.49504 0.19189 lineto
0.5 0.18885 lineto
0.50496 0.18635 lineto
0.50744 0.18533 lineto
0.50992 0.18447 lineto
0.5124 0.18379 lineto
0.51364 0.18351 lineto
0.51488 0.18328 lineto
0.51612 0.1831 lineto
0.51736 0.18297 lineto
0.5186 0.18288 lineto
0.51984 0.18284 lineto
0.52108 0.18286 lineto
0.52232 0.18292 lineto
0.52356 0.18304 lineto
Mistroke
0.5248 0.18321 lineto
0.52728 0.18371 lineto
0.52852 0.18404 lineto
0.52976 0.18442 lineto
0.53472 0.18653 lineto
0.5372 0.18792 lineto
0.53968 0.18955 lineto
0.5496 0.1984 lineto
0.55952 0.21096 lineto
0.57937 0.24616 lineto
0.61905 0.33856 lineto
0.63889 0.38017 lineto
0.64881 0.39608 lineto
0.65377 0.40241 lineto
0.65873 0.40752 lineto
0.66121 0.40959 lineto
0.66369 0.41134 lineto
0.66617 0.41274 lineto
0.66865 0.4138 lineto
0.66989 0.4142 lineto
0.67113 0.41451 lineto
0.67237 0.41474 lineto
0.67361 0.41487 lineto
0.67485 0.41492 lineto
0.67609 0.41487 lineto
0.67733 0.41473 lineto
0.67857 0.41451 lineto
0.67981 0.41419 lineto
0.68105 0.41379 lineto
0.68353 0.41271 lineto
0.68601 0.41127 lineto
0.68849 0.40948 lineto
0.69345 0.40483 lineto
0.69841 0.39882 lineto
0.70833 0.38291 lineto
0.71825 0.36237 lineto
0.7381 0.31067 lineto
0.77778 0.19151 lineto
0.79762 0.13766 lineto
0.81746 0.09328 lineto
0.82738 0.0751 lineto
0.8373 0.05958 lineto
0.84722 0.04658 lineto
0.85714 0.03588 lineto
0.86706 0.02723 lineto
0.87698 0.02037 lineto
0.8869 0.01501 lineto
0.89683 0.0109 lineto
0.90675 0.0078 lineto
0.91667 0.0055 lineto
Mistroke
0.92659 0.00382 lineto
0.93651 0.00261 lineto
0.94147 0.00215 lineto
0.94643 0.00176 lineto
0.95635 0.00117 lineto
0.96131 0.00095 lineto
0.96627 0.00077 lineto
0.97619 0.00049 lineto
Mfstroke
grestore
grestore
% End of Graphics
MathPictureEnd
%%EPS Trailer
end
%%EndFile
end end epssave restore
grestore
grestore
0.693378 0 0 0.693378 -137.011353 137.993652 sc5mt astore 255 218 282 176 0.597844 0 0 0.500167 -91.950203 188.463516 sc6mt astore rstroke
/txtdraw true def
/txlndraw true def
( ) [0 0] 287.353973 342.966003 /Helvetica [ 14 1 mul 0 0 14 0 0 ] [0.693378 0 0 0.693378 -137.011353 137.993652] dotx
(b) [0 0] 152 359 /Helvetica [ 14 1 mul 0 0 14 0 0 ] [1 0 0 1 -67.5 4] dotx
/txtdraw true def
/txlndraw true def
(1) [0 0] 159.783997 353.399994 /Helvetica [ 14 1 mul 0 0 14 0 0 ] [1 0 0 1 -67.5 4] dotx
/txtdraw true def
/txlndraw true def
(\() [0 0] 167.567993 359 /Helvetica [ 14 1 mul 0 0 14 0 0 ] [1 0 0 1 -67.5 4] dotx
/txtdraw true def
/txlndraw true def
(x) [0 0] 172.229996 359 /Helvetica-Bold [ 14 1 mul 0 0 14 0 0 ] [1 0 0 1 -67.5 4] dotx
/txtdraw true def
/txlndraw true def
(\) ) [4.662003 0 0 0] 180.013992 359 /Helvetica [ 14 1 mul 0 0 14 0 0 ] [1 0 0 1 -67.5 4] dotx
(b) [0 0] 152 359 /Helvetica [ 14 1 mul 0 0 14 0 0 ] [1 0 0 1 111 -137] dotx
/txtdraw true def
/txlndraw true def
(2) [0 0] 159.783997 353.399994 /Helvetica [ 14 1 mul 0 0 14 0 0 ] [1 0 0 1 111 -137] dotx
/txtdraw true def
/txlndraw true def
(\() [0 0] 167.567993 359 /Helvetica [ 14 1 mul 0 0 14 0 0 ] [1 0 0 1 111 -137] dotx
/txtdraw true def
/txlndraw true def
(x) [0 0] 172.229996 359 /Helvetica-Bold [ 14 1 mul 0 0 14 0 0 ] [1 0 0 1 111 -137] dotx
/txtdraw true def
/txlndraw true def
(\) ) [4.662003 0 0 0] 180.013992 359 /Helvetica [ 14 1 mul 0 0 14 0 0 ] [1 0 0 1 111 -137] dotx
(b) [0 0] 152 359 /Helvetica [ 14 1 mul 0 0 14 0 0 ] [1 0 0 1 436 3] dotx
/txtdraw true def
/txlndraw true def
(3) [0 0] 159.783997 353.399994 /Helvetica [ 14 1 mul 0 0 14 0 0 ] [1 0 0 1 436 3] dotx
/txtdraw true def
/txlndraw true def
(\() [0 0] 167.567993 359 /Helvetica [ 14 1 mul 0 0 14 0 0 ] [1 0 0 1 436 3] dotx
/txtdraw true def
/txlndraw true def
(x) [0 0] 172.229996 359 /Helvetica-Bold [ 14 1 mul 0 0 14 0 0 ] [1 0 0 1 436 3] dotx
/txtdraw true def
/txlndraw true def
(\) ) [4.662003 0 0 0] 180.013992 359 /Helvetica [ 14 1 mul 0 0 14 0 0 ] [1 0 0 1 436 3] dotx
end
grestore
grestore
%%Trailer

%%EndDocument
 GE /Times-Bold SF
14149 36765 MT
(Figure 4-1:)SH
/Times-Roman SF
19922 XM
(Example of a fully-connected, first-order Markov model with three states.)SH
13300 39750 MT
(An example of a discrete-output HMM can be constructed as follows.  Suppose that in the)190 W
10800 41489 MT
(previous example, the bearings are sorted into bins containing bearings)11 W
/Times-Italic SF
42465 XM
(k)SH
/Times-Roman SF
(mm)SH
/Symbol SF
44965 XM
(\261)SH
/Times-Roman SF
45869 XM
(0.5mm in diameter for)11 W
/Times-Italic SF
10800 43228 MT
(k)SH
/Times-Roman SF
11438 XM
(=)
150 MX(1,)
150 MX(2,...,)SH
/Times-Italic SF
15258 XM
(M)SH
/Times-Roman SF
(. Each state's continuous output distribution can be converted into)
219 W( a discrete density)220 W
9 SS 
47460 44604 MT
(th)SH
11 SS 
10800 44967 MT
(distribution by setting)101 W
/Times-Italic SF
21036 XM
(b)SH
/Times-Roman SF
21836 XM
(\050)SH
/Times-Italic SF
(v)SH
/Times-Roman SF
23090 XM
(\051 equal to the integral of)101 W
/Times-Italic SF
34570 XM
(b)SH
/Times-Roman SF
35370 XM
(\050)SH
/Times-Bold SF
(x)SH
/Times-Roman SF
(\051 over the width of the)101 W
/Times-Italic SF
46972 XM
(k)SH
/Times-Roman SF
48536 XM
(bin. The)
475 W( obser-)100 W
9 /Times-Italic AF
21586 45327 MT
(i)SH
22690 XM
(k)SH
35120 XM
(i)SH
11 /Times-Roman AF
10800 46706 MT
(vations are then the bins {)81 W
/Times-Italic SF
(v)SH
/Times-Roman SF
23588 XM
(} into which the)
81 W( current bearing is placed.  The initial state distribution)82 W
9 /Times-Italic AF
23188 47066 MT
(k)SH
11 /Times-Roman AF
10800 48445 MT
(and transition probabilities would remain unchanged.)SH
13300 51430 MT
(Three problems of interest for HMMs are those of evaluation, decoding, and training.)
3 W( Given)
279 W( the)2 W
10800 53169 MT
(model \050represented by)175 W
/Symbol SF
21434 XM
(l)SH
/Times-Roman SF
(\051 and an)
175 W( observation sequence)176 W
/Times-Italic SF
36445 XM
(O)SH
/Times-Roman SF
(, the evaluation problem is to determine)176 W
/Times-Italic SF
10800 54908 MT
(Pr)SH
/Times-Roman SF
(\050)SH
/Times-Italic SF
(O)SH
/Times-Roman SF
(|)SH
/Symbol SF
(l)SH
/Times-Roman SF
(\051, the probability that the observation sequence was produced)
62 W( by the model.  This can also be)61 W
10800 56647 MT
(viewed as a score of the match between a model and the)
38 W( observations, which is useful when compar-)39 W
10800 58386 MT
(ing models.  The decoding problem is that of)
49 W( determining the most likely state sequence)48 W
/Times-Italic SF
50572 XM
(Q)SH
/Times-Roman SF
51689 XM
(given the)48 W
10800 60125 MT
(model and observations.  Solutions to this problem can be used)
124 W( for continuous speech recognition,)125 W
10800 61864 MT
(where state sequences determine the word models which)
149 W( are traversed while scoring observations.)148 W
10800 63603 MT
(The training problem describes how to adjust)
49 W( the model parameters)50 W
/Symbol SF
41230 XM
(l)SH
/Times-Roman SF
42159 XM
(to maximize)50 W
/Times-Italic SF
48003 XM
(Pr)SH
/Times-Roman SF
(\050)SH
/Times-Italic SF
(O)SH
/Times-Roman SF
(|)SH
/Symbol SF
(l)SH
/Times-Roman SF
(\051, which is)50 W
10800 65342 MT
(useful for both the)
1 W( initial determination of the model parameters, and for speaker adaptation.  Solution)SH
10800 67081 MT
(of the training problem is most important for the)
220 W( speaker adaptation techniques explored in this)221 W
10800 68820 MT
(chapter. All)
1559 W( three problems can be efficiently solved through the application of the)642 W
10800 70559 MT
(forward-backward [39] and Viterbi [40] algorithms, as described in the following section.)SH
ES
%%Page: 79 80
BS
0 SI
10 /Times-Roman AF
54800 4286 MT
(79)SH
11 SS 
400 1000 0 18900 18400 GB 
%%BeginDocument: /usr0/rozzi/Documentation/PhDThesis/Chapter4/Lattice.eps
%!PS-Adobe-2.0 EPSF-2.0
%%Title: 
%%Creator: TopDraw
%%CreationDate: Fri Mar  1 10:55:30 1991
%%For: rozzi
%%DocumentFonts: (atend)
%%%Pages: 0 1
%%BoundingBox: 0 0 720 280
%%EndComments

%%BeginDocument: /usr/lib/NextStep/printPackage.ps
%!PS-Adobe-2.0
%%Title: Printing Package
%%EndComments
%Version: 2.0
%Copyright: 1988, NeXT, Inc.

/__NXdef{1 index where{pop pop pop}{def}ifelse}bind def
/__NXbdef{1 index where{pop pop pop}{bind def}ifelse}bind def
/UserObjects 10 array __NXdef
/defineuserobject{
        exch dup 1 add dup UserObjects length gt{
                array dup 0 UserObjects putinterval
                /UserObjects exch def
        }{pop}ifelse UserObjects exch 3 -1 roll put
}__NXbdef
/undefineuserobject{UserObjects exch null put}__NXbdef
/execuserobject{UserObjects exch get exec}__NXbdef
/__NXRectPath{4 2 roll moveto 1 index 0 rlineto
0 exch rlineto neg 0 rlineto closepath}__NXbdef
/__NXProcessRectArgs{
        1 index type /arraytype eq{
                exch 0 4 2 index length 1 sub{
                        dup 3 add 1 exch{1 index exch get exch}for
                        5 1 roll 5 index exec
                }for pop pop
        }{exec}ifelse
}__NXbdef
/rectfill{gsave newpath {__NXRectPath fill} __NXProcessRectArgs grestore}__NXbdef
/rectclip{newpath {__NXRectPath} __NXProcessRectArgs clip newpath}__NXbdef
/rectstroke{
        gsave newpath dup type /arraytype eq{dup length 6 eq}{false}ifelse{
                {gsave __NXRectPath null concat stroke grestore}
                dup length array cvx copy dup 2 4 -1 roll put __NXProcessRectArgs
        }{{__NXRectPath stroke} __NXProcessRectArgs}ifelse grestore
}__NXbdef
/xyshow{
        0 1 3 index length 1 sub{
                currentpoint 4 index 3 index 1 getinterval show
                3 index 3 index 2 mul 1 add get add exch
                3 index 3 index 2 mul get add exch moveto pop
        }for pop pop
}__NXbdef
/xshow{
        0 1 3 index length 1 sub{
                currentpoint 4 index 3 index 1 getinterval show
                exch 3 index 3 index get add exch moveto pop
        }for pop pop
}__NXbdef
/yshow{
        0 1 3 index length 1 sub{
                currentpoint 4 index 3 index 1 getinterval show
                3 index 3 index get add moveto pop
        }for pop pop
}__NXbdef
/arct{arcto pop pop pop pop}__NXbdef
/setbbox{pop pop pop pop}__NXbdef
/ucache{}__NXbdef
/ucachestatus{mark 0 0 0 0 0}__NXbdef
/setucacheparams{cleartomark}__NXbdef
/uappend{systemdict begin cvx exec end}__NXbdef
/ueofill{gsave newpath uappend eofill grestore}__NXbdef
/ufill{gsave newpath uappend fill grestore}__NXbdef
/ustroke{
        gsave newpath dup length 6 eq
        {exch uappend concat}{uappend}ifelse
        stroke grestore
}__NXbdef
/__NXustrokepathMatrix dup where {pop pop}{matrix def}ifelse
/ustrokepath{
        newpath dup length 6 eq{
                exch uappend __NXustrokepathMatrix currentmatrix exch concat
                strokepath setmatrix
        }{uappend strokepath}ifelse
} __NXbdef
/upath{
        [exch {/ucache cvx}if pathbbox /setbbox cvx
         {/moveto cvx}{/lineto cvx}{/curveto cvx}{/closepath cvx}pathforall]cvx
} __NXbdef
/setstrokeadjust{pop}__NXbdef
/currentstrokeadjust{false}__NXbdef
/selectfont{exch findfont exch
dup type /arraytype eq {makefont}{scalefont}ifelse setfont}__NXbdef
/_NXCombineArrays{
        counttomark dup 2 add index dup length 3 -1 roll {
                2 index length sub dup 4 1 roll 1 index exch 4 -1 roll putinterval exch
        }repeat pop pop pop
}__NXbdef
/setcmykcolor{
        1.0 exch sub dup dup 6 -1 roll
        sub dup 0 lt{pop 0}if 5 1 roll
        4 -1 roll sub dup 0 lt{pop 0}if 3 1 roll
        exch sub dup 0 lt{pop 0}if setrgbcolor
}__NXbdef
/currentcmykcolor{currentrgbcolor 3{1.0 exch sub 3 1 roll}repeat 0}__NXbdef
/flushgraphics{}def
/setwindowtype{pop pop}def
/currentwindowtype{pop 0}def
/setalpha{pop}def
/currentalpha{1.0}def
/hidecursor{}def
/obscurecursor{}def
/revealcursor{}def
/setcursor{4 {pop}repeat}bind def
/showcursor{}def
/NextStepEncoding where not{
/NextStepEncoding StandardEncoding 256 array copy def
0 [129/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/Ccedilla/Egrave
/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex/Idieresis
/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis/Ugrave/Uacute
/Ucircumflex/Udieresis/Yacute/Thorn/mu/multiply/divide/copyright
176/registered 181/brokenbar 190/logicalnot 192/onesuperior 201/twosuperior
204/threesuperior 209/plusminus/onequarter/onehalf/threequarters/agrave
/aacute/acircumflex/atilde/adieresis/aring/ccedilla/egrave/eacute
/ecircumflex/edieresis/igrave 226/iacute 228/icircumflex/idieresis/eth
/ntilde 236/ograve/oacute/ocircumflex/otilde/odieresis 242/ugrave/uacute
/ucircumflex 246/udieresis/yacute 252/thorn/ydieresis]
{dup type /nametype eq
 {NextStepEncoding 2 index 2 index put pop 1 add}{exch pop}ifelse
}forall pop
/NextStepEncoding NextStepEncoding readonly def   
/_NXfstr 128 string dup 0 (_NX) putinterval def   
/findfont{
 % Because we can never let NextStepEncoding get into
 % SharedFontDirectory, we cannot reencode a font to NextStepEncoding
 % if we are in shared mode.  So if currentshared is true,
 % we call the normal findfont and return that
 /currentshared where {pop currentshared} {false} ifelse
 {//findfont exec}
 {dup _NXfstr 3 125 getinterval cvs length 3 add _NXfstr 0 3 -1 roll
  getinterval cvn exch FontDirectory 2 index known 
  {pop FontDirectory exch get}
  {//findfont exec dup /Encoding get StandardEncoding eq
   {    dup length dict exch
        {1 index /FID ne {2 index 3 1 roll put}{pop pop}ifelse}forall
         dup /Encoding NextStepEncoding put definefont
        }{exch pop} ifelse
   }ifelse
 }ifelse
}bind def
}{pop}ifelse
/_NXProcArray 5 array __NXdef
/_NXChannels 0 __NXdef
/_NXTotalBytes 0 __NXdef
/_NXDoImageOp{
        1 index{dup}{1}ifelse /_NXChannels exch store
        _NXChannels 2 add 2 roll _NXProcArray 0 _NXChannels getinterval astore pop
        5 index 4 index mul 2 index{1 sub 8 idiv 1 add mul}{mul 1 sub 8 idiv 1 add}ifelse
        4 index mul /_NXTotalBytes exch store pop exch pop
        gsave matrix invertmatrix concat 0.5 setgray 0 0 4 2 roll rectfill grestore
        {       0 1 _NXChannels 1 sub{
                        _NXProcArray exch get exec
                        length _NXTotalBytes exch sub /_NXTotalBytes exch store}for
                _NXTotalBytes 0 le{exit}if
        }loop /_NXProcArray 5 array def
}__NXbdef
/colorimage{_NXDoImageOp}__NXbdef
/alphaimage{1 add _NXDoImageOp}def
%%EndDocument

gsave
 /__NXbasematrix matrix currentmatrix def
grestore
%%EndProlog
%%BeginSetup
/TopDrawDict 200 dict def
/xyshow {
    mark exch aload length -2 2 {
        2 roll
    } for counttomark dup 2 add -1 roll pop 1 add -1 roll gsave {
        pop pop grestore rmoveto gsave
    } exch kshow grestore rmoveto
} bind def /currentalpha {
    1
} def /setalpha {
    pop
} bind def
TopDrawDict begin /prt_stack {
    (***Top of Stack\012) print pstack (---Bottom of Stack\012) print flush
} def /prt_top {
    (top item of stack) == dup == flush
} def /prtmat matrix def /prt_ctm {
    (current transformation matrix: ) print prtmat currentmatrix == flush
} def /tmmat matrix def /obmat matrix def /strmat matrix def /pgmat matrix def /idmat matrix def /sc1mt matrix def /sc2mt matrix def /sc3mt matrix def /sc4mt matrix def /sc5mt matrix def /sc6mt matrix def /sc7mt matrix def /inmat matrix def /ctmmt matrix def /octmmt matrix def /clpmt matrix def /weglet_mat matrix def /crlinw 1 def crlinw setlinewidth /crlinjn 0 def crlinjn setlinejoin /crlincp 0 def crlincp setlinecap /crmtrlmt currentmiterlimit def /crstrpat 0 def /crfilpat 0 def /crflat currentflat def /dftflat currentflat def /strinclr false def /crlingry 0 def /crlinred 0 def /crlingrn 0 def /crlinblu 0 def /crlinalph 1 def /filinclr false def /crfilgry 0 def /crfilred 0 def /crfilgrn 0 def /crfilblu 0 def /crfilalph 1 def /crfilstyl 0 def /txtdraw true def /txtinclr false def /txtwpat false def /txtwittrans false def /crtxtgry 0 def /crtxtred 0 def /crtxtgrn 0 def /crtxtblu 0 def /crtxtalph 1 def /crtxtpat 0 def /txlndraw true def /txlninclr false def /txlnwpat false def /txlnwittrans false def /crtxlngry 0 def /crtxlnred 0 def /crtxlngrn 0 def /crtxlnblu 0 def /crtxlnalph 1 def /crtxlnpat 0 def /hilittxt false def /strdsh [2 2] def /dshpatoff 0 def /usedash false def /filwpat false def /strwpat false def /filwittrans false def /strwittrans false def /crfrtarw false def /crendarw false def /rsave 0 def /esave 0 def /sslsave 0 def /lsave 0 def /clpsave 0 def /pathsave 0 def /tpatstr 10 string def /ptdist {
    sub dup mul 3 1 roll sub dup mul add sqrt
} bind def /dodrawctm {
    octmmt currentmatrix pop idmat obmat concatmatrix ctmmt currentmatrix sc1mt concatmatrix setmatrix
} bind def /undrawctm {
    obmat inmat invertmatrix ctmmt currentmatrix sc1mt concatmatrix setmatrix
} bind def /undrawmat {
    obmat aload pop 7 -1 roll astore
} bind def /unpagectm {
    octmmt setmatrix
} bind def /unpagemat {
    pgmat aload pop 7 -1 roll astore
} bind def /drtan {
    gsave 1 setalpha 0 setlinewidth 0.333333 setgray moveto lineto stroke grestore
} bind def /drdgrdln {
    gsave 1 setalpha 0 setlinewidth [1 2] 0 setdash setgray moveto lineto stroke grestore
} bind def /drgrdln {
    gsave 1 setalpha 0 setlinewidth setgray moveto lineto stroke grestore
} bind def end
TopDrawDict begin /p1x 0 def /p1y 0 def /p2x 0 def /p2y 0 def /ssl {
    gsave dodrawctm crfrtarw crendarw or {
        /p1y 1 index def /p1x 2 index def /p2y 1 index 4 index add def /p2x 2 index 5 index add def newpath moveto rlineto
    } {
        newpath moveto rlineto
    } ifelse crlinalph setalpha crlinw setlinewidth crlincp setlinecap usedash {
        strdsh dshpatoff setdash
    } if strinclr {
        crlinred crlingrn crlinblu setrgbcolor
    } {
        crlingry setgray
    } ifelse aload pop strmat astore crfrtarw {
        currentlinewidth strmat p2x p2y p1x p1y arow
    } if crendarw {
        currentlinewidth strmat p1x p1y p2x p2y arow
    } if unpagectm concat strwpat {
        crstrpat findfont strwittrans {
            trpatstrk
        } {
            oppatstrk
        } ifelse
    } {
        stroke
    } ifelse grestore
} bind def end
TopDrawDict begin /elli {
    gsave dodrawctm translate scale newpath dup dup 0 360 arc closepath unpagectm {
        crfilalph setalpha filinclr {
            crfilred crfilgrn crfilblu setrgbcolor
        } {
            crfilgry setgray
        } ifelse gsave filwpat {
            crfilpat findfont filwittrans {
                trpatfil
            } {
                oppatfil
            } ifelse
        } {
            fill
        } ifelse grestore
    } if {
        crlinalph setalpha crlinw setlinewidth usedash {
            strdsh dshpatoff setdash
        } if strinclr {
            crlinred crlingrn crlinblu setrgbcolor
        } {
            crlingry setgray
        } ifelse concat strwpat {
            crstrpat findfont strwittrans {
                trpatstrk
            } {
                oppatstrk
            } ifelse
        } {
            stroke
        } ifelse
    } {
        pop
    } ifelse grestore
} bind def /estroke {
    gsave dodrawctm translate scale newpath dup dup 0 360 arc closepath crlinalph setalpha crlinw setlinewidth usedash {
        strdsh dshpatoff setdash
    } if strinclr {
        crlinred crlingrn crlinblu setrgbcolor
    } {
        crlingry setgray
    } ifelse unpagectm concat strwpat {
        crstrpat findfont strwittrans {
            trpatstrk
        } {
            oppatstrk
        } ifelse
    } {
        stroke
    } ifelse grestore
} bind def /efill {
    gsave dodrawctm translate scale newpath dup dup 0 360 arc closepath unpagectm crfilalph setalpha filinclr {
        crfilred crfilgrn crfilblu setrgbcolor
    } {
        crfilgry setgray
    } ifelse filwpat {
        crfilpat findfont filwittrans {
            trpatfil
        } {
            oppatfil
        } ifelse
    } {
        fill
    } ifelse grestore
} bind def /apstroke {
    gsave dodrawctm /pie exch def /radius exch def /yscale exch def /xscale exch def /yy exch def /xx exch def /angle2 exch def /angle1 exch def /closed exch def xx yy translate xscale yscale scale newpath pie {
        radius dup moveto
    } if radius dup dup angle1 angle2 arc closed pie or {
        closepath
    } if crlinalph setalpha closed not pie not and {
        crfrtarw {
            dup crlinw exch gsave newpath angle1 1 add cos radius mul radius add angle1 1 add sin radius mul radius add moveto angle1 cos radius mul radius add angle1 sin radius mul radius add lineto unpagectm {
                
            } {
                
            } {
                
            } {
                
            } pathforall arow grestore
        } if crendarw {
            dup crlinw exch gsave newpath angle2 1 sub cos radius mul radius add angle2 1 sub sin radius mul radius add moveto angle2 cos radius mul radius add angle2 sin radius mul radius add lineto unpagectm {
                
            } {
                
            } {
                
            } {
                
            } pathforall arow grestore
        } if
    } if crlincp setlinecap crlinalph setalpha crlinw setlinewidth usedash {
        strdsh dshpatoff setdash
    } if strinclr {
        crlinred crlingrn crlinblu setrgbcolor
    } {
        crlingry setgray
    } ifelse unpagectm concat strwpat {
        crstrpat findfont strwittrans {
            trpatstrk
        } {
            oppatstrk
        } ifelse
    } {
        stroke
    } ifelse grestore
} bind def /apfill {
    gsave dodrawctm /pie exch def /radius exch def /yscale exch def /xscale exch def /yy exch def /xx exch def xx yy translate xscale yscale scale newpath pie {
        radius dup moveto
    } if radius dup dup 5 -2 roll arc pie or {
        closepath
    } if 1 xscale div 1 yscale div scale crfilalph setalpha filinclr {
        crfilred crfilgrn crfilblu setrgbcolor
    } {
        crfilgry setgray
    } ifelse filwpat {
        crfilpat findfont filwittrans {
            trpatfil
        } {
            oppatfil
        } ifelse
    } {
        fill
    } ifelse grestore
} bind def /mkepath {
    dodrawctm /pie exch def /radius exch def /yscale exch def /xscale exch def /yy exch def /xx exch def /angle2 exch def /angle1 exch def /closed exch def xx yy translate xscale yscale scale newpath pie {
        radius dup moveto
    } if radius dup dup angle1 angle2 arc closed pie or {
        closepath
    } if unpagectm
} bind def end
TopDrawDict begin /dotx {
    gsave txtdraw {
        concat selectfont txtinclr {
            crtxtred crtxtgrn crtxtblu setrgbcolor
        } {
            crtxtgry setgray
        } ifelse crtxtalph setalpha moveto xyshow
    } {
        pop pop pop pop pop pop pop
    } ifelse grestore
} bind def /txtlin {
    gsave txlndraw {
        concat txlninclr {
            crtxlnred crtxlngrn crtxlnblu setrgbcolor
        } {
            crtxlngry setgray
        } ifelse crtxlnalph setalpha setlinewidth 0 setlinecap newpath moveto 0 rlineto stroke
    } {
        pop pop pop pop pop
    } ifelse grestore
} bind def end
%%EndSetup
gsave
0 0 720 280 rectclip
-46.735001 -270 translate
46.735001 270 719.265015 280 rectclip
gsave
TopDrawDict begin
/invpats true def
/crlincp 0 def
/crlinjn 0 def
/crmtrlmt 10 def
/crlinw 0 def
/crlinalph 1 def
/crlinred 0 def /crlingrn 0 def /crlinblu 0 def /strinclr true def
/crfilalph 1 def
/crfilred 0 def /crfilgrn 0 def /crfilblu 0 def /filinclr true def
/filwpat false def
TopDrawDict /piddict known TopDrawDict /ipiddict known or {
    1 getpat /crfilpat exch def
} if
/filwittrans false def
/strwpat false def
TopDrawDict /piddict known TopDrawDict /ipiddict known or {
    1 getpat /crstrpat exch def
} if
/strwittrans false def
/usedash false def
/strdsh [2 2] def /dshpatoff 0 def
/crendarw false def
/crfrtarw false def
/txtdraw false def
/crtxtalph 1 def
/crtxtred 0 def /crtxtgrn 0 def /crtxtblu 0 def /txtinclr true def
/txtwpat false def
/txtwittrans false def
/txlndraw false def
/crtxlnalph 1 def
/crtxlnred 0 def /crtxlngrn 0 def /crtxlnblu 0 def /txlninclr true def
/txlnwittrans false def
/txlnwpat false def
/crlinw 1 def
9 1 -1 180 468 1 0 0 1 64 9 sc5mt astore efill
1 0 0 1 64 9 sc6mt astore 9 1 -1 180 468 1 0 0 1 64 9 sc5mt astore estroke
9 1 -1 180 468 1 0 0 1 64 -63 sc5mt astore efill
1 0 0 1 55 -54 sc6mt astore 9 1 -1 180 468 1 0 0 1 64 -63 sc5mt astore estroke
9 1 -1 180 468 1 0 0 1 64 -135 sc5mt astore efill
1 0 0 1 28 -99 sc6mt astore 9 1 -1 180 468 1 0 0 1 64 -135 sc5mt astore estroke
9 1 -1 180 468 1 0 0 1 64 81 sc5mt astore efill
1 0 0 1 19 126 sc6mt astore 9 1 -1 180 468 1 0 0 1 64 81 sc5mt astore estroke
9 1 -1 180 468 1 0 0 1 567 10 sc5mt astore efill
1 0 0 1 486 91 sc6mt astore 9 1 -1 180 468 1 0 0 1 567 10 sc5mt astore estroke
9 1 -1 180 468 1 0 0 1 567 -62 sc5mt astore efill
1 0 0 1 477 28 sc6mt astore 9 1 -1 180 468 1 0 0 1 567 -62 sc5mt astore estroke
9 1 -1 180 468 1 0 0 1 567 -134 sc5mt astore efill
1 0 0 1 468 -35 sc6mt astore 9 1 -1 180 468 1 0 0 1 567 -134 sc5mt astore estroke
9 1 -1 180 468 1 0 0 1 567 82 sc5mt astore efill
1 0 0 1 450 199 sc6mt astore 9 1 -1 180 468 1 0 0 1 567 82 sc5mt astore estroke
/crlinw 2.1 def
1 0 0 1 99 10 sc5mt astore 124 -71 118 530 1 0 0 1 136 10 sc6mt astore ssl
1 0 0 1 99 10 sc5mt astore 122 0 157 530 1 0 0 1 99 10 sc6mt astore ssl
1 0 0 1 99 10 sc5mt astore 123 -142 155 529 1 0 0 1 99 10 sc6mt astore ssl
1 0 0 1 99 10 sc5mt astore 125 -215 154 529 1 0 0 1 99 10 sc6mt astore ssl
1 0 0 1 99 10 sc5mt astore 124 0 118 459 1 0 0 1 136 10 sc6mt astore ssl
1 0 0 1 99 10 sc5mt astore 123 -69 155 456 1 0 0 1 99 10 sc6mt astore ssl
1 0 0 1 99 10 sc5mt astore 126 75 153 456 1 0 0 1 99 10 sc6mt astore ssl
1 0 0 1 99 10 sc5mt astore 124 -143 154 458 1 0 0 1 99 10 sc6mt astore ssl
1 0 0 1 99 10 sc5mt astore 125 0 155 387 1 0 0 1 99 10 sc6mt astore ssl
1 0 0 1 99 10 sc5mt astore 124 142 116 387 1 0 0 1 136 10 sc6mt astore ssl
1 0 0 1 99 10 sc5mt astore 127 74 117 385 1 0 0 1 136 10 sc6mt astore ssl
1 0 0 1 99 10 sc5mt astore 124 -70 154 385 1 0 0 1 99 10 sc6mt astore ssl
1 0 0 1 99 10 sc5mt astore 125 0 154 314 1 0 0 1 99 10 sc6mt astore ssl
1 0 0 1 99 10 sc5mt astore 127 73 152 314 1 0 0 1 99 10 sc6mt astore ssl
1 0 0 1 99 10 sc5mt astore 126 146 154 313 1 0 0 1 99 10 sc6mt astore ssl
1 0 0 1 99 10 sc5mt astore 125 217 152 312 1 0 0 1 99 10 sc6mt astore ssl
/crlinw 1 def
9 1 -1 180 468 1 0 0 1 189 9 sc5mt astore efill
1 0 0 1 180 18 sc6mt astore 9 1 -1 180 468 1 0 0 1 189 9 sc5mt astore estroke
9 1 -1 180 468 1 0 0 1 189 -63 sc5mt astore efill
1 0 0 1 171 -45 sc6mt astore 9 1 -1 180 468 1 0 0 1 189 -63 sc5mt astore estroke
9 1 -1 180 468 1 0 0 1 189 -135 sc5mt astore efill
1 0 0 1 144 -90 sc6mt astore 9 1 -1 180 468 1 0 0 1 189 -135 sc5mt astore estroke
9 1 -1 180 468 1 0 0 1 189 81 sc5mt astore efill
1 0 0 1 135 135 sc6mt astore 9 1 -1 180 468 1 0 0 1 189 81 sc5mt astore estroke
/crlinw 2.1 def
1 0 0 1 215 19 sc5mt astore 124 -71 118 530 1 0 0 1 261 10 sc6mt astore ssl
1 0 0 1 215 19 sc5mt astore 122 0 157 530 1 0 0 1 224 10 sc6mt astore ssl
1 0 0 1 215 19 sc5mt astore 123 -142 155 529 1 0 0 1 224 10 sc6mt astore ssl
1 0 0 1 215 19 sc5mt astore 125 -215 154 529 1 0 0 1 224 10 sc6mt astore ssl
1 0 0 1 215 19 sc5mt astore 124 0 118 459 1 0 0 1 261 10 sc6mt astore ssl
1 0 0 1 215 19 sc5mt astore 123 -69 155 456 1 0 0 1 224 10 sc6mt astore ssl
1 0 0 1 215 19 sc5mt astore 126 75 153 456 1 0 0 1 224 10 sc6mt astore ssl
1 0 0 1 215 19 sc5mt astore 124 -143 154 458 1 0 0 1 224 10 sc6mt astore ssl
1 0 0 1 215 19 sc5mt astore 125 0 155 387 1 0 0 1 224 10 sc6mt astore ssl
1 0 0 1 215 19 sc5mt astore 124 142 116 387 1 0 0 1 261 10 sc6mt astore ssl
1 0 0 1 215 19 sc5mt astore 127 74 117 385 1 0 0 1 261 10 sc6mt astore ssl
1 0 0 1 215 19 sc5mt astore 124 -70 154 385 1 0 0 1 224 10 sc6mt astore ssl
1 0 0 1 215 19 sc5mt astore 125 0 154 314 1 0 0 1 224 10 sc6mt astore ssl
1 0 0 1 215 19 sc5mt astore 127 73 152 314 1 0 0 1 224 10 sc6mt astore ssl
1 0 0 1 215 19 sc5mt astore 126 146 154 313 1 0 0 1 224 10 sc6mt astore ssl
1 0 0 1 215 19 sc5mt astore 125 217 152 312 1 0 0 1 224 10 sc6mt astore ssl
/crlinw 1 def
9 1 -1 180 468 1 0 0 1 442 9 sc5mt astore efill
1 0 0 1 424 27 sc6mt astore 9 1 -1 180 468 1 0 0 1 442 9 sc5mt astore estroke
9 1 -1 180 468 1 0 0 1 442 -63 sc5mt astore efill
1 0 0 1 415 -36 sc6mt astore 9 1 -1 180 468 1 0 0 1 442 -63 sc5mt astore estroke
9 1 -1 180 468 1 0 0 1 442 -135 sc5mt astore efill
1 0 0 1 388 -81 sc6mt astore 9 1 -1 180 468 1 0 0 1 442 -135 sc5mt astore estroke
9 1 -1 180 468 1 0 0 1 442 81 sc5mt astore efill
1 0 0 1 379 144 sc6mt astore 9 1 -1 180 468 1 0 0 1 442 81 sc5mt astore estroke
/crlinw 2.1 def
1 0 0 1 459 28 sc5mt astore 124 -71 118 530 1 0 0 1 514 10 sc6mt astore ssl
1 0 0 1 459 28 sc5mt astore 122 0 157 530 1 0 0 1 477 10 sc6mt astore ssl
1 0 0 1 459 28 sc5mt astore 123 -142 155 529 1 0 0 1 477 10 sc6mt astore ssl
1 0 0 1 459 28 sc5mt astore 125 -215 154 529 1 0 0 1 477 10 sc6mt astore ssl
1 0 0 1 459 28 sc5mt astore 124 0 118 459 1 0 0 1 514 10 sc6mt astore ssl
1 0 0 1 459 28 sc5mt astore 123 -69 155 456 1 0 0 1 477 10 sc6mt astore ssl
1 0 0 1 459 28 sc5mt astore 126 75 153 456 1 0 0 1 477 10 sc6mt astore ssl
1 0 0 1 459 28 sc5mt astore 124 -143 154 458 1 0 0 1 477 10 sc6mt astore ssl
1 0 0 1 459 28 sc5mt astore 125 0 155 387 1 0 0 1 477 10 sc6mt astore ssl
1 0 0 1 459 28 sc5mt astore 124 142 116 387 1 0 0 1 514 10 sc6mt astore ssl
1 0 0 1 459 28 sc5mt astore 127 74 117 385 1 0 0 1 514 10 sc6mt astore ssl
1 0 0 1 459 28 sc5mt astore 124 -70 154 385 1 0 0 1 477 10 sc6mt astore ssl
1 0 0 1 459 28 sc5mt astore 125 0 154 314 1 0 0 1 477 10 sc6mt astore ssl
1 0 0 1 459 28 sc5mt astore 127 73 152 314 1 0 0 1 477 10 sc6mt astore ssl
1 0 0 1 459 28 sc5mt astore 126 146 154 313 1 0 0 1 477 10 sc6mt astore ssl
1 0 0 1 459 28 sc5mt astore 125 217 152 312 1 0 0 1 477 10 sc6mt astore ssl
/crlinw 1 def
9 1 -1 180 468 1 0 0 1 315 9 sc5mt astore efill
1 0 0 1 288 36 sc6mt astore 9 1 -1 180 468 1 0 0 1 315 9 sc5mt astore estroke
9 1 -1 180 468 1 0 0 1 315 -63 sc5mt astore efill
1 0 0 1 279 -27 sc6mt astore 9 1 -1 180 468 1 0 0 1 315 -63 sc5mt astore estroke
9 1 -1 180 468 1 0 0 1 315 -135 sc5mt astore efill
1 0 0 1 252 -72 sc6mt astore 9 1 -1 180 468 1 0 0 1 315 -135 sc5mt astore estroke
9 1 -1 180 468 1 0 0 1 315 81 sc5mt astore efill
1 0 0 1 243 153 sc6mt astore 9 1 -1 180 468 1 0 0 1 315 81 sc5mt astore estroke
/crlinw 2.1 def
1 0 0 1 323 37 sc5mt astore 124 -71 118 530 1 0 0 1 387 10 sc6mt astore ssl
1 0 0 1 323 37 sc5mt astore 122 0 157 530 1 0 0 1 350 10 sc6mt astore ssl
1 0 0 1 323 37 sc5mt astore 123 -142 155 529 1 0 0 1 350 10 sc6mt astore ssl
1 0 0 1 323 37 sc5mt astore 125 -215 154 529 1 0 0 1 350 10 sc6mt astore ssl
1 0 0 1 323 37 sc5mt astore 124 0 118 459 1 0 0 1 387 10 sc6mt astore ssl
1 0 0 1 323 37 sc5mt astore 123 -69 155 456 1 0 0 1 350 10 sc6mt astore ssl
1 0 0 1 323 37 sc5mt astore 126 75 153 456 1 0 0 1 350 10 sc6mt astore ssl
1 0 0 1 323 37 sc5mt astore 124 -143 154 458 1 0 0 1 350 10 sc6mt astore ssl
1 0 0 1 323 37 sc5mt astore 125 0 155 387 1 0 0 1 350 10 sc6mt astore ssl
1 0 0 1 323 37 sc5mt astore 124 142 116 387 1 0 0 1 387 10 sc6mt astore ssl
1 0 0 1 323 37 sc5mt astore 127 74 117 385 1 0 0 1 387 10 sc6mt astore ssl
1 0 0 1 323 37 sc5mt astore 124 -70 154 385 1 0 0 1 350 10 sc6mt astore ssl
1 0 0 1 323 37 sc5mt astore 125 0 154 314 1 0 0 1 350 10 sc6mt astore ssl
1 0 0 1 323 37 sc5mt astore 127 73 152 314 1 0 0 1 350 10 sc6mt astore ssl
1 0 0 1 323 37 sc5mt astore 126 146 154 313 1 0 0 1 350 10 sc6mt astore ssl
1 0 0 1 323 37 sc5mt astore 125 217 152 312 1 0 0 1 350 10 sc6mt astore ssl
/crlinw 1 def
9 1 -1 180 468 1 0 0 1 -62 9 sc5mt astore efill
1 0 0 1 -71 18 sc6mt astore 9 1 -1 180 468 1 0 0 1 -62 9 sc5mt astore estroke
9 1 -1 180 468 1 0 0 1 -62 -63 sc5mt astore efill
1 0 0 1 -80 -45 sc6mt astore 9 1 -1 180 468 1 0 0 1 -62 -63 sc5mt astore estroke
9 1 -1 180 468 1 0 0 1 -62 -135 sc5mt astore efill
1 0 0 1 -107 -90 sc6mt astore 9 1 -1 180 468 1 0 0 1 -62 -135 sc5mt astore estroke
9 1 -1 180 468 1 0 0 1 -62 81 sc5mt astore efill
1 0 0 1 -116 135 sc6mt astore 9 1 -1 180 468 1 0 0 1 -62 81 sc5mt astore estroke
/crlinw 2.1 def
1 0 0 1 -36 19 sc5mt astore 124 -71 118 530 1 0 0 1 10 10 sc6mt astore ssl
1 0 0 1 -36 19 sc5mt astore 122 0 157 530 1 0 0 1 -27 10 sc6mt astore ssl
1 0 0 1 -36 19 sc5mt astore 123 -142 155 529 1 0 0 1 -27 10 sc6mt astore ssl
1 0 0 1 -36 19 sc5mt astore 125 -215 154 529 1 0 0 1 -27 10 sc6mt astore ssl
1 0 0 1 -36 19 sc5mt astore 124 0 118 459 1 0 0 1 10 10 sc6mt astore ssl
1 0 0 1 -36 19 sc5mt astore 123 -69 155 456 1 0 0 1 -27 10 sc6mt astore ssl
1 0 0 1 -36 19 sc5mt astore 126 75 153 456 1 0 0 1 -27 10 sc6mt astore ssl
1 0 0 1 -36 19 sc5mt astore 124 -143 154 458 1 0 0 1 -27 10 sc6mt astore ssl
1 0 0 1 -36 19 sc5mt astore 125 0 155 387 1 0 0 1 -27 10 sc6mt astore ssl
1 0 0 1 -36 19 sc5mt astore 124 142 116 387 1 0 0 1 10 10 sc6mt astore ssl
1 0 0 1 -36 19 sc5mt astore 127 74 117 385 1 0 0 1 10 10 sc6mt astore ssl
1 0 0 1 -36 19 sc5mt astore 124 -70 154 385 1 0 0 1 -27 10 sc6mt astore ssl
1 0 0 1 -36 19 sc5mt astore 125 0 154 314 1 0 0 1 -27 10 sc6mt astore ssl
1 0 0 1 -36 19 sc5mt astore 127 73 152 314 1 0 0 1 -27 10 sc6mt astore ssl
1 0 0 1 -36 19 sc5mt astore 126 146 154 313 1 0 0 1 -27 10 sc6mt astore ssl
1 0 0 1 -36 19 sc5mt astore 125 217 152 312 1 0 0 1 -27 10 sc6mt astore ssl
/txtdraw true def
/txlndraw true def
(STATE ) [10.005001 0 7.814999 0 9.48 0 9.164997 0 10.004997 0 0 0] 35 575 /Helvetica-Bold [ 15 1 mul 0 0 15 0 0 ] [1 0 0 1 11 -149] dotx
(1 ) [8.339996 0 0 0] 61 538 /Helvetica-Bold [ 15 1 mul 0 0 15 0 0 ] [1 0 0 1 35 -3] dotx
(2 ) [8.339996 0 0 0] 66 465 /Helvetica-Bold [ 15 1 mul 0 0 15 0 0 ] [1 0 0 1 31 -2] dotx
(3 ) [8.339996 0 0 0] 69 395 /Helvetica-Bold [ 15 1 mul 0 0 15 0 0 ] [1 0 0 1 27 -4] dotx
(4 ) [8.339996 0 0 0] 68 328 /Helvetica-Bold [ 15 1 mul 0 0 15 0 0 ] [1 0 0 1 28 -9] dotx
(TIME ) [9.165001 0 4.169998 0 12.494999 0 10.005001 0 0 0] 34 287 /Helvetica-Bold [ 15 1 mul 0 0 15 0 0 ] [1 0 0 1 390 -17] dotx
(1 ) [8.339996 0 0 0] 126 296 /Helvetica-Bold [ 15 1 mul 0 0 15 0 0 ] [1 0 0 1 -3 -9] dotx
(2 ) [8.339996 0 0 0] 250 294 /Helvetica-Bold [ 15 1 mul 0 0 15 0 0 ] [1 0 0 1 -1 -7] dotx
(3 ) [8.339996 0 0 0] 376 298 /Helvetica-Bold [ 15 1 mul 0 0 15 0 0 ] [1 0 0 1 -1 -10] dotx
(4 ) [8.339996 0 0 0] 499 294 /Helvetica-Bold [ 15 1 mul 0 0 15 0 0 ] [1 0 0 1 0 -6] dotx
(5 ) [8.340027 0 0 0] 626 295 /Helvetica-Bold [ 15 1 mul 0 0 15 0 0 ] [1 0 0 1 1 -6] dotx
(6 ) [8.340027 0 0 0] 752 298 /Helvetica-Bold [ 15 1 mul 0 0 15 0 0 ] [1 0 0 1 0 -9] dotx
end
grestore
grestore
%%Trailer

%%EndDocument
 GE /Times-Bold SF
16116 20152 MT
(Figure 4-2:)SH
/Times-Roman SF
21889 XM
(Example lattice of 4 HMM states and 6 observations upon which)SH
20534 21348 MT
(calculations in the forward-backward and Viterbi algorithms are based.)SH
/Times-Bold SF
10800 24245 MT
(4.2.0.1. The Forward-Backward Algorithm)SH
/Times-Roman SF
13300 26800 MT
(The forward-backward algorithm defines a set of recursive calculations over a lattice of)
72 W( obser-)73 W
10800 28539 MT
(vations and states \050see Figure 4-2\051, providing an)
119 W( efficient representation for calculation of state se-)118 W
10800 30278 MT
(quence and observation)
291 W( probabilities.  It provides significant computational savings over direct)292 W
10800 32017 MT
(methods. The)
357 W( forward calculation defines a solution to the evaluation problem, and by)
41 W( the definition)40 W
10800 33756 MT
(of a few additional variables in terms of the forward and backward)
68 W( vectors, it is possible to derive a)69 W
10800 35495 MT
(set of reestimation)
266 W( formulas for the HMM parameters which can be used to solve the training)265 W
10800 37234 MT
(problem.)SH
13300 40219 MT
(Define the forward vector as)9 W
/Symbol SF
26200 XM
(a)SH
/Times-Roman SF
27429 XM
(where)SH
/Symbol SF
30400 XM
(a)SH
/Times-Roman SF
31344 XM
(\050)SH
/Times-Italic SF
(j)SH
/Times-Roman SF
(\051 is the probability of the partial observation sequence)10 W
694 50 26200 40419 UL
9 /Times-Italic AF
26894 40579 MT
(t)SH
31094 XM
(t)SH
11 SS 
10800 41958 MT
(O)SH
/Times-Roman SF
11994 XM
(,)SH
/Times-Italic SF
12419 XM
(O)SH
/Times-Roman SF
13613 XM
(,)SH
/Symbol SF
14163 XM
(\327 \327 \327)SH
/Times-Roman SF
15813 XM
(,)SH
/Times-Italic SF
16238 XM
(O)SH
/Times-Roman SF
17529 XM
(and being in state)SH
/Times-Italic SF
25533 XM
(j)SH
/Times-Roman SF
26114 XM
(at time)SH
/Times-Italic SF
29414 XM
(t)SH
/Times-Roman SF
(, given the model, or)SH
8 SS 
11594 42303 MT
(1)SH
13213 XM
(2)SH
/Times-Italic SF
17032 XM
(t)SH
11 /Symbol AF
15200 43610 MT
(a)SH
/Times-Roman SF
16144 XM
([)SH
/Times-Italic SF
(j)SH
/Times-Roman SF
(])
150 MX(=)SH
/Times-Italic SF
18102 XM
(P)SH
/Times-Roman SF
(\050)SH
/Times-Italic SF
(O)SH
/Times-Roman SF
20334 XM
(,)SH
/Times-Italic SF
20759 XM
(O)SH
/Times-Roman SF
21953 XM
(,)SH
/Symbol SF
22503 XM
(\327 \327 \327)SH
/Times-Roman SF
24153 XM
(,)SH
/Times-Italic SF
24578 XM
(O)SH
/Times-Roman SF
25594 XM
(,)SH
/Times-Italic SF
(q)SH
/Times-Roman SF
26819 XM
(=)SH
/Times-Italic SF
27589 XM
(S)SH
/Times-Roman SF
28539 XM
(|)SH
/Symbol SF
28909 XM
(l)SH
/Times-Roman SF
(\051)SH
53693 XM
(\0504.6\051)SH
8 SS 
19934 43955 MT
(1)SH
21553 XM
(2)SH
/Times-Italic SF
25372 XM
(t)SH
9 SS 
15894 43970 MT
(t)SH
26419 XM
(t)SH
28139 XM
(j)SH
11 /Times-Roman AF
10800 45349 MT
(The forward vector is initialized as)SH
/Symbol SF
15200 47001 MT
(a)SH
/Times-Roman SF
16494 XM
(=)SH
/Times-Bold SF
17264 XM
(B)SH
/Symbol SF
18448 XM
(p)SH
/Times-Roman SF
53693 XM
(\0504.7\051)SH
694 50 15200 47201 UL
604 50 18448 47201 UL
9 /Times-Italic AF
15894 47361 MT
(1)SH
17998 XM
(1)SH
11 /Times-Roman AF
10800 48740 MT
(where)SH
/Times-Bold SF
13813 XM
(B)SH
/Times-Roman SF
15124 XM
(is defined as)52 W
/Times-Italic SF
21053 XM
(diag)SH
/Times-Roman SF
([)SH
/Times-Italic SF
(b)SH
/Times-Roman SF
24375 XM
([)SH
/Times-Italic SF
(O)SH
/Times-Roman SF
25785 XM
(],)SH
/Times-Italic SF
26576 XM
(b)SH
/Times-Roman SF
27576 XM
([)SH
/Times-Italic SF
(O)SH
/Times-Roman SF
28986 XM
(], . . . ,)SH
/Times-Italic SF
31977 XM
(b)SH
/Times-Roman SF
33127 XM
([)SH
/Times-Italic SF
(O)SH
/Times-Roman SF
34537 XM
(]] and)52 W
/Symbol SF
37511 XM
(p)SH
/Times-Roman SF
38442 XM
(is the initial)
52 W( state distribution vector as)51 W
604 50 37511 48940 UL
9 /Times-Italic AF
14547 49100 MT
(t)SH
23925 XM
(1)SH
25535 XM
(t)SH
27126 XM
(2)SH
28736 XM
(t)SH
32527 XM
(N)SH
34287 XM
(t)SH
11 /Times-Roman AF
10800 50479 MT
(above. By)
275 W( induction,)SH
/Symbol SF
20516 XM
(a)SH
/Times-Roman SF
21460 XM
([)SH
/Times-Italic SF
(j)SH
/Times-Roman SF
(] can be written as)SH
9 /Times-Italic AF
21210 50839 MT
(t)SH
8 SS 
19463 51925 MT
(N)SH
11 /Symbol AF
15200 53080 MT
(a)SH
/Times-Roman SF
17202 XM
([)SH
/Times-Italic SF
(j)SH
/Times-Roman SF
(])
150 MX(=)SH
/Symbol SF
20451 XM
(a)SH
/Times-Roman SF
21395 XM
([)SH
/Times-Italic SF
(i)SH
/Times-Roman SF
(])SH
/Times-Italic SF
(a)SH
23483 XM
(b)SH
/Times-Roman SF
24283 XM
([)SH
/Times-Italic SF
(O)SH
/Times-Roman SF
26751 XM
(])SH
53693 XM
(\0504.8\051)SH
16 /Symbol AF
19160 53380 MT
(\345)SH
9 /Times-Italic AF
15894 53440 MT
(t+1)SH
21145 XM
(t)SH
22983 XM
(ij)SH
24033 XM
(j)SH
25443 XM
(t+1)SH
8 SS 
19194 54174 MT
(i)SH
/Times-Roman SF
(=1)SH
11 SS 
10800 55279 MT
(or, in matrix terms)SH
8 /Times-Italic AF
18581 56725 MT
(T)SH
11 /Symbol AF
15200 57287 MT
(a)SH
/Times-Roman SF
17117 XM
(=)SH
/Symbol SF
17887 XM
(a)SH
/Times-Bold SF
19026 XM
(AB)SH
/Times-Roman SF
53693 XM
(\0504.9\051)SH
694 50 15200 57487 UL
694 50 17887 57487 UL
8 /Times-Italic AF
15894 57632 MT
(t)SH
/Times-Roman SF
(+1)SH
9 /Times-Italic AF
20554 57647 MT
(t+1)SH
8 SS 
18581 57649 MT
(t)SH
9 /Times-Roman AF
51474 58801 MT
(th)SH
11 SS 
10800 59164 MT
(where)SH
/Times-Bold SF
13832 XM
(A)SH
/Times-Roman SF
14972 XM
(is the state transition matrix.  Equation \0504.8\051 can be interpreted as follows.  The)71 W
/Times-Italic SF
51168 XM
(i)SH
/Times-Roman SF
52521 XM
(term of)72 W
10800 60903 MT
(the sum represents the probability of the joint event of producing all the observations up to time)22 W
/Times-Italic SF
53609 XM
(t)SH
/Times-Roman SF
54212 XM
(and)SH
10800 62642 MT
(being in state)30 W
/Times-Italic SF
17031 XM
(i)SH
/Times-Roman SF
17642 XM
(at time)30 W
/Times-Italic SF
21002 XM
(t)SH
/Times-Roman SF
(, making the transition to state)30 W
/Times-Italic SF
35085 XM
(j)SH
/Times-Roman SF
35696 XM
(at)SH
/Times-Italic SF
36795 XM
(t)SH
/Times-Roman SF
(+1, and producing)
30 W( the observation)31 W
/Times-Italic SF
52598 XM
(O)SH
/Times-Roman SF
55006 XM
(at)SH
9 /Times-Italic AF
53392 63002 MT
(t+1)SH
11 /Times-Roman AF
10800 64381 MT
(time)SH
/Times-Italic SF
13061 XM
(t)SH
/Times-Roman SF
(+1. Summing)
335 W( these products over all states)30 W
/Times-Italic SF
33078 XM
(i)SH
/Times-Roman SF
33689 XM
(at time)30 W
/Times-Italic SF
37049 XM
(t)SH
/Times-Roman SF
37660 XM
(gives the probability)
30 W( of producing all the)29 W
10800 66120 MT
(observations up to)
49 W( time)50 W
/Times-Italic SF
21570 XM
(t)SH
/Times-Roman SF
(+1 and being in state)50 W
/Times-Italic SF
31575 XM
(j)SH
/Times-Roman SF
32206 XM
(at)SH
/Times-Italic SF
33325 XM
(t)SH
/Times-Roman SF
(+1 independent of the state at time)50 W
/Times-Italic SF
49478 XM
(t)SH
/Times-Roman SF
(, which is the)50 W
10800 67859 MT
(definition of)SH
/Symbol SF
16544 XM
(a)SH
/Times-Roman SF
18546 XM
([j].)SH
9 /Times-Italic AF
17238 68219 MT
(t+1)SH
11 /Times-Roman AF
13300 70844 MT
(Similar to the forward vector, define the backward vector)
70 W( as)69 W
/Symbol SF
40721 XM
(b)SH
/Times-Roman SF
41575 XM
(, where the elements {)69 W
/Symbol SF
(b)SH
/Times-Roman SF
52548 XM
([)SH
/Times-Italic SF
(i)SH
/Times-Roman SF
(]} are)69 W
604 50 40721 71044 UL
9 /Times-Italic AF
41325 71204 MT
(t)SH
52298 XM
(t)SH
ES
%%Page: 80 81
BS
0 SI
10 /Times-Roman AF
54800 4286 MT
(80)SH
11 SS 
10800 7955 MT
(the probability of the partial observation sequence from)176 W
/Times-Italic SF
36950 XM
(t)SH
/Times-Roman SF
(+1 to the end, given state)176 W
/Times-Italic SF
49655 XM
(i)SH
/Times-Roman SF
50412 XM
(at)SH
/Times-Italic SF
51658 XM
(t)SH
/Times-Roman SF
52416 XM
(and the)177 W
10800 9694 MT
(model, or)SH
/Symbol SF
15200 11346 MT
(b)SH
/Times-Roman SF
16054 XM
([)SH
/Times-Italic SF
(i)SH
/Times-Roman SF
(])
150 MX(=)SH
/Times-Italic SF
18012 XM
(P)SH
/Times-Roman SF
(\050)SH
/Times-Italic SF
(O)SH
/Times-Roman SF
20917 XM
(,)SH
/Times-Italic SF
21342 XM
(O)SH
/Times-Roman SF
23209 XM
(,)SH
/Symbol SF
23759 XM
(\327 \327 \327)SH
/Times-Roman SF
25409 XM
(,)SH
/Times-Italic SF
25834 XM
(O)SH
/Times-Roman SF
27223 XM
(|)
150 MX(,)SH
/Times-Italic SF
(q)SH
/Times-Roman SF
28818 XM
(=)SH
/Times-Italic SF
29588 XM
(S)SH
/Times-Roman SF
30538 XM
(|)SH
/Symbol SF
30908 XM
(l)SH
/Times-Roman SF
(\051)SH
53143 XM
(\0504.10\051)SH
8 /Times-Italic AF
19844 11691 MT
(t)SH
/Times-Roman SF
(+1)SH
/Times-Italic SF
22136 XM
(t)SH
/Times-Roman SF
(+2)SH
/Times-Italic SF
26628 XM
(T)SH
9 SS 
15804 11706 MT
(t)SH
28418 XM
(t)SH
30138 XM
(i)SH
11 /Times-Roman AF
10800 13085 MT
(Elements of the backward vector are arbitrarily initialized as unity,)SH
/Symbol SF
15200 14862 MT
(b)SH
/Times-Roman SF
16304 XM
([)SH
/Times-Italic SF
(i)SH
/Times-Roman SF
(])
150 MX(=)
150 MX(1, 1)175 W
/Symbol SF
20387 XM
(\243)SH
/Times-Italic SF
21291 XM
(i)SH
/Symbol SF
21897 XM
(\243)SH
/Times-Italic SF
22801 XM
(N)SH
/Times-Roman SF
53143 XM
(\0504.11\051)SH
9 /Times-Italic AF
15804 15222 MT
(T)SH
11 /Times-Roman AF
10800 16601 MT
(and a recursion relation for)SH
/Symbol SF
22985 XM
(b)SH
/Times-Roman SF
24114 XM
(is)SH
604 50 22985 16801 UL
9 /Times-Italic AF
23589 16961 MT
(t)SH
11 /Symbol AF
15200 18253 MT
(b)SH
/Times-Roman SF
16204 XM
(=)SH
/Times-Bold SF
16974 XM
(AB)SH
/Symbol SF
19810 XM
(b)SH
/Times-Roman SF
53143 XM
(\0504.12\051)SH
604 50 15200 18453 UL
604 50 19810 18453 UL
9 /Times-Italic AF
15804 18613 MT
(t)SH
18502 XM
(t+1)SH
20414 XM
(t+1)SH
/Times-Roman SF
28537 19767 MT
(th)SH
11 SS 
10800 20130 MT
(for)SH
/Times-Italic SF
12357 XM
(t)SH
/Times-Roman SF
12813 XM
(=)SH
/Times-Italic SF
13583 XM
(T)SH
/Symbol SF
(-)SH
/Times-Roman SF
(1,)SH
/Times-Italic SF
15774 XM
(T)SH
/Symbol SF
(-)SH
/Times-Roman SF
(2, . . . ,)
150 0 WX(1. Looking)
275 W( at the)SH
/Times-Italic SF
28231 XM
(i)SH
/Times-Roman SF
29512 XM
(element of)SH
/Symbol SF
34460 XM
(b)SH
/Times-Roman SF
35314 XM
(,)SH
604 50 34460 20330 UL
9 /Times-Italic AF
35064 20490 MT
(t)SH
8 SS 
18315 21576 MT
(N)SH
11 /Symbol AF
15200 22731 MT
(b)SH
/Times-Roman SF
16054 XM
([)SH
/Times-Italic SF
(i)SH
/Times-Roman SF
(])
150 MX(=)SH
/Times-Italic SF
19303 XM
(a)SH
20353 XM
(b)SH
/Times-Roman SF
21153 XM
([)SH
/Times-Italic SF
(O)SH
/Times-Roman SF
23621 XM
(])SH
/Symbol SF
(b)SH
/Times-Roman SF
25899 XM
([)SH
/Times-Italic SF
(j)SH
/Times-Roman SF
(])SH
53143 XM
(\0504.13\051)SH
16 /Symbol AF
18012 23031 MT
(\345)SH
9 /Times-Italic AF
15804 23091 MT
(t)SH
19853 XM
(ij)SH
20903 XM
(j)SH
22313 XM
(t+1)SH
24591 XM
(t+1)SH
8 SS 
18046 23825 MT
(j)SH
/Times-Roman SF
(=1)SH
11 SS 
10800 24930 MT
(Each summand in Eqn. \0504.13\051 is the probability of a transition from state)186 W
/Times-Italic SF
45449 XM
(i)SH
/Times-Roman SF
46216 XM
(at)SH
/Times-Italic SF
47471 XM
(t)SH
/Times-Roman SF
48237 XM
(to state)185 W
/Times-Italic SF
52029 XM
(j)SH
/Times-Roman SF
52795 XM
(at)SH
/Times-Italic SF
54049 XM
(t)SH
/Times-Roman SF
(+1,)SH
10800 26669 MT
(emission of)134 W
/Times-Italic SF
16446 XM
(O)SH
/Times-Roman SF
18957 XM
(from state)134 W
/Times-Italic SF
23929 XM
(j)SH
/Times-Roman SF
(, and the production of the remainder of the observations.  Summing)134 W
9 /Times-Italic AF
17240 27029 MT
(t+1)SH
11 /Times-Roman AF
10800 28408 MT
(these products over all states)101 W
/Times-Italic SF
24226 XM
(j)SH
/Times-Roman SF
24908 XM
(at time)101 W
/Times-Italic SF
28410 XM
(t)SH
/Times-Roman SF
(+1 gives the)
101 W( probability of producing the observations from)100 W
10800 30147 MT
(time)SH
/Times-Italic SF
13031 XM
(t)SH
/Times-Roman SF
(+1 onward given state)SH
/Times-Italic SF
23365 XM
(i)SH
/Times-Roman SF
23946 XM
(at time)SH
/Times-Italic SF
27246 XM
(t)SH
/Times-Roman SF
(,)SH
/Times-Italic SF
28102 XM
(independent)SH
/Times-Roman SF
33753 XM
(of the sequence of following states.)SH
13300 33132 MT
(A solution to the evaluation problem, determination of)111 W
/Times-Italic SF
38477 XM
(Pr)SH
/Times-Roman SF
(\050)SH
/Times-Italic SF
(O)SH
/Times-Roman SF
40887 XM
(|)SH
/Symbol SF
41257 XM
(l)SH
/Times-Roman SF
(\051, is)
111 W( obtained directly from the)112 W
10800 34871 MT
(forward vector at time)115 W
/Times-Italic SF
21338 XM
(T)SH
/Times-Roman SF
(. By)
505 W( definition,)115 W
/Symbol SF
29622 XM
(a)SH
/Times-Roman SF
30816 XM
([)SH
/Times-Italic SF
(i)SH
/Times-Roman SF
(] is the)
115 W( probability of the entire observation sequence)114 W
9 /Times-Italic AF
30316 35231 MT
(T)SH
11 /Times-Roman AF
10800 36610 MT
(and ending in state)54 W
/Times-Italic SF
19570 XM
(i)SH
/Times-Roman SF
(. Summing)
383 W( these values over all states)54 W
/Times-Italic SF
37631 XM
(i)SH
/Times-Roman SF
38266 XM
(gives the probability)
54 W( of the observation)55 W
10800 38349 MT
(sequence and ending in any state, which is the quantity of interest:)SH
8 /Times-Italic AF
20173 39795 MT
(N)SH
11 SS 
15200 40950 MT
(Pr)SH
/Times-Roman SF
(\050)SH
/Times-Italic SF
(O)SH
/Times-Roman SF
17610 XM
(|)SH
/Symbol SF
17980 XM
(l)SH
/Times-Roman SF
(\051)
150 MX(=)SH
/Symbol SF
21161 XM
(a)SH
/Times-Roman SF
22355 XM
([)SH
/Times-Italic SF
(i)SH
/Times-Roman SF
(])SH
53143 XM
(\0504.14\051)SH
16 /Symbol AF
19870 41250 MT
(\345)SH
9 /Times-Italic AF
21855 41310 MT
(T)SH
8 SS 
19904 42044 MT
(i)SH
/Times-Roman SF
(=1)SH
11 SS 
13300 44395 MT
(To solve the training problem, define an intermediate vector as)250 W
/Symbol SF
43749 XM
(g)SH
/Times-Roman SF
44976 XM
(where the element)249 W
/Symbol SF
54060 XM
(g)SH
/Times-Roman SF
54762 XM
([)SH
/Times-Italic SF
(i)SH
/Times-Roman SF
(])SH
452 50 43749 44595 UL
9 /Times-Italic AF
44201 44755 MT
(t)SH
54512 XM
(t)SH
11 /Times-Roman AF
10800 46134 MT
(represents the probability of being in state)SH
/Times-Italic SF
29587 XM
(i)SH
/Times-Roman SF
30168 XM
(at time)SH
/Times-Italic SF
33468 XM
(t)SH
/Times-Roman SF
34049 XM
(given the model and observations, or)SH
/Symbol SF
15200 47786 MT
(g)SH
/Times-Roman SF
15902 XM
([)SH
/Times-Italic SF
(i)SH
/Times-Roman SF
(])
150 MX(=)SH
/Times-Italic SF
17860 XM
(Pr)SH
/Times-Roman SF
(\050)SH
/Times-Italic SF
(q)SH
/Times-Roman SF
20276 XM
(=)SH
/Times-Italic SF
21046 XM
(S)SH
/Times-Roman SF
21996 XM
(|)SH
/Times-Italic SF
22366 XM
(O)SH
/Times-Roman SF
(,)SH
/Symbol SF
23585 XM
(l)SH
/Times-Roman SF
(\051)SH
53143 XM
(\0504.15\051)SH
9 /Times-Italic AF
15652 48146 MT
(t)SH
19876 XM
(t)SH
21596 XM
(i)SH
11 /Times-Roman AF
10800 49525 MT
(In terms of the forward-backward variables, this can be rewritten as)SH
/Symbol SF
18720 51177 MT
(a)SH
/Times-Roman SF
19664 XM
([)SH
/Times-Italic SF
(i)SH
/Times-Roman SF
(])SH
/Symbol SF
(b)SH
/Times-Roman SF
21556 XM
([)SH
/Times-Italic SF
(i)SH
/Times-Roman SF
(])SH
9 /Times-Italic AF
19414 51537 MT
(t)SH
21306 XM
(t)SH
5594 50 17860 51922 UL
11 /Symbol AF
15200 52167 MT
(g)SH
/Times-Roman SF
15902 XM
([)SH
/Times-Italic SF
(i)SH
/Times-Roman SF
(])
150 MX(=)SH
53143 XM
(\0504.16\051)SH
9 /Times-Italic AF
15652 52527 MT
(t)SH
8 SS 
18196 52712 MT
(N)SH
11 /Symbol AF
19216 53867 MT
(a)SH
/Times-Roman SF
20160 XM
([)SH
/Times-Italic SF
(k)SH
/Times-Roman SF
(])SH
/Symbol SF
(b)SH
/Times-Roman SF
22234 XM
([)SH
/Times-Italic SF
(k)SH
/Times-Roman SF
(])SH
16 /Symbol AF
17892 54167 MT
(\345)SH
9 /Times-Italic AF
19910 54227 MT
(t)SH
21984 XM
(t)SH
8 SS 
17860 54961 MT
(k)SH
/Times-Roman SF
(=1)SH
11 /Symbol AF
17860 56403 MT
(a)SH
19104 XM
(\304 b)25 W
694 50 17860 56603 UL
604 50 20249 56603 UL
9 /Times-Italic AF
18554 56763 MT
(t)SH
20853 XM
(t)SH
3243 50 17860 57148 UL
11 /Times-Roman AF
17090 57393 MT
(=)SH
8 /Times-Italic AF
19179 57938 MT
(T)SH
11 /Symbol AF
18485 58500 MT
(a b)170 W
694 50 18485 58700 UL
604 50 19624 58700 UL
9 /Times-Italic AF
20228 58860 MT
(t)SH
8 SS 
19179 58862 MT
(t)SH
11 /Times-Roman AF
10800 60277 MT
(where)SH
/Symbol SF
13925 XM
(\304)SH
/Times-Roman SF
15209 XM
(represents the)
14 W( Schur product.  The numerator of \0504.16\051 is the probability of the observations)15 W
10800 62016 MT
(up to time)104 W
/Times-Italic SF
15849 XM
(t)SH
/Times-Roman SF
16533 XM
(and being in state)103 W
/Times-Italic SF
24949 XM
(i)SH
/Times-Roman SF
(, times the probability of the observations from time)103 W
/Times-Italic SF
49402 XM
(t)SH
/Times-Roman SF
(+1 to the end)103 W
10800 63755 MT
(given state)7 W
/Times-Italic SF
15824 XM
(i)SH
/Times-Roman SF
16412 XM
(at time)7 W
/Times-Italic SF
19726 XM
(t)SH
/Times-Roman SF
(, all given the model parameters, or)7 W
/Times-Italic SF
35934 XM
(Pr)SH
/Times-Roman SF
(\050)SH
/Times-Italic SF
(q)SH
/Times-Roman SF
38350 XM
(=)SH
/Times-Italic SF
39120 XM
(S)SH
/Times-Roman SF
39920 XM
(,)SH
/Times-Italic SF
40345 XM
(O)SH
/Times-Roman SF
41289 XM
(|)SH
/Symbol SF
41659 XM
(l)SH
/Times-Roman SF
(\051. The)
289 W( denominator is actually)7 W
9 /Times-Italic AF
37950 64115 MT
(t)SH
39670 XM
(i)SH
11 SS 
10800 65494 MT
(Pr)SH
/Times-Roman SF
(\050)SH
/Times-Italic SF
(O)SH
/Times-Roman SF
13210 XM
(|)SH
/Symbol SF
13580 XM
(l)SH
/Times-Roman SF
(\051, which normalizes the expression to ensure that the elements of)SH
/Symbol SF
42958 XM
(g)SH
/Times-Roman SF
43935 XM
(sum to 1.)SH
452 50 42958 65694 UL
9 /Times-Italic AF
43410 65854 MT
(t)SH
11 /Times-Roman AF
13300 68479 MT
(Additionally define the intermediate matrix)115 W
/Symbol SF
33274 XM
(x)SH
/Times-Roman SF
34455 XM
(where the element)114 W
/Symbol SF
43134 XM
(x)SH
/Times-Roman SF
43926 XM
([)SH
/Times-Italic SF
(i)SH
/Times-Roman SF
(,)SH
/Times-Italic SF
(j)SH
/Times-Roman SF
(] is the probability of a)114 W
9 /Times-Italic AF
33816 68839 MT
(t)SH
43676 XM
(t)SH
11 /Times-Roman AF
10800 70218 MT
(transition from state)SH
/Times-Italic SF
19935 XM
(i)SH
/Times-Roman SF
20516 XM
(at time)SH
/Times-Italic SF
23816 XM
(t)SH
/Times-Roman SF
24397 XM
(to state)SH
/Times-Italic SF
27819 XM
(j)SH
/Times-Roman SF
28400 XM
(at)SH
/Times-Italic SF
29469 XM
(t)SH
/Times-Roman SF
(+1, given the model and observations, or)SH
/Symbol SF
15200 71870 MT
(x)SH
/Times-Roman SF
15992 XM
([)SH
/Times-Italic SF
(i)SH
/Times-Roman SF
(,)SH
/Times-Italic SF
(j)SH
/Times-Roman SF
(])
150 MX(=)SH
/Times-Italic SF
18531 XM
(Pr)SH
/Times-Roman SF
(\050)SH
/Times-Italic SF
(q)SH
/Times-Roman SF
20947 XM
(=)SH
/Times-Italic SF
21717 XM
(S)SH
/Times-Roman SF
22517 XM
(,)SH
/Times-Italic SF
23092 XM
(q)SH
/Times-Roman SF
25100 XM
(=)SH
/Times-Italic SF
25870 XM
(S)SH
/Times-Roman SF
26820 XM
(|)SH
/Times-Italic SF
27190 XM
(O)SH
/Times-Roman SF
(,)SH
/Symbol SF
28409 XM
(l)SH
/Times-Roman SF
(\051)SH
53143 XM
(\0504.17\051)SH
9 /Times-Italic AF
15742 72230 MT
(t)SH
20547 XM
(t)SH
22267 XM
(i)SH
23642 XM
(t+1)SH
26420 XM
(j)SH
11 /Times-Roman AF
10800 73609 MT
(This quantity can be expressed in terms of forward and backward variables as)SH
ES
%%Page: 81 82
BS
0 SI
10 /Times-Roman AF
54800 4286 MT
(81)SH
11 /Symbol AF
18531 7955 MT
(a)SH
/Times-Roman SF
19475 XM
([)SH
/Times-Italic SF
(i)SH
/Times-Roman SF
(])SH
/Times-Italic SF
(a)SH
21563 XM
(b)SH
/Times-Roman SF
22363 XM
([)SH
/Times-Italic SF
(O)SH
/Times-Roman SF
24831 XM
(])SH
/Symbol SF
(b)SH
/Times-Roman SF
27109 XM
([)SH
/Times-Italic SF
(j)SH
/Times-Roman SF
(])SH
9 /Times-Italic AF
19225 8315 MT
(t)SH
21063 XM
(ij)SH
22113 XM
(j)SH
23523 XM
(t+1)SH
25801 XM
(t+1)SH
9616 50 18531 8700 UL
11 /Symbol AF
15200 8945 MT
(x)SH
/Times-Roman SF
15992 XM
([)SH
/Times-Italic SF
(i)SH
/Times-Roman SF
(,)SH
/Times-Italic SF
(j)SH
/Times-Roman SF
(])
150 MX(=)SH
53143 XM
(\0504.18\051)SH
9 /Times-Italic AF
15742 9305 MT
(t)SH
8 SS 
20878 9490 MT
(N)SH
11 /Symbol AF
21898 10645 MT
(a)SH
/Times-Roman SF
22842 XM
([)SH
/Times-Italic SF
(k)SH
/Times-Roman SF
(])SH
/Symbol SF
(b)SH
/Times-Roman SF
24916 XM
([)SH
/Times-Italic SF
(k)SH
/Times-Roman SF
(])SH
16 /Symbol AF
20574 10945 MT
(\345)SH
9 /Times-Italic AF
22592 11005 MT
(t)SH
24666 XM
(t)SH
8 SS 
20542 11739 MT
(k)SH
/Times-Roman SF
(=1)SH
9 /Times-Italic AF
21387 12918 MT
(T)SH
11 /Symbol AF
18531 13281 MT
(a)SH
19475 XM
(b)SH
22187 XM
(\304)SH
/Times-Bold SF
23332 XM
(AB)SH
694 50 18531 13481 UL
604 50 19475 13481 UL
9 /Times-Italic AF
19225 13641 MT
(t)SH
20079 XM
(t+1)SH
24860 XM
(t+1)SH
7637 50 18531 14026 UL
11 /Times-Roman AF
17761 14271 MT
(=)SH
9 /Times-Italic AF
22144 14884 MT
(T)SH
11 /Symbol AF
21200 15247 MT
(a)SH
22644 XM
(b)SH
694 50 21200 15447 UL
604 50 22644 15447 UL
9 /Times-Italic AF
21894 15607 MT
(t)SH
23248 XM
(t)SH
11 /Times-Roman AF
10800 16986 MT
(The numerator)
282 W( of \0504.18\051 is)283 W
/Times-Italic SF
24126 XM
(Pr)SH
/Times-Roman SF
(\050)SH
/Times-Italic SF
(q)SH
/Times-Roman SF
26542 XM
(=)SH
/Times-Italic SF
27312 XM
(S)SH
/Times-Roman SF
28112 XM
(,)SH
/Times-Italic SF
28537 XM
(q)SH
/Times-Roman SF
30545 XM
(=)SH
/Times-Italic SF
31315 XM
(S)SH
/Times-Roman SF
32115 XM
(,)SH
/Times-Italic SF
32540 XM
(O)SH
/Times-Roman SF
33484 XM
(|)SH
/Symbol SF
33854 XM
(l)SH
/Times-Roman SF
(\051, the denominator is)283 W
/Times-Italic SF
44969 XM
(Pr)SH
/Times-Roman SF
(\050)SH
/Times-Italic SF
(O)SH
/Times-Roman SF
47379 XM
(|)SH
/Symbol SF
47749 XM
(l)SH
/Times-Roman SF
(\051, so by Bayes')283 W
9 /Times-Italic AF
26142 17346 MT
(t)SH
27862 XM
(i)SH
29087 XM
(t+1)SH
31865 XM
(j)SH
11 /Times-Roman AF
10800 18725 MT
(theorem this is the desired probability.)SH
13300 21710 MT
(Summing)SH
/Symbol SF
17995 XM
(g)SH
/Times-Roman SF
18697 XM
([)SH
/Times-Italic SF
(i)SH
/Times-Roman SF
(] over time)140 W
/Times-Italic SF
24890 XM
(t)SH
/Times-Roman SF
25611 XM
(yields the)
140 W( expected number of times the model is in state)139 W
/Times-Italic SF
52406 XM
(i)SH
/Times-Roman SF
53126 XM
(or the)139 W
9 /Times-Italic AF
18447 22070 MT
(t)SH
11 /Times-Roman AF
10800 23449 MT
(expected number of times a transition)
134 W( out of state)135 W
/Times-Italic SF
34035 XM
(i)SH
/Times-Roman SF
34751 XM
(is taken.  Similarly, summing)135 W
/Symbol SF
48659 XM
(x)SH
/Times-Roman SF
49451 XM
([)SH
/Times-Italic SF
(i)SH
/Times-Roman SF
(,)SH
/Times-Italic SF
(j)SH
/Times-Roman SF
(] over time)135 W
9 /Times-Italic AF
49201 23809 MT
(t)SH
11 /Times-Roman AF
10800 25188 MT
(yields the expected number of times the transition from state)140 W
/Times-Italic SF
39144 XM
(i)SH
/Times-Roman SF
39865 XM
(to state)140 W
/Times-Italic SF
43567 XM
(j)SH
/Times-Roman SF
44288 XM
(is taken.  Note)
140 W( that these)139 W
10800 26927 MT
(expectations are time averages, or frequencies of occurrence of the particular events.  A set of HMM)45 W
10800 28666 MT
(parameter reestimation formulas, defined in terms of)
50 W( these time-averaged frequencies, can be written)49 W
10800 30405 MT
(as)SH
/Symbol SF
15200 32057 MT
(-)SH
15200 32456 MT
(p)SH
/Times-Roman SF
16204 XM
(=)SH
/Symbol SF
16974 XM
(g)SH
/Times-Roman SF
17826 XM
([)SH
/Times-Italic SF
(i)SH
/Times-Roman SF
(])SH
53143 XM
(\0504.19\051)SH
8 SS 
17426 32801 MT
(1)SH
9 /Times-Italic AF
15804 32816 MT
(i)SH
8 SS 
17516 33902 MT
(T)SH
11 /Symbol AF
18459 35057 MT
(x)SH
/Times-Roman SF
19223 XM
([)SH
/Times-Italic SF
(i)SH
/Times-Roman SF
(,)SH
/Times-Italic SF
(j)SH
/Times-Roman SF
(])SH
16 /Symbol AF
17168 35357 MT
(\345)SH
8 /Times-Italic AF
19001 35402 MT
(t)SH
17202 36151 MT
(t)SH
/Times-Roman SF
(=1)SH
11 /Symbol AF
15200 36372 MT
(-)SH
3674 50 17168 36526 UL
/Times-Italic SF
15200 36771 MT
(a)SH
/Times-Roman SF
16398 XM
(=)SH
8 /Times-Italic AF
15804 37116 MT
(ij)SH
17851 37316 MT
(T)SH
11 /Symbol AF
18794 38471 MT
(g)SH
/Times-Roman SF
19468 XM
([)SH
/Times-Italic SF
(i)SH
/Times-Roman SF
(])SH
16 /Symbol AF
17503 38771 MT
(\345)SH
8 /Times-Italic AF
19246 38816 MT
(t)SH
17537 39565 MT
(t)SH
/Times-Roman SF
(=1)SH
11 SS 
10800 40670 MT
(and)SH
8 /Times-Italic AF
20361 42116 MT
(T)SH
11 /Symbol AF
23001 43271 MT
(g)SH
/Times-Roman SF
23675 XM
([)SH
/Times-Italic SF
(j)SH
/Times-Roman SF
(])SH
16 /Symbol AF
20013 43571 MT
(\345)SH
8 /Times-Italic AF
23453 43616 MT
(t)SH
755 50 15200 44334 UL
18317 44365 MT
(t)SH
/Times-Roman SF
(=1)SH
/Times-Italic SF
19540 XM
(and)
150 MX(O)SH
/Times-Roman SF
21690 XM
(=)SH
/Times-Italic SF
(v)SH
21468 44710 MT
(t)SH
22496 XM
(k)SH
6396 50 18317 45085 UL
11 SS 
15200 45330 MT
(b)SH
/Times-Roman SF
16177 XM
([)SH
/Times-Italic SF
(k)SH
/Times-Roman SF
(])
150 MX(=)SH
8 /Times-Italic AF
15955 45675 MT
(j)SH
20361 45875 MT
(T)SH
11 /Symbol AF
21304 47030 MT
(g)SH
/Times-Roman SF
21978 XM
([)SH
/Times-Italic SF
(j)SH
/Times-Roman SF
(])SH
16 /Symbol AF
20013 47330 MT
(\345)SH
8 /Times-Italic AF
21756 47375 MT
(t)SH
20047 48124 MT
(t)SH
/Times-Roman SF
(=1)SH
11 /Symbol AF
17630 49142 MT
(-)SH
42985 XM
(-)SH
/Times-Roman SF
10800 49541 MT
(The reestimate)25 W
/Symbol SF
17630 XM
(p)SH
/Times-Roman SF
18756 XM
(is the expected number of times in state)25 W
/Times-Italic SF
36674 XM
(i)SH
/Times-Roman SF
37281 XM
(at time)26 W
/Times-Italic SF
40633 XM
(t)SH
/Times-Roman SF
41089 XM
(=)
150 MX(1,)SH
/Times-Italic SF
42985 XM
(a)SH
/Times-Roman SF
44334 XM
(is the expected number of)26 W
8 /Times-Italic AF
18234 49886 MT
(i)SH
43589 XM
(ij)SH
755 50 50815 51016 UL
11 /Times-Roman AF
10800 52012 MT
(transitions from)81 W
/Times-Italic SF
18234 XM
(S)SH
/Times-Roman SF
19390 XM
(to)SH
/Times-Italic SF
20602 XM
(S)SH
/Times-Roman SF
21758 XM
(normalized by the expected number of transitions out)
81 W( of)80 W
/Times-Italic SF
47442 XM
(S)SH
/Times-Roman SF
48242 XM
(, and)80 W
/Times-Italic SF
50815 XM
(b)SH
/Times-Roman SF
51792 XM
([)SH
/Times-Italic SF
(k)SH
/Times-Roman SF
(] is the)80 W
8 /Times-Italic AF
51570 52357 MT
(j)SH
9 SS 
18784 52372 MT
(i)SH
21152 XM
(j)SH
47992 XM
(i)SH
11 /Times-Roman AF
10800 53751 MT
(expected number of times in)95 W
/Times-Italic SF
24074 XM
(S)SH
/Times-Roman SF
25244 XM
(when)SH
/Times-Italic SF
27996 XM
(v)SH
/Times-Roman SF
29255 XM
(is emitted normalized by the number of times in)96 W
/Times-Italic SF
51536 XM
(S)SH
/Times-Roman SF
52336 XM
(. If)
467 W( the)96 W
9 /Times-Italic AF
24624 54111 MT
(j)SH
28484 XM
(k)SH
52086 XM
(j)SH
11 /Times-Roman AF
10800 55490 MT
(current model parameters)268 W
/Symbol SF
23117 XM
(l)SH
/Times-Roman SF
24264 XM
(are iteratively replaced by)
268 W( those in \0504.19\051 and the training process)267 W
10800 57229 MT
(repeated, then the sequence of observation probabilities {)91 W
/Times-Italic SF
(Pr)SH
/Times-Roman SF
(\050)SH
/Times-Italic SF
(O)SH
/Times-Roman SF
39115 XM
(|)SH
/Symbol SF
39485 XM
(l)SH
/Times-Roman SF
40489 XM
(\051} will increase until)
91 W( a local max-)92 W
8 /Times-Italic AF
40089 57574 MT
(n)SH
11 /Times-Roman AF
10800 58968 MT
(imum is reached)
7 W( [39].)
SH( The)
289 W( HMM parameter estimates at these local maxima are)
7 W( maximum likelihood)6 W
10800 60707 MT
(estimates since they maximize {)SH
/Times-Italic SF
(Pr)SH
/Times-Roman SF
(\050)SH
/Times-Italic SF
(O)SH
/Times-Roman SF
27424 XM
(|)SH
/Symbol SF
27794 XM
(l)SH
/Times-Roman SF
(\051} with respect to)SH
/Symbol SF
36318 XM
(l)SH
/Times-Roman SF
(.)SH
/Times-Bold SF
10800 63604 MT
(4.2.0.2. The Viterbi Algorithm)SH
/Times-Roman SF
13300 66159 MT
(Although the solution of the decoding problem is not an)
171 W( issue for the adaptation work con-)172 W
10800 67898 MT
(sidered here, it is an integral part of the recognition)
42 W( algorithm under study and so for completeness it)41 W
10800 69637 MT
(is outlined briefly.  The Viterbi algorithm is a dynamic programming method which is)
11 W( similar in form)12 W
10800 71376 MT
(to the forward computation in \0504.8\051 except the summation is replaced by maximization.  Define)
94 W( the)93 W
ES
%%Page: 82 83
BS
0 SI
10 /Times-Roman AF
54800 4286 MT
(82)SH
11 SS 
10800 7955 MT
(best score and)
93 W( best state vectors as)94 W
/Symbol SF
26941 XM
(d)SH
/Times-Roman SF
28075 XM
(and)SH
/Symbol SF
30032 XM
(y)SH
/Times-Roman SF
31009 XM
(, respectively.  The elements)94 W
/Symbol SF
44338 XM
(d)SH
/Times-Roman SF
45103 XM
([)SH
/Times-Italic SF
(i)SH
/Times-Roman SF
(] represent the highest)94 W
543 50 26941 8155 UL
755 50 30032 8155 UL
8 /Times-Italic AF
27484 8300 MT
(t)SH
30787 XM
(t)SH
44881 XM
(t)SH
11 /Times-Roman AF
10800 9694 MT
(scoring single path, ending in state)SH
/Times-Italic SF
26351 XM
(i)SH
/Times-Roman SF
(, which produced the observation sequence)SH
/Symbol SF
15200 11346 MT
(d)SH
/Times-Roman SF
15965 XM
([)SH
/Times-Italic SF
(i)SH
/Times-Roman SF
(])
150 MX(=)
150 MX(max)SH
/Times-Italic SF
23001 XM
(Pr)SH
/Times-Roman SF
(\050)SH
/Times-Italic SF
(q)SH
25567 XM
(q)SH
/Symbol SF
26942 XM
(\327 \327 \327)SH
/Times-Italic SF
28742 XM
(q)SH
/Times-Roman SF
29664 XM
(=)SH
/Times-Italic SF
30434 XM
(i)SH
/Times-Roman SF
(,)SH
/Times-Italic SF
31165 XM
(O)SH
32509 XM
(O)SH
/Symbol SF
34128 XM
(\327 \327 \327)SH
/Times-Italic SF
35928 XM
(O)SH
/Times-Roman SF
37094 XM
(|)SH
/Symbol SF
37464 XM
(l)SH
/Times-Roman SF
(\051)SH
53143 XM
(\0504.20\051)SH
8 /Times-Italic AF
15743 11691 MT
(t)SH
/Times-Roman SF
19967 XM
({)SH
/Times-Italic SF
(q)SH
/Times-Roman SF
21106 XM
(})SH
25017 XM
(1)SH
26117 XM
(2)SH
/Times-Italic SF
29292 XM
(t)SH
/Times-Roman SF
31959 XM
(1)SH
33303 XM
(2)SH
/Times-Italic SF
36722 XM
(t)SH
20751 12036 MT
(k)SH
21490 XM
(t)SH
/Symbol SF
(-)SH
/Times-Roman SF
(1)SH
11 SS 
10800 13085 MT
(where the maximization is over the state sequence up to time)SH
/Times-Italic SF
37895 XM
(t)SH
/Times-Roman SF
(-1. These)
275 W( elements are initialized as)SH
/Symbol SF
15200 14737 MT
(d)SH
/Times-Roman SF
16143 XM
([)SH
/Times-Italic SF
(i)SH
/Times-Roman SF
(])
150 MX(=)SH
/Symbol SF
18101 XM
(p)SH
/Times-Italic SF
18927 XM
(b)SH
/Times-Roman SF
19699 XM
([)SH
/Times-Italic SF
(O)SH
/Times-Roman SF
21259 XM
(])SH
53143 XM
(\0504.21\051)SH
8 SS 
15743 15082 MT
(1)SH
/Times-Italic SF
18705 XM
(i)SH
19477 XM
(j)SH
/Times-Roman SF
20859 XM
(1)SH
11 SS 
10800 16476 MT
(and again by induction)SH
/Symbol SF
15200 18128 MT
(d)SH
/Times-Roman SF
16816 XM
([)SH
/Times-Italic SF
(j)SH
/Times-Roman SF
(])
150 MX(=)SH
/Times-Italic SF
18774 XM
(max)SH
/Times-Roman SF
20828 XM
([)SH
/Symbol SF
(d)SH
/Times-Roman SF
21959 XM
([)SH
/Times-Italic SF
(i)SH
/Times-Roman SF
(])SH
/Times-Italic SF
(a)SH
/Times-Roman SF
24047 XM
(])SH
/Times-Italic SF
(b)SH
/Times-Roman SF
25213 XM
([)SH
/Times-Italic SF
(O)SH
/Times-Roman SF
27681 XM
(])SH
53143 XM
(\0504.22\051)SH
8 /Times-Italic AF
15743 18473 MT
(t)SH
/Times-Roman SF
(+1)SH
/Times-Italic SF
20606 XM
(i)SH
21737 XM
(t)SH
9 SS 
23547 18488 MT
(ij)SH
24963 XM
(j)SH
26373 XM
(t+1)SH
11 /Times-Roman AF
10800 19867 MT
(The element)76 W
/Symbol SF
16694 XM
(y)SH
/Times-Roman SF
17671 XM
([)SH
/Times-Italic SF
(j)SH
/Times-Roman SF
(] holds the index of the best state from the)
76 W( previous time instant \050)75 W
/Times-Italic SF
(t)SH
/Times-Roman SF
(-1\051 which passes)75 W
8 /Times-Italic AF
17449 20212 MT
(t)SH
11 /Times-Roman AF
10800 21606 MT
(through the current state)SH
/Times-Italic SF
21796 XM
(j)SH
/Times-Roman SF
(, or)SH
/Symbol SF
15200 23258 MT
(y)SH
/Times-Roman SF
16177 XM
([)SH
/Times-Italic SF
(j)SH
/Times-Roman SF
(])
150 MX(=)SH
/Times-Italic SF
18135 XM
(argmax)SH
/Times-Roman SF
21717 XM
([)SH
/Symbol SF
(d)SH
/Times-Roman SF
23687 XM
([)SH
/Times-Italic SF
(i)SH
/Times-Roman SF
(])SH
/Times-Italic SF
(a)SH
/Times-Roman SF
25775 XM
(])SH
53143 XM
(\0504.23\051)SH
8 /Times-Italic AF
15955 23603 MT
(t)SH
21495 XM
(i)SH
22626 XM
(t)SH
/Symbol SF
(-)SH
/Times-Roman SF
(1)SH
9 /Times-Italic AF
25275 23618 MT
(ij)SH
11 /Times-Roman AF
10800 24997 MT
(Upon completion of the calculation of \0504.22\051)
67 W( and \0504.23\051 across the lattice of observations and states,)68 W
9 SS 
23446 26373 MT
(*)SH
11 SS 
10800 26736 MT
(the optimal state sequence)SH
/Times-Italic SF
22652 XM
(Q)SH
/Times-Roman SF
24171 XM
(may be decoded by backtracking through the)SH
/Symbol SF
44238 XM
(y)SH
/Times-Roman SF
45268 XM
(array)SH
8 /Symbol AF
15750 28273 MT
(*)SH
19814 XM
(*)SH
11 /Times-Italic AF
15200 28835 MT
(q)SH
/Times-Roman SF
16300 XM
(=)SH
/Symbol SF
17070 XM
(y)SH
/Times-Roman SF
18898 XM
([)SH
/Times-Italic SF
(q)SH
/Times-Roman SF
20887 XM
(])SH
53143 XM
(\0504.24\051)SH
8 /Times-Italic AF
17825 29180 MT
(t)SH
/Times-Roman SF
(+1)SH
/Times-Italic SF
15750 29197 MT
(t)SH
19814 XM
(t)SH
/Times-Roman SF
(+1)SH
11 SS 
10800 30574 MT
(where)SH
/Times-Italic SF
13942 XM
(t)SH
/Times-Roman SF
14398 XM
(=)SH
/Times-Italic SF
15168 XM
(T)SH
/Symbol SF
(-)SH
/Times-Roman SF
(1,)SH
/Times-Italic SF
17359 XM
(T)SH
/Symbol SF
(-)SH
/Times-Roman SF
(2, .)
150 W( . . ,)
150 0 WX(1. Equation)
637 W( \0504.24\051)
181 W( means that the previous best state is specified by the)180 W
10800 32313 MT
(value of the)29 W
/Symbol SF
16354 XM
(y)SH
/Times-Roman SF
17413 XM
(array at the current best)
29 W( state.  Application of this algorithm to speech recognition will)30 W
10800 34052 MT
(be discussed in the next section.)SH
13 /Times-Bold AF
10800 37803 MT
(4.3. Hidden Markov Models for Speech Recognition)SH
11 /Times-Roman AF
13300 40718 MT
(When modeling non-stationary signals such as speech, the general,)
261 W( fully-connected hidden)260 W
10800 42457 MT
(Markov model \050as in Figure 4-1\051 is modified to incorporate a number of constraints.  The most)
45 W( basic)46 W
10800 44196 MT
(modification is the assumption of a left-right model.  In the)
75 W( fully-connected HMM, any state can be)74 W
10800 45935 MT
(reached from any other state in one step, so)
78 W( the state transition matrix elements are strictly positive.)79 W
10800 47674 MT
(In the left-right model \050see Figure 4-3\051, the state index)
33 W( is not allowed to decrease with time, resulting)32 W
10800 49413 MT
(in an upper-triangular state transition matrix.  As a result, the)
15 W( state sequence must begin in state 1 and)16 W
10800 51152 MT
(end in state)69 W
/Times-Italic SF
16292 XM
(N)SH
/Times-Roman SF
(, which places constraints on the)
69 W( initial state probability vector)68 W
/Symbol SF
45542 XM
(p)SH
/Times-Roman SF
46489 XM
(and requires)68 W
/Times-Italic SF
52305 XM
(a)SH
/Times-Roman SF
54205 XM
(=)
150 MX(1.)SH
604 50 45542 51352 UL
9 /Times-Italic AF
52855 51512 MT
(NN)SH
11 /Times-Roman AF
10800 52891 MT
(Additionally, when modeling continuous speech, changes in the state sequence are often limited)
59 W( to a)60 W
10800 54630 MT
(small number of steps,)209 W
/Times-Italic SF
21871 XM
(i.e.)SH
/Times-Roman SF
23699 XM
(the state indices may change at most by)
209 W( some small number)208 W
/Times-Italic SF
52603 XM
(s)SH
/Times-Roman SF
(. For)691 W
10800 56369 MT
(example, if word and grammar models were)
8 W( constructed from phoneme models as in Figure 4-4, from)9 W
10800 58108 MT
(the phoneme model it is obvious the maximum number of states)
108 W( which may be skipped in a single)107 W
10800 59847 MT
(transition is three.  Limiting this state jump size has the effect of making the state transition)
95 W( matrix)96 W
10800 61586 MT
(banded in addition to being upper triangular; the number of diagonals above the main)
155 W( diagonal is)154 W
10800 63325 MT
(equal to the maximum jump size.)SH
13300 66310 MT
(Another consequence of the left-right model is that one training sequence is not)
138 W( sufficient to)139 W
10800 68049 MT
(train the model: there can be only a very small number of observations from)
155 W( within a given state)154 W
10800 69788 MT
(before transition to another state.  To obtain reliable estimates of all model)
203 W( parameters, multiple)204 W
10800 71527 MT
(training sequences are necessary.)
15 W( Fortunately,)
303 W( extension of the training algorithm to multiple training)14 W
ES
%%Page: 83 84
BS
0 SI
10 /Times-Roman AF
54800 4286 MT
(83)SH
11 SS 
717 1000 0 21600 18385 GB 
%%BeginDocument: /usr0/rozzi/Documentation/PhDThesis/Chapter4/LRHMM.eps
%!PS-Adobe-2.0 EPSF-2.0
%%Title: 
%%Creator: TopDraw
%%CreationDate: Fri Mar  1 16:20:08 1991
%%For: rozzi
%%DocumentFonts: (atend)
%%%Pages: 0 1
%%BoundingBox: 0 0 326 156
%%EndComments

%%BeginDocument: /usr/lib/NextStep/printPackage.ps
%!PS-Adobe-2.0
%%Title: Printing Package
%%EndComments
%Version: 2.0
%Copyright: 1988, NeXT, Inc.

/__NXdef{1 index where{pop pop pop}{def}ifelse}bind def
/__NXbdef{1 index where{pop pop pop}{bind def}ifelse}bind def
/UserObjects 10 array __NXdef
/defineuserobject{
        exch dup 1 add dup UserObjects length gt{
                array dup 0 UserObjects putinterval
                /UserObjects exch def
        }{pop}ifelse UserObjects exch 3 -1 roll put
}__NXbdef
/undefineuserobject{UserObjects exch null put}__NXbdef
/execuserobject{UserObjects exch get exec}__NXbdef
/__NXRectPath{4 2 roll moveto 1 index 0 rlineto
0 exch rlineto neg 0 rlineto closepath}__NXbdef
/__NXProcessRectArgs{
        1 index type /arraytype eq{
                exch 0 4 2 index length 1 sub{
                        dup 3 add 1 exch{1 index exch get exch}for
                        5 1 roll 5 index exec
                }for pop pop
        }{exec}ifelse
}__NXbdef
/rectfill{gsave newpath {__NXRectPath fill} __NXProcessRectArgs grestore}__NXbdef
/rectclip{newpath {__NXRectPath} __NXProcessRectArgs clip newpath}__NXbdef
/rectstroke{
        gsave newpath dup type /arraytype eq{dup length 6 eq}{false}ifelse{
                {gsave __NXRectPath null concat stroke grestore}
                dup length array cvx copy dup 2 4 -1 roll put __NXProcessRectArgs
        }{{__NXRectPath stroke} __NXProcessRectArgs}ifelse grestore
}__NXbdef
/xyshow{
        0 1 3 index length 1 sub{
                currentpoint 4 index 3 index 1 getinterval show
                3 index 3 index 2 mul 1 add get add exch
                3 index 3 index 2 mul get add exch moveto pop
        }for pop pop
}__NXbdef
/xshow{
        0 1 3 index length 1 sub{
                currentpoint 4 index 3 index 1 getinterval show
                exch 3 index 3 index get add exch moveto pop
        }for pop pop
}__NXbdef
/yshow{
        0 1 3 index length 1 sub{
                currentpoint 4 index 3 index 1 getinterval show
                3 index 3 index get add moveto pop
        }for pop pop
}__NXbdef
/arct{arcto pop pop pop pop}__NXbdef
/setbbox{pop pop pop pop}__NXbdef
/ucache{}__NXbdef
/ucachestatus{mark 0 0 0 0 0}__NXbdef
/setucacheparams{cleartomark}__NXbdef
/uappend{systemdict begin cvx exec end}__NXbdef
/ueofill{gsave newpath uappend eofill grestore}__NXbdef
/ufill{gsave newpath uappend fill grestore}__NXbdef
/ustroke{
        gsave newpath dup length 6 eq
        {exch uappend concat}{uappend}ifelse
        stroke grestore
}__NXbdef
/__NXustrokepathMatrix dup where {pop pop}{matrix def}ifelse
/ustrokepath{
        newpath dup length 6 eq{
                exch uappend __NXustrokepathMatrix currentmatrix exch concat
                strokepath setmatrix
        }{uappend strokepath}ifelse
} __NXbdef
/upath{
        [exch {/ucache cvx}if pathbbox /setbbox cvx
         {/moveto cvx}{/lineto cvx}{/curveto cvx}{/closepath cvx}pathforall]cvx
} __NXbdef
/setstrokeadjust{pop}__NXbdef
/currentstrokeadjust{false}__NXbdef
/selectfont{exch findfont exch
dup type /arraytype eq {makefont}{scalefont}ifelse setfont}__NXbdef
/_NXCombineArrays{
        counttomark dup 2 add index dup length 3 -1 roll {
                2 index length sub dup 4 1 roll 1 index exch 4 -1 roll putinterval exch
        }repeat pop pop pop
}__NXbdef
/setcmykcolor{
        1.0 exch sub dup dup 6 -1 roll
        sub dup 0 lt{pop 0}if 5 1 roll
        4 -1 roll sub dup 0 lt{pop 0}if 3 1 roll
        exch sub dup 0 lt{pop 0}if setrgbcolor
}__NXbdef
/currentcmykcolor{currentrgbcolor 3{1.0 exch sub 3 1 roll}repeat 0}__NXbdef
/flushgraphics{}def
/setwindowtype{pop pop}def
/currentwindowtype{pop 0}def
/setalpha{pop}def
/currentalpha{1.0}def
/hidecursor{}def
/obscurecursor{}def
/revealcursor{}def
/setcursor{4 {pop}repeat}bind def
/showcursor{}def
/NextStepEncoding where not{
/NextStepEncoding StandardEncoding 256 array copy def
0 [129/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/Ccedilla/Egrave
/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex/Idieresis
/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis/Ugrave/Uacute
/Ucircumflex/Udieresis/Yacute/Thorn/mu/multiply/divide/copyright
176/registered 181/brokenbar 190/logicalnot 192/onesuperior 201/twosuperior
204/threesuperior 209/plusminus/onequarter/onehalf/threequarters/agrave
/aacute/acircumflex/atilde/adieresis/aring/ccedilla/egrave/eacute
/ecircumflex/edieresis/igrave 226/iacute 228/icircumflex/idieresis/eth
/ntilde 236/ograve/oacute/ocircumflex/otilde/odieresis 242/ugrave/uacute
/ucircumflex 246/udieresis/yacute 252/thorn/ydieresis]
{dup type /nametype eq
 {NextStepEncoding 2 index 2 index put pop 1 add}{exch pop}ifelse
}forall pop
/NextStepEncoding NextStepEncoding readonly def   
/_NXfstr 128 string dup 0 (_NX) putinterval def   
/findfont{
 % Because we can never let NextStepEncoding get into
 % SharedFontDirectory, we cannot reencode a font to NextStepEncoding
 % if we are in shared mode.  So if currentshared is true,
 % we call the normal findfont and return that
 /currentshared where {pop currentshared} {false} ifelse
 {//findfont exec}
 {dup _NXfstr 3 125 getinterval cvs length 3 add _NXfstr 0 3 -1 roll
  getinterval cvn exch FontDirectory 2 index known 
  {pop FontDirectory exch get}
  {//findfont exec dup /Encoding get StandardEncoding eq
   {    dup length dict exch
        {1 index /FID ne {2 index 3 1 roll put}{pop pop}ifelse}forall
         dup /Encoding NextStepEncoding put definefont
        }{exch pop} ifelse
   }ifelse
 }ifelse
}bind def
}{pop}ifelse
/_NXProcArray 5 array __NXdef
/_NXChannels 0 __NXdef
/_NXTotalBytes 0 __NXdef
/_NXDoImageOp{
        1 index{dup}{1}ifelse /_NXChannels exch store
        _NXChannels 2 add 2 roll _NXProcArray 0 _NXChannels getinterval astore pop
        5 index 4 index mul 2 index{1 sub 8 idiv 1 add mul}{mul 1 sub 8 idiv 1 add}ifelse
        4 index mul /_NXTotalBytes exch store pop exch pop
        gsave matrix invertmatrix concat 0.5 setgray 0 0 4 2 roll rectfill grestore
        {       0 1 _NXChannels 1 sub{
                        _NXProcArray exch get exec
                        length _NXTotalBytes exch sub /_NXTotalBytes exch store}for
                _NXTotalBytes 0 le{exit}if
        }loop /_NXProcArray 5 array def
}__NXbdef
/colorimage{_NXDoImageOp}__NXbdef
/alphaimage{1 add _NXDoImageOp}def
%%EndDocument

gsave
 /__NXbasematrix matrix currentmatrix def
grestore
%%EndProlog
%%BeginSetup
/TopDrawDict 200 dict def
/xyshow {
    mark exch aload length -2 2 {
        2 roll
    } for counttomark dup 2 add -1 roll pop 1 add -1 roll gsave {
        pop pop grestore rmoveto gsave
    } exch kshow grestore rmoveto
} bind def /currentalpha {
    1
} def /setalpha {
    pop
} bind def
TopDrawDict begin /prt_stack {
    (***Top of Stack\012) print pstack (---Bottom of Stack\012) print flush
} def /prt_top {
    (top item of stack) == dup == flush
} def /prtmat matrix def /prt_ctm {
    (current transformation matrix: ) print prtmat currentmatrix == flush
} def /tmmat matrix def /obmat matrix def /strmat matrix def /pgmat matrix def /idmat matrix def /sc1mt matrix def /sc2mt matrix def /sc3mt matrix def /sc4mt matrix def /sc5mt matrix def /sc6mt matrix def /sc7mt matrix def /inmat matrix def /ctmmt matrix def /octmmt matrix def /clpmt matrix def /weglet_mat matrix def /crlinw 1 def crlinw setlinewidth /crlinjn 0 def crlinjn setlinejoin /crlincp 0 def crlincp setlinecap /crmtrlmt currentmiterlimit def /crstrpat 0 def /crfilpat 0 def /crflat currentflat def /dftflat currentflat def /strinclr false def /crlingry 0 def /crlinred 0 def /crlingrn 0 def /crlinblu 0 def /crlinalph 1 def /filinclr false def /crfilgry 0 def /crfilred 0 def /crfilgrn 0 def /crfilblu 0 def /crfilalph 1 def /crfilstyl 0 def /txtdraw true def /txtinclr false def /txtwpat false def /txtwittrans false def /crtxtgry 0 def /crtxtred 0 def /crtxtgrn 0 def /crtxtblu 0 def /crtxtalph 1 def /crtxtpat 0 def /txlndraw true def /txlninclr false def /txlnwpat false def /txlnwittrans false def /crtxlngry 0 def /crtxlnred 0 def /crtxlngrn 0 def /crtxlnblu 0 def /crtxlnalph 1 def /crtxlnpat 0 def /hilittxt false def /strdsh [2 2] def /dshpatoff 0 def /usedash false def /filwpat false def /strwpat false def /filwittrans false def /strwittrans false def /crfrtarw false def /crendarw false def /rsave 0 def /esave 0 def /sslsave 0 def /lsave 0 def /clpsave 0 def /pathsave 0 def /tpatstr 10 string def /ptdist {
    sub dup mul 3 1 roll sub dup mul add sqrt
} bind def /dodrawctm {
    octmmt currentmatrix pop idmat obmat concatmatrix ctmmt currentmatrix sc1mt concatmatrix setmatrix
} bind def /undrawctm {
    obmat inmat invertmatrix ctmmt currentmatrix sc1mt concatmatrix setmatrix
} bind def /undrawmat {
    obmat aload pop 7 -1 roll astore
} bind def /unpagectm {
    octmmt setmatrix
} bind def /unpagemat {
    pgmat aload pop 7 -1 roll astore
} bind def /drtan {
    gsave 1 setalpha 0 setlinewidth 0.333333 setgray moveto lineto stroke grestore
} bind def /drdgrdln {
    gsave 1 setalpha 0 setlinewidth [1 2] 0 setdash setgray moveto lineto stroke grestore
} bind def /drgrdln {
    gsave 1 setalpha 0 setlinewidth setgray moveto lineto stroke grestore
} bind def end
TopDrawDict begin /p1x 0 def /p1y 0 def /p2x 0 def /p2y 0 def /ssl {
    gsave dodrawctm crfrtarw crendarw or {
        /p1y 1 index def /p1x 2 index def /p2y 1 index 4 index add def /p2x 2 index 5 index add def newpath moveto rlineto
    } {
        newpath moveto rlineto
    } ifelse crlinalph setalpha crlinw setlinewidth crlincp setlinecap usedash {
        strdsh dshpatoff setdash
    } if strinclr {
        crlinred crlingrn crlinblu setrgbcolor
    } {
        crlingry setgray
    } ifelse aload pop strmat astore crfrtarw {
        currentlinewidth strmat p2x p2y p1x p1y arow
    } if crendarw {
        currentlinewidth strmat p1x p1y p2x p2y arow
    } if unpagectm concat strwpat {
        crstrpat findfont strwittrans {
            trpatstrk
        } {
            oppatstrk
        } ifelse
    } {
        stroke
    } ifelse grestore
} bind def end
TopDrawDict begin /elli {
    gsave dodrawctm translate scale newpath dup dup 0 360 arc closepath unpagectm {
        crfilalph setalpha filinclr {
            crfilred crfilgrn crfilblu setrgbcolor
        } {
            crfilgry setgray
        } ifelse gsave filwpat {
            crfilpat findfont filwittrans {
                trpatfil
            } {
                oppatfil
            } ifelse
        } {
            fill
        } ifelse grestore
    } if {
        crlinalph setalpha crlinw setlinewidth usedash {
            strdsh dshpatoff setdash
        } if strinclr {
            crlinred crlingrn crlinblu setrgbcolor
        } {
            crlingry setgray
        } ifelse concat strwpat {
            crstrpat findfont strwittrans {
                trpatstrk
            } {
                oppatstrk
            } ifelse
        } {
            stroke
        } ifelse
    } {
        pop
    } ifelse grestore
} bind def /estroke {
    gsave dodrawctm translate scale newpath dup dup 0 360 arc closepath crlinalph setalpha crlinw setlinewidth usedash {
        strdsh dshpatoff setdash
    } if strinclr {
        crlinred crlingrn crlinblu setrgbcolor
    } {
        crlingry setgray
    } ifelse unpagectm concat strwpat {
        crstrpat findfont strwittrans {
            trpatstrk
        } {
            oppatstrk
        } ifelse
    } {
        stroke
    } ifelse grestore
} bind def /efill {
    gsave dodrawctm translate scale newpath dup dup 0 360 arc closepath unpagectm crfilalph setalpha filinclr {
        crfilred crfilgrn crfilblu setrgbcolor
    } {
        crfilgry setgray
    } ifelse filwpat {
        crfilpat findfont filwittrans {
            trpatfil
        } {
            oppatfil
        } ifelse
    } {
        fill
    } ifelse grestore
} bind def /apstroke {
    gsave dodrawctm /pie exch def /radius exch def /yscale exch def /xscale exch def /yy exch def /xx exch def /angle2 exch def /angle1 exch def /closed exch def xx yy translate xscale yscale scale newpath pie {
        radius dup moveto
    } if radius dup dup angle1 angle2 arc closed pie or {
        closepath
    } if crlinalph setalpha closed not pie not and {
        crfrtarw {
            dup crlinw exch gsave newpath angle1 1 add cos radius mul radius add angle1 1 add sin radius mul radius add moveto angle1 cos radius mul radius add angle1 sin radius mul radius add lineto unpagectm {
                
            } {
                
            } {
                
            } {
                
            } pathforall arow grestore
        } if crendarw {
            dup crlinw exch gsave newpath angle2 1 sub cos radius mul radius add angle2 1 sub sin radius mul radius add moveto angle2 cos radius mul radius add angle2 sin radius mul radius add lineto unpagectm {
                
            } {
                
            } {
                
            } {
                
            } pathforall arow grestore
        } if
    } if crlincp setlinecap crlinalph setalpha crlinw setlinewidth usedash {
        strdsh dshpatoff setdash
    } if strinclr {
        crlinred crlingrn crlinblu setrgbcolor
    } {
        crlingry setgray
    } ifelse unpagectm concat strwpat {
        crstrpat findfont strwittrans {
            trpatstrk
        } {
            oppatstrk
        } ifelse
    } {
        stroke
    } ifelse grestore
} bind def /apfill {
    gsave dodrawctm /pie exch def /radius exch def /yscale exch def /xscale exch def /yy exch def /xx exch def xx yy translate xscale yscale scale newpath pie {
        radius dup moveto
    } if radius dup dup 5 -2 roll arc pie or {
        closepath
    } if 1 xscale div 1 yscale div scale crfilalph setalpha filinclr {
        crfilred crfilgrn crfilblu setrgbcolor
    } {
        crfilgry setgray
    } ifelse filwpat {
        crfilpat findfont filwittrans {
            trpatfil
        } {
            oppatfil
        } ifelse
    } {
        fill
    } ifelse grestore
} bind def /mkepath {
    dodrawctm /pie exch def /radius exch def /yscale exch def /xscale exch def /yy exch def /xx exch def /angle2 exch def /angle1 exch def /closed exch def xx yy translate xscale yscale scale newpath pie {
        radius dup moveto
    } if radius dup dup angle1 angle2 arc closed pie or {
        closepath
    } if unpagectm
} bind def end
TopDrawDict begin /closedspl false def /nspans 0 def /sstrt {
    gsave dodrawctm /closedspl exch def /nspans 0 def newpath
} bind def /sstrtpath {
    dodrawctm /closedspl exch def /nspans 0 def newpath
} bind def /sadd {
    nspans 0 eq {
        moveto
    } {
        pop pop
    } ifelse curveto /nspans nspans 1 add def
} bind def /splstroke {
    nspans 0 gt {
        unpagectm concat closedspl {
            closepath
        } if crlincp setlinecap crlinjn setlinejoin crlinalph setalpha crlinw setlinewidth crmtrlmt setmiterlimit usedash {
            strdsh dshpatoff setdash
        } if strinclr {
            crlinred crlingrn crlinblu setrgbcolor
        } {
            crlingry setgray
        } ifelse strwpat {
            flattenpath crstrpat findfont strwittrans {
                trpatstrk
            } {
                oppatstrk
            } ifelse
        } {
            stroke
        } ifelse
    } {
        pop
    } ifelse grestore
} bind def /splfill {
    nspans 0 gt {
        closedspl {
            closepath
        } if crfilalph setalpha filinclr {
            crfilred crfilgrn crfilblu setrgbcolor
        } {
            crfilgry setgray
        } ifelse filwpat {
            flattenpath crfilpat findfont crfilstyl 0 eq {
                filwittrans {
                    trpateofil
                } {
                    oppateofil
                } ifelse
            } {
                filwittrans {
                    trpatfil
                } {
                    oppatfil
                } ifelse
            } ifelse
        } {
            crfilstyl 0 eq {
                eofill
            } {
                fill
            } ifelse
        } ifelse
    } if grestore
} bind def /mksplpath {
    nspans 0 gt {
        closedspl {
            closepath
        } if
    } if
} bind def end
%%EndSetup
gsave
0 0 326 156 rectclip
-90 -403 translate
90 403 326 156 rectclip
gsave
TopDrawDict begin
/invpats true def
/crlincp 0 def
/crlinjn 0 def
/crmtrlmt 10 def
/crlinw 2.1 def
/crlinalph 1 def
/crlinred 0 def /crlingrn 0 def /crlinblu 0 def /strinclr true def
/crfilalph 1 def
/crfilred 1 def /crfilgrn 1 def /crfilblu 1 def /filinclr true def
/filwpat false def
TopDrawDict /piddict known TopDrawDict /ipiddict known or {
    1 getpat /crfilpat exch def
} if
/filwittrans false def
/strwpat false def
TopDrawDict /piddict known TopDrawDict /ipiddict known or {
    1 getpat /crstrpat exch def
} if
/strwittrans false def
/usedash false def
/strdsh [2 2] def /dshpatoff 0 def
/crendarw false def
/crfrtarw false def
/txtdraw false def
/crtxtalph 1 def
/crtxtred 0 def /crtxtgrn 0 def /crtxtblu 0 def /txtinclr true def
/txtwpat false def
/txtwittrans false def
/txlndraw false def
/crtxlnalph 1 def
/crtxlnred 0 def /crtxlngrn 0 def /crtxlnblu 0 def /txlninclr true def
/txlnwittrans false def
/txlnwpat false def
1 0 0 1 10 90.5 sc5mt astore 225 54 171 351 1 0 0 1 10 90.5 sc6mt astore ssl
1 0 0 1 10 90.5 sc5mt astore 126 0 171 351 1 0 0 1 10 90.5 sc6mt astore ssl
/esave save def [1 0 0 1 10 90.5] false 90 180 90 460 1.486238 -1 54.5 false [1 0 0 1 10 90.5] apstroke esave restore
1 0 0 1 190 99.5 sc6mt astore 9 -1 5 153 405 1 0 0 0.7 199 212 sc5mt astore estroke
1 0 0 1 91 108.5 sc6mt astore 9 -1 5 153 405 1 0 0 0.7 109 212 sc5mt astore estroke
1 0 0 1 19 90.5 sc6mt astore 9 -1 5 153 405 1 0 0 0.7 19 212 sc5mt astore estroke
/esave save def [-1 -8.742278e-08 8.742278e-08 -1 631 856] false 94.939232 180.000015 288 316 1.011236 1 44.5 false [-2.399999 -2.098146e-07 1.100155e-07 -1.258431 1097.199707 949.16449] apstroke esave restore
1 0 0 1 10 90.5 sc5mt astore 297 0 90 405 1 0 0 1 10 90.5 sc6mt astore ssl
/crfilred 0.8333 def /crfilgrn 0.8333 def /crfilblu 0.8333 def /filinclr true def
9 1 -1 135 558 1 0 0 1 19 -53.5 sc5mt astore efill
1 0 0 1 19 -53.5 sc6mt astore 9 1 -1 135 558 1 0 0 1 19 -53.5 sc5mt astore estroke
9 1 -1 135 558 1 0 0 1 109 -53.5 sc5mt astore efill
1 0 0 1 100 -44.5 sc6mt astore 9 1 -1 135 558 1 0 0 1 109 -53.5 sc5mt astore estroke
9 1 -1 135 558 1 0 0 1 199 -53.5 sc5mt astore efill
1 0 0 1 181 -35.5 sc6mt astore 9 1 -1 135 558 1 0 0 1 199 -53.5 sc5mt astore estroke
9 1 -1 135 558 1 0 0 1 262 -53.5 sc5mt astore efill
1 0 0 1 235 -26.5 sc6mt astore 9 1 -1 135 558 1 0 0 1 262 -53.5 sc5mt astore estroke
9 1 -1 135 558 1 0 0 1 37 -107.5 sc5mt astore efill
1 0 0 1 1 -71.5 sc6mt astore 9 1 -1 135 558 1 0 0 1 37 -107.5 sc5mt astore estroke
9 1 -1 135 558 1 0 0 1 163 -107.5 sc5mt astore efill
1 0 0 1 118 -62.5 sc6mt astore 9 1 -1 135 558 1 0 0 1 163 -107.5 sc5mt astore estroke
9 1 -1 135 558 1 0 0 1 -44 -53.5 sc5mt astore efill
1 0 0 1 -80 -17.5 sc6mt astore 9 1 -1 135 558 1 0 0 1 -44 -53.5 sc5mt astore estroke
/esave save def [1 0 0 1 10 90.5] false 90 180 90 478 1.766871 -1 81.5 false [1.0625 0 0 1 4.375 90.5] apstroke esave restore
/esave save def [-1 0 0 1 505 99.5] false 90 180 90 478 1.766871 -1 81.5 false [-1.0625 0 0 1 501.625 90.5] apstroke esave restore
/crlinw 1 def
/crfilred 0 def /crfilgrn 0 def /crfilblu 0 def /filinclr true def
false [4.371138e-08 1 1 -4.371138e-08 -158.748779 369.744873] sstrt
systemdict
begin
116.5 287 135 306.5 setbbox
129 287 moveto
129 287 126 297 126 297 curveto
126 297 123.5 287.5 123.5 287.5 curveto
end
/nspans 2 def splfill
false [4.371138e-08 1 1 -4.371138e-08 -158.748779 369.744873] sstrt
systemdict
begin
116.5 287 135 306.5 setbbox
129 287 moveto
129 287 126 297 126 297 curveto
126 297 123.5 287.5 123.5 287.5 curveto
end
/nspans 2 def [4.371138e-08 1 1 -4.371138e-08 -158.748779 369.744873] splstroke
false [1 0 0 1 135.5 237] sstrt
systemdict
begin
116.5 287 135 306.5 setbbox
129 287 moveto
129 287 126 297 126 297 curveto
126 297 123.5 287.5 123.5 287.5 curveto
end
/nspans 2 def splfill
false [1 0 0 1 135.5 237] sstrt
systemdict
begin
116.5 287 135 306.5 setbbox
129 287 moveto
129 287 126 297 126 297 curveto
126 297 123.5 287.5 123.5 287.5 curveto
end
/nspans 2 def [1 0 0 1 126.5 246] splstroke
false [1 0 0 1 45.5 237] sstrt
systemdict
begin
116.5 287 135 306.5 setbbox
129 287 moveto
129 287 126 297 126 297 curveto
126 297 123.5 287.5 123.5 287.5 curveto
end
/nspans 2 def splfill
false [1 0 0 1 45.5 237] sstrt
systemdict
begin
116.5 287 135 306.5 setbbox
129 287 moveto
129 287 126 297 126 297 curveto
126 297 123.5 287.5 123.5 287.5 curveto
end
/nspans 2 def [1 0 0 1 27.5 255] splstroke
false [1 0 0 1 225.5 235] sstrt
systemdict
begin
116.5 287 135 306.5 setbbox
129 287 moveto
129 287 126 297 126 297 curveto
126 297 123.5 287.5 123.5 287.5 curveto
end
/nspans 2 def splfill
false [1 0 0 1 225.5 235] sstrt
systemdict
begin
116.5 287 135 306.5 setbbox
129 287 moveto
129 287 126 297 126 297 curveto
126 297 123.5 287.5 123.5 287.5 curveto
end
/nspans 2 def [1 0 0 1 198.5 262] splstroke
false [4.371139e-08 1 1 -4.371139e-08 -40.743988 279.749634] sstrt
systemdict
begin
116.5 287 135 306.5 setbbox
129 287 moveto
129 287 126 297 126 297 curveto
126 297 123.5 287.5 123.5 287.5 curveto
end
/nspans 2 def splfill
false [4.371139e-08 1 1 -4.371139e-08 -40.743988 279.749634] sstrt
systemdict
begin
116.5 287 135 306.5 setbbox
129 287 moveto
129 287 126 297 126 297 curveto
126 297 123.5 287.5 123.5 287.5 curveto
end
/nspans 2 def [4.371139e-08 1 1 -4.371139e-08 -4.743988 243.749619] splstroke
false [0.432533 -0.901618 0.901618 0.432533 51.203159 440.764191] sstrt
systemdict
begin
116.5 287 135 306.5 setbbox
129 287 moveto
129 287 126 297 126 297 curveto
126 297 123.5 287.5 123.5 287.5 curveto
end
/nspans 2 def splfill
false [0.432533 -0.901618 0.901618 0.432533 51.203159 440.764191] sstrt
systemdict
begin
116.5 287 135 306.5 setbbox
129 287 moveto
129 287 126 297 126 297 curveto
126 297 123.5 287.5 123.5 287.5 curveto
end
/nspans 2 def [0.432533 -0.901618 0.901618 0.432533 72.311996 500.800995] splstroke
false [0.288375 -0.957518 0.957518 0.288375 -14.252482 507.18103] sstrt
systemdict
begin
116.5 287 135 306.5 setbbox
129 287 moveto
129 287 126 297 126 297 curveto
126 297 123.5 287.5 123.5 287.5 curveto
end
/nspans 2 def splfill
false [0.288375 -0.957518 0.957518 0.288375 -14.252482 507.18103] sstrt
systemdict
begin
116.5 287 135 306.5 setbbox
129 287 moveto
129 287 126 297 126 297 curveto
126 297 123.5 287.5 123.5 287.5 curveto
end
/nspans 2 def [0.288375 -0.957518 0.957518 0.288375 21.881203 574.459229] splstroke
false [4.371138e-08 1 1 -4.371138e-08 -79.248779 369.744873] sstrt
systemdict
begin
116.5 287 135 306.5 setbbox
129 287 moveto
129 287 126 297 126 297 curveto
126 297 123.5 287.5 123.5 287.5 curveto
end
/nspans 2 def splfill
false [4.371138e-08 1 1 -4.371138e-08 -79.248779 369.744873] sstrt
systemdict
begin
116.5 287 135 306.5 setbbox
129 287 moveto
129 287 126 297 126 297 curveto
126 297 123.5 287.5 123.5 287.5 curveto
end
/nspans 2 def [4.371138e-08 1 1 -4.371138e-08 -88.248779 378.744873] splstroke
false [4.371138e-08 1 1 -4.371138e-08 8.251222 369.244873] sstrt
systemdict
begin
116.5 287 135 306.5 setbbox
129 287 moveto
129 287 126 297 126 297 curveto
126 297 123.5 287.5 123.5 287.5 curveto
end
/nspans 2 def splfill
false [4.371138e-08 1 1 -4.371138e-08 8.251222 369.244873] sstrt
systemdict
begin
116.5 287 135 306.5 setbbox
129 287 moveto
129 287 126 297 126 297 curveto
126 297 123.5 287.5 123.5 287.5 curveto
end
/nspans 2 def [4.371138e-08 1 1 -4.371138e-08 -9.748778 387.244873] splstroke
false [4.371138e-08 1 1 -4.371138e-08 82.751221 369.744873] sstrt
systemdict
begin
116.5 287 135 306.5 setbbox
129 287 moveto
129 287 126 297 126 297 curveto
126 297 123.5 287.5 123.5 287.5 curveto
end
/nspans 2 def splfill
false [4.371138e-08 1 1 -4.371138e-08 82.751221 369.744873] sstrt
systemdict
begin
116.5 287 135 306.5 setbbox
129 287 moveto
129 287 126 297 126 297 curveto
126 297 123.5 287.5 123.5 287.5 curveto
end
/nspans 2 def [4.371138e-08 1 1 -4.371138e-08 55.751221 396.744873] splstroke
false [4.371138e-08 1 1 -4.371138e-08 -40.248779 315.744873] sstrt
systemdict
begin
116.5 287 135 306.5 setbbox
129 287 moveto
129 287 126 297 126 297 curveto
126 297 123.5 287.5 123.5 287.5 curveto
end
/nspans 2 def splfill
false [4.371138e-08 1 1 -4.371138e-08 -40.248779 315.744873] sstrt
systemdict
begin
116.5 287 135 306.5 setbbox
129 287 moveto
129 287 126 297 126 297 curveto
126 297 123.5 287.5 123.5 287.5 curveto
end
/nspans 2 def [4.371138e-08 1 1 -4.371138e-08 -76.248779 351.744873] splstroke
false [-0.553793 -0.832654 0.832654 -0.553793 -39.245438 718.913879] sstrt
systemdict
begin
116.5 287 135 306.5 setbbox
129 287 moveto
129 287 126 297 126 297 curveto
126 297 123.5 287.5 123.5 287.5 curveto
end
/nspans 2 def splfill
false [-0.553793 -0.832654 0.832654 -0.553793 -39.245438 718.913879] sstrt
systemdict
begin
116.5 287 135 306.5 setbbox
129 287 moveto
129 287 126 297 126 297 curveto
126 297 123.5 287.5 123.5 287.5 curveto
end
/nspans 2 def [-0.553793 -0.832654 0.832654 -0.553793 48.100754 736.482117] splstroke
end
grestore
grestore
%%Trailer

%%EndDocument
 GE /Times-Bold SF
22409 20137 MT
(Figure 4-3:)SH
/Times-Roman SF
28182 XM
(A left-right HMM with seven states.)SH
10800 22088 MT
(sequences is straightforward.  Since the reestimation)
114 W( formulas in \0504.19\051 are written in terms of fre-)115 W
10800 23827 MT
(quencies of)
41 W( certain events, the frequencies from multiple training sequences can be added together to)40 W
10800 25566 MT
(get the total frequency from all sequences.  So given some number of training sequences)54 W
/Times-Italic SF
50831 XM
(K)SH
/Times-Roman SF
(, the only)55 W
10800 27305 MT
(change to the reestimation formulas is an additional sum over)SH
/Times-Italic SF
38172 XM
(k)SH
/Times-Roman SF
38935 XM
(in the numerators and denominators.)SH
13300 30290 MT
(When modeling)
105 W( restricted continuous speech tasks, that is tasks defined by fixed grammars, a)104 W
10800 32029 MT
(large left-right model is constructed from phoneme and word models.  Phoneme)
SH( models are initialized)1 W
10800 33768 MT
(with parameters derived from a)
208 W( large, task-independent database, and concatenated to form task-)207 W
10800 35507 MT
(specific word models which may)
157 W( contain parallel paths to represent multiple pronunciations.  The)158 W
10800 37246 MT
(word models are then concatenated)
11 W( to form a sentence model or a finite state grammar network which)10 W
10800 38985 MT
(represents the)
195 W( recognition task, as in Figure 4-4.  Model parameters in the resulting network are)196 W
10800 40724 MT
(updated using task-specific training sentences to refine the task-independent parameters.)SH
13300 43709 MT
(During recognition, the Viterbi algorithm is used to match the)
130 W( observation sequence with the)129 W
10800 45448 MT
(grammar network.  The)
30 W( states' output probabilities and transition probabilities are accumulated in the)31 W
10800 47187 MT
(Viterbi variable)188 W
/Symbol SF
18384 XM
(d)SH
/Times-Roman SF
19149 XM
([)SH
/Times-Italic SF
(i)SH
/Times-Roman SF
(] as an utterance is processed, along with state indices in the)188 W
/Symbol SF
48804 XM
(y)SH
/Times-Roman SF
50022 XM
(array. After)650 W
8 /Times-Italic AF
18927 47532 MT
(t)SH
11 /Times-Roman AF
10800 48926 MT
(completing calculation of)
233 W( these variables, the most likely state sequence is decoded.  The word)234 W
10800 50665 MT
(models which are traversed during the backtracking step is the hypothesized word sequence.)SH
539 1000 0 15300 68084 GB 
%%BeginDocument: /usr0/rozzi/Documentation/PhDThesis/Chapter4/FSG.eps
%!PS-Adobe-2.0 EPSF-2.0
%%Title: 
%%Creator: TopDraw
%%CreationDate: Fri Mar  1 17:45:37 1991
%%For: rozzi
%%DocumentFonts: (atend)
%%%Pages: 0 1
%%BoundingBox: 0 0 667 301
%%EndComments

%%BeginDocument: /usr/lib/NextStep/printPackage.ps
%!PS-Adobe-2.0
%%Title: Printing Package
%%EndComments
%Version: 2.0
%Copyright: 1988, NeXT, Inc.

/__NXdef{1 index where{pop pop pop}{def}ifelse}bind def
/__NXbdef{1 index where{pop pop pop}{bind def}ifelse}bind def
/UserObjects 10 array __NXdef
/defineuserobject{
        exch dup 1 add dup UserObjects length gt{
                array dup 0 UserObjects putinterval
                /UserObjects exch def
        }{pop}ifelse UserObjects exch 3 -1 roll put
}__NXbdef
/undefineuserobject{UserObjects exch null put}__NXbdef
/execuserobject{UserObjects exch get exec}__NXbdef
/__NXRectPath{4 2 roll moveto 1 index 0 rlineto
0 exch rlineto neg 0 rlineto closepath}__NXbdef
/__NXProcessRectArgs{
        1 index type /arraytype eq{
                exch 0 4 2 index length 1 sub{
                        dup 3 add 1 exch{1 index exch get exch}for
                        5 1 roll 5 index exec
                }for pop pop
        }{exec}ifelse
}__NXbdef
/rectfill{gsave newpath {__NXRectPath fill} __NXProcessRectArgs grestore}__NXbdef
/rectclip{newpath {__NXRectPath} __NXProcessRectArgs clip newpath}__NXbdef
/rectstroke{
        gsave newpath dup type /arraytype eq{dup length 6 eq}{false}ifelse{
                {gsave __NXRectPath null concat stroke grestore}
                dup length array cvx copy dup 2 4 -1 roll put __NXProcessRectArgs
        }{{__NXRectPath stroke} __NXProcessRectArgs}ifelse grestore
}__NXbdef
/xyshow{
        0 1 3 index length 1 sub{
                currentpoint 4 index 3 index 1 getinterval show
                3 index 3 index 2 mul 1 add get add exch
                3 index 3 index 2 mul get add exch moveto pop
        }for pop pop
}__NXbdef
/xshow{
        0 1 3 index length 1 sub{
                currentpoint 4 index 3 index 1 getinterval show
                exch 3 index 3 index get add exch moveto pop
        }for pop pop
}__NXbdef
/yshow{
        0 1 3 index length 1 sub{
                currentpoint 4 index 3 index 1 getinterval show
                3 index 3 index get add moveto pop
        }for pop pop
}__NXbdef
/arct{arcto pop pop pop pop}__NXbdef
/setbbox{pop pop pop pop}__NXbdef
/ucache{}__NXbdef
/ucachestatus{mark 0 0 0 0 0}__NXbdef
/setucacheparams{cleartomark}__NXbdef
/uappend{systemdict begin cvx exec end}__NXbdef
/ueofill{gsave newpath uappend eofill grestore}__NXbdef
/ufill{gsave newpath uappend fill grestore}__NXbdef
/ustroke{
        gsave newpath dup length 6 eq
        {exch uappend concat}{uappend}ifelse
        stroke grestore
}__NXbdef
/__NXustrokepathMatrix dup where {pop pop}{matrix def}ifelse
/ustrokepath{
        newpath dup length 6 eq{
                exch uappend __NXustrokepathMatrix currentmatrix exch concat
                strokepath setmatrix
        }{uappend strokepath}ifelse
} __NXbdef
/upath{
        [exch {/ucache cvx}if pathbbox /setbbox cvx
         {/moveto cvx}{/lineto cvx}{/curveto cvx}{/closepath cvx}pathforall]cvx
} __NXbdef
/setstrokeadjust{pop}__NXbdef
/currentstrokeadjust{false}__NXbdef
/selectfont{exch findfont exch
dup type /arraytype eq {makefont}{scalefont}ifelse setfont}__NXbdef
/_NXCombineArrays{
        counttomark dup 2 add index dup length 3 -1 roll {
                2 index length sub dup 4 1 roll 1 index exch 4 -1 roll putinterval exch
        }repeat pop pop pop
}__NXbdef
/setcmykcolor{
        1.0 exch sub dup dup 6 -1 roll
        sub dup 0 lt{pop 0}if 5 1 roll
        4 -1 roll sub dup 0 lt{pop 0}if 3 1 roll
        exch sub dup 0 lt{pop 0}if setrgbcolor
}__NXbdef
/currentcmykcolor{currentrgbcolor 3{1.0 exch sub 3 1 roll}repeat 0}__NXbdef
/flushgraphics{}def
/setwindowtype{pop pop}def
/currentwindowtype{pop 0}def
/setalpha{pop}def
/currentalpha{1.0}def
/hidecursor{}def
/obscurecursor{}def
/revealcursor{}def
/setcursor{4 {pop}repeat}bind def
/showcursor{}def
/NextStepEncoding where not{
/NextStepEncoding StandardEncoding 256 array copy def
0 [129/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/Ccedilla/Egrave
/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex/Idieresis
/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis/Ugrave/Uacute
/Ucircumflex/Udieresis/Yacute/Thorn/mu/multiply/divide/copyright
176/registered 181/brokenbar 190/logicalnot 192/onesuperior 201/twosuperior
204/threesuperior 209/plusminus/onequarter/onehalf/threequarters/agrave
/aacute/acircumflex/atilde/adieresis/aring/ccedilla/egrave/eacute
/ecircumflex/edieresis/igrave 226/iacute 228/icircumflex/idieresis/eth
/ntilde 236/ograve/oacute/ocircumflex/otilde/odieresis 242/ugrave/uacute
/ucircumflex 246/udieresis/yacute 252/thorn/ydieresis]
{dup type /nametype eq
 {NextStepEncoding 2 index 2 index put pop 1 add}{exch pop}ifelse
}forall pop
/NextStepEncoding NextStepEncoding readonly def   
/_NXfstr 128 string dup 0 (_NX) putinterval def   
/findfont{
 % Because we can never let NextStepEncoding get into
 % SharedFontDirectory, we cannot reencode a font to NextStepEncoding
 % if we are in shared mode.  So if currentshared is true,
 % we call the normal findfont and return that
 /currentshared where {pop currentshared} {false} ifelse
 {//findfont exec}
 {dup _NXfstr 3 125 getinterval cvs length 3 add _NXfstr 0 3 -1 roll
  getinterval cvn exch FontDirectory 2 index known 
  {pop FontDirectory exch get}
  {//findfont exec dup /Encoding get StandardEncoding eq
   {    dup length dict exch
        {1 index /FID ne {2 index 3 1 roll put}{pop pop}ifelse}forall
         dup /Encoding NextStepEncoding put definefont
        }{exch pop} ifelse
   }ifelse
 }ifelse
}bind def
}{pop}ifelse
/_NXProcArray 5 array __NXdef
/_NXChannels 0 __NXdef
/_NXTotalBytes 0 __NXdef
/_NXDoImageOp{
        1 index{dup}{1}ifelse /_NXChannels exch store
        _NXChannels 2 add 2 roll _NXProcArray 0 _NXChannels getinterval astore pop
        5 index 4 index mul 2 index{1 sub 8 idiv 1 add mul}{mul 1 sub 8 idiv 1 add}ifelse
        4 index mul /_NXTotalBytes exch store pop exch pop
        gsave matrix invertmatrix concat 0.5 setgray 0 0 4 2 roll rectfill grestore
        {       0 1 _NXChannels 1 sub{
                        _NXProcArray exch get exec
                        length _NXTotalBytes exch sub /_NXTotalBytes exch store}for
                _NXTotalBytes 0 le{exit}if
        }loop /_NXProcArray 5 array def
}__NXbdef
/colorimage{_NXDoImageOp}__NXbdef
/alphaimage{1 add _NXDoImageOp}def
%%EndDocument

gsave
 /__NXbasematrix matrix currentmatrix def
grestore
%%EndProlog
%%BeginSetup
/TopDrawDict 200 dict def
/xyshow {
    mark exch aload length -2 2 {
        2 roll
    } for counttomark dup 2 add -1 roll pop 1 add -1 roll gsave {
        pop pop grestore rmoveto gsave
    } exch kshow grestore rmoveto
} bind def /currentalpha {
    1
} def /setalpha {
    pop
} bind def
TopDrawDict begin /prt_stack {
    (***Top of Stack\012) print pstack (---Bottom of Stack\012) print flush
} def /prt_top {
    (top item of stack) == dup == flush
} def /prtmat matrix def /prt_ctm {
    (current transformation matrix: ) print prtmat currentmatrix == flush
} def /tmmat matrix def /obmat matrix def /strmat matrix def /pgmat matrix def /idmat matrix def /sc1mt matrix def /sc2mt matrix def /sc3mt matrix def /sc4mt matrix def /sc5mt matrix def /sc6mt matrix def /sc7mt matrix def /inmat matrix def /ctmmt matrix def /octmmt matrix def /clpmt matrix def /weglet_mat matrix def /crlinw 1 def crlinw setlinewidth /crlinjn 0 def crlinjn setlinejoin /crlincp 0 def crlincp setlinecap /crmtrlmt currentmiterlimit def /crstrpat 0 def /crfilpat 0 def /crflat currentflat def /dftflat currentflat def /strinclr false def /crlingry 0 def /crlinred 0 def /crlingrn 0 def /crlinblu 0 def /crlinalph 1 def /filinclr false def /crfilgry 0 def /crfilred 0 def /crfilgrn 0 def /crfilblu 0 def /crfilalph 1 def /crfilstyl 0 def /txtdraw true def /txtinclr false def /txtwpat false def /txtwittrans false def /crtxtgry 0 def /crtxtred 0 def /crtxtgrn 0 def /crtxtblu 0 def /crtxtalph 1 def /crtxtpat 0 def /txlndraw true def /txlninclr false def /txlnwpat false def /txlnwittrans false def /crtxlngry 0 def /crtxlnred 0 def /crtxlngrn 0 def /crtxlnblu 0 def /crtxlnalph 1 def /crtxlnpat 0 def /hilittxt false def /strdsh [2 2] def /dshpatoff 0 def /usedash false def /filwpat false def /strwpat false def /filwittrans false def /strwittrans false def /crfrtarw false def /crendarw false def /rsave 0 def /esave 0 def /sslsave 0 def /lsave 0 def /clpsave 0 def /pathsave 0 def /tpatstr 10 string def /ptdist {
    sub dup mul 3 1 roll sub dup mul add sqrt
} bind def /dodrawctm {
    octmmt currentmatrix pop idmat obmat concatmatrix ctmmt currentmatrix sc1mt concatmatrix setmatrix
} bind def /undrawctm {
    obmat inmat invertmatrix ctmmt currentmatrix sc1mt concatmatrix setmatrix
} bind def /undrawmat {
    obmat aload pop 7 -1 roll astore
} bind def /unpagectm {
    octmmt setmatrix
} bind def /unpagemat {
    pgmat aload pop 7 -1 roll astore
} bind def /drtan {
    gsave 1 setalpha 0 setlinewidth 0.333333 setgray moveto lineto stroke grestore
} bind def /drdgrdln {
    gsave 1 setalpha 0 setlinewidth [1 2] 0 setdash setgray moveto lineto stroke grestore
} bind def /drgrdln {
    gsave 1 setalpha 0 setlinewidth setgray moveto lineto stroke grestore
} bind def end
TopDrawDict begin /p1x 0 def /p1y 0 def /p2x 0 def /p2y 0 def /ssl {
    gsave dodrawctm crfrtarw crendarw or {
        /p1y 1 index def /p1x 2 index def /p2y 1 index 4 index add def /p2x 2 index 5 index add def newpath moveto rlineto
    } {
        newpath moveto rlineto
    } ifelse crlinalph setalpha crlinw setlinewidth crlincp setlinecap usedash {
        strdsh dshpatoff setdash
    } if strinclr {
        crlinred crlingrn crlinblu setrgbcolor
    } {
        crlingry setgray
    } ifelse aload pop strmat astore crfrtarw {
        currentlinewidth strmat p2x p2y p1x p1y arow
    } if crendarw {
        currentlinewidth strmat p1x p1y p2x p2y arow
    } if unpagectm concat strwpat {
        crstrpat findfont strwittrans {
            trpatstrk
        } {
            oppatstrk
        } ifelse
    } {
        stroke
    } ifelse grestore
} bind def end
TopDrawDict begin /elli {
    gsave dodrawctm translate scale newpath dup dup 0 360 arc closepath unpagectm {
        crfilalph setalpha filinclr {
            crfilred crfilgrn crfilblu setrgbcolor
        } {
            crfilgry setgray
        } ifelse gsave filwpat {
            crfilpat findfont filwittrans {
                trpatfil
            } {
                oppatfil
            } ifelse
        } {
            fill
        } ifelse grestore
    } if {
        crlinalph setalpha crlinw setlinewidth usedash {
            strdsh dshpatoff setdash
        } if strinclr {
            crlinred crlingrn crlinblu setrgbcolor
        } {
            crlingry setgray
        } ifelse concat strwpat {
            crstrpat findfont strwittrans {
                trpatstrk
            } {
                oppatstrk
            } ifelse
        } {
            stroke
        } ifelse
    } {
        pop
    } ifelse grestore
} bind def /estroke {
    gsave dodrawctm translate scale newpath dup dup 0 360 arc closepath crlinalph setalpha crlinw setlinewidth usedash {
        strdsh dshpatoff setdash
    } if strinclr {
        crlinred crlingrn crlinblu setrgbcolor
    } {
        crlingry setgray
    } ifelse unpagectm concat strwpat {
        crstrpat findfont strwittrans {
            trpatstrk
        } {
            oppatstrk
        } ifelse
    } {
        stroke
    } ifelse grestore
} bind def /efill {
    gsave dodrawctm translate scale newpath dup dup 0 360 arc closepath unpagectm crfilalph setalpha filinclr {
        crfilred crfilgrn crfilblu setrgbcolor
    } {
        crfilgry setgray
    } ifelse filwpat {
        crfilpat findfont filwittrans {
            trpatfil
        } {
            oppatfil
        } ifelse
    } {
        fill
    } ifelse grestore
} bind def /apstroke {
    gsave dodrawctm /pie exch def /radius exch def /yscale exch def /xscale exch def /yy exch def /xx exch def /angle2 exch def /angle1 exch def /closed exch def xx yy translate xscale yscale scale newpath pie {
        radius dup moveto
    } if radius dup dup angle1 angle2 arc closed pie or {
        closepath
    } if crlinalph setalpha closed not pie not and {
        crfrtarw {
            dup crlinw exch gsave newpath angle1 1 add cos radius mul radius add angle1 1 add sin radius mul radius add moveto angle1 cos radius mul radius add angle1 sin radius mul radius add lineto unpagectm {
                
            } {
                
            } {
                
            } {
                
            } pathforall arow grestore
        } if crendarw {
            dup crlinw exch gsave newpath angle2 1 sub cos radius mul radius add angle2 1 sub sin radius mul radius add moveto angle2 cos radius mul radius add angle2 sin radius mul radius add lineto unpagectm {
                
            } {
                
            } {
                
            } {
                
            } pathforall arow grestore
        } if
    } if crlincp setlinecap crlinalph setalpha crlinw setlinewidth usedash {
        strdsh dshpatoff setdash
    } if strinclr {
        crlinred crlingrn crlinblu setrgbcolor
    } {
        crlingry setgray
    } ifelse unpagectm concat strwpat {
        crstrpat findfont strwittrans {
            trpatstrk
        } {
            oppatstrk
        } ifelse
    } {
        stroke
    } ifelse grestore
} bind def /apfill {
    gsave dodrawctm /pie exch def /radius exch def /yscale exch def /xscale exch def /yy exch def /xx exch def xx yy translate xscale yscale scale newpath pie {
        radius dup moveto
    } if radius dup dup 5 -2 roll arc pie or {
        closepath
    } if 1 xscale div 1 yscale div scale crfilalph setalpha filinclr {
        crfilred crfilgrn crfilblu setrgbcolor
    } {
        crfilgry setgray
    } ifelse filwpat {
        crfilpat findfont filwittrans {
            trpatfil
        } {
            oppatfil
        } ifelse
    } {
        fill
    } ifelse grestore
} bind def /mkepath {
    dodrawctm /pie exch def /radius exch def /yscale exch def /xscale exch def /yy exch def /xx exch def /angle2 exch def /angle1 exch def /closed exch def xx yy translate xscale yscale scale newpath pie {
        radius dup moveto
    } if radius dup dup angle1 angle2 arc closed pie or {
        closepath
    } if unpagectm
} bind def end
TopDrawDict begin /closedspl false def /nspans 0 def /sstrt {
    gsave dodrawctm /closedspl exch def /nspans 0 def newpath
} bind def /sstrtpath {
    dodrawctm /closedspl exch def /nspans 0 def newpath
} bind def /sadd {
    nspans 0 eq {
        moveto
    } {
        pop pop
    } ifelse curveto /nspans nspans 1 add def
} bind def /splstroke {
    nspans 0 gt {
        unpagectm concat closedspl {
            closepath
        } if crlincp setlinecap crlinjn setlinejoin crlinalph setalpha crlinw setlinewidth crmtrlmt setmiterlimit usedash {
            strdsh dshpatoff setdash
        } if strinclr {
            crlinred crlingrn crlinblu setrgbcolor
        } {
            crlingry setgray
        } ifelse strwpat {
            flattenpath crstrpat findfont strwittrans {
                trpatstrk
            } {
                oppatstrk
            } ifelse
        } {
            stroke
        } ifelse
    } {
        pop
    } ifelse grestore
} bind def /splfill {
    nspans 0 gt {
        closedspl {
            closepath
        } if crfilalph setalpha filinclr {
            crfilred crfilgrn crfilblu setrgbcolor
        } {
            crfilgry setgray
        } ifelse filwpat {
            flattenpath crfilpat findfont crfilstyl 0 eq {
                filwittrans {
                    trpateofil
                } {
                    oppateofil
                } ifelse
            } {
                filwittrans {
                    trpatfil
                } {
                    oppatfil
                } ifelse
            } ifelse
        } {
            crfilstyl 0 eq {
                eofill
            } {
                fill
            } ifelse
        } ifelse
    } if grestore
} bind def /mksplpath {
    nspans 0 gt {
        closedspl {
            closepath
        } if
    } if
} bind def end
TopDrawDict begin /dotx {
    gsave txtdraw {
        concat selectfont txtinclr {
            crtxtred crtxtgrn crtxtblu setrgbcolor
        } {
            crtxtgry setgray
        } ifelse crtxtalph setalpha moveto xyshow
    } {
        pop pop pop pop pop pop pop
    } ifelse grestore
} bind def /txtlin {
    gsave txlndraw {
        concat txlninclr {
            crtxlnred crtxlngrn crtxlnblu setrgbcolor
        } {
            crtxlngry setgray
        } ifelse crtxlnalph setalpha setlinewidth 0 setlinecap newpath moveto 0 rlineto stroke
    } {
        pop pop pop pop pop
    } ifelse grestore
} bind def end
%%EndSetup
gsave
0 0 667 300.054993 rectclip
-71 -259 translate
71 259 667 300.054993 rectclip
gsave
TopDrawDict begin
/invpats true def
/crlincp 0 def
/crlinjn 0 def
/crmtrlmt 10 def
/crlinw 1.6 def
/crlinalph 1 def
/crlinred 0 def /crlingrn 0 def /crlinblu 0 def /strinclr true def
/crfilalph 1 def
/crfilred 1 def /crfilgrn 1 def /crfilblu 1 def /filinclr true def
/filwpat false def
TopDrawDict /piddict known TopDrawDict /ipiddict known or {
    1 getpat /crfilpat exch def
} if
/filwittrans false def
/strwpat false def
TopDrawDict /piddict known TopDrawDict /ipiddict known or {
    1 getpat /crstrpat exch def
} if
/strwittrans false def
/usedash false def
/strdsh [2 2] def /dshpatoff 0 def
/crendarw false def
/crfrtarw false def
/txtdraw false def
/crtxtalph 1 def
/crtxtred 0 def /crtxtgrn 0 def /crtxtblu 0 def /txtinclr true def
/txtwpat false def
/txtwittrans false def
/txlndraw false def
/crtxlnalph 1 def
/crtxlnred 0 def /crtxlngrn 0 def /crtxlnblu 0 def /txlninclr true def
/txlnwittrans false def
/txlnwpat false def
/crlinw 2.1 def
0.50427 0 0 0.50427 155.962875 332.017456 sc5mt astore 225 54 171 351 0.50427 0 0 0.50427 184.78154 303.198792 sc6mt astore ssl
0.50427 0 0 0.50427 155.962875 332.017456 sc5mt astore 126 0 171 351 0.50427 0 0 0.50427 184.78154 303.198792 sc6mt astore ssl
/esave save def [0.50427 0 0 0.50427 155.962875 332.017456] false 90 180 90 460 1.486238 -1 54.5 false [0.50427 0 0 0.50427 184.78154 303.198792] apstroke esave restore
0.50427 0 0 0.50427 246.731567 336.555878 sc6mt astore 9 -1 5 153 405 0.50427 0 0 0.352989 280.088654 364.467651 sc5mt astore estroke
0.50427 0 0 0.50427 196.808792 341.094299 sc6mt astore 9 -1 5 153 405 0.50427 0 0 0.352989 234.704315 364.467651 sc5mt astore estroke
0.50427 0 0 0.50427 160.501312 332.017456 sc6mt astore 9 -1 5 153 405 0.50427 0 0 0.352989 189.319977 364.467651 sc5mt astore estroke
/esave save def [-0.50427 -4.408473e-08 4.408473e-08 -0.50427 469.114868 718.036499] false 94.939232 180.000015 288 316 1.011236 1 44.5 false [-1.210249 -1.058033e-07 5.547759e-08 -0.63459 733.024292 736.197937] apstroke esave restore
0.50427 0 0 0.50427 155.962875 332.017456 sc5mt astore 297 0 90 405 0.50427 0 0 0.50427 184.78154 303.198792 sc6mt astore ssl
/crfilred 0.8333 def /crfilgrn 0.8333 def /crfilblu 0.8333 def /filinclr true def
9 1 -1 135 558 0.50427 0 0 0.50427 189.319977 230.583832 sc5mt astore efill
0.50427 0 0 0.50427 160.501312 259.402496 sc6mt astore 9 1 -1 135 558 0.50427 0 0 0.50427 189.319977 230.583832 sc5mt astore estroke
9 1 -1 135 558 0.50427 0 0 0.50427 234.704315 230.583832 sc5mt astore efill
0.50427 0 0 0.50427 201.347229 263.940918 sc6mt astore 9 1 -1 135 558 0.50427 0 0 0.50427 234.704315 230.583832 sc5mt astore estroke
9 1 -1 135 558 0.50427 0 0 0.50427 280.088654 230.583832 sc5mt astore efill
0.50427 0 0 0.50427 242.19313 268.47937 sc6mt astore 9 1 -1 135 558 0.50427 0 0 0.50427 280.088654 230.583832 sc5mt astore estroke
9 1 -1 135 558 0.50427 0 0 0.50427 311.857697 230.583832 sc5mt astore efill
0.50427 0 0 0.50427 269.423737 273.017792 sc6mt astore 9 1 -1 135 558 0.50427 0 0 0.50427 311.857697 230.583832 sc5mt astore estroke
9 1 -1 135 558 0.50427 0 0 0.50427 198.396851 203.353226 sc5mt astore efill
0.50427 0 0 0.50427 151.424438 250.325623 sc6mt astore 9 1 -1 135 558 0.50427 0 0 0.50427 198.396851 203.353226 sc5mt astore estroke
9 1 -1 135 558 0.50427 0 0 0.50427 261.934937 203.353226 sc5mt astore efill
0.50427 0 0 0.50427 210.424088 254.864059 sc6mt astore 9 1 -1 135 558 0.50427 0 0 0.50427 261.934937 203.353226 sc5mt astore estroke
9 1 -1 135 558 0.50427 0 0 0.50427 157.550934 230.583832 sc5mt astore efill
0.50427 0 0 0.50427 110.578529 277.556213 sc6mt astore 9 1 -1 135 558 0.50427 0 0 0.50427 157.550934 230.583832 sc5mt astore estroke
/esave save def [0.50427 0 0 0.50427 155.962875 332.017456] false 90 180 90 478 1.766871 -1 81.5 false [0.535787 0 0 0.50427 181.945023 303.198792] apstroke esave restore
/esave save def [-0.50427 0 0 0.50427 405.576782 336.555878] false 90 180 90 478 1.766871 -1 81.5 false [-0.535787 0 0 0.50427 432.693512 303.198792] apstroke esave restore
/crlinw 1 def
/crfilred 0 def /crfilgrn 0 def /crfilblu 0 def /filinclr true def
false [2.204236e-08 0.50427 0.50427 -2.204236e-08 99.686516 444.013733] sstrt
systemdict
begin
116.5 287 135 306.5 setbbox
129 287 moveto
129 287 126 297 126 297 curveto
126 297 123.5 287.5 123.5 287.5 curveto
end
/nspans 2 def splfill
false [2.204236e-08 0.50427 0.50427 -2.204236e-08 99.686516 444.013733] sstrt
systemdict
begin
116.5 287 135 306.5 setbbox
129 287 moveto
129 287 126 297 126 297 curveto
126 297 123.5 287.5 123.5 287.5 curveto
end
/nspans 2 def [2.204236e-08 0.50427 0.50427 -2.204236e-08 70.867851 472.832397] splstroke
false [0.50427 0 0 0.50427 248.06749 377.074402] sstrt
systemdict
begin
116.5 287 135 306.5 setbbox
129 287 moveto
129 287 126 297 126 297 curveto
126 297 123.5 287.5 123.5 287.5 curveto
end
/nspans 2 def splfill
false [0.50427 0 0 0.50427 248.06749 377.074402] sstrt
systemdict
begin
116.5 287 135 306.5 setbbox
129 287 moveto
129 287 126 297 126 297 curveto
126 297 123.5 287.5 123.5 287.5 curveto
end
/nspans 2 def [0.50427 0 0 0.50427 214.710403 410.431519] splstroke
false [0.50427 0 0 0.50427 202.683151 377.074402] sstrt
systemdict
begin
116.5 287 135 306.5 setbbox
129 287 moveto
129 287 126 297 126 297 curveto
126 297 123.5 287.5 123.5 287.5 curveto
end
/nspans 2 def splfill
false [0.50427 0 0 0.50427 202.683151 377.074402] sstrt
systemdict
begin
116.5 287 135 306.5 setbbox
129 287 moveto
129 287 126 297 126 297 curveto
126 297 123.5 287.5 123.5 287.5 curveto
end
/nspans 2 def [0.50427 0 0 0.50427 164.787613 414.96994] splstroke
false [0.50427 0 0 0.50427 293.451813 376.065857] sstrt
systemdict
begin
116.5 287 135 306.5 setbbox
129 287 moveto
129 287 126 297 126 297 curveto
126 297 123.5 287.5 123.5 287.5 curveto
end
/nspans 2 def splfill
false [0.50427 0 0 0.50427 293.451813 376.065857] sstrt
systemdict
begin
116.5 287 135 306.5 setbbox
129 287 moveto
129 287 126 297 126 297 curveto
126 297 123.5 287.5 123.5 287.5 curveto
end
/nspans 2 def [0.50427 0 0 0.50427 251.017868 418.499847] splstroke
false [2.204236e-08 0.50427 0.50427 -2.204236e-08 159.192841 398.631775] sstrt
systemdict
begin
116.5 287 135 306.5 setbbox
129 287 moveto
129 287 126 297 126 297 curveto
126 297 123.5 287.5 123.5 287.5 curveto
end
/nspans 2 def splfill
false [2.204236e-08 0.50427 0.50427 -2.204236e-08 159.192841 398.631775] sstrt
systemdict
begin
116.5 287 135 306.5 setbbox
129 287 moveto
129 287 126 297 126 297 curveto
126 297 123.5 287.5 123.5 287.5 curveto
end
/nspans 2 def [2.204236e-08 0.50427 0.50427 -2.204236e-08 148.527924 409.296692] splstroke
false [0.218114 -0.454659 0.454659 0.218114 205.559082 479.826691] sstrt
systemdict
begin
116.5 287 135 306.5 setbbox
129 287 moveto
129 287 126 297 126 297 curveto
126 297 123.5 287.5 123.5 287.5 curveto
end
/nspans 2 def splfill
false [0.218114 -0.454659 0.454659 0.218114 205.559082 479.826691] sstrt
systemdict
begin
116.5 287 135 306.5 setbbox
129 287 moveto
129 287 126 297 126 297 curveto
126 297 123.5 287.5 123.5 287.5 curveto
end
/nspans 2 def [0.218114 -0.454659 0.454659 0.218114 187.384979 538.920105] splstroke
false [0.145419 -0.482848 0.482848 0.145419 172.551727 513.318726] sstrt
systemdict
begin
116.5 287 135 306.5 setbbox
129 287 moveto
129 287 126 297 126 297 curveto
126 297 123.5 287.5 123.5 287.5 curveto
end
/nspans 2 def splfill
false [0.145419 -0.482848 0.482848 0.145419 172.551727 513.318726] sstrt
systemdict
begin
116.5 287 135 306.5 setbbox
129 287 moveto
129 287 126 297 126 297 curveto
126 297 123.5 287.5 123.5 287.5 curveto
end
/nspans 2 def [0.145419 -0.482848 0.482848 0.145419 161.954208 576.063782] splstroke
false [2.204236e-08 0.50427 0.50427 -2.204236e-08 139.776016 444.013733] sstrt
systemdict
begin
116.5 287 135 306.5 setbbox
129 287 moveto
129 287 126 297 126 297 curveto
126 297 123.5 287.5 123.5 287.5 curveto
end
/nspans 2 def splfill
false [2.204236e-08 0.50427 0.50427 -2.204236e-08 139.776016 444.013733] sstrt
systemdict
begin
116.5 287 135 306.5 setbbox
129 287 moveto
129 287 126 297 126 297 curveto
126 297 123.5 287.5 123.5 287.5 curveto
end
/nspans 2 def [2.204236e-08 0.50427 0.50427 -2.204236e-08 106.418915 477.370819] splstroke
false [2.204236e-08 0.50427 0.50427 -2.204236e-08 183.899689 443.761597] sstrt
systemdict
begin
116.5 287 135 306.5 setbbox
129 287 moveto
129 287 126 297 126 297 curveto
126 297 123.5 287.5 123.5 287.5 curveto
end
/nspans 2 def splfill
false [2.204236e-08 0.50427 0.50427 -2.204236e-08 183.899689 443.761597] sstrt
systemdict
begin
116.5 287 135 306.5 setbbox
129 287 moveto
129 287 126 297 126 297 curveto
126 297 123.5 287.5 123.5 287.5 curveto
end
/nspans 2 def [2.204236e-08 0.50427 0.50427 -2.204236e-08 146.00415 481.657135] splstroke
false [2.204236e-08 0.50427 0.50427 -2.204236e-08 221.467834 444.013733] sstrt
systemdict
begin
116.5 287 135 306.5 setbbox
129 287 moveto
129 287 126 297 126 297 curveto
126 297 123.5 287.5 123.5 287.5 curveto
end
/nspans 2 def splfill
false [2.204236e-08 0.50427 0.50427 -2.204236e-08 221.467834 444.013733] sstrt
systemdict
begin
116.5 287 135 306.5 setbbox
129 287 moveto
129 287 126 297 126 297 curveto
126 297 123.5 287.5 123.5 287.5 curveto
end
/nspans 2 def [2.204236e-08 0.50427 0.50427 -2.204236e-08 179.033875 486.447693] splstroke
false [2.204236e-08 0.50427 0.50427 -2.204236e-08 159.442566 416.783112] sstrt
systemdict
begin
116.5 287 135 306.5 setbbox
129 287 moveto
129 287 126 297 126 297 curveto
126 297 123.5 287.5 123.5 287.5 curveto
end
/nspans 2 def splfill
false [2.204236e-08 0.50427 0.50427 -2.204236e-08 159.442566 416.783112] sstrt
systemdict
begin
116.5 287 135 306.5 setbbox
129 287 moveto
129 287 126 297 126 297 curveto
126 297 123.5 287.5 123.5 287.5 curveto
end
/nspans 2 def [2.204236e-08 0.50427 0.50427 -2.204236e-08 112.470161 463.755524] splstroke
false [-0.279262 -0.419883 0.419883 -0.279262 159.948517 620.089355] sstrt
systemdict
begin
116.5 287 135 306.5 setbbox
129 287 moveto
129 287 126 297 126 297 curveto
126 297 123.5 287.5 123.5 287.5 curveto
end
/nspans 2 def splfill
false [-0.279262 -0.419883 0.419883 -0.279262 159.948517 620.089355] sstrt
systemdict
begin
116.5 287 135 306.5 setbbox
129 287 moveto
129 287 126 297 126 297 curveto
126 297 123.5 287.5 123.5 287.5 curveto
end
/nspans 2 def [-0.279262 -0.419883 0.419883 -0.279262 175.175964 657.767212] splstroke
/crlinw 2.1 def
0.50427 0 0 0.50427 300.96286 341.017456 sc5mt astore 225 54 171 351 0.50427 0 0 0.50427 338.781525 303.198792 sc6mt astore ssl
0.50427 0 0 0.50427 300.96286 341.017456 sc5mt astore 126 0 171 351 0.50427 0 0 0.50427 338.781525 303.198792 sc6mt astore ssl
/esave save def [0.50427 0 0 0.50427 300.96286 341.017456] false 90 180 90 460 1.486238 -1 54.5 false [0.50427 0 0 0.50427 338.781525 303.198792] apstroke esave restore
0.50427 0 0 0.50427 391.731567 345.555878 sc6mt astore 9 -1 5 153 405 0.50427 0 0 0.352989 434.088654 364.467651 sc5mt astore estroke
0.50427 0 0 0.50427 341.808777 350.094299 sc6mt astore 9 -1 5 153 405 0.50427 0 0 0.352989 388.704315 364.467651 sc5mt astore estroke
0.50427 0 0 0.50427 305.501282 341.017456 sc6mt astore 9 -1 5 153 405 0.50427 0 0 0.352989 343.319946 364.467651 sc5mt astore estroke
/esave save def [-0.50427 -4.408473e-08 4.408473e-08 -0.50427 614.114868 727.036499] false 94.939232 180.000015 288 316 1.011236 1 44.5 false [-1.210249 -1.058033e-07 5.547759e-08 -0.63459 887.024231 736.197937] apstroke esave restore
0.50427 0 0 0.50427 300.96286 341.017456 sc5mt astore 297 0 90 405 0.50427 0 0 0.50427 338.781525 303.198792 sc6mt astore ssl
/crfilred 0.8333 def /crfilgrn 0.8333 def /crfilblu 0.8333 def /filinclr true def
9 1 -1 135 558 0.50427 0 0 0.50427 343.319946 230.583832 sc5mt astore efill
0.50427 0 0 0.50427 305.501282 268.402496 sc6mt astore 9 1 -1 135 558 0.50427 0 0 0.50427 343.319946 230.583832 sc5mt astore estroke
9 1 -1 135 558 0.50427 0 0 0.50427 388.704315 230.583832 sc5mt astore efill
0.50427 0 0 0.50427 346.347198 272.940918 sc6mt astore 9 1 -1 135 558 0.50427 0 0 0.50427 388.704315 230.583832 sc5mt astore estroke
9 1 -1 135 558 0.50427 0 0 0.50427 434.088654 230.583832 sc5mt astore efill
0.50427 0 0 0.50427 387.193115 277.47937 sc6mt astore 9 1 -1 135 558 0.50427 0 0 0.50427 434.088654 230.583832 sc5mt astore estroke
9 1 -1 135 558 0.50427 0 0 0.50427 465.857697 230.583832 sc5mt astore efill
0.50427 0 0 0.50427 414.423706 282.017792 sc6mt astore 9 1 -1 135 558 0.50427 0 0 0.50427 465.857697 230.583832 sc5mt astore estroke
9 1 -1 135 558 0.50427 0 0 0.50427 352.39682 203.353226 sc5mt astore efill
0.50427 0 0 0.50427 296.424438 259.325623 sc6mt astore 9 1 -1 135 558 0.50427 0 0 0.50427 352.39682 203.353226 sc5mt astore estroke
9 1 -1 135 558 0.50427 0 0 0.50427 415.934906 203.353226 sc5mt astore efill
0.50427 0 0 0.50427 355.424072 263.864075 sc6mt astore 9 1 -1 135 558 0.50427 0 0 0.50427 415.934906 203.353226 sc5mt astore estroke
9 1 -1 135 558 0.50427 0 0 0.50427 311.550903 230.583832 sc5mt astore efill
0.50427 0 0 0.50427 255.578522 286.556213 sc6mt astore 9 1 -1 135 558 0.50427 0 0 0.50427 311.550903 230.583832 sc5mt astore estroke
/esave save def [0.50427 0 0 0.50427 300.96286 341.017456] false 90 180 90 478 1.766871 -1 81.5 false [0.535787 0 0 0.50427 335.945007 303.198792] apstroke esave restore
/esave save def [-0.50427 0 0 0.50427 550.576782 345.555878] false 90 180 90 478 1.766871 -1 81.5 false [-0.535787 0 0 0.50427 586.693542 303.198792] apstroke esave restore
/crlinw 1 def
/crfilred 0 def /crfilgrn 0 def /crfilblu 0 def /filinclr true def
false [2.204236e-08 0.50427 0.50427 -2.204236e-08 253.686493 444.013733] sstrt
systemdict
begin
116.5 287 135 306.5 setbbox
129 287 moveto
129 287 126 297 126 297 curveto
126 297 123.5 287.5 123.5 287.5 curveto
end
/nspans 2 def splfill
false [2.204236e-08 0.50427 0.50427 -2.204236e-08 253.686493 444.013733] sstrt
systemdict
begin
116.5 287 135 306.5 setbbox
129 287 moveto
129 287 126 297 126 297 curveto
126 297 123.5 287.5 123.5 287.5 curveto
end
/nspans 2 def [2.204236e-08 0.50427 0.50427 -2.204236e-08 215.867828 481.832397] splstroke
false [0.50427 0 0 0.50427 402.067474 377.074402] sstrt
systemdict
begin
116.5 287 135 306.5 setbbox
129 287 moveto
129 287 126 297 126 297 curveto
126 297 123.5 287.5 123.5 287.5 curveto
end
/nspans 2 def splfill
false [0.50427 0 0 0.50427 402.067474 377.074402] sstrt
systemdict
begin
116.5 287 135 306.5 setbbox
129 287 moveto
129 287 126 297 126 297 curveto
126 297 123.5 287.5 123.5 287.5 curveto
end
/nspans 2 def [0.50427 0 0 0.50427 359.710358 419.431519] splstroke
false [0.50427 0 0 0.50427 356.683105 377.074402] sstrt
systemdict
begin
116.5 287 135 306.5 setbbox
129 287 moveto
129 287 126 297 126 297 curveto
126 297 123.5 287.5 123.5 287.5 curveto
end
/nspans 2 def splfill
false [0.50427 0 0 0.50427 356.683105 377.074402] sstrt
systemdict
begin
116.5 287 135 306.5 setbbox
129 287 moveto
129 287 126 297 126 297 curveto
126 297 123.5 287.5 123.5 287.5 curveto
end
/nspans 2 def [0.50427 0 0 0.50427 309.787598 423.96994] splstroke
false [0.50427 0 0 0.50427 447.451813 376.065857] sstrt
systemdict
begin
116.5 287 135 306.5 setbbox
129 287 moveto
129 287 126 297 126 297 curveto
126 297 123.5 287.5 123.5 287.5 curveto
end
/nspans 2 def splfill
false [0.50427 0 0 0.50427 447.451813 376.065857] sstrt
systemdict
begin
116.5 287 135 306.5 setbbox
129 287 moveto
129 287 126 297 126 297 curveto
126 297 123.5 287.5 123.5 287.5 curveto
end
/nspans 2 def [0.50427 0 0 0.50427 396.017853 427.499847] splstroke
false [2.204236e-08 0.50427 0.50427 -2.204236e-08 313.192841 398.631775] sstrt
systemdict
begin
116.5 287 135 306.5 setbbox
129 287 moveto
129 287 126 297 126 297 curveto
126 297 123.5 287.5 123.5 287.5 curveto
end
/nspans 2 def splfill
false [2.204236e-08 0.50427 0.50427 -2.204236e-08 313.192841 398.631775] sstrt
systemdict
begin
116.5 287 135 306.5 setbbox
129 287 moveto
129 287 126 297 126 297 curveto
126 297 123.5 287.5 123.5 287.5 curveto
end
/nspans 2 def [2.204236e-08 0.50427 0.50427 -2.204236e-08 293.527893 418.296692] splstroke
false [0.218114 -0.454659 0.454659 0.218114 359.559052 479.826691] sstrt
systemdict
begin
116.5 287 135 306.5 setbbox
129 287 moveto
129 287 126 297 126 297 curveto
126 297 123.5 287.5 123.5 287.5 curveto
end
/nspans 2 def splfill
false [0.218114 -0.454659 0.454659 0.218114 359.559052 479.826691] sstrt
systemdict
begin
116.5 287 135 306.5 setbbox
129 287 moveto
129 287 126 297 126 297 curveto
126 297 123.5 287.5 123.5 287.5 curveto
end
/nspans 2 def [0.218114 -0.454659 0.454659 0.218114 332.384949 547.920105] splstroke
false [0.145419 -0.482848 0.482848 0.145419 326.551727 513.318726] sstrt
systemdict
begin
116.5 287 135 306.5 setbbox
129 287 moveto
129 287 126 297 126 297 curveto
126 297 123.5 287.5 123.5 287.5 curveto
end
/nspans 2 def splfill
false [0.145419 -0.482848 0.482848 0.145419 326.551727 513.318726] sstrt
systemdict
begin
116.5 287 135 306.5 setbbox
129 287 moveto
129 287 126 297 126 297 curveto
126 297 123.5 287.5 123.5 287.5 curveto
end
/nspans 2 def [0.145419 -0.482848 0.482848 0.145419 306.954224 585.063782] splstroke
false [2.204236e-08 0.50427 0.50427 -2.204236e-08 293.776001 444.013733] sstrt
systemdict
begin
116.5 287 135 306.5 setbbox
129 287 moveto
129 287 126 297 126 297 curveto
126 297 123.5 287.5 123.5 287.5 curveto
end
/nspans 2 def splfill
false [2.204236e-08 0.50427 0.50427 -2.204236e-08 293.776001 444.013733] sstrt
systemdict
begin
116.5 287 135 306.5 setbbox
129 287 moveto
129 287 126 297 126 297 curveto
126 297 123.5 287.5 123.5 287.5 curveto
end
/nspans 2 def [2.204236e-08 0.50427 0.50427 -2.204236e-08 251.4189 486.370819] splstroke
false [2.204236e-08 0.50427 0.50427 -2.204236e-08 337.899658 443.761597] sstrt
systemdict
begin
116.5 287 135 306.5 setbbox
129 287 moveto
129 287 126 297 126 297 curveto
126 297 123.5 287.5 123.5 287.5 curveto
end
/nspans 2 def splfill
false [2.204236e-08 0.50427 0.50427 -2.204236e-08 337.899658 443.761597] sstrt
systemdict
begin
116.5 287 135 306.5 setbbox
129 287 moveto
129 287 126 297 126 297 curveto
126 297 123.5 287.5 123.5 287.5 curveto
end
/nspans 2 def [2.204236e-08 0.50427 0.50427 -2.204236e-08 291.00415 490.657135] splstroke
false [2.204236e-08 0.50427 0.50427 -2.204236e-08 375.467834 444.013733] sstrt
systemdict
begin
116.5 287 135 306.5 setbbox
129 287 moveto
129 287 126 297 126 297 curveto
126 297 123.5 287.5 123.5 287.5 curveto
end
/nspans 2 def splfill
false [2.204236e-08 0.50427 0.50427 -2.204236e-08 375.467834 444.013733] sstrt
systemdict
begin
116.5 287 135 306.5 setbbox
129 287 moveto
129 287 126 297 126 297 curveto
126 297 123.5 287.5 123.5 287.5 curveto
end
/nspans 2 def [2.204236e-08 0.50427 0.50427 -2.204236e-08 324.033844 495.447693] splstroke
false [2.204236e-08 0.50427 0.50427 -2.204236e-08 313.442566 416.783112] sstrt
systemdict
begin
116.5 287 135 306.5 setbbox
129 287 moveto
129 287 126 297 126 297 curveto
126 297 123.5 287.5 123.5 287.5 curveto
end
/nspans 2 def splfill
false [2.204236e-08 0.50427 0.50427 -2.204236e-08 313.442566 416.783112] sstrt
systemdict
begin
116.5 287 135 306.5 setbbox
129 287 moveto
129 287 126 297 126 297 curveto
126 297 123.5 287.5 123.5 287.5 curveto
end
/nspans 2 def [2.204236e-08 0.50427 0.50427 -2.204236e-08 257.470154 472.755524] splstroke
false [-0.279262 -0.419883 0.419883 -0.279262 313.948517 620.089355] sstrt
systemdict
begin
116.5 287 135 306.5 setbbox
129 287 moveto
129 287 126 297 126 297 curveto
126 297 123.5 287.5 123.5 287.5 curveto
end
/nspans 2 def splfill
false [-0.279262 -0.419883 0.419883 -0.279262 313.948517 620.089355] sstrt
systemdict
begin
116.5 287 135 306.5 setbbox
129 287 moveto
129 287 126 297 126 297 curveto
126 297 123.5 287.5 123.5 287.5 curveto
end
/nspans 2 def [-0.279262 -0.419883 0.419883 -0.279262 320.175934 666.767212] splstroke
/crlinw 2.1 def
0.50427 0 0 0.50427 -16.037125 350.017456 sc5mt astore 225 54 171 351 0.50427 0 0 0.50427 30.78154 303.198792 sc6mt astore ssl
0.50427 0 0 0.50427 -16.037125 350.017456 sc5mt astore 126 0 171 351 0.50427 0 0 0.50427 30.78154 303.198792 sc6mt astore ssl
/esave save def [0.50427 0 0 0.50427 -16.037125 350.017456] false 90 180 90 460 1.486238 -1 54.5 false [0.50427 0 0 0.50427 30.78154 303.198792] apstroke esave restore
0.50427 0 0 0.50427 74.731567 354.555878 sc6mt astore 9 -1 5 153 405 0.50427 0 0 0.352989 126.088661 364.467651 sc5mt astore estroke
0.50427 0 0 0.50427 24.808786 359.094299 sc6mt astore 9 -1 5 153 405 0.50427 0 0 0.352989 80.704315 364.467651 sc5mt astore estroke
0.50427 0 0 0.50427 -11.49869 350.017456 sc6mt astore 9 -1 5 153 405 0.50427 0 0 0.352989 35.319977 364.467651 sc5mt astore estroke
/esave save def [-0.50427 -4.408473e-08 4.408473e-08 -0.50427 297.114868 736.036499] false 94.939232 180.000015 288 316 1.011236 1 44.5 false [-1.210249 -1.058033e-07 5.547759e-08 -0.63459 579.024292 736.197937] apstroke esave restore
0.50427 0 0 0.50427 -16.037125 350.017456 sc5mt astore 297 0 90 405 0.50427 0 0 0.50427 30.78154 303.198792 sc6mt astore ssl
/crfilred 0.8333 def /crfilgrn 0.8333 def /crfilblu 0.8333 def /filinclr true def
9 1 -1 135 558 0.50427 0 0 0.50427 35.319977 230.583832 sc5mt astore efill
0.50427 0 0 0.50427 -11.49869 277.402496 sc6mt astore 9 1 -1 135 558 0.50427 0 0 0.50427 35.319977 230.583832 sc5mt astore estroke
9 1 -1 135 558 0.50427 0 0 0.50427 80.704315 230.583832 sc5mt astore efill
0.50427 0 0 0.50427 29.347221 281.940918 sc6mt astore 9 1 -1 135 558 0.50427 0 0 0.50427 80.704315 230.583832 sc5mt astore estroke
9 1 -1 135 558 0.50427 0 0 0.50427 126.088661 230.583832 sc5mt astore efill
0.50427 0 0 0.50427 70.19313 286.47937 sc6mt astore 9 1 -1 135 558 0.50427 0 0 0.50427 126.088661 230.583832 sc5mt astore estroke
9 1 -1 135 558 0.50427 0 0 0.50427 157.857697 230.583832 sc5mt astore efill
0.50427 0 0 0.50427 97.423737 291.017792 sc6mt astore 9 1 -1 135 558 0.50427 0 0 0.50427 157.857697 230.583832 sc5mt astore estroke
9 1 -1 135 558 0.50427 0 0 0.50427 44.396843 203.353226 sc5mt astore efill
0.50427 0 0 0.50427 -20.575558 268.325623 sc6mt astore 9 1 -1 135 558 0.50427 0 0 0.50427 44.396843 203.353226 sc5mt astore estroke
9 1 -1 135 558 0.50427 0 0 0.50427 107.934921 203.353226 sc5mt astore efill
0.50427 0 0 0.50427 38.424088 272.864075 sc6mt astore 9 1 -1 135 558 0.50427 0 0 0.50427 107.934921 203.353226 sc5mt astore estroke
9 1 -1 135 558 0.50427 0 0 0.50427 3.550934 230.583832 sc5mt astore efill
0.50427 0 0 0.50427 -61.421471 295.556213 sc6mt astore 9 1 -1 135 558 0.50427 0 0 0.50427 3.550934 230.583832 sc5mt astore estroke
/esave save def [0.50427 0 0 0.50427 -16.037125 350.017456] false 90 180 90 478 1.766871 -1 81.5 false [0.535787 0 0 0.50427 27.945019 303.198792] apstroke esave restore
/esave save def [-0.50427 0 0 0.50427 233.576767 354.555878] false 90 180 90 478 1.766871 -1 81.5 false [-0.535787 0 0 0.50427 278.693512 303.198792] apstroke esave restore
/crlinw 1 def
/crfilred 0 def /crfilgrn 0 def /crfilblu 0 def /filinclr true def
false [2.204236e-08 0.50427 0.50427 -2.204236e-08 -54.313484 444.013733] sstrt
systemdict
begin
116.5 287 135 306.5 setbbox
129 287 moveto
129 287 126 297 126 297 curveto
126 297 123.5 287.5 123.5 287.5 curveto
end
/nspans 2 def splfill
false [2.204236e-08 0.50427 0.50427 -2.204236e-08 -54.313484 444.013733] sstrt
systemdict
begin
116.5 287 135 306.5 setbbox
129 287 moveto
129 287 126 297 126 297 curveto
126 297 123.5 287.5 123.5 287.5 curveto
end
/nspans 2 def [2.204236e-08 0.50427 0.50427 -2.204236e-08 -101.132149 490.832397] splstroke
false [0.50427 0 0 0.50427 94.067482 377.074402] sstrt
systemdict
begin
116.5 287 135 306.5 setbbox
129 287 moveto
129 287 126 297 126 297 curveto
126 297 123.5 287.5 123.5 287.5 curveto
end
/nspans 2 def splfill
false [0.50427 0 0 0.50427 94.067482 377.074402] sstrt
systemdict
begin
116.5 287 135 306.5 setbbox
129 287 moveto
129 287 126 297 126 297 curveto
126 297 123.5 287.5 123.5 287.5 curveto
end
/nspans 2 def [0.50427 0 0 0.50427 42.710388 428.431519] splstroke
false [0.50427 0 0 0.50427 48.683144 377.074402] sstrt
systemdict
begin
116.5 287 135 306.5 setbbox
129 287 moveto
129 287 126 297 126 297 curveto
126 297 123.5 287.5 123.5 287.5 curveto
end
/nspans 2 def splfill
false [0.50427 0 0 0.50427 48.683144 377.074402] sstrt
systemdict
begin
116.5 287 135 306.5 setbbox
129 287 moveto
129 287 126 297 126 297 curveto
126 297 123.5 287.5 123.5 287.5 curveto
end
/nspans 2 def [0.50427 0 0 0.50427 -7.21239 432.96994] splstroke
false [0.50427 0 0 0.50427 139.451843 376.065857] sstrt
systemdict
begin
116.5 287 135 306.5 setbbox
129 287 moveto
129 287 126 297 126 297 curveto
126 297 123.5 287.5 123.5 287.5 curveto
end
/nspans 2 def splfill
false [0.50427 0 0 0.50427 139.451843 376.065857] sstrt
systemdict
begin
116.5 287 135 306.5 setbbox
129 287 moveto
129 287 126 297 126 297 curveto
126 297 123.5 287.5 123.5 287.5 curveto
end
/nspans 2 def [0.50427 0 0 0.50427 79.01786 436.499847] splstroke
false [2.204236e-08 0.50427 0.50427 -2.204236e-08 5.192846 398.631775] sstrt
systemdict
begin
116.5 287 135 306.5 setbbox
129 287 moveto
129 287 126 297 126 297 curveto
126 297 123.5 287.5 123.5 287.5 curveto
end
/nspans 2 def splfill
false [2.204236e-08 0.50427 0.50427 -2.204236e-08 5.192846 398.631775] sstrt
systemdict
begin
116.5 287 135 306.5 setbbox
129 287 moveto
129 287 126 297 126 297 curveto
126 297 123.5 287.5 123.5 287.5 curveto
end
/nspans 2 def [2.204236e-08 0.50427 0.50427 -2.204236e-08 -23.472082 427.296692] splstroke
false [0.218114 -0.454659 0.454659 0.218114 51.559082 479.826691] sstrt
systemdict
begin
116.5 287 135 306.5 setbbox
129 287 moveto
129 287 126 297 126 297 curveto
126 297 123.5 287.5 123.5 287.5 curveto
end
/nspans 2 def splfill
false [0.218114 -0.454659 0.454659 0.218114 51.559082 479.826691] sstrt
systemdict
begin
116.5 287 135 306.5 setbbox
129 287 moveto
129 287 126 297 126 297 curveto
126 297 123.5 287.5 123.5 287.5 curveto
end
/nspans 2 def [0.218114 -0.454659 0.454659 0.218114 15.384977 556.920105] splstroke
false [0.145419 -0.482848 0.482848 0.145419 18.551727 513.318726] sstrt
systemdict
begin
116.5 287 135 306.5 setbbox
129 287 moveto
129 287 126 297 126 297 curveto
126 297 123.5 287.5 123.5 287.5 curveto
end
/nspans 2 def splfill
false [0.145419 -0.482848 0.482848 0.145419 18.551727 513.318726] sstrt
systemdict
begin
116.5 287 135 306.5 setbbox
129 287 moveto
129 287 126 297 126 297 curveto
126 297 123.5 287.5 123.5 287.5 curveto
end
/nspans 2 def [0.145419 -0.482848 0.482848 0.145419 -10.045784 594.063782] splstroke
false [2.204236e-08 0.50427 0.50427 -2.204236e-08 -14.223986 444.013733] sstrt
systemdict
begin
116.5 287 135 306.5 setbbox
129 287 moveto
129 287 126 297 126 297 curveto
126 297 123.5 287.5 123.5 287.5 curveto
end
/nspans 2 def splfill
false [2.204236e-08 0.50427 0.50427 -2.204236e-08 -14.223986 444.013733] sstrt
systemdict
begin
116.5 287 135 306.5 setbbox
129 287 moveto
129 287 126 297 126 297 curveto
126 297 123.5 287.5 123.5 287.5 curveto
end
/nspans 2 def [2.204236e-08 0.50427 0.50427 -2.204236e-08 -65.581085 495.370819] splstroke
false [2.204236e-08 0.50427 0.50427 -2.204236e-08 29.899683 443.761597] sstrt
systemdict
begin
116.5 287 135 306.5 setbbox
129 287 moveto
129 287 126 297 126 297 curveto
126 297 123.5 287.5 123.5 287.5 curveto
end
/nspans 2 def splfill
false [2.204236e-08 0.50427 0.50427 -2.204236e-08 29.899683 443.761597] sstrt
systemdict
begin
116.5 287 135 306.5 setbbox
129 287 moveto
129 287 126 297 126 297 curveto
126 297 123.5 287.5 123.5 287.5 curveto
end
/nspans 2 def [2.204236e-08 0.50427 0.50427 -2.204236e-08 -25.995852 499.657135] splstroke
false [2.204236e-08 0.50427 0.50427 -2.204236e-08 67.467834 444.013733] sstrt
systemdict
begin
116.5 287 135 306.5 setbbox
129 287 moveto
129 287 126 297 126 297 curveto
126 297 123.5 287.5 123.5 287.5 curveto
end
/nspans 2 def splfill
false [2.204236e-08 0.50427 0.50427 -2.204236e-08 67.467834 444.013733] sstrt
systemdict
begin
116.5 287 135 306.5 setbbox
129 287 moveto
129 287 126 297 126 297 curveto
126 297 123.5 287.5 123.5 287.5 curveto
end
/nspans 2 def [2.204236e-08 0.50427 0.50427 -2.204236e-08 7.033867 504.447693] splstroke
false [2.204236e-08 0.50427 0.50427 -2.204236e-08 5.442564 416.783112] sstrt
systemdict
begin
116.5 287 135 306.5 setbbox
129 287 moveto
129 287 126 297 126 297 curveto
126 297 123.5 287.5 123.5 287.5 curveto
end
/nspans 2 def splfill
false [2.204236e-08 0.50427 0.50427 -2.204236e-08 5.442564 416.783112] sstrt
systemdict
begin
116.5 287 135 306.5 setbbox
129 287 moveto
129 287 126 297 126 297 curveto
126 297 123.5 287.5 123.5 287.5 curveto
end
/nspans 2 def [2.204236e-08 0.50427 0.50427 -2.204236e-08 -59.529839 481.755524] splstroke
false [-0.279262 -0.419883 0.419883 -0.279262 5.94852 620.089355] sstrt
systemdict
begin
116.5 287 135 306.5 setbbox
129 287 moveto
129 287 126 297 126 297 curveto
126 297 123.5 287.5 123.5 287.5 curveto
end
/nspans 2 def splfill
false [-0.279262 -0.419883 0.419883 -0.279262 5.94852 620.089355] sstrt
systemdict
begin
116.5 287 135 306.5 setbbox
129 287 moveto
129 287 126 297 126 297 curveto
126 297 123.5 287.5 123.5 287.5 curveto
end
/nspans 2 def [-0.279262 -0.419883 0.419883 -0.279262 3.175963 675.767212] splstroke
9 1 -1 72 360 1 0 0 1 0 -1 sc5mt astore efill
1 0 0 1 0 -1 sc6mt astore 9 1 -1 72 360 1 0 0 1 0 -1 sc5mt astore estroke
/crlinw 2.5 def
9 1 -1 72 360 1 0 0 1 81 -1 sc5mt astore efill
1 0 0 1 63 17 sc6mt astore 9 1 -1 72 360 1 0 0 1 81 -1 sc5mt astore estroke
/crlinw 1 def
9 1 -1 72 360 1 0 0 1 603 -1 sc5mt astore efill
1 0 0 1 576 26 sc6mt astore 9 1 -1 72 360 1 0 0 1 603 -1 sc5mt astore estroke
9 1 -1 72 360 1 0 0 1 342 -82 sc5mt astore efill
1 0 0 1 306 -46 sc6mt astore 9 1 -1 72 360 1 0 0 1 342 -82 sc5mt astore estroke
9 1 -1 72 360 1 0 0 1 342 -1 sc5mt astore efill
1 0 0 1 297 44 sc6mt astore 9 1 -1 72 360 1 0 0 1 342 -1 sc5mt astore estroke
9 1 -1 72 360 1 0 0 1 153 -1 sc5mt astore efill
1 0 0 1 99 53 sc6mt astore 9 1 -1 72 360 1 0 0 1 153 -1 sc5mt astore estroke
9 1 1 135 297 1 0 0 1 207 -37 sc5mt astore efill
1 0 0 1 207 -37 sc6mt astore 9 1 1 135 297 1 0 0 1 207 -37 sc5mt astore estroke
/crlinw 2.5 def
1 0 0 1 0 -1 sc5mt astore 81 0 81 351 1 0 0 1 0 -1 sc6mt astore ssl
1 0 0 1 0 -1 sc5mt astore 540 0 162 351 1 0 0 1 0 -1 sc6mt astore ssl
1 0 0 1 0 -1 sc5mt astore 81 0 342 270 1 0 0 1 0 -1 sc6mt astore ssl
/txtdraw true def
/txlndraw true def
(Is ) [4.169998 0 8.339996 0 0 0] 106 367 /Helvetica-Bold [ 15 1 mul 0 0 15 0 0 ] [1 0 0 1 9.635002 -7.790009] dotx
/txtdraw true def
/txlndraw true def
( ) [0 0] 104 370 /Helvetica [ 15 1 mul 0 0 15 0 0 ] [1 0 0 1 0 -1] dotx
/esave save def [1 0 0 1 0 -1] false 90 180 81 397 1.78022 -1 45.5 false [1 0 0 1 0 -1] apstroke esave restore
/esave save def [-1 0 0 1 324 8] false 90 180 81 397 1.78022 -1 45.5 false [-1 0 0 1 315 -1] apstroke esave restore
/txtdraw true def
/txlndraw true def
(the ) [4.994995 0 9.164993 0 8.339996 0 0 0] 189 376 /Helvetica-Bold [ 15 1 mul 0 0 15 0 0 ] [1 0 0 1 -0.149994 -16.790009] dotx
(location ) [4.170013 0 9.165009 0 8.339996 0 8.339996 0 4.994995 0 4.170013 0 9.165009 0 9.165009 0 0 0] 283 366 /Helvetica-Bold [ 15 1 mul 0 0 15 0 0 ] [1 0 0 1 21.964996 -6.790009] dotx
(Is ) [4.169998 0 8.339996 0 0 0] 150 293 /Helvetica-Bold [ 15 1 mul 0 0 15 0 0 ] [1 0 0 1 0.044998 21.209991] dotx
/esave save def [1 0 0 1 144 -1.002563] false 90.606277 180 81 397 1.78022 -1 45.5 false [1.459891 0 0 1.59344 115.748787 -218.596741] apstroke esave restore
/esave save def [1 -8.742278e-08 -8.742278e-08 -1 135 683] false 90 180 81 397 1.78022 -1 45.5 false [1.235294 -1.079928e-07 -8.742278e-08 -1 133.941177 701] apstroke esave restore
/esave save def [-1 8.742278e-08 -8.742278e-08 -1 459 674] false 90 180 81 397 1.78022 -1 45.5 false [-1.235294 1.079928e-07 -8.742278e-08 -1 523.058838 700.999939] apstroke esave restore
/esave save def [1 -8.742278e-08 -8.742278e-08 -1 387 692] false 90 180 81 397 1.78022 -1 45.5 false [1.235294 -1.079928e-07 -8.742278e-08 -1 394.941162 701] apstroke esave restore
/esave save def [-1 8.742278e-08 -8.742278e-08 -1 711 683] false 90 180 81 397 1.78022 -1 45.5 false [-1.235294 1.079928e-07 -8.742278e-08 -1 784.058838 700.999939] apstroke esave restore
(distance ) [9.165009 0 4.170013 0 8.339996 0 4.994995 0 8.339996 0 9.165009 0 8.339996 0 8.339996 0 0 0] 298 282 /Helvetica-Bold [ 15 1 mul 0 0 15 0 0 ] [1 0 0 1 -34.435028 23.209991] dotx
(Puffer ) [10.005005 0 9.165009 0 4.994995 0 4.845001 0 8.339996 0 5.834991 0 0 0] 304 419 /Helvetica-Bold [ 15 1 mul 0 0 15 0 0 ] [1 0 0 1 4.054993 -16.904999] dotx
/esave save def [1 -8.742278e-08 -8.742278e-08 -1 225.000061 629] false 90 180 81 397 1.78022 -1 45.5 false [0.470588 -4.114013e-08 -8.742278e-08 -1 312.882385 620] apstroke esave restore
/esave save def [-1 8.742278e-08 -8.742278e-08 -1 549.000061 620] false 90 180 81 397 1.78022 -1 45.5 false [-0.470588 4.114013e-08 -8.742278e-08 -1 461.117676 620] apstroke esave restore
(from ) [4.994995 0 5.535004 0 9.165009 0 13.334991 0 0 0] 441 412 /Helvetica-Bold [ 15 1 mul 0 0 15 0 0 ] [1 0 0 1 -68.084991 -90.904999] dotx
(to ) [4.994995 0 9.165009 0 0 0] 452 366 /Helvetica-Bold [ 15 1 mul 0 0 15 0 0 ] [1 0 0 1 -74.149994 -89.140015] dotx
(near ) [9.165009 0 8.339996 0 8.339996 0 5.834991 0 0 0] 446 282 /Helvetica-Bold [ 15 1 mul 0 0 15 0 0 ] [1 0 0 1 -5.975006 77.809998] dotx
/esave save def [-1 8.742278e-08 -8.742278e-08 -1 621.000061 736.999939] false 90 180 81 397 1.78022 -1 45.5 false [-0.470588 4.114013e-08 -8.646222e-08 -0.989012 533.117676 697.637817] apstroke esave restore
/esave save def [1 -8.742278e-08 -8.742278e-08 -1 297.000061 727.999939] false 90 180 81 397 1.78022 -1 45.5 false [0.470588 -4.114013e-08 -8.646222e-08 -0.989012 384.882385 697.637817] apstroke esave restore
/esave save def [1 -8.742278e-08 -8.742278e-08 -1 -44.999958 647] false 90 180 81 397 1.78022 -1 45.5 false [0.529412 -4.628264e-08 -8.742278e-08 -1 38.117687 701] apstroke esave restore
/esave save def [-1 8.742278e-08 -8.742278e-08 -1 279.000031 638] false 90 180 81 397 1.78022 -1 45.5 false [-0.529412 4.628264e-08 -8.742278e-08 -1 204.882385 701] apstroke esave restore
(What's ) [14.160004 0 9.164993 0 8.339996 0 4.994995 0 3.270004 0 8.339996 0 0 0] 143 411 /Helvetica-Bold [ 15 1 mul 0 0 15 0 0 ] [1 0 0 1 -44.240005 -8.769989] dotx
(of ) [9.165009 0 4.994995 0 0 0] 452 408 /Helvetica-Bold [ 15 1 mul 0 0 15 0 0 ] [1 0 0 1 -6.934998 -5.904999] dotx
(Enterprise ) [10.005005 0 9.164978 0 4.994995 0 8.340027 0 5.835022 0 9.164978 0 5.835022 0 4.169983 0 8.340027 0 8.340027 0 0 0] 548 366 /Helvetica-Bold [ 15 1 mul 0 0 15 0 0 ] [1 0 0 1 8.859985 -8.875] dotx
/crlinw 1 def
9 1 -1 72 360 1 0 0 1 414 -1 sc5mt astore efill
1 0 0 1 369 44 sc6mt astore 9 1 -1 72 360 1 0 0 1 414 -1 sc5mt astore estroke
/crlinw 2.5 def
/esave save def [-1 -8.742278e-08 8.742278e-08 -1 917.999939 620.500061] false 90 180 423 190 1 1.118056 72 false [-1 -8.742278e-08 8.742278e-08 -1 917.999939 620.500061] apstroke esave restore
(the ) [4.994995 0 9.165009 0 8.339996 0 0 0] 494 300 /Helvetica-Bold [ 15 1 mul 0 0 15 0 0 ] [1 0 0 1 0 -1] dotx
(port ) [9.164978 0 9.164978 0 6.13501 0 4.994995 0 0 0] 567 412 /Helvetica-Bold [ 15 1 mul 0 0 15 0 0 ] [1 0 0 1 6.900024 -9.140015] dotx
1 0 0 1 0 -1 sc5mt astore 9 0 711 351 1 0 0 1 0 -1 sc6mt astore ssl
1 0 0 1 0 -1 sc5mt astore 9 0 729 351 1 0 0 1 0 -1 sc6mt astore ssl
(/w/ ) [4.169998 0 11.669998 0 4.169998 0 0 0] 185 559 /Helvetica-Bold [ 15 1 mul 0 0 15 0 0 ] [1 0 0 1 -43 -11] dotx
(/ah/ ) [4.170013 0 8.339996 0 9.165009 0 4.170013 0 0 0] 333 563 /Helvetica-Bold [ 15 1 mul 0 0 15 0 0 ] [1 0 0 1 -41 -16] dotx
(/ts/ ) [4.170013 0 4.994995 0 8.339996 0 4.170013 0 0 0] 480 562 /Helvetica-Bold [ 15 1 mul 0 0 15 0 0 ] [1 0 0 1 -30 -16] dotx
/crlinw 1.6 def
1 0 0 1 1 0 sc5mt astore 5 35 128 425 1 0 0 1 0 0 sc6mt astore ssl
false [0.075606 -0.009966 -0.019027 -0.144339 116.71286 452.941895] sstrt
systemdict
begin
82.090927 120.999977 271.090912 205.999985 setbbox
190.909103 203.999985 moveto
190.909103 203.999985 122.181824 122.999985 122.181824 122.999985 curveto
122.181824 122.999985 259.636383 122.999985 259.636383 122.999985 curveto
end
/nspans 2 def splfill
false [0.075606 -0.009966 -0.019027 -0.144339 116.71286 452.941895] sstrt
systemdict
begin
82.090927 120.999977 271.090912 205.999985 setbbox
190.909103 203.999985 moveto
190.909103 203.999985 122.181824 122.999985 122.181824 122.999985 curveto
122.181824 122.999985 259.636383 122.999985 259.636383 122.999985 curveto
end
/nspans 2 def [0.144339 -0.019027 -0.019027 -0.144339 105.16571 454.46405] splstroke
end
grestore
grestore
%%Trailer

%%EndDocument
 GE /Times-Bold SF
15950 69836 MT
(Figure 4-4:)SH
/Times-Roman SF
21723 XM
(A finite-state grammar network for a continuous recognition task.)SH
ES
%%Page: 84 85
BS
0 SI
10 /Times-Roman AF
54800 4286 MT
(84)SH
11 SS 
13300 7955 MT
(A fundamental difference)
25 W( between HMMs as applied to speech recognition is the representation)24 W
10800 9694 MT
(of the speech signal, or equivalently, the manner in which probabilities are assigned to observations)81 W
10800 11433 MT
(within a state.  As)
68 W( was seen earlier in the manufacturing example, the observations may be modeled)67 W
10800 13172 MT
(as either discrete)
50 W( or continuous, with corresponding output probability density functions)51 W
/Times-Italic SF
50403 XM
(b)SH
/Times-Roman SF
51203 XM
([)SH
/Times-Italic SF
(O)SH
/Times-Roman SF
52613 XM
(]. Dis-)377 W
9 /Times-Italic AF
50953 13532 MT
(j)SH
52363 XM
(t)SH
11 /Times-Roman AF
10800 14911 MT
(crete density HMMs \050DDHMMs\051 represent the data from a speech frame as a symbol from)
102 W( a finite)101 W
10800 16650 MT
(alphabet {)136 W
/Times-Italic SF
(v)SH
/Times-Roman SF
16308 XM
(}. A)
547 W( vector quantization \050VQ\051)
136 W( codebook is used to perform the mapping between the)137 W
8 /Times-Italic AF
15953 16995 MT
(k)SH
11 /Times-Roman AF
10800 18389 MT
(continuous observation vector and the alphabet)
164 W( symbols.  Continuous density HMMs \050CDHMMs\051)163 W
10800 20128 MT
(typically use finite mixture densities to characterize the multi-dimensional output densities.)
290 W( A)856 W
10800 21867 MT
(modification of the CDHMM, called the semi-continuous)
125 W( HMM \050SCHMM\051, assumes that all com-)124 W
10800 23606 MT
(ponent densities from the CDHMM)
150 W( mixtures are tied \050)151 W
/Times-Italic SF
(i.e.)SH
/Times-Roman SF
37786 XM
(all component densities for each model)151 W
10800 25345 MT
(state are identical\051, and only the)
37 W( mixing coefficients vary from state to state.  Details of these various)36 W
10800 27084 MT
(representations follow.)SH
563 1000 0 15300 51194 GB 
%%BeginDocument: /usr0/rozzi/Documentation/PhDThesis/Chapter4/VQ.eps
%!PS-Adobe-2.0 EPSF-2.0
%%Title: 
%%Creator: TopDraw
%%CreationDate: Tue Feb 26 09:36:26 1991
%%For: rozzi
%%DocumentFonts: (atend)
%%%Pages: 0 1
%%BoundingBox: 0 0 639 407
%%EndComments

%%BeginDocument: /usr/lib/NextStep/printPackage.ps
%!PS-Adobe-2.0
%%Title: Printing Package
%%EndComments
%Version: 2.0
%Copyright: 1988, NeXT, Inc.

/__NXdef{1 index where{pop pop pop}{def}ifelse}bind def
/__NXbdef{1 index where{pop pop pop}{bind def}ifelse}bind def
/UserObjects 10 array __NXdef
/defineuserobject{
        exch dup 1 add dup UserObjects length gt{
                array dup 0 UserObjects putinterval
                /UserObjects exch def
        }{pop}ifelse UserObjects exch 3 -1 roll put
}__NXbdef
/undefineuserobject{UserObjects exch null put}__NXbdef
/execuserobject{UserObjects exch get exec}__NXbdef
/__NXRectPath{4 2 roll moveto 1 index 0 rlineto
0 exch rlineto neg 0 rlineto closepath}__NXbdef
/__NXProcessRectArgs{
        1 index type /arraytype eq{
                exch 0 4 2 index length 1 sub{
                        dup 3 add 1 exch{1 index exch get exch}for
                        5 1 roll 5 index exec
                }for pop pop
        }{exec}ifelse
}__NXbdef
/rectfill{gsave newpath {__NXRectPath fill} __NXProcessRectArgs grestore}__NXbdef
/rectclip{newpath {__NXRectPath} __NXProcessRectArgs clip newpath}__NXbdef
/rectstroke{
        gsave newpath dup type /arraytype eq{dup length 6 eq}{false}ifelse{
                {gsave __NXRectPath null concat stroke grestore}
                dup length array cvx copy dup 2 4 -1 roll put __NXProcessRectArgs
        }{{__NXRectPath stroke} __NXProcessRectArgs}ifelse grestore
}__NXbdef
/xyshow{
        0 1 3 index length 1 sub{
                currentpoint 4 index 3 index 1 getinterval show
                3 index 3 index 2 mul 1 add get add exch
                3 index 3 index 2 mul get add exch moveto pop
        }for pop pop
}__NXbdef
/xshow{
        0 1 3 index length 1 sub{
                currentpoint 4 index 3 index 1 getinterval show
                exch 3 index 3 index get add exch moveto pop
        }for pop pop
}__NXbdef
/yshow{
        0 1 3 index length 1 sub{
                currentpoint 4 index 3 index 1 getinterval show
                3 index 3 index get add moveto pop
        }for pop pop
}__NXbdef
/arct{arcto pop pop pop pop}__NXbdef
/setbbox{pop pop pop pop}__NXbdef
/ucache{}__NXbdef
/ucachestatus{mark 0 0 0 0 0}__NXbdef
/setucacheparams{cleartomark}__NXbdef
/uappend{systemdict begin cvx exec end}__NXbdef
/ueofill{gsave newpath uappend eofill grestore}__NXbdef
/ufill{gsave newpath uappend fill grestore}__NXbdef
/ustroke{
        gsave newpath dup length 6 eq
        {exch uappend concat}{uappend}ifelse
        stroke grestore
}__NXbdef
/__NXustrokepathMatrix dup where {pop pop}{matrix def}ifelse
/ustrokepath{
        newpath dup length 6 eq{
                exch uappend __NXustrokepathMatrix currentmatrix exch concat
                strokepath setmatrix
        }{uappend strokepath}ifelse
} __NXbdef
/upath{
        [exch {/ucache cvx}if pathbbox /setbbox cvx
         {/moveto cvx}{/lineto cvx}{/curveto cvx}{/closepath cvx}pathforall]cvx
} __NXbdef
/setstrokeadjust{pop}__NXbdef
/currentstrokeadjust{false}__NXbdef
/selectfont{exch findfont exch
dup type /arraytype eq {makefont}{scalefont}ifelse setfont}__NXbdef
/_NXCombineArrays{
        counttomark dup 2 add index dup length 3 -1 roll {
                2 index length sub dup 4 1 roll 1 index exch 4 -1 roll putinterval exch
        }repeat pop pop pop
}__NXbdef
/setcmykcolor{
        1.0 exch sub dup dup 6 -1 roll
        sub dup 0 lt{pop 0}if 5 1 roll
        4 -1 roll sub dup 0 lt{pop 0}if 3 1 roll
        exch sub dup 0 lt{pop 0}if setrgbcolor
}__NXbdef
/currentcmykcolor{currentrgbcolor 3{1.0 exch sub 3 1 roll}repeat 0}__NXbdef
/flushgraphics{}def
/setwindowtype{pop pop}def
/currentwindowtype{pop 0}def
/setalpha{pop}def
/currentalpha{1.0}def
/hidecursor{}def
/obscurecursor{}def
/revealcursor{}def
/setcursor{4 {pop}repeat}bind def
/showcursor{}def
/NextStepEncoding where not{
/NextStepEncoding StandardEncoding 256 array copy def
0 [129/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/Ccedilla/Egrave
/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex/Idieresis
/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis/Ugrave/Uacute
/Ucircumflex/Udieresis/Yacute/Thorn/mu/multiply/divide/copyright
176/registered 181/brokenbar 190/logicalnot 192/onesuperior 201/twosuperior
204/threesuperior 209/plusminus/onequarter/onehalf/threequarters/agrave
/aacute/acircumflex/atilde/adieresis/aring/ccedilla/egrave/eacute
/ecircumflex/edieresis/igrave 226/iacute 228/icircumflex/idieresis/eth
/ntilde 236/ograve/oacute/ocircumflex/otilde/odieresis 242/ugrave/uacute
/ucircumflex 246/udieresis/yacute 252/thorn/ydieresis]
{dup type /nametype eq
 {NextStepEncoding 2 index 2 index put pop 1 add}{exch pop}ifelse
}forall pop
/NextStepEncoding NextStepEncoding readonly def   
/_NXfstr 128 string dup 0 (_NX) putinterval def   
/findfont{
 % Because we can never let NextStepEncoding get into
 % SharedFontDirectory, we cannot reencode a font to NextStepEncoding
 % if we are in shared mode.  So if currentshared is true,
 % we call the normal findfont and return that
 /currentshared where {pop currentshared} {false} ifelse
 {//findfont exec}
 {dup _NXfstr 3 125 getinterval cvs length 3 add _NXfstr 0 3 -1 roll
  getinterval cvn exch FontDirectory 2 index known 
  {pop FontDirectory exch get}
  {//findfont exec dup /Encoding get StandardEncoding eq
   {    dup length dict exch
        {1 index /FID ne {2 index 3 1 roll put}{pop pop}ifelse}forall
         dup /Encoding NextStepEncoding put definefont
        }{exch pop} ifelse
   }ifelse
 }ifelse
}bind def
}{pop}ifelse
/_NXProcArray 5 array __NXdef
/_NXChannels 0 __NXdef
/_NXTotalBytes 0 __NXdef
/_NXDoImageOp{
        1 index{dup}{1}ifelse /_NXChannels exch store
        _NXChannels 2 add 2 roll _NXProcArray 0 _NXChannels getinterval astore pop
        5 index 4 index mul 2 index{1 sub 8 idiv 1 add mul}{mul 1 sub 8 idiv 1 add}ifelse
        4 index mul /_NXTotalBytes exch store pop exch pop
        gsave matrix invertmatrix concat 0.5 setgray 0 0 4 2 roll rectfill grestore
        {       0 1 _NXChannels 1 sub{
                        _NXProcArray exch get exec
                        length _NXTotalBytes exch sub /_NXTotalBytes exch store}for
                _NXTotalBytes 0 le{exit}if
        }loop /_NXProcArray 5 array def
}__NXbdef
/colorimage{_NXDoImageOp}__NXbdef
/alphaimage{1 add _NXDoImageOp}def
%%EndDocument

gsave
 /__NXbasematrix matrix currentmatrix def
grestore
%%EndProlog
%%BeginSetup
/TopDrawDict 200 dict def
/xyshow {
    mark exch aload length -2 2 {
        2 roll
    } for counttomark dup 2 add -1 roll pop 1 add -1 roll gsave {
        pop pop grestore rmoveto gsave
    } exch kshow grestore rmoveto
} bind def /currentalpha {
    1
} def /setalpha {
    pop
} bind def
TopDrawDict begin /prt_stack {
    (***Top of Stack\012) print pstack (---Bottom of Stack\012) print flush
} def /prt_top {
    (top item of stack) == dup == flush
} def /prtmat matrix def /prt_ctm {
    (current transformation matrix: ) print prtmat currentmatrix == flush
} def /tmmat matrix def /obmat matrix def /strmat matrix def /pgmat matrix def /idmat matrix def /sc1mt matrix def /sc2mt matrix def /sc3mt matrix def /sc4mt matrix def /sc5mt matrix def /sc6mt matrix def /sc7mt matrix def /inmat matrix def /ctmmt matrix def /octmmt matrix def /clpmt matrix def /weglet_mat matrix def /crlinw 1 def crlinw setlinewidth /crlinjn 0 def crlinjn setlinejoin /crlincp 0 def crlincp setlinecap /crmtrlmt currentmiterlimit def /crstrpat 0 def /crfilpat 0 def /crflat currentflat def /dftflat currentflat def /strinclr false def /crlingry 0 def /crlinred 0 def /crlingrn 0 def /crlinblu 0 def /crlinalph 1 def /filinclr false def /crfilgry 0 def /crfilred 0 def /crfilgrn 0 def /crfilblu 0 def /crfilalph 1 def /crfilstyl 0 def /txtdraw true def /txtinclr false def /txtwpat false def /txtwittrans false def /crtxtgry 0 def /crtxtred 0 def /crtxtgrn 0 def /crtxtblu 0 def /crtxtalph 1 def /crtxtpat 0 def /txlndraw true def /txlninclr false def /txlnwpat false def /txlnwittrans false def /crtxlngry 0 def /crtxlnred 0 def /crtxlngrn 0 def /crtxlnblu 0 def /crtxlnalph 1 def /crtxlnpat 0 def /hilittxt false def /strdsh [2 2] def /dshpatoff 0 def /usedash false def /filwpat false def /strwpat false def /filwittrans false def /strwittrans false def /crfrtarw false def /crendarw false def /rsave 0 def /esave 0 def /sslsave 0 def /lsave 0 def /clpsave 0 def /pathsave 0 def /tpatstr 10 string def /ptdist {
    sub dup mul 3 1 roll sub dup mul add sqrt
} bind def /dodrawctm {
    octmmt currentmatrix pop idmat obmat concatmatrix ctmmt currentmatrix sc1mt concatmatrix setmatrix
} bind def /undrawctm {
    obmat inmat invertmatrix ctmmt currentmatrix sc1mt concatmatrix setmatrix
} bind def /undrawmat {
    obmat aload pop 7 -1 roll astore
} bind def /unpagectm {
    octmmt setmatrix
} bind def /unpagemat {
    pgmat aload pop 7 -1 roll astore
} bind def /drtan {
    gsave 1 setalpha 0 setlinewidth 0.333333 setgray moveto lineto stroke grestore
} bind def /drdgrdln {
    gsave 1 setalpha 0 setlinewidth [1 2] 0 setdash setgray moveto lineto stroke grestore
} bind def /drgrdln {
    gsave 1 setalpha 0 setlinewidth setgray moveto lineto stroke grestore
} bind def end
TopDrawDict begin /rpath {
    newpath moveto dup 0 exch rlineto exch 0 rlineto 0 exch neg rlineto closepath
} bind def /rfpath {
    /rad3 exch def /hh3 exch def /ww3 exch def /yy1 exch def /xx1 exch def /xx2 xx1 ww3 add def /yy2 yy1 hh3 add def ww3 0.5 mul rad3 lt {
        /rad3 ww3 0.5 mul def
    } if hh3 0.5 mul rad3 lt {
        /rad3 hh3 0.5 mul def
    } if newpath xx1 yy1 hh3 0.5 mul add moveto xx1 yy2 xx2 yy2 rad3 arcto 4 {
        pop
    } repeat xx2 yy2 xx2 yy1 rad3 arcto 4 {
        pop
    } repeat xx2 yy1 xx1 yy1 rad3 arcto 4 {
        pop
    } repeat xx1 yy1 xx1 yy2 rad3 arcto 4 {
        pop
    } repeat closepath
} bind def /rfill {
    gsave dodrawctm crfilalph setalpha filinclr {
        crfilred crfilgrn crfilblu setrgbcolor
    } {
        crfilgry setgray
    } ifelse filwpat {
        4 2 roll rpath crfilpat findfont filwittrans {
            trpatfil
        } {
            oppatfil
        } ifelse
    } {
        rectfill
    } ifelse grestore
} bind def /rstroke {
    gsave dodrawctm crlinalph setalpha crlinw setlinewidth crlincp setlinecap crlinjn setlinejoin crmtrlmt setmiterlimit usedash {
        strdsh dshpatoff setdash
    } if strinclr {
        crlinred crlingrn crlinblu setrgbcolor
    } {
        crlingry setgray
    } ifelse 4 2 roll rpath unpagectm concat strwpat {
        crstrpat findfont strwittrans {
            trpatstrk
        } {
            oppatstrk
        } ifelse
    } {
        stroke
    } ifelse grestore
} bind def /mkrpath {
    dodrawctm rpath unpagectm
} bind def end
TopDrawDict begin /p1x 0 def /p1y 0 def /p2x 0 def /p2y 0 def /ssl {
    gsave dodrawctm crfrtarw crendarw or {
        /p1y 1 index def /p1x 2 index def /p2y 1 index 4 index add def /p2x 2 index 5 index add def newpath moveto rlineto
    } {
        newpath moveto rlineto
    } ifelse crlinalph setalpha crlinw setlinewidth crlincp setlinecap usedash {
        strdsh dshpatoff setdash
    } if strinclr {
        crlinred crlingrn crlinblu setrgbcolor
    } {
        crlingry setgray
    } ifelse aload pop strmat astore crfrtarw {
        currentlinewidth strmat p2x p2y p1x p1y arow
    } if crendarw {
        currentlinewidth strmat p1x p1y p2x p2y arow
    } if unpagectm concat strwpat {
        crstrpat findfont strwittrans {
            trpatstrk
        } {
            oppatstrk
        } ifelse
    } {
        stroke
    } ifelse grestore
} bind def end
TopDrawDict begin /elli {
    gsave dodrawctm translate scale newpath dup dup 0 360 arc closepath unpagectm {
        crfilalph setalpha filinclr {
            crfilred crfilgrn crfilblu setrgbcolor
        } {
            crfilgry setgray
        } ifelse gsave filwpat {
            crfilpat findfont filwittrans {
                trpatfil
            } {
                oppatfil
            } ifelse
        } {
            fill
        } ifelse grestore
    } if {
        crlinalph setalpha crlinw setlinewidth usedash {
            strdsh dshpatoff setdash
        } if strinclr {
            crlinred crlingrn crlinblu setrgbcolor
        } {
            crlingry setgray
        } ifelse concat strwpat {
            crstrpat findfont strwittrans {
                trpatstrk
            } {
                oppatstrk
            } ifelse
        } {
            stroke
        } ifelse
    } {
        pop
    } ifelse grestore
} bind def /estroke {
    gsave dodrawctm translate scale newpath dup dup 0 360 arc closepath crlinalph setalpha crlinw setlinewidth usedash {
        strdsh dshpatoff setdash
    } if strinclr {
        crlinred crlingrn crlinblu setrgbcolor
    } {
        crlingry setgray
    } ifelse unpagectm concat strwpat {
        crstrpat findfont strwittrans {
            trpatstrk
        } {
            oppatstrk
        } ifelse
    } {
        stroke
    } ifelse grestore
} bind def /efill {
    gsave dodrawctm translate scale newpath dup dup 0 360 arc closepath unpagectm crfilalph setalpha filinclr {
        crfilred crfilgrn crfilblu setrgbcolor
    } {
        crfilgry setgray
    } ifelse filwpat {
        crfilpat findfont filwittrans {
            trpatfil
        } {
            oppatfil
        } ifelse
    } {
        fill
    } ifelse grestore
} bind def /apstroke {
    gsave dodrawctm /pie exch def /radius exch def /yscale exch def /xscale exch def /yy exch def /xx exch def /angle2 exch def /angle1 exch def /closed exch def xx yy translate xscale yscale scale newpath pie {
        radius dup moveto
    } if radius dup dup angle1 angle2 arc closed pie or {
        closepath
    } if crlinalph setalpha closed not pie not and {
        crfrtarw {
            dup crlinw exch gsave newpath angle1 1 add cos radius mul radius add angle1 1 add sin radius mul radius add moveto angle1 cos radius mul radius add angle1 sin radius mul radius add lineto unpagectm {
                
            } {
                
            } {
                
            } {
                
            } pathforall arow grestore
        } if crendarw {
            dup crlinw exch gsave newpath angle2 1 sub cos radius mul radius add angle2 1 sub sin radius mul radius add moveto angle2 cos radius mul radius add angle2 sin radius mul radius add lineto unpagectm {
                
            } {
                
            } {
                
            } {
                
            } pathforall arow grestore
        } if
    } if crlincp setlinecap crlinalph setalpha crlinw setlinewidth usedash {
        strdsh dshpatoff setdash
    } if strinclr {
        crlinred crlingrn crlinblu setrgbcolor
    } {
        crlingry setgray
    } ifelse unpagectm concat strwpat {
        crstrpat findfont strwittrans {
            trpatstrk
        } {
            oppatstrk
        } ifelse
    } {
        stroke
    } ifelse grestore
} bind def /apfill {
    gsave dodrawctm /pie exch def /radius exch def /yscale exch def /xscale exch def /yy exch def /xx exch def xx yy translate xscale yscale scale newpath pie {
        radius dup moveto
    } if radius dup dup 5 -2 roll arc pie or {
        closepath
    } if 1 xscale div 1 yscale div scale crfilalph setalpha filinclr {
        crfilred crfilgrn crfilblu setrgbcolor
    } {
        crfilgry setgray
    } ifelse filwpat {
        crfilpat findfont filwittrans {
            trpatfil
        } {
            oppatfil
        } ifelse
    } {
        fill
    } ifelse grestore
} bind def /mkepath {
    dodrawctm /pie exch def /radius exch def /yscale exch def /xscale exch def /yy exch def /xx exch def /angle2 exch def /angle1 exch def /closed exch def xx yy translate xscale yscale scale newpath pie {
        radius dup moveto
    } if radius dup dup angle1 angle2 arc closed pie or {
        closepath
    } if unpagectm
} bind def end
TopDrawDict begin /dotx {
    gsave txtdraw {
        concat selectfont txtinclr {
            crtxtred crtxtgrn crtxtblu setrgbcolor
        } {
            crtxtgry setgray
        } ifelse crtxtalph setalpha moveto xyshow
    } {
        pop pop pop pop pop pop pop
    } ifelse grestore
} bind def /txtlin {
    gsave txlndraw {
        concat txlninclr {
            crtxlnred crtxlngrn crtxlnblu setrgbcolor
        } {
            crtxlngry setgray
        } ifelse crtxlnalph setalpha setlinewidth 0 setlinecap newpath moveto 0 rlineto stroke
    } {
        pop pop pop pop pop
    } ifelse grestore
} bind def end
%%EndSetup
gsave
0 0 639 407 rectclip
-31 -163 translate
31 163 639 407 rectclip
gsave
TopDrawDict begin
/invpats true def
/crlincp 0 def
/crlinjn 0 def
/crmtrlmt 10 def
/crlinw 2.5 def
/crlinalph 1 def
/crlinred 0 def /crlingrn 0 def /crlinblu 0 def /strinclr true def
/crfilalph 1 def
/crfilred 0 def /crfilgrn 0 def /crfilblu 0 def /filinclr true def
/filwpat false def
TopDrawDict /piddict known TopDrawDict /ipiddict known or {
    1 getpat /crfilpat exch def
} if
/filwittrans false def
/strwpat false def
TopDrawDict /piddict known TopDrawDict /ipiddict known or {
    1 getpat /crstrpat exch def
} if
/strwittrans false def
/usedash false def
/strdsh [2 2] def /dshpatoff 0 def
/crendarw false def
/crfrtarw false def
/txtdraw false def
/crtxtalph 1 def
/crtxtred 0 def /crtxtgrn 0 def /crtxtblu 0 def /txtinclr true def
/txtwpat false def
/txtwittrans false def
/txlndraw false def
/crtxlnalph 1 def
/crtxlnred 0 def /crtxlngrn 0 def /crtxlnblu 0 def /txlninclr true def
/txlnwittrans false def
/txlnwpat false def
1 0 0 1 0 0 sc5mt astore 123 -115 117 514 0.887187 0 0 0.775697 3.610028 127.62825 sc6mt astore ssl
1 0 0 1 0 0 sc5mt astore -102 -183 240 399 0.887187 0 0 0.775697 3.610028 127.62825 sc6mt astore ssl
1 0 0 1 0 0 sc5mt astore 203 72 242 399 0.887187 0 0 0.775697 3.610028 127.62825 sc6mt astore ssl
1 0 0 1 0 0 sc5mt astore -21 96 445 473 0.887187 0 0 0.775697 3.610028 127.62825 sc6mt astore ssl
1 0 0 1 0 0 sc5mt astore 158 -139 447 472 0.887187 0 0 0.775697 3.610028 127.62825 sc6mt astore ssl
1 0 0 1 0 0 sc5mt astore 143 -4 607 333 0.887187 0 0 0.775697 3.610028 127.62825 sc6mt astore ssl
1 0 0 1 0 0 sc5mt astore -161 -200 606 333 0.887187 0 0 0.775697 3.610028 127.62825 sc6mt astore ssl
1 0 0 1 0 0 sc5mt astore -306 84 444 133 0.887187 0 0 0.775697 3.610028 127.62825 sc6mt astore ssl
1 0 0 1 0 0 sc5mt astore 3 -75 445 133 0.887187 0 0 0.775697 3.610028 127.62825 sc6mt astore ssl
1 0 0 1 0 0 sc5mt astore -106 -33 138 217 0.887187 0 0 0.775697 3.610028 127.62825 sc6mt astore ssl
6 1 -1.083333 367 317 0.591458 0 0 0.537021 112.142517 203.288574 sc5mt astore efill
1 0 0 1 0 0 sc6mt astore 6 1 -1.083333 367 317 0.591458 0 0 0.537021 112.142517 203.288574 sc5mt astore estroke
6 1 -1.083333 367 317 0.591458 0 0 0.537021 -23.597031 18.672615 sc5mt astore efill
1 0 0 1 -162 -229 sc6mt astore 6 1 -1.083333 367 317 0.591458 0 0 0.537021 -23.597031 18.672615 sc5mt astore estroke
6 1 -1.083333 367 317 0.591458 0 0 0.537021 349.908508 33.410851 sc5mt astore efill
1 0 0 1 250 -201 sc6mt astore 6 1 -1.083333 367 317 0.591458 0 0 0.537021 349.908508 33.410851 sc5mt astore estroke
6 1 -1.083333 367 317 0.591458 0 0 0.537021 344.585388 353.773834 sc5mt astore efill
1 0 0 1 235 221 sc6mt astore 6 1 -1.083333 367 317 0.591458 0 0 0.537021 344.585388 353.773834 sc5mt astore estroke
6 1 -1.083333 367 317 0.517526 0 0 0.477352 -121.557236 267.969788 sc5mt astore efill
1 0 0 1 -565 -126 sc6mt astore 6 1 -1.083333 367 317 0.517526 0 0 0.477352 -121.557236 267.969788 sc5mt astore estroke
6 1 -1.083333 367 317 0.591458 0 0 0.537021 23.423859 380.147552 sc5mt astore efill
1 0 0 1 -109 237 sc6mt astore 6 1 -1.083333 367 317 0.591458 0 0 0.537021 23.423859 380.147552 sc5mt astore estroke
/txtdraw true def
/txlndraw true def
(V) [0 0] 297 535 /Helvetica [ 18 1 mul 0 0 18 0 0 ] [0.887187 0 0 0.775697 10.707521 126.076851] dotx
/txtdraw true def
/txlndraw true def
(6 ) [10.007996 0 0 0] 311.003998 527.799988 /Helvetica [ 18 1 mul 0 0 18 0 0 ] [0.887187 0 0 0.775697 10.707521 126.076851] dotx
/txtdraw true def
/txlndraw true def
(V) [0 0] 297 535 /Helvetica [ 18 1 mul 0 0 18 0 0 ] [0.887187 0 0 0.775697 -56.718658 -247.033569] dotx
/txtdraw true def
/txlndraw true def
(4 ) [8.895996 0 0 0] 311.003998 528.599976 /Helvetica [ 16 1 mul 0 0 16 0 0 ] [0.887187 0 0 0.775697 -56.718658 -247.033569] dotx
/txtdraw true def
/txlndraw true def
(V) [0 0] 297 535 /Helvetica [ 18 1 mul 0 0 18 0 0 ] [0.887187 0 0 0.775697 316.786896 -233.071014] dotx
/txtdraw true def
/txlndraw true def
(3 ) [8.895996 0 0 0] 311.003998 528.599976 /Helvetica [ 16 1 mul 0 0 16 0 0 ] [0.887187 0 0 0.775697 316.786896 -233.071014] dotx
/txtdraw true def
/txlndraw true def
(V) [0 0] 297 535 /Helvetica [ 18 1 mul 0 0 18 0 0 ] [0.887187 0 0 0.775697 79.020889 -60.866196] dotx
/txtdraw true def
/txlndraw true def
(1 ) [8.895996 0 0 0] 311.003998 528.599976 /Helvetica [ 16 1 mul 0 0 16 0 0 ] [0.887187 0 0 0.775697 79.020889 -60.866196] dotx
/txtdraw true def
/txlndraw true def
(V) [0 0] 297 535 /Helvetica [ 18 1 mul 0 0 18 0 0 ] [0.887187 0 0 0.775697 312.350952 84.964897] dotx
/txtdraw true def
/txlndraw true def
(2 ) [8.895996 0 0 0] 311.003998 528.599976 /Helvetica [ 16 1 mul 0 0 16 0 0 ] [0.887187 0 0 0.775697 312.350952 84.964897] dotx
( ) [0 0] 297 528.599976 /Helvetica [ 16 1 mul 0 0 16 0 0 ] [0.887187 0 0 0.775697 309.689392 88.067688] dotx
/txtdraw true def
/txlndraw true def
(V) [0 0] 297 535 /Helvetica [ 18 1 mul 0 0 18 0 0 ] [0.887187 0 0 0.775697 -186.247894 -19.754242] dotx
/txtdraw true def
/txlndraw true def
(5 ) [8.895996 0 0 0] 311.003998 528.599976 /Helvetica [ 16 1 mul 0 0 16 0 0 ] [0.887187 0 0 0.775697 -186.247894 -19.754242] dotx
/crlinw 4.9 def
1 0 0 1 0 0 sc5mt astore 255 380 10 -11 0.887187 0 0 0.775697 3.610029 127.628235 sc6mt astore rstroke
/crlinw 1.4 def
1 0 0 1 0 0 sc5mt astore 107 -61 260 375 0.887187 0 0 0.775697 3.610029 127.628235 sc6mt astore ssl
/txtdraw true def
/txlndraw true def
(x) [0 0] 280 391 /Helvetica [ 18 1 mul 0 0 18 0 0 ] [0.887187 0 0 0.775697 -37.200554 98.927437] dotx
/txtdraw true def
/txlndraw true def
(i ) [3.552002 0 0 0] 289 384.600006 /Helvetica [ 16 1 mul 0 0 16 0 0 ] [0.887187 0 0 0.775697 -37.200554 98.927437] dotx
1 0 0 1 0 0 sc5mt astore 11 164 260 374 0.887187 0 0 0.775697 3.610029 127.628235 sc6mt astore ssl
1 0 0 1 0 0 sc5mt astore -182 -4 260 375 0.887187 0 0 0.775697 3.610029 127.628235 sc6mt astore ssl
1 0 0 1 0 0 sc5mt astore 372 131 260 375 0.887187 0 0 0.775697 3.610029 127.628235 sc6mt astore ssl
1 0 0 1 0 0 sc5mt astore -41 -297 260 372 0.887187 0 0 0.775697 3.610029 127.628235 sc6mt astore ssl
/txtdraw true def
/txlndraw true def
( ) [0 0] 259 371 /Helvetica [ 18 1 mul 0 0 18 0 0 ] [0.887187 0 0 0.775697 3.610029 127.628235] dotx
1 0 0 1 0 0 sc5mt astore 376 -278 260 374 0.887187 0 0 0.775697 3.610029 127.628235 sc6mt astore ssl
/txtdraw true def
/txlndraw true def
(d) [0 0] 357 445 /Helvetica-Bold [ 16 1 mul 0 0 16 0 0 ] [1 0 0 1 6 -1] dotx
/txtdraw true def
/txlndraw true def
(i2) [4.447998 0 0 0] 366.776001 438.600006 /Helvetica-Bold [ 16 1 mul 0 0 16 0 0 ] [1 0 0 1 6 -1] dotx
/txtdraw true def
/txlndraw true def
( ) [0 0] 380.119995 445 /Helvetica-Bold [ 16 1 mul 0 0 16 0 0 ] [1 0 0 1 6 -1] dotx
( ) [0 0] 372 443 /Helvetica-Bold [ 16 1 mul 0 0 16 0 0 ] [1 0 0 1 -7 -9] dotx
( ) [0 0] 374 443 /Helvetica-Bold [ 16 1 mul 0 0 16 0 0 ] [1 0 0 1 0 0] dotx
(d) [0 0] 357 445 /Helvetica-Bold [ 16 1 mul 0 0 16 0 0 ] [1 0 0 1 -226 -45] dotx
/txtdraw true def
/txlndraw true def
(i5) [4.447998 0 0 0] 366.776001 438.600006 /Helvetica-Bold [ 16 1 mul 0 0 16 0 0 ] [1 0 0 1 -226 -45] dotx
/txtdraw true def
/txlndraw true def
( ) [0 0] 380.119995 445 /Helvetica-Bold [ 16 1 mul 0 0 16 0 0 ] [1 0 0 1 -226 -45] dotx
(d) [0 0] 357 445 /Helvetica-Bold [ 16 1 mul 0 0 16 0 0 ] [1 0 0 1 -134 -133] dotx
/txtdraw true def
/txlndraw true def
(i4) [4.447998 0 0 0] 366.776001 438.600006 /Helvetica-Bold [ 16 1 mul 0 0 16 0 0 ] [1 0 0 1 -134 -133] dotx
/txtdraw true def
/txlndraw true def
( ) [0 0] 380.119995 445 /Helvetica-Bold [ 16 1 mul 0 0 16 0 0 ] [1 0 0 1 -134 -133] dotx
(d) [0 0] 357 445 /Helvetica-Bold [ 16 1 mul 0 0 16 0 0 ] [1 0 0 1 23 -147] dotx
/txtdraw true def
/txlndraw true def
(i3) [4.447998 0 0 0] 366.776001 438.600006 /Helvetica-Bold [ 16 1 mul 0 0 16 0 0 ] [1 0 0 1 23 -147] dotx
/txtdraw true def
/txlndraw true def
( ) [0 0] 380.119995 445 /Helvetica-Bold [ 16 1 mul 0 0 16 0 0 ] [1 0 0 1 23 -147] dotx
(d) [0 0] 357 445 /Helvetica-Bold [ 16 1 mul 0 0 16 0 0 ] [1 0 0 1 -69 -47] dotx
/txtdraw true def
/txlndraw true def
(i1) [4.447998 0 0 0] 366.776001 438.600006 /Helvetica-Bold [ 16 1 mul 0 0 16 0 0 ] [1 0 0 1 -69 -47] dotx
/txtdraw true def
/txlndraw true def
( ) [0 0] 380.119995 445 /Helvetica-Bold [ 16 1 mul 0 0 16 0 0 ] [1 0 0 1 -69 -47] dotx
(d) [0 0] 357 445 /Helvetica-Bold [ 16 1 mul 0 0 16 0 0 ] [1 0 0 1 -109 56] dotx
/txtdraw true def
/txlndraw true def
(i6) [4.447998 0 0 0] 366.776001 438.600006 /Helvetica-Bold [ 16 1 mul 0 0 16 0 0 ] [1 0 0 1 -109 56] dotx
/txtdraw true def
/txlndraw true def
( ) [0 0] 380.119995 445 /Helvetica-Bold [ 16 1 mul 0 0 16 0 0 ] [1 0 0 1 -109 56] dotx
end
grestore
grestore
%%Trailer

%%EndDocument
 GE /Times-Bold SF
16850 52946 MT
(Figure 4-5:)SH
/Times-Roman SF
22623 XM
(Vector quantization of a continuous-valued observations.  All)SH
22476 54142 MT
(observations)SH
/Times-Bold SF
28311 XM
(x)SH
/Times-Roman SF
29386 XM
(are replaced by the closest prototype vector)SH
/Times-Italic SF
48779 XM
(v)SH
/Times-Roman SF
49622 XM
(.)SH
8 /Times-Italic AF
49267 54487 MT
(k)SH
9 SS 
28861 54502 MT
(i)SH
11 /Times-Roman AF
13300 57127 MT
(Linear-predictive coding \050LPC\051 or LPC cepstral coefficients,)
59 W( derived from a windowed portion)60 W
10800 58866 MT
(of the speech signal, are commonly used as the representation of the observations {)131 W
/Times-Bold SF
(x)SH
/Times-Roman SF
49907 XM
(}. Prototype)537 W
8 /Times-Italic AF
49685 59211 MT
(i)SH
11 /Times-Roman AF
10800 60605 MT
(vectors for a VQ)
126 W( codebook are derived via cluster analysis of a large body of observation vectors.)127 W
10800 62344 MT
(The number of prototypes \050)164 W
/Times-Italic SF
(M)SH
/Times-Roman SF
(\051 is chosen)
164 W( such that the training and storage requirements are min-)163 W
10800 64083 MT
(imized given a reasonable level of distortion or quantization noise.)
223 W( Partitioning)
722 W( the observation)224 W
10800 65822 MT
(vector and using multiple codebooks has been shown to)
110 W( significantly reduce quantization noise)
109 W( [6].)SH
10800 67561 MT
(Discrete HMMs use a VQ codebook to map the observation)SH
/Times-Bold SF
37436 XM
(x)SH
/Times-Roman SF
38483 XM
(into one of the prototype indexes)SH
/Times-Italic SF
53269 XM
(k)SH
/Times-Roman SF
54032 XM
(as)SH
8 /Times-Italic AF
37986 67906 MT
(i)SH
11 SS 
15200 69213 MT
(k)SH
/Times-Roman SF
15838 XM
(=)SH
/Times-Italic SF
16608 XM
(argmin)SH
/Times-Roman SF
20008 XM
([)SH
/Times-Italic SF
(d)SH
/Times-Roman SF
(\050)SH
/Times-Bold SF
(x)SH
/Times-Roman SF
22062 XM
(,)SH
/Times-Italic SF
(v)SH
/Times-Roman SF
23047 XM
(\051])SH
53143 XM
(\0504.25\051)SH
8 /Times-Italic AF
19786 69558 MT
(j)SH
21840 XM
(i)SH
22825 XM
(j)SH
11 /Times-Roman AF
10800 70952 MT
(where)SH
/Times-Italic SF
13838 XM
(d)SH
/Times-Roman SF
(\050)SH
/Symbol SF
(\327)SH
/Times-Roman SF
(\051 is some)
77 W( suitably defined similarity measure.  The sorting process in the second manufac-)78 W
ES
%%Page: 85 86
BS
0 SI
10 /Times-Roman AF
54800 4286 MT
(85)SH
11 SS 
10800 7955 MT
(turing example was an)
108 W( example of vector quantization in a discrete HMM, and VQ is illustrated in)107 W
10800 9694 MT
(two-dimensions in Figure 4-5.  With VQ and discrete output densities, the)
69 W( discrete HMM can easily)70 W
10800 11433 MT
(model non-parametric densities, and computation of)
54 W( the output probability)53 W
/Times-Italic SF
44338 XM
(b)SH
/Times-Roman SF
45138 XM
([)SH
/Times-Italic SF
(O)SH
/Times-Roman SF
46548 XM
(] is an efficient table)53 W
9 /Times-Italic AF
44888 11793 MT
(j)SH
46298 XM
(t)SH
11 /Times-Roman AF
10800 13172 MT
(lookup. There)
581 W( is an inherent loss of information associated with VQ, however, which may)
153 W( lower)154 W
10800 14911 MT
(recognition rates.)SH
13300 17896 MT
(To overcome distortions and)
200 W( loss of information caused by the vector quantization process,)199 W
10800 19635 MT
(CDHMMs use continuous output density functions which obviate the need for VQ.  While)
253 W( the)254 W
10800 21374 MT
(CDHMMs directly)
10 W( model speech parameters, a finite mixture density must be estimated for each state)9 W
10800 23113 MT
(in the model.  The EM \050estimation)
108 W( and maximization\051 algorithm)
109 W( [41], [42])
SH( specifies a general rees-)109 W
10800 24852 MT
(timation procedure)
89 W( for finite mixture densities, and a number of researchers have expressed the EM)88 W
10800 26591 MT
(formulations in the context of specific HMMs)
211 W( [38], [43], [16].)
SH( Assuming)697 W
/Times-Italic SF
45356 XM
(M)SH
/Times-Roman SF
(-component gaussian)211 W
10800 28330 MT
(mixtures of the form)SH
8 /Times-Italic AF
19077 29776 MT
(M)SH
11 SS 
15200 30931 MT
(b)SH
/Times-Roman SF
16000 XM
([)SH
/Times-Italic SF
(O)SH
/Times-Roman SF
17410 XM
(])
150 MX(=)SH
/Times-Italic SF
20275 XM
(c)SH
21563 XM
(N)SH
/Times-Roman SF
(\050)SH
/Times-Italic SF
(O)SH
/Times-Roman SF
23679 XM
(,)SH
/Symbol SF
(m)SH
/Times-Roman SF
25388 XM
(,)SH
/Symbol SF
(S)SH
/Times-Roman SF
27114 XM
(\051)SH
53143 XM
(\0504.26\051)SH
16 /Symbol AF
18840 31231 MT
(\345)SH
8 /Times-Italic AF
20763 31276 MT
(jm)SH
23457 XM
(t)SH
24588 XM
(jm)SH
26314 XM
(jm)SH
9 SS 
15750 31291 MT
(j)SH
17160 XM
(t)SH
8 SS 
18696 32025 MT
(m)SH
/Times-Roman SF
(=1)SH
11 SS 
10800 33130 MT
(the mixture parameter reestimation formulas can be)
218 W( expressed in terms of the forward-backward)217 W
10800 34869 MT
(variables as \050 [44]\051)SH
8 /Times-Italic AF
18666 36315 MT
(T)SH
11 /Symbol AF
19609 37470 MT
(g)SH
/Times-Roman SF
20311 XM
([)SH
/Times-Italic SF
(j)SH
/Times-Roman SF
(,)SH
/Times-Italic SF
(k)SH
/Times-Roman SF
(])SH
16 /Symbol AF
18318 37770 MT
(\345)SH
9 /Times-Italic AF
20061 37830 MT
(t)SH
8 SS 
18352 38564 MT
(t)SH
/Times-Roman SF
(=1)SH
11 /Symbol AF
15200 38785 MT
(-)SH
5829 50 17301 38939 UL
/Times-Italic SF
15200 39184 MT
(c)SH
/Times-Roman SF
16531 XM
(=)SH
53143 XM
(\0504.27\051)SH
8 /Times-Italic AF
15804 39529 MT
(jk)SH
17649 39729 MT
(T)SH
19123 XM
(M)SH
11 /Symbol AF
20321 40884 MT
(g)SH
/Times-Roman SF
21023 XM
([)SH
/Times-Italic SF
(j)SH
/Times-Roman SF
(,)SH
/Times-Italic SF
(m)SH
/Times-Roman SF
(])SH
16 /Symbol AF
17301 41184 MT
(\345)SH
18886 XM
(\345)SH
9 /Times-Italic AF
20773 41244 MT
(t)SH
8 SS 
17335 41978 MT
(t)SH
/Times-Roman SF
(=1)SH
/Times-Italic SF
18742 XM
(m)SH
/Times-Roman SF
(=1)SH
/Times-Italic SF
17649 43089 MT
(T)SH
11 /Symbol AF
18592 44244 MT
(g)SH
/Times-Roman SF
19294 XM
([)SH
/Times-Italic SF
(j)SH
/Times-Roman SF
(,)SH
/Times-Italic SF
(k)SH
/Times-Roman SF
(])SH
/Times-Italic SF
(O)SH
16 /Symbol AF
17301 44544 MT
(\345)SH
8 /Times-Italic AF
21889 44589 MT
(t)SH
9 SS 
19044 44604 MT
(t)SH
8 SS 
17335 45338 MT
(t)SH
/Times-Roman SF
(=1)SH
11 /Symbol AF
15200 45559 MT
(-)SH
4810 50 17301 45713 UL
15200 45958 MT
(m)SH
/Times-Roman SF
16531 XM
(=)SH
8 /Times-Italic AF
15804 46303 MT
(jk)SH
18157 46503 MT
(T)SH
11 /Symbol AF
19100 47658 MT
(g)SH
/Times-Roman SF
19802 XM
([)SH
/Times-Italic SF
(j)SH
/Times-Roman SF
(,)SH
/Times-Italic SF
(k)SH
/Times-Roman SF
(])SH
16 /Symbol AF
17809 47958 MT
(\345)SH
9 /Times-Italic AF
19552 48018 MT
(t)SH
8 SS 
17843 48752 MT
(t)SH
/Times-Roman SF
(=1)SH
/Times-Italic SF
17800 49863 MT
(T)SH
28944 50673 MT
(T)SH
11 /Symbol AF
18743 51018 MT
(g)SH
/Times-Roman SF
19417 XM
([)SH
/Times-Italic SF
(j)SH
/Times-Roman SF
(,)SH
/Times-Italic SF
(k)SH
/Times-Roman SF
(]\050)SH
/Times-Italic SF
(O)SH
/Symbol SF
22750 XM
(-)
150 MX(m)SH
/Times-Roman SF
24715 XM
(\051\050)SH
/Times-Italic SF
(O)SH
/Symbol SF
26613 XM
(-)
150 MX(m)SH
/Times-Roman SF
28578 XM
(\051)SH
16 /Symbol AF
17452 51318 MT
(\345)SH
8 /Times-Italic AF
19195 51363 MT
(t)SH
22378 XM
(t)SH
24138 XM
(jk)SH
26241 XM
(t)SH
28001 XM
(jk)SH
755 50 15200 51736 UL
17486 52112 MT
(t)SH
/Times-Roman SF
(=1)SH
11937 50 17452 52487 UL
11 /Symbol AF
15200 52732 MT
(S)SH
/Times-Roman SF
16682 XM
(=)SH
8 /Times-Italic AF
15955 53077 MT
(jk)SH
21885 53277 MT
(T)SH
11 /Symbol AF
22828 54432 MT
(g)SH
/Times-Roman SF
23502 XM
([)SH
/Times-Italic SF
(j)SH
/Times-Roman SF
(,)SH
/Times-Italic SF
(k)SH
/Times-Roman SF
(])SH
16 /Symbol AF
21537 54732 MT
(\345)SH
8 /Times-Italic AF
23280 54777 MT
(t)SH
21571 55526 MT
(t)SH
/Times-Roman SF
(=1)SH
11 SS 
10800 56631 MT
(where)SH
/Symbol SF
19268 58283 MT
(a)SH
/Times-Roman SF
20212 XM
([)SH
/Times-Italic SF
(j)SH
/Times-Roman SF
(])SH
/Symbol SF
(b)SH
/Times-Roman SF
22104 XM
([)SH
/Times-Italic SF
(j)SH
/Times-Roman SF
(])SH
/Times-Italic SF
25212 58308 MT
(c)SH
26277 XM
(N)SH
/Times-Roman SF
(\050)SH
/Times-Italic SF
(O)SH
/Times-Roman SF
28393 XM
(,)SH
/Symbol SF
(m)SH
/Times-Roman SF
29879 XM
(,)SH
/Symbol SF
(S)SH
/Times-Roman SF
31382 XM
(\051)SH
9 /Times-Italic AF
19962 58643 MT
(t)SH
21854 XM
(t)SH
8 SS 
25700 58653 MT
(jk)SH
28171 XM
(t)SH
29302 XM
(jk)SH
30805 XM
(jk)SH
5165 50 18623 59028 UL
8784 50 24088 59028 UL
11 /Symbol AF
15200 59273 MT
(g)SH
/Times-Roman SF
15902 XM
([)SH
/Times-Italic SF
(j)SH
/Times-Roman SF
(,)SH
/Times-Italic SF
(k)SH
/Times-Roman SF
(])
150 MX(=)SH
53143 XM
(\0504.28\051)SH
9 /Times-Italic AF
15652 59633 MT
(t)SH
8 SS 
18926 59818 MT
(N)SH
24469 XM
(M)SH
11 /Symbol AF
19914 60973 MT
(a)SH
/Times-Roman SF
20858 XM
([)SH
/Times-Italic SF
(i)SH
/Times-Roman SF
(])SH
/Symbol SF
(b)SH
/Times-Roman SF
22750 XM
([)SH
/Times-Italic SF
(i)SH
/Times-Roman SF
(])SH
/Times-Italic SF
25667 XM
(c)SH
26955 XM
(N)SH
/Times-Roman SF
(\050)SH
/Times-Italic SF
(O)SH
/Times-Roman SF
29071 XM
(,)SH
/Symbol SF
(m)SH
/Times-Roman SF
30780 XM
(,)SH
/Symbol SF
(S)SH
/Times-Roman SF
32506 XM
(\051)SH
16 /Symbol AF
18623 61273 MT
(\345)SH
24232 XM
(\345)SH
8 /Times-Italic AF
26155 61318 MT
(jm)SH
28849 XM
(t)SH
29980 XM
(jm)SH
31706 XM
(jm)SH
9 SS 
20608 61333 MT
(t)SH
22500 XM
(t)SH
8 SS 
18657 62067 MT
(i)SH
/Times-Roman SF
(=1)SH
/Times-Italic SF
24088 XM
(m)SH
/Times-Roman SF
(=1)SH
9 SS 
38539 62947 MT
(th)SH
11 SS 
10800 63310 MT
(is the probability of being in)
69 W( state)70 W
/Times-Italic SF
26348 XM
(j)SH
/Times-Roman SF
26999 XM
(at time)70 W
/Times-Italic SF
30439 XM
(t)SH
/Times-Roman SF
31090 XM
(and having the)70 W
/Times-Italic SF
38051 XM
(k)SH
/Times-Roman SF
39584 XM
(component produce the observation.)70 W
/Symbol SF
18393 64650 MT
(-)SH
9 /Times-Roman AF
42058 64686 MT
(th)SH
11 SS 
10800 65049 MT
(The formula for)98 W
/Symbol SF
18393 XM
(m)SH
/Times-Roman SF
19947 XM
(is the expected value of the contribution of the)98 W
/Times-Italic SF
41570 XM
(k)SH
/Times-Roman SF
43131 XM
(component to)
98 W( the the obser-)97 W
8 /Times-Italic AF
18997 65394 MT
(jk)SH
9 /Times-Roman AF
45123 66425 MT
(th)SH
11 SS 
10800 66788 MT
(vation vector, which is the number of times the system is in state)39 W
/Times-Italic SF
40087 XM
(j)SH
/Times-Roman SF
40707 XM
(with the)39 W
/Times-Italic SF
44635 XM
(k)SH
/Times-Roman SF
46137 XM
(component producing)40 W
10800 68527 MT
(the observation, weighted by the observation, over the number of times the system is)
214 W( in state)213 W
/Times-Italic SF
55219 XM
(j)SH
/Times-Roman SF
(.)SH
755 50 30898 69723 UL
10800 70719 MT
(Interpretation of the reestimation formula for)SH
/Symbol SF
30898 XM
(S)SH
/Times-Roman SF
32505 XM
(is essentially the same.)SH
8 /Times-Italic AF
31653 71064 MT
(jk)SH
ES
%%Page: 86 87
BS
0 SI
10 /Times-Roman AF
54800 4286 MT
(86)SH
11 SS 
13300 7955 MT
(An important issue in CDHMM implementation is whether to use diagonal or)
113 W( full covariance)114 W
10800 9694 MT
(matrices for the)
107 W( normal mixture densities.  Full covariance matrices make fewer assumptions about)106 W
10800 11433 MT
(the data and therefore model the)
14 W( distribution more accurately.  This requires estimation of many more)15 W
10800 13172 MT
(parameters, however, and additional training data and)
38 W( time.  Brown)
37 W( [45])
SH( showed that error rates for a)37 W
10800 14911 MT
(diagonal-covariance HMM were about twice that of a)
57 W( full covariance system.  Huang)
58 W( [20],)
SH( however,)58 W
10800 16650 MT
(has reported)
307 W( marginally lower recognition rates with a full covariance Gaussian than with the)306 W
10800 18389 MT
(diagonal HMM, albeit with additional constraints imposed by tied parameters.)SH
635 1000 0 11700 56201 GB 
%%BeginDocument: /usr0/rozzi/Documentation/PhDThesis/Chapter4/ProbAssign.eps
%!PS-Adobe-2.0 EPSF-2.0
%%Title: 
%%Creator: TopDraw
%%CreationDate: Mon Mar  4 09:37:05 1991
%%For: rozzi
%%DocumentFonts: (atend)
%%%Pages: 0 1
%%BoundingBox: 0 0 680 554
%%EndComments

%%BeginDocument: /usr/lib/NextStep/printPackage.ps
%!PS-Adobe-2.0
%%Title: Printing Package
%%EndComments
%Version: 2.0
%Copyright: 1988, NeXT, Inc.

/__NXdef{1 index where{pop pop pop}{def}ifelse}bind def
/__NXbdef{1 index where{pop pop pop}{bind def}ifelse}bind def
/UserObjects 10 array __NXdef
/defineuserobject{
        exch dup 1 add dup UserObjects length gt{
                array dup 0 UserObjects putinterval
                /UserObjects exch def
        }{pop}ifelse UserObjects exch 3 -1 roll put
}__NXbdef
/undefineuserobject{UserObjects exch null put}__NXbdef
/execuserobject{UserObjects exch get exec}__NXbdef
/__NXRectPath{4 2 roll moveto 1 index 0 rlineto
0 exch rlineto neg 0 rlineto closepath}__NXbdef
/__NXProcessRectArgs{
        1 index type /arraytype eq{
                exch 0 4 2 index length 1 sub{
                        dup 3 add 1 exch{1 index exch get exch}for
                        5 1 roll 5 index exec
                }for pop pop
        }{exec}ifelse
}__NXbdef
/rectfill{gsave newpath {__NXRectPath fill} __NXProcessRectArgs grestore}__NXbdef
/rectclip{newpath {__NXRectPath} __NXProcessRectArgs clip newpath}__NXbdef
/rectstroke{
        gsave newpath dup type /arraytype eq{dup length 6 eq}{false}ifelse{
                {gsave __NXRectPath null concat stroke grestore}
                dup length array cvx copy dup 2 4 -1 roll put __NXProcessRectArgs
        }{{__NXRectPath stroke} __NXProcessRectArgs}ifelse grestore
}__NXbdef
/xyshow{
        0 1 3 index length 1 sub{
                currentpoint 4 index 3 index 1 getinterval show
                3 index 3 index 2 mul 1 add get add exch
                3 index 3 index 2 mul get add exch moveto pop
        }for pop pop
}__NXbdef
/xshow{
        0 1 3 index length 1 sub{
                currentpoint 4 index 3 index 1 getinterval show
                exch 3 index 3 index get add exch moveto pop
        }for pop pop
}__NXbdef
/yshow{
        0 1 3 index length 1 sub{
                currentpoint 4 index 3 index 1 getinterval show
                3 index 3 index get add moveto pop
        }for pop pop
}__NXbdef
/arct{arcto pop pop pop pop}__NXbdef
/setbbox{pop pop pop pop}__NXbdef
/ucache{}__NXbdef
/ucachestatus{mark 0 0 0 0 0}__NXbdef
/setucacheparams{cleartomark}__NXbdef
/uappend{systemdict begin cvx exec end}__NXbdef
/ueofill{gsave newpath uappend eofill grestore}__NXbdef
/ufill{gsave newpath uappend fill grestore}__NXbdef
/ustroke{
        gsave newpath dup length 6 eq
        {exch uappend concat}{uappend}ifelse
        stroke grestore
}__NXbdef
/__NXustrokepathMatrix dup where {pop pop}{matrix def}ifelse
/ustrokepath{
        newpath dup length 6 eq{
                exch uappend __NXustrokepathMatrix currentmatrix exch concat
                strokepath setmatrix
        }{uappend strokepath}ifelse
} __NXbdef
/upath{
        [exch {/ucache cvx}if pathbbox /setbbox cvx
         {/moveto cvx}{/lineto cvx}{/curveto cvx}{/closepath cvx}pathforall]cvx
} __NXbdef
/setstrokeadjust{pop}__NXbdef
/currentstrokeadjust{false}__NXbdef
/selectfont{exch findfont exch
dup type /arraytype eq {makefont}{scalefont}ifelse setfont}__NXbdef
/_NXCombineArrays{
        counttomark dup 2 add index dup length 3 -1 roll {
                2 index length sub dup 4 1 roll 1 index exch 4 -1 roll putinterval exch
        }repeat pop pop pop
}__NXbdef
/setcmykcolor{
        1.0 exch sub dup dup 6 -1 roll
        sub dup 0 lt{pop 0}if 5 1 roll
        4 -1 roll sub dup 0 lt{pop 0}if 3 1 roll
        exch sub dup 0 lt{pop 0}if setrgbcolor
}__NXbdef
/currentcmykcolor{currentrgbcolor 3{1.0 exch sub 3 1 roll}repeat 0}__NXbdef
/flushgraphics{}def
/setwindowtype{pop pop}def
/currentwindowtype{pop 0}def
/setalpha{pop}def
/currentalpha{1.0}def
/hidecursor{}def
/obscurecursor{}def
/revealcursor{}def
/setcursor{4 {pop}repeat}bind def
/showcursor{}def
/NextStepEncoding where not{
/NextStepEncoding StandardEncoding 256 array copy def
0 [129/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/Ccedilla/Egrave
/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex/Idieresis
/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis/Ugrave/Uacute
/Ucircumflex/Udieresis/Yacute/Thorn/mu/multiply/divide/copyright
176/registered 181/brokenbar 190/logicalnot 192/onesuperior 201/twosuperior
204/threesuperior 209/plusminus/onequarter/onehalf/threequarters/agrave
/aacute/acircumflex/atilde/adieresis/aring/ccedilla/egrave/eacute
/ecircumflex/edieresis/igrave 226/iacute 228/icircumflex/idieresis/eth
/ntilde 236/ograve/oacute/ocircumflex/otilde/odieresis 242/ugrave/uacute
/ucircumflex 246/udieresis/yacute 252/thorn/ydieresis]
{dup type /nametype eq
 {NextStepEncoding 2 index 2 index put pop 1 add}{exch pop}ifelse
}forall pop
/NextStepEncoding NextStepEncoding readonly def   
/_NXfstr 128 string dup 0 (_NX) putinterval def   
/findfont{
 % Because we can never let NextStepEncoding get into
 % SharedFontDirectory, we cannot reencode a font to NextStepEncoding
 % if we are in shared mode.  So if currentshared is true,
 % we call the normal findfont and return that
 /currentshared where {pop currentshared} {false} ifelse
 {//findfont exec}
 {dup _NXfstr 3 125 getinterval cvs length 3 add _NXfstr 0 3 -1 roll
  getinterval cvn exch FontDirectory 2 index known 
  {pop FontDirectory exch get}
  {//findfont exec dup /Encoding get StandardEncoding eq
   {    dup length dict exch
        {1 index /FID ne {2 index 3 1 roll put}{pop pop}ifelse}forall
         dup /Encoding NextStepEncoding put definefont
        }{exch pop} ifelse
   }ifelse
 }ifelse
}bind def
}{pop}ifelse
/_NXProcArray 5 array __NXdef
/_NXChannels 0 __NXdef
/_NXTotalBytes 0 __NXdef
/_NXDoImageOp{
        1 index{dup}{1}ifelse /_NXChannels exch store
        _NXChannels 2 add 2 roll _NXProcArray 0 _NXChannels getinterval astore pop
        5 index 4 index mul 2 index{1 sub 8 idiv 1 add mul}{mul 1 sub 8 idiv 1 add}ifelse
        4 index mul /_NXTotalBytes exch store pop exch pop
        gsave matrix invertmatrix concat 0.5 setgray 0 0 4 2 roll rectfill grestore
        {       0 1 _NXChannels 1 sub{
                        _NXProcArray exch get exec
                        length _NXTotalBytes exch sub /_NXTotalBytes exch store}for
                _NXTotalBytes 0 le{exit}if
        }loop /_NXProcArray 5 array def
}__NXbdef
/colorimage{_NXDoImageOp}__NXbdef
/alphaimage{1 add _NXDoImageOp}def
%%EndDocument

gsave
 /__NXbasematrix matrix currentmatrix def
grestore
%%EndProlog
%%BeginSetup
/TopDrawDict 200 dict def
/xyshow {
    mark exch aload length -2 2 {
        2 roll
    } for counttomark dup 2 add -1 roll pop 1 add -1 roll gsave {
        pop pop grestore rmoveto gsave
    } exch kshow grestore rmoveto
} bind def /currentalpha {
    1
} def /setalpha {
    pop
} bind def
TopDrawDict begin /prt_stack {
    (***Top of Stack\012) print pstack (---Bottom of Stack\012) print flush
} def /prt_top {
    (top item of stack) == dup == flush
} def /prtmat matrix def /prt_ctm {
    (current transformation matrix: ) print prtmat currentmatrix == flush
} def /tmmat matrix def /obmat matrix def /strmat matrix def /pgmat matrix def /idmat matrix def /sc1mt matrix def /sc2mt matrix def /sc3mt matrix def /sc4mt matrix def /sc5mt matrix def /sc6mt matrix def /sc7mt matrix def /inmat matrix def /ctmmt matrix def /octmmt matrix def /clpmt matrix def /weglet_mat matrix def /crlinw 1 def crlinw setlinewidth /crlinjn 0 def crlinjn setlinejoin /crlincp 0 def crlincp setlinecap /crmtrlmt currentmiterlimit def /crstrpat 0 def /crfilpat 0 def /crflat currentflat def /dftflat currentflat def /strinclr false def /crlingry 0 def /crlinred 0 def /crlingrn 0 def /crlinblu 0 def /crlinalph 1 def /filinclr false def /crfilgry 0 def /crfilred 0 def /crfilgrn 0 def /crfilblu 0 def /crfilalph 1 def /crfilstyl 0 def /txtdraw true def /txtinclr false def /txtwpat false def /txtwittrans false def /crtxtgry 0 def /crtxtred 0 def /crtxtgrn 0 def /crtxtblu 0 def /crtxtalph 1 def /crtxtpat 0 def /txlndraw true def /txlninclr false def /txlnwpat false def /txlnwittrans false def /crtxlngry 0 def /crtxlnred 0 def /crtxlngrn 0 def /crtxlnblu 0 def /crtxlnalph 1 def /crtxlnpat 0 def /hilittxt false def /strdsh [2 2] def /dshpatoff 0 def /usedash false def /filwpat false def /strwpat false def /filwittrans false def /strwittrans false def /crfrtarw false def /crendarw false def /rsave 0 def /esave 0 def /sslsave 0 def /lsave 0 def /clpsave 0 def /pathsave 0 def /tpatstr 10 string def /ptdist {
    sub dup mul 3 1 roll sub dup mul add sqrt
} bind def /dodrawctm {
    octmmt currentmatrix pop idmat obmat concatmatrix ctmmt currentmatrix sc1mt concatmatrix setmatrix
} bind def /undrawctm {
    obmat inmat invertmatrix ctmmt currentmatrix sc1mt concatmatrix setmatrix
} bind def /undrawmat {
    obmat aload pop 7 -1 roll astore
} bind def /unpagectm {
    octmmt setmatrix
} bind def /unpagemat {
    pgmat aload pop 7 -1 roll astore
} bind def /drtan {
    gsave 1 setalpha 0 setlinewidth 0.333333 setgray moveto lineto stroke grestore
} bind def /drdgrdln {
    gsave 1 setalpha 0 setlinewidth [1 2] 0 setdash setgray moveto lineto stroke grestore
} bind def /drgrdln {
    gsave 1 setalpha 0 setlinewidth setgray moveto lineto stroke grestore
} bind def end
TopDrawDict begin /TDeps_dict 20 dict def TDeps_dict begin /showpage {
    
} def /copypage {
    
} def /grestoreall {
    
} def /erasepage {
    
} def /nulldevice {
    
} def /exitserver {
    
} def /initgraphics {
    
} def /renderbands {
    
} def /initmatrix {
    
} def /banddevice {
    
} def /setpageparams {
    
} def /framedevice {
    
} def /note {
    
} def end end
TopDrawDict begin /rpath {
    newpath moveto dup 0 exch rlineto exch 0 rlineto 0 exch neg rlineto closepath
} bind def /rfpath {
    /rad3 exch def /hh3 exch def /ww3 exch def /yy1 exch def /xx1 exch def /xx2 xx1 ww3 add def /yy2 yy1 hh3 add def ww3 0.5 mul rad3 lt {
        /rad3 ww3 0.5 mul def
    } if hh3 0.5 mul rad3 lt {
        /rad3 hh3 0.5 mul def
    } if newpath xx1 yy1 hh3 0.5 mul add moveto xx1 yy2 xx2 yy2 rad3 arcto 4 {
        pop
    } repeat xx2 yy2 xx2 yy1 rad3 arcto 4 {
        pop
    } repeat xx2 yy1 xx1 yy1 rad3 arcto 4 {
        pop
    } repeat xx1 yy1 xx1 yy2 rad3 arcto 4 {
        pop
    } repeat closepath
} bind def /rfill {
    gsave dodrawctm crfilalph setalpha filinclr {
        crfilred crfilgrn crfilblu setrgbcolor
    } {
        crfilgry setgray
    } ifelse filwpat {
        4 2 roll rpath crfilpat findfont filwittrans {
            trpatfil
        } {
            oppatfil
        } ifelse
    } {
        rectfill
    } ifelse grestore
} bind def /rstroke {
    gsave dodrawctm crlinalph setalpha crlinw setlinewidth crlincp setlinecap crlinjn setlinejoin crmtrlmt setmiterlimit usedash {
        strdsh dshpatoff setdash
    } if strinclr {
        crlinred crlingrn crlinblu setrgbcolor
    } {
        crlingry setgray
    } ifelse 4 2 roll rpath unpagectm concat strwpat {
        crstrpat findfont strwittrans {
            trpatstrk
        } {
            oppatstrk
        } ifelse
    } {
        stroke
    } ifelse grestore
} bind def /mkrpath {
    dodrawctm rpath unpagectm
} bind def end
TopDrawDict begin /p1x 0 def /p1y 0 def /p2x 0 def /p2y 0 def /ssl {
    gsave dodrawctm crfrtarw crendarw or {
        /p1y 1 index def /p1x 2 index def /p2y 1 index 4 index add def /p2x 2 index 5 index add def newpath moveto rlineto
    } {
        newpath moveto rlineto
    } ifelse crlinalph setalpha crlinw setlinewidth crlincp setlinecap usedash {
        strdsh dshpatoff setdash
    } if strinclr {
        crlinred crlingrn crlinblu setrgbcolor
    } {
        crlingry setgray
    } ifelse aload pop strmat astore crfrtarw {
        currentlinewidth strmat p2x p2y p1x p1y arow
    } if crendarw {
        currentlinewidth strmat p1x p1y p2x p2y arow
    } if unpagectm concat strwpat {
        crstrpat findfont strwittrans {
            trpatstrk
        } {
            oppatstrk
        } ifelse
    } {
        stroke
    } ifelse grestore
} bind def end
TopDrawDict begin /dotx {
    gsave txtdraw {
        concat selectfont txtinclr {
            crtxtred crtxtgrn crtxtblu setrgbcolor
        } {
            crtxtgry setgray
        } ifelse crtxtalph setalpha moveto xyshow
    } {
        pop pop pop pop pop pop pop
    } ifelse grestore
} bind def /txtlin {
    gsave txlndraw {
        concat txlninclr {
            crtxlnred crtxlngrn crtxlnblu setrgbcolor
        } {
            crtxlngry setgray
        } ifelse crtxlnalph setalpha setlinewidth 0 setlinecap newpath moveto 0 rlineto stroke
    } {
        pop pop pop pop pop
    } ifelse grestore
} bind def end
%%EndSetup
gsave
0 0 679.5 553.5 rectclip
-73.5 -40 translate
73.5 40 679.5 553.5 rectclip
gsave
TopDrawDict begin
/invpats true def
/crlincp 0 def
/crlinjn 0 def
/crmtrlmt 10 def
/crlinw 1 def
/crlinalph 1 def
/crlinred 0 def /crlingrn 0 def /crlinblu 0 def /strinclr true def
/crfilalph 1 def
/crfilred 1 def /crfilgrn 1 def /crfilblu 1 def /filinclr true def
/filwpat false def
TopDrawDict /piddict known TopDrawDict /ipiddict known or {
    1 getpat /crfilpat exch def
} if
/filwittrans false def
/strwpat false def
TopDrawDict /piddict known TopDrawDict /ipiddict known or {
    1 getpat /crstrpat exch def
} if
/strwittrans false def
/usedash false def
/strdsh [2 2] def /dshpatoff 0 def
/crendarw false def
/crfrtarw false def
/txtdraw false def
/crtxtalph 1 def
/crtxtred 0 def /crtxtgrn 0 def /crtxtblu 0 def /txtinclr true def
/txtwpat false def
/txtwittrans false def
/txlndraw false def
/crtxlnalph 1 def
/crtxlnred 0 def /crtxlngrn 0 def /crtxlnblu 0 def /txlninclr true def
/txlnwittrans false def
/txlnwpat false def
gsave clpmt currentmatrix pop newpath
282 176 255 218 [1.20922 0 0 1.051136 -234.351013 178.85228] mkrpath
clip
newpath
clpmt setmatrix
gsave
/epssave save def TDeps_dict begin userdict begin
[1 0 0 1 -172 190] dodrawctm
255 218 translate
%%BeginFile: /tmp/topdraw_eps_156_2
%!PS-Adobe-2.0 EPSF-1.2
%%BoundingBox: 0 0 282 176
%%Creator: Mathematica
%%Title: Clipboard
%%CreationDate: Never Never
%%EndComments
50 dict begin
/Mnodistort true def
/pageDashArray [4] def
/nullDashArray [] def

% Compute the minimum of two numbers.
/Mmin {         % p q Mmin min(p,q)
        2 copy          % p q p q
        gt              % p q p>q?
        { exch } if     % min(p,q) max(p,q)
        pop             % min(p,q)
} bind def


% Compute the maximum of two numbers.
/Mmax {         % p q Mmax max(p,q)
        2 copy          % p q p q
        lt              % p q p<q?
        { exch } if     % max(p,q) min(p,q)
        pop             % max(p,q)
} bind def

/Mpstart {
    MathPictureStart
} bind def
/Mpend {
    MathPictureEnd
} bind def
/Mscale {
    0 1 0 1
    5 -1 roll
    MathScale
} bind def
/Plain
        /Courier findfont
def
/Bold
        /Courier-Bold findfont
def
/Italic
        /Courier-Oblique findfont
def
/MathPictureStart {
        gsave
        newpath
        /Mtmatrix
        matrix currentmatrix
        def
        Plain
        Mfontsize scalefont
        setfont
0 setgray 0 setlinewidth
} bind def
/MathPictureEnd {
        grestore
} bind def
/Mdot {
        moveto
        0 0 rlineto
        stroke
} def
/Mtetra {
        moveto
        lineto
        lineto
        lineto
        fill
} def
/Metetra {
        moveto
        lineto
        lineto
        lineto
        closepath
        gsave
        fill
        grestore
        0 setgray
        stroke
} def
/Mistroke {
        flattenpath
        0 0 0
        {
        4 2 roll
        pop pop
        }
        {
        4 -1 roll
        2 index
        sub dup mul
        4 -1 roll
        2 index
        sub dup mul
        add sqrt
        4 -1 roll
        add
        3 1 roll
        }
        {
        stop
        }
        {
        stop
        }
        pathforall
        pop pop
        currentpoint
        stroke
        moveto
        currentdash
        3 -1 roll
        add
        setdash
} def
/Mfstroke {
        stroke
        currentdash
        pop 0
        setdash
} def
/Msboxa {
        newpath
        5 -1 roll
        Mvboxa
        pop
        6 -1 roll
        5 -1 roll
        4 -1 roll
        Msboxa1
        5 -3 roll
        Msboxa1
        [
        7 -2 roll
        [ 2 index 2 index
        10 -1 roll
        9 -1 roll
        ]
        6 1 roll
        5 -2 roll
        ]
} bind def
        
/Msboxa1 {
        sub
        2 div
        dup
        2 index
        1 add
        mul
        3 -1 roll
        -1 add
        3 -1 roll
        mul
} bind def
/Mvboxa {
        gsave
        newpath
        [ true
        3 -1 roll
        {
        Mbbox
        5 -1 roll
        {
        0
        5 1 roll
        }
        {
        7 -1 roll
        exch sub
        (m) stringwidth pop
        .3 mul
        sub
        7 1 roll
        6 -1 roll
        4 -1 roll
        Mmin
        3 -1 roll
        5 index
        add
        5 -1 roll
        4 -1 roll
        Mmax
        4 -1 roll
        }
        ifelse
        false
        }
        forall
        { stop } if
        counttomark
        1 add
        4 roll
        ]
        grestore
} bind def
/Mbbox {
        0 0 moveto
        false charpath
        flattenpath
        pathbbox
        newpath
} bind def
/Mmin {
        2 copy
        gt
        { exch } if
        pop
} bind def
/Mmax {
        2 copy
        lt
        { exch } if
        pop
} bind def
/Mshowa {
        4 -2 roll
        moveto
        2 index
        Mtmatrix setmatrix
        Mvboxa
        7 1 roll
        6 -1 roll
        5 -1 roll
        4 -1 roll
        Mshowa1
        4 1 roll
        Mshowa1
        rmoveto
        currentpoint
        0 1
        4 index length
        -1 add
        {
        2 index
        4 index
        2 index
        get
        3 index
        add
        moveto
        4 index
        exch get
        show
        } for
        pop pop pop pop
        Mgmatrix setmatrix
} bind def
/Mshowa1 {
        2 copy
        add
        4 1 roll
        sub
        mul
        sub
        -2 div
} bind def
/MathScale {
        Mwidth
        Mheight
        Mlp
        translate
        scale
        /Mgmatrix
        matrix currentmatrix
        def
        /Msaveaa exch def
        /Msavebb exch def
        /Msavecc exch def
        /Msavedd exch def
} bind def
/Mlp {
        3 copy
        Mlpfirst
        {
        Mnodistort
        {
        Mmin
        dup
        } if
        4 index
        2 index
        2 index
        Mlprun
        11 index
        11 -1 roll
        10 -4 roll
        Mlp1
        8 index
        9 -5 roll
        Mlp1
        4 -1 roll
        and
        { exit } if
        3 -1 roll
        pop pop
        } loop
        exch
        3 1 roll
        7 -3 roll
        pop pop pop
} bind def
/Mlpfirst {
        3 -1 roll
        dup length
        2 copy
        -2 add
        get
        aload
        pop pop pop
        4 -2 roll
        -1 add
        get
        aload
        pop pop pop
        6 -1 roll
        3 -1 roll
        5 -1 roll
        sub
        dup /MsaveAx exch def
        div
        4 1 roll
        exch sub
        dup /MsaveAy exch def
        div
} bind def
/Mlprun {
        2 copy
        4 index
        0 get
        dup
        4 1 roll
        Mlprun1
        3 copy
        8 -2 roll
        9 -1 roll
        {
        3 copy
        Mlprun1
        3 copy
        11 -3 roll
        /gt Mlpminmax
        8 3 roll
        11 -3 roll
        /lt Mlpminmax
        8 3 roll
        } forall
        pop pop pop pop
        3 1 roll
        pop pop
        aload pop
        5 -1 roll
        aload pop
        exch
        6 -1 roll
        Mlprun2
        8 2 roll
        4 -1 roll
        Mlprun2
        6 2 roll
        3 -1 roll
        Mlprun2
        4 2 roll
        exch
        Mlprun2
        6 2 roll
} bind def
/Mlprun1 {
        aload pop
        exch
        6 -1 roll
        5 -1 roll
        mul add
        4 -2 roll
        mul
        3 -1 roll
        add
} bind def
/Mlprun2 {
        2 copy
        add 2 div
        3 1 roll
        exch sub
} bind def
/Mlpminmax {
        cvx
        2 index
        6 index
        2 index
        exec
        {
        7 -3 roll
        4 -1 roll
        } if
        1 index
        5 index
        3 -1 roll
        exec
        {
        4 1 roll
        pop
        5 -1 roll
        aload
        pop pop
        4 -1 roll
        aload pop
        [
        8 -2 roll
        pop
        5 -2 roll
        pop
        6 -2 roll
        pop
        5 -1 roll
        ]
        4 1 roll
        pop
        }
        {
        pop pop pop
        } ifelse
} bind def
/Mlp1 {
        5 index
        3 index sub
        5 index
        2 index mul
        1 index
        le
        1 index
        0 le
        or
        dup
        not
        {
        1 index
        3 index div
        .99999 mul
        8 -1 roll
        pop
        7 1 roll
        }
        if
        8 -1 roll
        2 div
        7 -2 roll
        pop sub
        5 index
        6 -3 roll
        pop pop
        mul sub
        exch
} bind def
/Mfontsize      12 def
/Mleft          0.000000 def
/Mbottom        176.000000 def
/Mwidth         282.000000 def
/Mheight        176.000000 def
/Courier findfont 12 scalefont setfont
%!
%%Creator: Mathematica
%%AspectRatio: 0.61803 
MathPictureStart
% Scaling calculations
0.02381 0.02721 0 2.47214 [
[(5)] 0.15986 -0.0125 0 1 Msboxa
[(10)] 0.29592 -0.0125 0 1 Msboxa
[(15)] 0.43197 -0.0125 0 1 Msboxa
[(20)] 0.56803 -0.0125 0 1 Msboxa
[(25)] 0.70408 -0.0125 0 1 Msboxa
[(30)] 0.84014 -0.0125 0 1 Msboxa
[(35)] 0.97619 -0.0125 0 1 Msboxa
[(0.05)] 0.01131 0.12361 1 0 Msboxa
[(0.1)] 0.01131 0.24721 1 0 Msboxa
[(0.15)] 0.01131 0.37082 1 0 Msboxa
[(0.2)] 0.01131 0.49443 1 0 Msboxa
[(0.25)] 0.01131 0.61803 1 0 Msboxa
[ -0.001 -0.00725 0 0 ]
[ 1.001 0.61903 0 0 ]
] MathScale
% Start of Graphics
1 setlinecap
1 setlinejoin
newpath
%%Object: Graphics
[ ] 0 setdash
0 setgray
gsave
gsave
0.002 setlinewidth
0 0 moveto
1 0 lineto
stroke
0.15986 -0.00625 moveto
0.15986 0.00625 lineto
stroke
0 setgray
[(5)] 0.15986 -0.0125 0 1 Mshowa
0.29592 -0.00625 moveto
0.29592 0.00625 lineto
stroke
0 setgray
[(10)] 0.29592 -0.0125 0 1 Mshowa
0.43197 -0.00625 moveto
0.43197 0.00625 lineto
stroke
0 setgray
[(15)] 0.43197 -0.0125 0 1 Mshowa
0.56803 -0.00625 moveto
0.56803 0.00625 lineto
stroke
0 setgray
[(20)] 0.56803 -0.0125 0 1 Mshowa
0.70408 -0.00625 moveto
0.70408 0.00625 lineto
stroke
0 setgray
[(25)] 0.70408 -0.0125 0 1 Mshowa
0.84014 -0.00625 moveto
0.84014 0.00625 lineto
stroke
0 setgray
[(30)] 0.84014 -0.0125 0 1 Mshowa
0.97619 -0.00625 moveto
0.97619 0.00625 lineto
stroke
0 setgray
[(35)] 0.97619 -0.0125 0 1 Mshowa
0.02381 0 moveto
0.02381 0.61803 lineto
stroke
0.01756 0.12361 moveto
0.03006 0.12361 lineto
stroke
0 setgray
[(0.05)] 0.01131 0.12361 1 0 Mshowa
0.01756 0.24721 moveto
0.03006 0.24721 lineto
stroke
0 setgray
[(0.1)] 0.01131 0.24721 1 0 Mshowa
0.01756 0.37082 moveto
0.03006 0.37082 lineto
stroke
0 setgray
[(0.15)] 0.01131 0.37082 1 0 Mshowa
0.01756 0.49443 moveto
0.03006 0.49443 lineto
stroke
0 setgray
[(0.2)] 0.01131 0.49443 1 0 Mshowa
0.01756 0.61803 moveto
0.03006 0.61803 lineto
stroke
0 setgray
[(0.25)] 0.01131 0.61803 1 0 Mshowa
grestore
grestore
0 0 moveto
1 0 lineto
1 0.618034 lineto
0 0.618034 lineto
closepath
clip
newpath
0 setgray
gsave
gsave
0.004 setlinewidth
0.02381 0 moveto
0.06349 0 lineto
0.10317 0 lineto
0.14286 0 lineto
0.18254 0 lineto
0.22222 0 lineto
0.2619 0 lineto
0.30159 0 lineto
0.34127 0 lineto
0.38095 0 lineto
0.42063 0 lineto
0.46032 0 lineto
0.5 0 lineto
0.53968 0 lineto
0.57937 0 lineto
0.61905 0 lineto
0.65873 0 lineto
0.69841 0 lineto
0.7381 0 lineto
0.77778 0 lineto
0.81746 0 lineto
0.85714 0 lineto
0.89683 0 lineto
0.93651 0 lineto
0.97619 0 lineto
stroke
grestore
grestore
% End of Graphics
MathPictureEnd
%%EPS Trailer
end
%%EndFile
end end epssave restore
grestore
grestore
1 0 0 1 -172 190 sc5mt astore 255 218 282 176 1.20922 0 0 1.051136 -234.351013 178.85228 sc6mt astore rstroke
gsave clpmt currentmatrix pop newpath
282 176 255 218 [1.20922 0 0 1.045455 -234.351028 -187.909088] mkrpath
clip
newpath
clpmt setmatrix
gsave
/epssave save def TDeps_dict begin userdict begin
[1 0 0 1 -162 -178] dodrawctm
255 218 translate
%%BeginFile: /tmp/topdraw_eps_156_3
%!PS-Adobe-2.0 EPSF-1.2
%%BoundingBox: 0 0 282 176
%%Creator: Mathematica
%%Title: Clipboard
%%CreationDate: Never Never
%%EndComments
50 dict begin
/Mnodistort true def
/pageDashArray [4] def
/nullDashArray [] def

% Compute the minimum of two numbers.
/Mmin {         % p q Mmin min(p,q)
        2 copy          % p q p q
        gt              % p q p>q?
        { exch } if     % min(p,q) max(p,q)
        pop             % min(p,q)
} bind def


% Compute the maximum of two numbers.
/Mmax {         % p q Mmax max(p,q)
        2 copy          % p q p q
        lt              % p q p<q?
        { exch } if     % max(p,q) min(p,q)
        pop             % max(p,q)
} bind def

/Mpstart {
    MathPictureStart
} bind def
/Mpend {
    MathPictureEnd
} bind def
/Mscale {
    0 1 0 1
    5 -1 roll
    MathScale
} bind def
/Plain
        /Courier findfont
def
/Bold
        /Courier-Bold findfont
def
/Italic
        /Courier-Oblique findfont
def
/MathPictureStart {
        gsave
        newpath
        /Mtmatrix
        matrix currentmatrix
        def
        Plain
        Mfontsize scalefont
        setfont
0 setgray 0 setlinewidth
} bind def
/MathPictureEnd {
        grestore
} bind def
/Mdot {
        moveto
        0 0 rlineto
        stroke
} def
/Mtetra {
        moveto
        lineto
        lineto
        lineto
        fill
} def
/Metetra {
        moveto
        lineto
        lineto
        lineto
        closepath
        gsave
        fill
        grestore
        0 setgray
        stroke
} def
/Mistroke {
        flattenpath
        0 0 0
        {
        4 2 roll
        pop pop
        }
        {
        4 -1 roll
        2 index
        sub dup mul
        4 -1 roll
        2 index
        sub dup mul
        add sqrt
        4 -1 roll
        add
        3 1 roll
        }
        {
        stop
        }
        {
        stop
        }
        pathforall
        pop pop
        currentpoint
        stroke
        moveto
        currentdash
        3 -1 roll
        add
        setdash
} def
/Mfstroke {
        stroke
        currentdash
        pop 0
        setdash
} def
/Msboxa {
        newpath
        5 -1 roll
        Mvboxa
        pop
        6 -1 roll
        5 -1 roll
        4 -1 roll
        Msboxa1
        5 -3 roll
        Msboxa1
        [
        7 -2 roll
        [ 2 index 2 index
        10 -1 roll
        9 -1 roll
        ]
        6 1 roll
        5 -2 roll
        ]
} bind def
        
/Msboxa1 {
        sub
        2 div
        dup
        2 index
        1 add
        mul
        3 -1 roll
        -1 add
        3 -1 roll
        mul
} bind def
/Mvboxa {
        gsave
        newpath
        [ true
        3 -1 roll
        {
        Mbbox
        5 -1 roll
        {
        0
        5 1 roll
        }
        {
        7 -1 roll
        exch sub
        (m) stringwidth pop
        .3 mul
        sub
        7 1 roll
        6 -1 roll
        4 -1 roll
        Mmin
        3 -1 roll
        5 index
        add
        5 -1 roll
        4 -1 roll
        Mmax
        4 -1 roll
        }
        ifelse
        false
        }
        forall
        { stop } if
        counttomark
        1 add
        4 roll
        ]
        grestore
} bind def
/Mbbox {
        0 0 moveto
        false charpath
        flattenpath
        pathbbox
        newpath
} bind def
/Mmin {
        2 copy
        gt
        { exch } if
        pop
} bind def
/Mmax {
        2 copy
        lt
        { exch } if
        pop
} bind def
/Mshowa {
        4 -2 roll
        moveto
        2 index
        Mtmatrix setmatrix
        Mvboxa
        7 1 roll
        6 -1 roll
        5 -1 roll
        4 -1 roll
        Mshowa1
        4 1 roll
        Mshowa1
        rmoveto
        currentpoint
        0 1
        4 index length
        -1 add
        {
        2 index
        4 index
        2 index
        get
        3 index
        add
        moveto
        4 index
        exch get
        show
        } for
        pop pop pop pop
        Mgmatrix setmatrix
} bind def
/Mshowa1 {
        2 copy
        add
        4 1 roll
        sub
        mul
        sub
        -2 div
} bind def
/MathScale {
        Mwidth
        Mheight
        Mlp
        translate
        scale
        /Mgmatrix
        matrix currentmatrix
        def
        /Msaveaa exch def
        /Msavebb exch def
        /Msavecc exch def
        /Msavedd exch def
} bind def
/Mlp {
        3 copy
        Mlpfirst
        {
        Mnodistort
        {
        Mmin
        dup
        } if
        4 index
        2 index
        2 index
        Mlprun
        11 index
        11 -1 roll
        10 -4 roll
        Mlp1
        8 index
        9 -5 roll
        Mlp1
        4 -1 roll
        and
        { exit } if
        3 -1 roll
        pop pop
        } loop
        exch
        3 1 roll
        7 -3 roll
        pop pop pop
} bind def
/Mlpfirst {
        3 -1 roll
        dup length
        2 copy
        -2 add
        get
        aload
        pop pop pop
        4 -2 roll
        -1 add
        get
        aload
        pop pop pop
        6 -1 roll
        3 -1 roll
        5 -1 roll
        sub
        dup /MsaveAx exch def
        div
        4 1 roll
        exch sub
        dup /MsaveAy exch def
        div
} bind def
/Mlprun {
        2 copy
        4 index
        0 get
        dup
        4 1 roll
        Mlprun1
        3 copy
        8 -2 roll
        9 -1 roll
        {
        3 copy
        Mlprun1
        3 copy
        11 -3 roll
        /gt Mlpminmax
        8 3 roll
        11 -3 roll
        /lt Mlpminmax
        8 3 roll
        } forall
        pop pop pop pop
        3 1 roll
        pop pop
        aload pop
        5 -1 roll
        aload pop
        exch
        6 -1 roll
        Mlprun2
        8 2 roll
        4 -1 roll
        Mlprun2
        6 2 roll
        3 -1 roll
        Mlprun2
        4 2 roll
        exch
        Mlprun2
        6 2 roll
} bind def
/Mlprun1 {
        aload pop
        exch
        6 -1 roll
        5 -1 roll
        mul add
        4 -2 roll
        mul
        3 -1 roll
        add
} bind def
/Mlprun2 {
        2 copy
        add 2 div
        3 1 roll
        exch sub
} bind def
/Mlpminmax {
        cvx
        2 index
        6 index
        2 index
        exec
        {
        7 -3 roll
        4 -1 roll
        } if
        1 index
        5 index
        3 -1 roll
        exec
        {
        4 1 roll
        pop
        5 -1 roll
        aload
        pop pop
        4 -1 roll
        aload pop
        [
        8 -2 roll
        pop
        5 -2 roll
        pop
        6 -2 roll
        pop
        5 -1 roll
        ]
        4 1 roll
        pop
        }
        {
        pop pop pop
        } ifelse
} bind def
/Mlp1 {
        5 index
        3 index sub
        5 index
        2 index mul
        1 index
        le
        1 index
        0 le
        or
        dup
        not
        {
        1 index
        3 index div
        .99999 mul
        8 -1 roll
        pop
        7 1 roll
        }
        if
        8 -1 roll
        2 div
        7 -2 roll
        pop sub
        5 index
        6 -3 roll
        pop pop
        mul sub
        exch
} bind def
/Mfontsize      12 def
/Mleft          0.000000 def
/Mbottom        176.000000 def
/Mwidth         282.000000 def
/Mheight        176.000000 def
/Courier findfont 12 scalefont setfont
%!
%%Creator: Mathematica
%%AspectRatio: 0.61803 
MathPictureStart
% Scaling calculations
0.02381 0.02721 0 1.03006 [
[(5)] 0.15986 -0.0125 0 1 Msboxa
[(10)] 0.29592 -0.0125 0 1 Msboxa
[(15)] 0.43197 -0.0125 0 1 Msboxa
[(20)] 0.56803 -0.0125 0 1 Msboxa
[(25)] 0.70408 -0.0125 0 1 Msboxa
[(30)] 0.84014 -0.0125 0 1 Msboxa
[(35)] 0.97619 -0.0125 0 1 Msboxa
[(0.1)] 0.01131 0.10301 1 0 Msboxa
[(0.2)] 0.01131 0.20601 1 0 Msboxa
[(0.3)] 0.01131 0.30902 1 0 Msboxa
[(0.4)] 0.01131 0.41202 1 0 Msboxa
[(0.5)] 0.01131 0.51503 1 0 Msboxa
[ -0.001 -0.00725 0 0 ]
[ 1.001 0.61903 0 0 ]
] MathScale
% Start of Graphics
1 setlinecap
1 setlinejoin
newpath
%%Object: Graphics
[ ] 0 setdash
0 setgray
gsave
gsave
0.002 setlinewidth
0 0 moveto
1 0 lineto
stroke
0.15986 -0.00625 moveto
0.15986 0.00625 lineto
stroke
0 setgray
[(5)] 0.15986 -0.0125 0 1 Mshowa
0.29592 -0.00625 moveto
0.29592 0.00625 lineto
stroke
0 setgray
[(10)] 0.29592 -0.0125 0 1 Mshowa
0.43197 -0.00625 moveto
0.43197 0.00625 lineto
stroke
0 setgray
[(15)] 0.43197 -0.0125 0 1 Mshowa
0.56803 -0.00625 moveto
0.56803 0.00625 lineto
stroke
0 setgray
[(20)] 0.56803 -0.0125 0 1 Mshowa
0.70408 -0.00625 moveto
0.70408 0.00625 lineto
stroke
0 setgray
[(25)] 0.70408 -0.0125 0 1 Mshowa
0.84014 -0.00625 moveto
0.84014 0.00625 lineto
stroke
0 setgray
[(30)] 0.84014 -0.0125 0 1 Mshowa
0.97619 -0.00625 moveto
0.97619 0.00625 lineto
stroke
0 setgray
[(35)] 0.97619 -0.0125 0 1 Mshowa
0.02381 0 moveto
0.02381 0.61803 lineto
stroke
0.01756 0.10301 moveto
0.03006 0.10301 lineto
stroke
0 setgray
[(0.1)] 0.01131 0.10301 1 0 Mshowa
0.01756 0.20601 moveto
0.03006 0.20601 lineto
stroke
0 setgray
[(0.2)] 0.01131 0.20601 1 0 Mshowa
0.01756 0.30902 moveto
0.03006 0.30902 lineto
stroke
0 setgray
[(0.3)] 0.01131 0.30902 1 0 Mshowa
0.01756 0.41202 moveto
0.03006 0.41202 lineto
stroke
0 setgray
[(0.4)] 0.01131 0.41202 1 0 Mshowa
0.01756 0.51503 moveto
0.03006 0.51503 lineto
stroke
0 setgray
[(0.5)] 0.01131 0.51503 1 0 Mshowa
grestore
grestore
0 0 moveto
1 0 lineto
1 0.618034 lineto
0 0.618034 lineto
closepath
clip
newpath
0 setgray
gsave
gsave
gsave
gsave
0.004 setlinewidth
0.02381 0.30902 moveto
0.03741 0.30902 lineto
0.05102 0.30902 lineto
0.06463 0.30902 lineto
0.07823 0.30902 lineto
0.09184 0.30902 lineto
0.10544 0.30902 lineto
0.11905 0.30902 lineto
0.13265 0.30902 lineto
0.14626 0.30902 lineto
0.15986 0.30902 lineto
0.17347 0.30902 lineto
0.18707 0.30902 lineto
0.20068 0.30902 lineto
0.21429 0.30902 lineto
0.22789 0.30902 lineto
0.2415 0.30902 lineto
0.2551 0.30902 lineto
0.26871 0.30902 lineto
0.28231 0.30902 lineto
0.29592 0.30902 lineto
0.30952 0.30902 lineto
0.32313 0.30902 lineto
0.33673 0.30902 lineto
0.35034 0.30902 lineto
stroke
grestore
grestore
grestore
gsave
gsave
gsave
0.004 setlinewidth
0.35034 0.51503 moveto
0.35828 0.51503 lineto
0.36621 0.51503 lineto
0.37415 0.51503 lineto
0.38209 0.51503 lineto
0.39002 0.51503 lineto
0.39796 0.51503 lineto
0.4059 0.51503 lineto
0.41383 0.51503 lineto
0.42177 0.51503 lineto
0.42971 0.51503 lineto
0.43764 0.51503 lineto
0.44558 0.51503 lineto
0.45351 0.51503 lineto
0.46145 0.51503 lineto
0.46939 0.51503 lineto
0.47732 0.51503 lineto
0.48526 0.51503 lineto
0.4932 0.51503 lineto
0.50113 0.51503 lineto
0.50907 0.51503 lineto
0.51701 0.51503 lineto
0.52494 0.51503 lineto
0.53288 0.51503 lineto
0.54082 0.51503 lineto
stroke
grestore
grestore
grestore
gsave
gsave
gsave
0.004 setlinewidth
0.54082 0.20601 moveto
0.55896 0.20601 lineto
0.5771 0.20601 lineto
0.59524 0.20601 lineto
0.61338 0.20601 lineto
0.63152 0.20601 lineto
0.64966 0.20601 lineto
0.6678 0.20601 lineto
0.68594 0.20601 lineto
0.70408 0.20601 lineto
0.72222 0.20601 lineto
0.74036 0.20601 lineto
0.7585 0.20601 lineto
0.77664 0.20601 lineto
0.79478 0.20601 lineto
0.81293 0.20601 lineto
0.83107 0.20601 lineto
0.84921 0.20601 lineto
0.86735 0.20601 lineto
0.88549 0.20601 lineto
0.90363 0.20601 lineto
0.92177 0.20601 lineto
0.93991 0.20601 lineto
0.95805 0.20601 lineto
0.97619 0.20601 lineto
stroke
grestore
grestore
grestore
grestore
% End of Graphics
MathPictureEnd
%%EPS Trailer
end
%%EndFile
end end epssave restore
grestore
grestore
1 0 0 1 -162 -178 sc5mt astore 255 218 282 176 1.20922 0 0 1.045455 -234.351028 -187.909088 sc6mt astore rstroke
gsave clpmt currentmatrix pop newpath
282 176 255 218 [1.205674 0 0 1.045455 104.553131 -187.909088] mkrpath
clip
newpath
clpmt setmatrix
gsave
/epssave save def TDeps_dict begin userdict begin
[1 0 0 1 187 -178] dodrawctm
255 218 translate
%%BeginFile: /tmp/topdraw_eps_156_4
%!PS-Adobe-2.0 EPSF-1.2
%%BoundingBox: 0 0 282 176
%%Creator: Mathematica
%%Title: Clipboard
%%CreationDate: Never Never
%%EndComments
50 dict begin
/Mnodistort true def
/pageDashArray [4] def
/nullDashArray [] def

% Compute the minimum of two numbers.
/Mmin {         % p q Mmin min(p,q)
        2 copy          % p q p q
        gt              % p q p>q?
        { exch } if     % min(p,q) max(p,q)
        pop             % min(p,q)
} bind def


% Compute the maximum of two numbers.
/Mmax {         % p q Mmax max(p,q)
        2 copy          % p q p q
        lt              % p q p<q?
        { exch } if     % max(p,q) min(p,q)
        pop             % max(p,q)
} bind def

/Mpstart {
    MathPictureStart
} bind def
/Mpend {
    MathPictureEnd
} bind def
/Mscale {
    0 1 0 1
    5 -1 roll
    MathScale
} bind def
/Plain
        /Courier findfont
def
/Bold
        /Courier-Bold findfont
def
/Italic
        /Courier-Oblique findfont
def
/MathPictureStart {
        gsave
        newpath
        /Mtmatrix
        matrix currentmatrix
        def
        Plain
        Mfontsize scalefont
        setfont
0 setgray 0 setlinewidth
} bind def
/MathPictureEnd {
        grestore
} bind def
/Mdot {
        moveto
        0 0 rlineto
        stroke
} def
/Mtetra {
        moveto
        lineto
        lineto
        lineto
        fill
} def
/Metetra {
        moveto
        lineto
        lineto
        lineto
        closepath
        gsave
        fill
        grestore
        0 setgray
        stroke
} def
/Mistroke {
        flattenpath
        0 0 0
        {
        4 2 roll
        pop pop
        }
        {
        4 -1 roll
        2 index
        sub dup mul
        4 -1 roll
        2 index
        sub dup mul
        add sqrt
        4 -1 roll
        add
        3 1 roll
        }
        {
        stop
        }
        {
        stop
        }
        pathforall
        pop pop
        currentpoint
        stroke
        moveto
        currentdash
        3 -1 roll
        add
        setdash
} def
/Mfstroke {
        stroke
        currentdash
        pop 0
        setdash
} def
/Msboxa {
        newpath
        5 -1 roll
        Mvboxa
        pop
        6 -1 roll
        5 -1 roll
        4 -1 roll
        Msboxa1
        5 -3 roll
        Msboxa1
        [
        7 -2 roll
        [ 2 index 2 index
        10 -1 roll
        9 -1 roll
        ]
        6 1 roll
        5 -2 roll
        ]
} bind def
        
/Msboxa1 {
        sub
        2 div
        dup
        2 index
        1 add
        mul
        3 -1 roll
        -1 add
        3 -1 roll
        mul
} bind def
/Mvboxa {
        gsave
        newpath
        [ true
        3 -1 roll
        {
        Mbbox
        5 -1 roll
        {
        0
        5 1 roll
        }
        {
        7 -1 roll
        exch sub
        (m) stringwidth pop
        .3 mul
        sub
        7 1 roll
        6 -1 roll
        4 -1 roll
        Mmin
        3 -1 roll
        5 index
        add
        5 -1 roll
        4 -1 roll
        Mmax
        4 -1 roll
        }
        ifelse
        false
        }
        forall
        { stop } if
        counttomark
        1 add
        4 roll
        ]
        grestore
} bind def
/Mbbox {
        0 0 moveto
        false charpath
        flattenpath
        pathbbox
        newpath
} bind def
/Mmin {
        2 copy
        gt
        { exch } if
        pop
} bind def
/Mmax {
        2 copy
        lt
        { exch } if
        pop
} bind def
/Mshowa {
        4 -2 roll
        moveto
        2 index
        Mtmatrix setmatrix
        Mvboxa
        7 1 roll
        6 -1 roll
        5 -1 roll
        4 -1 roll
        Mshowa1
        4 1 roll
        Mshowa1
        rmoveto
        currentpoint
        0 1
        4 index length
        -1 add
        {
        2 index
        4 index
        2 index
        get
        3 index
        add
        moveto
        4 index
        exch get
        show
        } for
        pop pop pop pop
        Mgmatrix setmatrix
} bind def
/Mshowa1 {
        2 copy
        add
        4 1 roll
        sub
        mul
        sub
        -2 div
} bind def
/MathScale {
        Mwidth
        Mheight
        Mlp
        translate
        scale
        /Mgmatrix
        matrix currentmatrix
        def
        /Msaveaa exch def
        /Msavebb exch def
        /Msavecc exch def
        /Msavedd exch def
} bind def
/Mlp {
        3 copy
        Mlpfirst
        {
        Mnodistort
        {
        Mmin
        dup
        } if
        4 index
        2 index
        2 index
        Mlprun
        11 index
        11 -1 roll
        10 -4 roll
        Mlp1
        8 index
        9 -5 roll
        Mlp1
        4 -1 roll
        and
        { exit } if
        3 -1 roll
        pop pop
        } loop
        exch
        3 1 roll
        7 -3 roll
        pop pop pop
} bind def
/Mlpfirst {
        3 -1 roll
        dup length
        2 copy
        -2 add
        get
        aload
        pop pop pop
        4 -2 roll
        -1 add
        get
        aload
        pop pop pop
        6 -1 roll
        3 -1 roll
        5 -1 roll
        sub
        dup /MsaveAx exch def
        div
        4 1 roll
        exch sub
        dup /MsaveAy exch def
        div
} bind def
/Mlprun {
        2 copy
        4 index
        0 get
        dup
        4 1 roll
        Mlprun1
        3 copy
        8 -2 roll
        9 -1 roll
        {
        3 copy
        Mlprun1
        3 copy
        11 -3 roll
        /gt Mlpminmax
        8 3 roll
        11 -3 roll
        /lt Mlpminmax
        8 3 roll
        } forall
        pop pop pop pop
        3 1 roll
        pop pop
        aload pop
        5 -1 roll
        aload pop
        exch
        6 -1 roll
        Mlprun2
        8 2 roll
        4 -1 roll
        Mlprun2
        6 2 roll
        3 -1 roll
        Mlprun2
        4 2 roll
        exch
        Mlprun2
        6 2 roll
} bind def
/Mlprun1 {
        aload pop
        exch
        6 -1 roll
        5 -1 roll
        mul add
        4 -2 roll
        mul
        3 -1 roll
        add
} bind def
/Mlprun2 {
        2 copy
        add 2 div
        3 1 roll
        exch sub
} bind def
/Mlpminmax {
        cvx
        2 index
        6 index
        2 index
        exec
        {
        7 -3 roll
        4 -1 roll
        } if
        1 index
        5 index
        3 -1 roll
        exec
        {
        4 1 roll
        pop
        5 -1 roll
        aload
        pop pop
        4 -1 roll
        aload pop
        [
        8 -2 roll
        pop
        5 -2 roll
        pop
        6 -2 roll
        pop
        5 -1 roll
        ]
        4 1 roll
        pop
        }
        {
        pop pop pop
        } ifelse
} bind def
/Mlp1 {
        5 index
        3 index sub
        5 index
        2 index mul
        1 index
        le
        1 index
        0 le
        or
        dup
        not
        {
        1 index
        3 index div
        .99999 mul
        8 -1 roll
        pop
        7 1 roll
        }
        if
        8 -1 roll
        2 div
        7 -2 roll
        pop sub
        5 index
        6 -3 roll
        pop pop
        mul sub
        exch
} bind def
/Mfontsize      12 def
/Mleft          0.000000 def
/Mbottom        176.000000 def
/Mwidth         282.000000 def
/Mheight        176.000000 def
/Courier findfont 12 scalefont setfont
%!
%%Creator: Mathematica
%%AspectRatio: 0.61803 
MathPictureStart
% Scaling calculations
0.02381 0.02721 0 6.18034 [
[(5)] 0.15986 -0.0125 0 1 Msboxa
[(10)] 0.29592 -0.0125 0 1 Msboxa
[(15)] 0.43197 -0.0125 0 1 Msboxa
[(20)] 0.56803 -0.0125 0 1 Msboxa
[(25)] 0.70408 -0.0125 0 1 Msboxa
[(30)] 0.84014 -0.0125 0 1 Msboxa
[(35)] 0.97619 -0.0125 0 1 Msboxa
[(0.02)] 0.01131 0.12361 1 0 Msboxa
[(0.04)] 0.01131 0.24721 1 0 Msboxa
[(0.06)] 0.01131 0.37082 1 0 Msboxa
[(0.08)] 0.01131 0.49443 1 0 Msboxa
[(0.1)] 0.01131 0.61803 1 0 Msboxa
[ -0.001 -0.00725 0 0 ]
[ 1.001 0.61903 0 0 ]
] MathScale
% Start of Graphics
1 setlinecap
1 setlinejoin
newpath
%%Object: Graphics
[ ] 0 setdash
0 setgray
gsave
gsave
0.002 setlinewidth
0 0 moveto
1 0 lineto
stroke
0.15986 -0.00625 moveto
0.15986 0.00625 lineto
stroke
0 setgray
[(5)] 0.15986 -0.0125 0 1 Mshowa
0.29592 -0.00625 moveto
0.29592 0.00625 lineto
stroke
0 setgray
[(10)] 0.29592 -0.0125 0 1 Mshowa
0.43197 -0.00625 moveto
0.43197 0.00625 lineto
stroke
0 setgray
[(15)] 0.43197 -0.0125 0 1 Mshowa
0.56803 -0.00625 moveto
0.56803 0.00625 lineto
stroke
0 setgray
[(20)] 0.56803 -0.0125 0 1 Mshowa
0.70408 -0.00625 moveto
0.70408 0.00625 lineto
stroke
0 setgray
[(25)] 0.70408 -0.0125 0 1 Mshowa
0.84014 -0.00625 moveto
0.84014 0.00625 lineto
stroke
0 setgray
[(30)] 0.84014 -0.0125 0 1 Mshowa
0.97619 -0.00625 moveto
0.97619 0.00625 lineto
stroke
0 setgray
[(35)] 0.97619 -0.0125 0 1 Mshowa
0.02381 0 moveto
0.02381 0.61803 lineto
stroke
0.01756 0.12361 moveto
0.03006 0.12361 lineto
stroke
0 setgray
[(0.02)] 0.01131 0.12361 1 0 Mshowa
0.01756 0.24721 moveto
0.03006 0.24721 lineto
stroke
0 setgray
[(0.04)] 0.01131 0.24721 1 0 Mshowa
0.01756 0.37082 moveto
0.03006 0.37082 lineto
stroke
0 setgray
[(0.06)] 0.01131 0.37082 1 0 Mshowa
0.01756 0.49443 moveto
0.03006 0.49443 lineto
stroke
0 setgray
[(0.08)] 0.01131 0.49443 1 0 Mshowa
0.01756 0.61803 moveto
0.03006 0.61803 lineto
stroke
0 setgray
[(0.1)] 0.01131 0.61803 1 0 Mshowa
grestore
grestore
0 0 moveto
1 0 lineto
1 0.618034 lineto
0 0.618034 lineto
closepath
clip
newpath
0 setgray
gsave
gsave
0.004 setlinewidth
0.02381 0.00065 moveto
0.02877 0.00086 lineto
0.03373 0.00113 lineto
0.03869 0.00147 lineto
0.04365 0.00191 lineto
0.04861 0.00246 lineto
0.05357 0.00315 lineto
0.05853 0.00402 lineto
0.06349 0.00509 lineto
0.07341 0.00802 lineto
0.07837 0.00998 lineto
0.08333 0.01234 lineto
0.09325 0.01852 lineto
0.10317 0.0271 lineto
0.1131 0.03866 lineto
0.12302 0.05377 lineto
0.14286 0.09639 lineto
0.1627 0.15617 lineto
0.18254 0.22896 lineto
0.20238 0.30455 lineto
0.2123 0.33909 lineto
0.22222 0.36918 lineto
0.23214 0.39345 lineto
0.2371 0.4031 lineto
0.24206 0.41102 lineto
0.24702 0.41718 lineto
0.2495 0.41961 lineto
0.25198 0.42161 lineto
0.25446 0.42319 lineto
0.25694 0.42437 lineto
0.25818 0.42481 lineto
0.25942 0.42515 lineto
0.26066 0.4254 lineto
0.2619 0.42556 lineto
0.26314 0.42563 lineto
0.26438 0.42561 lineto
0.26563 0.42551 lineto
0.26687 0.42532 lineto
0.26811 0.42505 lineto
0.26935 0.42471 lineto
0.27183 0.4238 lineto
0.27431 0.42261 lineto
0.27679 0.42118 lineto
0.28175 0.41766 lineto
0.30159 0.39863 lineto
0.31151 0.3888 lineto
0.32143 0.38035 lineto
0.33135 0.37398 lineto
0.33631 0.37166 lineto
0.33879 0.37072 lineto
Mistroke
0.34127 0.36992 lineto
0.34375 0.36925 lineto
0.34623 0.36871 lineto
0.34871 0.3683 lineto
0.34995 0.36813 lineto
0.35119 0.36799 lineto
0.35243 0.36788 lineto
0.35367 0.36779 lineto
0.35491 0.36773 lineto
0.35615 0.36768 lineto
0.35739 0.36766 lineto
0.35863 0.36765 lineto
0.35987 0.36766 lineto
0.36111 0.36769 lineto
0.36235 0.36773 lineto
0.36359 0.36778 lineto
0.36607 0.36792 lineto
0.37103 0.36826 lineto
0.37599 0.36861 lineto
0.37847 0.36876 lineto
0.37971 0.36881 lineto
0.38095 0.36886 lineto
0.38219 0.36889 lineto
0.38343 0.36891 lineto
0.38467 0.36892 lineto
0.38591 0.3689 lineto
0.38715 0.36887 lineto
0.38839 0.36881 lineto
0.39087 0.36864 lineto
0.39211 0.36851 lineto
0.39335 0.36836 lineto
0.39583 0.36798 lineto
0.39831 0.36748 lineto
0.40079 0.36685 lineto
0.40575 0.36517 lineto
0.41071 0.3629 lineto
0.41567 0.35998 lineto
0.42063 0.3564 lineto
0.43056 0.34718 lineto
0.44048 0.33529 lineto
0.46032 0.30452 lineto
0.5 0.22937 lineto
0.51984 0.19476 lineto
0.52976 0.18013 lineto
0.53968 0.16781 lineto
0.5496 0.15805 lineto
0.55456 0.15417 lineto
0.55952 0.15095 lineto
0.56448 0.14841 lineto
0.56696 0.14738 lineto
Mistroke
0.56944 0.14651 lineto
0.57192 0.14579 lineto
0.5744 0.14523 lineto
0.57564 0.14501 lineto
0.57688 0.14482 lineto
0.57813 0.14467 lineto
0.57937 0.14455 lineto
0.58061 0.14447 lineto
0.58185 0.14442 lineto
0.58309 0.14441 lineto
0.58433 0.14443 lineto
0.58557 0.14448 lineto
0.58681 0.14456 lineto
0.58805 0.14468 lineto
0.58929 0.14482 lineto
0.59425 0.14567 lineto
0.59673 0.14626 lineto
0.59921 0.14693 lineto
0.60913 0.15042 lineto
0.61905 0.15476 lineto
0.63889 0.16379 lineto
0.64385 0.16573 lineto
0.64881 0.16741 lineto
0.65377 0.16878 lineto
0.65625 0.16934 lineto
0.65873 0.1698 lineto
0.66121 0.17017 lineto
0.66245 0.17031 lineto
0.66369 0.17043 lineto
0.66493 0.17051 lineto
0.66617 0.17058 lineto
0.66741 0.17061 lineto
0.66865 0.17061 lineto
0.66989 0.17059 lineto
0.67113 0.17053 lineto
0.67237 0.17045 lineto
0.67361 0.17034 lineto
0.67609 0.17002 lineto
0.67857 0.16957 lineto
0.68105 0.16901 lineto
0.68353 0.16832 lineto
0.68849 0.16655 lineto
0.69345 0.16429 lineto
0.69841 0.16153 lineto
0.71825 0.14596 lineto
0.7381 0.12476 lineto
0.77778 0.07671 lineto
0.79762 0.05511 lineto
0.81746 0.03733 lineto
0.82738 0.03005 lineto
Mistroke
0.8373 0.02384 lineto
0.84722 0.01864 lineto
0.85714 0.01435 lineto
0.86706 0.01089 lineto
0.87698 0.00815 lineto
0.8869 0.006 lineto
0.89683 0.00436 lineto
0.90675 0.00312 lineto
0.91667 0.0022 lineto
0.92659 0.00153 lineto
0.93651 0.00105 lineto
0.94147 0.00086 lineto
0.94643 0.0007 lineto
0.95635 0.00047 lineto
0.96131 0.00038 lineto
0.96627 0.00031 lineto
0.97619 0.0002 lineto
Mfstroke
grestore
grestore
% End of Graphics
MathPictureEnd
%%EPS Trailer
end
%%EndFile
end end epssave restore
grestore
grestore
1 0 0 1 187 -178 sc5mt astore 255 218 282 176 1.205674 0 0 1.045455 104.553131 -187.909088 sc6mt astore rstroke
gsave clpmt currentmatrix pop newpath
282 176 255 218 [1.205674 0 0 1.045455 104.553101 -3.909103] mkrpath
clip
newpath
clpmt setmatrix
gsave
/epssave save def TDeps_dict begin userdict begin
[1 0 0 1 187 6] dodrawctm
255 218 translate
%%BeginFile: /tmp/topdraw_eps_156_5
%!PS-Adobe-2.0 EPSF-1.2
%%BoundingBox: 0 0 282 176
%%Creator: Mathematica
%%Title: Clipboard
%%CreationDate: Never Never
%%EndComments
50 dict begin
/Mnodistort true def
/pageDashArray [4] def
/nullDashArray [] def

% Compute the minimum of two numbers.
/Mmin {         % p q Mmin min(p,q)
        2 copy          % p q p q
        gt              % p q p>q?
        { exch } if     % min(p,q) max(p,q)
        pop             % min(p,q)
} bind def


% Compute the maximum of two numbers.
/Mmax {         % p q Mmax max(p,q)
        2 copy          % p q p q
        lt              % p q p<q?
        { exch } if     % max(p,q) min(p,q)
        pop             % max(p,q)
} bind def

/Mpstart {
    MathPictureStart
} bind def
/Mpend {
    MathPictureEnd
} bind def
/Mscale {
    0 1 0 1
    5 -1 roll
    MathScale
} bind def
/Plain
        /Courier findfont
def
/Bold
        /Courier-Bold findfont
def
/Italic
        /Courier-Oblique findfont
def
/MathPictureStart {
        gsave
        newpath
        /Mtmatrix
        matrix currentmatrix
        def
        Plain
        Mfontsize scalefont
        setfont
0 setgray 0 setlinewidth
} bind def
/MathPictureEnd {
        grestore
} bind def
/Mdot {
        moveto
        0 0 rlineto
        stroke
} def
/Mtetra {
        moveto
        lineto
        lineto
        lineto
        fill
} def
/Metetra {
        moveto
        lineto
        lineto
        lineto
        closepath
        gsave
        fill
        grestore
        0 setgray
        stroke
} def
/Mistroke {
        flattenpath
        0 0 0
        {
        4 2 roll
        pop pop
        }
        {
        4 -1 roll
        2 index
        sub dup mul
        4 -1 roll
        2 index
        sub dup mul
        add sqrt
        4 -1 roll
        add
        3 1 roll
        }
        {
        stop
        }
        {
        stop
        }
        pathforall
        pop pop
        currentpoint
        stroke
        moveto
        currentdash
        3 -1 roll
        add
        setdash
} def
/Mfstroke {
        stroke
        currentdash
        pop 0
        setdash
} def
/Msboxa {
        newpath
        5 -1 roll
        Mvboxa
        pop
        6 -1 roll
        5 -1 roll
        4 -1 roll
        Msboxa1
        5 -3 roll
        Msboxa1
        [
        7 -2 roll
        [ 2 index 2 index
        10 -1 roll
        9 -1 roll
        ]
        6 1 roll
        5 -2 roll
        ]
} bind def
        
/Msboxa1 {
        sub
        2 div
        dup
        2 index
        1 add
        mul
        3 -1 roll
        -1 add
        3 -1 roll
        mul
} bind def
/Mvboxa {
        gsave
        newpath
        [ true
        3 -1 roll
        {
        Mbbox
        5 -1 roll
        {
        0
        5 1 roll
        }
        {
        7 -1 roll
        exch sub
        (m) stringwidth pop
        .3 mul
        sub
        7 1 roll
        6 -1 roll
        4 -1 roll
        Mmin
        3 -1 roll
        5 index
        add
        5 -1 roll
        4 -1 roll
        Mmax
        4 -1 roll
        }
        ifelse
        false
        }
        forall
        { stop } if
        counttomark
        1 add
        4 roll
        ]
        grestore
} bind def
/Mbbox {
        0 0 moveto
        false charpath
        flattenpath
        pathbbox
        newpath
} bind def
/Mmin {
        2 copy
        gt
        { exch } if
        pop
} bind def
/Mmax {
        2 copy
        lt
        { exch } if
        pop
} bind def
/Mshowa {
        4 -2 roll
        moveto
        2 index
        Mtmatrix setmatrix
        Mvboxa
        7 1 roll
        6 -1 roll
        5 -1 roll
        4 -1 roll
        Mshowa1
        4 1 roll
        Mshowa1
        rmoveto
        currentpoint
        0 1
        4 index length
        -1 add
        {
        2 index
        4 index
        2 index
        get
        3 index
        add
        moveto
        4 index
        exch get
        show
        } for
        pop pop pop pop
        Mgmatrix setmatrix
} bind def
/Mshowa1 {
        2 copy
        add
        4 1 roll
        sub
        mul
        sub
        -2 div
} bind def
/MathScale {
        Mwidth
        Mheight
        Mlp
        translate
        scale
        /Mgmatrix
        matrix currentmatrix
        def
        /Msaveaa exch def
        /Msavebb exch def
        /Msavecc exch def
        /Msavedd exch def
} bind def
/Mlp {
        3 copy
        Mlpfirst
        {
        Mnodistort
        {
        Mmin
        dup
        } if
        4 index
        2 index
        2 index
        Mlprun
        11 index
        11 -1 roll
        10 -4 roll
        Mlp1
        8 index
        9 -5 roll
        Mlp1
        4 -1 roll
        and
        { exit } if
        3 -1 roll
        pop pop
        } loop
        exch
        3 1 roll
        7 -3 roll
        pop pop pop
} bind def
/Mlpfirst {
        3 -1 roll
        dup length
        2 copy
        -2 add
        get
        aload
        pop pop pop
        4 -2 roll
        -1 add
        get
        aload
        pop pop pop
        6 -1 roll
        3 -1 roll
        5 -1 roll
        sub
        dup /MsaveAx exch def
        div
        4 1 roll
        exch sub
        dup /MsaveAy exch def
        div
} bind def
/Mlprun {
        2 copy
        4 index
        0 get
        dup
        4 1 roll
        Mlprun1
        3 copy
        8 -2 roll
        9 -1 roll
        {
        3 copy
        Mlprun1
        3 copy
        11 -3 roll
        /gt Mlpminmax
        8 3 roll
        11 -3 roll
        /lt Mlpminmax
        8 3 roll
        } forall
        pop pop pop pop
        3 1 roll
        pop pop
        aload pop
        5 -1 roll
        aload pop
        exch
        6 -1 roll
        Mlprun2
        8 2 roll
        4 -1 roll
        Mlprun2
        6 2 roll
        3 -1 roll
        Mlprun2
        4 2 roll
        exch
        Mlprun2
        6 2 roll
} bind def
/Mlprun1 {
        aload pop
        exch
        6 -1 roll
        5 -1 roll
        mul add
        4 -2 roll
        mul
        3 -1 roll
        add
} bind def
/Mlprun2 {
        2 copy
        add 2 div
        3 1 roll
        exch sub
} bind def
/Mlpminmax {
        cvx
        2 index
        6 index
        2 index
        exec
        {
        7 -3 roll
        4 -1 roll
        } if
        1 index
        5 index
        3 -1 roll
        exec
        {
        4 1 roll
        pop
        5 -1 roll
        aload
        pop pop
        4 -1 roll
        aload pop
        [
        8 -2 roll
        pop
        5 -2 roll
        pop
        6 -2 roll
        pop
        5 -1 roll
        ]
        4 1 roll
        pop
        }
        {
        pop pop pop
        } ifelse
} bind def
/Mlp1 {
        5 index
        3 index sub
        5 index
        2 index mul
        1 index
        le
        1 index
        0 le
        or
        dup
        not
        {
        1 index
        3 index div
        .99999 mul
        8 -1 roll
        pop
        7 1 roll
        }
        if
        8 -1 roll
        2 div
        7 -2 roll
        pop sub
        5 index
        6 -3 roll
        pop pop
        mul sub
        exch
} bind def
/Mfontsize      12 def
/Mleft          0.000000 def
/Mbottom        176.000000 def
/Mwidth         282.000000 def
/Mheight        176.000000 def
/Courier findfont 12 scalefont setfont
%!
%%Creator: Mathematica
%%AspectRatio: 0.61803 
MathPictureStart
% Scaling calculations
0.02381 0.02721 0 6.18034 [
[(5)] 0.15986 -0.0125 0 1 Msboxa
[(10)] 0.29592 -0.0125 0 1 Msboxa
[(15)] 0.43197 -0.0125 0 1 Msboxa
[(20)] 0.56803 -0.0125 0 1 Msboxa
[(25)] 0.70408 -0.0125 0 1 Msboxa
[(30)] 0.84014 -0.0125 0 1 Msboxa
[(35)] 0.97619 -0.0125 0 1 Msboxa
[(0.02)] 0.01131 0.12361 1 0 Msboxa
[(0.04)] 0.01131 0.24721 1 0 Msboxa
[(0.06)] 0.01131 0.37082 1 0 Msboxa
[(0.08)] 0.01131 0.49443 1 0 Msboxa
[(0.1)] 0.01131 0.61803 1 0 Msboxa
[ -0.001 -0.00725 0 0 ]
[ 1.001 0.61903 0 0 ]
] MathScale
% Start of Graphics
1 setlinecap
1 setlinejoin
newpath
%%Object: Graphics
[ ] 0 setdash
0 setgray
gsave
gsave
0.002 setlinewidth
0 0 moveto
1 0 lineto
stroke
0.15986 -0.00625 moveto
0.15986 0.00625 lineto
stroke
0 setgray
[(5)] 0.15986 -0.0125 0 1 Mshowa
0.29592 -0.00625 moveto
0.29592 0.00625 lineto
stroke
0 setgray
[(10)] 0.29592 -0.0125 0 1 Mshowa
0.43197 -0.00625 moveto
0.43197 0.00625 lineto
stroke
0 setgray
[(15)] 0.43197 -0.0125 0 1 Mshowa
0.56803 -0.00625 moveto
0.56803 0.00625 lineto
stroke
0 setgray
[(20)] 0.56803 -0.0125 0 1 Mshowa
0.70408 -0.00625 moveto
0.70408 0.00625 lineto
stroke
0 setgray
[(25)] 0.70408 -0.0125 0 1 Mshowa
0.84014 -0.00625 moveto
0.84014 0.00625 lineto
stroke
0 setgray
[(30)] 0.84014 -0.0125 0 1 Mshowa
0.97619 -0.00625 moveto
0.97619 0.00625 lineto
stroke
0 setgray
[(35)] 0.97619 -0.0125 0 1 Mshowa
0.02381 0 moveto
0.02381 0.61803 lineto
stroke
0.01756 0.12361 moveto
0.03006 0.12361 lineto
stroke
0 setgray
[(0.02)] 0.01131 0.12361 1 0 Mshowa
0.01756 0.24721 moveto
0.03006 0.24721 lineto
stroke
0 setgray
[(0.04)] 0.01131 0.24721 1 0 Mshowa
0.01756 0.37082 moveto
0.03006 0.37082 lineto
stroke
0 setgray
[(0.06)] 0.01131 0.37082 1 0 Mshowa
0.01756 0.49443 moveto
0.03006 0.49443 lineto
stroke
0 setgray
[(0.08)] 0.01131 0.49443 1 0 Mshowa
0.01756 0.61803 moveto
0.03006 0.61803 lineto
stroke
0 setgray
[(0.1)] 0.01131 0.61803 1 0 Mshowa
grestore
grestore
0 0 moveto
1 0 lineto
1 0.618034 lineto
0 0.618034 lineto
closepath
clip
newpath
0 setgray
gsave
gsave
0.004 setlinewidth
0.02381 0.00035 moveto
0.02877 0.00045 lineto
0.03373 0.00059 lineto
0.03869 0.00077 lineto
0.04365 0.001 lineto
0.04861 0.00129 lineto
0.05357 0.00164 lineto
0.05853 0.00209 lineto
0.06349 0.00265 lineto
0.07341 0.00416 lineto
0.07837 0.00517 lineto
0.08333 0.00638 lineto
0.09325 0.00956 lineto
0.10317 0.01397 lineto
0.1131 0.01992 lineto
0.12302 0.0277 lineto
0.14286 0.04969 lineto
0.1627 0.08072 lineto
0.18254 0.1189 lineto
0.20238 0.15937 lineto
0.22222 0.1955 lineto
0.23214 0.21003 lineto
0.24206 0.22156 lineto
0.24702 0.22614 lineto
0.25198 0.22994 lineto
0.25694 0.233 lineto
0.2619 0.23535 lineto
0.26438 0.23629 lineto
0.26687 0.23707 lineto
0.26935 0.23772 lineto
0.27183 0.23823 lineto
0.27431 0.23862 lineto
0.27555 0.23878 lineto
0.27679 0.23891 lineto
0.27803 0.23902 lineto
0.27927 0.2391 lineto
0.28051 0.23916 lineto
0.28175 0.23921 lineto
0.30159 0.23842 lineto
0.30407 0.23829 lineto
0.30655 0.23817 lineto
0.30779 0.23813 lineto
0.30903 0.23809 lineto
0.31027 0.23806 lineto
0.31151 0.23804 lineto
0.31275 0.23804 lineto
0.31399 0.23804 lineto
0.31523 0.23806 lineto
0.31647 0.23809 lineto
0.31771 0.23814 lineto
Mistroke
0.31895 0.23819 lineto
0.32143 0.23835 lineto
0.32391 0.23857 lineto
0.32639 0.23885 lineto
0.33135 0.23959 lineto
0.33631 0.24056 lineto
0.34127 0.24176 lineto
0.36111 0.24797 lineto
0.37103 0.25119 lineto
0.37599 0.25261 lineto
0.38095 0.25383 lineto
0.38343 0.25435 lineto
0.38591 0.25479 lineto
0.38839 0.25516 lineto
0.39087 0.25544 lineto
0.39211 0.25554 lineto
0.39335 0.25563 lineto
0.39459 0.25569 lineto
0.39583 0.25572 lineto
0.39707 0.25574 lineto
0.39831 0.25572 lineto
0.39955 0.25568 lineto
0.40079 0.25562 lineto
0.40203 0.25552 lineto
0.40327 0.2554 lineto
0.40575 0.25508 lineto
0.40823 0.25465 lineto
0.41071 0.2541 lineto
0.41567 0.25266 lineto
0.42063 0.25076 lineto
0.43056 0.24562 lineto
0.44048 0.23885 lineto
0.46032 0.22183 lineto
0.48016 0.20352 lineto
0.49008 0.19541 lineto
0.49504 0.19189 lineto
0.5 0.18885 lineto
0.50496 0.18635 lineto
0.50744 0.18533 lineto
0.50992 0.18447 lineto
0.5124 0.18379 lineto
0.51364 0.18351 lineto
0.51488 0.18328 lineto
0.51612 0.1831 lineto
0.51736 0.18297 lineto
0.5186 0.18288 lineto
0.51984 0.18284 lineto
0.52108 0.18286 lineto
0.52232 0.18292 lineto
0.52356 0.18304 lineto
Mistroke
0.5248 0.18321 lineto
0.52728 0.18371 lineto
0.52852 0.18404 lineto
0.52976 0.18442 lineto
0.53472 0.18653 lineto
0.5372 0.18792 lineto
0.53968 0.18955 lineto
0.5496 0.1984 lineto
0.55952 0.21096 lineto
0.57937 0.24616 lineto
0.61905 0.33856 lineto
0.63889 0.38017 lineto
0.64881 0.39608 lineto
0.65377 0.40241 lineto
0.65873 0.40752 lineto
0.66121 0.40959 lineto
0.66369 0.41134 lineto
0.66617 0.41274 lineto
0.66865 0.4138 lineto
0.66989 0.4142 lineto
0.67113 0.41451 lineto
0.67237 0.41474 lineto
0.67361 0.41487 lineto
0.67485 0.41492 lineto
0.67609 0.41487 lineto
0.67733 0.41473 lineto
0.67857 0.41451 lineto
0.67981 0.41419 lineto
0.68105 0.41379 lineto
0.68353 0.41271 lineto
0.68601 0.41127 lineto
0.68849 0.40948 lineto
0.69345 0.40483 lineto
0.69841 0.39882 lineto
0.70833 0.38291 lineto
0.71825 0.36237 lineto
0.7381 0.31067 lineto
0.77778 0.19151 lineto
0.79762 0.13766 lineto
0.81746 0.09328 lineto
0.82738 0.0751 lineto
0.8373 0.05958 lineto
0.84722 0.04658 lineto
0.85714 0.03588 lineto
0.86706 0.02723 lineto
0.87698 0.02037 lineto
0.8869 0.01501 lineto
0.89683 0.0109 lineto
0.90675 0.0078 lineto
0.91667 0.0055 lineto
Mistroke
0.92659 0.00382 lineto
0.93651 0.00261 lineto
0.94147 0.00215 lineto
0.94643 0.00176 lineto
0.95635 0.00117 lineto
0.96131 0.00095 lineto
0.96627 0.00077 lineto
0.97619 0.00049 lineto
Mfstroke
grestore
grestore
% End of Graphics
MathPictureEnd
%%EPS Trailer
end
%%EndFile
end end epssave restore
grestore
grestore
1 0 0 1 187 6 sc5mt astore 255 218 282 176 1.205674 0 0 1.045455 104.553101 -3.909103 sc6mt astore rstroke
gsave clpmt currentmatrix pop newpath
282 176 255 218 [1.205674 0 0 1.051136 104.553162 178.852264] mkrpath
clip
newpath
clpmt setmatrix
gsave
/epssave save def TDeps_dict begin userdict begin
[0.997067 0 0 1 188.727264 190] dodrawctm
255 218 translate
%%BeginFile: /tmp/topdraw_eps_156_6
%!PS-Adobe-2.0 EPSF-1.2
%%BoundingBox: 0 0 282 176
%%Creator: Mathematica
%%Title: Clipboard
%%CreationDate: Never Never
%%EndComments
50 dict begin
/Mnodistort true def
/pageDashArray [4] def
/nullDashArray [] def

% Compute the minimum of two numbers.
/Mmin {         % p q Mmin min(p,q)
        2 copy          % p q p q
        gt              % p q p>q?
        { exch } if     % min(p,q) max(p,q)
        pop             % min(p,q)
} bind def


% Compute the maximum of two numbers.
/Mmax {         % p q Mmax max(p,q)
        2 copy          % p q p q
        lt              % p q p<q?
        { exch } if     % max(p,q) min(p,q)
        pop             % max(p,q)
} bind def

/Mpstart {
    MathPictureStart
} bind def
/Mpend {
    MathPictureEnd
} bind def
/Mscale {
    0 1 0 1
    5 -1 roll
    MathScale
} bind def
/Plain
        /Courier findfont
def
/Bold
        /Courier-Bold findfont
def
/Italic
        /Courier-Oblique findfont
def
/MathPictureStart {
        gsave
        newpath
        /Mtmatrix
        matrix currentmatrix
        def
        Plain
        Mfontsize scalefont
        setfont
0 setgray 0 setlinewidth
} bind def
/MathPictureEnd {
        grestore
} bind def
/Mdot {
        moveto
        0 0 rlineto
        stroke
} def
/Mtetra {
        moveto
        lineto
        lineto
        lineto
        fill
} def
/Metetra {
        moveto
        lineto
        lineto
        lineto
        closepath
        gsave
        fill
        grestore
        0 setgray
        stroke
} def
/Mistroke {
        flattenpath
        0 0 0
        {
        4 2 roll
        pop pop
        }
        {
        4 -1 roll
        2 index
        sub dup mul
        4 -1 roll
        2 index
        sub dup mul
        add sqrt
        4 -1 roll
        add
        3 1 roll
        }
        {
        stop
        }
        {
        stop
        }
        pathforall
        pop pop
        currentpoint
        stroke
        moveto
        currentdash
        3 -1 roll
        add
        setdash
} def
/Mfstroke {
        stroke
        currentdash
        pop 0
        setdash
} def
/Msboxa {
        newpath
        5 -1 roll
        Mvboxa
        pop
        6 -1 roll
        5 -1 roll
        4 -1 roll
        Msboxa1
        5 -3 roll
        Msboxa1
        [
        7 -2 roll
        [ 2 index 2 index
        10 -1 roll
        9 -1 roll
        ]
        6 1 roll
        5 -2 roll
        ]
} bind def
        
/Msboxa1 {
        sub
        2 div
        dup
        2 index
        1 add
        mul
        3 -1 roll
        -1 add
        3 -1 roll
        mul
} bind def
/Mvboxa {
        gsave
        newpath
        [ true
        3 -1 roll
        {
        Mbbox
        5 -1 roll
        {
        0
        5 1 roll
        }
        {
        7 -1 roll
        exch sub
        (m) stringwidth pop
        .3 mul
        sub
        7 1 roll
        6 -1 roll
        4 -1 roll
        Mmin
        3 -1 roll
        5 index
        add
        5 -1 roll
        4 -1 roll
        Mmax
        4 -1 roll
        }
        ifelse
        false
        }
        forall
        { stop } if
        counttomark
        1 add
        4 roll
        ]
        grestore
} bind def
/Mbbox {
        0 0 moveto
        false charpath
        flattenpath
        pathbbox
        newpath
} bind def
/Mmin {
        2 copy
        gt
        { exch } if
        pop
} bind def
/Mmax {
        2 copy
        lt
        { exch } if
        pop
} bind def
/Mshowa {
        4 -2 roll
        moveto
        2 index
        Mtmatrix setmatrix
        Mvboxa
        7 1 roll
        6 -1 roll
        5 -1 roll
        4 -1 roll
        Mshowa1
        4 1 roll
        Mshowa1
        rmoveto
        currentpoint
        0 1
        4 index length
        -1 add
        {
        2 index
        4 index
        2 index
        get
        3 index
        add
        moveto
        4 index
        exch get
        show
        } for
        pop pop pop pop
        Mgmatrix setmatrix
} bind def
/Mshowa1 {
        2 copy
        add
        4 1 roll
        sub
        mul
        sub
        -2 div
} bind def
/MathScale {
        Mwidth
        Mheight
        Mlp
        translate
        scale
        /Mgmatrix
        matrix currentmatrix
        def
        /Msaveaa exch def
        /Msavebb exch def
        /Msavecc exch def
        /Msavedd exch def
} bind def
/Mlp {
        3 copy
        Mlpfirst
        {
        Mnodistort
        {
        Mmin
        dup
        } if
        4 index
        2 index
        2 index
        Mlprun
        11 index
        11 -1 roll
        10 -4 roll
        Mlp1
        8 index
        9 -5 roll
        Mlp1
        4 -1 roll
        and
        { exit } if
        3 -1 roll
        pop pop
        } loop
        exch
        3 1 roll
        7 -3 roll
        pop pop pop
} bind def
/Mlpfirst {
        3 -1 roll
        dup length
        2 copy
        -2 add
        get
        aload
        pop pop pop
        4 -2 roll
        -1 add
        get
        aload
        pop pop pop
        6 -1 roll
        3 -1 roll
        5 -1 roll
        sub
        dup /MsaveAx exch def
        div
        4 1 roll
        exch sub
        dup /MsaveAy exch def
        div
} bind def
/Mlprun {
        2 copy
        4 index
        0 get
        dup
        4 1 roll
        Mlprun1
        3 copy
        8 -2 roll
        9 -1 roll
        {
        3 copy
        Mlprun1
        3 copy
        11 -3 roll
        /gt Mlpminmax
        8 3 roll
        11 -3 roll
        /lt Mlpminmax
        8 3 roll
        } forall
        pop pop pop pop
        3 1 roll
        pop pop
        aload pop
        5 -1 roll
        aload pop
        exch
        6 -1 roll
        Mlprun2
        8 2 roll
        4 -1 roll
        Mlprun2
        6 2 roll
        3 -1 roll
        Mlprun2
        4 2 roll
        exch
        Mlprun2
        6 2 roll
} bind def
/Mlprun1 {
        aload pop
        exch
        6 -1 roll
        5 -1 roll
        mul add
        4 -2 roll
        mul
        3 -1 roll
        add
} bind def
/Mlprun2 {
        2 copy
        add 2 div
        3 1 roll
        exch sub
} bind def
/Mlpminmax {
        cvx
        2 index
        6 index
        2 index
        exec
        {
        7 -3 roll
        4 -1 roll
        } if
        1 index
        5 index
        3 -1 roll
        exec
        {
        4 1 roll
        pop
        5 -1 roll
        aload
        pop pop
        4 -1 roll
        aload pop
        [
        8 -2 roll
        pop
        5 -2 roll
        pop
        6 -2 roll
        pop
        5 -1 roll
        ]
        4 1 roll
        pop
        }
        {
        pop pop pop
        } ifelse
} bind def
/Mlp1 {
        5 index
        3 index sub
        5 index
        2 index mul
        1 index
        le
        1 index
        0 le
        or
        dup
        not
        {
        1 index
        3 index div
        .99999 mul
        8 -1 roll
        pop
        7 1 roll
        }
        if
        8 -1 roll
        2 div
        7 -2 roll
        pop sub
        5 index
        6 -3 roll
        pop pop
        mul sub
        exch
} bind def
/Mfontsize      12 def
/Mleft          0.000000 def
/Mbottom        176.000000 def
/Mwidth         282.000000 def
/Mheight        176.000000 def
/Courier findfont 12 scalefont setfont
%!
%%Creator: Mathematica
%%AspectRatio: 0.61803 
MathPictureStart
% Scaling calculations
0.02381 0.02721 0 2.47214 [
[(5)] 0.15986 -0.0125 0 1 Msboxa
[(10)] 0.29592 -0.0125 0 1 Msboxa
[(15)] 0.43197 -0.0125 0 1 Msboxa
[(20)] 0.56803 -0.0125 0 1 Msboxa
[(25)] 0.70408 -0.0125 0 1 Msboxa
[(30)] 0.84014 -0.0125 0 1 Msboxa
[(35)] 0.97619 -0.0125 0 1 Msboxa
[(0.05)] 0.01131 0.12361 1 0 Msboxa
[(0.1)] 0.01131 0.24721 1 0 Msboxa
[(0.15)] 0.01131 0.37082 1 0 Msboxa
[(0.2)] 0.01131 0.49443 1 0 Msboxa
[(0.25)] 0.01131 0.61803 1 0 Msboxa
[ -0.001 -0.00725 0 0 ]
[ 1.001 0.61903 0 0 ]
] MathScale
% Start of Graphics
1 setlinecap
1 setlinejoin
newpath
%%Object: Graphics
[ ] 0 setdash
0 setgray
gsave
gsave
0.002 setlinewidth
0 0 moveto
1 0 lineto
stroke
0.15986 -0.00625 moveto
0.15986 0.00625 lineto
stroke
0 setgray
[(5)] 0.15986 -0.0125 0 1 Mshowa
0.29592 -0.00625 moveto
0.29592 0.00625 lineto
stroke
0 setgray
[(10)] 0.29592 -0.0125 0 1 Mshowa
0.43197 -0.00625 moveto
0.43197 0.00625 lineto
stroke
0 setgray
[(15)] 0.43197 -0.0125 0 1 Mshowa
0.56803 -0.00625 moveto
0.56803 0.00625 lineto
stroke
0 setgray
[(20)] 0.56803 -0.0125 0 1 Mshowa
0.70408 -0.00625 moveto
0.70408 0.00625 lineto
stroke
0 setgray
[(25)] 0.70408 -0.0125 0 1 Mshowa
0.84014 -0.00625 moveto
0.84014 0.00625 lineto
stroke
0 setgray
[(30)] 0.84014 -0.0125 0 1 Mshowa
0.97619 -0.00625 moveto
0.97619 0.00625 lineto
stroke
0 setgray
[(35)] 0.97619 -0.0125 0 1 Mshowa
0.02381 0 moveto
0.02381 0.61803 lineto
stroke
0.01756 0.12361 moveto
0.03006 0.12361 lineto
stroke
0 setgray
[(0.05)] 0.01131 0.12361 1 0 Mshowa
0.01756 0.24721 moveto
0.03006 0.24721 lineto
stroke
0 setgray
[(0.1)] 0.01131 0.24721 1 0 Mshowa
0.01756 0.37082 moveto
0.03006 0.37082 lineto
stroke
0 setgray
[(0.15)] 0.01131 0.37082 1 0 Mshowa
0.01756 0.49443 moveto
0.03006 0.49443 lineto
stroke
0 setgray
[(0.2)] 0.01131 0.49443 1 0 Mshowa
0.01756 0.61803 moveto
0.03006 0.61803 lineto
stroke
0 setgray
[(0.25)] 0.01131 0.61803 1 0 Mshowa
grestore
grestore
0 0 moveto
1 0 lineto
1 0.618034 lineto
0 0.618034 lineto
closepath
clip
newpath
0 setgray
gsave
gsave
gsave
0.004 setlinewidth
0.02381 0.00073 moveto
0.02877 0.00098 lineto
0.03373 0.0013 lineto
0.03869 0.00171 lineto
0.04365 0.00223 lineto
0.04861 0.0029 lineto
0.05357 0.00374 lineto
0.05853 0.0048 lineto
0.06349 0.00611 lineto
0.07341 0.00971 lineto
0.07837 0.01213 lineto
0.08333 0.01504 lineto
0.09325 0.02267 lineto
0.10317 0.03329 lineto
0.1131 0.04759 lineto
0.12302 0.06624 lineto
0.14286 0.11852 lineto
0.1627 0.19068 lineto
0.18254 0.27582 lineto
0.20238 0.35872 lineto
0.2123 0.3931 lineto
0.21726 0.40743 lineto
0.22222 0.41948 lineto
0.22718 0.42902 lineto
0.22966 0.4328 lineto
0.23214 0.43588 lineto
0.23462 0.43825 lineto
0.23586 0.43917 lineto
0.2371 0.43991 lineto
0.23834 0.44047 lineto
0.23958 0.44084 lineto
0.24082 0.44103 lineto
0.24206 0.44104 lineto
0.2433 0.44087 lineto
0.24454 0.44051 lineto
0.24578 0.43997 lineto
0.24702 0.43924 lineto
0.2495 0.43726 lineto
0.25198 0.43456 lineto
0.25694 0.42707 lineto
0.2619 0.41693 lineto
0.27183 0.38953 lineto
0.28175 0.35439 lineto
0.30159 0.27083 lineto
0.32143 0.1861 lineto
0.34127 0.11498 lineto
0.36111 0.06387 lineto
0.37103 0.04574 lineto
0.38095 0.0319 lineto
0.39087 0.02166 lineto
Mistroke
0.39583 0.01768 lineto
0.40079 0.01433 lineto
0.40575 0.01153 lineto
0.41071 0.00922 lineto
0.41567 0.00733 lineto
0.42063 0.00578 lineto
0.43056 0.00353 lineto
0.43552 0.00273 lineto
0.44048 0.0021 lineto
0.44544 0.0016 lineto
0.4504 0.00122 lineto
0.45536 0.00092 lineto
0.46032 0.00069 lineto
0.46528 0.00051 lineto
0.47024 0.00038 lineto
0.4752 0.00028 lineto
0.48016 0.0002 lineto
0.48512 0.00015 lineto
0.49008 0.0001 lineto
0.49504 7e-05 lineto
0.5 5e-05 lineto
0.50496 4e-05 lineto
0.50992 3e-05 lineto
0.51488 2e-05 lineto
0.51984 1e-05 lineto
0.52232 1e-05 lineto
0.5248 1e-05 lineto
0.52728 1e-05 lineto
0.52976 1e-05 lineto
0.53472 0 lineto
0.5372 0 lineto
0.53968 0 lineto
0.54216 0 lineto
0.54464 0 lineto
0.5496 0 lineto
0.55208 0 lineto
0.55456 0 lineto
0.55704 0 lineto
0.55952 0 lineto
0.56448 0 lineto
0.56696 0 lineto
0.56944 0 lineto
0.57192 0 lineto
0.5744 0 lineto
0.57937 0 lineto
0.58185 0 lineto
0.58433 0 lineto
0.58681 0 lineto
0.58929 0 lineto
0.59425 0 lineto
Mistroke
0.59673 0 lineto
0.59921 0 lineto
0.60169 0 lineto
0.60417 0 lineto
0.60665 0 lineto
0.60913 0 lineto
0.61161 0 lineto
0.61409 0 lineto
0.61657 0 lineto
0.61905 0 lineto
0.62153 0 lineto
0.62401 0 lineto
0.62649 0 lineto
0.62897 0 lineto
0.63145 0 lineto
0.63393 0 lineto
0.63641 0 lineto
0.63889 0 lineto
0.64137 0 lineto
0.64385 0 lineto
0.64633 0 lineto
0.64881 0 lineto
0.65129 0 lineto
0.65377 0 lineto
0.65625 0 lineto
0.65873 0 lineto
0.66121 0 lineto
0.66369 0 lineto
0.66617 0 lineto
0.66865 0 lineto
0.67113 0 lineto
0.67361 0 lineto
0.67609 0 lineto
0.67857 0 lineto
0.68105 0 lineto
0.68353 0 lineto
0.68601 0 lineto
0.68849 0 lineto
0.69097 0 lineto
0.69345 0 lineto
0.69593 0 lineto
0.69841 0 lineto
0.70089 0 lineto
0.70337 0 lineto
0.70585 0 lineto
0.70833 0 lineto
0.71081 0 lineto
0.71329 0 lineto
0.71577 0 lineto
0.71825 0 lineto
Mistroke
0.72073 0 lineto
0.72321 0 lineto
0.72569 0 lineto
0.72817 0 lineto
0.73065 0 lineto
0.73313 0 lineto
0.73562 0 lineto
0.7381 0 lineto
0.74058 0 lineto
0.74306 0 lineto
0.74554 0 lineto
0.74802 0 lineto
0.7505 0 lineto
0.75298 0 lineto
0.75546 0 lineto
0.75794 0 lineto
0.76042 0 lineto
0.7629 0 lineto
0.76538 0 lineto
0.76786 0 lineto
0.77034 0 lineto
0.77282 0 lineto
0.77406 0 lineto
0.7753 0 lineto
0.77654 0 lineto
0.77778 0 lineto
0.78026 0 lineto
0.7815 0 lineto
0.78274 0 lineto
0.78398 0 lineto
0.78522 0 lineto
0.7877 0 lineto
0.78894 0 lineto
0.79018 0 lineto
0.79142 0 lineto
0.79266 0 lineto
0.79514 0 lineto
0.79638 0 lineto
0.79762 0 lineto
0.79886 0 lineto
0.8001 0 lineto
0.80258 0 lineto
0.80382 0 lineto
0.80506 0 lineto
0.8063 0 lineto
0.80754 0 lineto
0.81002 0 lineto
0.81126 0 lineto
0.8125 0 lineto
0.81374 0 lineto
Mistroke
0.81498 0 lineto
0.81746 0 lineto
0.8187 0 lineto
0.81994 0 lineto
0.82118 0 lineto
0.82242 0 lineto
0.8249 0 lineto
0.82614 0 lineto
0.82738 0 lineto
0.82862 0 lineto
0.82986 0 lineto
0.83234 0 lineto
0.83358 0 lineto
0.83482 0 lineto
0.83606 0 lineto
0.8373 0 lineto
0.83978 0 lineto
0.84102 0 lineto
0.84226 0 lineto
0.8435 0 lineto
0.84474 0 lineto
0.84722 0 lineto
0.84846 0 lineto
0.8497 0 lineto
0.85094 0 lineto
0.85218 0 lineto
0.85466 0 lineto
0.8559 0 lineto
0.85714 0 lineto
0.85838 0 lineto
0.85962 0 lineto
0.8621 0 lineto
0.86334 0 lineto
0.86458 0 lineto
0.86582 0 lineto
0.86706 0 lineto
0.86954 0 lineto
0.87078 0 lineto
0.87202 0 lineto
0.87326 0 lineto
0.8745 0 lineto
0.87574 0 lineto
0.87698 0 lineto
0.87822 0 lineto
0.87946 0 lineto
0.88194 0 lineto
0.88318 0 lineto
0.88442 0 lineto
0.88566 0 lineto
0.8869 0 lineto
Mistroke
0.88938 0 lineto
0.89062 0 lineto
0.89187 0 lineto
0.89311 0 lineto
0.89435 0 lineto
0.89683 0 lineto
0.89807 0 lineto
0.89931 0 lineto
0.90055 0 lineto
0.90179 0 lineto
0.90427 0 lineto
0.90551 0 lineto
0.90675 0 lineto
0.90799 0 lineto
0.90923 0 lineto
0.91171 0 lineto
0.91295 0 lineto
0.91419 0 lineto
0.91543 0 lineto
0.91667 0 lineto
0.91915 0 lineto
0.92039 0 lineto
0.92163 0 lineto
0.92287 0 lineto
0.92411 0 lineto
0.92659 0 lineto
0.92783 0 lineto
0.92907 0 lineto
0.93031 0 lineto
0.93155 0 lineto
0.93403 0 lineto
0.93527 0 lineto
0.93651 0 lineto
0.97619 0 lineto
Mfstroke
grestore
grestore
gsave
gsave
0.004 setlinewidth
0.02381 8e-05 moveto
0.02877 0.0001 lineto
0.03373 0.00012 lineto
0.04365 0.00019 lineto
0.04861 0.00023 lineto
0.05357 0.00028 lineto
0.05853 0.00033 lineto
0.06349 0.00041 lineto
0.07341 0.00059 lineto
0.08333 0.00085 lineto
0.09325 0.00121 lineto
0.10317 0.0017 lineto
0.1131 0.00237 lineto
0.12302 0.00327 lineto
0.13294 0.00445 lineto
0.14286 0.006 lineto
0.15278 0.00799 lineto
0.1627 0.01053 lineto
0.17262 0.01372 lineto
0.18254 0.01768 lineto
0.19246 0.02254 lineto
0.20238 0.02841 lineto
0.22222 0.04366 lineto
0.24206 0.06419 lineto
0.2619 0.09029 lineto
0.30159 0.1564 lineto
0.32143 0.19261 lineto
0.34127 0.22692 lineto
0.36111 0.25576 lineto
0.37103 0.26705 lineto
0.37599 0.27175 lineto
0.38095 0.27576 lineto
0.38591 0.27907 lineto
0.39087 0.28163 lineto
0.39335 0.28263 lineto
0.39583 0.28343 lineto
0.39831 0.28404 lineto
0.39955 0.28427 lineto
0.40079 0.28445 lineto
0.40203 0.28458 lineto
0.40327 0.28467 lineto
0.40451 0.2847 lineto
0.40575 0.28469 lineto
0.40699 0.28462 lineto
0.40823 0.28451 lineto
0.40947 0.28435 lineto
0.41071 0.28414 lineto
0.41319 0.28357 lineto
0.41567 0.2828 lineto
0.42063 0.28069 lineto
Mistroke
0.4256 0.27783 lineto
0.43056 0.27424 lineto
0.44048 0.26498 lineto
0.46032 0.23931 lineto
0.5 0.17089 lineto
0.53968 0.10221 lineto
0.55952 0.07397 lineto
0.57937 0.05121 lineto
0.59921 0.03391 lineto
0.60913 0.02714 lineto
0.61905 0.02149 lineto
0.63889 0.01302 lineto
0.64881 0.00997 lineto
0.65873 0.00755 lineto
0.66865 0.00566 lineto
0.67857 0.00419 lineto
0.68849 0.00307 lineto
0.69841 0.00222 lineto
0.70833 0.00159 lineto
0.71825 0.00113 lineto
0.72817 0.00079 lineto
0.7381 0.00055 lineto
0.74306 0.00045 lineto
0.74802 0.00038 lineto
0.75794 0.00025 lineto
0.7629 0.00021 lineto
0.76786 0.00017 lineto
0.77282 0.00014 lineto
0.77778 0.00011 lineto
0.7877 7e-05 lineto
0.79266 6e-05 lineto
0.79762 5e-05 lineto
0.80258 4e-05 lineto
0.80754 3e-05 lineto
0.81746 2e-05 lineto
0.82242 2e-05 lineto
0.82738 1e-05 lineto
0.83234 1e-05 lineto
0.8373 1e-05 lineto
0.84226 1e-05 lineto
0.84722 0 lineto
0.85218 0 lineto
0.85714 0 lineto
0.8621 0 lineto
0.86706 0 lineto
0.87202 0 lineto
0.87698 0 lineto
0.88194 0 lineto
0.8869 0 lineto
0.89187 0 lineto
Mistroke
0.89683 0 lineto
0.90179 0 lineto
0.90675 0 lineto
0.91171 0 lineto
0.91667 0 lineto
0.92163 0 lineto
0.92659 0 lineto
0.93155 0 lineto
0.93651 0 lineto
0.94147 0 lineto
0.94643 0 lineto
0.95139 0 lineto
0.95635 0 lineto
0.96131 0 lineto
0.96627 0 lineto
0.97123 0 lineto
0.97619 0 lineto
Mfstroke
grestore
grestore
gsave
gsave
0.004 setlinewidth
0.02381 0 moveto
0.02629 0 lineto
0.02877 0 lineto
0.03125 0 lineto
0.03373 0 lineto
0.03621 0 lineto
0.03869 0 lineto
0.04117 0 lineto
0.04365 0 lineto
0.04613 0 lineto
0.04861 0 lineto
0.05109 0 lineto
0.05357 0 lineto
0.05853 0 lineto
0.06101 0 lineto
0.06349 0 lineto
0.06597 0 lineto
0.06845 0 lineto
0.07093 0 lineto
0.07341 0 lineto
0.07837 0 lineto
0.08085 0 lineto
0.08333 0 lineto
0.08581 0 lineto
0.08829 0 lineto
0.09325 0 lineto
0.09573 0 lineto
0.09821 0 lineto
0.10069 0 lineto
0.10317 0 lineto
0.10813 0 lineto
0.11062 0 lineto
0.1131 0 lineto
0.11558 0 lineto
0.11806 0 lineto
0.12054 0 lineto
0.12302 0 lineto
0.1255 0 lineto
0.12798 0 lineto
0.13294 0 lineto
0.13542 0 lineto
0.1379 0 lineto
0.14038 0 lineto
0.14286 0 lineto
0.14782 0 lineto
0.1503 0 lineto
0.15278 0 lineto
0.15526 0 lineto
0.15774 0 lineto
0.1627 0 lineto
Mistroke
0.16518 0 lineto
0.16766 0 lineto
0.17014 0 lineto
0.17262 0 lineto
0.17758 0 lineto
0.18006 0 lineto
0.18254 0 lineto
0.18502 0 lineto
0.1875 0 lineto
0.19246 0 lineto
0.19742 0 lineto
0.20238 0 lineto
0.20734 0 lineto
0.2123 0 lineto
0.21726 0 lineto
0.22222 0 lineto
0.22718 0 lineto
0.23214 0 lineto
0.2371 0 lineto
0.24206 0 lineto
0.24702 0 lineto
0.25198 0 lineto
0.25694 0 lineto
0.2619 0 lineto
0.26687 0 lineto
0.27183 0 lineto
0.27679 0 lineto
0.28175 0 lineto
0.28671 0 lineto
0.29167 0 lineto
0.29663 1e-05 lineto
0.30159 1e-05 lineto
0.30655 1e-05 lineto
0.31151 1e-05 lineto
0.31647 2e-05 lineto
0.32143 3e-05 lineto
0.32639 3e-05 lineto
0.33135 4e-05 lineto
0.33631 5e-05 lineto
0.34127 7e-05 lineto
0.34623 9e-05 lineto
0.35119 0.00011 lineto
0.36111 0.00019 lineto
0.36607 0.00023 lineto
0.37103 0.00029 lineto
0.37599 0.00037 lineto
0.38095 0.00046 lineto
0.39087 0.00071 lineto
0.39583 0.00088 lineto
0.40079 0.00108 lineto
Mistroke
0.40575 0.00132 lineto
0.41071 0.00162 lineto
0.42063 0.00238 lineto
0.43056 0.00347 lineto
0.44048 0.00496 lineto
0.4504 0.00701 lineto
0.46032 0.00974 lineto
0.47024 0.01335 lineto
0.48016 0.01803 lineto
0.49008 0.02398 lineto
0.5 0.03144 lineto
0.51984 0.05168 lineto
0.53968 0.08009 lineto
0.55952 0.11699 lineto
0.57937 0.16109 lineto
0.59921 0.20908 lineto
0.61905 0.25581 lineto
0.63889 0.29502 lineto
0.64881 0.30989 lineto
0.65377 0.31584 lineto
0.65873 0.32073 lineto
0.66121 0.32275 lineto
0.66369 0.32449 lineto
0.66617 0.32593 lineto
0.66865 0.32708 lineto
0.66989 0.32755 lineto
0.67113 0.32793 lineto
0.67237 0.32825 lineto
0.67361 0.32848 lineto
0.67485 0.32865 lineto
0.67609 0.32873 lineto
0.67733 0.32874 lineto
0.67857 0.32868 lineto
0.67981 0.32853 lineto
0.68105 0.32832 lineto
0.68353 0.32765 lineto
0.68477 0.32721 lineto
0.68601 0.32669 lineto
0.68849 0.32543 lineto
0.69345 0.32203 lineto
0.69841 0.3175 lineto
0.70833 0.30521 lineto
0.71825 0.28911 lineto
0.7381 0.24815 lineto
0.77778 0.15313 lineto
0.79762 0.11009 lineto
0.81746 0.07461 lineto
0.82738 0.06007 lineto
0.8373 0.04766 lineto
0.84722 0.03726 lineto
Mistroke
0.85714 0.0287 lineto
0.86706 0.02178 lineto
0.87698 0.01629 lineto
0.8869 0.01201 lineto
0.89683 0.00872 lineto
0.90675 0.00624 lineto
0.91667 0.0044 lineto
0.92659 0.00305 lineto
0.93651 0.00209 lineto
0.94147 0.00172 lineto
0.94643 0.00141 lineto
0.95635 0.00094 lineto
0.96131 0.00076 lineto
0.96627 0.00061 lineto
0.97619 0.0004 lineto
Mfstroke
grestore
grestore
grestore
% End of Graphics
MathPictureEnd
%%EPS Trailer
end
%%EndFile
end end epssave restore
grestore
grestore
1 0 0 1 188 190 sc5mt astore 255 218 282 176 1.205674 0 0 1.051136 104.553162 178.852264 sc6mt astore rstroke
/txtdraw true def
/txlndraw true def
(x) [0 0] 351 190 /Helvetica-Bold [ 15 1 mul 0 0 15 0 0 ] [1 0 0 1 379.39502 -142.25] dotx
/txtdraw true def
/txlndraw true def
(i) [0 0] 359.339996 184 /Helvetica-Bold [ 15 1 mul 0 0 15 0 0 ] [1 0 0 1 379.39502 -142.25] dotx
/txtdraw true def
/txlndraw true def
( ) [0 0] 363.51001 190 /Helvetica-Bold [ 15 1 mul 0 0 15 0 0 ] [1 0 0 1 379.39502 -142.25] dotx
/txtdraw true def
/txlndraw true def
(Pr\() [10.005005 0 5.834991 0 0 0] 357 299 /Helvetica-BoldOblique [ 15 1 mul 0 0 15 0 0 ] [1 0 0 1 122.39502 -103.25] dotx
/txtdraw true def
/txlndraw true def
(x) [0 0] 377.834991 299 /Helvetica-Bold [ 15 1 mul 0 0 15 0 0 ] [1 0 0 1 122.39502 -103.25] dotx
/txtdraw true def
/txlndraw true def
(i) [0 0] 386.174988 293 /Helvetica-Bold [ 15 1 mul 0 0 15 0 0 ] [1 0 0 1 122.39502 -103.25] dotx
/txtdraw true def
/txlndraw true def
(|S) [4.200012 0 0 0] 390.345001 299 /Helvetica-Bold [ 15 1 mul 0 0 15 0 0 ] [1 0 0 1 122.39502 -103.25] dotx
/txtdraw true def
/txlndraw true def
(2) [0 0] 404.550018 293 /Helvetica-Bold [ 15 1 mul 0 0 15 0 0 ] [1 0 0 1 122.39502 -103.25] dotx
/txtdraw true def
/txlndraw true def
(\) ) [4.994995 0 0 0] 412.890015 299 /Helvetica-BoldOblique [ 15 1 mul 0 0 15 0 0 ] [1 0 0 1 122.39502 -103.25] dotx
/txtdraw true def
/txlndraw true def
(x) [0 0] 351 190 /Helvetica-Bold [ 15 1 mul 0 0 15 0 0 ] [1 0 0 1 378.39502 42.75] dotx
/txtdraw true def
/txlndraw true def
(i) [0 0] 359.339996 184 /Helvetica-Bold [ 15 1 mul 0 0 15 0 0 ] [1 0 0 1 378.39502 42.75] dotx
/txtdraw true def
/txlndraw true def
( ) [0 0] 363.51001 190 /Helvetica-Bold [ 15 1 mul 0 0 15 0 0 ] [1 0 0 1 378.39502 42.75] dotx
/txtdraw true def
/txlndraw true def
(Pr\() [10.005005 0 5.834991 0 0 0] 357 299 /Helvetica-BoldOblique [ 15 1 mul 0 0 15 0 0 ] [1 0 0 1 123.39502 82.75] dotx
/txtdraw true def
/txlndraw true def
(x) [0 0] 377.834991 299 /Helvetica-Bold [ 15 1 mul 0 0 15 0 0 ] [1 0 0 1 123.39502 82.75] dotx
/txtdraw true def
/txlndraw true def
(i) [0 0] 386.174988 293 /Helvetica-Bold [ 15 1 mul 0 0 15 0 0 ] [1 0 0 1 123.39502 82.75] dotx
/txtdraw true def
/txlndraw true def
(|S) [4.200012 0 0 0] 390.345001 299 /Helvetica-Bold [ 15 1 mul 0 0 15 0 0 ] [1 0 0 1 123.39502 82.75] dotx
/txtdraw true def
/txlndraw true def
(1) [0 0] 404.550018 293 /Helvetica-Bold [ 15 1 mul 0 0 15 0 0 ] [1 0 0 1 123.39502 82.75] dotx
/txtdraw true def
/txlndraw true def
(\) ) [4.994995 0 0 0] 412.890015 299 /Helvetica-BoldOblique [ 15 1 mul 0 0 15 0 0 ] [1 0 0 1 123.39502 82.75] dotx
/usedash true def
1 0 0 1 70 16 sc5mt astore 0 -57 95 506 1 0 0 1 100 -28 sc6mt astore ssl
/txtdraw true def
/txlndraw true def
(Semi-continuous      Codebook ) [10.004997 0 8.340004 0 13.335007 0 4.169998 0 4.994995 0 8.339996 0 9.164993 0 9.164993 0 4.994995 0 4.169998 0 9.014999 0 9.164993 0 9.164993 0 9.164993 0 8.339996 0 -121.529953 -17.849976 4.169998 0 4.169998 0 4.169998 0 4.169998 0 4.169998 0 10.830002 0 9.164993 0 9.164993 0 8.339996 0 9.164993 0 9.164993 0 9.164993 0 8.339996 0 0 0] 117 571 /Helvetica-Bold [ 15 1 mul 0 0 15 0 0 ] [0.997067 0 0 1 497.012482 -3.027496] dotx
(C) [0 0] 542 531 /Helvetica-Bold [ 15 1 mul 0 0 15 0 0 ] [0.997067 0 0 1 -0.524179 1.972504] dotx
/txtdraw true def
/txlndraw true def
(1 ) [8.340027 0 0 0] 552.830017 525 /Helvetica-Bold [ 15 1 mul 0 0 15 0 0 ] [0.997067 0 0 1 -0.524179 1.972504] dotx
/txtdraw true def
/txlndraw true def
( ) [0 0] 552 535 /Helvetica-Bold [ 15 1 mul 0 0 15 0 0 ] [0.997067 0 0 1 -43.398079 36.972504] dotx
(C) [0 0] 581 495 /Helvetica-Bold [ 15 1 mul 0 0 15 0 0 ] [0.997067 0 0 1 9.446495 -4.027496] dotx
/txtdraw true def
/txlndraw true def
(2 ) [8.340027 0 0 0] 591.830017 489 /Helvetica-Bold [ 15 1 mul 0 0 15 0 0 ] [0.997067 0 0 1 9.446495 -4.027496] dotx
/txtdraw true def
/txlndraw true def
(C) [0 0] 680 474 /Helvetica-Bold [ 15 1 mul 0 0 15 0 0 ] [0.997067 0 0 1 -17.474325 16.972504] dotx
/txtdraw true def
/txlndraw true def
(3 ) [8.340027 0 0 0] 690.830017 468 /Helvetica-Bold [ 15 1 mul 0 0 15 0 0 ] [0.997067 0 0 1 -17.474325 16.972504] dotx
(x ) [8.339996 0 0 0] 406 372 /Helvetica-Bold [ 15 1 mul 0 0 15 0 0 ] [0.997067 0 0 1 329.243408 44] dotx
/txtdraw true def
/txlndraw true def
(p\(x|C) [9.164993 0 4.994995 0 8.339996 0 4.199997 0 0 0] 129 516 /Helvetica-Bold [ 15 1 mul 0 0 15 0 0 ] [0.997067 0 0 1 350.181824 51] dotx
/txtdraw true def
/txlndraw true def
(i) [0 0] 166.529984 510 /Helvetica-Bold [ 15 1 mul 0 0 15 0 0 ] [0.997067 0 0 1 350.181824 51] dotx
/txtdraw true def
/txlndraw true def
(\) ) [4.994995 0 0 0] 170.699982 516 /Helvetica-Bold [ 15 1 mul 0 0 15 0 0 ] [0.997067 0 0 1 350.181824 51] dotx
(Vector  Quantization Codebook ) [9.254997 0 8.340004 0 8.339996 0 4.994995 0 9.164993 0 5.835007 0 4.169998 0 -50.099991 -17.849976 11.669998 0 9.164993 0 8.339996 0 9.164993 0 4.994995 0 4.169998 0 7.5 0 8.339996 0 4.994995 0 4.169998 0 9.164993 0 9.164993 0 -90.839951 -17.849976 10.830002 0 9.164993 0 9.164993 0 8.339996 0 9.164993 0 9.164993 0 9.164993 0 8.339996 0 0 0] 117 571 /Helvetica-Bold [ 15 1 mul 0 0 15 0 0 ] [1 0 0 1 158 -4] dotx
1 0 0 1 52 17 sc5mt astore 0 -56 167 504 1 0 0 1 82 -27 sc6mt astore ssl
1 0 0 1 16 17 sc5mt astore 0 -56 312 504 1 0 0 1 46 -27 sc6mt astore ssl
(V) [0 0] 105 202 /Helvetica-Bold [ 15 1 mul 0 0 15 0 0 ] [1 0 0 1 43 236] dotx
/txtdraw true def
/txlndraw true def
(1 ) [8.340004 0 0 0] 115.004997 196 /Helvetica-Bold [ 15 1 mul 0 0 15 0 0 ] [1 0 0 1 43 236] dotx
/txtdraw true def
/txlndraw true def
(V) [0 0] 155 204 /Helvetica-Bold [ 15 1 mul 0 0 15 0 0 ] [1 0 0 1 60 235] dotx
/txtdraw true def
/txlndraw true def
(2 ) [8.339996 0 0 0] 165.005005 198 /Helvetica-Bold [ 15 1 mul 0 0 15 0 0 ] [1 0 0 1 60 235] dotx
/txtdraw true def
/txlndraw true def
(V) [0 0] 261 200 /Helvetica-Bold [ 15 1 mul 0 0 15 0 0 ] [1 0 0 1 32 239] dotx
/txtdraw true def
/txlndraw true def
(3 ) [8.339996 0 0 0] 271.005005 194 /Helvetica-Bold [ 15 1 mul 0 0 15 0 0 ] [1 0 0 1 32 239] dotx
/txtdraw true def
/txlndraw true def
(x ) [8.339996 0 0 0] 301 434 /Helvetica-Bold [ 15 1 mul 0 0 15 0 0 ] [1 0 0 1 72 -17] dotx
/txtdraw true def
/txlndraw true def
(Pr\() [10.005005 0 5.834991 0 0 0] 357 299 /Helvetica-BoldOblique [ 15 1 mul 0 0 15 0 0 ] [1 0 0 1 -239.475006 -99.25] dotx
/txtdraw true def
/txlndraw true def
(x) [0 0] 377.834991 299 /Helvetica-Bold [ 15 1 mul 0 0 15 0 0 ] [1 0 0 1 -239.475006 -99.25] dotx
/txtdraw true def
/txlndraw true def
(i) [0 0] 386.174988 293 /Helvetica-Bold [ 15 1 mul 0 0 15 0 0 ] [1 0 0 1 -239.475006 -99.25] dotx
/txtdraw true def
/txlndraw true def
(|S) [4.200012 0 0 0] 390.345001 299 /Helvetica-Bold [ 15 1 mul 0 0 15 0 0 ] [1 0 0 1 -239.475006 -99.25] dotx
/txtdraw true def
/txlndraw true def
(2) [0 0] 404.550018 293 /Helvetica-Bold [ 15 1 mul 0 0 15 0 0 ] [1 0 0 1 -239.475006 -99.25] dotx
/txtdraw true def
/txlndraw true def
(\) ) [4.994995 0 0 0] 412.890015 299 /Helvetica-BoldOblique [ 15 1 mul 0 0 15 0 0 ] [1 0 0 1 -239.475006 -99.25] dotx
/txtdraw true def
/txlndraw true def
(x) [0 0] 351 190 /Helvetica-Bold [ 15 1 mul 0 0 15 0 0 ] [1 0 0 1 28.524994 -142.25] dotx
/txtdraw true def
/txlndraw true def
(i) [0 0] 359.339996 184 /Helvetica-Bold [ 15 1 mul 0 0 15 0 0 ] [1 0 0 1 28.524994 -142.25] dotx
/txtdraw true def
/txlndraw true def
( ) [0 0] 363.51001 190 /Helvetica-Bold [ 15 1 mul 0 0 15 0 0 ] [1 0 0 1 28.524994 -142.25] dotx
/usedash false def
gsave clpmt currentmatrix pop newpath
282 176 255 218 [1.20922 0 0 1.045455 -234.351044 -3.909089] mkrpath
clip
newpath
clpmt setmatrix
gsave
/epssave save def TDeps_dict begin userdict begin
[1 0 0 1 -162 6] dodrawctm
255 218 translate
%%BeginFile: /tmp/topdraw_eps_156_28
%!PS-Adobe-2.0 EPSF-1.2
%%BoundingBox: 0 0 282 176
%%Creator: Mathematica
%%Title: Clipboard
%%CreationDate: Never Never
%%EndComments
50 dict begin
/Mnodistort true def
/pageDashArray [4] def
/nullDashArray [] def

% Compute the minimum of two numbers.
/Mmin {         % p q Mmin min(p,q)
        2 copy          % p q p q
        gt              % p q p>q?
        { exch } if     % min(p,q) max(p,q)
        pop             % min(p,q)
} bind def


% Compute the maximum of two numbers.
/Mmax {         % p q Mmax max(p,q)
        2 copy          % p q p q
        lt              % p q p<q?
        { exch } if     % max(p,q) min(p,q)
        pop             % max(p,q)
} bind def

/Mpstart {
    MathPictureStart
} bind def
/Mpend {
    MathPictureEnd
} bind def
/Mscale {
    0 1 0 1
    5 -1 roll
    MathScale
} bind def
/Plain
        /Courier findfont
def
/Bold
        /Courier-Bold findfont
def
/Italic
        /Courier-Oblique findfont
def
/MathPictureStart {
        gsave
        newpath
        /Mtmatrix
        matrix currentmatrix
        def
        Plain
        Mfontsize scalefont
        setfont
0 setgray 0 setlinewidth
} bind def
/MathPictureEnd {
        grestore
} bind def
/Mdot {
        moveto
        0 0 rlineto
        stroke
} def
/Mtetra {
        moveto
        lineto
        lineto
        lineto
        fill
} def
/Metetra {
        moveto
        lineto
        lineto
        lineto
        closepath
        gsave
        fill
        grestore
        0 setgray
        stroke
} def
/Mistroke {
        flattenpath
        0 0 0
        {
        4 2 roll
        pop pop
        }
        {
        4 -1 roll
        2 index
        sub dup mul
        4 -1 roll
        2 index
        sub dup mul
        add sqrt
        4 -1 roll
        add
        3 1 roll
        }
        {
        stop
        }
        {
        stop
        }
        pathforall
        pop pop
        currentpoint
        stroke
        moveto
        currentdash
        3 -1 roll
        add
        setdash
} def
/Mfstroke {
        stroke
        currentdash
        pop 0
        setdash
} def
/Msboxa {
        newpath
        5 -1 roll
        Mvboxa
        pop
        6 -1 roll
        5 -1 roll
        4 -1 roll
        Msboxa1
        5 -3 roll
        Msboxa1
        [
        7 -2 roll
        [ 2 index 2 index
        10 -1 roll
        9 -1 roll
        ]
        6 1 roll
        5 -2 roll
        ]
} bind def
        
/Msboxa1 {
        sub
        2 div
        dup
        2 index
        1 add
        mul
        3 -1 roll
        -1 add
        3 -1 roll
        mul
} bind def
/Mvboxa {
        gsave
        newpath
        [ true
        3 -1 roll
        {
        Mbbox
        5 -1 roll
        {
        0
        5 1 roll
        }
        {
        7 -1 roll
        exch sub
        (m) stringwidth pop
        .3 mul
        sub
        7 1 roll
        6 -1 roll
        4 -1 roll
        Mmin
        3 -1 roll
        5 index
        add
        5 -1 roll
        4 -1 roll
        Mmax
        4 -1 roll
        }
        ifelse
        false
        }
        forall
        { stop } if
        counttomark
        1 add
        4 roll
        ]
        grestore
} bind def
/Mbbox {
        0 0 moveto
        false charpath
        flattenpath
        pathbbox
        newpath
} bind def
/Mmin {
        2 copy
        gt
        { exch } if
        pop
} bind def
/Mmax {
        2 copy
        lt
        { exch } if
        pop
} bind def
/Mshowa {
        4 -2 roll
        moveto
        2 index
        Mtmatrix setmatrix
        Mvboxa
        7 1 roll
        6 -1 roll
        5 -1 roll
        4 -1 roll
        Mshowa1
        4 1 roll
        Mshowa1
        rmoveto
        currentpoint
        0 1
        4 index length
        -1 add
        {
        2 index
        4 index
        2 index
        get
        3 index
        add
        moveto
        4 index
        exch get
        show
        } for
        pop pop pop pop
        Mgmatrix setmatrix
} bind def
/Mshowa1 {
        2 copy
        add
        4 1 roll
        sub
        mul
        sub
        -2 div
} bind def
/MathScale {
        Mwidth
        Mheight
        Mlp
        translate
        scale
        /Mgmatrix
        matrix currentmatrix
        def
        /Msaveaa exch def
        /Msavebb exch def
        /Msavecc exch def
        /Msavedd exch def
} bind def
/Mlp {
        3 copy
        Mlpfirst
        {
        Mnodistort
        {
        Mmin
        dup
        } if
        4 index
        2 index
        2 index
        Mlprun
        11 index
        11 -1 roll
        10 -4 roll
        Mlp1
        8 index
        9 -5 roll
        Mlp1
        4 -1 roll
        and
        { exit } if
        3 -1 roll
        pop pop
        } loop
        exch
        3 1 roll
        7 -3 roll
        pop pop pop
} bind def
/Mlpfirst {
        3 -1 roll
        dup length
        2 copy
        -2 add
        get
        aload
        pop pop pop
        4 -2 roll
        -1 add
        get
        aload
        pop pop pop
        6 -1 roll
        3 -1 roll
        5 -1 roll
        sub
        dup /MsaveAx exch def
        div
        4 1 roll
        exch sub
        dup /MsaveAy exch def
        div
} bind def
/Mlprun {
        2 copy
        4 index
        0 get
        dup
        4 1 roll
        Mlprun1
        3 copy
        8 -2 roll
        9 -1 roll
        {
        3 copy
        Mlprun1
        3 copy
        11 -3 roll
        /gt Mlpminmax
        8 3 roll
        11 -3 roll
        /lt Mlpminmax
        8 3 roll
        } forall
        pop pop pop pop
        3 1 roll
        pop pop
        aload pop
        5 -1 roll
        aload pop
        exch
        6 -1 roll
        Mlprun2
        8 2 roll
        4 -1 roll
        Mlprun2
        6 2 roll
        3 -1 roll
        Mlprun2
        4 2 roll
        exch
        Mlprun2
        6 2 roll
} bind def
/Mlprun1 {
        aload pop
        exch
        6 -1 roll
        5 -1 roll
        mul add
        4 -2 roll
        mul
        3 -1 roll
        add
} bind def
/Mlprun2 {
        2 copy
        add 2 div
        3 1 roll
        exch sub
} bind def
/Mlpminmax {
        cvx
        2 index
        6 index
        2 index
        exec
        {
        7 -3 roll
        4 -1 roll
        } if
        1 index
        5 index
        3 -1 roll
        exec
        {
        4 1 roll
        pop
        5 -1 roll
        aload
        pop pop
        4 -1 roll
        aload pop
        [
        8 -2 roll
        pop
        5 -2 roll
        pop
        6 -2 roll
        pop
        5 -1 roll
        ]
        4 1 roll
        pop
        }
        {
        pop pop pop
        } ifelse
} bind def
/Mlp1 {
        5 index
        3 index sub
        5 index
        2 index mul
        1 index
        le
        1 index
        0 le
        or
        dup
        not
        {
        1 index
        3 index div
        .99999 mul
        8 -1 roll
        pop
        7 1 roll
        }
        if
        8 -1 roll
        2 div
        7 -2 roll
        pop sub
        5 index
        6 -3 roll
        pop pop
        mul sub
        exch
} bind def
/Mfontsize      12 def
/Mleft          0.000000 def
/Mbottom        176.000000 def
/Mwidth         282.000000 def
/Mheight        176.000000 def
/Courier findfont 12 scalefont setfont
%!
%%Creator: Mathematica
%%AspectRatio: 0.61803 
MathPictureStart
% Scaling calculations
0.02381 0.02721 0 1.03006 [
[(5)] 0.15986 -0.0125 0 1 Msboxa
[(10)] 0.29592 -0.0125 0 1 Msboxa
[(15)] 0.43197 -0.0125 0 1 Msboxa
[(20)] 0.56803 -0.0125 0 1 Msboxa
[(25)] 0.70408 -0.0125 0 1 Msboxa
[(30)] 0.84014 -0.0125 0 1 Msboxa
[(35)] 0.97619 -0.0125 0 1 Msboxa
[(0.1)] 0.01131 0.10301 1 0 Msboxa
[(0.2)] 0.01131 0.20601 1 0 Msboxa
[(0.3)] 0.01131 0.30902 1 0 Msboxa
[(0.4)] 0.01131 0.41202 1 0 Msboxa
[(0.5)] 0.01131 0.51503 1 0 Msboxa
[ -0.001 -0.00725 0 0 ]
[ 1.001 0.61903 0 0 ]
] MathScale
% Start of Graphics
1 setlinecap
1 setlinejoin
newpath
%%Object: Graphics
[ ] 0 setdash
0 setgray
gsave
gsave
0.002 setlinewidth
0 0 moveto
1 0 lineto
stroke
0.15986 -0.00625 moveto
0.15986 0.00625 lineto
stroke
0 setgray
[(5)] 0.15986 -0.0125 0 1 Mshowa
0.29592 -0.00625 moveto
0.29592 0.00625 lineto
stroke
0 setgray
[(10)] 0.29592 -0.0125 0 1 Mshowa
0.43197 -0.00625 moveto
0.43197 0.00625 lineto
stroke
0 setgray
[(15)] 0.43197 -0.0125 0 1 Mshowa
0.56803 -0.00625 moveto
0.56803 0.00625 lineto
stroke
0 setgray
[(20)] 0.56803 -0.0125 0 1 Mshowa
0.70408 -0.00625 moveto
0.70408 0.00625 lineto
stroke
0 setgray
[(25)] 0.70408 -0.0125 0 1 Mshowa
0.84014 -0.00625 moveto
0.84014 0.00625 lineto
stroke
0 setgray
[(30)] 0.84014 -0.0125 0 1 Mshowa
0.97619 -0.00625 moveto
0.97619 0.00625 lineto
stroke
0 setgray
[(35)] 0.97619 -0.0125 0 1 Mshowa
0.02381 0 moveto
0.02381 0.61803 lineto
stroke
0.01756 0.10301 moveto
0.03006 0.10301 lineto
stroke
0 setgray
[(0.1)] 0.01131 0.10301 1 0 Mshowa
0.01756 0.20601 moveto
0.03006 0.20601 lineto
stroke
0 setgray
[(0.2)] 0.01131 0.20601 1 0 Mshowa
0.01756 0.30902 moveto
0.03006 0.30902 lineto
stroke
0 setgray
[(0.3)] 0.01131 0.30902 1 0 Mshowa
0.01756 0.41202 moveto
0.03006 0.41202 lineto
stroke
0 setgray
[(0.4)] 0.01131 0.41202 1 0 Mshowa
0.01756 0.51503 moveto
0.03006 0.51503 lineto
stroke
0 setgray
[(0.5)] 0.01131 0.51503 1 0 Mshowa
grestore
grestore
0 0 moveto
1 0 lineto
1 0.618034 lineto
0 0.618034 lineto
closepath
clip
newpath
0 setgray
gsave
gsave
gsave
gsave
0.004 setlinewidth
0.02381 0.15451 moveto
0.03741 0.15451 lineto
0.05102 0.15451 lineto
0.06463 0.15451 lineto
0.07823 0.15451 lineto
0.09184 0.15451 lineto
0.10544 0.15451 lineto
0.11905 0.15451 lineto
0.13265 0.15451 lineto
0.14626 0.15451 lineto
0.15986 0.15451 lineto
0.17347 0.15451 lineto
0.18707 0.15451 lineto
0.20068 0.15451 lineto
0.21429 0.15451 lineto
0.22789 0.15451 lineto
0.2415 0.15451 lineto
0.2551 0.15451 lineto
0.26871 0.15451 lineto
0.28231 0.15451 lineto
0.29592 0.15451 lineto
0.30952 0.15451 lineto
0.32313 0.15451 lineto
0.33673 0.15451 lineto
0.35034 0.15451 lineto
stroke
grestore
grestore
grestore
gsave
gsave
gsave
0.004 setlinewidth
0.35034 0.36052 moveto
0.35828 0.36052 lineto
0.36621 0.36052 lineto
0.37415 0.36052 lineto
0.38209 0.36052 lineto
0.39002 0.36052 lineto
0.39796 0.36052 lineto
0.4059 0.36052 lineto
0.41383 0.36052 lineto
0.42177 0.36052 lineto
0.42971 0.36052 lineto
0.43764 0.36052 lineto
0.44558 0.36052 lineto
0.45351 0.36052 lineto
0.46145 0.36052 lineto
0.46939 0.36052 lineto
0.47732 0.36052 lineto
0.48526 0.36052 lineto
0.4932 0.36052 lineto
0.50113 0.36052 lineto
0.50907 0.36052 lineto
0.51701 0.36052 lineto
0.52494 0.36052 lineto
0.53288 0.36052 lineto
0.54082 0.36052 lineto
stroke
grestore
grestore
grestore
gsave
gsave
gsave
0.004 setlinewidth
0.54082 0.51503 moveto
0.55896 0.51503 lineto
0.5771 0.51503 lineto
0.59524 0.51503 lineto
0.61338 0.51503 lineto
0.63152 0.51503 lineto
0.64966 0.51503 lineto
0.6678 0.51503 lineto
0.68594 0.51503 lineto
0.70408 0.51503 lineto
0.72222 0.51503 lineto
0.74036 0.51503 lineto
0.7585 0.51503 lineto
0.77664 0.51503 lineto
0.79478 0.51503 lineto
0.81293 0.51503 lineto
0.83107 0.51503 lineto
0.84921 0.51503 lineto
0.86735 0.51503 lineto
0.88549 0.51503 lineto
0.90363 0.51503 lineto
0.92177 0.51503 lineto
0.93991 0.51503 lineto
0.95805 0.51503 lineto
0.97619 0.51503 lineto
stroke
grestore
grestore
grestore
grestore
% End of Graphics
MathPictureEnd
%%EPS Trailer
end
%%EndFile
end end epssave restore
grestore
grestore
1 0 0 1 -162 6 sc5mt astore 255 218 282 176 1.20922 0 0 1.045455 -234.351044 -3.909089 sc6mt astore rstroke
/txtdraw true def
/txlndraw true def
(Pr\() [10.005005 0 5.834991 0 0 0] 357 299 /Helvetica-BoldOblique [ 15 1 mul 0 0 15 0 0 ] [1 0 0 1 -238.475006 83.75] dotx
/txtdraw true def
/txlndraw true def
(x) [0 0] 377.834991 299 /Helvetica-Bold [ 15 1 mul 0 0 15 0 0 ] [1 0 0 1 -238.475006 83.75] dotx
/txtdraw true def
/txlndraw true def
(i) [0 0] 386.174988 293 /Helvetica-Bold [ 15 1 mul 0 0 15 0 0 ] [1 0 0 1 -238.475006 83.75] dotx
/txtdraw true def
/txlndraw true def
(|S) [4.200012 0 0 0] 390.345001 299 /Helvetica-Bold [ 15 1 mul 0 0 15 0 0 ] [1 0 0 1 -238.475006 83.75] dotx
/txtdraw true def
/txlndraw true def
(1) [0 0] 404.550018 293 /Helvetica-Bold [ 15 1 mul 0 0 15 0 0 ] [1 0 0 1 -238.475006 83.75] dotx
/txtdraw true def
/txlndraw true def
(\) ) [4.994995 0 0 0] 412.890015 299 /Helvetica-BoldOblique [ 15 1 mul 0 0 15 0 0 ] [1 0 0 1 -238.475006 83.75] dotx
/txtdraw true def
/txlndraw true def
(x) [0 0] 351 190 /Helvetica-Bold [ 15 1 mul 0 0 15 0 0 ] [1 0 0 1 28.524994 40.75] dotx
/txtdraw true def
/txlndraw true def
(i) [0 0] 359.339996 184 /Helvetica-Bold [ 15 1 mul 0 0 15 0 0 ] [1 0 0 1 28.524994 40.75] dotx
/txtdraw true def
/txlndraw true def
( ) [0 0] 363.51001 190 /Helvetica-Bold [ 15 1 mul 0 0 15 0 0 ] [1 0 0 1 28.524994 40.75] dotx
end
grestore
grestore
%%Trailer

%%EndDocument
 GE /Times-Bold SF
14739 57953 MT
(Figure 4-6:)SH
/Times-Roman SF
20512 XM
(Output probability assignment in discrete and semi-continuous HMMs.)SH
13300 60938 MT
(More recently, the discrete HMM has)
148 W( been extended to continuous mixture observation den-)149 W
10800 62677 MT
(sities by replacing each of the VQ prototype vectors with a multivariate gaussian density and)
98 W( using)97 W
10800 64416 MT
(the discrete output pdf as the mixture coefficients.  This can also be viewed as a)
68 W( CDHMM in which)69 W
10800 66155 MT
(the mixture components across all states are assumed to be tied.  This semi-continuous)
275 W( HMM)274 W
10800 67894 MT
(\050SCHMM\051 architecture maintains the)
96 W( modeling ability of the CDHMM, reducing the DDHMM VQ)97 W
10800 69633 MT
(distortion, but reduces the CDHMM computational load and number of free parameters.)
306 W( The)886 W
10800 71372 MT
(SCHMM component density parameters are more robust since data from all states can)
2 W( be used in their)3 W
ES
%%Page: 87 88
BS
0 SI
10 /Times-Roman AF
54800 4286 MT
(87)SH
11 SS 
10800 7955 MT
(estimation. An)
327 W( example of how the semi-continuous)
26 W( model can improve output probability modeling)25 W
10800 9694 MT
(is shown)
48 W( in Figure 4-6 for)49 W
/Times-Italic SF
22825 XM
(M)SH
/Times-Roman SF
23891 XM
(=)
150 MX(3. The)
373 W( DDHMM prototype vectors {)49 W
/Times-Italic SF
(v)SH
/Times-Roman SF
42108 XM
(} define regions in the)49 W
/Times-Bold SF
52442 XM
(x)SH
/Times-Roman SF
(-space)SH
8 /Times-Italic AF
41886 10039 MT
(j)SH
11 /Times-Roman AF
10800 11433 MT
(such that any observation)90 W
/Times-Bold SF
22646 XM
(x)SH
/Times-Roman SF
23782 XM
(falling in that region has the probability)89 W
/Times-Italic SF
42156 XM
(Pr)SH
/Times-Roman SF
(\050)SH
/Times-Bold SF
(x)SH
/Times-Roman SF
44544 XM
(|)SH
/Times-Italic SF
44914 XM
(S)SH
/Times-Roman SF
45819 XM
(\051)
150 MX(=)SH
/Times-Italic SF
47105 XM
(b)SH
/Times-Roman SF
48010 XM
(\050)SH
/Times-Italic SF
(v)SH
/Times-Roman SF
49086 XM
(\051 assigned to it)89 W
8 /Times-Italic AF
23196 11778 MT
(i)SH
44172 XM
(i)SH
45464 XM
(k)SH
47655 XM
(k)SH
48864 XM
(j)SH
11 /Times-Roman AF
10800 13172 MT
(given state)265 W
/Times-Italic SF
16340 XM
(j)SH
/Times-Roman SF
(, as illustrated in the two lower left graphs.)
265 W( The)
807 W( semi-continuous model uses the)266 W
10800 14911 MT
(prototype vectors as the means of component densities, and the state output)
92 W( densities are built from)91 W
10800 16650 MT
(this continuous codebook.  As the lower-right graphs indicate, the semi-continuous)
104 W( output densities)105 W
10800 18389 MT
(do not have the discontinuities of the DDHMM, and can more closely)
190 W( approximate the real data)189 W
10800 20128 MT
(distributions which is crucial for good recognition performance.)SH
13300 23113 MT
(Huang [43])
SH( has given expressions of the EM algorithm)
70 W( for the unified reestimation of the con-)71 W
10800 24852 MT
(tinuous codebook and the other SCHMM parameters.  The mean and covariance formulas are)SH
8 /Times-Italic AF
17294 26298 MT
(T)SH
11 /Symbol AF
18237 27453 MT
(z)SH
/Times-Roman SF
19002 XM
([)SH
/Times-Italic SF
(j)SH
/Times-Roman SF
(])SH
/Times-Italic SF
(O)SH
16 /Symbol AF
16946 27753 MT
(\345)SH
8 /Times-Italic AF
18780 27798 MT
(t)SH
20834 XM
(t)SH
16980 28547 MT
(t)SH
/Times-Roman SF
(=1)SH
11 /Symbol AF
15200 28768 MT
(-)SH
4110 50 16946 28922 UL
15200 29167 MT
(m)SH
/Times-Roman SF
16176 XM
(=)SH
53143 XM
(\0504.29\051)SH
8 /Times-Italic AF
15804 29512 MT
(j)SH
17788 29712 MT
(T)SH
11 /Symbol AF
18731 30867 MT
(z)SH
/Times-Roman SF
19524 XM
([)SH
/Times-Italic SF
(j)SH
/Times-Roman SF
(])SH
16 /Symbol AF
17440 31167 MT
(\345)SH
9 /Times-Italic AF
19274 31227 MT
(t)SH
8 SS 
17474 31961 MT
(t)SH
/Times-Roman SF
(=1)SH
11 SS 
15200 32523 MT
(and)SH
8 /Times-Italic AF
17445 33313 MT
(T)SH
27207 34123 MT
(T)SH
11 /Symbol AF
18388 34468 MT
(z)SH
/Times-Roman SF
19153 XM
([)SH
/Times-Italic SF
(j)SH
/Times-Roman SF
(]\050)SH
/Times-Italic SF
(O)SH
/Symbol SF
21723 XM
(-)
150 MX(m)SH
/Times-Roman SF
23333 XM
(\051\050)SH
/Times-Italic SF
(O)SH
/Symbol SF
25231 XM
(-)
150 MX(m)SH
/Times-Roman SF
26841 XM
(\051)SH
16 /Symbol AF
17097 34768 MT
(\345)SH
8 /Times-Italic AF
18931 34813 MT
(t)SH
21351 XM
(t)SH
23111 XM
(j)SH
24859 XM
(t)SH
26619 XM
(j)SH
755 50 15200 35186 UL
17131 35562 MT
(t)SH
/Times-Roman SF
(=1)SH
10555 50 17097 35937 UL
11 /Symbol AF
15200 36182 MT
(S)SH
/Times-Roman SF
16327 XM
(=)SH
8 /Times-Italic AF
15955 36527 MT
(j)SH
21221 36727 MT
(T)SH
11 /Symbol AF
22164 37882 MT
(g)SH
/Times-Roman SF
22838 XM
([)SH
/Times-Italic SF
(j)SH
/Times-Roman SF
(])SH
16 /Symbol AF
20873 38182 MT
(\345)SH
8 /Times-Italic AF
22616 38227 MT
(t)SH
20907 38976 MT
(t)SH
/Times-Roman SF
(=1)SH
9 SS 
26982 41052 MT
(th)SH
11 SS 
10800 41415 MT
(where)SH
/Symbol SF
13804 XM
(z)SH
/Times-Roman SF
14569 XM
([)SH
/Times-Italic SF
(j)SH
/Times-Roman SF
(] is)
43 W( the probability of the)42 W
/Times-Italic SF
26676 XM
(j)SH
/Times-Roman SF
27999 XM
(mixture component producing the observation at time)42 W
/Times-Italic SF
52214 XM
(t)SH
/Times-Roman SF
(, which)42 W
8 /Times-Italic AF
14347 41760 MT
(t)SH
11 /Times-Roman AF
10800 43154 MT
(may be expressed in terms of the forward-backward variables as)SH
8 /Times-Italic AF
18259 44641 MT
(N)SH
19582 XM
(N)SH
11 /Symbol AF
20570 44806 MT
(a)SH
/Times-Roman SF
21514 XM
([)SH
/Times-Italic SF
(i)SH
/Times-Roman SF
(])SH
/Times-Italic SF
(a)SH
23752 XM
(b)SH
/Times-Roman SF
24702 XM
([)SH
/Times-Italic SF
(j)SH
/Times-Roman SF
(])SH
/Times-Italic SF
(f)SH
/Times-Roman SF
(\050)SH
/Times-Italic SF
(O)SH
/Times-Roman SF
28279 XM
(|)SH
/Times-Italic SF
(j)SH
/Times-Roman SF
(\051)SH
/Symbol SF
(b)SH
/Times-Roman SF
31083 XM
([)SH
/Times-Italic SF
(k)SH
/Times-Roman SF
(])SH
8 /Times-Italic AF
27206 45151 MT
(t)SH
/Times-Roman SF
(+1)SH
9 /Times-Italic AF
21264 45166 MT
(t)SH
23102 XM
(ik)SH
24302 XM
(k)SH
29775 XM
(t+1)SH
11733 50 20570 45551 UL
11 /Symbol AF
15200 45796 MT
(z)SH
/Times-Roman SF
15965 XM
([)SH
/Times-Italic SF
(j)SH
/Times-Roman SF
(])
150 MX(=)SH
53143 XM
(\0504.30\051)SH
16 /Symbol AF
17955 46096 MT
(\345)SH
19279 XM
(\345)SH
8 /Times-Italic AF
15743 46141 MT
(t)SH
11 SS 
24711 46547 MT
(Pr)SH
/Times-Roman SF
(\050)SH
/Times-Italic SF
(O)SH
/Times-Roman SF
(|)SH
/Symbol SF
(l)SH
/Times-Roman SF
(\051)SH
8 /Times-Italic AF
17923 46890 MT
(k)SH
/Times-Roman SF
(=1)SH
/Times-Italic SF
19313 XM
(i)SH
/Times-Roman SF
(=1)SH
9 SS 
19284 48061 MT
(th)SH
11 SS 
10800 48424 MT
(where)SH
/Times-Italic SF
13842 XM
(b)SH
/Times-Roman SF
14792 XM
([)SH
/Times-Italic SF
(j)SH
/Times-Roman SF
(] is)
81 W( the)82 W
/Times-Italic SF
18978 XM
(j)SH
/Times-Roman SF
19984 XM
(-element in the output distribution of the DDHMM from which the SCHMM is)82 W
9 /Times-Italic AF
14392 48784 MT
(k)SH
/Times-Roman SF
42951 49800 MT
(th)SH
11 SS 
10800 50163 MT
(derived, and)SH
/Times-Italic SF
16511 XM
(f)SH
/Times-Roman SF
(\050)SH
/Times-Italic SF
(O)SH
/Times-Roman SF
19050 XM
(|)SH
/Times-Italic SF
(j)SH
/Times-Roman SF
(\051 is the probability of the observation)SH
/Times-Italic SF
36165 XM
(O)SH
/Times-Roman SF
38307 XM
(given the)SH
/Times-Italic SF
42645 XM
(j)SH
/Times-Roman SF
43651 XM
(-mixture component.)SH
8 /Times-Italic AF
17977 50508 MT
(t)SH
/Times-Roman SF
(+1)SH
/Times-Italic SF
36959 XM
(t)SH
/Times-Roman SF
(+1)SH
11 SS 
13300 53148 MT
(Adaptation can be performed)
129 W( within continuous or semi-continuous HMMs by reestimating a)128 W
10800 54887 MT
(set of speaker-independent parameters given speaker-specific)
447 W( observation sequences.  In the)448 W
10800 56626 MT
(remainder of)
112 W( this chapter, speaker adaptation through reestimation of codebook mean vectors is in-)111 W
10800 58365 MT
(vestigated using a semi-continuous version)
12 W( of)13 W
9 SS 
31282 XM
(SPHINX)SH
11 SS 
(, called)13 W
9 SS 
38009 XM
(SPHINX-SC)SH
11 SS 
(. With)
301 W( statistics derived from)13 W
10800 60104 MT
(a multiple-speaker database, adaptation via the LMS-C or EMAP algorithms can determine)
82 W( whether)81 W
/Symbol SF
45150 61444 MT
(-)SH
/Times-Roman SF
10800 61843 MT
(correlation information can improve the maximum likelihood reestimates {)157 W
/Symbol SF
(m)SH
/Times-Roman SF
45976 XM
(} and)
157 W( increase recog-)158 W
8 /Times-Italic AF
45754 62188 MT
(j)SH
11 /Times-Roman AF
10800 63582 MT
(nition rates.)SH
ES
%%Page: 88 89
BS
0 SI
10 /Times-Roman AF
54800 4286 MT
(88)SH
13 /Times-Bold AF
10800 8071 MT
(4.4. Adaptation in SPHINX-SC)SH
11 /Times-Roman AF
13300 10986 MT
(The original CMU)166 W
9 SS 
22261 XM
(SPHINX)SH
11 SS 
25951 XM
(system [6])
SH( demonstrated a speaker-independent word accuracy of)165 W
10800 12725 MT
(better than 94 percent on the 997-word DARPA resource management task.)
86 W( This)
449 W( task, which has a)87 W
10800 14464 MT
(perplexity of about 60, is defined by a grammar which allows the)
58 W( formation of, for example, queries)57 W
10800 16203 MT
(about naval)
86 W( resources or display control.  Performance of the)87 W
9 SS 
38760 XM
(SPHINX)SH
11 SS 
42372 XM
(system has subsequently been)87 W
10800 17942 MT
(improved by Huang,)SH
/Times-Italic SF
20148 XM
(et al.)SH
/Times-Roman SF
22623 XM
([18]. An)
275 W( error rate of 4.3 percent is currently being reported.)SH
13300 20927 MT
(The)SH
9 SS 
15308 XM
(SPHINX)SH
11 SS 
18856 XM
(system used a hidden Markov model with discrete state output)
23 W( probability densities)22 W
10800 22666 MT
(and a vector)
2 W( quantization codebook.  Huang)
3 W( [20])
SH( has investigated an approach in which VQ codebook)3 W
10800 24405 MT
(entries become the)
187 W( mean vectors of mixture density components, and each state's discrete output)186 W
10800 26144 MT
(probabilities become the mixture coefficients.)
24 W( This)
324 W( semi-continuous version of)25 W
9 SS 
46268 XM
(SPHINX)SH
11 SS 
49818 XM
(was modified)25 W
10800 27883 MT
(to determine how effective the)
24 W( EMAP and LMS-C estimation techniques were in reducing)23 W
9 SS 
51150 XM
(SPHINX-SC)SH
11 SS 
10800 29622 MT
(word error rates through codebook adaptation.  Details of the)SH
9 SS 
37953 XM
(SPHINX-SC)SH
11 SS 
42878 XM
(system follow.)SH
13300 32607 MT
(Speech data for training and evaluation is digitized with a 16KHz sampling rate, and)
232 W( pre-)233 W
9 SS 
42573 33983 MT
(th)SH
8 /Symbol AF
39471 34001 MT
(-)SH
/Times-Roman SF
(1)SH
11 SS 
10800 34346 MT
(emphasized using a filter with transfer function)169 W
/Times-Italic SF
33090 XM
(H)SH
/Times-Roman SF
(\050)SH
/Times-Italic SF
(z)SH
/Times-Roman SF
(\051=1)SH
/Symbol SF
36364 XM
(-)SH
/Times-Roman SF
37118 XM
(0.97)SH
/Times-Italic SF
(z)SH
/Times-Roman SF
40310 XM
(. 14)613 W
43273 XM
(-order LPC analysis is)
169 W( per-)168 W
10800 36085 MT
(formed on the speech data using a 20-msec Hamming window and a 10-msec increment.)
141 W( Twelve)558 W
10800 37824 MT
(bilinear-transformed LPC cepstral coefficients are derived from these LPC)
19 W( coefficients.  Finally, each)18 W
10800 39563 MT
(speech frame is represented by)
219 W( three feature vectors consisting of the cepstral coefficients, first-)220 W
10800 41302 MT
(differenced cepstral coefficients, and the power)
91 W( of each of these cepstral vectors.)90 W
9 SS 
48038 XM
(SPHINX-SC)SH
11 SS 
53053 XM
(uses a)90 W
10800 43041 MT
(set of three codebooks, one for each of the cepstral, differenced cepstral, and power)
162 W( cepstral data)163 W
10800 44780 MT
(vectors, with 256 codewords each.  Each codeword has an associated mean vector, covariance matrix,)12 W
10800 46519 MT
(and determinant for use)
152 W( in output probability calculations.  The state output density mixture coef-)153 W
10800 48258 MT
(ficients were derived from the discrete output densities in)SH
9 SS 
36367 XM
(SPHINX)SH
11 SS 
(.)SH
13300 51243 MT
(The complete)153 W
9 SS 
19898 XM
(SPHINX-SC)SH
11 SS 
24976 XM
(experimental setup is depicted in Figure 4-7.)
153 W( The)
579 W( semi-continuous)152 W
10800 52982 MT
(HMM phone models were trained in a two)
141 W( step process.  A set of 48 context-independent models)142 W
10800 54721 MT
(were trained on a large body of speech data and made available to the author.  Given task-specific)114 W
10800 56460 MT
(data, these models were refined to produce a larger set \0501147 for)127 W
9 SS 
40939 XM
(SPHINX-SC)SH
11 SS 
(\051 of)
127 W( context-dependent)128 W
10800 58199 MT
(phone models, or)
212 W( triphones.  Both context-dependent and context-independent training consist of)211 W
10800 59938 MT
(multiple iterations of)
160 W( the forward-backward algorithm and reestimation.  Within each iteration, an)161 W
10800 61677 MT
(orthographic transcript is used to build an HMM for each training utterance.  For each word in the)110 W
10800 63416 MT
(transcription, an entry in the task's lexicon specifies the HMM)
322 W( phone model sequence which)323 W
10800 65155 MT
(represents that word,)121 W
/Times-Italic SF
20631 XM
(e.g. DECREASE)517 W
/Times-Roman SF
29204 XM
(=>)SH
/Times-Italic SF
31199 XM
(D IY K R IY S)480 W
/Times-Roman SF
(. The)
517 W( corresponding phone models)120 W
10800 66894 MT
(are concatenated to form)
149 W( a network specific to the current sentence.  A forced recognition is then)150 W
10800 68633 MT
(performed on the current utterance using the single-sentence HMM, and counts are accumulated.)197 W
10800 70372 MT
(After each pass through the training utterances, these)
201 W( accumulated counts are used to update the)202 W
10800 72111 MT
(model parameters as described in Sections 4.2 and 4.3.)SH
ES
%%Page: 89 90
BS
0 SI
10 /Times-Roman AF
54800 4286 MT
(89)SH
11 SS 
852 1000 0 11700 61472 GB 
%%BeginDocument: /usr0/rozzi/Documentation/PhDThesis/Chapter4/ExpSetup.eps
%!PS-Adobe-2.0 EPSF-2.0
%%Title: 
%%Creator: TopDraw
%%CreationDate: Sun Mar  3 17:16:28 1991
%%For: rozzi
%%DocumentFonts: (atend)
%%%Pages: 0 1
%%BoundingBox: 0 0 507 637
%%EndComments

%%BeginDocument: /usr/lib/NextStep/printPackage.ps
%!PS-Adobe-2.0
%%Title: Printing Package
%%EndComments
%Version: 2.0
%Copyright: 1988, NeXT, Inc.

/__NXdef{1 index where{pop pop pop}{def}ifelse}bind def
/__NXbdef{1 index where{pop pop pop}{bind def}ifelse}bind def
/UserObjects 10 array __NXdef
/defineuserobject{
        exch dup 1 add dup UserObjects length gt{
                array dup 0 UserObjects putinterval
                /UserObjects exch def
        }{pop}ifelse UserObjects exch 3 -1 roll put
}__NXbdef
/undefineuserobject{UserObjects exch null put}__NXbdef
/execuserobject{UserObjects exch get exec}__NXbdef
/__NXRectPath{4 2 roll moveto 1 index 0 rlineto
0 exch rlineto neg 0 rlineto closepath}__NXbdef
/__NXProcessRectArgs{
        1 index type /arraytype eq{
                exch 0 4 2 index length 1 sub{
                        dup 3 add 1 exch{1 index exch get exch}for
                        5 1 roll 5 index exec
                }for pop pop
        }{exec}ifelse
}__NXbdef
/rectfill{gsave newpath {__NXRectPath fill} __NXProcessRectArgs grestore}__NXbdef
/rectclip{newpath {__NXRectPath} __NXProcessRectArgs clip newpath}__NXbdef
/rectstroke{
        gsave newpath dup type /arraytype eq{dup length 6 eq}{false}ifelse{
                {gsave __NXRectPath null concat stroke grestore}
                dup length array cvx copy dup 2 4 -1 roll put __NXProcessRectArgs
        }{{__NXRectPath stroke} __NXProcessRectArgs}ifelse grestore
}__NXbdef
/xyshow{
        0 1 3 index length 1 sub{
                currentpoint 4 index 3 index 1 getinterval show
                3 index 3 index 2 mul 1 add get add exch
                3 index 3 index 2 mul get add exch moveto pop
        }for pop pop
}__NXbdef
/xshow{
        0 1 3 index length 1 sub{
                currentpoint 4 index 3 index 1 getinterval show
                exch 3 index 3 index get add exch moveto pop
        }for pop pop
}__NXbdef
/yshow{
        0 1 3 index length 1 sub{
                currentpoint 4 index 3 index 1 getinterval show
                3 index 3 index get add moveto pop
        }for pop pop
}__NXbdef
/arct{arcto pop pop pop pop}__NXbdef
/setbbox{pop pop pop pop}__NXbdef
/ucache{}__NXbdef
/ucachestatus{mark 0 0 0 0 0}__NXbdef
/setucacheparams{cleartomark}__NXbdef
/uappend{systemdict begin cvx exec end}__NXbdef
/ueofill{gsave newpath uappend eofill grestore}__NXbdef
/ufill{gsave newpath uappend fill grestore}__NXbdef
/ustroke{
        gsave newpath dup length 6 eq
        {exch uappend concat}{uappend}ifelse
        stroke grestore
}__NXbdef
/__NXustrokepathMatrix dup where {pop pop}{matrix def}ifelse
/ustrokepath{
        newpath dup length 6 eq{
                exch uappend __NXustrokepathMatrix currentmatrix exch concat
                strokepath setmatrix
        }{uappend strokepath}ifelse
} __NXbdef
/upath{
        [exch {/ucache cvx}if pathbbox /setbbox cvx
         {/moveto cvx}{/lineto cvx}{/curveto cvx}{/closepath cvx}pathforall]cvx
} __NXbdef
/setstrokeadjust{pop}__NXbdef
/currentstrokeadjust{false}__NXbdef
/selectfont{exch findfont exch
dup type /arraytype eq {makefont}{scalefont}ifelse setfont}__NXbdef
/_NXCombineArrays{
        counttomark dup 2 add index dup length 3 -1 roll {
                2 index length sub dup 4 1 roll 1 index exch 4 -1 roll putinterval exch
        }repeat pop pop pop
}__NXbdef
/setcmykcolor{
        1.0 exch sub dup dup 6 -1 roll
        sub dup 0 lt{pop 0}if 5 1 roll
        4 -1 roll sub dup 0 lt{pop 0}if 3 1 roll
        exch sub dup 0 lt{pop 0}if setrgbcolor
}__NXbdef
/currentcmykcolor{currentrgbcolor 3{1.0 exch sub 3 1 roll}repeat 0}__NXbdef
/flushgraphics{}def
/setwindowtype{pop pop}def
/currentwindowtype{pop 0}def
/setalpha{pop}def
/currentalpha{1.0}def
/hidecursor{}def
/obscurecursor{}def
/revealcursor{}def
/setcursor{4 {pop}repeat}bind def
/showcursor{}def
/NextStepEncoding where not{
/NextStepEncoding StandardEncoding 256 array copy def
0 [129/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/Ccedilla/Egrave
/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex/Idieresis
/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis/Ugrave/Uacute
/Ucircumflex/Udieresis/Yacute/Thorn/mu/multiply/divide/copyright
176/registered 181/brokenbar 190/logicalnot 192/onesuperior 201/twosuperior
204/threesuperior 209/plusminus/onequarter/onehalf/threequarters/agrave
/aacute/acircumflex/atilde/adieresis/aring/ccedilla/egrave/eacute
/ecircumflex/edieresis/igrave 226/iacute 228/icircumflex/idieresis/eth
/ntilde 236/ograve/oacute/ocircumflex/otilde/odieresis 242/ugrave/uacute
/ucircumflex 246/udieresis/yacute 252/thorn/ydieresis]
{dup type /nametype eq
 {NextStepEncoding 2 index 2 index put pop 1 add}{exch pop}ifelse
}forall pop
/NextStepEncoding NextStepEncoding readonly def   
/_NXfstr 128 string dup 0 (_NX) putinterval def   
/findfont{
 % Because we can never let NextStepEncoding get into
 % SharedFontDirectory, we cannot reencode a font to NextStepEncoding
 % if we are in shared mode.  So if currentshared is true,
 % we call the normal findfont and return that
 /currentshared where {pop currentshared} {false} ifelse
 {//findfont exec}
 {dup _NXfstr 3 125 getinterval cvs length 3 add _NXfstr 0 3 -1 roll
  getinterval cvn exch FontDirectory 2 index known 
  {pop FontDirectory exch get}
  {//findfont exec dup /Encoding get StandardEncoding eq
   {    dup length dict exch
        {1 index /FID ne {2 index 3 1 roll put}{pop pop}ifelse}forall
         dup /Encoding NextStepEncoding put definefont
        }{exch pop} ifelse
   }ifelse
 }ifelse
}bind def
}{pop}ifelse
/_NXProcArray 5 array __NXdef
/_NXChannels 0 __NXdef
/_NXTotalBytes 0 __NXdef
/_NXDoImageOp{
        1 index{dup}{1}ifelse /_NXChannels exch store
        _NXChannels 2 add 2 roll _NXProcArray 0 _NXChannels getinterval astore pop
        5 index 4 index mul 2 index{1 sub 8 idiv 1 add mul}{mul 1 sub 8 idiv 1 add}ifelse
        4 index mul /_NXTotalBytes exch store pop exch pop
        gsave matrix invertmatrix concat 0.5 setgray 0 0 4 2 roll rectfill grestore
        {       0 1 _NXChannels 1 sub{
                        _NXProcArray exch get exec
                        length _NXTotalBytes exch sub /_NXTotalBytes exch store}for
                _NXTotalBytes 0 le{exit}if
        }loop /_NXProcArray 5 array def
}__NXbdef
/colorimage{_NXDoImageOp}__NXbdef
/alphaimage{1 add _NXDoImageOp}def
%%EndDocument

gsave
 /__NXbasematrix matrix currentmatrix def
grestore
%%EndProlog
%%BeginSetup
/TopDrawDict 200 dict def
/xyshow {
    mark exch aload length -2 2 {
        2 roll
    } for counttomark dup 2 add -1 roll pop 1 add -1 roll gsave {
        pop pop grestore rmoveto gsave
    } exch kshow grestore rmoveto
} bind def /currentalpha {
    1
} def /setalpha {
    pop
} bind def
TopDrawDict begin /prt_stack {
    (***Top of Stack\012) print pstack (---Bottom of Stack\012) print flush
} def /prt_top {
    (top item of stack) == dup == flush
} def /prtmat matrix def /prt_ctm {
    (current transformation matrix: ) print prtmat currentmatrix == flush
} def /tmmat matrix def /obmat matrix def /strmat matrix def /pgmat matrix def /idmat matrix def /sc1mt matrix def /sc2mt matrix def /sc3mt matrix def /sc4mt matrix def /sc5mt matrix def /sc6mt matrix def /sc7mt matrix def /inmat matrix def /ctmmt matrix def /octmmt matrix def /clpmt matrix def /weglet_mat matrix def /crlinw 1 def crlinw setlinewidth /crlinjn 0 def crlinjn setlinejoin /crlincp 0 def crlincp setlinecap /crmtrlmt currentmiterlimit def /crstrpat 0 def /crfilpat 0 def /crflat currentflat def /dftflat currentflat def /strinclr false def /crlingry 0 def /crlinred 0 def /crlingrn 0 def /crlinblu 0 def /crlinalph 1 def /filinclr false def /crfilgry 0 def /crfilred 0 def /crfilgrn 0 def /crfilblu 0 def /crfilalph 1 def /crfilstyl 0 def /txtdraw true def /txtinclr false def /txtwpat false def /txtwittrans false def /crtxtgry 0 def /crtxtred 0 def /crtxtgrn 0 def /crtxtblu 0 def /crtxtalph 1 def /crtxtpat 0 def /txlndraw true def /txlninclr false def /txlnwpat false def /txlnwittrans false def /crtxlngry 0 def /crtxlnred 0 def /crtxlngrn 0 def /crtxlnblu 0 def /crtxlnalph 1 def /crtxlnpat 0 def /hilittxt false def /strdsh [2 2] def /dshpatoff 0 def /usedash false def /filwpat false def /strwpat false def /filwittrans false def /strwittrans false def /crfrtarw false def /crendarw false def /rsave 0 def /esave 0 def /sslsave 0 def /lsave 0 def /clpsave 0 def /pathsave 0 def /tpatstr 10 string def /ptdist {
    sub dup mul 3 1 roll sub dup mul add sqrt
} bind def /dodrawctm {
    octmmt currentmatrix pop idmat obmat concatmatrix ctmmt currentmatrix sc1mt concatmatrix setmatrix
} bind def /undrawctm {
    obmat inmat invertmatrix ctmmt currentmatrix sc1mt concatmatrix setmatrix
} bind def /undrawmat {
    obmat aload pop 7 -1 roll astore
} bind def /unpagectm {
    octmmt setmatrix
} bind def /unpagemat {
    pgmat aload pop 7 -1 roll astore
} bind def /drtan {
    gsave 1 setalpha 0 setlinewidth 0.333333 setgray moveto lineto stroke grestore
} bind def /drdgrdln {
    gsave 1 setalpha 0 setlinewidth [1 2] 0 setdash setgray moveto lineto stroke grestore
} bind def /drgrdln {
    gsave 1 setalpha 0 setlinewidth setgray moveto lineto stroke grestore
} bind def end
TopDrawDict begin /rpath {
    newpath moveto dup 0 exch rlineto exch 0 rlineto 0 exch neg rlineto closepath
} bind def /rfpath {
    /rad3 exch def /hh3 exch def /ww3 exch def /yy1 exch def /xx1 exch def /xx2 xx1 ww3 add def /yy2 yy1 hh3 add def ww3 0.5 mul rad3 lt {
        /rad3 ww3 0.5 mul def
    } if hh3 0.5 mul rad3 lt {
        /rad3 hh3 0.5 mul def
    } if newpath xx1 yy1 hh3 0.5 mul add moveto xx1 yy2 xx2 yy2 rad3 arcto 4 {
        pop
    } repeat xx2 yy2 xx2 yy1 rad3 arcto 4 {
        pop
    } repeat xx2 yy1 xx1 yy1 rad3 arcto 4 {
        pop
    } repeat xx1 yy1 xx1 yy2 rad3 arcto 4 {
        pop
    } repeat closepath
} bind def /rfill {
    gsave dodrawctm crfilalph setalpha filinclr {
        crfilred crfilgrn crfilblu setrgbcolor
    } {
        crfilgry setgray
    } ifelse filwpat {
        4 2 roll rpath crfilpat findfont filwittrans {
            trpatfil
        } {
            oppatfil
        } ifelse
    } {
        rectfill
    } ifelse grestore
} bind def /rstroke {
    gsave dodrawctm crlinalph setalpha crlinw setlinewidth crlincp setlinecap crlinjn setlinejoin crmtrlmt setmiterlimit usedash {
        strdsh dshpatoff setdash
    } if strinclr {
        crlinred crlingrn crlinblu setrgbcolor
    } {
        crlingry setgray
    } ifelse 4 2 roll rpath unpagectm concat strwpat {
        crstrpat findfont strwittrans {
            trpatstrk
        } {
            oppatstrk
        } ifelse
    } {
        stroke
    } ifelse grestore
} bind def /mkrpath {
    dodrawctm rpath unpagectm
} bind def end
TopDrawDict begin /p1x 0 def /p1y 0 def /p2x 0 def /p2y 0 def /ssl {
    gsave dodrawctm crfrtarw crendarw or {
        /p1y 1 index def /p1x 2 index def /p2y 1 index 4 index add def /p2x 2 index 5 index add def newpath moveto rlineto
    } {
        newpath moveto rlineto
    } ifelse crlinalph setalpha crlinw setlinewidth crlincp setlinecap usedash {
        strdsh dshpatoff setdash
    } if strinclr {
        crlinred crlingrn crlinblu setrgbcolor
    } {
        crlingry setgray
    } ifelse aload pop strmat astore crfrtarw {
        currentlinewidth strmat p2x p2y p1x p1y arow
    } if crendarw {
        currentlinewidth strmat p1x p1y p2x p2y arow
    } if unpagectm concat strwpat {
        crstrpat findfont strwittrans {
            trpatstrk
        } {
            oppatstrk
        } ifelse
    } {
        stroke
    } ifelse grestore
} bind def end
TopDrawDict begin /elli {
    gsave dodrawctm translate scale newpath dup dup 0 360 arc closepath unpagectm {
        crfilalph setalpha filinclr {
            crfilred crfilgrn crfilblu setrgbcolor
        } {
            crfilgry setgray
        } ifelse gsave filwpat {
            crfilpat findfont filwittrans {
                trpatfil
            } {
                oppatfil
            } ifelse
        } {
            fill
        } ifelse grestore
    } if {
        crlinalph setalpha crlinw setlinewidth usedash {
            strdsh dshpatoff setdash
        } if strinclr {
            crlinred crlingrn crlinblu setrgbcolor
        } {
            crlingry setgray
        } ifelse concat strwpat {
            crstrpat findfont strwittrans {
                trpatstrk
            } {
                oppatstrk
            } ifelse
        } {
            stroke
        } ifelse
    } {
        pop
    } ifelse grestore
} bind def /estroke {
    gsave dodrawctm translate scale newpath dup dup 0 360 arc closepath crlinalph setalpha crlinw setlinewidth usedash {
        strdsh dshpatoff setdash
    } if strinclr {
        crlinred crlingrn crlinblu setrgbcolor
    } {
        crlingry setgray
    } ifelse unpagectm concat strwpat {
        crstrpat findfont strwittrans {
            trpatstrk
        } {
            oppatstrk
        } ifelse
    } {
        stroke
    } ifelse grestore
} bind def /efill {
    gsave dodrawctm translate scale newpath dup dup 0 360 arc closepath unpagectm crfilalph setalpha filinclr {
        crfilred crfilgrn crfilblu setrgbcolor
    } {
        crfilgry setgray
    } ifelse filwpat {
        crfilpat findfont filwittrans {
            trpatfil
        } {
            oppatfil
        } ifelse
    } {
        fill
    } ifelse grestore
} bind def /apstroke {
    gsave dodrawctm /pie exch def /radius exch def /yscale exch def /xscale exch def /yy exch def /xx exch def /angle2 exch def /angle1 exch def /closed exch def xx yy translate xscale yscale scale newpath pie {
        radius dup moveto
    } if radius dup dup angle1 angle2 arc closed pie or {
        closepath
    } if crlinalph setalpha closed not pie not and {
        crfrtarw {
            dup crlinw exch gsave newpath angle1 1 add cos radius mul radius add angle1 1 add sin radius mul radius add moveto angle1 cos radius mul radius add angle1 sin radius mul radius add lineto unpagectm {
                
            } {
                
            } {
                
            } {
                
            } pathforall arow grestore
        } if crendarw {
            dup crlinw exch gsave newpath angle2 1 sub cos radius mul radius add angle2 1 sub sin radius mul radius add moveto angle2 cos radius mul radius add angle2 sin radius mul radius add lineto unpagectm {
                
            } {
                
            } {
                
            } {
                
            } pathforall arow grestore
        } if
    } if crlincp setlinecap crlinalph setalpha crlinw setlinewidth usedash {
        strdsh dshpatoff setdash
    } if strinclr {
        crlinred crlingrn crlinblu setrgbcolor
    } {
        crlingry setgray
    } ifelse unpagectm concat strwpat {
        crstrpat findfont strwittrans {
            trpatstrk
        } {
            oppatstrk
        } ifelse
    } {
        stroke
    } ifelse grestore
} bind def /apfill {
    gsave dodrawctm /pie exch def /radius exch def /yscale exch def /xscale exch def /yy exch def /xx exch def xx yy translate xscale yscale scale newpath pie {
        radius dup moveto
    } if radius dup dup 5 -2 roll arc pie or {
        closepath
    } if 1 xscale div 1 yscale div scale crfilalph setalpha filinclr {
        crfilred crfilgrn crfilblu setrgbcolor
    } {
        crfilgry setgray
    } ifelse filwpat {
        crfilpat findfont filwittrans {
            trpatfil
        } {
            oppatfil
        } ifelse
    } {
        fill
    } ifelse grestore
} bind def /mkepath {
    dodrawctm /pie exch def /radius exch def /yscale exch def /xscale exch def /yy exch def /xx exch def /angle2 exch def /angle1 exch def /closed exch def xx yy translate xscale yscale scale newpath pie {
        radius dup moveto
    } if radius dup dup angle1 angle2 arc closed pie or {
        closepath
    } if unpagectm
} bind def end
TopDrawDict begin /closedspl false def /nspans 0 def /sstrt {
    gsave dodrawctm /closedspl exch def /nspans 0 def newpath
} bind def /sstrtpath {
    dodrawctm /closedspl exch def /nspans 0 def newpath
} bind def /sadd {
    nspans 0 eq {
        moveto
    } {
        pop pop
    } ifelse curveto /nspans nspans 1 add def
} bind def /splstroke {
    nspans 0 gt {
        unpagectm concat closedspl {
            closepath
        } if crlincp setlinecap crlinjn setlinejoin crlinalph setalpha crlinw setlinewidth crmtrlmt setmiterlimit usedash {
            strdsh dshpatoff setdash
        } if strinclr {
            crlinred crlingrn crlinblu setrgbcolor
        } {
            crlingry setgray
        } ifelse strwpat {
            flattenpath crstrpat findfont strwittrans {
                trpatstrk
            } {
                oppatstrk
            } ifelse
        } {
            stroke
        } ifelse
    } {
        pop
    } ifelse grestore
} bind def /splfill {
    nspans 0 gt {
        closedspl {
            closepath
        } if crfilalph setalpha filinclr {
            crfilred crfilgrn crfilblu setrgbcolor
        } {
            crfilgry setgray
        } ifelse filwpat {
            flattenpath crfilpat findfont crfilstyl 0 eq {
                filwittrans {
                    trpateofil
                } {
                    oppateofil
                } ifelse
            } {
                filwittrans {
                    trpatfil
                } {
                    oppatfil
                } ifelse
            } ifelse
        } {
            crfilstyl 0 eq {
                eofill
            } {
                fill
            } ifelse
        } ifelse
    } if grestore
} bind def /mksplpath {
    nspans 0 gt {
        closedspl {
            closepath
        } if
    } if
} bind def end
TopDrawDict begin /dotx {
    gsave txtdraw {
        concat selectfont txtinclr {
            crtxtred crtxtgrn crtxtblu setrgbcolor
        } {
            crtxtgry setgray
        } ifelse crtxtalph setalpha moveto xyshow
    } {
        pop pop pop pop pop pop pop
    } ifelse grestore
} bind def /txtlin {
    gsave txlndraw {
        concat txlninclr {
            crtxlnred crtxlngrn crtxlnblu setrgbcolor
        } {
            crtxlngry setgray
        } ifelse crtxlnalph setalpha setlinewidth 0 setlinecap newpath moveto 0 rlineto stroke
    } {
        pop pop pop pop pop
    } ifelse grestore
} bind def end
%%EndSetup
gsave
0 0 507 636.494019 rectclip
-61 -93.506004 translate
61 93.506004 507 636.494019 rectclip
gsave
TopDrawDict begin
/invpats true def
/crlincp 0 def
/crlinjn 0 def
/crmtrlmt 10 def
/crlinw 1.5 def
/crlinalph 1 def
/crlinred 0 def /crlingrn 0 def /crlinblu 0 def /strinclr true def
/crfilalph 1 def
/crfilred 1 def /crfilgrn 1 def /crfilblu 1 def /filinclr true def
/filwpat false def
TopDrawDict /piddict known TopDrawDict /ipiddict known or {
    1 getpat /crfilpat exch def
} if
/filwittrans false def
/strwpat false def
TopDrawDict /piddict known TopDrawDict /ipiddict known or {
    1 getpat /crstrpat exch def
} if
/strwittrans false def
/usedash false def
/strdsh [2 2] def /dshpatoff 0 def
/crendarw false def
/crfrtarw false def
/txtdraw false def
/crtxtalph 1 def
/crtxtred 0 def /crtxtgrn 0 def /crtxtblu 0 def /txtinclr true def
/txtwpat false def
/txtwittrans false def
/txlndraw false def
/crtxlnalph 1 def
/crtxlnred 0 def /crtxlngrn 0 def /crtxlnblu 0 def /txlninclr true def
/txlnwittrans false def
/txlnwpat false def
10 4.85 -1 54 710 1 -8.742278e-08 -8.742278e-08 -1 8.000061 1264 sc5mt astore efill
1 -8.742278e-08 -8.742278e-08 -1 8.000061 1264 sc6mt astore 10 4.85 -1 54 710 1 -8.742278e-08 -8.742278e-08 -1 8.000061 1264 sc5mt astore estroke
10 4.85 -1 54 710 1 -8.742278e-08 -8.742278e-08 -1 8.000062 1273 sc5mt astore efill
1 -8.742278e-08 -8.742278e-08 -1 8.000061 1264 sc6mt astore 10 4.85 -1 54 710 1 -8.742278e-08 -8.742278e-08 -1 8.000062 1273 sc5mt astore estroke
10 4.85 -1 54 710 1 -8.742278e-08 -8.742278e-08 -1 8.000063 1282 sc5mt astore efill
1 -8.742278e-08 -8.742278e-08 -1 8.000061 1264 sc6mt astore 10 4.85 -1 54 710 1 -8.742278e-08 -8.742278e-08 -1 8.000063 1282 sc5mt astore estroke
10 4.85 -1 54 710 1 -8.742278e-08 -8.742278e-08 -1 8.000063 1291 sc5mt astore efill
1 -8.742278e-08 -8.742278e-08 -1 8.000061 1264 sc6mt astore 10 4.85 -1 54 710 1 -8.742278e-08 -8.742278e-08 -1 8.000063 1291 sc5mt astore estroke
10 4.85 -1 54 710 1 -8.742278e-08 -8.742278e-08 -1 8.000064 1300 sc5mt astore efill
1 -8.742278e-08 -8.742278e-08 -1 8.000061 1264 sc6mt astore 10 4.85 -1 54 710 1 -8.742278e-08 -8.742278e-08 -1 8.000064 1300 sc5mt astore estroke
10 4.85 -1 54 710 1 -8.742278e-08 -8.742278e-08 -1 416.000061 924 sc5mt astore efill
1 -8.742278e-08 -8.742278e-08 -1 412.000061 933 sc6mt astore 10 4.85 -1 54 710 1 -8.742278e-08 -8.742278e-08 -1 416.000061 924 sc5mt astore estroke
10 4.85 -1 54 710 1 -8.742278e-08 -8.742278e-08 -1 416.000061 933 sc5mt astore efill
1 -8.742278e-08 -8.742278e-08 -1 412.000061 933 sc6mt astore 10 4.85 -1 54 710 1 -8.742278e-08 -8.742278e-08 -1 416.000061 933 sc5mt astore estroke
10 4.85 -1 54 710 1 -8.742278e-08 -8.742278e-08 -1 416.000061 942 sc5mt astore efill
1 -8.742278e-08 -8.742278e-08 -1 412.000061 933 sc6mt astore 10 4.85 -1 54 710 1 -8.742278e-08 -8.742278e-08 -1 416.000061 942 sc5mt astore estroke
10 4.85 -1 54 710 1 -8.742278e-08 -8.742278e-08 -1 416.000061 951 sc5mt astore efill
1 -8.742278e-08 -8.742278e-08 -1 412.000061 933 sc6mt astore 10 4.85 -1 54 710 1 -8.742278e-08 -8.742278e-08 -1 416.000061 951 sc5mt astore estroke
10 4.85 -1 54 710 1 -8.742278e-08 -8.742278e-08 -1 416.000061 960 sc5mt astore efill
1 -8.742278e-08 -8.742278e-08 -1 412.000061 933 sc6mt astore 10 4.85 -1 54 710 1 -8.742278e-08 -8.742278e-08 -1 416.000061 960 sc5mt astore estroke
10 4.85 -1 54 710 1 -8.742278e-08 -8.742278e-08 -1 416.000061 1114 sc5mt astore efill
1 -8.742278e-08 -8.742278e-08 -1 398.000061 1132 sc6mt astore 10 4.85 -1 54 710 1 -8.742278e-08 -8.742278e-08 -1 416.000061 1114 sc5mt astore estroke
10 4.85 -1 54 710 1 -8.742278e-08 -8.742278e-08 -1 416.000061 1123 sc5mt astore efill
1 -8.742278e-08 -8.742278e-08 -1 398.000061 1132 sc6mt astore 10 4.85 -1 54 710 1 -8.742278e-08 -8.742278e-08 -1 416.000061 1123 sc5mt astore estroke
10 4.85 -1 54 710 1 -8.742278e-08 -8.742278e-08 -1 416.000061 1132 sc5mt astore efill
1 -8.742278e-08 -8.742278e-08 -1 398.000061 1132 sc6mt astore 10 4.85 -1 54 710 1 -8.742278e-08 -8.742278e-08 -1 416.000061 1132 sc5mt astore estroke
10 4.85 -1 54 710 1 -8.742278e-08 -8.742278e-08 -1 416.000061 1141 sc5mt astore efill
1 -8.742278e-08 -8.742278e-08 -1 398.000061 1132 sc6mt astore 10 4.85 -1 54 710 1 -8.742278e-08 -8.742278e-08 -1 416.000061 1141 sc5mt astore estroke
10 4.85 -1 54 710 1 -8.742278e-08 -8.742278e-08 -1 416.000061 1150 sc5mt astore efill
1 -8.742278e-08 -8.742278e-08 -1 398.000061 1132 sc6mt astore 10 4.85 -1 54 710 1 -8.742278e-08 -8.742278e-08 -1 416.000061 1150 sc5mt astore estroke
/crfilred 0.333333 def /crfilgrn 0.333333 def /crfilblu 0.333333 def /filinclr true def
5 1.1 -1 347 635 1 0 0 1 -63 67 sc5mt astore efill
1 0 0 1 -63 67 sc6mt astore 5 1.1 -1 347 635 1 0 0 1 -63 67 sc5mt astore estroke
5 1.1 -1 347 635 1 0 0 1 -41 67 sc5mt astore efill
1 0 0 1 -50 76 sc6mt astore 5 1.1 -1 347 635 1 0 0 1 -41 67 sc5mt astore estroke
5 1.1 -1 347 635 1 0 0 1 -20 67 sc5mt astore efill
1 0 0 1 -38 85 sc6mt astore 5 1.1 -1 347 635 1 0 0 1 -20 67 sc5mt astore estroke
1 0 0 1 -66 66 sc5mt astore 11 0 361 631.5 1 0 0 1 -66 66 sc6mt astore ssl
1 0 0 1 -66 66 sc5mt astore 10 0 383 631 1 0 0 1 -66 66 sc6mt astore ssl
/crfilred 1 def /crfilgrn 1 def /crfilblu 1 def /filinclr true def
2.75 -1 5.636364 355 636.5 1 0 0 0.83871 -63 168.661316 sc5mt astore efill
1 0 0 1 -63 66 sc6mt astore 2.75 -1 5.636364 355 636.5 1 0 0 0.83871 -63 168.661316 sc5mt astore estroke
/esave save def false 90 180 355.5 634 2.625 -1 8 false [1 0 0 1 -66 66] apfill esave restore
/esave save def [1 0 0 1 -66 66] false 90 180 355.5 634 2.625 -1 8 false [1 0 0 1 -66 66] apstroke esave restore
/esave save def false 90 180 355.5 634 2.625 -1 8 false [-1 0 0 1 687 66] apfill esave restore
/esave save def [-1 0 0 1 696 75] false 90 180 355.5 634 2.625 -1 8 false [-1 0 0 1 687 66] apstroke esave restore
2.75 -1 5.636364 355 636.5 1 0 0 0.83871 -41 168.661316 sc5mt astore efill
1 0 0 1 -50 75 sc6mt astore 2.75 -1 5.636364 355 636.5 1 0 0 0.83871 -41 168.661316 sc5mt astore estroke
2.75 -1 5.636364 355 636.5 1 0 0 0.83871 -20 169.161316 sc5mt astore efill
1 0 0 1 -38 84.5 sc6mt astore 2.75 -1 5.636364 355 636.5 1 0 0 0.83871 -20 169.161316 sc5mt astore estroke
1 0 0 1 0 0 sc5mt astore 233 626 157 -97 1 0 0 1 0 0 sc6mt astore rstroke
1 0 0 1 0 0 sc5mt astore 233 465 157 -97 1 0 0 1 0 0 sc6mt astore rstroke
1 0 0 1 0 0 sc5mt astore 233 276 157 -97 1 0 0 1 0 0 sc6mt astore rstroke
/txtdraw true def
/txlndraw true def
(Initial Models ) [5.446014 0 7.783997 0 3.891998 0 4.661987 0 3.891998 0 7 0 3.891998 0 3.5 0 13.216003 0 7 0 7.783997 0 6.216003 0 3.891998 0 5.446014 0 0 0] 361 713 /Times-Bold [ 14 1 mul 0 0 14 0 0 ] [1 0 0 1 -44 -45] dotx
false [1 0 0 1 0 -157] sstrt
systemdict
begin
113 581 231 744 setbbox
143 712 moveto
143 712 166 639 166 639 curveto
166 639 231 587 231 587 curveto
end
/nspans 2 def [1 0 0 1 0 -157] splstroke
1 0 0 1 0 0 sc5mt astore 0 -54 311 680 1 0 0 1 0 0 sc6mt astore ssl
1 0 0 1 0 0 sc5mt astore 0 -91 311 368 1 0 0 1 0 0 sc6mt astore ssl
1 0 0 1 0 0 sc5mt astore 0 -63 311 529 1 0 0 1 0 0 sc6mt astore ssl
1 0 0 1 0 0 sc5mt astore -78 -8 469 430 1 0 0 1 0 0 sc6mt astore ssl
1 0 0 1 0 0 sc5mt astore -78 -8 469 241 1 0 0 1 0 0 sc6mt astore ssl
1 0 0 1 0 0 sc5mt astore 0 -49 311 180 1 0 0 1 0 0 sc6mt astore ssl
(Cepstral data,  100 speakers, 40 sentences  per speaker ) [10.108002 0 6.216 0 7.784 0 5.445999 0 4.662003 0 6.216003 0 7 0 3.891998 0 3.5 0 7.783997 0 7 0 4.662003 0 7 0 3.5 0 3.5 0 -88.270004 -16.142029 7 0 7 0 7 0 3.5 0 5.445999 0 7.783997 0 6.216003 0 7 0 7.643997 0 6.216003 0 6.216003 0 5.445999 0 3.5 0 -79.968002 -16.142029 7 0 7 0 3.5 0 5.445999 0 6.216003 0 7.783997 0 4.662003 0 6.216003 0 7.783997 0 6.216003 0 6.216003 0 5.445999 0 -73.486008 -16.142029 3.5 0 7.784 0 6.216 0 6.216003 0 3.5 0 5.445999 0 7.783997 0 6.216003 0 7 0 7.643997 0 6.216003 0 6.216003 0 0 0] 44 630 /Times-Bold [ 14 1 mul 0 0 14 0 0 ] [1 0 0 1 28 39] dotx
(Updated HMMs ) [10.108002 0 7.783997 0 7.783997 0 7 0 4.661987 0 6.216003 0 7.783997 0 3.5 0 10.891998 0 13.216003 0 13.216003 0 5.446014 0 0 0] 322 502 /Times-Bold [ 14 1 mul 0 0 14 0 0 ] [1 0 0 1 -6 8] dotx
(Adapted Codebook ) [10.108002 0 7.783997 0 7 0 7.783997 0 4.661987 0 6.216003 0 7.783997 0 3.5 0 10.108002 0 7 0 7.783997 0 6.216003 0 7.783997 0 7 0 7 0 7.783997 0 0 0] 326 342 /Times-Bold [ 14 1 mul 0 0 14 0 0 ] [1 0 0 1 -7 2] dotx
(Recognition Results  \(Word Accuracies\) ) [10.108002 0 6.216003 0 6.216003 0 7 0 7 0 7.783997 0 3.891998 0 4.661987 0 3.891998 0 7 0 7.783997 0 3.5 0 10.108002 0 6.216003 0 5.446014 0 7.783997 0 3.891998 0 4.661987 0 5.446014 0 -118.608002 -16.141998 3.5 0 4.661987 0 12.950012 0 7 0 6.216003 0 7.783997 0 2.730011 0 10.108002 0 6.216003 0 6.216003 0 7.783997 0 6.216003 0 7 0 6.216003 0 3.891998 0 6.216003 0 5.446014 0 4.661987 0 0 0] 255 112 /Times-Bold [ 14 1 mul 0 0 14 0 0 ] [1 0 0 1 0 0] dotx
(25 test sentences ) [7 0 7 0 3.5 0 4.661987 0 6.216003 0 5.446014 0 4.661987 0 3.5 0 5.446014 0 6.216003 0 7.783997 0 4.661987 0 6.216003 0 7.783997 0 6.216003 0 6.216003 0 5.445984 0 0 0] 461 192 /Times-Bold [ 14 1 mul 0 0 14 0 0 ] [1 0 0 1 5 84] dotx
(40 adaptation    sentences ) [7 0 7 0 3.5 0 7 0 7.783997 0 7 0 7.783997 0 4.661987 0 7 0 4.661987 0 3.892029 0 7 0 7.783997 0 3.5 0 -85.567993 -16.141998 3.5 0 3.5 0 5.446014 0 6.216003 0 7.783997 0 4.661987 0 6.216003 0 7.784027 0 6.216003 0 6.216003 0 5.445984 0 0 0] 471 386 /Times-Bold [ 14 1 mul 0 0 14 0 0 ] [1 0 0 1 5 97] dotx
(Adaptation statistics ) [10.108002 0 7.783997 0 7 0 7.783997 0 4.662003 0 7 0 4.662003 0 3.891998 0 7 0 7.783997 0 -67.675995 -21.231995 5.445999 0 4.662003 0 7 0 4.662003 0 3.891998 0 5.445999 0 4.662003 0 3.891998 0 6.216003 0 5.445999 0 0 0] 55 453 /Times-Bold [ 14 1 mul 0 0 14 0 0 ] [1 0 0 1 24 43] dotx
/txtdraw true def
/txlndraw true def
(m) [0 0] 109.824005 431.768005 /Symbol [ 18 1 mul 0 0 18 0 0 ] [1 0 0 1 24 43] dotx
/txtdraw true def
/txlndraw true def
(o) [0 0] 120.192001 425.368011 /Times-Bold [ 16 1 mul 0 0 16 0 0 ] [1 0 0 1 24 43] dotx
/txtdraw true def
/txlndraw true def
(,) [0 0] 128.192001 431.768005 /Times-Bold [ 14 1 mul 0 0 14 0 0 ] [1 0 0 1 24 43] dotx
/txtdraw true def
/txlndraw true def
( ) [0 0] 131.692001 431.768005 /Times-Bold [ 16 1 mul 0 0 16 0 0 ] [1 0 0 1 24 43] dotx
1 0 0 1 0 0 sc5mt astore 72 0 160 581 1 0 0 1 0 0 sc6mt astore ssl
/txtdraw true def
/txlndraw true def
(   SPHINX-SC RECOGNITION ) [3.5 0 3.5 0 3.5 0 7.783997 0 8.553986 0 10.891998 0 5.446014 0 10.108002 0 10.108002 0 4.661987 0 7.783997 0 10.108002 0 -85.945984 -16.141998 10.108002 0 9.338013 0 10.108002 0 10.891998 0 10.891998 0 10.108002 0 5.446014 0 9.338013 0 5.446014 0 10.891998 0 10.108002 0 0 0] 258 250 /Times-Bold [ 14 1 mul 0 0 14 0 0 ] [1 0 0 1 2 -14] dotx
/txtdraw true def
/txlndraw true def
( ) [0 0] 267 590 /Times-Roman [ 16 1 mul 0 0 16 0 0 ] [1 0 0 1 0 0] dotx
/txtdraw true def
/txlndraw true def
(        ADAPTIVE          TRAINING \(Forward-Backward\) ) [3.5 0 3.5 0 3.5 0 3.5 0 3.5 0 3.5 0 3.5 0 2.730011 0 10.108002 0 9.618011 0 10.108002 0 8.553986 0 9.338013 0 5.446014 0 10.108002 0 9.338013 0 3.5 0 -103.348053 -16.141998 3.5 0 3.5 0 3.5 0 3.5 0 3.5 0 3.5 0 3.5 0 3.079987 0 9.338013 0 10.108002 0 10.108002 0 5.446014 0 10.108002 0 5.446014 0 10.108002 0 10.891998 0 -99.134033 -16.141998 4.661987 0 8.20401 0 7 0 6.216003 0 10.108002 0 7 0 6.216003 0 7.783997 0 4.661987 0 9.338013 0 7 0 6.216003 0 7.783997 0 10.108002 0 7 0 6.216003 0 7.783997 0 4.661987 0 0 0] 264 437 /Times-Bold [ 14 1 mul 0 0 14 0 0 ] [1 0 0 1 -18 -4] dotx
/txtdraw true def
/txlndraw true def
( ) [0 0] 248 595 /Times-Bold [ 16 1 mul 0 0 16 0 0 ] [1 0 0 1 0 0] dotx
/txtdraw true def
/txlndraw true def
(           MODEL          TRAINING  \(Forward-Backward           Algorithm\) ) [3.5 0 3.5 0 3.5 0 3.5 0 3.5 0 3.5 0 3.5 0 3.5 0 3.5 0 3.5 0 3.5 0 13.216003 0 10.891998 0 10.108002 0 9.338013 0 9.338013 0 3.5 0 -94.892029 -16.141998 3.5 0 3.5 0 3.5 0 3.5 0 3.5 0 3.5 0 3.5 0 3.079987 0 9.338013 0 10.108002 0 10.108002 0 5.446014 0 10.108002 0 5.446014 0 10.108002 0 10.891998 0 -99.134033 -16.141998 3.5 0 4.661987 0 8.20401 0 7 0 6.216003 0 10.108002 0 7 0 6.216003 0 7.783997 0 4.661987 0 9.338013 0 7 0 6.216003 0 7.783997 0 10.108002 0 7 0 6.216003 0 7.783997 0 -126.798004 -16.141998 3.5 0 3.5 0 3.5 0 3.5 0 3.5 0 3.5 0 3.5 0 3.5 0 3.5 0 2.730011 0 10.108002 0 3.891998 0 7 0 7 0 6.216003 0 3.891998 0 4.661987 0 7.783997 0 11.661987 0 4.661987 0 0 0] 264 437 /Times-Bold [ 14 1 mul 0 0 14 0 0 ] [1 0 0 1 -15 164] dotx
/crlinw 1 def
/crfilred 0 def /crfilgrn 0 def /crfilblu 0 def /filinclr true def
false [1 0 0 0.655172 246 414.724121] sstrt
systemdict
begin
57 324 72 353 setbbox
57 353 moveto
57 353 65 324 65 324 curveto
65 324 72 353 72 353 curveto
72 353 65 347 65 347 curveto
end
/nspans 3 def splfill
false [1 0 0 0.655172 246 414.724121] sstrt
systemdict
begin
57 324 72 353 setbbox
57 353 moveto
57 353 65 324 65 324 curveto
65 324 72 353 72 353 curveto
72 353 65 347 65 347 curveto
end
/nspans 3 def [1 0 0 1 246 293] splstroke
false [1 0 0 0.655172 246 253.724136] sstrt
systemdict
begin
57 324 72 353 setbbox
57 353 moveto
57 353 65 324 65 324 curveto
65 324 72 353 72 353 curveto
72 353 65 347 65 347 curveto
end
/nspans 3 def splfill
false [1 0 0 0.655172 246 253.724136] sstrt
systemdict
begin
57 324 72 353 setbbox
57 353 moveto
57 353 65 324 65 324 curveto
65 324 72 353 72 353 curveto
72 353 65 347 65 347 curveto
end
/nspans 3 def [1 0 0 1 237 141] splstroke
false [1 0 0 0.655172 246 -81.275864] sstrt
systemdict
begin
57 324 72 353 setbbox
57 353 moveto
57 353 65 324 65 324 curveto
65 324 72 353 72 353 curveto
72 353 65 347 65 347 curveto
end
/nspans 3 def splfill
false [1 0 0 0.655172 246 -81.275864] sstrt
systemdict
begin
57 324 72 353 setbbox
57 353 moveto
57 353 65 324 65 324 curveto
65 324 72 353 72 353 curveto
72 353 65 347 65 347 curveto
end
/nspans 3 def [1 0 0 1 228 -185] splstroke
false [1 0 0 0.655172 246 64.724136] sstrt
systemdict
begin
57 324 72 353 setbbox
57 353 moveto
57 353 65 324 65 324 curveto
65 324 72 353 72 353 curveto
72 353 65 347 65 347 curveto
end
/nspans 3 def splfill
false [1 0 0 0.655172 246 64.724136] sstrt
systemdict
begin
57 324 72 353 setbbox
57 353 moveto
57 353 65 324 65 324 curveto
65 324 72 353 72 353 curveto
72 353 65 347 65 347 curveto
end
/nspans 3 def [1 0 0 1 219 -30] splstroke
false [0.562278 0.826948 -0.541794 0.368389 371.858429 255.582947] sstrt
systemdict
begin
57 324 72 353 setbbox
57 353 moveto
57 353 65 324 65 324 curveto
65 324 72 353 72 353 curveto
72 353 65 347 65 347 curveto
end
/nspans 3 def splfill
false [0.562278 0.826948 -0.541794 0.368389 371.858429 255.582947] sstrt
systemdict
begin
57 324 72 353 setbbox
57 353 moveto
57 353 65 324 65 324 curveto
65 324 72 353 72 353 curveto
72 353 65 347 65 347 curveto
end
/nspans 3 def [0.562278 0.826948 -0.826948 0.562278 460.014984 184.758133] splstroke
false [-4.371139e-08 1 -0.655172 -2.86385e-08 443.551819 516.271179] sstrt
systemdict
begin
57 324 72 353 setbbox
57 353 moveto
57 353 65 324 65 324 curveto
65 324 72 353 72 353 curveto
72 353 65 347 65 347 curveto
end
/nspans 3 def splfill
false [-4.371139e-08 1 -0.655172 -2.86385e-08 443.551819 516.271179] sstrt
systemdict
begin
57 324 72 353 setbbox
57 353 moveto
57 353 65 324 65 324 curveto
65 324 72 353 72 353 curveto
72 353 65 347 65 347 curveto
end
/nspans 3 def [-4.371139e-08 1 -1 -4.371139e-08 547.27594 498.271179] splstroke
false [0.11319 -0.993573 0.650962 0.074159 171.450775 461.781982] sstrt
systemdict
begin
57 324 72 353 setbbox
57 353 moveto
57 353 65 324 65 324 curveto
65 324 72 353 72 353 curveto
72 353 65 347 65 347 curveto
end
/nspans 3 def splfill
false [0.11319 -0.993573 0.650962 0.074159 171.450775 461.781982] sstrt
systemdict
begin
57 324 72 353 setbbox
57 353 moveto
57 353 65 324 65 324 curveto
65 324 72 353 72 353 curveto
72 353 65 347 65 347 curveto
end
/nspans 3 def [0.11319 -0.993573 0.993573 0.11319 66.355812 467.925781] splstroke
false [0.11319 -0.993573 0.650962 0.074159 171.450775 272.781982] sstrt
systemdict
begin
57 324 72 353 setbbox
57 353 moveto
57 353 65 324 65 324 curveto
65 324 72 353 72 353 curveto
72 353 65 347 65 347 curveto
end
/nspans 3 def splfill
false [0.11319 -0.993573 0.650962 0.074159 171.450775 272.781982] sstrt
systemdict
begin
57 324 72 353 setbbox
57 353 moveto
57 353 65 324 65 324 curveto
65 324 72 353 72 353 curveto
72 353 65 347 65 347 curveto
end
/nspans 3 def [0.11319 -0.993573 0.993573 0.11319 57.355812 287.925781] splstroke
/txtdraw true def
/txlndraw true def
(S) [0 0] 100 395 /Symbol [ 18 1 mul 0 0 18 0 0 ] [1 0 0 1 -21 58] dotx
/txtdraw true def
/txlndraw true def
(o) [0 0] 110.655998 388.600006 /Times-Bold [ 16 1 mul 0 0 16 0 0 ] [1 0 0 1 -21 58] dotx
/txtdraw true def
/txlndraw true def
(, and ) [3.5 0 3.5 0 7.000008 0 7.783997 0 7.783997 0 0 0] 118.655998 395 /Times-Bold [ 14 1 mul 0 0 14 0 0 ] [1 0 0 1 -21 58] dotx
/txtdraw true def
/txlndraw true def
(S ) [10.656006 0 0 0] 151.723999 395 /Symbol [ 18 1 mul 0 0 18 0 0 ] [1 0 0 1 -21 58] dotx
end
grestore
grestore
%%Trailer

%%EndDocument
 GE /Times-Bold SF
23644 63224 MT
(Figure 4-7:)SH
9 /Times-Roman AF
29417 XM
(SPHINX-SC)SH
11 SS 
34342 XM
(experimental setup.)SH
13300 66209 MT
(Training data for the)
185 W( generation of models and adaptation statistics were 40 sentences from)184 W
10800 67948 MT
(approximately 100 speakers)
37 W( in the TIRM)
38 W( [46])
SH( database.  The adaptation data were 40 sentences from)38 W
10800 69687 MT
(11 different speakers in the TIRM database.  The evaluation)
127 W( test data consisted of another 25 sen-)126 W
10800 71426 MT
(tences from these)
33 W( 11 speakers.  The cepstral and differenced cepstral vectors are 12-dimensional, and)34 W
ES
%%Page: 90 91
BS
0 SI
10 /Times-Roman AF
54800 4286 MT
(90)SH
11 SS 
10800 7955 MT
(power cepstral vectors have 2 elements.)
100 W( Since)
473 W( the dimension of the)99 W
/Times-Italic SF
42080 XM
(a priori)99 W
/Times-Roman SF
45946 XM
(adaptation statistics is)99 W
10800 9694 MT
(equal to the product of)
90 W( the number of classes and dimensions, at least 12)91 W
/Symbol SF
44021 XM
(\327)SH
/Times-Roman SF
44446 XM
(256 = 3072)
480 W( speakers in)91 W
10800 11433 MT
(the training set would have been required to estimate)
227 W( these parameters.  Because of the limited)226 W
10800 13172 MT
(availability of training)
154 W( data it was necessary to reduce this estimation problem to a set of parallel)155 W
10800 14911 MT
(problems by considering only the correlation between a given codeword's features.)SH
538 1000 0 11700 29607 GB 
%%BeginDocument: /usr0/rozzi/Documentation/PhDThesis/Chapter4/AdCDB.eps
%!PS-Adobe-2.0 EPSF-1.2
%%BoundingBox: 0 0 401 250
%%Creator: Mathematica
%%Title: Clipboard
%%CreationDate: Never Never
%%EndComments
50 dict begin
/Mnodistort true def
/pageDashArray [4] def
/nullDashArray [] def

% Compute the minimum of two numbers.
/Mmin {         % p q Mmin min(p,q)
        2 copy          % p q p q
        gt              % p q p>q?
        { exch } if     % min(p,q) max(p,q)
        pop             % min(p,q)
} bind def


% Compute the maximum of two numbers.
/Mmax {         % p q Mmax max(p,q)
        2 copy          % p q p q
        lt              % p q p<q?
        { exch } if     % max(p,q) min(p,q)
        pop             % max(p,q)
} bind def

/Mpstart {
    MathPictureStart
} bind def
/Mpend {
    MathPictureEnd
} bind def
/Mscale {
    0 1 0 1
    5 -1 roll
    MathScale
} bind def
/Plain
        /Courier findfont
def
/Bold
        /Courier-Bold findfont
def
/Italic
        /Courier-Oblique findfont
def
/MathPictureStart {
        gsave
        newpath
        /Mtmatrix
        matrix currentmatrix
        def
        Plain
        Mfontsize scalefont
        setfont
0 setgray 0 setlinewidth
} bind def
/MathPictureEnd {
        grestore
} bind def
/Mdot {
        moveto
        0 0 rlineto
        stroke
} def
/Mtetra {
        moveto
        lineto
        lineto
        lineto
        fill
} def
/Metetra {
        moveto
        lineto
        lineto
        lineto
        closepath
        gsave
        fill
        grestore
        0 setgray
        stroke
} def
/Mistroke {
        flattenpath
        0 0 0
        {
        4 2 roll
        pop pop
        }
        {
        4 -1 roll
        2 index
        sub dup mul
        4 -1 roll
        2 index
        sub dup mul
        add sqrt
        4 -1 roll
        add
        3 1 roll
        }
        {
        stop
        }
        {
        stop
        }
        pathforall
        pop pop
        currentpoint
        stroke
        moveto
        currentdash
        3 -1 roll
        add
        setdash
} def
/Mfstroke {
        stroke
        currentdash
        pop 0
        setdash
} def
/Msboxa {
        newpath
        5 -1 roll
        Mvboxa
        pop
        6 -1 roll
        5 -1 roll
        4 -1 roll
        Msboxa1
        5 -3 roll
        Msboxa1
        [
        7 -2 roll
        [ 2 index 2 index
        10 -1 roll
        9 -1 roll
        ]
        6 1 roll
        5 -2 roll
        ]
} bind def
        
/Msboxa1 {
        sub
        2 div
        dup
        2 index
        1 add
        mul
        3 -1 roll
        -1 add
        3 -1 roll
        mul
} bind def
/Mvboxa {
        gsave
        newpath
        [ true
        3 -1 roll
        {
        Mbbox
        5 -1 roll
        {
        0
        5 1 roll
        }
        {
        7 -1 roll
        exch sub
        (m) stringwidth pop
        .3 mul
        sub
        7 1 roll
        6 -1 roll
        4 -1 roll
        Mmin
        3 -1 roll
        5 index
        add
        5 -1 roll
        4 -1 roll
        Mmax
        4 -1 roll
        }
        ifelse
        false
        }
        forall
        { stop } if
        counttomark
        1 add
        4 roll
        ]
        grestore
} bind def
/Mbbox {
        0 0 moveto
        false charpath
        flattenpath
        pathbbox
        newpath
} bind def
/Mmin {
        2 copy
        gt
        { exch } if
        pop
} bind def
/Mmax {
        2 copy
        lt
        { exch } if
        pop
} bind def
/Mshowa {
        4 -2 roll
        moveto
        2 index
        Mtmatrix setmatrix
        Mvboxa
        7 1 roll
        6 -1 roll
        5 -1 roll
        4 -1 roll
        Mshowa1
        4 1 roll
        Mshowa1
        rmoveto
        currentpoint
        0 1
        4 index length
        -1 add
        {
        2 index
        4 index
        2 index
        get
        3 index
        add
        moveto
        4 index
        exch get
        show
        } for
        pop pop pop pop
        Mgmatrix setmatrix
} bind def
/Mshowa1 {
        2 copy
        add
        4 1 roll
        sub
        mul
        sub
        -2 div
} bind def
/MathScale {
        Mwidth
        Mheight
        Mlp
        translate
        scale
        /Mgmatrix
        matrix currentmatrix
        def
        /Msaveaa exch def
        /Msavebb exch def
        /Msavecc exch def
        /Msavedd exch def
} bind def
/Mlp {
        3 copy
        Mlpfirst
        {
        Mnodistort
        {
        Mmin
        dup
        } if
        4 index
        2 index
        2 index
        Mlprun
        11 index
        11 -1 roll
        10 -4 roll
        Mlp1
        8 index
        9 -5 roll
        Mlp1
        4 -1 roll
        and
        { exit } if
        3 -1 roll
        pop pop
        } loop
        exch
        3 1 roll
        7 -3 roll
        pop pop pop
} bind def
/Mlpfirst {
        3 -1 roll
        dup length
        2 copy
        -2 add
        get
        aload
        pop pop pop
        4 -2 roll
        -1 add
        get
        aload
        pop pop pop
        6 -1 roll
        3 -1 roll
        5 -1 roll
        sub
        dup /MsaveAx exch def
        div
        4 1 roll
        exch sub
        dup /MsaveAy exch def
        div
} bind def
/Mlprun {
        2 copy
        4 index
        0 get
        dup
        4 1 roll
        Mlprun1
        3 copy
        8 -2 roll
        9 -1 roll
        {
        3 copy
        Mlprun1
        3 copy
        11 -3 roll
        /gt Mlpminmax
        8 3 roll
        11 -3 roll
        /lt Mlpminmax
        8 3 roll
        } forall
        pop pop pop pop
        3 1 roll
        pop pop
        aload pop
        5 -1 roll
        aload pop
        exch
        6 -1 roll
        Mlprun2
        8 2 roll
        4 -1 roll
        Mlprun2
        6 2 roll
        3 -1 roll
        Mlprun2
        4 2 roll
        exch
        Mlprun2
        6 2 roll
} bind def
/Mlprun1 {
        aload pop
        exch
        6 -1 roll
        5 -1 roll
        mul add
        4 -2 roll
        mul
        3 -1 roll
        add
} bind def
/Mlprun2 {
        2 copy
        add 2 div
        3 1 roll
        exch sub
} bind def
/Mlpminmax {
        cvx
        2 index
        6 index
        2 index
        exec
        {
        7 -3 roll
        4 -1 roll
        } if
        1 index
        5 index
        3 -1 roll
        exec
        {
        4 1 roll
        pop
        5 -1 roll
        aload
        pop pop
        4 -1 roll
        aload pop
        [
        8 -2 roll
        pop
        5 -2 roll
        pop
        6 -2 roll
        pop
        5 -1 roll
        ]
        4 1 roll
        pop
        }
        {
        pop pop pop
        } ifelse
} bind def
/Mlp1 {
        5 index
        3 index sub
        5 index
        2 index mul
        1 index
        le
        1 index
        0 le
        or
        dup
        not
        {
        1 index
        3 index div
        .99999 mul
        8 -1 roll
        pop
        7 1 roll
        }
        if
        8 -1 roll
        2 div
        7 -2 roll
        pop sub
        5 index
        6 -3 roll
        pop pop
        mul sub
        exch
} bind def
/Mfontsize      12 def
/Mleft          0.000000 def
/Mbottom        250.000000 def
/Mwidth         401.000000 def
/Mheight        250.000000 def
/Courier findfont 12 scalefont setfont
%!
%%Creator: Mathematica
%%AspectRatio: 0.61803 
MathPictureStart
% Scaling calculations
0.02381 0.02721 0 2.47214 [
[(5)] 0.15986 -0.0125 0 1 Msboxa
[(10)] 0.29592 -0.0125 0 1 Msboxa
[(15)] 0.43197 -0.0125 0 1 Msboxa
[(20)] 0.56803 -0.0125 0 1 Msboxa
[(25)] 0.70408 -0.0125 0 1 Msboxa
[(30)] 0.84014 -0.0125 0 1 Msboxa
[(35)] 0.97619 -0.0125 0 1 Msboxa
[(0.05)] 0.01131 0.12361 1 0 Msboxa
[(0.1)] 0.01131 0.24721 1 0 Msboxa
[(0.15)] 0.01131 0.37082 1 0 Msboxa
[(0.2)] 0.01131 0.49443 1 0 Msboxa
[(0.25)] 0.01131 0.61803 1 0 Msboxa
[ -0.001 -0.00725 0 0 ]
[ 1.001 0.61903 0 0 ]
] MathScale
% Start of Graphics
1 setlinecap
1 setlinejoin
newpath
%%Object: Graphics
[ ] 0 setdash
0 setgray
gsave
gsave
0.002 setlinewidth
0 0 moveto
1 0 lineto
stroke
0.15986 -0.00625 moveto
0.15986 0.00625 lineto
stroke
0 setgray
[(5)] 0.15986 -0.0125 0 1 Mshowa
0.29592 -0.00625 moveto
0.29592 0.00625 lineto
stroke
0 setgray
[(10)] 0.29592 -0.0125 0 1 Mshowa
0.43197 -0.00625 moveto
0.43197 0.00625 lineto
stroke
0 setgray
[(15)] 0.43197 -0.0125 0 1 Mshowa
0.56803 -0.00625 moveto
0.56803 0.00625 lineto
stroke
0 setgray
[(20)] 0.56803 -0.0125 0 1 Mshowa
0.70408 -0.00625 moveto
0.70408 0.00625 lineto
stroke
0 setgray
[(25)] 0.70408 -0.0125 0 1 Mshowa
0.84014 -0.00625 moveto
0.84014 0.00625 lineto
stroke
0 setgray
[(30)] 0.84014 -0.0125 0 1 Mshowa
0.97619 -0.00625 moveto
0.97619 0.00625 lineto
stroke
0 setgray
[(35)] 0.97619 -0.0125 0 1 Mshowa
0.02381 0 moveto
0.02381 0.61803 lineto
stroke
0.01756 0.12361 moveto
0.03006 0.12361 lineto
stroke
0 setgray
[(0.05)] 0.01131 0.12361 1 0 Mshowa
0.01756 0.24721 moveto
0.03006 0.24721 lineto
stroke
0 setgray
[(0.1)] 0.01131 0.24721 1 0 Mshowa
0.01756 0.37082 moveto
0.03006 0.37082 lineto
stroke
0 setgray
[(0.15)] 0.01131 0.37082 1 0 Mshowa
0.01756 0.49443 moveto
0.03006 0.49443 lineto
stroke
0 setgray
[(0.2)] 0.01131 0.49443 1 0 Mshowa
0.01756 0.61803 moveto
0.03006 0.61803 lineto
stroke
0 setgray
[(0.25)] 0.01131 0.61803 1 0 Mshowa

% legend & axes labels
[(\(a\))] 0.7 0.53125 0 -1 Mshowa
[(x)] 0.99 0.006 0 -1 Mshowa
[(p\(x\))] 0.085 0.59 0 -1 Mshowa

[(Unadapted)] 0.755 0.43125 0 -1 Mshowa
[(Adapted)] 0.742 0.38125 0 -1 Mshowa
gsave
0.0 setgray
0.005 setlinewidth
0.53 0.444 moveto
0.66 0.444 lineto
stroke
0.25 setgray
0.53 0.394 moveto
0.66 0.394 lineto
stroke
grestore


grestore
grestore
0 0 moveto
1 0 lineto
1 0.618034 lineto
0 0.618034 lineto
closepath
clip
newpath
0 setgray
gsave
gsave
gsave
gsave
gsave
0.004 setlinewidth
0.02381 0.00073 moveto
0.02877 0.00098 lineto
0.03373 0.0013 lineto
0.03869 0.00171 lineto
0.04365 0.00223 lineto
0.04861 0.0029 lineto
0.05357 0.00374 lineto
0.05853 0.0048 lineto
0.06349 0.00611 lineto
0.07341 0.00971 lineto
0.07837 0.01213 lineto
0.08333 0.01504 lineto
0.09325 0.02267 lineto
0.10317 0.03329 lineto
0.1131 0.04759 lineto
0.12302 0.06624 lineto
0.14286 0.11852 lineto
0.1627 0.19068 lineto
0.18254 0.27582 lineto
0.20238 0.35872 lineto
0.2123 0.3931 lineto
0.21726 0.40743 lineto
0.22222 0.41948 lineto
0.22718 0.42902 lineto
0.22966 0.4328 lineto
0.23214 0.43588 lineto
0.23462 0.43825 lineto
0.23586 0.43917 lineto
0.2371 0.43991 lineto
0.23834 0.44047 lineto
0.23958 0.44084 lineto
0.24082 0.44103 lineto
0.24206 0.44104 lineto
0.2433 0.44087 lineto
0.24454 0.44051 lineto
0.24578 0.43997 lineto
0.24702 0.43924 lineto
0.2495 0.43726 lineto
0.25198 0.43456 lineto
0.25694 0.42707 lineto
0.2619 0.41693 lineto
0.27183 0.38953 lineto
0.28175 0.35439 lineto
0.30159 0.27083 lineto
0.32143 0.1861 lineto
0.34127 0.11498 lineto
0.36111 0.06387 lineto
0.37103 0.04574 lineto
0.38095 0.0319 lineto
0.39087 0.02166 lineto
Mistroke
0.39583 0.01768 lineto
0.40079 0.01433 lineto
0.40575 0.01153 lineto
0.41071 0.00922 lineto
0.41567 0.00733 lineto
0.42063 0.00578 lineto
0.43056 0.00353 lineto
0.43552 0.00273 lineto
0.44048 0.0021 lineto
0.44544 0.0016 lineto
0.4504 0.00122 lineto
0.45536 0.00092 lineto
0.46032 0.00069 lineto
0.46528 0.00051 lineto
0.47024 0.00038 lineto
0.4752 0.00028 lineto
0.48016 0.0002 lineto
0.48512 0.00015 lineto
0.49008 0.0001 lineto
0.49504 7e-05 lineto
0.5 5e-05 lineto
0.50496 4e-05 lineto
0.50992 3e-05 lineto
0.51488 2e-05 lineto
0.51984 1e-05 lineto
0.52232 1e-05 lineto
0.5248 1e-05 lineto
0.52728 1e-05 lineto
0.52976 1e-05 lineto
0.53472 0 lineto
0.5372 0 lineto
0.53968 0 lineto
0.54216 0 lineto
0.54464 0 lineto
0.5496 0 lineto
0.55208 0 lineto
0.55456 0 lineto
0.55704 0 lineto
0.55952 0 lineto
0.56448 0 lineto
0.56696 0 lineto
0.56944 0 lineto
0.57192 0 lineto
0.5744 0 lineto
0.57937 0 lineto
0.58185 0 lineto
0.58433 0 lineto
0.58681 0 lineto
0.58929 0 lineto
0.59425 0 lineto
Mistroke
0.59673 0 lineto
0.59921 0 lineto
0.60169 0 lineto
0.60417 0 lineto
0.60665 0 lineto
0.60913 0 lineto
0.61161 0 lineto
0.61409 0 lineto
0.61657 0 lineto
0.61905 0 lineto
0.62153 0 lineto
0.62401 0 lineto
0.62649 0 lineto
0.62897 0 lineto
0.63145 0 lineto
0.63393 0 lineto
0.63641 0 lineto
0.63889 0 lineto
0.64137 0 lineto
0.64385 0 lineto
0.64633 0 lineto
0.64881 0 lineto
0.65129 0 lineto
0.65377 0 lineto
0.65625 0 lineto
0.65873 0 lineto
0.66121 0 lineto
0.66369 0 lineto
0.66617 0 lineto
0.66865 0 lineto
0.67113 0 lineto
0.67361 0 lineto
0.67609 0 lineto
0.67857 0 lineto
0.68105 0 lineto
0.68353 0 lineto
0.68601 0 lineto
0.68849 0 lineto
0.69097 0 lineto
0.69345 0 lineto
0.69593 0 lineto
0.69841 0 lineto
0.70089 0 lineto
0.70337 0 lineto
0.70585 0 lineto
0.70833 0 lineto
0.71081 0 lineto
0.71329 0 lineto
0.71577 0 lineto
0.71825 0 lineto
Mistroke
0.72073 0 lineto
0.72321 0 lineto
0.72569 0 lineto
0.72817 0 lineto
0.73065 0 lineto
0.73313 0 lineto
0.73562 0 lineto
0.7381 0 lineto
0.74058 0 lineto
0.74306 0 lineto
0.74554 0 lineto
0.74802 0 lineto
0.7505 0 lineto
0.75298 0 lineto
0.75546 0 lineto
0.75794 0 lineto
0.76042 0 lineto
0.7629 0 lineto
0.76538 0 lineto
0.76786 0 lineto
0.77034 0 lineto
0.77282 0 lineto
0.77406 0 lineto
0.7753 0 lineto
0.77654 0 lineto
0.77778 0 lineto
0.78026 0 lineto
0.7815 0 lineto
0.78274 0 lineto
0.78398 0 lineto
0.78522 0 lineto
0.7877 0 lineto
0.78894 0 lineto
0.79018 0 lineto
0.79142 0 lineto
0.79266 0 lineto
0.79514 0 lineto
0.79638 0 lineto
0.79762 0 lineto
0.79886 0 lineto
0.8001 0 lineto
0.80258 0 lineto
0.80382 0 lineto
0.80506 0 lineto
0.8063 0 lineto
0.80754 0 lineto
0.81002 0 lineto
0.81126 0 lineto
0.8125 0 lineto
0.81374 0 lineto
Mistroke
0.81498 0 lineto
0.81746 0 lineto
0.8187 0 lineto
0.81994 0 lineto
0.82118 0 lineto
0.82242 0 lineto
0.8249 0 lineto
0.82614 0 lineto
0.82738 0 lineto
0.82862 0 lineto
0.82986 0 lineto
0.83234 0 lineto
0.83358 0 lineto
0.83482 0 lineto
0.83606 0 lineto
0.8373 0 lineto
0.83978 0 lineto
0.84102 0 lineto
0.84226 0 lineto
0.8435 0 lineto
0.84474 0 lineto
0.84722 0 lineto
0.84846 0 lineto
0.8497 0 lineto
0.85094 0 lineto
0.85218 0 lineto
0.85466 0 lineto
0.8559 0 lineto
0.85714 0 lineto
0.85838 0 lineto
0.85962 0 lineto
0.8621 0 lineto
0.86334 0 lineto
0.86458 0 lineto
0.86582 0 lineto
0.86706 0 lineto
0.86954 0 lineto
0.87078 0 lineto
0.87202 0 lineto
0.87326 0 lineto
0.8745 0 lineto
0.87574 0 lineto
0.87698 0 lineto
0.87822 0 lineto
0.87946 0 lineto
0.88194 0 lineto
0.88318 0 lineto
0.88442 0 lineto
0.88566 0 lineto
0.8869 0 lineto
Mistroke
0.88938 0 lineto
0.89062 0 lineto
0.89187 0 lineto
0.89311 0 lineto
0.89435 0 lineto
0.89683 0 lineto
0.89807 0 lineto
0.89931 0 lineto
0.90055 0 lineto
0.90179 0 lineto
0.90427 0 lineto
0.90551 0 lineto
0.90675 0 lineto
0.90799 0 lineto
0.90923 0 lineto
0.91171 0 lineto
0.91295 0 lineto
0.91419 0 lineto
0.91543 0 lineto
0.91667 0 lineto
0.91915 0 lineto
0.92039 0 lineto
0.92163 0 lineto
0.92287 0 lineto
0.92411 0 lineto
0.92659 0 lineto
0.92783 0 lineto
0.92907 0 lineto
0.93031 0 lineto
0.93155 0 lineto
0.93403 0 lineto
0.93527 0 lineto
0.93651 0 lineto
0.97619 0 lineto
Mfstroke
grestore
grestore
gsave
gsave
0.004 setlinewidth
0.02381 8e-05 moveto
0.02877 0.0001 lineto
0.03373 0.00012 lineto
0.04365 0.00019 lineto
0.04861 0.00023 lineto
0.05357 0.00028 lineto
0.05853 0.00033 lineto
0.06349 0.00041 lineto
0.07341 0.00059 lineto
0.08333 0.00085 lineto
0.09325 0.00121 lineto
0.10317 0.0017 lineto
0.1131 0.00237 lineto
0.12302 0.00327 lineto
0.13294 0.00445 lineto
0.14286 0.006 lineto
0.15278 0.00799 lineto
0.1627 0.01053 lineto
0.17262 0.01372 lineto
0.18254 0.01768 lineto
0.19246 0.02254 lineto
0.20238 0.02841 lineto
0.22222 0.04366 lineto
0.24206 0.06419 lineto
0.2619 0.09029 lineto
0.30159 0.1564 lineto
0.32143 0.19261 lineto
0.34127 0.22692 lineto
0.36111 0.25576 lineto
0.37103 0.26705 lineto
0.37599 0.27175 lineto
0.38095 0.27576 lineto
0.38591 0.27907 lineto
0.39087 0.28163 lineto
0.39335 0.28263 lineto
0.39583 0.28343 lineto
0.39831 0.28404 lineto
0.39955 0.28427 lineto
0.40079 0.28445 lineto
0.40203 0.28458 lineto
0.40327 0.28467 lineto
0.40451 0.2847 lineto
0.40575 0.28469 lineto
0.40699 0.28462 lineto
0.40823 0.28451 lineto
0.40947 0.28435 lineto
0.41071 0.28414 lineto
0.41319 0.28357 lineto
0.41567 0.2828 lineto
0.42063 0.28069 lineto
Mistroke
0.4256 0.27783 lineto
0.43056 0.27424 lineto
0.44048 0.26498 lineto
0.46032 0.23931 lineto
0.5 0.17089 lineto
0.53968 0.10221 lineto
0.55952 0.07397 lineto
0.57937 0.05121 lineto
0.59921 0.03391 lineto
0.60913 0.02714 lineto
0.61905 0.02149 lineto
0.63889 0.01302 lineto
0.64881 0.00997 lineto
0.65873 0.00755 lineto
0.66865 0.00566 lineto
0.67857 0.00419 lineto
0.68849 0.00307 lineto
0.69841 0.00222 lineto
0.70833 0.00159 lineto
0.71825 0.00113 lineto
0.72817 0.00079 lineto
0.7381 0.00055 lineto
0.74306 0.00045 lineto
0.74802 0.00038 lineto
0.75794 0.00025 lineto
0.7629 0.00021 lineto
0.76786 0.00017 lineto
0.77282 0.00014 lineto
0.77778 0.00011 lineto
0.7877 7e-05 lineto
0.79266 6e-05 lineto
0.79762 5e-05 lineto
0.80258 4e-05 lineto
0.80754 3e-05 lineto
0.81746 2e-05 lineto
0.82242 2e-05 lineto
0.82738 1e-05 lineto
0.83234 1e-05 lineto
0.8373 1e-05 lineto
0.84226 1e-05 lineto
0.84722 0 lineto
0.85218 0 lineto
0.85714 0 lineto
0.8621 0 lineto
0.86706 0 lineto
0.87202 0 lineto
0.87698 0 lineto
0.88194 0 lineto
0.8869 0 lineto
0.89187 0 lineto
Mistroke
0.89683 0 lineto
0.90179 0 lineto
0.90675 0 lineto
0.91171 0 lineto
0.91667 0 lineto
0.92163 0 lineto
0.92659 0 lineto
0.93155 0 lineto
0.93651 0 lineto
0.94147 0 lineto
0.94643 0 lineto
0.95139 0 lineto
0.95635 0 lineto
0.96131 0 lineto
0.96627 0 lineto
0.97123 0 lineto
0.97619 0 lineto
Mfstroke
grestore
grestore
gsave
gsave
0.004 setlinewidth
0.02381 0 moveto
0.02629 0 lineto
0.02877 0 lineto
0.03125 0 lineto
0.03373 0 lineto
0.03621 0 lineto
0.03869 0 lineto
0.04117 0 lineto
0.04365 0 lineto
0.04613 0 lineto
0.04861 0 lineto
0.05109 0 lineto
0.05357 0 lineto
0.05853 0 lineto
0.06101 0 lineto
0.06349 0 lineto
0.06597 0 lineto
0.06845 0 lineto
0.07093 0 lineto
0.07341 0 lineto
0.07837 0 lineto
0.08085 0 lineto
0.08333 0 lineto
0.08581 0 lineto
0.08829 0 lineto
0.09325 0 lineto
0.09573 0 lineto
0.09821 0 lineto
0.10069 0 lineto
0.10317 0 lineto
0.10813 0 lineto
0.11062 0 lineto
0.1131 0 lineto
0.11558 0 lineto
0.11806 0 lineto
0.12054 0 lineto
0.12302 0 lineto
0.1255 0 lineto
0.12798 0 lineto
0.13294 0 lineto
0.13542 0 lineto
0.1379 0 lineto
0.14038 0 lineto
0.14286 0 lineto
0.14782 0 lineto
0.1503 0 lineto
0.15278 0 lineto
0.15526 0 lineto
0.15774 0 lineto
0.1627 0 lineto
Mistroke
0.16518 0 lineto
0.16766 0 lineto
0.17014 0 lineto
0.17262 0 lineto
0.17758 0 lineto
0.18006 0 lineto
0.18254 0 lineto
0.18502 0 lineto
0.1875 0 lineto
0.19246 0 lineto
0.19742 0 lineto
0.20238 0 lineto
0.20734 0 lineto
0.2123 0 lineto
0.21726 0 lineto
0.22222 0 lineto
0.22718 0 lineto
0.23214 0 lineto
0.2371 0 lineto
0.24206 0 lineto
0.24702 0 lineto
0.25198 0 lineto
0.25694 0 lineto
0.2619 0 lineto
0.26687 0 lineto
0.27183 0 lineto
0.27679 0 lineto
0.28175 0 lineto
0.28671 0 lineto
0.29167 0 lineto
0.29663 1e-05 lineto
0.30159 1e-05 lineto
0.30655 1e-05 lineto
0.31151 1e-05 lineto
0.31647 2e-05 lineto
0.32143 3e-05 lineto
0.32639 3e-05 lineto
0.33135 4e-05 lineto
0.33631 5e-05 lineto
0.34127 7e-05 lineto
0.34623 9e-05 lineto
0.35119 0.00011 lineto
0.36111 0.00019 lineto
0.36607 0.00023 lineto
0.37103 0.00029 lineto
0.37599 0.00037 lineto
0.38095 0.00046 lineto
0.39087 0.00071 lineto
0.39583 0.00088 lineto
0.40079 0.00108 lineto
Mistroke
0.40575 0.00132 lineto
0.41071 0.00162 lineto
0.42063 0.00238 lineto
0.43056 0.00347 lineto
0.44048 0.00496 lineto
0.4504 0.00701 lineto
0.46032 0.00974 lineto
0.47024 0.01335 lineto
0.48016 0.01803 lineto
0.49008 0.02398 lineto
0.5 0.03144 lineto
0.51984 0.05168 lineto
0.53968 0.08009 lineto
0.55952 0.11699 lineto
0.57937 0.16109 lineto
0.59921 0.20908 lineto
0.61905 0.25581 lineto
0.63889 0.29502 lineto
0.64881 0.30989 lineto
0.65377 0.31584 lineto
0.65873 0.32073 lineto
0.66121 0.32275 lineto
0.66369 0.32449 lineto
0.66617 0.32593 lineto
0.66865 0.32708 lineto
0.66989 0.32755 lineto
0.67113 0.32793 lineto
0.67237 0.32825 lineto
0.67361 0.32848 lineto
0.67485 0.32865 lineto
0.67609 0.32873 lineto
0.67733 0.32874 lineto
0.67857 0.32868 lineto
0.67981 0.32853 lineto
0.68105 0.32832 lineto
0.68353 0.32765 lineto
0.68477 0.32721 lineto
0.68601 0.32669 lineto
0.68849 0.32543 lineto
0.69345 0.32203 lineto
0.69841 0.3175 lineto
0.70833 0.30521 lineto
0.71825 0.28911 lineto
0.7381 0.24815 lineto
0.77778 0.15313 lineto
0.79762 0.11009 lineto
0.81746 0.07461 lineto
0.82738 0.06007 lineto
0.8373 0.04766 lineto
0.84722 0.03726 lineto
Mistroke
0.85714 0.0287 lineto
0.86706 0.02178 lineto
0.87698 0.01629 lineto
0.8869 0.01201 lineto
0.89683 0.00872 lineto
0.90675 0.00624 lineto
0.91667 0.0044 lineto
0.92659 0.00305 lineto
0.93651 0.00209 lineto
0.94147 0.00172 lineto
0.94643 0.00141 lineto
0.95635 0.00094 lineto
0.96131 0.00076 lineto
0.96627 0.00061 lineto
0.97619 0.0004 lineto
Mfstroke
grestore
grestore
grestore
grestore
gsave
gsave
gsave
gsave
0.25 setgray
0.004 setlinewidth
0.02381 0.00328 moveto
0.02877 0.00423 lineto
0.03373 0.0054 lineto
0.04365 0.00864 lineto
0.04861 0.01083 lineto
0.05357 0.01347 lineto
0.06349 0.02045 lineto
0.07341 0.03023 lineto
0.08333 0.04352 lineto
0.09325 0.06099 lineto
0.10317 0.08325 lineto
0.12302 0.14318 lineto
0.14286 0.22143 lineto
0.1627 0.3079 lineto
0.17262 0.34887 lineto
0.18254 0.38493 lineto
0.19246 0.41358 lineto
0.19742 0.42444 lineto
0.1999 0.4289 lineto
0.20238 0.4327 lineto
0.20486 0.4358 lineto
0.20734 0.4382 lineto
0.20858 0.43913 lineto
0.20982 0.43987 lineto
0.21106 0.44044 lineto
0.2123 0.44083 lineto
0.21354 0.44103 lineto
0.21478 0.44105 lineto
0.21602 0.44088 lineto
0.21726 0.44053 lineto
0.2185 0.44 lineto
0.21974 0.43929 lineto
0.22222 0.43732 lineto
0.2247 0.43464 lineto
0.22718 0.43126 lineto
0.23214 0.42247 lineto
0.2371 0.41111 lineto
0.24206 0.39741 lineto
0.2619 0.32471 lineto
0.30159 0.15757 lineto
0.31151 0.12305 lineto
0.32143 0.09358 lineto
0.33135 0.0693 lineto
0.34127 0.04997 lineto
0.35119 0.03509 lineto
0.36111 0.02399 lineto
0.36607 0.01964 lineto
0.37103 0.01597 lineto
0.37599 0.0129 lineto
0.38095 0.01036 lineto
Mistroke
0.39087 0.00654 lineto
0.39583 0.00514 lineto
0.40079 0.00402 lineto
0.40575 0.00312 lineto
0.41071 0.00241 lineto
0.41567 0.00184 lineto
0.42063 0.0014 lineto
0.4256 0.00106 lineto
0.43056 0.0008 lineto
0.43552 0.00059 lineto
0.44048 0.00044 lineto
0.44544 0.00032 lineto
0.4504 0.00024 lineto
0.45536 0.00017 lineto
0.46032 0.00012 lineto
0.46528 9e-05 lineto
0.47024 6e-05 lineto
0.4752 4e-05 lineto
0.48016 3e-05 lineto
0.48512 2e-05 lineto
0.49008 2e-05 lineto
0.49256 1e-05 lineto
0.49504 1e-05 lineto
0.49752 1e-05 lineto
0.5 1e-05 lineto
0.50496 0 lineto
0.50744 0 lineto
0.50992 0 lineto
0.5124 0 lineto
0.51488 0 lineto
0.51984 0 lineto
0.52232 0 lineto
0.5248 0 lineto
0.52728 0 lineto
0.52976 0 lineto
0.53472 0 lineto
0.5372 0 lineto
0.53968 0 lineto
0.54216 0 lineto
0.54464 0 lineto
0.5496 0 lineto
0.55208 0 lineto
0.55456 0 lineto
0.55704 0 lineto
0.55952 0 lineto
0.56448 0 lineto
0.56696 0 lineto
0.56944 0 lineto
0.57192 0 lineto
0.5744 0 lineto
Mistroke
0.57688 0 lineto
0.57937 0 lineto
0.58185 0 lineto
0.58433 0 lineto
0.58681 0 lineto
0.58929 0 lineto
0.59177 0 lineto
0.59425 0 lineto
0.59673 0 lineto
0.59921 0 lineto
0.60169 0 lineto
0.60417 0 lineto
0.60665 0 lineto
0.60913 0 lineto
0.61161 0 lineto
0.61409 0 lineto
0.61657 0 lineto
0.61905 0 lineto
0.62153 0 lineto
0.62401 0 lineto
0.62649 0 lineto
0.62897 0 lineto
0.63145 0 lineto
0.63393 0 lineto
0.63641 0 lineto
0.63889 0 lineto
0.64137 0 lineto
0.64385 0 lineto
0.64633 0 lineto
0.64881 0 lineto
0.65129 0 lineto
0.65377 0 lineto
0.65625 0 lineto
0.65873 0 lineto
0.66121 0 lineto
0.66369 0 lineto
0.66617 0 lineto
0.66865 0 lineto
0.67113 0 lineto
0.67361 0 lineto
0.67609 0 lineto
0.67857 0 lineto
0.68105 0 lineto
0.68353 0 lineto
0.68601 0 lineto
0.68849 0 lineto
0.69097 0 lineto
0.69345 0 lineto
0.69593 0 lineto
0.69841 0 lineto
Mistroke
0.70089 0 lineto
0.70337 0 lineto
0.70585 0 lineto
0.70833 0 lineto
0.71081 0 lineto
0.71329 0 lineto
0.71577 0 lineto
0.71825 0 lineto
0.72073 0 lineto
0.72321 0 lineto
0.72569 0 lineto
0.72817 0 lineto
0.73065 0 lineto
0.73313 0 lineto
0.73562 0 lineto
0.7381 0 lineto
0.74058 0 lineto
0.74306 0 lineto
0.7443 0 lineto
0.74554 0 lineto
0.74678 0 lineto
0.74802 0 lineto
0.7505 0 lineto
0.75174 0 lineto
0.75298 0 lineto
0.75422 0 lineto
0.75546 0 lineto
0.75794 0 lineto
0.75918 0 lineto
0.76042 0 lineto
0.76166 0 lineto
0.7629 0 lineto
0.76538 0 lineto
0.76662 0 lineto
0.76786 0 lineto
0.7691 0 lineto
0.77034 0 lineto
0.77282 0 lineto
0.77406 0 lineto
0.7753 0 lineto
0.77654 0 lineto
0.77778 0 lineto
0.78026 0 lineto
0.7815 0 lineto
0.78274 0 lineto
0.78398 0 lineto
0.78522 0 lineto
0.7877 0 lineto
0.78894 0 lineto
0.79018 0 lineto
Mistroke
0.79142 0 lineto
0.79266 0 lineto
0.79514 0 lineto
0.79638 0 lineto
0.79762 0 lineto
0.79886 0 lineto
0.8001 0 lineto
0.80258 0 lineto
0.80382 0 lineto
0.80506 0 lineto
0.8063 0 lineto
0.80754 0 lineto
0.81002 0 lineto
0.81126 0 lineto
0.8125 0 lineto
0.81374 0 lineto
0.81498 0 lineto
0.81746 0 lineto
0.8187 0 lineto
0.81994 0 lineto
0.82118 0 lineto
0.82242 0 lineto
0.8249 0 lineto
0.82614 0 lineto
0.82738 0 lineto
0.82862 0 lineto
0.82986 0 lineto
0.83234 0 lineto
0.83358 0 lineto
0.83482 0 lineto
0.83606 0 lineto
0.8373 0 lineto
0.83978 0 lineto
0.84102 0 lineto
0.84226 0 lineto
0.8435 0 lineto
0.84474 0 lineto
0.84722 0 lineto
0.84846 0 lineto
0.8497 0 lineto
0.85094 0 lineto
0.85218 0 lineto
0.85466 0 lineto
0.8559 0 lineto
0.85714 0 lineto
0.85838 0 lineto
0.85962 0 lineto
0.8621 0 lineto
0.86334 0 lineto
0.86458 0 lineto
Mistroke
0.86582 0 lineto
0.86706 0 lineto
0.86954 0 lineto
0.87078 0 lineto
0.87202 0 lineto
0.87326 0 lineto
0.8745 0 lineto
0.87574 0 lineto
0.87698 0 lineto
0.87822 0 lineto
0.87946 0 lineto
0.88194 0 lineto
0.88318 0 lineto
0.88442 0 lineto
0.88566 0 lineto
0.8869 0 lineto
0.88938 0 lineto
0.89062 0 lineto
0.89187 0 lineto
0.89311 0 lineto
0.89435 0 lineto
0.89683 0 lineto
0.89807 0 lineto
0.89931 0 lineto
0.90055 0 lineto
0.90179 0 lineto
0.90427 0 lineto
0.90551 0 lineto
0.90675 0 lineto
0.90799 0 lineto
0.90923 0 lineto
0.91047 0 lineto
0.91171 0 lineto
0.91295 0 lineto
0.91419 0 lineto
0.91543 0 lineto
0.91667 0 lineto
0.91791 0 lineto
0.91915 0 lineto
0.92039 0 lineto
0.92163 0 lineto
0.92287 0 lineto
0.92411 0 lineto
0.92535 0 lineto
0.92659 0 lineto
0.92783 0 lineto
0.92907 0 lineto
0.93031 0 lineto
0.93155 0 lineto
0.93279 0 lineto
Mistroke
0.93403 0 lineto
0.93527 0 lineto
0.93651 0 lineto
0.97619 0 lineto
Mfstroke
grestore
grestore
gsave
gsave
0.25 setgray
0.004 setlinewidth
0.02381 2e-05 moveto
0.02877 3e-05 lineto
0.03373 4e-05 lineto
0.04365 6e-05 lineto
0.04861 7e-05 lineto
0.05357 9e-05 lineto
0.05853 0.00011 lineto
0.06349 0.00014 lineto
0.07341 0.00021 lineto
0.07837 0.00025 lineto
0.08333 0.0003 lineto
0.09325 0.00045 lineto
0.10317 0.00065 lineto
0.1131 0.00093 lineto
0.12302 0.00132 lineto
0.13294 0.00186 lineto
0.14286 0.00258 lineto
0.15278 0.00354 lineto
0.1627 0.00481 lineto
0.17262 0.00646 lineto
0.18254 0.00859 lineto
0.19246 0.01128 lineto
0.20238 0.01466 lineto
0.2123 0.01884 lineto
0.22222 0.02394 lineto
0.24206 0.03741 lineto
0.2619 0.05592 lineto
0.28175 0.07995 lineto
0.30159 0.10937 lineto
0.34127 0.1792 lineto
0.36111 0.21462 lineto
0.38095 0.24591 lineto
0.39087 0.25889 lineto
0.40079 0.26955 lineto
0.40575 0.2739 lineto
0.41071 0.27755 lineto
0.41567 0.28048 lineto
0.41815 0.28166 lineto
0.42063 0.28265 lineto
0.42312 0.28345 lineto
0.42436 0.28377 lineto
0.4256 0.28405 lineto
0.42684 0.28428 lineto
0.42808 0.28446 lineto
0.42932 0.28459 lineto
0.43056 0.28467 lineto
0.4318 0.2847 lineto
0.43304 0.28468 lineto
0.43428 0.28462 lineto
0.43552 0.2845 lineto
Mistroke
0.438 0.28412 lineto
0.43924 0.28386 lineto
0.44048 0.28355 lineto
0.44544 0.28181 lineto
0.44792 0.28066 lineto
0.4504 0.27932 lineto
0.46032 0.27212 lineto
0.47024 0.26218 lineto
0.48016 0.24983 lineto
0.5 0.21943 lineto
0.53968 0.1482 lineto
0.57937 0.08384 lineto
0.59921 0.05901 lineto
0.61905 0.03973 lineto
0.63889 0.02559 lineto
0.64881 0.0202 lineto
0.65873 0.01577 lineto
0.66865 0.01217 lineto
0.67857 0.00929 lineto
0.68849 0.00702 lineto
0.69841 0.00524 lineto
0.70833 0.00387 lineto
0.71825 0.00283 lineto
0.72817 0.00204 lineto
0.7381 0.00146 lineto
0.74802 0.00103 lineto
0.75794 0.00072 lineto
0.76786 0.0005 lineto
0.77282 0.00041 lineto
0.77778 0.00034 lineto
0.7877 0.00023 lineto
0.79266 0.00019 lineto
0.79762 0.00015 lineto
0.80258 0.00013 lineto
0.80754 0.0001 lineto
0.81746 7e-05 lineto
0.82242 5e-05 lineto
0.82738 4e-05 lineto
0.83234 3e-05 lineto
0.8373 3e-05 lineto
0.84722 2e-05 lineto
0.85218 1e-05 lineto
0.85714 1e-05 lineto
0.8621 1e-05 lineto
0.86706 1e-05 lineto
0.87202 1e-05 lineto
0.87698 0 lineto
0.88194 0 lineto
0.8869 0 lineto
0.89187 0 lineto
Mistroke
0.89683 0 lineto
0.90179 0 lineto
0.90675 0 lineto
0.91171 0 lineto
0.91667 0 lineto
0.92163 0 lineto
0.92659 0 lineto
0.93155 0 lineto
0.93651 0 lineto
0.94147 0 lineto
0.94643 0 lineto
0.95139 0 lineto
0.95635 0 lineto
0.96131 0 lineto
0.96627 0 lineto
0.97123 0 lineto
0.97619 0 lineto
Mfstroke
grestore
grestore
gsave
gsave
0.25 setgray
0.004 setlinewidth
0.02381 0 moveto
0.02629 0 lineto
0.02877 0 lineto
0.03373 0 lineto
0.03621 0 lineto
0.03869 0 lineto
0.04117 0 lineto
0.04365 0 lineto
0.04861 0 lineto
0.05109 0 lineto
0.05357 0 lineto
0.05853 0 lineto
0.06101 0 lineto
0.06349 0 lineto
0.06597 0 lineto
0.06845 0 lineto
0.07093 0 lineto
0.07341 0 lineto
0.07837 0 lineto
0.08085 0 lineto
0.08333 0 lineto
0.08581 0 lineto
0.08829 0 lineto
0.09325 0 lineto
0.09573 0 lineto
0.09821 0 lineto
0.10069 0 lineto
0.10317 0 lineto
0.10813 0 lineto
0.11062 0 lineto
0.1131 0 lineto
0.11558 0 lineto
0.11806 0 lineto
0.12054 0 lineto
0.12302 0 lineto
0.1255 0 lineto
0.12798 0 lineto
0.13294 0 lineto
0.13542 0 lineto
0.1379 0 lineto
0.14286 0 lineto
0.14782 0 lineto
0.15278 0 lineto
0.15774 0 lineto
0.1627 0 lineto
0.16766 0 lineto
0.17262 0 lineto
0.17758 0 lineto
0.18254 0 lineto
0.1875 0 lineto
Mistroke
0.19246 0 lineto
0.19742 0 lineto
0.20238 0 lineto
0.20734 0 lineto
0.2123 0 lineto
0.21726 0 lineto
0.22222 0 lineto
0.22718 0 lineto
0.23214 0 lineto
0.2371 0 lineto
0.24206 1e-05 lineto
0.24702 1e-05 lineto
0.25198 1e-05 lineto
0.25694 1e-05 lineto
0.2619 2e-05 lineto
0.26687 2e-05 lineto
0.27183 3e-05 lineto
0.27679 4e-05 lineto
0.28175 5e-05 lineto
0.28671 7e-05 lineto
0.29167 9e-05 lineto
0.30159 0.00015 lineto
0.30655 0.00018 lineto
0.31151 0.00023 lineto
0.31647 0.00029 lineto
0.32143 0.00037 lineto
0.33135 0.00057 lineto
0.33631 0.00071 lineto
0.34127 0.00087 lineto
0.34623 0.00107 lineto
0.35119 0.00132 lineto
0.36111 0.00196 lineto
0.37103 0.00286 lineto
0.38095 0.00413 lineto
0.39087 0.00588 lineto
0.40079 0.00824 lineto
0.41071 0.01138 lineto
0.42063 0.01548 lineto
0.43056 0.02075 lineto
0.44048 0.0274 lineto
0.46032 0.04574 lineto
0.47024 0.0578 lineto
0.48016 0.07196 lineto
0.5 0.10673 lineto
0.53968 0.19663 lineto
0.55952 0.24425 lineto
0.57937 0.28601 lineto
0.58929 0.30271 lineto
0.59425 0.3097 lineto
0.59921 0.31569 lineto
Mistroke
0.60417 0.3206 lineto
0.60913 0.3244 lineto
0.61161 0.32586 lineto
0.61409 0.32703 lineto
0.61657 0.32789 lineto
0.61781 0.32822 lineto
0.61905 0.32846 lineto
0.62029 0.32863 lineto
0.62153 0.32873 lineto
0.62277 0.32874 lineto
0.62401 0.32869 lineto
0.62525 0.32855 lineto
0.62649 0.32834 lineto
0.62773 0.32806 lineto
0.62897 0.3277 lineto
0.63145 0.32675 lineto
0.63393 0.32551 lineto
0.63889 0.32215 lineto
0.64385 0.31764 lineto
0.64881 0.31205 lineto
0.65873 0.29783 lineto
0.67857 0.25955 lineto
0.69841 0.21322 lineto
0.7381 0.12052 lineto
0.75794 0.08293 lineto
0.77778 0.05379 lineto
0.7877 0.04237 lineto
0.79762 0.03288 lineto
0.80754 0.02515 lineto
0.81746 0.01895 lineto
0.82738 0.01407 lineto
0.8373 0.0103 lineto
0.84722 0.00742 lineto
0.85714 0.00527 lineto
0.86706 0.00369 lineto
0.87698 0.00255 lineto
0.88194 0.0021 lineto
0.8869 0.00173 lineto
0.89683 0.00116 lineto
0.90179 0.00094 lineto
0.90675 0.00076 lineto
0.91171 0.00062 lineto
0.91667 0.0005 lineto
0.92659 0.00032 lineto
0.93155 0.00025 lineto
0.93651 0.0002 lineto
0.94147 0.00016 lineto
0.94643 0.00012 lineto
0.95139 0.0001 lineto
0.95635 8e-05 lineto
Mistroke
0.96131 6e-05 lineto
0.96627 5e-05 lineto
0.97123 4e-05 lineto
0.97619 3e-05 lineto
Mfstroke
grestore
grestore
grestore
grestore
grestore
% End of Graphics
MathPictureEnd
%%EPS Trailer
end

%%EndDocument
 GE 540 1000 0 33300 29607 GB 
%%BeginDocument: /usr0/rozzi/Documentation/PhDThesis/Chapter4/AdS1.eps
%!PS-Adobe-2.0 EPSF-1.2
%%BoundingBox: 0 0 400 250
%%Creator: Mathematica
%%Title: Clipboard
%%CreationDate: Never Never
%%EndComments
50 dict begin
/Mnodistort false def
/pageDashArray [4] def
/nullDashArray [] def

% Compute the minimum of two numbers.
/Mmin {         % p q Mmin min(p,q)
        2 copy          % p q p q
        gt              % p q p>q?
        { exch } if     % min(p,q) max(p,q)
        pop             % min(p,q)
} bind def


% Compute the maximum of two numbers.
/Mmax {         % p q Mmax max(p,q)
        2 copy          % p q p q
        lt              % p q p<q?
        { exch } if     % max(p,q) min(p,q)
        pop             % max(p,q)
} bind def

/Mpstart {
    MathPictureStart
} bind def
/Mpend {
    MathPictureEnd
} bind def
/Mscale {
    0 1 0 1
    5 -1 roll
    MathScale
} bind def
/Plain
        /Courier findfont
def
/Bold
        /Courier-Bold findfont
def
/Italic
        /Courier-Oblique findfont
def
/MathPictureStart {
        gsave
        newpath
        /Mtmatrix
        matrix currentmatrix
        def
        Plain
        Mfontsize scalefont
        setfont
0 setgray 0 setlinewidth
} bind def
/MathPictureEnd {
        grestore
} bind def
/Mdot {
        moveto
        0 0 rlineto
        stroke
} def
/Mtetra {
        moveto
        lineto
        lineto
        lineto
        fill
} def
/Metetra {
        moveto
        lineto
        lineto
        lineto
        closepath
        gsave
        fill
        grestore
        0 setgray
        stroke
} def
/Mistroke {
        flattenpath
        0 0 0
        {
        4 2 roll
        pop pop
        }
        {
        4 -1 roll
        2 index
        sub dup mul
        4 -1 roll
        2 index
        sub dup mul
        add sqrt
        4 -1 roll
        add
        3 1 roll
        }
        {
        stop
        }
        {
        stop
        }
        pathforall
        pop pop
        currentpoint
        stroke
        moveto
        currentdash
        3 -1 roll
        add
        setdash
} def
/Mfstroke {
        stroke
        currentdash
        pop 0
        setdash
} def
/Msboxa {
        newpath
        5 -1 roll
        Mvboxa
        pop
        6 -1 roll
        5 -1 roll
        4 -1 roll
        Msboxa1
        5 -3 roll
        Msboxa1
        [
        7 -2 roll
        [ 2 index 2 index
        10 -1 roll
        9 -1 roll
        ]
        6 1 roll
        5 -2 roll
        ]
} bind def
        
/Msboxa1 {
        sub
        2 div
        dup
        2 index
        1 add
        mul
        3 -1 roll
        -1 add
        3 -1 roll
        mul
} bind def
/Mvboxa {
        gsave
        newpath
        [ true
        3 -1 roll
        {
        Mbbox
        5 -1 roll
        {
        0
        5 1 roll
        }
        {
        7 -1 roll
        exch sub
        (m) stringwidth pop
        .3 mul
        sub
        7 1 roll
        6 -1 roll
        4 -1 roll
        Mmin
        3 -1 roll
        5 index
        add
        5 -1 roll
        4 -1 roll
        Mmax
        4 -1 roll
        }
        ifelse
        false
        }
        forall
        { stop } if
        counttomark
        1 add
        4 roll
        ]
        grestore
} bind def
/Mbbox {
        0 0 moveto
        false charpath
        flattenpath
        pathbbox
        newpath
} bind def
/Mmin {
        2 copy
        gt
        { exch } if
        pop
} bind def
/Mmax {
        2 copy
        lt
        { exch } if
        pop
} bind def
/Mshowa {
        4 -2 roll
        moveto
        2 index
        Mtmatrix setmatrix
        Mvboxa
        7 1 roll
        6 -1 roll
        5 -1 roll
        4 -1 roll
        Mshowa1
        4 1 roll
        Mshowa1
        rmoveto
        currentpoint
        0 1
        4 index length
        -1 add
        {
        2 index
        4 index
        2 index
        get
        3 index
        add
        moveto
        4 index
        exch get
        show
        } for
        pop pop pop pop
        Mgmatrix setmatrix
} bind def
/Mshowa1 {
        2 copy
        add
        4 1 roll
        sub
        mul
        sub
        -2 div
} bind def
/MathScale {
        Mwidth
        Mheight
        Mlp
        translate
        scale
        /Mgmatrix
        matrix currentmatrix
        def
        /Msaveaa exch def
        /Msavebb exch def
        /Msavecc exch def
        /Msavedd exch def
} bind def
/Mlp {
        3 copy
        Mlpfirst
        {
        Mnodistort
        {
        Mmin
        dup
        } if
        4 index
        2 index
        2 index
        Mlprun
        11 index
        11 -1 roll
        10 -4 roll
        Mlp1
        8 index
        9 -5 roll
        Mlp1
        4 -1 roll
        and
        { exit } if
        3 -1 roll
        pop pop
        } loop
        exch
        3 1 roll
        7 -3 roll
        pop pop pop
} bind def
/Mlpfirst {
        3 -1 roll
        dup length
        2 copy
        -2 add
        get
        aload
        pop pop pop
        4 -2 roll
        -1 add
        get
        aload
        pop pop pop
        6 -1 roll
        3 -1 roll
        5 -1 roll
        sub
        dup /MsaveAx exch def
        div
        4 1 roll
        exch sub
        dup /MsaveAy exch def
        div
} bind def
/Mlprun {
        2 copy
        4 index
        0 get
        dup
        4 1 roll
        Mlprun1
        3 copy
        8 -2 roll
        9 -1 roll
        {
        3 copy
        Mlprun1
        3 copy
        11 -3 roll
        /gt Mlpminmax
        8 3 roll
        11 -3 roll
        /lt Mlpminmax
        8 3 roll
        } forall
        pop pop pop pop
        3 1 roll
        pop pop
        aload pop
        5 -1 roll
        aload pop
        exch
        6 -1 roll
        Mlprun2
        8 2 roll
        4 -1 roll
        Mlprun2
        6 2 roll
        3 -1 roll
        Mlprun2
        4 2 roll
        exch
        Mlprun2
        6 2 roll
} bind def
/Mlprun1 {
        aload pop
        exch
        6 -1 roll
        5 -1 roll
        mul add
        4 -2 roll
        mul
        3 -1 roll
        add
} bind def
/Mlprun2 {
        2 copy
        add 2 div
        3 1 roll
        exch sub
} bind def
/Mlpminmax {
        cvx
        2 index
        6 index
        2 index
        exec
        {
        7 -3 roll
        4 -1 roll
        } if
        1 index
        5 index
        3 -1 roll
        exec
        {
        4 1 roll
        pop
        5 -1 roll
        aload
        pop pop
        4 -1 roll
        aload pop
        [
        8 -2 roll
        pop
        5 -2 roll
        pop
        6 -2 roll
        pop
        5 -1 roll
        ]
        4 1 roll
        pop
        }
        {
        pop pop pop
        } ifelse
} bind def
/Mlp1 {
        5 index
        3 index sub
        5 index
        2 index mul
        1 index
        le
        1 index
        0 le
        or
        dup
        not
        {
        1 index
        3 index div
        .99999 mul
        8 -1 roll
        pop
        7 1 roll
        }
        if
        8 -1 roll
        2 div
        7 -2 roll
        pop sub
        5 index
        6 -3 roll
        pop pop
        mul sub
        exch
} bind def
/Mfontsize      12 def
/Mleft          0.000000 def
/Mbottom        250.000000 def
/Mwidth         400.000000 def
/Mheight        250.000000 def
/Courier findfont 12 scalefont setfont
%!
%%Creator: Mathematica
%%AspectRatio: 0.61803 
MathPictureStart
% Scaling calculations
0.02381 0.02721 0 6.18034 [
[(5)] 0.15986 -0.0125 0 1 Msboxa
[(10)] 0.29592 -0.0125 0 1 Msboxa
[(15)] 0.43197 -0.0125 0 1 Msboxa
[(20)] 0.56803 -0.0125 0 1 Msboxa
[(25)] 0.70408 -0.0125 0 1 Msboxa
[(30)] 0.84014 -0.0125 0 1 Msboxa
[(35)] 0.97619 -0.0125 0 1 Msboxa
[(0.02)] 0.01131 0.12361 1 0 Msboxa
[(0.04)] 0.01131 0.24721 1 0 Msboxa
[(0.06)] 0.01131 0.37082 1 0 Msboxa
[(0.08)] 0.01131 0.49443 1 0 Msboxa
[(0.1)] 0.01131 0.61803 1 0 Msboxa
[ -0.001 -0.00725 0 0 ]
[ 1.001 0.61903 0 0 ]
] MathScale
% Start of Graphics
1 setlinecap
1 setlinejoin
newpath
%%Object: Graphics
[ ] 0 setdash
0 setgray
gsave
gsave
0.002 setlinewidth
0 0 moveto
1 0 lineto
stroke
0.15986 -0.00625 moveto
0.15986 0.00625 lineto
stroke
0 setgray
[(5)] 0.15986 -0.0125 0 1 Mshowa
0.29592 -0.00625 moveto
0.29592 0.00625 lineto
stroke
0 setgray
[(10)] 0.29592 -0.0125 0 1 Mshowa
0.43197 -0.00625 moveto
0.43197 0.00625 lineto
stroke
0 setgray
[(15)] 0.43197 -0.0125 0 1 Mshowa
0.56803 -0.00625 moveto
0.56803 0.00625 lineto
stroke
0 setgray
[(20)] 0.56803 -0.0125 0 1 Mshowa
0.70408 -0.00625 moveto
0.70408 0.00625 lineto
stroke
0 setgray
[(25)] 0.70408 -0.0125 0 1 Mshowa
0.84014 -0.00625 moveto
0.84014 0.00625 lineto
stroke
0 setgray
[(30)] 0.84014 -0.0125 0 1 Mshowa
0.97619 -0.00625 moveto
0.97619 0.00625 lineto
stroke
0 setgray
[(35)] 0.97619 -0.0125 0 1 Mshowa
0.02381 0 moveto
0.02381 0.61803 lineto
stroke
0.01756 0.12361 moveto
0.03006 0.12361 lineto
stroke
0 setgray
[(0.02)] 0.01131 0.12361 1 0 Mshowa
0.01756 0.24721 moveto
0.03006 0.24721 lineto
stroke
0 setgray
[(0.04)] 0.01131 0.24721 1 0 Mshowa
0.01756 0.37082 moveto
0.03006 0.37082 lineto
stroke
0 setgray
[(0.06)] 0.01131 0.37082 1 0 Mshowa
0.01756 0.49443 moveto
0.03006 0.49443 lineto
stroke
0 setgray
[(0.08)] 0.01131 0.49443 1 0 Mshowa
0.01756 0.61803 moveto
0.03006 0.61803 lineto
stroke
0 setgray
[(0.1)] 0.01131 0.61803 1 0 Mshowa
[(\(b\))] 0.7 0.53125 0 -1 Mshowa
[(x)] 0.99 0.006 0 -1 Mshowa
[(p\(x\))] 0.085 0.59 0 -1 Mshowa
grestore
grestore
0 0 moveto
1 0 lineto
1 0.618034 lineto
0 0.618034 lineto
closepath
clip
newpath
0 setgray
gsave
gsave
gsave
gsave
0.004 setlinewidth
0.02381 0.00035 moveto
0.02877 0.00045 lineto
0.03373 0.00059 lineto
0.03869 0.00077 lineto
0.04365 0.001 lineto
0.04861 0.00129 lineto
0.05357 0.00164 lineto
0.05853 0.00209 lineto
0.06349 0.00265 lineto
0.07341 0.00416 lineto
0.07837 0.00517 lineto
0.08333 0.00638 lineto
0.09325 0.00956 lineto
0.10317 0.01397 lineto
0.1131 0.01992 lineto
0.12302 0.0277 lineto
0.14286 0.04969 lineto
0.1627 0.08072 lineto
0.18254 0.1189 lineto
0.20238 0.15937 lineto
0.22222 0.1955 lineto
0.23214 0.21003 lineto
0.24206 0.22156 lineto
0.24702 0.22614 lineto
0.25198 0.22994 lineto
0.25694 0.233 lineto
0.2619 0.23535 lineto
0.26438 0.23629 lineto
0.26687 0.23707 lineto
0.26935 0.23772 lineto
0.27183 0.23823 lineto
0.27431 0.23862 lineto
0.27555 0.23878 lineto
0.27679 0.23891 lineto
0.27803 0.23902 lineto
0.27927 0.2391 lineto
0.28051 0.23916 lineto
0.28175 0.23921 lineto
0.30159 0.23842 lineto
0.30407 0.23829 lineto
0.30655 0.23817 lineto
0.30779 0.23813 lineto
0.30903 0.23809 lineto
0.31027 0.23806 lineto
0.31151 0.23804 lineto
0.31275 0.23804 lineto
0.31399 0.23804 lineto
0.31523 0.23806 lineto
0.31647 0.23809 lineto
0.31771 0.23814 lineto
Mistroke
0.31895 0.23819 lineto
0.32143 0.23835 lineto
0.32391 0.23857 lineto
0.32639 0.23885 lineto
0.33135 0.23959 lineto
0.33631 0.24056 lineto
0.34127 0.24176 lineto
0.36111 0.24797 lineto
0.37103 0.25119 lineto
0.37599 0.25261 lineto
0.38095 0.25383 lineto
0.38343 0.25435 lineto
0.38591 0.25479 lineto
0.38839 0.25516 lineto
0.39087 0.25544 lineto
0.39211 0.25554 lineto
0.39335 0.25563 lineto
0.39459 0.25569 lineto
0.39583 0.25572 lineto
0.39707 0.25574 lineto
0.39831 0.25572 lineto
0.39955 0.25568 lineto
0.40079 0.25562 lineto
0.40203 0.25552 lineto
0.40327 0.2554 lineto
0.40575 0.25508 lineto
0.40823 0.25465 lineto
0.41071 0.2541 lineto
0.41567 0.25266 lineto
0.42063 0.25076 lineto
0.43056 0.24562 lineto
0.44048 0.23885 lineto
0.46032 0.22183 lineto
0.48016 0.20352 lineto
0.49008 0.19541 lineto
0.49504 0.19189 lineto
0.5 0.18885 lineto
0.50496 0.18635 lineto
0.50744 0.18533 lineto
0.50992 0.18447 lineto
0.5124 0.18379 lineto
0.51364 0.18351 lineto
0.51488 0.18328 lineto
0.51612 0.1831 lineto
0.51736 0.18297 lineto
0.5186 0.18288 lineto
0.51984 0.18284 lineto
0.52108 0.18286 lineto
0.52232 0.18292 lineto
0.52356 0.18304 lineto
Mistroke
0.5248 0.18321 lineto
0.52728 0.18371 lineto
0.52852 0.18404 lineto
0.52976 0.18442 lineto
0.53472 0.18653 lineto
0.5372 0.18792 lineto
0.53968 0.18955 lineto
0.5496 0.1984 lineto
0.55952 0.21096 lineto
0.57937 0.24616 lineto
0.61905 0.33856 lineto
0.63889 0.38017 lineto
0.64881 0.39608 lineto
0.65377 0.40241 lineto
0.65873 0.40752 lineto
0.66121 0.40959 lineto
0.66369 0.41134 lineto
0.66617 0.41274 lineto
0.66865 0.4138 lineto
0.66989 0.4142 lineto
0.67113 0.41451 lineto
0.67237 0.41474 lineto
0.67361 0.41487 lineto
0.67485 0.41492 lineto
0.67609 0.41487 lineto
0.67733 0.41473 lineto
0.67857 0.41451 lineto
0.67981 0.41419 lineto
0.68105 0.41379 lineto
0.68353 0.41271 lineto
0.68601 0.41127 lineto
0.68849 0.40948 lineto
0.69345 0.40483 lineto
0.69841 0.39882 lineto
0.70833 0.38291 lineto
0.71825 0.36237 lineto
0.7381 0.31067 lineto
0.77778 0.19151 lineto
0.79762 0.13766 lineto
0.81746 0.09328 lineto
0.82738 0.0751 lineto
0.8373 0.05958 lineto
0.84722 0.04658 lineto
0.85714 0.03588 lineto
0.86706 0.02723 lineto
0.87698 0.02037 lineto
0.8869 0.01501 lineto
0.89683 0.0109 lineto
0.90675 0.0078 lineto
0.91667 0.0055 lineto
Mistroke
0.92659 0.00382 lineto
0.93651 0.00261 lineto
0.94147 0.00215 lineto
0.94643 0.00176 lineto
0.95635 0.00117 lineto
0.96131 0.00095 lineto
0.96627 0.00077 lineto
0.97619 0.00049 lineto
Mfstroke
grestore
grestore
grestore
gsave
gsave
gsave
0.25 setgray
0.004 setlinewidth
0.02381 0.00125 moveto
0.02877 0.00161 lineto
0.03373 0.00206 lineto
0.04365 0.00329 lineto
0.04861 0.00412 lineto
0.05357 0.00513 lineto
0.06349 0.00779 lineto
0.07341 0.01152 lineto
0.08333 0.01659 lineto
0.09325 0.02326 lineto
0.10317 0.03179 lineto
0.12302 0.05485 lineto
0.14286 0.08529 lineto
0.1627 0.11967 lineto
0.18254 0.15186 lineto
0.19246 0.16496 lineto
0.19742 0.17043 lineto
0.20238 0.17509 lineto
0.20734 0.17889 lineto
0.20982 0.18045 lineto
0.2123 0.1818 lineto
0.21478 0.18291 lineto
0.21726 0.18381 lineto
0.2185 0.18418 lineto
0.21974 0.18449 lineto
0.22098 0.18475 lineto
0.22222 0.18495 lineto
0.22346 0.1851 lineto
0.2247 0.1852 lineto
0.22594 0.18525 lineto
0.22718 0.18525 lineto
0.22842 0.1852 lineto
0.22966 0.1851 lineto
0.2309 0.18495 lineto
0.23214 0.18476 lineto
0.23462 0.18425 lineto
0.2371 0.18357 lineto
0.24206 0.18177 lineto
0.25198 0.17677 lineto
0.2619 0.17072 lineto
0.27183 0.16463 lineto
0.27679 0.16189 lineto
0.28175 0.15948 lineto
0.28671 0.15752 lineto
0.28919 0.15672 lineto
0.29167 0.15607 lineto
0.29415 0.15556 lineto
0.29539 0.15536 lineto
0.29663 0.1552 lineto
0.29787 0.15508 lineto
Mistroke
0.29911 0.155 lineto
0.30035 0.15497 lineto
0.30159 0.15497 lineto
0.30283 0.15502 lineto
0.30407 0.1551 lineto
0.30531 0.15523 lineto
0.30655 0.15541 lineto
0.30903 0.15588 lineto
0.31151 0.15652 lineto
0.31647 0.15832 lineto
0.32143 0.16079 lineto
0.33135 0.16761 lineto
0.34127 0.17663 lineto
0.38095 0.22422 lineto
0.40079 0.24766 lineto
0.42063 0.26719 lineto
0.46032 0.29532 lineto
0.48016 0.30857 lineto
0.5 0.32541 lineto
0.51984 0.34784 lineto
0.53968 0.37546 lineto
0.55952 0.40504 lineto
0.57937 0.43087 lineto
0.58433 0.43595 lineto
0.58929 0.44027 lineto
0.59425 0.44373 lineto
0.59673 0.44511 lineto
0.59921 0.44624 lineto
0.60169 0.44711 lineto
0.60293 0.44745 lineto
0.60417 0.44772 lineto
0.60541 0.44792 lineto
0.60665 0.44805 lineto
0.60789 0.44811 lineto
0.60913 0.4481 lineto
0.61037 0.44801 lineto
0.61161 0.44786 lineto
0.61285 0.44762 lineto
0.61409 0.44732 lineto
0.61657 0.44648 lineto
0.61905 0.44534 lineto
0.62401 0.44213 lineto
0.62897 0.43768 lineto
0.63889 0.42507 lineto
0.64881 0.40773 lineto
0.65873 0.38608 lineto
0.69841 0.27111 lineto
0.7381 0.15193 lineto
0.75794 0.10429 lineto
0.77778 0.06753 lineto
Mistroke
0.7877 0.05316 lineto
0.79762 0.04124 lineto
0.80754 0.03153 lineto
0.81746 0.02375 lineto
0.82738 0.01763 lineto
0.8373 0.01289 lineto
0.84722 0.00929 lineto
0.85714 0.0066 lineto
0.86706 0.00462 lineto
0.87698 0.00318 lineto
0.88194 0.00263 lineto
0.8869 0.00216 lineto
0.89683 0.00145 lineto
0.90179 0.00118 lineto
0.90675 0.00096 lineto
0.91171 0.00077 lineto
0.91667 0.00062 lineto
0.92659 0.0004 lineto
0.93155 0.00032 lineto
0.93651 0.00025 lineto
0.94147 0.0002 lineto
0.94643 0.00016 lineto
0.95139 0.00012 lineto
0.95635 0.0001 lineto
0.96131 7e-05 lineto
0.96627 6e-05 lineto
0.97123 4e-05 lineto
0.97619 3e-05 lineto
Mfstroke
grestore
grestore
grestore
grestore
% End of Graphics
MathPictureEnd
%%EPS Trailer
end

%%EndDocument
 GE /Times-Bold SF
17585 31359 MT
(Figure 4-8:)SH
/Times-Roman SF
23358 XM
(Adapted and unadapted \050a\051 codebooks and \050b\051 state output)SH
23524 32555 MT
(probability density functions for a 3-component example.)SH
9 SS 
37556 35177 MT
(14)SH
11 SS 
13300 35540 MT
(An early version of a semi-continuous form of)37 W
9 SS 
34306 XM
(SPHINX)SH
11 SS 
38768 XM
(was modified to allow ML, EMAP, or)38 W
10800 37279 MT
(LMS-C adaptation of codebook mean vectors after)
194 W( observation of a speaker's 40 adaptation sen-)193 W
/Symbol SF
46898 38619 MT
(-)SH
/Times-Roman SF
10800 39018 MT
(tences. LMS-C)
493 W( and EMAP adaptation use the maximum likelihood reestimate)110 W
/Symbol SF
46898 XM
(m)SH
/Times-Roman SF
47887 XM
(from \0504.19\051 as)110 W
/Times-Bold SF
54753 XM
(a)SH
/Times-Roman SF
55525 XM
(,)SH
8 /Times-Italic AF
55303 39363 MT
(j)SH
38875 40195 MT
(T)SH
11 /Times-Roman AF
10800 40757 MT
(and the weighting terms in the)99 W
/Times-Bold SF
25020 XM
(N)SH
/Times-Roman SF
26188 XM
(matrix are the counts)99 W
/Times-Italic SF
36113 XM
(n)SH
/Times-Roman SF
37035 XM
(=)SH
/Symbol SF
40098 XM
(z)SH
/Times-Roman SF
40863 XM
([)SH
/Times-Italic SF
(j)SH
/Times-Roman SF
(] from \0504.30\051.  Codebook adap-)98 W
15 /Symbol AF
37805 40877 MT
(\345)SH
8 /Times-Italic AF
36663 41102 MT
(j)SH
40641 XM
(t)SH
38875 41119 MT
(t)SH
/Times-Roman SF
(=1)SH
11 SS 
10800 42496 MT
(tation is performed simply by iterating the forward-backward algorithm over the adaptation sen-)222 W
10800 44235 MT
(tences; only the mean)
9 W( vectors are updated after each F-B iteration. Figure 4-8 illustrates the effect this)8 W
10800 45974 MT
(form of adaptation can have on the semi-continuous output densities.)SH
13300 48959 MT
(Evaluations were based on comparisons of word error rates)
202 W( between systems using speaker)203 W
10800 50698 MT
(independent codebooks and adapted codebooks, as shown)
66 W( in Tables 4-1 through 4-4.  The tables list)65 W
10800 52437 MT
(the number of correctly-recognized words,)
SH( the number of insertions or extra words, and the number of)1 W
10800 54176 MT
(reference words or)
34 W( the number actually spoken.  Also listed are the percent correct, which is the ratio)33 W
10800 55915 MT
(of correct to reference words, and the word error rate.  The word error rate penalizes a)
125 W( system for)126 W
10800 57654 MT
(insertions, and so is defined as)SH
/Times-Italic SF
20792 59306 MT
(Reference)SH
/Symbol SF
25338 XM
(-)SH
/Times-Roman SF
26092 XM
(\050)SH
/Times-Italic SF
(Correct)SH
/Symbol SF
30030 XM
(-)SH
/Times-Italic SF
30784 XM
(Insertions)SH
/Times-Roman SF
(\051)SH
14758 50 20792 59747 UL
/Times-Italic SF
15200 59992 MT
(Error)
150 MX(Rate)SH
/Times-Roman SF
20022 XM
(=)SH
/Symbol SF
35700 XM
(\327)SH
/Times-Roman SF
36125 XM
(100%)SH
53143 XM
(\0504.31\051)SH
/Times-Italic SF
25973 60743 MT
(Reference)SH
/Times-Roman SF
13300 63728 MT
(The majority)
15 W( of the recognition errors were for the short function words such as)14 W
/Times-Italic SF
48867 XM
(is, the, if, at, in,)14 W
10800 65467 MT
(on, for)113 W
/Times-Roman SF
14235 XM
(and)SH
/Times-Italic SF
16211 XM
(and)SH
/Times-Roman SF
(. These)
501 W( common words are often unstressed and poorly articulated or merged with)113 W
10800 50 10800 69158 UL
7 SS 
11700 70659 MT
(14)SH
9 SS 
12400 70986 MT
(There are a number of differences between the)195 W
7 SS 
30960 XM
(SPHINX-SC)SH
9 SS 
34995 XM
(system used in the)
195 W( present evaluation and other semi-)194 W
10800 72000 MT
(continuous versions of)SH
7 SS 
19175 XM
(SPHINX)SH
9 SS 
21926 XM
(described in the literature.)SH
ES
%%Page: 91 92
BS
0 SI
10 /Times-Roman AF
54800 4286 MT
(91)SH
11 /Times-Bold AF
16240 8297 MT
(Speaker)SH
22490 XM
(Percent)SH
28514 XM
(Correct)SH
34046 XM
(Insertions)SH
40103 XM
(Reference)SH
47133 XM
(Error)SH
22460 9493 MT
(Correct)SH
47408 XM
(Rate)SH
36468 50 15066 10084 LH BX1
-2884 50 21264 10084 LV BX1
-2884 50 27318 10084 LV BX1
-2884 50 33372 10084 LV BX1
-2884 50 39426 10084 LV BX1
-2884 50 45480 10084 LV BX1
/Times-Roman SF
15465 11199 MT
(bef03m)SH
23008 XM
(94.2%)SH
29795 XM
(213)SH
36399 XM
(0)SH
41903 XM
(236)SH
47499 XM
(5.8%)SH
36468 50 15066 11800 LH BX1
15465 12915 MT
(cmr02f)SH
23008 XM
(95.2%)SH
29795 XM
(220)SH
36399 XM
(8)SH
41903 XM
(231)SH
47499 XM
(8.2%)SH
36468 50 15066 13516 LH BX1
15465 14631 MT
(dms04f)SH
23008 XM
(98.9%)SH
29795 XM
(175)SH
36399 XM
(1)SH
41903 XM
(177)SH
47499 XM
(1.7%)SH
36468 50 15066 15232 LH BX1
15465 16347 MT
(dtb03m)SH
23008 XM
(97.3%)SH
29657 XM
(220)SH
36399 XM
(0)SH
41903 XM
(226)SH
47499 XM
(2.7%)SH
36468 50 15066 16948 LH BX1
15465 18063 MT
(dtd05)SH
23145 XM
(95.3%)SH
29795 XM
(222)SH
36399 XM
(0)SH
41903 XM
(233)SH
47499 XM
(4.7%)SH
36468 50 15066 18664 LH BX1
15465 19779 MT
(ers07m)SH
23008 XM
(95.3%)SH
29795 XM
(202)SH
36399 XM
(0)SH
41903 XM
(212)SH
47499 XM
(4.7%)SH
36468 50 15066 20380 LH BX1
15465 21495 MT
(hxs06)SH
23145 XM
(92.3%)SH
29795 XM
(205)SH
35986 XM
(10)SH
41765 XM
(222)SH
47224 XM
(12.2%)SH
36468 50 15066 22096 LH BX1
15465 23211 MT
(jws04m)SH
23008 XM
(93.7%)SH
29795 XM
(208)SH
36399 XM
(0)SH
41903 XM
(222)SH
47499 XM
(6.3%)SH
36468 50 15066 23812 LH BX1
15465 24927 MT
(pgh01m)SH
23008 XM
(96.1%)SH
29657 XM
(196)SH
36399 XM
(0)SH
41903 XM
(204)SH
47499 XM
(3.9%)SH
36468 50 15066 25528 LH BX1
15465 26643 MT
(rkm05m)SH
23008 XM
(88.5%)SH
29795 XM
(184)SH
36399 XM
(8)SH
41903 XM
(208)SH
47224 XM
(15.4%)SH
36468 50 15066 27244 LH BX1
15465 28359 MT
(tab07)SH
23145 XM
(96.1%)SH
29795 XM
(171)SH
36399 XM
(1)SH
41903 XM
(178)SH
47499 XM
(4.5%)SH
36468 50 15066 28960 LH BX1
15465 30075 MT
(TOTALS)SH
22733 XM
(94.74%)SH
29382 XM
(2216)SH
35986 XM
(28)SH
41490 XM
(2339)SH
47086 XM
(6.46%)SH
36468 23476 50 15066 30676 BX BX1
-20592 50 21264 30676 LV BX1
-20592 50 27318 30676 LV BX1
-20592 50 33372 30676 LV BX1
-20592 50 39426 30676 LV BX1
-20592 50 45480 30676 LV BX1
/Times-Bold SF
17243 32428 MT
(Table 4-1:)SH
/Times-Roman SF
22590 XM
(Summary of)SH
9 SS 
28334 XM
(SPHINX-SC)SH
11 SS 
33259 XM
(results with the speaker-independent)SH
27161 33624 MT
(\050unadapted\051 semi-continuous codebook.)SH
/Times-Bold SF
13213 36460 MT
(Speaker)SH
19463 XM
(Percent)SH
25487 XM
(Correct)SH
31019 XM
(Insertions)SH
37076 XM
(Reference)SH
44106 XM
(Error)SH
49134 XM
(Change in)SH
19433 37656 MT
(Correct)SH
44381 XM
(Rate)SH
48923 XM
(Error Rate)SH
42522 50 12039 38247 LH BX1
-2884 50 18237 38247 LV BX1
-2884 50 24291 38247 LV BX1
-2884 50 30345 38247 LV BX1
-2884 50 36399 38247 LV BX1
-2884 50 42453 38247 LV BX1
-2884 50 48507 38247 LV BX1
/Times-Roman SF
12438 39362 MT
(bef03m)SH
19981 XM
(93.8%)SH
26630 XM
(212)SH
33234 XM
(0)SH
38738 XM
(236)SH
44334 XM
(6.2%)SH
50216 XM
(+6.9%)SH
42522 50 12039 39963 LH BX1
12438 41078 MT
(cmr02f)SH
19981 XM
(95.7%)SH
26630 XM
(221)SH
33234 XM
(6)SH
38738 XM
(231)SH
44334 XM
(6.9%)SH
49930 XM
(-15.9%)SH
42522 50 12039 41679 LH BX1
12438 42794 MT
(dms04f)SH
19981 XM
(99.4%)SH
26630 XM
(176)SH
33234 XM
(1)SH
38738 XM
(177)SH
44334 XM
(1.1%)SH
49930 XM
(-35.3%)SH
42522 50 12039 43395 LH BX1
12438 44510 MT
(dtb03m)SH
19981 XM
(98.7%)SH
26630 XM
(223)SH
33234 XM
(0)SH
38738 XM
(226)SH
44334 XM
(1.3%)SH
49930 XM
(-51.9%)SH
42522 50 12039 45111 LH BX1
12438 46226 MT
(dtd05)SH
19981 XM
(95.3%)SH
26630 XM
(222)SH
33234 XM
(3)SH
38738 XM
(233)SH
44334 XM
(6.0%)SH
49803 XM
(+27.6%)SH
42522 50 12039 46827 LH BX1
12438 47942 MT
(ers07m)SH
19981 XM
(95.8%)SH
26630 XM
(203)SH
33234 XM
(0)SH
38738 XM
(212)SH
44334 XM
(4.2%)SH
49930 XM
(-10.6%)SH
42522 50 12039 48543 LH BX1
12438 49658 MT
(hxs06)SH
19981 XM
(91.0%)SH
26630 XM
(202)SH
32959 XM
(14)SH
38601 XM
(222)SH
44059 XM
(15.3%)SH
49803 XM
(+23.8%)SH
42522 50 12039 50259 LH BX1
12438 51374 MT
(jws04m)SH
19981 XM
(93.7%)SH
26630 XM
(208)SH
33234 XM
(0)SH
38738 XM
(222)SH
44334 XM
(6.3%)SH
50663 XM
(0.0%)SH
42522 50 12039 51975 LH BX1
12438 53090 MT
(pgh01m)SH
19981 XM
(96.1%)SH
26630 XM
(196)SH
33234 XM
(1)SH
38738 XM
(204)SH
44334 XM
(4.4%)SH
49803 XM
(+12.8%)SH
42522 50 12039 53691 LH BX1
12438 54806 MT
(rkm05m)SH
19981 XM
(91.8%)SH
26630 XM
(191)SH
32959 XM
(10)SH
38601 XM
(208)SH
44059 XM
(13.0%)SH
49930 XM
(-15.6%)SH
42522 50 12039 55407 LH BX1
12438 56522 MT
(tab07)SH
19981 XM
(97.2%)SH
26630 XM
(173)SH
33234 XM
(1)SH
38738 XM
(178)SH
44334 XM
(3.4%)SH
49930 XM
(-24.4%)SH
42522 50 12039 57123 LH BX1
12438 58238 MT
(TOTAL)SH
19706 XM
(95.21%)SH
26218 XM
(2227)SH
32822 XM
(36)SH
38326 XM
(2339)SH
44197 XM
(6.33%)SH
51168 XM
(--)SH
42522 50 12039 58839 LH BX1
12438 59954 MT
(CHANGE)SH
19798 XM
(-8.94%)SH
26458 XM
(+11)SH
32924 XM
(+8)SH
39197 XM
(--)SH
43876 XM
(-2.01%)SH
51168 XM
(--)SH
42522 25192 50 12039 60555 BX BX1
-22308 50 18237 60555 LV BX1
-22308 50 24291 60555 LV BX1
-22308 50 30345 60555 LV BX1
-22308 50 36399 60555 LV BX1
-22308 50 42453 60555 LV BX1
-22308 50 48507 60555 LV BX1
/Times-Bold SF
20968 62307 MT
(Table 4-2:)SH
/Times-Roman SF
26315 XM
(Summary of)SH
9 SS 
32059 XM
(SPHINX-SC)SH
11 SS 
36984 XM
(results with the ML)SH
28077 63503 MT
(adapted semi-continuous codebook.)SH
10800 65454 MT
(other words in a sentence.  Although significant reductions in error rate were observed for some)186 W
10800 67193 MT
(speakers, the aggregate results were much)
70 W( lower, on the order of 2 to 4 percent.  Standard statistical)71 W
10800 68932 MT
(analysis [Gillick89] of the experiments reported in Tables 4-1 through 4-4 showed that while the)177 W
10800 70671 MT
(recognition scores for the speakers)
118 W( after adaptation were significantly different from the error rates)119 W
ES
%%Page: 92 93
BS
0 SI
10 /Times-Roman AF
54800 4286 MT
(92)SH
11 /Times-Bold AF
13213 8297 MT
(Speaker)SH
19463 XM
(Percent)SH
25487 XM
(Correct)SH
31019 XM
(Insertions)SH
37076 XM
(Reference)SH
44106 XM
(Error)SH
49134 XM
(Change in)SH
19433 9493 MT
(Correct)SH
44381 XM
(Rate)SH
48923 XM
(Error Rate)SH
42522 50 12039 10084 LH BX1
-2884 50 18237 10084 LV BX1
-2884 50 24291 10084 LV BX1
-2884 50 30345 10084 LV BX1
-2884 50 36399 10084 LV BX1
-2884 50 42453 10084 LV BX1
-2884 50 48507 10084 LV BX1
/Times-Roman SF
12438 11199 MT
(bef03m)SH
19843 XM
(94.2%)SH
26630 XM
(213)SH
33234 XM
(0)SH
38738 XM
(236)SH
44334 XM
(5.8%)SH
50663 XM
(0.0%)SH
42522 50 12039 11800 LH BX1
12438 12915 MT
(cmr02f)SH
19843 XM
(95.7%)SH
26630 XM
(221)SH
33234 XM
(6)SH
38738 XM
(231)SH
44334 XM
(6.9%)SH
49930 XM
(-15.9%)SH
42522 50 12039 13516 LH BX1
12438 14631 MT
(dms04f)SH
19843 XM
(98.9%)SH
26630 XM
(175)SH
33234 XM
(1)SH
38738 XM
(177)SH
44334 XM
(1.7%)SH
50663 XM
(0.0%)SH
42522 50 12039 15232 LH BX1
12438 16347 MT
(dtb03m)SH
19843 XM
(97.8%)SH
26630 XM
(221)SH
33234 XM
(0)SH
38738 XM
(226)SH
44334 XM
(2.2%)SH
49930 XM
(-18.5%)SH
42522 50 12039 16948 LH BX1
12438 18063 MT
(dtd05)SH
19981 XM
(95.3%)SH
26630 XM
(222)SH
33234 XM
(1)SH
38738 XM
(233)SH
44334 XM
(5.2%)SH
49803 XM
(+10.6%)SH
42522 50 12039 18664 LH BX1
12438 19779 MT
(ers07m)SH
19843 XM
(95.8%)SH
26630 XM
(203)SH
33234 XM
(0)SH
38738 XM
(212)SH
44334 XM
(4.2%)SH
49930 XM
(-10.6%)SH
42522 50 12039 20380 LH BX1
12438 21495 MT
(hxs06)SH
19981 XM
(91.9%)SH
26630 XM
(204)SH
32959 XM
(13)SH
38601 XM
(222)SH
44059 XM
(14.0%)SH
49803 XM
(+14.8%)SH
42522 50 12039 22096 LH BX1
12438 23211 MT
(jws04m)SH
19843 XM
(93.7%)SH
26630 XM
(208)SH
33234 XM
(0)SH
38738 XM
(222)SH
44334 XM
(6.3%)SH
50663 XM
(0.0%)SH
42522 50 12039 23812 LH BX1
12438 24927 MT
(pgh01m)SH
19843 XM
(95.6%)SH
26630 XM
(195)SH
33234 XM
(1)SH
38738 XM
(204)SH
44334 XM
(4.9%)SH
49803 XM
(+25.6%)SH
42522 50 12039 25528 LH BX1
12438 26643 MT
(rkm05m)SH
19843 XM
(89.9%)SH
26630 XM
(187)SH
33234 XM
(6)SH
38738 XM
(208)SH
44059 XM
(13.0%)SH
49930 XM
(-15.6%)SH
42522 50 12039 27244 LH BX1
12438 28359 MT
(tab07)SH
19981 XM
(97.2%)SH
26630 XM
(173)SH
33234 XM
(1)SH
38738 XM
(178)SH
44334 XM
(3.4%)SH
49930 XM
(-24.4%)SH
42522 50 12039 28960 LH BX1
12438 30075 MT
(TOTALS)SH
19568 XM
(95.00%)SH
26218 XM
(2222)SH
32822 XM
(29)SH
38326 XM
(2339)SH
44197 XM
(6.24%)SH
51168 XM
(--)SH
42522 50 12039 30676 LH BX1
12438 31791 MT
(CHANGE)SH
19660 XM
(-4.94%)SH
26733 XM
(+6)SH
33062 XM
(+1)SH
39197 XM
(--)SH
43876 XM
(-3.41%)SH
51168 XM
(--)SH
42522 25192 50 12039 32392 BX BX1
-22308 50 18237 32392 LV BX1
-22308 50 24291 32392 LV BX1
-22308 50 30345 32392 LV BX1
-22308 50 36399 32392 LV BX1
-22308 50 42453 32392 LV BX1
-22308 50 48507 32392 LV BX1
/Times-Bold SF
20265 34144 MT
(Table 4-3:)SH
/Times-Roman SF
25612 XM
(Summary of)SH
9 SS 
31356 XM
(SPHINX-SC)SH
11 SS 
36281 XM
(results with the EMAP)SH
28077 35340 MT
(adapted semi-continuous codebook.)SH
/Times-Bold SF
13213 38176 MT
(Speaker)SH
19463 XM
(Percent)SH
25487 XM
(Correct)SH
31019 XM
(Insertions)SH
37076 XM
(Reference)SH
44106 XM
(Error)SH
49134 XM
(Change in)SH
19433 39372 MT
(Correct)SH
44381 XM
(Rate)SH
48923 XM
(Error Rate)SH
42522 50 12039 39963 LH BX1
-2884 50 18237 39963 LV BX1
-2884 50 24291 39963 LV BX1
-2884 50 30345 39963 LV BX1
-2884 50 36399 39963 LV BX1
-2884 50 42453 39963 LV BX1
-2884 50 48507 39963 LV BX1
/Times-Roman SF
12438 41078 MT
(bef03m)SH
19843 XM
(94.2%)SH
26493 XM
(213)SH
33234 XM
(0)SH
38738 XM
(236)SH
44472 XM
(5.8%)SH
50663 XM
(0.0%)SH
42522 50 12039 41679 LH BX1
12438 42794 MT
(cmr02f)SH
19843 XM
(95.7%)SH
26493 XM
(221)SH
33234 XM
(6)SH
38738 XM
(231)SH
44472 XM
(6.9%)SH
49930 XM
(-15.9%)SH
42522 50 12039 43395 LH BX1
12438 44510 MT
(dms04f)SH
19843 XM
(98.9%)SH
26493 XM
(175)SH
33234 XM
(1)SH
38738 XM
(177)SH
44472 XM
(1.7%)SH
50663 XM
(0.0%)SH
42522 50 12039 45111 LH BX1
12438 46226 MT
(dtb03m)SH
19843 XM
(97.8%)SH
26493 XM
(221)SH
33234 XM
(0)SH
38738 XM
(226)SH
44472 XM
(2.2%)SH
49930 XM
(-18.5%)SH
42522 50 12039 46827 LH BX1
12438 47942 MT
(dtd05)SH
19981 XM
(95.3%)SH
26493 XM
(222)SH
33234 XM
(1)SH
38738 XM
(233)SH
44472 XM
(5.2%)SH
49803 XM
(+10.6%)SH
42522 50 12039 48543 LH BX1
12438 49658 MT
(ers07m)SH
19843 XM
(95.8%)SH
26493 XM
(203)SH
33234 XM
(0)SH
38738 XM
(212)SH
44472 XM
(4.2%)SH
49930 XM
(-10.6%)SH
42522 50 12039 50259 LH BX1
12438 51374 MT
(hxs06)SH
19981 XM
(91.9%)SH
26493 XM
(204)SH
32959 XM
(12)SH
38601 XM
(222)SH
44197 XM
(13.5%)SH
49803 XM
(+10.6%)SH
42522 50 12039 51975 LH BX1
12438 53090 MT
(jws04m)SH
19843 XM
(93.7%)SH
26493 XM
(208)SH
33234 XM
(0)SH
38738 XM
(222)SH
44472 XM
(6.3%)SH
50663 XM
(0.0%)SH
42522 50 12039 53691 LH BX1
12438 54806 MT
(pgh01m)SH
19843 XM
(95.6%)SH
26493 XM
(195)SH
33234 XM
(1)SH
38738 XM
(204)SH
44472 XM
(4.9%)SH
49803 XM
(+25.6%)SH
42522 50 12039 55407 LH BX1
12438 56522 MT
(rkm05m)SH
19843 XM
(89.4%)SH
26493 XM
(186)SH
33234 XM
(7)SH
38738 XM
(208)SH
44197 XM
(13.9%)SH
50343 XM
(-9.7%)SH
42522 50 12039 57123 LH BX1
12438 58238 MT
(tab07)SH
19981 XM
(96.6%)SH
26493 XM
(172)SH
33234 XM
(1)SH
38738 XM
(178)SH
44472 XM
(3.9%)SH
49930 XM
(-13.3%)SH
42522 50 12039 58839 LH BX1
12438 59954 MT
(TOTAL)SH
19706 XM
(94.91%)SH
26355 XM
(2220)SH
32822 XM
(29)SH
38326 XM
(2339)SH
44059 XM
(6.33%)SH
51168 XM
(--)SH
42522 50 12039 60555 LH BX1
12438 61670 MT
(CHANGE)SH
19660 XM
(-3.23%)SH
26870 XM
(+4)SH
33062 XM
(+1)SH
39197 XM
(--)SH
44014 XM
(-2.01%)SH
51168 XM
(--)SH
42522 25192 50 12039 62271 BX BX1
-22308 50 18237 62271 LV BX1
-22308 50 24291 62271 LV BX1
-22308 50 30345 62271 LV BX1
-22308 50 36399 62271 LV BX1
-22308 50 42453 62271 LV BX1
-22308 50 48507 62271 LV BX1
/Times-Bold SF
18265 64023 MT
(Table 4-4:)SH
/Times-Roman SF
23612 XM
(Summary of)SH
9 SS 
29356 XM
(SPHINX-SC)SH
11 SS 
34281 XM
(results with the LMS-C adapted)SH
28057 65219 MT
(semi-continuous codebook \050Nc=30\051.)SH
10800 67170 MT
(without adaptation with a confidence of)
60 W( 90 to 95 percent, the adapted systems were not significantly)59 W
10800 68909 MT
(different from each other.)SH
13300 71894 MT
(A number of variations of)
146 W( the adaptation paradigm described above were implemented in an)147 W
ES
%%Page: 93 94
BS
0 SI
10 /Times-Roman AF
54800 4286 MT
(93)SH
11 SS 
10800 7955 MT
(effort to improve the adaptation results.  They included multiple)
72 W( forward-backward iterations during)71 W
10800 9694 MT
(adaptation, adaptation after each training sentence instead of after all sentences, and a)
112 W( threshold on)113 W
10800 11433 MT
(the number of observations necessary before)
32 W( adapting a given codeword.  The changes in recognition)31 W
10800 13172 MT
(performance due to these variations and combinations of them were)
57 W( insignificant.  As a result, given)58 W
10800 14911 MT
(that the error rates for some individuals significantly)
74 W( decreased after adaptation, the remaining work)73 W
10800 16650 MT
(with)SH
9 SS 
13219 XM
(SPHINX-SC)SH
11 SS 
18332 XM
(focused on determining methods of automatically identifying)
188 W( those speakers who)189 W
10800 18389 MT
(benefit most from adaptation.)SH
12 /Times-Bold AF
10800 22073 MT
(4.4.1. Identification of Adaptation Candidates)SH
11 /Times-Roman AF
13300 24988 MT
(In each experiment, about half of)
19 W( the speakers showed improvement due to adaptation while the)18 W
10800 26727 MT
(remainder showed)
122 W( no change or an increased error rate.  Results may be improved if an automatic)123 W
10800 28466 MT
(method of identifying speakers which are good candidates for adaptation can be found.)
7 W( Three)
287 W( metrics)6 W
10800 30205 MT
(were investigated.  The first was the change in the sum of)
69 W( the pairwise Euclidean distances between)70 W
10800 31944 MT
(all codewords for the)
93 W( adapted and unadapted codebooks.  Reasoning that if the normalized distance)92 W
10800 33683 MT
(between the component densities in the VQ codebook increases the)
33 W( mixture components become less)34 W
10800 35422 MT
(confusable, the)
53 W( speaker-adapted codebook was chosen only when adaptation produced an increase in)52 W
10800 37161 MT
(this distance metric.  Experimental results when this)
157 W( selection procedure was applied are given in)158 W
10800 38900 MT
(Table 4-5.  Listed are the number of adaptation candidates)
69 W( \050out of 11\051 identified by this method, the)68 W
10800 40639 MT
(number of those identified)
132 W( which actually showed improvement, the number of improved speakers)133 W
10800 42378 MT
(which were missed, and)
122 W( the adapted and unadapted error rates when only the adapted speakers are)121 W
10800 44117 MT
(included. For)
275 W( those speakers selected by this metric, the error rate was reduced on average by 15%.)SH
/Times-Bold SF
12479 46953 MT
(Adaptation)SH
19309 XM
(Number)SH
25363 XM
(Number)SH
31417 XM
(Number)SH
37409 XM
(Adapted)SH
42882 XM
(Unadapted)SH
49733 XM
(Percent)SH
13946 48149 MT
(Type)SH
19340 XM
(Selected)SH
24996 XM
(Improved)SH
31722 XM
(Missed)SH
36815 XM
(Error Rate)SH
42869 XM
(Error Rate)SH
49120 XM
(Reduction)SH
42522 50 12039 48740 LH BX1
-2884 50 18237 48740 LV BX1
-2884 50 24291 48740 LV BX1
-2884 50 30345 48740 LV BX1
-2884 50 36399 48740 LV BX1
-2884 50 42453 48740 LV BX1
-2884 50 48507 48740 LV BX1
/Times-Roman SF
12438 49855 MT
(ML)SH
20989 XM
(3)SH
27043 XM
(3)SH
33097 XM
(3)SH
38005 XM
(4.99%)SH
44059 XM
(5.96%)SH
50113 XM
(16.2%)SH
42522 50 12039 50456 LH BX1
12438 51571 MT
(EMAP)SH
20989 XM
(4)SH
27043 XM
(3)SH
33097 XM
(2)SH
38005 XM
(4.26%)SH
44059 XM
(5.01%)SH
50113 XM
(15.0%)SH
42522 50 12039 52172 LH BX1
12438 53287 MT
(LMS-C)SH
20989 XM
(3)SH
27043 XM
(3)SH
33097 XM
(2)SH
38005 XM
(5.15%)SH
44059 XM
(5.96%)SH
50113 XM
(13.6%)SH
42522 8032 50 12039 53888 BX BX1
-5148 50 18237 53888 LV BX1
-5148 50 24291 53888 LV BX1
-5148 50 30345 53888 LV BX1
-5148 50 36399 53888 LV BX1
-5148 50 42453 53888 LV BX1
-5148 50 48507 53888 LV BX1
/Times-Bold SF
18377 55640 MT
(Table 4-5:)SH
/Times-Roman SF
23724 XM
(Recognition results for automatically selected speakers.)SH
13300 58625 MT
(A second selection)
55 W( method was based on recognition rates.  Of the 40 adaptation sentences per)56 W
10800 60364 MT
(speaker, 35 were used for adaptive training.  The recognition system)
26 W( was then run on the remaining 5)25 W
10800 62103 MT
(adaptation sentences using both the adapted and unadapted)
107 W( codebooks.  If the error rate from the 5)108 W
10800 63842 MT
(sentences was lower with the adapted codebook, the speaker was declared to be)
211 W( a candidate for)210 W
10800 65581 MT
(adaptation. In)
547 W( these cases, the adapted codebook was used in subsequent tests on the 25 test sen-)137 W
10800 67320 MT
(tences. Unfortunately,)
465 W( there proved to be)
95 W( little correlation between the error rates from the 5 adap-)94 W
10800 69059 MT
(tation sentences and the 25 test sentences, and the overall error rate was unchanged.)SH
ES
%%Page: 94 95
BS
0 SI
10 /Times-Roman AF
54800 4286 MT
(94)SH
11 SS 
13300 7955 MT
(The final selection method was the magnitude)
63 W( of the deviation of the adapted mean from the)64 W
/Times-Italic SF
55250 XM
(a)SH
10800 9694 MT
(priori)SH
/Times-Roman SF
13680 XM
(mean)SH
/Symbol SF
16374 XM
(m)SH
/Times-Roman SF
17458 XM
(. Although)
349 W( one might expect to obtain the largest)
37 W( gains when this deviation is largest,)36 W
9 /Times-Italic AF
17008 10054 MT
(o)SH
11 /Times-Roman AF
10800 11433 MT
(there was)
53 W( no definite correlation between this measure and the change in recognition rate after adap-)54 W
10800 13172 MT
(tation. The)
385 W( average dogmatism of the cepstral and difference cepstral codebooks was)
55 W( approximately)54 W
10800 14911 MT
(2.0 and 3.0, respectively.  The variation around)52 W
/Symbol SF
32292 XM
(m)SH
/Times-Roman SF
33703 XM
(was therefore quite small, on)
52 W( the order of 10% of)53 W
9 /Times-Italic AF
32926 15271 MT
(o)SH
11 /Times-Roman AF
10800 16650 MT
(the magnitude of)SH
/Symbol SF
18529 XM
(m)SH
/Times-Roman SF
19613 XM
(.)SH
9 /Times-Italic AF
19163 17010 MT
(o)SH
11 /Times-Roman AF
13300 19635 MT
(Adaptation in)121 W
9 SS 
19836 XM
(SPHINX-SC)SH
11 SS 
24881 XM
(via any of the estimation procedures from Chapter 2 showed only a)120 W
10800 21374 MT
(2-3% reduction of the word error rate.  If all speakers who)
75 W( are improved due to adaptation could be)76 W
10800 23113 MT
(correctly identified, the net reduction would be on the order of)
140 W( 6%.  To investigate the conditions)139 W
10800 24852 MT
(necessary for successful application of the EMAP)
252 W( and LMS-C procedures in a semi-continuous)253 W
10800 26591 MT
(HMM, experiments)
113 W( with computer-generated models and data were performed.  These experiments)112 W
10800 28330 MT
(are described in the remainder of the chapter.)SH
13 /Times-Bold AF
10800 32081 MT
(4.5. HMM Experiments with Computer-Generated Data)SH
11 /Times-Roman AF
13300 34996 MT
(To better understand why the)115 W
9 SS 
27040 XM
(SPHINX-SC)SH
11 SS 
32080 XM
(experimental results using data from actual speakers)115 W
10800 36735 MT
(were not)
25 W( more encouraging, a number of simulations were conducted using the 3-state, 3-component-)24 W
10800 38474 MT
(mixture SCHMM)
147 W( shown in Figure 4-1.  Experiments with this model allowed for investigation of)148 W
10800 40213 MT
(adaptation performance with)
188 W( various values for dogmatism, correlation, and observation sequence)187 W
10800 41952 MT
(length. Specific)
317 W( parameters and)
21 W( values considered were: dogmatism)22 W
/Symbol SF
41416 XM
(d)SH
/Times-Roman SF
42256 XM
(= \0500.5, 1, 2, 4\051, correlation)22 W
/Symbol SF
54279 XM
(r)SH
/Times-Roman SF
55180 XM
(=)SH
10800 43691 MT
(\0500.1, 0.5, 0.9\051, and observation sequence)
65 W( length)64 W
/Times-Italic SF
32360 XM
(T)SH
/Times-Roman SF
33311 XM
(= \05032, 64, 128, 256, 512, 1024\051.  The experiments)64 W
10800 45430 MT
(were conducted as follows.)SH
13300 48415 MT
(For each set of conditions, the experimental model was defined by the)
71 W( parameters \050)72 W
/Times-Bold SF
(A)SH
/Times-Roman SF
(,)SH
/Times-Bold SF
(B)SH
/Times-Roman SF
(,)SH
/Symbol SF
(p)SH
/Times-Roman SF
(\051 and)72 W
10800 50154 MT
(the)SH
/Times-Italic SF
12466 XM
(a priori)47 W
/Times-Roman SF
16228 XM
(semi-continuous codebook \050specified in Appendix D\051, and)
47 W( the desired data properties \050)46 W
/Symbol SF
(d)SH
/Times-Roman SF
(,)SH
/Symbol SF
10800 51893 MT
(r)SH
/Times-Roman SF
(\051 which were used to determine)53 W
/Symbol SF
25832 XM
(S)SH
/Times-Roman SF
26933 XM
(. Results)
382 W( for each experiment were averaged over 25 trials.  For)54 W
9 /Times-Italic AF
26483 52253 MT
(o)SH
11 /Times-Roman AF
10800 53632 MT
(each trial a true mean vector was generated according to)63 W
/Times-Italic SF
36470 XM
(N)SH
/Times-Roman SF
(\050)SH
/Symbol SF
(m)SH
/Times-Roman SF
38654 XM
(,)SH
/Symbol SF
(S)SH
/Times-Roman SF
40030 XM
(\051. Using)
399 W( the elements of this mean)62 W
9 /Times-Italic AF
38204 53992 MT
(o)SH
39580 XM
(o)SH
11 /Times-Roman AF
10800 55371 MT
(vector as the codebook's mean values,)
57 W( an observation sequence of length)58 W
/Times-Italic SF
43869 XM
(T)SH
/Times-Roman SF
44814 XM
(was generated according)58 W
10800 57110 MT
(to the model parameters.  This sequence was)
96 W( used to find an estimate of the trial \050true\051 mean using)95 W
10800 58849 MT
(ML, EMAP, or LMS-C procedures.)
90 W( Each)
457 W( mean estimate was initialized with the)91 W
/Times-Italic SF
47843 XM
(a priori)91 W
/Times-Roman SF
51693 XM
(mean)SH
/Symbol SF
54441 XM
(m)SH
/Times-Roman SF
55525 XM
(,)SH
9 /Times-Italic AF
55075 59209 MT
(o)SH
11 /Times-Roman AF
10800 60588 MT
(and then reestimated by)
25 W( repeated iterations of the forward-backward algorithm followed by EMAP or)24 W
9 SS 
26991 61964 MT
(15)SH
11 SS 
10800 62327 MT
(LMS-C updating when appropriate.)163 W
28329 XM
(Ten iterations were conducted, and the estimated mean was)162 W
10800 64066 MT
(replaced by the reestimate after each iteration.  Only)
129 W( the codebook means were updated after each)130 W
10800 65805 MT
(iteration. The)
567 W( mean-square error between the true \050trial\051 mean and the)
146 W( reestimated mean for each)145 W
10800 50 10800 69158 UL
7 SS 
11700 70659 MT
(15)SH
9 SS 
12400 70986 MT
(The reestimate produced by the forward-backward)
54 W( algorithm is the ML estimate.  No further processing was therefore)55 W
10800 72000 MT
(necessary when performing ML adaptation.)SH
ES
%%Page: 95 96
BS
0 SI
10 /Times-Roman AF
54800 4286 MT
(95)SH
11 SS 
10800 7955 MT
(iteration was recorded and averaged over)
172 W( each trials. The probability of the observation sequence)173 W
10800 9694 MT
(given the model was also computed.)SH
13300 12679 MT
(In every experiment, the results from ML, EMAP, and)
20 W( LMS-C adaptation were nearly identical,)19 W
10800 14418 MT
(much like the results observed using)
20 W( real data.  Figure 4-9 shows a family of curves which are typical)21 W
10800 16157 MT
(of the results of these experiments.  The curves in 4-9 represent)
84 W( the maximum likelihood estimate's)83 W
10800 17896 MT
(MSE versus the number of iterations of the forward-backward algorithm for various observation)217 W
10800 19635 MT
(lengths and)45 W
/Symbol SF
16206 XM
(d)SH
/Times-Roman SF
17069 XM
(= 0.5 and)45 W
/Symbol SF
21612 XM
(r)SH
/Times-Roman SF
22536 XM
(= 0.1.  Results from most)
45 W( other experiments, and from EMAP and LMS-C)44 W
10800 21374 MT
(adaptation, were similar to Figure 4-9.  In)
80 W( general, the mean-square error decreased with each itera-)81 W
10800 23113 MT
(tion of the forward-backward algorithm, and for each)
46 W( observation sequence length the estimates con-)45 W
10800 24852 MT
(verged after approximately 6 iterations.)
2 W( Also,)
280 W( as the length of the observation sequence increased, the)3 W
10800 26591 MT
(asymptotic MSE decreased since more data was available for adaptation.)SH
720 1000 0 18900 45499 GB 
%%BeginDocument: /usr0/rozzi/Documentation/PhDThesis/Chapter4/MLvsFBIter.eps
%!PS-Adobe-2.0 EPSF-1.2
%%BoundingBox: 0 0 400 246
%%Creator: Mathematica
%%Title: Clipboard
%%CreationDate: Never Never
%%EndComments
50 dict begin
/Mnodistort true def
/pageDashArray [4] def
/nullDashArray [] def

% Compute the minimum of two numbers.
/Mmin {         % p q Mmin min(p,q)
        2 copy          % p q p q
        gt              % p q p>q?
        { exch } if     % min(p,q) max(p,q)
        pop             % min(p,q)
} bind def


% Compute the maximum of two numbers.
/Mmax {         % p q Mmax max(p,q)
        2 copy          % p q p q
        lt              % p q p<q?
        { exch } if     % max(p,q) min(p,q)
        pop             % max(p,q)
} bind def

/Mpstart {
    MathPictureStart
} bind def
/Mpend {
    MathPictureEnd
} bind def
/Mscale {
    0 1 0 1
    5 -1 roll
    MathScale
} bind def
/Plain
        /Courier findfont
def
/Bold
        /Courier-Bold findfont
def
/Italic
        /Courier-Oblique findfont
def
/MathPictureStart {
        gsave
        newpath
        /Mtmatrix
        matrix currentmatrix
        def
        Plain
        Mfontsize scalefont
        setfont
0 setgray 0 setlinewidth
} bind def
/MathPictureEnd {
        grestore
} bind def
/Mdot {
        moveto
        0 0 rlineto
        stroke
} def
/Mtetra {
        moveto
        lineto
        lineto
        lineto
        fill
} def
/Metetra {
        moveto
        lineto
        lineto
        lineto
        closepath
        gsave
        fill
        grestore
        0 setgray
        stroke
} def
/Mistroke {
        flattenpath
        0 0 0
        {
        4 2 roll
        pop pop
        }
        {
        4 -1 roll
        2 index
        sub dup mul
        4 -1 roll
        2 index
        sub dup mul
        add sqrt
        4 -1 roll
        add
        3 1 roll
        }
        {
        stop
        }
        {
        stop
        }
        pathforall
        pop pop
        currentpoint
        stroke
        moveto
        currentdash
        3 -1 roll
        add
        setdash
} def
/Mfstroke {
        stroke
        currentdash
        pop 0
        setdash
} def
/Msboxa {
        newpath
        5 -1 roll
        Mvboxa
        pop
        6 -1 roll
        5 -1 roll
        4 -1 roll
        Msboxa1
        5 -3 roll
        Msboxa1
        [
        7 -2 roll
        [ 2 index 2 index
        10 -1 roll
        9 -1 roll
        ]
        6 1 roll
        5 -2 roll
        ]
} bind def
        
/Msboxa1 {
        sub
        2 div
        dup
        2 index
        1 add
        mul
        3 -1 roll
        -1 add
        3 -1 roll
        mul
} bind def
/Mvboxa {
        gsave
        newpath
        [ true
        3 -1 roll
        {
        Mbbox
        5 -1 roll
        {
        0
        5 1 roll
        }
        {
        7 -1 roll
        exch sub
        (m) stringwidth pop
        .3 mul
        sub
        7 1 roll
        6 -1 roll
        4 -1 roll
        Mmin
        3 -1 roll
        5 index
        add
        5 -1 roll
        4 -1 roll
        Mmax
        4 -1 roll
        }
        ifelse
        false
        }
        forall
        { stop } if
        counttomark
        1 add
        4 roll
        ]
        grestore
} bind def
/Mbbox {
        0 0 moveto
        false charpath
        flattenpath
        pathbbox
        newpath
} bind def
/Mmin {
        2 copy
        gt
        { exch } if
        pop
} bind def
/Mmax {
        2 copy
        lt
        { exch } if
        pop
} bind def
/Mshowa {
        4 -2 roll
        moveto
        2 index
        Mtmatrix setmatrix
        Mvboxa
        7 1 roll
        6 -1 roll
        5 -1 roll
        4 -1 roll
        Mshowa1
        4 1 roll
        Mshowa1
        rmoveto
        currentpoint
        0 1
        4 index length
        -1 add
        {
        2 index
        4 index
        2 index
        get
        3 index
        add
        moveto
        4 index
        exch get
        show
        } for
        pop pop pop pop
        Mgmatrix setmatrix
} bind def
/Mshowa1 {
        2 copy
        add
        4 1 roll
        sub
        mul
        sub
        -2 div
} bind def
/MathScale {
        Mwidth
        Mheight
        Mlp
        translate
        scale
        /Mgmatrix
        matrix currentmatrix
        def
        /Msaveaa exch def
        /Msavebb exch def
        /Msavecc exch def
        /Msavedd exch def
} bind def
/Mlp {
        3 copy
        Mlpfirst
        {
        Mnodistort
        {
        Mmin
        dup
        } if
        4 index
        2 index
        2 index
        Mlprun
        11 index
        11 -1 roll
        10 -4 roll
        Mlp1
        8 index
        9 -5 roll
        Mlp1
        4 -1 roll
        and
        { exit } if
        3 -1 roll
        pop pop
        } loop
        exch
        3 1 roll
        7 -3 roll
        pop pop pop
} bind def
/Mlpfirst {
        3 -1 roll
        dup length
        2 copy
        -2 add
        get
        aload
        pop pop pop
        4 -2 roll
        -1 add
        get
        aload
        pop pop pop
        6 -1 roll
        3 -1 roll
        5 -1 roll
        sub
        dup /MsaveAx exch def
        div
        4 1 roll
        exch sub
        dup /MsaveAy exch def
        div
} bind def
/Mlprun {
        2 copy
        4 index
        0 get
        dup
        4 1 roll
        Mlprun1
        3 copy
        8 -2 roll
        9 -1 roll
        {
        3 copy
        Mlprun1
        3 copy
        11 -3 roll
        /gt Mlpminmax
        8 3 roll
        11 -3 roll
        /lt Mlpminmax
        8 3 roll
        } forall
        pop pop pop pop
        3 1 roll
        pop pop
        aload pop
        5 -1 roll
        aload pop
        exch
        6 -1 roll
        Mlprun2
        8 2 roll
        4 -1 roll
        Mlprun2
        6 2 roll
        3 -1 roll
        Mlprun2
        4 2 roll
        exch
        Mlprun2
        6 2 roll
} bind def
/Mlprun1 {
        aload pop
        exch
        6 -1 roll
        5 -1 roll
        mul add
        4 -2 roll
        mul
        3 -1 roll
        add
} bind def
/Mlprun2 {
        2 copy
        add 2 div
        3 1 roll
        exch sub
} bind def
/Mlpminmax {
        cvx
        2 index
        6 index
        2 index
        exec
        {
        7 -3 roll
        4 -1 roll
        } if
        1 index
        5 index
        3 -1 roll
        exec
        {
        4 1 roll
        pop
        5 -1 roll
        aload
        pop pop
        4 -1 roll
        aload pop
        [
        8 -2 roll
        pop
        5 -2 roll
        pop
        6 -2 roll
        pop
        5 -1 roll
        ]
        4 1 roll
        pop
        }
        {
        pop pop pop
        } ifelse
} bind def
/Mlp1 {
        5 index
        3 index sub
        5 index
        2 index mul
        1 index
        le
        1 index
        0 le
        or
        dup
        not
        {
        1 index
        3 index div
        .99999 mul
        8 -1 roll
        pop
        7 1 roll
        }
        if
        8 -1 roll
        2 div
        7 -2 roll
        pop sub
        5 index
        6 -3 roll
        pop pop
        mul sub
        exch
} bind def
/Mfontsize      12 def
/Mleft          0.000000 def
/Mbottom        246.000000 def
/Mwidth         400.000000 def
/Mheight        246.000000 def
/Courier findfont 12 scalefont setfont
%!
%%Creator: Mathematica
%%AspectRatio: 0.61803 
MathPictureStart
% Scaling calculations
0.02381 0.09524 0.01472 4.49062 [
[(2)] 0.21429 0.00222 0 1 Msboxa
[(4)] 0.40476 0.00222 0 1 Msboxa
[(6)] 0.59524 0.00222 0 1 Msboxa
[(8)] 0.78571 0.00222 0 1 Msboxa
[(10)] 0.97619 0.00222 0 1 Msboxa
[(0.02)] 0.01131 0.10453 1 0 Msboxa
[(0.04)] 0.01131 0.19434 1 0 Msboxa
[(0.06)] 0.01131 0.28415 1 0 Msboxa
[(0.08)] 0.01131 0.37396 1 0 Msboxa
[(0.1)] 0.01131 0.46378 1 0 Msboxa
[(0.12)] 0.01131 0.55359 1 0 Msboxa
[ -0.001 -0.001 0 0 ]
[ 1.001 0.61903 0 0 ]
] MathScale
% Start of Graphics
1 setlinecap
1 setlinejoin
newpath
%%Object: Graphics
[ ] 0 setdash
0 setgray
gsave
gsave
0.002 setlinewidth
0 0.01472 moveto
1 0.01472 lineto
stroke
0.21429 0.00847 moveto
0.21429 0.02097 lineto
stroke
0 setgray
[(2)] 0.21429 0.00222 0 1 Mshowa
0.40476 0.00847 moveto
0.40476 0.02097 lineto
stroke
0 setgray
[(4)] 0.40476 0.00222 0 1 Mshowa
0.59524 0.00847 moveto
0.59524 0.02097 lineto
stroke
0 setgray
[(6)] 0.59524 0.00222 0 1 Mshowa
0.78571 0.00847 moveto
0.78571 0.02097 lineto
stroke
0 setgray
[(8)] 0.78571 0.00222 0 1 Mshowa
0.97619 0.00847 moveto
0.97619 0.02097 lineto
stroke
0 setgray
[(10)] 0.97619 0.00222 0 1 Mshowa
0.02381 0 moveto
0.02381 0.61803 lineto
stroke
0.01756 0.10453 moveto
0.03006 0.10453 lineto
stroke
0 setgray
[(0.02)] 0.01131 0.10453 1 0 Mshowa
0.01756 0.19434 moveto
0.03006 0.19434 lineto
stroke
0 setgray
[(0.04)] 0.01131 0.19434 1 0 Mshowa
0.01756 0.28415 moveto
0.03006 0.28415 lineto
stroke
0 setgray
[(0.06)] 0.01131 0.28415 1 0 Mshowa
0.01756 0.37396 moveto
0.03006 0.37396 lineto
stroke
0 setgray
[(0.08)] 0.01131 0.37396 1 0 Mshowa
0.01756 0.46378 moveto
0.03006 0.46378 lineto
stroke
0 setgray
[(0.1)] 0.01131 0.46378 1 0 Mshowa
0.01756 0.55359 moveto
0.03006 0.55359 lineto
stroke
0 setgray
[(0.12)] 0.01131 0.55359 1 0 Mshowa

% plot labels
[(32)] 0.93131 0.32859 1 0 Mshowa
[(64)] 0.93131 0.23959 1 0 Mshowa
[(128)] 0.93131 0.17359 1 0 Mshowa
[(256)] 0.93131 0.12059 1 0 Mshowa
[(512)] 0.93131 0.07659 1 0 Mshowa
[(1024)] 0.93131 0.04359 1 0 Mshowa
grestore
grestore
0 0 moveto
1 0 lineto
1 0.618034 lineto
0 0.618034 lineto
closepath
clip
newpath
0 setgray
gsave
gsave
0.004 setlinewidth
0.3 setgray
0.11905 0.22966 moveto
0.21429 0.20219 lineto
0.30952 0.19317 lineto
0.40476 0.18958 lineto
0.5 0.18777 lineto
0.59524 0.18734 lineto
0.69048 0.18817 lineto
0.78571 0.18965 lineto
0.88095 0.18965 lineto
0.97619 0.18965 lineto
stroke
grestore
gsave
0.004 setlinewidth
0.2 setgray
0.11905 0.16523 moveto
0.21429 0.12601 lineto
0.30952 0.10845 lineto
0.40476 0.10056 lineto
0.5 0.09658 lineto
0.59524 0.09952 lineto
0.69048 0.10058 lineto
0.78571 0.10159 lineto
0.88095 0.10159 lineto
0.97619 0.10159 lineto
stroke
grestore
gsave
0.004 setlinewidth
0.4 setgray
0.11905 0.35664 moveto
0.21429 0.27396 lineto
0.30952 0.25083 lineto
0.40476 0.24027 lineto
0.5 0.22841 lineto
0.59524 0.22324 lineto
0.69048 0.22056 lineto
0.78571 0.22198 lineto
0.88095 0.22004 lineto
0.97619 0.22175 lineto
stroke
grestore
gsave
0.004 setlinewidth
0.1 setgray
0.11905 0.12075 moveto
0.21429 0.09563 lineto
0.30952 0.08227 lineto
0.40476 0.07175 lineto
0.5 0.06668 lineto
0.59524 0.06497 lineto
0.69048 0.06421 lineto
0.78571 0.06388 lineto
0.88095 0.06318 lineto
0.97619 0.0629 lineto
stroke
grestore
gsave
0.004 setlinewidth
0.5 setgray
0.11905 0.60332 moveto
0.21429 0.39675 lineto
0.30952 0.3454 lineto
0.40476 0.32622 lineto
0.5 0.31793 lineto
0.59524 0.31402 lineto
0.69048 0.31335 lineto
0.78571 0.31274 lineto
0.88095 0.31217 lineto
0.97619 0.31182 lineto
stroke
grestore
gsave
0.004 setlinewidth
0. setgray
0.11905 0.1977 moveto
0.21429 0.12165 lineto
0.30952 0.07732 lineto
0.40476 0.05189 lineto
0.5 0.03736 lineto
0.59524 0.02957 lineto
0.69048 0.02554 lineto
0.78571 0.02421 lineto
0.88095 0.02419 lineto
0.97619 0.02431 lineto
stroke
grestore
grestore
% End of Graphics
MathPictureEnd
%%EPS Trailer
end

%%EndDocument
 GE /Times-Bold SF
16807 47251 MT
(Figure 4-9:)SH
/Times-Roman SF
22580 XM
(MSE as a function of number of forward-backward iterations,)SH
24642 48447 MT
(varying observation-sequence length as a parameter.)SH
13300 51432 MT
(There were a few notable deviations from the typical results shown)
26 W( in Figure 4-9.  In particular,)25 W
10800 53171 MT
(for the larger values of dogmatism \0502 and 4\051, the ML MSE initially increased with the)
142 W( number of)143 W
10800 54910 MT
(forward-backward iterations when the observation length was short \05032 or 64\051.  This behavior)
197 W( is)196 W
10800 56649 MT
(illustrated in Figure 4-10.)
33 W( The)
342 W( reason for this increase is as follows.  From the analysis in Chapter 2,)34 W
10800 58388 MT
(it is)
5 W( known that samples from the true mean's distribution are very close to the)4 W
/Times-Italic SF
45718 XM
(a priori)4 W
/Times-Roman SF
49394 XM
(mean)SH
/Symbol SF
52055 XM
(m)SH
/Times-Roman SF
53418 XM
(when)SH
9 /Times-Italic AF
52689 58748 MT
(o)SH
11 /Times-Roman AF
10800 60127 MT
(the dogmatism is large.)
3 W( Since)
283 W( the ML estimate is initialized with)4 W
/Symbol SF
39780 XM
(m)SH
/Times-Roman SF
40864 XM
(, the initial MSE is relatively low.)4 W
9 /Times-Italic AF
40414 60487 MT
(o)SH
11 /Times-Roman AF
10800 61866 MT
(As the)
25 W( forward-backward iterations continue, however, the ML estimate is unable to reliably estimate)24 W
10800 63605 MT
(the true mean when the number of observations is small.  When these poor reestimates replace)
115 W( the)116 W
10800 65344 MT
(current mean and the process is repeated, the ML mean migrates)
83 W( away from)82 W
/Symbol SF
45532 XM
(m)SH
/Times-Roman SF
46973 XM
(\050and the true mean\051)82 W
9 /Times-Italic AF
46166 65704 MT
(o)SH
11 /Times-Roman AF
10800 67083 MT
(and the error increases.  The)
114 W( EMAP and LMS-C estimators do not exhibit this behavior since they)115 W
10800 68822 MT
(include a)86 W
/Symbol SF
15248 XM
(m)SH
/Times-Roman SF
16693 XM
(term which is weighted more heavily when)
86 W( the number of observations is small.  Note)85 W
9 /Times-Italic AF
15882 69182 MT
(o)SH
11 /Times-Roman AF
10800 70561 MT
(that under the same large-dogmatism conditions, but)
178 W( with longer observation lengths, the ML es-)179 W
10800 72300 MT
(timate does converge.)SH
ES
%%Page: 96 97
BS
0 SI
10 /Times-Roman AF
54800 4286 MT
(96)SH
11 SS 
700 1000 0 18900 24840 GB 
%%BeginDocument: /usr0/rozzi/Documentation/PhDThesis/Chapter4/MLDiverge.eps
%!PS-Adobe-2.0 EPSF-1.2
%%BoundingBox: 0 0 411 252
%%Creator: Mathematica
%%Title: Clipboard
%%CreationDate: Never Never
%%EndComments
50 dict begin
/Mnodistort true def
/pageDashArray [4] def
/nullDashArray [] def

% Compute the minimum of two numbers.
/Mmin {         % p q Mmin min(p,q)
        2 copy          % p q p q
        gt              % p q p>q?
        { exch } if     % min(p,q) max(p,q)
        pop             % min(p,q)
} bind def


% Compute the maximum of two numbers.
/Mmax {         % p q Mmax max(p,q)
        2 copy          % p q p q
        lt              % p q p<q?
        { exch } if     % max(p,q) min(p,q)
        pop             % max(p,q)
} bind def

/Mpstart {
    MathPictureStart
} bind def
/Mpend {
    MathPictureEnd
} bind def
/Mscale {
    0 1 0 1
    5 -1 roll
    MathScale
} bind def
/Plain
        /Courier findfont
def
/Bold
        /Courier-Bold findfont
def
/Italic
        /Courier-Oblique findfont
def
/MathPictureStart {
        gsave
        newpath
        /Mtmatrix
        matrix currentmatrix
        def
        Plain
        Mfontsize scalefont
        setfont
0 setgray 0 setlinewidth
} bind def
/MathPictureEnd {
        grestore
} bind def
/Mdot {
        moveto
        0 0 rlineto
        stroke
} def
/Mtetra {
        moveto
        lineto
        lineto
        lineto
        fill
} def
/Metetra {
        moveto
        lineto
        lineto
        lineto
        closepath
        gsave
        fill
        grestore
        0 setgray
        stroke
} def
/Mistroke {
        flattenpath
        0 0 0
        {
        4 2 roll
        pop pop
        }
        {
        4 -1 roll
        2 index
        sub dup mul
        4 -1 roll
        2 index
        sub dup mul
        add sqrt
        4 -1 roll
        add
        3 1 roll
        }
        {
        stop
        }
        {
        stop
        }
        pathforall
        pop pop
        currentpoint
        stroke
        moveto
        currentdash
        3 -1 roll
        add
        setdash
} def
/Mfstroke {
        stroke
        currentdash
        pop 0
        setdash
} def
/Msboxa {
        newpath
        5 -1 roll
        Mvboxa
        pop
        6 -1 roll
        5 -1 roll
        4 -1 roll
        Msboxa1
        5 -3 roll
        Msboxa1
        [
        7 -2 roll
        [ 2 index 2 index
        10 -1 roll
        9 -1 roll
        ]
        6 1 roll
        5 -2 roll
        ]
} bind def
        
/Msboxa1 {
        sub
        2 div
        dup
        2 index
        1 add
        mul
        3 -1 roll
        -1 add
        3 -1 roll
        mul
} bind def
/Mvboxa {
        gsave
        newpath
        [ true
        3 -1 roll
        {
        Mbbox
        5 -1 roll
        {
        0
        5 1 roll
        }
        {
        7 -1 roll
        exch sub
        (m) stringwidth pop
        .3 mul
        sub
        7 1 roll
        6 -1 roll
        4 -1 roll
        Mmin
        3 -1 roll
        5 index
        add
        5 -1 roll
        4 -1 roll
        Mmax
        4 -1 roll
        }
        ifelse
        false
        }
        forall
        { stop } if
        counttomark
        1 add
        4 roll
        ]
        grestore
} bind def
/Mbbox {
        0 0 moveto
        false charpath
        flattenpath
        pathbbox
        newpath
} bind def
/Mmin {
        2 copy
        gt
        { exch } if
        pop
} bind def
/Mmax {
        2 copy
        lt
        { exch } if
        pop
} bind def
/Mshowa {
        4 -2 roll
        moveto
        2 index
        Mtmatrix setmatrix
        Mvboxa
        7 1 roll
        6 -1 roll
        5 -1 roll
        4 -1 roll
        Mshowa1
        4 1 roll
        Mshowa1
        rmoveto
        currentpoint
        0 1
        4 index length
        -1 add
        {
        2 index
        4 index
        2 index
        get
        3 index
        add
        moveto
        4 index
        exch get
        show
        } for
        pop pop pop pop
        Mgmatrix setmatrix
} bind def
/Mshowa1 {
        2 copy
        add
        4 1 roll
        sub
        mul
        sub
        -2 div
} bind def
/MathScale {
        Mwidth
        Mheight
        Mlp
        translate
        scale
        /Mgmatrix
        matrix currentmatrix
        def
        /Msaveaa exch def
        /Msavebb exch def
        /Msavecc exch def
        /Msavedd exch def
} bind def
/Mlp {
        3 copy
        Mlpfirst
        {
        Mnodistort
        {
        Mmin
        dup
        } if
        4 index
        2 index
        2 index
        Mlprun
        11 index
        11 -1 roll
        10 -4 roll
        Mlp1
        8 index
        9 -5 roll
        Mlp1
        4 -1 roll
        and
        { exit } if
        3 -1 roll
        pop pop
        } loop
        exch
        3 1 roll
        7 -3 roll
        pop pop pop
} bind def
/Mlpfirst {
        3 -1 roll
        dup length
        2 copy
        -2 add
        get
        aload
        pop pop pop
        4 -2 roll
        -1 add
        get
        aload
        pop pop pop
        6 -1 roll
        3 -1 roll
        5 -1 roll
        sub
        dup /MsaveAx exch def
        div
        4 1 roll
        exch sub
        dup /MsaveAy exch def
        div
} bind def
/Mlprun {
        2 copy
        4 index
        0 get
        dup
        4 1 roll
        Mlprun1
        3 copy
        8 -2 roll
        9 -1 roll
        {
        3 copy
        Mlprun1
        3 copy
        11 -3 roll
        /gt Mlpminmax
        8 3 roll
        11 -3 roll
        /lt Mlpminmax
        8 3 roll
        } forall
        pop pop pop pop
        3 1 roll
        pop pop
        aload pop
        5 -1 roll
        aload pop
        exch
        6 -1 roll
        Mlprun2
        8 2 roll
        4 -1 roll
        Mlprun2
        6 2 roll
        3 -1 roll
        Mlprun2
        4 2 roll
        exch
        Mlprun2
        6 2 roll
} bind def
/Mlprun1 {
        aload pop
        exch
        6 -1 roll
        5 -1 roll
        mul add
        4 -2 roll
        mul
        3 -1 roll
        add
} bind def
/Mlprun2 {
        2 copy
        add 2 div
        3 1 roll
        exch sub
} bind def
/Mlpminmax {
        cvx
        2 index
        6 index
        2 index
        exec
        {
        7 -3 roll
        4 -1 roll
        } if
        1 index
        5 index
        3 -1 roll
        exec
        {
        4 1 roll
        pop
        5 -1 roll
        aload
        pop pop
        4 -1 roll
        aload pop
        [
        8 -2 roll
        pop
        5 -2 roll
        pop
        6 -2 roll
        pop
        5 -1 roll
        ]
        4 1 roll
        pop
        }
        {
        pop pop pop
        } ifelse
} bind def
/Mlp1 {
        5 index
        3 index sub
        5 index
        2 index mul
        1 index
        le
        1 index
        0 le
        or
        dup
        not
        {
        1 index
        3 index div
        .99999 mul
        8 -1 roll
        pop
        7 1 roll
        }
        if
        8 -1 roll
        2 div
        7 -2 roll
        pop sub
        5 index
        6 -3 roll
        pop pop
        mul sub
        exch
} bind def
/Mfontsize      12 def
/Mleft          0.000000 def
/Mbottom        252.000000 def
/Mwidth         411.000000 def
/Mheight        252.000000 def
/Courier findfont 12 scalefont setfont
%!
%%Creator: Mathematica
%%AspectRatio: 0.61803 
MathPictureStart
% Scaling calculations
0.02381 0.09524 0.01472 96.60328 [
[(2)] 0.21429 0.00222 0 1 Msboxa
[(4)] 0.40476 0.00222 0 1 Msboxa
[(6)] 0.59524 0.00222 0 1 Msboxa
[(8)] 0.78571 0.00222 0 1 Msboxa
[(10)] 0.97619 0.00222 0 1 Msboxa
[(0.001)] 0.01131 0.11132 1 0 Msboxa
[(0.002)] 0.01131 0.20792 1 0 Msboxa
[(0.003)] 0.01131 0.30452 1 0 Msboxa
[(0.004)] 0.01131 0.40113 1 0 Msboxa
[(0.005)] 0.01131 0.49773 1 0 Msboxa
[(0.006)] 0.01131 0.59433 1 0 Msboxa
[ -0.001 -0.001 0 0 ]
[ 1.001 0.61903 0 0 ]
] MathScale
% Start of Graphics
1 setlinecap
1 setlinejoin
newpath
%%Object: Graphics
[ ] 0 setdash
0 setgray
gsave
gsave
0.002 setlinewidth
0 0.01472 moveto
1 0.01472 lineto
stroke
0.21429 0.00847 moveto
0.21429 0.02097 lineto
stroke
0 setgray
[(2)] 0.21429 0.00222 0 1 Mshowa
0.40476 0.00847 moveto
0.40476 0.02097 lineto
stroke
0 setgray
[(4)] 0.40476 0.00222 0 1 Mshowa
0.59524 0.00847 moveto
0.59524 0.02097 lineto
stroke
0 setgray
[(6)] 0.59524 0.00222 0 1 Mshowa
0.78571 0.00847 moveto
0.78571 0.02097 lineto
stroke
0 setgray
[(8)] 0.78571 0.00222 0 1 Mshowa
0.97619 0.00847 moveto
0.97619 0.02097 lineto
stroke
0 setgray
[(10)] 0.97619 0.00222 0 1 Mshowa
0.02381 0 moveto
0.02381 0.61803 lineto
stroke
0.01756 0.11132 moveto
0.03006 0.11132 lineto
stroke
0 setgray
[(0.001)] 0.01131 0.11132 1 0 Mshowa
0.01756 0.20792 moveto
0.03006 0.20792 lineto
stroke
0 setgray
[(0.002)] 0.01131 0.20792 1 0 Mshowa
0.01756 0.30452 moveto
0.03006 0.30452 lineto
stroke
0 setgray
[(0.003)] 0.01131 0.30452 1 0 Mshowa
0.01756 0.40113 moveto
0.03006 0.40113 lineto
stroke
0 setgray
[(0.004)] 0.01131 0.40113 1 0 Mshowa
0.01756 0.49773 moveto
0.03006 0.49773 lineto
stroke
0 setgray
[(0.005)] 0.01131 0.49773 1 0 Mshowa
0.01756 0.59433 moveto
0.03006 0.59433 lineto
stroke
0 setgray
[(0.006)] 0.01131 0.59433 1 0 Mshowa
% plot labels
[(32)] 0.93131 0.62 1 0 Mshowa
[(64)] 0.93131 0.42 1 0 Mshowa
[(128)] 0.93131 0.17359 1 0 Mshowa
[(256)] 0.93131 0.10 1 0 Mshowa
[(512)] 0.93131 0.065 1 0 Mshowa
[(1024)] 0.93131 0.04359 1 0 Mshowa

grestore
grestore
0 0 moveto
1 0 lineto
1 0.618034 lineto
0 0.618034 lineto
closepath
clip
newpath
0 setgray
gsave
gsave
0.004 setlinewidth
0.5 setgray
0.11905 0.42779 moveto
0.21429 0.41456 lineto
0.30952 0.42885 lineto
0.40476 0.45571 lineto
0.5 0.48508 lineto
0.59524 0.5128 lineto
0.69048 0.53802 lineto
0.78571 0.5611 lineto
0.88095 0.58265 lineto
0.97619 0.60332 lineto
stroke
grestore
gsave
0.004 setlinewidth
0.4 setgray
0.11905 0.38055 moveto
0.21429 0.28636 lineto
0.30952 0.271 lineto
0.40476 0.28801 lineto
0.5 0.31332 lineto
0.59524 0.33718 lineto
0.69048 0.35775 lineto
0.78571 0.37543 lineto
0.88095 0.39118 lineto
0.97619 0.40528 lineto
stroke
grestore
gsave
0.004 setlinewidth
0.3 setgray
0.11905 0.46827 moveto
0.21429 0.27864 lineto
0.30952 0.18812 lineto
0.40476 0.146 lineto
0.5 0.13209 lineto
0.59524 0.13257 lineto
0.69048 0.13759 lineto
0.78571 0.14271 lineto
0.88095 0.14668 lineto
0.97619 0.14957 lineto
stroke
grestore
gsave
0.004 setlinewidth
0.2 setgray
0.11905 0.25535 moveto
0.21429 0.14156 lineto
0.30952 0.10137 lineto
0.40476 0.08717 lineto
0.5 0.08263 lineto
0.59524 0.08147 lineto
0.69048 0.08156 lineto
0.78571 0.08185 lineto
0.88095 0.08224 lineto
0.97619 0.08253 lineto
stroke
grestore
gsave
0.004 setlinewidth
0.1 setgray
0.11905 0.34519 moveto
0.21429 0.16773 lineto
0.30952 0.09673 lineto
0.40476 0.06794 lineto
0.5 0.05606 lineto
0.59524 0.05104 lineto
0.69048 0.04891 lineto
0.78571 0.04804 lineto
0.88095 0.04766 lineto
0.97619 0.04746 lineto
stroke
grestore
gsave
0.004 setlinewidth
0.11905 0.17807 moveto
0.21429 0.08678 lineto
0.30952 0.05142 lineto
0.40476 0.03742 lineto
0.5 0.03191 lineto
0.59524 0.02998 lineto
0.69048 0.0293 lineto
0.78571 0.02921 lineto
0.88095 0.0293 lineto
0.97619 0.0294 lineto
stroke
grestore
grestore
% End of Graphics
MathPictureEnd
%%EPS Trailer
end

%%EndDocument
 GE /Times-Bold SF
12878 26592 MT
(Figure 4-10:)SH
/Times-Roman SF
19201 XM
(Family of curves of maximum likelihood MSE vs. forward-backward iteration)SH
20581 27788 MT
(for various observation sequence lengths and \050)SH
/Symbol SF
(d)SH
/Times-Roman SF
(,)SH
/Symbol SF
(r)SH
/Times-Roman SF
(\051 = \0502.0,0.9\051.  Note the)SH
20594 28984 MT
(increase in MSE with forward-backward iteration for lengths 32 and 64.)SH
13300 31969 MT
(In addition to the divergence of the ML, there is also an occasional small fluctuation in)
77 W( mean-)76 W
10800 33708 MT
(square error after convergence.  This change occurs because the reestimation)
41 W( procedure is attempting)42 W
10800 35447 MT
(to maximize)97 W
/Times-Italic SF
16738 XM
(Pr)SH
/Times-Roman SF
(\050)SH
/Times-Italic SF
(O)SH
/Times-Roman SF
(|)SH
/Symbol SF
(l)SH
/Times-Roman SF
(\051 which doesn't necessarily mean that the estimation squared-error will)
97 W( be min-)96 W
10800 37186 MT
(imized.)SH
530 1000 0 11700 51632 GB 
%%BeginDocument: /usr0/rozzi/Documentation/PhDThesis/Chapter4/AllVsLenAvg.eps
%!PS-Adobe-2.0 EPSF-1.2
%%BoundingBox: 0 0 407 250
%%Creator: Mathematica
%%Title: Clipboard
%%CreationDate: Never Never
%%EndComments
50 dict begin
/Mnodistort true def
/pageDashArray [4] def
/nullDashArray [] def

% Compute the minimum of two numbers.
/Mmin {         % p q Mmin min(p,q)
        2 copy          % p q p q
        gt              % p q p>q?
        { exch } if     % min(p,q) max(p,q)
        pop             % min(p,q)
} bind def


% Compute the maximum of two numbers.
/Mmax {         % p q Mmax max(p,q)
        2 copy          % p q p q
        lt              % p q p<q?
        { exch } if     % max(p,q) min(p,q)
        pop             % max(p,q)
} bind def

/Mpstart {
    MathPictureStart
} bind def
/Mpend {
    MathPictureEnd
} bind def
/Mscale {
    0 1 0 1
    5 -1 roll
    MathScale
} bind def
/Plain
        /Courier findfont
def
/Bold
        /Courier-Bold findfont
def
/Italic
        /Courier-Oblique findfont
def
/MathPictureStart {
        gsave
        newpath
        /Mtmatrix
        matrix currentmatrix
        def
        Plain
        Mfontsize scalefont
        setfont
0 setgray 0 setlinewidth
} bind def
/MathPictureEnd {
        grestore
} bind def
/Mdot {
        moveto
        0 0 rlineto
        stroke
} def
/Mtetra {
        moveto
        lineto
        lineto
        lineto
        fill
} def
/Metetra {
        moveto
        lineto
        lineto
        lineto
        closepath
        gsave
        fill
        grestore
        0 setgray
        stroke
} def
/Mistroke {
        flattenpath
        0 0 0
        {
        4 2 roll
        pop pop
        }
        {
        4 -1 roll
        2 index
        sub dup mul
        4 -1 roll
        2 index
        sub dup mul
        add sqrt
        4 -1 roll
        add
        3 1 roll
        }
        {
        stop
        }
        {
        stop
        }
        pathforall
        pop pop
        currentpoint
        stroke
        moveto
        currentdash
        3 -1 roll
        add
        setdash
} def
/Mfstroke {
        stroke
        currentdash
        pop 0
        setdash
} def
/Msboxa {
        newpath
        5 -1 roll
        Mvboxa
        pop
        6 -1 roll
        5 -1 roll
        4 -1 roll
        Msboxa1
        5 -3 roll
        Msboxa1
        [
        7 -2 roll
        [ 2 index 2 index
        10 -1 roll
        9 -1 roll
        ]
        6 1 roll
        5 -2 roll
        ]
} bind def
        
/Msboxa1 {
        sub
        2 div
        dup
        2 index
        1 add
        mul
        3 -1 roll
        -1 add
        3 -1 roll
        mul
} bind def
/Mvboxa {
        gsave
        newpath
        [ true
        3 -1 roll
        {
        Mbbox
        5 -1 roll
        {
        0
        5 1 roll
        }
        {
        7 -1 roll
        exch sub
        (m) stringwidth pop
        .3 mul
        sub
        7 1 roll
        6 -1 roll
        4 -1 roll
        Mmin
        3 -1 roll
        5 index
        add
        5 -1 roll
        4 -1 roll
        Mmax
        4 -1 roll
        }
        ifelse
        false
        }
        forall
        { stop } if
        counttomark
        1 add
        4 roll
        ]
        grestore
} bind def
/Mbbox {
        0 0 moveto
        false charpath
        flattenpath
        pathbbox
        newpath
} bind def
/Mmin {
        2 copy
        gt
        { exch } if
        pop
} bind def
/Mmax {
        2 copy
        lt
        { exch } if
        pop
} bind def
/Mshowa {
        4 -2 roll
        moveto
        2 index
        Mtmatrix setmatrix
        Mvboxa
        7 1 roll
        6 -1 roll
        5 -1 roll
        4 -1 roll
        Mshowa1
        4 1 roll
        Mshowa1
        rmoveto
        currentpoint
        0 1
        4 index length
        -1 add
        {
        2 index
        4 index
        2 index
        get
        3 index
        add
        moveto
        4 index
        exch get
        show
        } for
        pop pop pop pop
        Mgmatrix setmatrix
} bind def
/Mshowa1 {
        2 copy
        add
        4 1 roll
        sub
        mul
        sub
        -2 div
} bind def
/MathScale {
        Mwidth
        Mheight
        Mlp
        translate
        scale
        /Mgmatrix
        matrix currentmatrix
        def
        /Msaveaa exch def
        /Msavebb exch def
        /Msavecc exch def
        /Msavedd exch def
} bind def
/Mlp {
        3 copy
        Mlpfirst
        {
        Mnodistort
        {
        Mmin
        dup
        } if
        4 index
        2 index
        2 index
        Mlprun
        11 index
        11 -1 roll
        10 -4 roll
        Mlp1
        8 index
        9 -5 roll
        Mlp1
        4 -1 roll
        and
        { exit } if
        3 -1 roll
        pop pop
        } loop
        exch
        3 1 roll
        7 -3 roll
        pop pop pop
} bind def
/Mlpfirst {
        3 -1 roll
        dup length
        2 copy
        -2 add
        get
        aload
        pop pop pop
        4 -2 roll
        -1 add
        get
        aload
        pop pop pop
        6 -1 roll
        3 -1 roll
        5 -1 roll
        sub
        dup /MsaveAx exch def
        div
        4 1 roll
        exch sub
        dup /MsaveAy exch def
        div
} bind def
/Mlprun {
        2 copy
        4 index
        0 get
        dup
        4 1 roll
        Mlprun1
        3 copy
        8 -2 roll
        9 -1 roll
        {
        3 copy
        Mlprun1
        3 copy
        11 -3 roll
        /gt Mlpminmax
        8 3 roll
        11 -3 roll
        /lt Mlpminmax
        8 3 roll
        } forall
        pop pop pop pop
        3 1 roll
        pop pop
        aload pop
        5 -1 roll
        aload pop
        exch
        6 -1 roll
        Mlprun2
        8 2 roll
        4 -1 roll
        Mlprun2
        6 2 roll
        3 -1 roll
        Mlprun2
        4 2 roll
        exch
        Mlprun2
        6 2 roll
} bind def
/Mlprun1 {
        aload pop
        exch
        6 -1 roll
        5 -1 roll
        mul add
        4 -2 roll
        mul
        3 -1 roll
        add
} bind def
/Mlprun2 {
        2 copy
        add 2 div
        3 1 roll
        exch sub
} bind def
/Mlpminmax {
        cvx
        2 index
        6 index
        2 index
        exec
        {
        7 -3 roll
        4 -1 roll
        } if
        1 index
        5 index
        3 -1 roll
        exec
        {
        4 1 roll
        pop
        5 -1 roll
        aload
        pop pop
        4 -1 roll
        aload pop
        [
        8 -2 roll
        pop
        5 -2 roll
        pop
        6 -2 roll
        pop
        5 -1 roll
        ]
        4 1 roll
        pop
        }
        {
        pop pop pop
        } ifelse
} bind def
/Mlp1 {
        5 index
        3 index sub
        5 index
        2 index mul
        1 index
        le
        1 index
        0 le
        or
        dup
        not
        {
        1 index
        3 index div
        .99999 mul
        8 -1 roll
        pop
        7 1 roll
        }
        if
        8 -1 roll
        2 div
        7 -2 roll
        pop sub
        5 index
        6 -3 roll
        pop pop
        mul sub
        exch
} bind def
/Mfontsize      12 def
/Mleft          0.000000 def
/Mbottom        250.000000 def
/Mwidth         407.000000 def
/Mheight        250.000000 def
/Courier findfont 12 scalefont setfont
%!
%%Creator: Mathematica
%%AspectRatio: 0.61803 
MathPictureStart
% Scaling calculations
0.02381 0.00093 0.01472 112.86746 [
[(200)] 0.20982 0.00222 0 1 Msboxa
[(400)] 0.39583 0.00222 0 1 Msboxa
[(600)] 0.58185 0.00222 0 1 Msboxa
[(800)] 0.76786 0.00222 0 1 Msboxa
[(1000)] 0.95387 0.00222 0 1 Msboxa
[(0.001)] 0.01131 0.12758 1 0 Msboxa
[(0.002)] 0.01131 0.24045 1 0 Msboxa
[(0.003)] 0.01131 0.35332 1 0 Msboxa
[(0.004)] 0.01131 0.46618 1 0 Msboxa
[(0.005)] 0.01131 0.57905 1 0 Msboxa
[ -0.001 -0.001 0 0 ]
[ 1.001 0.61903 0 0 ]
] MathScale
% Start of Graphics
1 setlinecap
1 setlinejoin
newpath
%%Object: Graphics
[ ] 0 setdash
0 setgray
gsave
gsave
0.002 setlinewidth
0 0.01472 moveto
1 0.01472 lineto
stroke
0.20982 0.00847 moveto
0.20982 0.02097 lineto
stroke
0 setgray
[(200)] 0.20982 0.00222 0 1 Mshowa
0.39583 0.00847 moveto
0.39583 0.02097 lineto
stroke
0 setgray
[(400)] 0.39583 0.00222 0 1 Mshowa
0.58185 0.00847 moveto
0.58185 0.02097 lineto
stroke
0 setgray
[(600)] 0.58185 0.00222 0 1 Mshowa
0.76786 0.00847 moveto
0.76786 0.02097 lineto
stroke
0 setgray
[(800)] 0.76786 0.00222 0 1 Mshowa
0.95387 0.00847 moveto
0.95387 0.02097 lineto
stroke
0 setgray
[(1000)] 0.95387 0.00222 0 1 Mshowa
0.02381 0 moveto
0.02381 0.61803 lineto
stroke
0.01756 0.12758 moveto
0.03006 0.12758 lineto
stroke
0 setgray
[(0.001)] 0.01131 0.12758 1 0 Mshowa
0.01756 0.24045 moveto
0.03006 0.24045 lineto
stroke
0 setgray
[(0.002)] 0.01131 0.24045 1 0 Mshowa
0.01756 0.35332 moveto
0.03006 0.35332 lineto
stroke
0 setgray
[(0.003)] 0.01131 0.35332 1 0 Mshowa
0.01756 0.46618 moveto
0.03006 0.46618 lineto
stroke
0 setgray
[(0.004)] 0.01131 0.46618 1 0 Mshowa
0.01756 0.57905 moveto
0.03006 0.57905 lineto
stroke
0 setgray
[(0.005)] 0.01131 0.57905 1 0 Mshowa
[(\(a\))] 0.7 0.53125 0 -1 Mshowa
grestore
grestore

0 0 moveto
1 0 lineto
1 0.618034 lineto
0 0.618034 lineto
closepath
clip
newpath
0 setgray
gsave
gsave
0.004 setlinewidth
0.67 setgray
0.05357 0.60332 moveto
0.08333 0.3821 lineto
0.14286 0.14756 lineto
0.2619 0.07589 lineto
0.5 0.06652 lineto
0.97619 0.04304 lineto
stroke
grestore
gsave
0.004 setlinewidth
0.33 setgray
0.05357 0.4926 moveto
0.08333 0.32205 lineto
0.14286 0.13797 lineto
0.2619 0.07262 lineto
0.5 0.06754 lineto
0.97619 0.04429 lineto
stroke
grestore
gsave
0.004 setlinewidth
0.05357 0.50501 moveto
0.08333 0.3488 lineto
0.14286 0.14542 lineto
0.2619 0.07894 lineto
0.5 0.07544 lineto
0.97619 0.04959 lineto
stroke
grestore
grestore
% End of Graphics
MathPictureEnd
%%EPS Trailer
end

%%EndDocument
 GE 530 1000 0 33300 51632 GB 
%%BeginDocument: /usr0/rozzi/Documentation/PhDThesis/Chapter4/AllVsLenBest.eps
%!PS-Adobe-2.0 EPSF-1.2
%%BoundingBox: 0 0 407 247
%%Creator: Mathematica
%%Title: Clipboard
%%CreationDate: Never Never
%%EndComments
50 dict begin
/Mnodistort true def
/pageDashArray [4] def
/nullDashArray [] def

% Compute the minimum of two numbers.
/Mmin {         % p q Mmin min(p,q)
        2 copy          % p q p q
        gt              % p q p>q?
        { exch } if     % min(p,q) max(p,q)
        pop             % min(p,q)
} bind def


% Compute the maximum of two numbers.
/Mmax {         % p q Mmax max(p,q)
        2 copy          % p q p q
        lt              % p q p<q?
        { exch } if     % max(p,q) min(p,q)
        pop             % max(p,q)
} bind def

/Mpstart {
    MathPictureStart
} bind def
/Mpend {
    MathPictureEnd
} bind def
/Mscale {
    0 1 0 1
    5 -1 roll
    MathScale
} bind def
/Plain
        /Courier findfont
def
/Bold
        /Courier-Bold findfont
def
/Italic
        /Courier-Oblique findfont
def
/MathPictureStart {
        gsave
        newpath
        /Mtmatrix
        matrix currentmatrix
        def
        Plain
        Mfontsize scalefont
        setfont
0 setgray 0 setlinewidth
} bind def
/MathPictureEnd {
        grestore
} bind def
/Mdot {
        moveto
        0 0 rlineto
        stroke
} def
/Mtetra {
        moveto
        lineto
        lineto
        lineto
        fill
} def
/Metetra {
        moveto
        lineto
        lineto
        lineto
        closepath
        gsave
        fill
        grestore
        0 setgray
        stroke
} def
/Mistroke {
        flattenpath
        0 0 0
        {
        4 2 roll
        pop pop
        }
        {
        4 -1 roll
        2 index
        sub dup mul
        4 -1 roll
        2 index
        sub dup mul
        add sqrt
        4 -1 roll
        add
        3 1 roll
        }
        {
        stop
        }
        {
        stop
        }
        pathforall
        pop pop
        currentpoint
        stroke
        moveto
        currentdash
        3 -1 roll
        add
        setdash
} def
/Mfstroke {
        stroke
        currentdash
        pop 0
        setdash
} def
/Msboxa {
        newpath
        5 -1 roll
        Mvboxa
        pop
        6 -1 roll
        5 -1 roll
        4 -1 roll
        Msboxa1
        5 -3 roll
        Msboxa1
        [
        7 -2 roll
        [ 2 index 2 index
        10 -1 roll
        9 -1 roll
        ]
        6 1 roll
        5 -2 roll
        ]
} bind def
        
/Msboxa1 {
        sub
        2 div
        dup
        2 index
        1 add
        mul
        3 -1 roll
        -1 add
        3 -1 roll
        mul
} bind def
/Mvboxa {
        gsave
        newpath
        [ true
        3 -1 roll
        {
        Mbbox
        5 -1 roll
        {
        0
        5 1 roll
        }
        {
        7 -1 roll
        exch sub
        (m) stringwidth pop
        .3 mul
        sub
        7 1 roll
        6 -1 roll
        4 -1 roll
        Mmin
        3 -1 roll
        5 index
        add
        5 -1 roll
        4 -1 roll
        Mmax
        4 -1 roll
        }
        ifelse
        false
        }
        forall
        { stop } if
        counttomark
        1 add
        4 roll
        ]
        grestore
} bind def
/Mbbox {
        0 0 moveto
        false charpath
        flattenpath
        pathbbox
        newpath
} bind def
/Mmin {
        2 copy
        gt
        { exch } if
        pop
} bind def
/Mmax {
        2 copy
        lt
        { exch } if
        pop
} bind def
/Mshowa {
        4 -2 roll
        moveto
        2 index
        Mtmatrix setmatrix
        Mvboxa
        7 1 roll
        6 -1 roll
        5 -1 roll
        4 -1 roll
        Mshowa1
        4 1 roll
        Mshowa1
        rmoveto
        currentpoint
        0 1
        4 index length
        -1 add
        {
        2 index
        4 index
        2 index
        get
        3 index
        add
        moveto
        4 index
        exch get
        show
        } for
        pop pop pop pop
        Mgmatrix setmatrix
} bind def
/Mshowa1 {
        2 copy
        add
        4 1 roll
        sub
        mul
        sub
        -2 div
} bind def
/MathScale {
        Mwidth
        Mheight
        Mlp
        translate
        scale
        /Mgmatrix
        matrix currentmatrix
        def
        /Msaveaa exch def
        /Msavebb exch def
        /Msavecc exch def
        /Msavedd exch def
} bind def
/Mlp {
        3 copy
        Mlpfirst
        {
        Mnodistort
        {
        Mmin
        dup
        } if
        4 index
        2 index
        2 index
        Mlprun
        11 index
        11 -1 roll
        10 -4 roll
        Mlp1
        8 index
        9 -5 roll
        Mlp1
        4 -1 roll
        and
        { exit } if
        3 -1 roll
        pop pop
        } loop
        exch
        3 1 roll
        7 -3 roll
        pop pop pop
} bind def
/Mlpfirst {
        3 -1 roll
        dup length
        2 copy
        -2 add
        get
        aload
        pop pop pop
        4 -2 roll
        -1 add
        get
        aload
        pop pop pop
        6 -1 roll
        3 -1 roll
        5 -1 roll
        sub
        dup /MsaveAx exch def
        div
        4 1 roll
        exch sub
        dup /MsaveAy exch def
        div
} bind def
/Mlprun {
        2 copy
        4 index
        0 get
        dup
        4 1 roll
        Mlprun1
        3 copy
        8 -2 roll
        9 -1 roll
        {
        3 copy
        Mlprun1
        3 copy
        11 -3 roll
        /gt Mlpminmax
        8 3 roll
        11 -3 roll
        /lt Mlpminmax
        8 3 roll
        } forall
        pop pop pop pop
        3 1 roll
        pop pop
        aload pop
        5 -1 roll
        aload pop
        exch
        6 -1 roll
        Mlprun2
        8 2 roll
        4 -1 roll
        Mlprun2
        6 2 roll
        3 -1 roll
        Mlprun2
        4 2 roll
        exch
        Mlprun2
        6 2 roll
} bind def
/Mlprun1 {
        aload pop
        exch
        6 -1 roll
        5 -1 roll
        mul add
        4 -2 roll
        mul
        3 -1 roll
        add
} bind def
/Mlprun2 {
        2 copy
        add 2 div
        3 1 roll
        exch sub
} bind def
/Mlpminmax {
        cvx
        2 index
        6 index
        2 index
        exec
        {
        7 -3 roll
        4 -1 roll
        } if
        1 index
        5 index
        3 -1 roll
        exec
        {
        4 1 roll
        pop
        5 -1 roll
        aload
        pop pop
        4 -1 roll
        aload pop
        [
        8 -2 roll
        pop
        5 -2 roll
        pop
        6 -2 roll
        pop
        5 -1 roll
        ]
        4 1 roll
        pop
        }
        {
        pop pop pop
        } ifelse
} bind def
/Mlp1 {
        5 index
        3 index sub
        5 index
        2 index mul
        1 index
        le
        1 index
        0 le
        or
        dup
        not
        {
        1 index
        3 index div
        .99999 mul
        8 -1 roll
        pop
        7 1 roll
        }
        if
        8 -1 roll
        2 div
        7 -2 roll
        pop sub
        5 index
        6 -3 roll
        pop pop
        mul sub
        exch
} bind def
/Mfontsize      12 def
/Mleft          0.000000 def
/Mbottom        247.000000 def
/Mwidth         407.000000 def
/Mheight        247.000000 def
/Courier findfont 12 scalefont setfont
%!
%%Creator: Mathematica
%%AspectRatio: 0.61803 
MathPictureStart
% Scaling calculations
0.02381 0.00093 0.01472 125.90456 [
[(200)] 0.20982 0.00222 0 1 Msboxa
[(400)] 0.39583 0.00222 0 1 Msboxa
[(600)] 0.58185 0.00222 0 1 Msboxa
[(800)] 0.76786 0.00222 0 1 Msboxa
[(1000)] 0.95387 0.00222 0 1 Msboxa
[(0.001)] 0.01131 0.14062 1 0 Msboxa
[(0.002)] 0.01131 0.26652 1 0 Msboxa
[(0.003)] 0.01131 0.39243 1 0 Msboxa
[(0.004)] 0.01131 0.51833 1 0 Msboxa
[ -0.001 -0.001 0 0 ]
[ 1.001 0.61903 0 0 ]
] MathScale
% Start of Graphics
1 setlinecap
1 setlinejoin
newpath
%%Object: Graphics
[ ] 0 setdash
0 setgray
gsave
gsave
0.002 setlinewidth
0 0.01472 moveto
1 0.01472 lineto
stroke
0.20982 0.00847 moveto
0.20982 0.02097 lineto
stroke
0 setgray
[(200)] 0.20982 0.00222 0 1 Mshowa
0.39583 0.00847 moveto
0.39583 0.02097 lineto
stroke
0 setgray
[(400)] 0.39583 0.00222 0 1 Mshowa
0.58185 0.00847 moveto
0.58185 0.02097 lineto
stroke
0 setgray
[(600)] 0.58185 0.00222 0 1 Mshowa
0.76786 0.00847 moveto
0.76786 0.02097 lineto
stroke
0 setgray
[(800)] 0.76786 0.00222 0 1 Mshowa
0.95387 0.00847 moveto
0.95387 0.02097 lineto
stroke
0 setgray
[(1000)] 0.95387 0.00222 0 1 Mshowa
0.02381 0 moveto
0.02381 0.61803 lineto
stroke
0.01756 0.14062 moveto
0.03006 0.14062 lineto
stroke
0 setgray
[(0.001)] 0.01131 0.14062 1 0 Mshowa
0.01756 0.26652 moveto
0.03006 0.26652 lineto
stroke
0 setgray
[(0.002)] 0.01131 0.26652 1 0 Mshowa
0.01756 0.39243 moveto
0.03006 0.39243 lineto
stroke
0 setgray
[(0.003)] 0.01131 0.39243 1 0 Mshowa
0.01756 0.51833 moveto
0.03006 0.51833 lineto
stroke
0 setgray
[(0.004)] 0.01131 0.51833 1 0 Mshowa
grestore
grestore

% legend and panel label
[(ML)] 0.7 0.43125 0 -1 Mshowa
[(EMAP)] 0.73 0.38125 0 -1 Mshowa
[(LMS-C)] 0.74 0.33125 0 -1 Mshowa
[(\(b\))] 0.7 0.53125 0 -1 Mshowa
gsave
0.67 setgray
0.005 setlinewidth
0.53 0.444 moveto
0.66 0.444 lineto
stroke
0.33 setgray
0.53 0.394 moveto
0.66 0.394 lineto
stroke
0. setgray
0.53 0.344 moveto
0.66 0.344 lineto
stroke
grestore


0 0 moveto
1 0 lineto
1 0.618034 lineto
0 0.618034 lineto
closepath
clip
newpath
0 setgray
gsave
gsave
0.004 setlinewidth
0.67 setgray
0.05357 0.60332 moveto
0.08333 0.59413 lineto
0.14286 0.34396 lineto
0.2619 0.3223 lineto
0.5 0.0545 lineto
0.97619 0.03045 lineto
stroke
grestore
gsave
0.004 setlinewidth
0.33 setgray
0.05357 0.49857 moveto
0.08333 0.43322 lineto
0.14286 0.21931 lineto
0.2619 0.30958 lineto
0.5 0.05337 lineto
0.97619 0.03121 lineto
stroke
grestore
gsave
0.004 setlinewidth
0.0 setgray
0.05357 0.50398 moveto
0.08333 0.43083 lineto
0.14286 0.35881 lineto
0.2619 0.33464 lineto
0.5 0.05576 lineto
0.97619 0.04317 lineto
stroke
grestore
grestore
% End of Graphics
MathPictureEnd
%%EPS Trailer
end

%%EndDocument
 GE /Times-Bold SF
17723 53384 MT
(Figure 4-11:)SH
/Times-Roman SF
24046 XM
(Asymptotic MSE \050after 10 forward-backward iterations\051)SH
20850 54580 MT
(vs. observation sequence length for ML, EMAP, and LMS-C estimates)SH
27531 55776 MT
(for \050)SH
/Symbol SF
(d)SH
/Times-Roman SF
(,)SH
/Symbol SF
(r)SH
/Times-Roman SF
(\051 = \050a\051 \0501.0,0.5\051 and \050b\051 \0500.5,0.9\051.)SH
13300 58761 MT
(Figures 4-11 \050a\051 and \050b\051 show typical results using)
199 W( computer-generated data in the form of)200 W
10800 60500 MT
(learning curves of MSE versus number of observations, as)
50 W( in Chapter 2.  Shown in each graph is the)49 W
10800 62239 MT
(asymptotic MSE \050after 10 forward-backward iterations\051 for the ML, EMAP,)
107 W( and LMSC estimators.)108 W
10800 63978 MT
(Under average conditions \0504-11\050a\051\051, there is no difference between)
126 W( the four estimates.  Under con-)125 W
10800 65717 MT
(ditions most favorable for)
83 W( adaptation \0504-11\050b\051\051, the differences are minor and occur only for shorter)84 W
10800 67456 MT
(observation sequence lengths.  Figure 4-12 further demonstrates this point)
75 W( for the learning curve for)74 W
10800 69195 MT
(MSE versus forward-backward iteration.  The difference between)
131 W( the ML and EMAP MSE in this)132 W
10800 70934 MT
(graph is negligible for all iterations of the forward-backward algorithm.)SH
ES
%%Page: 97 98
BS
0 SI
10 /Times-Roman AF
54800 4286 MT
(97)SH
11 SS 
720 1000 0 18900 24912 GB 
%%BeginDocument: /usr0/rozzi/Documentation/PhDThesis/Chapter4/MLvsEMAP.eps
%!PS-Adobe-2.0 EPSF-1.2
%%BoundingBox: 0 0 400 246
%%Creator: Mathematica
%%Title: Clipboard
%%CreationDate: Never Never
%%EndComments
50 dict begin
/Mnodistort true def
/pageDashArray [4] def
/nullDashArray [] def

% Compute the minimum of two numbers.
/Mmin {         % p q Mmin min(p,q)
        2 copy          % p q p q
        gt              % p q p>q?
        { exch } if     % min(p,q) max(p,q)
        pop             % min(p,q)
} bind def


% Compute the maximum of two numbers.
/Mmax {         % p q Mmax max(p,q)
        2 copy          % p q p q
        lt              % p q p<q?
        { exch } if     % max(p,q) min(p,q)
        pop             % max(p,q)
} bind def

/Mpstart {
    MathPictureStart
} bind def
/Mpend {
    MathPictureEnd
} bind def
/Mscale {
    0 1 0 1
    5 -1 roll
    MathScale
} bind def
/Plain
        /Courier findfont
def
/Bold
        /Courier-Bold findfont
def
/Italic
        /Courier-Oblique findfont
def
/MathPictureStart {
        gsave
        newpath
        /Mtmatrix
        matrix currentmatrix
        def
        Plain
        Mfontsize scalefont
        setfont
0 setgray 0 setlinewidth
} bind def
/MathPictureEnd {
        grestore
} bind def
/Mdot {
        moveto
        0 0 rlineto
        stroke
} def
/Mtetra {
        moveto
        lineto
        lineto
        lineto
        fill
} def
/Metetra {
        moveto
        lineto
        lineto
        lineto
        closepath
        gsave
        fill
        grestore
        0 setgray
        stroke
} def
/Mistroke {
        flattenpath
        0 0 0
        {
        4 2 roll
        pop pop
        }
        {
        4 -1 roll
        2 index
        sub dup mul
        4 -1 roll
        2 index
        sub dup mul
        add sqrt
        4 -1 roll
        add
        3 1 roll
        }
        {
        stop
        }
        {
        stop
        }
        pathforall
        pop pop
        currentpoint
        stroke
        moveto
        currentdash
        3 -1 roll
        add
        setdash
} def
/Mfstroke {
        stroke
        currentdash
        pop 0
        setdash
} def
/Msboxa {
        newpath
        5 -1 roll
        Mvboxa
        pop
        6 -1 roll
        5 -1 roll
        4 -1 roll
        Msboxa1
        5 -3 roll
        Msboxa1
        [
        7 -2 roll
        [ 2 index 2 index
        10 -1 roll
        9 -1 roll
        ]
        6 1 roll
        5 -2 roll
        ]
} bind def
        
/Msboxa1 {
        sub
        2 div
        dup
        2 index
        1 add
        mul
        3 -1 roll
        -1 add
        3 -1 roll
        mul
} bind def
/Mvboxa {
        gsave
        newpath
        [ true
        3 -1 roll
        {
        Mbbox
        5 -1 roll
        {
        0
        5 1 roll
        }
        {
        7 -1 roll
        exch sub
        (m) stringwidth pop
        .3 mul
        sub
        7 1 roll
        6 -1 roll
        4 -1 roll
        Mmin
        3 -1 roll
        5 index
        add
        5 -1 roll
        4 -1 roll
        Mmax
        4 -1 roll
        }
        ifelse
        false
        }
        forall
        { stop } if
        counttomark
        1 add
        4 roll
        ]
        grestore
} bind def
/Mbbox {
        0 0 moveto
        false charpath
        flattenpath
        pathbbox
        newpath
} bind def
/Mmin {
        2 copy
        gt
        { exch } if
        pop
} bind def
/Mmax {
        2 copy
        lt
        { exch } if
        pop
} bind def
/Mshowa {
        4 -2 roll
        moveto
        2 index
        Mtmatrix setmatrix
        Mvboxa
        7 1 roll
        6 -1 roll
        5 -1 roll
        4 -1 roll
        Mshowa1
        4 1 roll
        Mshowa1
        rmoveto
        currentpoint
        0 1
        4 index length
        -1 add
        {
        2 index
        4 index
        2 index
        get
        3 index
        add
        moveto
        4 index
        exch get
        show
        } for
        pop pop pop pop
        Mgmatrix setmatrix
} bind def
/Mshowa1 {
        2 copy
        add
        4 1 roll
        sub
        mul
        sub
        -2 div
} bind def
/MathScale {
        Mwidth
        Mheight
        Mlp
        translate
        scale
        /Mgmatrix
        matrix currentmatrix
        def
        /Msaveaa exch def
        /Msavebb exch def
        /Msavecc exch def
        /Msavedd exch def
} bind def
/Mlp {
        3 copy
        Mlpfirst
        {
        Mnodistort
        {
        Mmin
        dup
        } if
        4 index
        2 index
        2 index
        Mlprun
        11 index
        11 -1 roll
        10 -4 roll
        Mlp1
        8 index
        9 -5 roll
        Mlp1
        4 -1 roll
        and
        { exit } if
        3 -1 roll
        pop pop
        } loop
        exch
        3 1 roll
        7 -3 roll
        pop pop pop
} bind def
/Mlpfirst {
        3 -1 roll
        dup length
        2 copy
        -2 add
        get
        aload
        pop pop pop
        4 -2 roll
        -1 add
        get
        aload
        pop pop pop
        6 -1 roll
        3 -1 roll
        5 -1 roll
        sub
        dup /MsaveAx exch def
        div
        4 1 roll
        exch sub
        dup /MsaveAy exch def
        div
} bind def
/Mlprun {
        2 copy
        4 index
        0 get
        dup
        4 1 roll
        Mlprun1
        3 copy
        8 -2 roll
        9 -1 roll
        {
        3 copy
        Mlprun1
        3 copy
        11 -3 roll
        /gt Mlpminmax
        8 3 roll
        11 -3 roll
        /lt Mlpminmax
        8 3 roll
        } forall
        pop pop pop pop
        3 1 roll
        pop pop
        aload pop
        5 -1 roll
        aload pop
        exch
        6 -1 roll
        Mlprun2
        8 2 roll
        4 -1 roll
        Mlprun2
        6 2 roll
        3 -1 roll
        Mlprun2
        4 2 roll
        exch
        Mlprun2
        6 2 roll
} bind def
/Mlprun1 {
        aload pop
        exch
        6 -1 roll
        5 -1 roll
        mul add
        4 -2 roll
        mul
        3 -1 roll
        add
} bind def
/Mlprun2 {
        2 copy
        add 2 div
        3 1 roll
        exch sub
} bind def
/Mlpminmax {
        cvx
        2 index
        6 index
        2 index
        exec
        {
        7 -3 roll
        4 -1 roll
        } if
        1 index
        5 index
        3 -1 roll
        exec
        {
        4 1 roll
        pop
        5 -1 roll
        aload
        pop pop
        4 -1 roll
        aload pop
        [
        8 -2 roll
        pop
        5 -2 roll
        pop
        6 -2 roll
        pop
        5 -1 roll
        ]
        4 1 roll
        pop
        }
        {
        pop pop pop
        } ifelse
} bind def
/Mlp1 {
        5 index
        3 index sub
        5 index
        2 index mul
        1 index
        le
        1 index
        0 le
        or
        dup
        not
        {
        1 index
        3 index div
        .99999 mul
        8 -1 roll
        pop
        7 1 roll
        }
        if
        8 -1 roll
        2 div
        7 -2 roll
        pop sub
        5 index
        6 -3 roll
        pop pop
        mul sub
        exch
} bind def
/Mfontsize      12 def
/Mleft          0.000000 def
/Mbottom        246.000000 def
/Mwidth         400.000000 def
/Mheight        246.000000 def
/Courier findfont 12 scalefont setfont
%!
%%Creator: Mathematica
%%AspectRatio: 0.61803 
MathPictureStart
% Scaling calculations
0.02381 0.09524 0.01472 10.84464 [
[(2)] 0.21429 0.00222 0 1 Msboxa
[(4)] 0.40476 0.00222 0 1 Msboxa
[(6)] 0.59524 0.00222 0 1 Msboxa
[(8)] 0.78571 0.00222 0 1 Msboxa
[(10)] 0.97619 0.00222 0 1 Msboxa
[(0.01)] 0.01131 0.12316 1 0 Msboxa
[(0.02)] 0.01131 0.23161 1 0 Msboxa
[(0.03)] 0.01131 0.34005 1 0 Msboxa
[(0.04)] 0.01131 0.4485 1 0 Msboxa
[(0.05)] 0.01131 0.55695 1 0 Msboxa
[ -0.001 -0.001 0 0 ]
[ 1.001 0.61903 0 0 ]
] MathScale
% Start of Graphics
1 setlinecap
1 setlinejoin
newpath
%%Object: Graphics
[ ] 0 setdash
0 setgray
gsave
gsave
0.002 setlinewidth
0 0.01472 moveto
1 0.01472 lineto
stroke
0.21429 0.00847 moveto
0.21429 0.02097 lineto
stroke
0 setgray
[(2)] 0.21429 0.00222 0 1 Mshowa
0.40476 0.00847 moveto
0.40476 0.02097 lineto
stroke
0 setgray
[(4)] 0.40476 0.00222 0 1 Mshowa
0.59524 0.00847 moveto
0.59524 0.02097 lineto
stroke
0 setgray
[(6)] 0.59524 0.00222 0 1 Mshowa
0.78571 0.00847 moveto
0.78571 0.02097 lineto
stroke
0 setgray
[(8)] 0.78571 0.00222 0 1 Mshowa
0.97619 0.00847 moveto
0.97619 0.02097 lineto
stroke
0 setgray
[(10)] 0.97619 0.00222 0 1 Mshowa
0.02381 0 moveto
0.02381 0.61803 lineto
stroke
0.01756 0.12316 moveto
0.03006 0.12316 lineto
stroke
0 setgray
[(0.01)] 0.01131 0.12316 1 0 Mshowa
0.01756 0.23161 moveto
0.03006 0.23161 lineto
stroke
0 setgray
[(0.02)] 0.01131 0.23161 1 0 Mshowa
0.01756 0.34005 moveto
0.03006 0.34005 lineto
stroke
0 setgray
[(0.03)] 0.01131 0.34005 1 0 Mshowa
0.01756 0.4485 moveto
0.03006 0.4485 lineto
stroke
0 setgray
[(0.04)] 0.01131 0.4485 1 0 Mshowa
0.01756 0.55695 moveto
0.03006 0.55695 lineto
stroke
0 setgray
[(0.05)] 0.01131 0.55695 1 0 Mshowa
grestore
grestore

% legend and panel label
[(ML)] 0.71 0.43125 0 -1 Mshowa
[(EMAP)] 0.73 0.38125 0 -1 Mshowa
gsave
0.0 setgray
0.005 setlinewidth
0.53 0.444 moveto
0.66 0.444 lineto
stroke
0.33 setgray
0.53 0.394 moveto
0.66 0.394 lineto
stroke
grestore

0 0 moveto
1 0 lineto
1 0.618034 lineto
0 0.618034 lineto
closepath
clip
newpath
0 setgray
gsave
gsave
0.004 setlinewidth
0.11905 0.60332 moveto
0.21429 0.23873 lineto
0.30952 0.16311 lineto
0.40476 0.12472 lineto
0.5 0.0988 lineto
0.59524 0.07751 lineto
0.69048 0.06167 lineto
0.78571 0.05224 lineto
0.88095 0.04664 lineto
0.97619 0.04262 lineto
stroke
grestore
gsave
0.004 setlinewidth
0.3333 setgray
0.11905 0.58912 moveto
0.21429 0.23217 lineto
0.30952 0.15472 lineto
0.40476 0.11363 lineto
0.5 0.08618 lineto
0.59524 0.06503 lineto
0.69048 0.05076 lineto
0.78571 0.04267 lineto
0.88095 0.03789 lineto
0.97619 0.03458 lineto
stroke
grestore
grestore
% End of Graphics
MathPictureEnd
%%EPS Trailer
end

%%EndDocument
 GE /Times-Bold SF
15171 26664 MT
(Figure 4-12:)SH
/Times-Roman SF
21494 XM
(ML and EMAP MSE vs forward-backward iteration for observation)SH
27570 27860 MT
(sequence length of 256,)SH
/Symbol SF
38291 XM
(d)SH
/Times-Roman SF
39109 XM
(= 0.5,)SH
/Symbol SF
41929 XM
(r)SH
/Times-Roman SF
42808 XM
(= 0.9.)SH
13300 30845 MT
(The behavior with)
250 W( respect to dogmatism of the learning curves for MSE as a function of)249 W
10800 32584 MT
(forward-backward iteration is as one might expect given the analysis in Chapter 2.)
107 W( For)
490 W( small dog-)108 W
10800 34323 MT
(matism, the curves showed a large)
115 W( initial error which converged fairly quickly.  As the dogmatism)114 W
10800 36062 MT
(increases, these curves become)
141 W( flatter since the trial means are closer to the prior mean)142 W
/Symbol SF
51407 XM
(m)SH
/Times-Roman SF
52491 XM
(. With)559 W
9 /Times-Italic AF
52041 36422 MT
(o)SH
11 /Times-Roman AF
10800 37801 MT
(respect to correlation, the MSE decreased as the means of the)
39 W( data became more correlated.  Also, as)38 W
10800 39540 MT
(the correlation increased the difference between the asymptotic MSE for)
85 W( short and long observation)86 W
10800 41279 MT
(sequences was smaller,)85 W
/Times-Italic SF
21561 XM
(i.e.)SH
/Times-Roman SF
(, shorter lengths were)
85 W( almost as effective as longer sequences.  A crucial)84 W
10800 43018 MT
(observation from the correlation experiments is that the)
205 W( results were the same for all estimators,)206 W
/Times-Italic SF
10800 44757 MT
(including the maximum likelihood estimate)71 W
/Times-Roman SF
(. The)
416 W( ML estimate does not explicitly model correlation,)70 W
10800 46496 MT
(yet \050as Figure 4-13 shows\051, in the HMM framework this estimate demonstrates a dependence)
188 W( on)189 W
10800 48235 MT
(correlation.)SH
720 1000 0 18900 67143 GB 
%%BeginDocument: /usr0/rozzi/Documentation/PhDThesis/Chapter4/MLvsCor.eps
%!PS-Adobe-2.0 EPSF-1.2
%%BoundingBox: 0 0 400 246
%%Creator: Mathematica
%%Title: Clipboard
%%CreationDate: Never Never
%%EndComments
50 dict begin
/Mnodistort true def
/pageDashArray [4] def
/nullDashArray [] def

% Compute the minimum of two numbers.
/Mmin {         % p q Mmin min(p,q)
        2 copy          % p q p q
        gt              % p q p>q?
        { exch } if     % min(p,q) max(p,q)
        pop             % min(p,q)
} bind def


% Compute the maximum of two numbers.
/Mmax {         % p q Mmax max(p,q)
        2 copy          % p q p q
        lt              % p q p<q?
        { exch } if     % max(p,q) min(p,q)
        pop             % max(p,q)
} bind def

/Mpstart {
    MathPictureStart
} bind def
/Mpend {
    MathPictureEnd
} bind def
/Mscale {
    0 1 0 1
    5 -1 roll
    MathScale
} bind def
/Plain
        /Courier findfont
def
/Bold
        /Courier-Bold findfont
def
/Italic
        /Courier-Oblique findfont
def
/MathPictureStart {
        gsave
        newpath
        /Mtmatrix
        matrix currentmatrix
        def
        Plain
        Mfontsize scalefont
        setfont
0 setgray 0 setlinewidth
} bind def
/MathPictureEnd {
        grestore
} bind def
/Mdot {
        moveto
        0 0 rlineto
        stroke
} def
/Mtetra {
        moveto
        lineto
        lineto
        lineto
        fill
} def
/Metetra {
        moveto
        lineto
        lineto
        lineto
        closepath
        gsave
        fill
        grestore
        0 setgray
        stroke
} def
/Mistroke {
        flattenpath
        0 0 0
        {
        4 2 roll
        pop pop
        }
        {
        4 -1 roll
        2 index
        sub dup mul
        4 -1 roll
        2 index
        sub dup mul
        add sqrt
        4 -1 roll
        add
        3 1 roll
        }
        {
        stop
        }
        {
        stop
        }
        pathforall
        pop pop
        currentpoint
        stroke
        moveto
        currentdash
        3 -1 roll
        add
        setdash
} def
/Mfstroke {
        stroke
        currentdash
        pop 0
        setdash
} def
/Msboxa {
        newpath
        5 -1 roll
        Mvboxa
        pop
        6 -1 roll
        5 -1 roll
        4 -1 roll
        Msboxa1
        5 -3 roll
        Msboxa1
        [
        7 -2 roll
        [ 2 index 2 index
        10 -1 roll
        9 -1 roll
        ]
        6 1 roll
        5 -2 roll
        ]
} bind def
        
/Msboxa1 {
        sub
        2 div
        dup
        2 index
        1 add
        mul
        3 -1 roll
        -1 add
        3 -1 roll
        mul
} bind def
/Mvboxa {
        gsave
        newpath
        [ true
        3 -1 roll
        {
        Mbbox
        5 -1 roll
        {
        0
        5 1 roll
        }
        {
        7 -1 roll
        exch sub
        (m) stringwidth pop
        .3 mul
        sub
        7 1 roll
        6 -1 roll
        4 -1 roll
        Mmin
        3 -1 roll
        5 index
        add
        5 -1 roll
        4 -1 roll
        Mmax
        4 -1 roll
        }
        ifelse
        false
        }
        forall
        { stop } if
        counttomark
        1 add
        4 roll
        ]
        grestore
} bind def
/Mbbox {
        0 0 moveto
        false charpath
        flattenpath
        pathbbox
        newpath
} bind def
/Mmin {
        2 copy
        gt
        { exch } if
        pop
} bind def
/Mmax {
        2 copy
        lt
        { exch } if
        pop
} bind def
/Mshowa {
        4 -2 roll
        moveto
        2 index
        Mtmatrix setmatrix
        Mvboxa
        7 1 roll
        6 -1 roll
        5 -1 roll
        4 -1 roll
        Mshowa1
        4 1 roll
        Mshowa1
        rmoveto
        currentpoint
        0 1
        4 index length
        -1 add
        {
        2 index
        4 index
        2 index
        get
        3 index
        add
        moveto
        4 index
        exch get
        show
        } for
        pop pop pop pop
        Mgmatrix setmatrix
} bind def
/Mshowa1 {
        2 copy
        add
        4 1 roll
        sub
        mul
        sub
        -2 div
} bind def
/MathScale {
        Mwidth
        Mheight
        Mlp
        translate
        scale
        /Mgmatrix
        matrix currentmatrix
        def
        /Msaveaa exch def
        /Msavebb exch def
        /Msavecc exch def
        /Msavedd exch def
} bind def
/Mlp {
        3 copy
        Mlpfirst
        {
        Mnodistort
        {
        Mmin
        dup
        } if
        4 index
        2 index
        2 index
        Mlprun
        11 index
        11 -1 roll
        10 -4 roll
        Mlp1
        8 index
        9 -5 roll
        Mlp1
        4 -1 roll
        and
        { exit } if
        3 -1 roll
        pop pop
        } loop
        exch
        3 1 roll
        7 -3 roll
        pop pop pop
} bind def
/Mlpfirst {
        3 -1 roll
        dup length
        2 copy
        -2 add
        get
        aload
        pop pop pop
        4 -2 roll
        -1 add
        get
        aload
        pop pop pop
        6 -1 roll
        3 -1 roll
        5 -1 roll
        sub
        dup /MsaveAx exch def
        div
        4 1 roll
        exch sub
        dup /MsaveAy exch def
        div
} bind def
/Mlprun {
        2 copy
        4 index
        0 get
        dup
        4 1 roll
        Mlprun1
        3 copy
        8 -2 roll
        9 -1 roll
        {
        3 copy
        Mlprun1
        3 copy
        11 -3 roll
        /gt Mlpminmax
        8 3 roll
        11 -3 roll
        /lt Mlpminmax
        8 3 roll
        } forall
        pop pop pop pop
        3 1 roll
        pop pop
        aload pop
        5 -1 roll
        aload pop
        exch
        6 -1 roll
        Mlprun2
        8 2 roll
        4 -1 roll
        Mlprun2
        6 2 roll
        3 -1 roll
        Mlprun2
        4 2 roll
        exch
        Mlprun2
        6 2 roll
} bind def
/Mlprun1 {
        aload pop
        exch
        6 -1 roll
        5 -1 roll
        mul add
        4 -2 roll
        mul
        3 -1 roll
        add
} bind def
/Mlprun2 {
        2 copy
        add 2 div
        3 1 roll
        exch sub
} bind def
/Mlpminmax {
        cvx
        2 index
        6 index
        2 index
        exec
        {
        7 -3 roll
        4 -1 roll
        } if
        1 index
        5 index
        3 -1 roll
        exec
        {
        4 1 roll
        pop
        5 -1 roll
        aload
        pop pop
        4 -1 roll
        aload pop
        [
        8 -2 roll
        pop
        5 -2 roll
        pop
        6 -2 roll
        pop
        5 -1 roll
        ]
        4 1 roll
        pop
        }
        {
        pop pop pop
        } ifelse
} bind def
/Mlp1 {
        5 index
        3 index sub
        5 index
        2 index mul
        1 index
        le
        1 index
        0 le
        or
        dup
        not
        {
        1 index
        3 index div
        .99999 mul
        8 -1 roll
        pop
        7 1 roll
        }
        if
        8 -1 roll
        2 div
        7 -2 roll
        pop sub
        5 index
        6 -3 roll
        pop pop
        mul sub
        exch
} bind def
/Mfontsize      12 def
/Mleft          0.000000 def
/Mbottom        246.000000 def
/Mwidth         400.000000 def
/Mheight        246.000000 def
/Courier findfont 12 scalefont setfont
%!
%%Creator: Mathematica
%%AspectRatio: 0.61803 
MathPictureStart
% Scaling calculations
0.02381 0.09524 0.01472 10.84464 [
[(2)] 0.21429 0.00222 0 1 Msboxa
[(4)] 0.40476 0.00222 0 1 Msboxa
[(6)] 0.59524 0.00222 0 1 Msboxa
[(8)] 0.78571 0.00222 0 1 Msboxa
[(10)] 0.97619 0.00222 0 1 Msboxa
[(0.01)] 0.01131 0.12316 1 0 Msboxa
[(0.02)] 0.01131 0.23161 1 0 Msboxa
[(0.03)] 0.01131 0.34005 1 0 Msboxa
[(0.04)] 0.01131 0.4485 1 0 Msboxa
[(0.05)] 0.01131 0.55695 1 0 Msboxa
[ -0.001 -0.001 0 0 ]
[ 1.001 0.61903 0 0 ]
] MathScale
% Start of Graphics
1 setlinecap
1 setlinejoin
newpath
%%Object: Graphics
[ ] 0 setdash
0 setgray
gsave
gsave
0.002 setlinewidth
0 0.01472 moveto
1 0.01472 lineto
stroke
0.21429 0.00847 moveto
0.21429 0.02097 lineto
stroke
0 setgray
[(2)] 0.21429 0.00222 0 1 Mshowa
0.40476 0.00847 moveto
0.40476 0.02097 lineto
stroke
0 setgray
[(4)] 0.40476 0.00222 0 1 Mshowa
0.59524 0.00847 moveto
0.59524 0.02097 lineto
stroke
0 setgray
[(6)] 0.59524 0.00222 0 1 Mshowa
0.78571 0.00847 moveto
0.78571 0.02097 lineto
stroke
0 setgray
[(8)] 0.78571 0.00222 0 1 Mshowa
0.97619 0.00847 moveto
0.97619 0.02097 lineto
stroke
0 setgray
[(10)] 0.97619 0.00222 0 1 Mshowa
% curve labels
[(0.9)] 0.87619 0.08222 0 1 Mshowa
[(0.1)] 0.87619 0.26222 0 1 Mshowa
0.02381 0 moveto
0.02381 0.61803 lineto
stroke
0.01756 0.12316 moveto
0.03006 0.12316 lineto
stroke
0 setgray
[(0.01)] 0.01131 0.12316 1 0 Mshowa
0.01756 0.23161 moveto
0.03006 0.23161 lineto
stroke
0 setgray
[(0.02)] 0.01131 0.23161 1 0 Mshowa
0.01756 0.34005 moveto
0.03006 0.34005 lineto
stroke
0 setgray
[(0.03)] 0.01131 0.34005 1 0 Mshowa
0.01756 0.4485 moveto
0.03006 0.4485 lineto
stroke
0 setgray
[(0.04)] 0.01131 0.4485 1 0 Mshowa
0.01756 0.55695 moveto
0.03006 0.55695 lineto
stroke
0 setgray
[(0.05)] 0.01131 0.55695 1 0 Mshowa
grestore
grestore
0 0 moveto
1 0 lineto
1 0.618034 lineto
0 0.618034 lineto
closepath
clip
newpath
0 setgray
gsave
gsave
0.004 setlinewidth
0.33 setgray
0.11905 0.59231 moveto
0.21429 0.40638 lineto
0.30952 0.31997 lineto
0.40476 0.28111 lineto
0.5 0.26109 lineto
0.59524 0.2466 lineto
0.69048 0.23558 lineto
0.78571 0.22888 lineto
0.88095 0.22574 lineto
0.97619 0.22435 lineto
stroke
grestore
gsave
0.004 setlinewidth
0.11905 0.60332 moveto
0.21429 0.23873 lineto
0.30952 0.16311 lineto
0.40476 0.12472 lineto
0.5 0.0988 lineto
0.59524 0.07751 lineto
0.69048 0.06167 lineto
0.78571 0.05224 lineto
0.88095 0.04664 lineto
0.97619 0.04262 lineto
stroke
grestore
grestore
% End of Graphics
MathPictureEnd
%%EPS Trailer
end

%%EndDocument
 GE /Times-Bold SF
13753 68895 MT
(Figure 4-13:)SH
/Times-Roman SF
20076 XM
(Maximum likelihood mean-square error vs forward-backward iteration for)SH
27616 70091 MT
(correlations of 0.1 and 0.9  with)SH
/Symbol SF
41943 XM
(d)SH
/Times-Roman SF
42761 XM
(= 0.5.)SH
ES
%%Page: 98 99
BS
0 SI
10 /Times-Roman AF
54800 4286 MT
(98)SH
11 SS 
13300 7955 MT
(The reason for the dependence of the)
27 W( ML estimate on the correlation of the means of the data is)26 W
10800 9694 MT
(that the HMM reestimation procedure implicitly models this correlation.)
2 W( What)
280 W( has been referred to as)3 W
10800 11433 MT
(the maximum likelihood estimate in the context)
82 W( of the HMM studies here is the reestimation proce-)81 W
10800 13172 MT
(dure which is specified by imposing Markov properties on the general EM procedure \050see Equation)90 W
10800 14911 MT
(\0504.19\051\051. It)
291 W( is)
8 W( not the same as the familiar sample mean \050Equation \0502.10\051\051 because the HMM ML mean)7 W
10800 16650 MT
(updates each mixture component according to the)
308 W( probability that the current observation was)309 W
10800 18389 MT
(produced by that component, so)
130 W( each component is updated after each observation, and often with)129 W
10800 20128 MT
(data attributable to other components.  On the other hand, the sample mean \050using supervised)
102 W( label)103 W
10800 21867 MT
(feedback\051 updates only the true component or class.)
87 W( Since)
448 W( no data from other classes are involved,)86 W
10800 23606 MT
(the sample mean estimate and MSE are therefore)
118 W( independent of correlation as Equation \0502.12\051 in-)119 W
10800 25345 MT
(dicates. The)
574 W( HMM ML estimate, due to its use of a probabilistic update, improves as correlation)149 W
10800 27084 MT
(increases because as the)
106 W( means of the observations become more correlated, data from components)107 W
10800 28823 MT
(other than the correct one convey more information about the correct component's mean.)SH
13300 31808 MT
(An analytical expression for the HMM ML MSE most likely does not)
12 W( exist, but that it decreases)11 W
10800 33547 MT
(with correlation can)
24 W( be described roughly and verified with empirical results.  With the sample mean,)25 W
10800 35286 MT
(each class mean is updated with data from only that class.  When deriving)
204 W( the MSE, then, it is)203 W
10800 37025 MT
(possible to consider each class separately since)
66 W( no cross-class terms \050elements from the off-diagonal)67 W
10800 38764 MT
(blocks of)183 W
/Symbol SF
15503 XM
(S)SH
/Times-Roman SF
16604 XM
(\051 appear in the expected value.  For the HMM ML reestimate, each class mean is a)182 W
9 /Times-Italic AF
16154 39124 MT
(o)SH
11 /Times-Roman AF
10800 40503 MT
(weighted summation)
93 W( of data from all other classes, and the MSE expression is no longer separable.)94 W
10800 42242 MT
(Furthermore, the)
53 W( data from other classes introduce cross-class terms into the MSE expression which,)52 W
10800 43981 MT
(as the empirical results demonstrate, help to reduce estimation error.)SH
13300 46966 MT
(To substantiate)
116 W( these claims, two additional HMM experiments with computer-generated data)117 W
10800 48705 MT
(were performed.)
111 W( The)
495 W( first experiment used a hard decision in the mean-reestimation procedure for)110 W
10800 50444 MT
(the HMM,)135 W
/Times-Italic SF
15989 XM
(i.e.)SH
/Times-Roman SF
(, only the most likely mixture component was updated with)
135 W( the current observation.)136 W
10800 52183 MT
(The MSE should be greater)
112 W( using updates based on hard decisions than with probabilistic updating)111 W
10800 53922 MT
(because only one component is updated per observation.  The MSE should still decrease as correla-)84 W
10800 55661 MT
(tion increases, however, since some useful information is obtained even when the hard)
138 W( decision is)137 W
10800 57400 MT
(wrong \050or in other)
98 W( words there are still some [but fewer] cross terms in the MSE expression\051.  The)99 W
10800 59139 MT
(second experiment)
200 W( was conducted using supervised feedback of component membership.  In this)199 W
10800 60878 MT
(case, like the)
142 W( sample mean, the HMM ML estimate should be independent of correlation since no)143 W
10800 62617 MT
(cross-class terms appear in the MSE expression.)SH
13300 65602 MT
(Figure 4-14 shows the results of these)
60 W( two experiments for)59 W
/Symbol SF
39984 XM
(d)SH
/Times-Roman SF
40861 XM
(= 0.5,)59 W
/Symbol SF
43799 XM
(r)SH
/Times-Roman SF
44737 XM
(= 0.9, and)59 W
/Times-Italic SF
49597 XM
(T)SH
/Times-Roman SF
50543 XM
(= 256.  The)59 W
10800 67341 MT
(uppermost curve is the MSE for the hard-decision experiment, the)
109 W( middle curve is for probabilistic)110 W
10800 69080 MT
(updating \050the conventional HMM estimate\051, and the lower curve is from)
111 W( the supervised component)110 W
10800 70819 MT
(feedback case.  In all cases the)
SH( empirical MSE behaves as predicted.  Comparison of the hard decision)1 W
ES
%%Page: 99 100
BS
0 SI
10 /Times-Roman AF
54800 4286 MT
(99)SH
11 SS 
720 1000 0 18900 24912 GB 
%%BeginDocument: /usr0/rozzi/Documentation/PhDThesis/Chapter4/MLvsFeedback.eps
%!PS-Adobe-2.0 EPSF-1.2
%%BoundingBox: 0 0 400 246
%%Creator: Mathematica
%%Title: Clipboard
%%CreationDate: Never Never
%%EndComments
50 dict begin
/Mnodistort true def
/pageDashArray [4] def
/nullDashArray [] def

% Compute the minimum of two numbers.
/Mmin {         % p q Mmin min(p,q)
        2 copy          % p q p q
        gt              % p q p>q?
        { exch } if     % min(p,q) max(p,q)
        pop             % min(p,q)
} bind def


% Compute the maximum of two numbers.
/Mmax {         % p q Mmax max(p,q)
        2 copy          % p q p q
        lt              % p q p<q?
        { exch } if     % max(p,q) min(p,q)
        pop             % max(p,q)
} bind def

/Mpstart {
    MathPictureStart
} bind def
/Mpend {
    MathPictureEnd
} bind def
/Mscale {
    0 1 0 1
    5 -1 roll
    MathScale
} bind def
/Plain
        /Courier findfont
def
/Bold
        /Courier-Bold findfont
def
/Italic
        /Courier-Oblique findfont
def
/MathPictureStart {
        gsave
        newpath
        /Mtmatrix
        matrix currentmatrix
        def
        Plain
        Mfontsize scalefont
        setfont
0 setgray 0 setlinewidth
} bind def
/MathPictureEnd {
        grestore
} bind def
/Mdot {
        moveto
        0 0 rlineto
        stroke
} def
/Mtetra {
        moveto
        lineto
        lineto
        lineto
        fill
} def
/Metetra {
        moveto
        lineto
        lineto
        lineto
        closepath
        gsave
        fill
        grestore
        0 setgray
        stroke
} def
/Mistroke {
        flattenpath
        0 0 0
        {
        4 2 roll
        pop pop
        }
        {
        4 -1 roll
        2 index
        sub dup mul
        4 -1 roll
        2 index
        sub dup mul
        add sqrt
        4 -1 roll
        add
        3 1 roll
        }
        {
        stop
        }
        {
        stop
        }
        pathforall
        pop pop
        currentpoint
        stroke
        moveto
        currentdash
        3 -1 roll
        add
        setdash
} def
/Mfstroke {
        stroke
        currentdash
        pop 0
        setdash
} def
/Msboxa {
        newpath
        5 -1 roll
        Mvboxa
        pop
        6 -1 roll
        5 -1 roll
        4 -1 roll
        Msboxa1
        5 -3 roll
        Msboxa1
        [
        7 -2 roll
        [ 2 index 2 index
        10 -1 roll
        9 -1 roll
        ]
        6 1 roll
        5 -2 roll
        ]
} bind def
        
/Msboxa1 {
        sub
        2 div
        dup
        2 index
        1 add
        mul
        3 -1 roll
        -1 add
        3 -1 roll
        mul
} bind def
/Mvboxa {
        gsave
        newpath
        [ true
        3 -1 roll
        {
        Mbbox
        5 -1 roll
        {
        0
        5 1 roll
        }
        {
        7 -1 roll
        exch sub
        (m) stringwidth pop
        .3 mul
        sub
        7 1 roll
        6 -1 roll
        4 -1 roll
        Mmin
        3 -1 roll
        5 index
        add
        5 -1 roll
        4 -1 roll
        Mmax
        4 -1 roll
        }
        ifelse
        false
        }
        forall
        { stop } if
        counttomark
        1 add
        4 roll
        ]
        grestore
} bind def
/Mbbox {
        0 0 moveto
        false charpath
        flattenpath
        pathbbox
        newpath
} bind def
/Mmin {
        2 copy
        gt
        { exch } if
        pop
} bind def
/Mmax {
        2 copy
        lt
        { exch } if
        pop
} bind def
/Mshowa {
        4 -2 roll
        moveto
        2 index
        Mtmatrix setmatrix
        Mvboxa
        7 1 roll
        6 -1 roll
        5 -1 roll
        4 -1 roll
        Mshowa1
        4 1 roll
        Mshowa1
        rmoveto
        currentpoint
        0 1
        4 index length
        -1 add
        {
        2 index
        4 index
        2 index
        get
        3 index
        add
        moveto
        4 index
        exch get
        show
        } for
        pop pop pop pop
        Mgmatrix setmatrix
} bind def
/Mshowa1 {
        2 copy
        add
        4 1 roll
        sub
        mul
        sub
        -2 div
} bind def
/MathScale {
        Mwidth
        Mheight
        Mlp
        translate
        scale
        /Mgmatrix
        matrix currentmatrix
        def
        /Msaveaa exch def
        /Msavebb exch def
        /Msavecc exch def
        /Msavedd exch def
} bind def
/Mlp {
        3 copy
        Mlpfirst
        {
        Mnodistort
        {
        Mmin
        dup
        } if
        4 index
        2 index
        2 index
        Mlprun
        11 index
        11 -1 roll
        10 -4 roll
        Mlp1
        8 index
        9 -5 roll
        Mlp1
        4 -1 roll
        and
        { exit } if
        3 -1 roll
        pop pop
        } loop
        exch
        3 1 roll
        7 -3 roll
        pop pop pop
} bind def
/Mlpfirst {
        3 -1 roll
        dup length
        2 copy
        -2 add
        get
        aload
        pop pop pop
        4 -2 roll
        -1 add
        get
        aload
        pop pop pop
        6 -1 roll
        3 -1 roll
        5 -1 roll
        sub
        dup /MsaveAx exch def
        div
        4 1 roll
        exch sub
        dup /MsaveAy exch def
        div
} bind def
/Mlprun {
        2 copy
        4 index
        0 get
        dup
        4 1 roll
        Mlprun1
        3 copy
        8 -2 roll
        9 -1 roll
        {
        3 copy
        Mlprun1
        3 copy
        11 -3 roll
        /gt Mlpminmax
        8 3 roll
        11 -3 roll
        /lt Mlpminmax
        8 3 roll
        } forall
        pop pop pop pop
        3 1 roll
        pop pop
        aload pop
        5 -1 roll
        aload pop
        exch
        6 -1 roll
        Mlprun2
        8 2 roll
        4 -1 roll
        Mlprun2
        6 2 roll
        3 -1 roll
        Mlprun2
        4 2 roll
        exch
        Mlprun2
        6 2 roll
} bind def
/Mlprun1 {
        aload pop
        exch
        6 -1 roll
        5 -1 roll
        mul add
        4 -2 roll
        mul
        3 -1 roll
        add
} bind def
/Mlprun2 {
        2 copy
        add 2 div
        3 1 roll
        exch sub
} bind def
/Mlpminmax {
        cvx
        2 index
        6 index
        2 index
        exec
        {
        7 -3 roll
        4 -1 roll
        } if
        1 index
        5 index
        3 -1 roll
        exec
        {
        4 1 roll
        pop
        5 -1 roll
        aload
        pop pop
        4 -1 roll
        aload pop
        [
        8 -2 roll
        pop
        5 -2 roll
        pop
        6 -2 roll
        pop
        5 -1 roll
        ]
        4 1 roll
        pop
        }
        {
        pop pop pop
        } ifelse
} bind def
/Mlp1 {
        5 index
        3 index sub
        5 index
        2 index mul
        1 index
        le
        1 index
        0 le
        or
        dup
        not
        {
        1 index
        3 index div
        .99999 mul
        8 -1 roll
        pop
        7 1 roll
        }
        if
        8 -1 roll
        2 div
        7 -2 roll
        pop sub
        5 index
        6 -3 roll
        pop pop
        mul sub
        exch
} bind def
/Mfontsize      12 def
/Mleft          0.000000 def
/Mbottom        246.000000 def
/Mwidth         400.000000 def
/Mheight        246.000000 def
/Courier findfont 12 scalefont setfont
%!
%%Creator: Mathematica
%%AspectRatio: 0.61803 
MathPictureStart
% Scaling calculations
0.02381 0.09524 0.01472 7.55599 [
[(2)] 0.21429 0.00222 0 1 Msboxa
[(4)] 0.40476 0.00222 0 1 Msboxa
[(6)] 0.59524 0.00222 0 1 Msboxa
[(8)] 0.78571 0.00222 0 1 Msboxa
[(10)] 0.97619 0.00222 0 1 Msboxa
[(0.02)] 0.01131 0.16583 1 0 Msboxa
[(0.04)] 0.01131 0.31695 1 0 Msboxa
[(0.06)] 0.01131 0.46807 1 0 Msboxa
[ -0.001 -0.001 0 0 ]
[ 1.001 0.61903 0 0 ]
] MathScale
% Start of Graphics
1 setlinecap
1 setlinejoin
newpath
%%Object: Graphics
[ ] 0 setdash
0 setgray
gsave
gsave
0.002 setlinewidth
0 0.01472 moveto
1 0.01472 lineto
stroke
0.21429 0.00847 moveto
0.21429 0.02097 lineto
stroke
0 setgray
[(2)] 0.21429 0.00222 0 1 Mshowa
0.40476 0.00847 moveto
0.40476 0.02097 lineto
stroke
0 setgray
[(4)] 0.40476 0.00222 0 1 Mshowa
0.59524 0.00847 moveto
0.59524 0.02097 lineto
stroke
0 setgray
[(6)] 0.59524 0.00222 0 1 Mshowa
0.78571 0.00847 moveto
0.78571 0.02097 lineto
stroke
0 setgray
[(8)] 0.78571 0.00222 0 1 Mshowa
0.97619 0.00847 moveto
0.97619 0.02097 lineto
stroke
0 setgray
[(10)] 0.97619 0.00222 0 1 Mshowa
0.02381 0 moveto
0.02381 0.61803 lineto
stroke
0.01756 0.16583 moveto
0.03006 0.16583 lineto
stroke
0 setgray
[(0.02)] 0.01131 0.16583 1 0 Mshowa
0.01756 0.31695 moveto
0.03006 0.31695 lineto
stroke
0 setgray
[(0.04)] 0.01131 0.31695 1 0 Mshowa
0.01756 0.46807 moveto
0.03006 0.46807 lineto
stroke
0 setgray
[(0.06)] 0.01131 0.46807 1 0 Mshowa
grestore
grestore

% legend and panel label
[(Hard)] 0.72 0.48125 0 -1 Mshowa
[(Soft)] 0.72 0.43125 0 -1 Mshowa
[(Supervised)] 0.78 0.38125 0 -1 Mshowa
gsave
0.5 setgray
0.005 setlinewidth
0.53 0.494 moveto
0.66 0.494 lineto
stroke
0.25 setgray
0.53 0.444 moveto
0.66 0.444 lineto
stroke
0. setgray
0.53 0.394 moveto
0.66 0.394 lineto
stroke
grestore

0 0 moveto
1 0 lineto
1 0.618034 lineto
0 0.618034 lineto
closepath
clip
newpath
0 setgray
gsave
gsave
0.004 setlinewidth
0. setgray
0.11905 0.13904 moveto
0.21429 0.03769 lineto
0.30952 0.03161 lineto
0.40476 0.0311 lineto
0.5 0.03113 lineto
0.59524 0.03121 lineto
0.69048 0.03127 lineto
0.78571 0.03132 lineto
0.88095 0.03134 lineto
0.97619 0.03135 lineto
stroke
grestore
gsave
0.004 setlinewidth
0.25 setgray
0.11905 0.42482 moveto
0.21429 0.1708 lineto
0.30952 0.11811 lineto
0.40476 0.09136 lineto
0.5 0.0733 lineto
0.59524 0.05846 lineto
0.69048 0.04743 lineto
0.78571 0.04086 lineto
0.88095 0.03696 lineto
0.97619 0.03416 lineto
stroke
grestore
gsave
0.004 setlinewidth
0.5 setgray
0.11905 0.60332 moveto
0.21429 0.31463 lineto
0.30952 0.25652 lineto
0.40476 0.2635 lineto
0.5 0.30656 lineto
0.59524 0.29615 lineto
0.69048 0.29973 lineto
0.78571 0.30804 lineto
0.88095 0.31658 lineto
0.97619 0.32168 lineto
stroke
grestore
grestore
% End of Graphics
MathPictureEnd
%%EPS Trailer
end

%%EndDocument
 GE /Times-Bold SF
12728 26664 MT
(Figure 4-14:)SH
/Times-Roman SF
19051 XM
(Maximum likelihood mean-square error for supervised feedback, soft decision,)SH
20212 27860 MT
(and hard decision of component membership with \050)SH
/Symbol SF
(d)SH
/Times-Roman SF
(,)SH
/Symbol SF
(r)SH
/Times-Roman SF
(,)SH
/Times-Italic SF
(T)SH
/Times-Roman SF
(\051 = \0500.5,0.9,256\051.)SH
10800 29811 MT
(and probabilistic curves demonstrates the)
121 W( importance of updating the component means after)120 W
/Times-Italic SF
53420 XM
(every)SH
/Times-Roman SF
10800 31550 MT
(observation. The)
357 W( figure also shows)
41 W( that the probabilistic ML MSE is initially much higher than with)42 W
10800 33289 MT
(supervised feedback, but that repeated forward-backward)
82 W( reestimation allows the ML estimate MSE)81 W
10800 35028 MT
(to eventually get down to supervised feedback MSE levels.)SH
13300 38013 MT
(As a result of the increased ML MSE due to probabilistic decisions in the HMM)
98 W( reestimation)99 W
10800 39752 MT
(procedure, performance of the more)
20 W( sophisticated EMAP and LMS-C estimates, which depend on the)19 W
10800 41491 MT
(ML estimate, is degraded.  This can be verified by performing)
114 W( EMAP adaptation in the supervised)115 W
10800 43230 MT
(feedback experiment; the resulting MSE is clearly)
121 W( lower than the ML MSE.  Supervised feedback,)120 W
10800 44969 MT
(however, is unavailable in realistic situations.)
4 W( Since)
285 W( the EMAP and LMS-C performance is degraded,)5 W
10800 46708 MT
(and the ML estimate makes use of correlation information, all three produce similar results in)
149 W( the)148 W
10800 48447 MT
(context of hidden Markov models.)SH
13300 51432 MT
(The above analysis suggests reasons for the marginal)
323 W( differences between the estimation)324 W
10800 53171 MT
(procedures in the)112 W
9 SS 
18985 XM
(SPHINX-SC)SH
11 SS 
24022 XM
(system. The)
499 W( reason that none of the estimators succeeded in substan-)112 W
10800 54910 MT
(tially reducing the error rate is that the dogmatism was high, averaging)
106 W( 2.0 and 3.2 for the cepstral)107 W
10800 56649 MT
(and differenced-cepstral codebooks.  When dogmatism is this high, there's little difference between)95 W
10800 58388 MT
(the prior \050speaker independent\051 and trial \050speaker dependent\051 means, and mean-vector adaptation)
108 W( is)109 W
10800 60127 MT
(ineffective. The)
1049 W( euclidean distances between adapted)
387 W( and unadapted means from)386 W
9 SS 
51150 XM
(SPHINX-SC)SH
11 SS 
10800 61866 MT
(codebooks were typically only 10%, 8%, and 1% of the magnitude of)74 W
/Symbol SF
42540 XM
(m)SH
/Times-Roman SF
43973 XM
(for the cepstral, difference)75 W
9 /Times-Italic AF
43174 62226 MT
(o)SH
11 /Times-Roman AF
10800 63605 MT
(cepstral, and)
140 W( power cepstral codebooks respectively.  In addition, no further improvement in MSE)139 W
10800 65344 MT
(was observed by further iterations of the forward-backward algorithm using the)
84 W( computer-simulated)85 W
10800 67083 MT
(data. This)
275 W( was also observed in the)SH
9 SS 
26715 XM
(SPHINX-SC)SH
11 SS 
31640 XM
(tests.)SH
ES
%%Page: 100 101
BS
0 SI
10 /Times-Roman AF
54300 4286 MT
(100)SH
13 /Times-Bold AF
10800 8071 MT
(4.6. Summary)SH
11 /Times-Roman AF
13300 10986 MT
(In this chapter the adaptation procedures of Chapter)
197 W( 2 were applied to the recognition of a)196 W
10800 12725 MT
(difficult phonetic-discrimination)
12 W( task using the)13 W
9 SS 
31793 XM
(SPHINX-SC)SH
11 SS 
36731 XM
(system, which is based on semi-continuous)13 W
10800 14464 MT
(HMMs. Adaptation)
393 W( in)59 W
9 SS 
21333 XM
(SPHINX-SC)SH
11 SS 
26317 XM
(via reestimation of the mean vectors of the)
59 W( codebooks was shown)58 W
10800 16203 MT
(to substantially reduce word error rates for)
47 W( certain individual speakers, but the reduction in error rate)48 W
10800 17942 MT
(averaged over all speakers was only 3.4 percent or less, or approximately 4 percent when)
106 W( a second)105 W
10800 19681 MT
(procedure is invoked that automatically evaluates the effect of the)
273 W( adaptation and rejects some)274 W
10800 21420 MT
(speakers as inappropriate candidates)
93 W( for adaptation.  Subsequent analyses using computer-simulated)92 W
10800 23159 MT
(data identified the attributes of the original data that limited the effectiveness of this method)
220 W( of)221 W
10800 24898 MT
(adaptation for this task.)SH
13300 27883 MT
(No significant difference)
68 W( between the maximum likelihood and EMAP or LMS-C reestimation)67 W
10800 29622 MT
(procedures was observed using the)15 W
9 SS 
26482 XM
(SPHINX-SC)SH
11 SS 
31422 XM
(system. Results)
305 W( with)
15 W( computer-generated data indicate)16 W
10800 31361 MT
(that the ML procedure's probabilistic update, necessary for unsupervised adaptation)
348 W( of HMM)347 W
10800 33100 MT
(parameters, has both a positive and)
165 W( negative effect.  The positive effect is that it allows all com-)166 W
10800 34839 MT
(ponents to be updated with data from each observation.  Updating a component mean with data)206 W
10800 36578 MT
(attributable to other components)
23 W( implicitly includes a dependence on correlation not present in super-)24 W
10800 38317 MT
(vised ML \050sample-mean\051 adaptation.  This)
1 W( lowers estimation error when the means of the components)SH
10800 40056 MT
(become more correlated.  The negative effect of the probabilistic update procedure is that)
68 W( the mean-)69 W
10800 41795 MT
(square error is much higher than)
51 W( in the supervised case.  Performance is therefore diminished for the)50 W
10800 43534 MT
(ML estimate and the EMAP and LMS-C estimates which include the ML mean.  Iteration of)
168 W( the)169 W
10800 45273 MT
(forward-backward algorithm can reduce the mean-square error to)
134 W( supervised levels, but only when)133 W
10800 47012 MT
(dogmatism is)
132 W( near or below 1.0 are there any significant difference between the ML, LMS-C, and)133 W
10800 48751 MT
(EMAP estimates.)SH
ES
%%Page: 101 102
BS
0 SI
10 /Times-Roman AF
54300 4286 MT
(101)SH
15 /Times-Bold AF
30071 15405 MT
(Chapter 5)SH
18484 18058 MT
(Conclusions and Suggestions for Future Work)SH
13 SS 
10800 22529 MT
(5.1. Overview of the Speaker Adaptation Problem)SH
11 /Times-Roman AF
13300 25444 MT
(The present study addressed the problem of)
4 W( speaker adaptation in continuous speech recognition)3 W
10800 27183 MT
(systems. Emphasis)
337 W( has been placed on adjusting the parameters of a set of reference templates to)
31 W( the)32 W
10800 28922 MT
(characteristics of a new speaker.  Speaker-adaptive systems)
220 W( circumvent the need for the lengthy)219 W
10800 30661 MT
(enrollment procedures of speaker-dependent systems, and can improve speaker-independent system)120 W
10800 32400 MT
(performance for speakers whose parameters markedly deviate from the)
484 W( speaker-independent)483 W
10800 34139 MT
(parameters.)SH
13300 37124 MT
(The desire for a speaker-adaptive, continuous-speech system places)
111 W( two important restrictions)112 W
10800 38863 MT
(on the adaptation process.  One is the necessity)
8 W( for a quick enrollment procedure.  Implications of this)7 W
10800 40602 MT
(restriction for adaptation are that the)
21 W( algorithms must be able to adapt on a relatively small amount of)22 W
10800 42341 MT
(speaker-specific training data, and they must not incur a)
50 W( large computational load.  The data require-)49 W
10800 44080 MT
(ments must be kept well below those for training speaker-dependent systems to justify the use of)163 W
10800 45819 MT
(adaptation. Given)
373 W( this limited set of observations, the adaptation)
49 W( algorithm should be able to exploit)48 W
10800 47558 MT
(any and all information available in the data quickly, and without sacrificing accuracy for speed.)SH
13300 50543 MT
(The second restriction is imposed by the continuous speaking)
108 W( style.  With continuous speech,)109 W
10800 52282 MT
(user feedback of)
121 W( phonetic or other subword recognition unit labels is unrealistic, if not impossible.)120 W
10800 54021 MT
(The adaptation algorithm must therefore operate in an unsupervised mode.)SH
13300 57006 MT
(Based on prior work with adaptation in the)93 W
9 SS 
33168 XM
(FEATURE)SH
11 SS 
37586 XM
(system and hidden)
93 W( Markov model-based)94 W
10800 58745 MT
(systems, the approach taken in the present study)
158 W( was to update mean vectors of the feature-based)157 W
10800 60484 MT
(system's parametric classifiers or the semi-continuous HMM's codebook.)
422 W( These)
1121 W( parameters)423 W
10800 62223 MT
(represent the most basic differences between speakers, and are less sensitive than other parameters)
36 W( to)35 W
10800 63962 MT
(the effects of training)
11 W( on limited numbers of speaker-specific data.  Due to the constraints imposed by)12 W
10800 65701 MT
(speaker-adaptive recognition, the emphasis in this work was on computational complexity and)
51 W( initial)50 W
10800 67440 MT
(convergence,)SH
/Times-Italic SF
16906 XM
(i.e.)SH
/Times-Roman SF
18525 XM
(to minimize the initial mean-square error as fast as possible.)SH
ES
%%Page: 102 103
BS
0 SI
10 /Times-Roman AF
54300 4286 MT
(102)SH
13 /Times-Bold AF
10800 8071 MT
(5.2. Conclusions)SH
11 /Times-Roman AF
13300 10986 MT
(The specific goal of the present study was to)
286 W( recast the extended maximum)287 W
/Times-Italic SF
50348 XM
(a posteriori)287 W
/Times-Roman SF
10800 12725 MT
(\050EMAP\051 estimation)
271 W( procedure in adaptive filtering terms, and to determine how successful this)270 W
10800 14464 MT
(adaptive-filter implementation was at reducing error rates)
75 W( in continuous speech recognition systems.)76 W
10800 16203 MT
(The first part of this goal was met through the development of a)
75 W( modified least mean-square \050LMS\051)74 W
10800 17942 MT
(algorithm called LMS-C.  The EMAP)
130 W( algorithm was demonstrated to be equivalent to a minimum)131 W
10800 19681 MT
(mean-square error \050MMSE\051 adaptive filter with a time-varying performance)
9 W( surface and optimal solu-)8 W
10800 21420 MT
(tion. A)
539 W( stochastic gradient approximation to the MMSE filter)
132 W( resulted in a LMS procedure which)133 W
10800 23159 MT
(required only one-third the computation of the EMAP estimate.)SH
13300 26144 MT
(Development of the expressions for the)
161 W( LMS-C estimate alone was not sufficient to provide)160 W
10800 27883 MT
(good estimation performance.  Coefficient initialization and choice of the LMS desired)
106 W( signal were)107 W
10800 29622 MT
(shown to be crucial for low)
173 W( initial error.  By analyzing the convergence properties of the EMAP)172 W
10800 31361 MT
(estimate and its LMS implementation, it was possible to)
77 W( determine LMS-C parameters which incor-)78 W
10800 33100 MT
(porated)SH
/Times-Italic SF
14440 XM
(a priori)67 W
/Times-Roman SF
18242 XM
(knowledge of the structure of the data into)
67 W( the LMS-C estimate.  It was empirically)66 W
10800 34839 MT
(demonstrated that)
33 W( the parameter values specified by the convergence analysis were necessary to min-)34 W
10800 36578 MT
(imize the initial estimation error.  In simulations, use)
134 W( of these parameters produced a mean-square)133 W
10800 38317 MT
(error \050MSE\051 which was)SH
/Times-Italic SF
21428 XM
(lower)SH
/Times-Roman SF
24209 XM
(than the EMAP estimate.)SH
13300 41302 MT
(Application of the LMS-C procedure to feature-based recognition was a qualified success.)254 W
10800 43041 MT
(When using data which)
75 W( were known to obey the gaussian assumption, the LMS-C algorithm proved)74 W
10800 44780 MT
(to be as)
149 W( effective as the EMAP procedure.  Both algorithms reduced the error rate in a four-class)150 W
10800 46519 MT
(phonetic classification example by 29 percent in an unsupervised mode.)
280 W( Additional)
833 W( tests with)279 W
10800 48258 MT
(computer-generated data \050generated using statistics of)
145 W( the actual front-vowel features\051 showed that)146 W
10800 49997 MT
(repeated iterations of the unsupervised adaptation procedure)
96 W( were able to reduce classification error)95 W
10800 51736 MT
(rates to)
135 W( levels closer to those obtained with supervised adaptation.  Error-rate reductions after five)136 W
10800 53475 MT
(iterations were on the order of 38 percent.)SH
13300 56460 MT
(Application to hidden Markov model-based recognition systems proved to be more)
9 W( problematic.)8 W
10800 58199 MT
(Distributions of the cepstral data in a semi-continuous version of the Carnegie Mellon)23 W
9 SS 
49195 XM
(SPHINX)SH
11 SS 
52744 XM
(system)SH
10800 59938 MT
(\050called)SH
9 SS 
14229 XM
(SPHINX-SC)SH
11 SS 
(\051 exhibited a large dogmatism, being on)
162 W( average greater than 2.0.  Results from)161 W
10800 61677 MT
(simulations, as discussed below, and analysis of the mean)
28 W( vector estimation procedures indicated that)29 W
10800 63416 MT
(the expected gains due to mean vector adaptation are limited under)
235 W( these data conditions.  The)234 W
9 SS 
10800 65155 MT
(SPHINX-SC)SH
11 SS 
15936 XM
(adaptation results)
211 W( showed an overall reduction of 2 to 3.4 percent in word-error rate.)212 W
10800 66894 MT
(Simulations indicated that in HMM systems where the dogmatism of the data is below 1.0 the)
38 W( poten-)37 W
10800 68633 MT
(tial gains due to LMS-C or EMAP adaptation are larger.)SH
13300 71618 MT
(A more detailed summary of the conclusions of this thesis is presented)
2 W( in the following sections,)3 W
10800 73357 MT
(followed by suggestions for future research.)SH
ES
%%Page: 103 104
BS
0 SI
10 /Times-Roman AF
54300 4286 MT
(103)SH
12 /Times-Bold AF
10800 8004 MT
(5.2.1. Development of the LMS-C Mean Vector Estimation Algorithm)SH
11 /Times-Roman AF
13300 10919 MT
(The maximum likelihood \050ML\051 algorithm satisfies the computational constraint)
211 W( imposed by)210 W
10800 12658 MT
(speaker-adaptive recognition, but it does not always produce the)
186 W( most accurate estimate possible.)187 W
10800 14397 MT
(The EMAP algorithm satisfies the accuracy constraint and exploits much of the)
85 W( information present)84 W
10800 16136 MT
(in the data, but it does so at a large computational cost.  Since maximum)69 W
/Times-Italic SF
44007 XM
(a posteriori)70 W
/Times-Roman SF
49587 XM
(and minimum)70 W
10800 17875 MT
(mean-square error \050MMSE\051 estimates are equivalent for)
15 W( normally-distributed data, the EMAP estima-)14 W
10800 19614 MT
(tion procedure)
17 W( was formulated as an MMSE adaptive filter.  Making a stochastic gradient approxima-)18 W
10800 21353 MT
(tion to this MMSE formulation resulted in an LMS procedure which performs a)
212 W( gradient search)211 W
10800 23092 MT
(across the MMSE's time-varying)
87 W( performance surface.  The LMS estimator was shown to be stable)88 W
10800 24831 MT
(under conditions of low dogmatism \050which are the conditions most suitable for adaptation)
155 W( by any)154 W
10800 26570 MT
(method\051, and)
211 W( it requires only one-third of the computation of the EMAP estimate.  Because the)212 W
10800 28309 MT
(LMS-C coefficient update is based largely on observations, the LMS-C estimate can)
92 W( produce initial)91 W
10800 30048 MT
(estimation errors lower than the EMAP or ML estimates with the proper initialization.  This)
67 W( method)68 W
10800 31787 MT
(of coefficient update, however, introduces a bias into the LMS estimate.)SH
13300 34772 MT
(Proper choices for the LMS-C parameters were determined through)
162 W( analysis of the expected)161 W
10800 36511 MT
(value of the LMS-C coefficient error.  The time-varying nature of the)
92 W( EMAP's optimal coefficients)93 W
10800 38250 MT
(introduced terms into the LMS-C convergence analysis which are)
104 W( not present in conventional LMS)103 W
10800 39989 MT
(adaptive filtering.  Further analysis showed that these)
87 W( additional terms are negligible when the dog-)88 W
10800 41728 MT
(matism of the data is not large.  The remainder of the LMS convergence analysis indicated)
199 W( that)198 W
10800 43467 MT
(setting the)
109 W( initial LMS-C coefficient matrix elements equal to the initial values of the EMAP coef-)110 W
10800 45206 MT
(ficients should)
88 W( minimize the LMS-C coefficient error.  Initialization in this manner incorporates the)87 W
10800 46945 MT
(statistics of the data)
37 W( into the LMS-C estimate.  Empirical tests showed that initialization of the LMS-)38 W
10800 48684 MT
(C weight matrix with the)
112 W( EMAP coefficients eliminated the large initial MSE which occurred with)111 W
10800 50423 MT
(other forms of initialization.)SH
13300 53408 MT
(The LMS-C adaptive filter's desired signal affects both the initial error and misadjustment)
118 W( of)119 W
10800 55147 MT
(the LMS-C)
228 W( estimate.  Close scrutiny of the EMAP coefficient update process indicated that the)227 W
10800 56886 MT
(EMAP coefficients change slowly over time, and)
328 W( that a reasonably accurate, computationally-)329 W
10800 58625 MT
(inexpensive estimate could be)
9 W( obtained by fixing the number of observations \050)8 W
/Times-Bold SF
(N)SH
/Times-Roman SF
(\051 matrix in the EMAP)8 W
10800 60364 MT
(expression at some fixed value)33 W
/Times-Bold SF
24802 XM
(N)SH
/Times-Roman SF
26101 XM
(=)SH
/Symbol SF
26871 XM
(h)SH
/Times-Bold SF
(I)SH
/Times-Roman SF
28270 XM
(where)SH
/Symbol SF
31264 XM
(h)SH
/Times-Roman SF
32235 XM
(is a constant)
33 W( called the convergence-point parameter.)34 W
8 /Times-Italic AF
25596 60709 MT
(c)SH
11 /Times-Roman AF
10800 62103 MT
(The resulting constant-EMAP \050CEMAP\051 estimate's MSE is)194 W
/Times-Italic SF
38709 XM
(identical)SH
/Times-Roman SF
43028 XM
(to that of the EMAP)
194 W( at the)193 W
10800 63842 MT
(convergence point)5 W
/Symbol SF
19178 XM
(h)SH
/Times-Roman SF
(, and is slightly higher on either side of this)
5 W( point.  Using the CEMAP estimate as)6 W
10800 65581 MT
(the desired signal in the LMS-C procedure produces better convergence properties)
34 W( than other choices)33 W
10800 67320 MT
(\050such as the ML estimate\051.  The parameter)157 W
/Symbol SF
30961 XM
(h)SH
/Times-Roman SF
32056 XM
(in the CEMAP procedure was)
157 W( shown to control the)158 W
10800 69059 MT
(tradeoff between initial convergence and misadjustment in the LMS-C estimate.)SH
ES
%%Page: 104 105
BS
0 SI
10 /Times-Roman AF
54300 4286 MT
(104)SH
11 SS 
13300 7955 MT
(The most)
105 W( important predictor of the performance of LMS-C and EMAP algorithms for mean-)104 W
10800 9694 MT
(vector adaptation was determined to be the dogmatism of the data.)
84 W( For)
444 W( intermediate values of dog-)85 W
10800 11433 MT
(matism \050near 1.0\051, the EMAP and LMS-C algorithms can provide substantial)
68 W( gains in accuracy with)67 W
10800 13172 MT
(respect to the ML estimator, as was demonstrated in empirical tests and in the feature-based experi-)80 W
10800 14911 MT
(ments. When)
543 W( dogmatism is much less or much greater)
134 W( than 1.0, adaptation via EMAP or LMS-C)133 W
10800 16650 MT
(provide no gains in estimation accuracy.  The ML mean is sufficient)
34 W( when the dogmatism of the data)35 W
10800 18389 MT
(is extremely low.  When the dogmatism is)
41 W( large, as in the)40 W
9 SS 
36827 XM
(SPHINX-SC)SH
11 SS 
41792 XM
(system, the)40 W
/Times-Italic SF
47097 XM
(a priori)40 W
/Times-Roman SF
50845 XM
(or speaker-)40 W
10800 20128 MT
(independent mean)SH
/Symbol SF
19108 XM
(m)SH
/Times-Roman SF
20467 XM
(is the best estimator.)SH
9 /Times-Italic AF
19742 20488 MT
(o)SH
11 /Times-Roman AF
13300 23113 MT
(Secondary predictors of adaptation performance are the degree of)
55 W( correlation between the class)56 W
10800 24852 MT
(\050or mixture component\051 means, and the skew in the prior probabilities of the)
14 W( classes.  These measures)13 W
10800 26591 MT
(are useful indicators only when the dogmatism of the data is at intermediate values.  The)
153 W( relative)154 W
10800 28330 MT
(gains of the EMAP and LMS-C algorithms over the ML estimate were shown to increase with in-)128 W
10800 30069 MT
(creasing correlation between the class means.  The EMAP and LMS-C estimates exploit this)
44 W( correla-)45 W
10800 31808 MT
(tion to reduce estimation error when some classes have a low probability of occurrence.)SH
12 /Times-Bold AF
10800 35492 MT
(5.2.2. Application to Feature-Based Speech Recognition Systems)SH
11 /Times-Roman AF
13300 38407 MT
(When applied to unsupervised adaptation in)
93 W( feature-based continuous recognition systems, the)92 W
10800 40146 MT
(LMS-C and EMAP estimators are capable of producing substantial)
84 W( reductions in classification error)85 W
10800 41885 MT
(rates if a number)
10 W( of conditions are met.  Foremost is that the dogmatism of the data must not be large;)9 W
10800 43624 MT
(dogmatism near 1.0 appears to be sufficient.  Comparisons)
69 W( between the acoustic-phonetic classifica-)70 W
10800 45363 MT
(tion module in)
340 W( the)339 W
9 SS 
20470 XM
(ANGEL)SH
11 SS 
24134 XM
(continuous speech recognition system and the rule-based classifier)339 W
9 SS 
10800 47102 MT
(PROPHET)SH
11 SS 
15207 XM
(indicate that)
132 W( another critical factor is that the adaptation data must obey the gaussian as-)133 W
10800 48841 MT
(sumption. By)
647 W( applying simple rules derived from the spectrogram reading process, the)186 W
9 SS 
51800 XM
(PROPHET)SH
11 SS 
10800 50580 MT
(system was able to make some classification decisions, based on any non-gaussian features, to iden-)68 W
10800 52319 MT
(tify segments which were not members of the target classes)
72 W( \050the front vowels\051.  Segments identified)71 W
10800 54058 MT
(as members of)
55 W( the target classes were classified using the gaussian features, and these feature values)56 W
10800 55797 MT
(were used to update)
180 W( the classifier during unsupervised adaptive training.)179 W
9 SS 
45150 XM
(PROPHET)SH
11 SS 
('s hybrid rule-)179 W
10800 57536 MT
(based and statistical classification scheme improved classification results by)
79 W( 38 percent with respect)80 W
10800 59275 MT
(to a gaussian classifier alone.)SH
13300 62260 MT
(The hybrid classifier)
8 W( also provides a better opportunity for the adaptation algorithms to learn the)7 W
10800 63999 MT
(characteristics of the target)
39 W( classes.  The soft-decision method of unsupervised adaptation used in the)40 W
10800 65738 MT
(feature-based experiments updated each class based on the probability that the current observation)146 W
10800 67477 MT
(was a member of that class.)
141 W( The)
559 W( baseline gaussian classifier without rules \050)142 W
9 SS 
(SPIRIT)SH
11 SS 
(\051 was unable to)142 W
10800 69216 MT
(filter out any of the non-target)
200 W( classes, and so the target class parameters were corrupted by the)199 W
10800 70955 MT
(preponderance of non-target segments.)
214 W( In)
704 W( the)215 W
9 SS 
32763 XM
(PROPHET)SH
11 SS 
37253 XM
(classifier, the majority of the non-target)215 W
ES
%%Page: 105 106
BS
0 SI
10 /Times-Roman AF
54300 4286 MT
(105)SH
11 SS 
10800 7955 MT
(segments are filtered out before adaptation,)
198 W( so these data cannot adversely affect the target class)197 W
10800 9694 MT
(parameters. LMS-C)
275 W( and EMAP adaptation in the)SH
9 SS 
32887 XM
(PROPHET)SH
11 SS 
37162 XM
(system produced a 29 percent reduction in)1 W
10800 11433 MT
(error rate, while the ML-adapted)82 W
9 SS 
25868 XM
(PROPHET)SH
11 SS 
30225 XM
(system and the all of the adapted)82 W
9 SS 
45492 XM
(SPIRIT)SH
11 SS 
48599 XM
(systems showed)82 W
10800 13172 MT
(an increase in error rate.)SH
13300 16157 MT
(Experiments with classification of the three front vowels in the)469 W
9 SS 
45972 XM
(SPIRIT)SH
11 SS 
49467 XM
(and)SH
9 SS 
51800 XM
(PROPHET)SH
11 SS 
10800 17896 MT
(demonstrated the importance)
166 W( of obtaining quantities of data from each training speaker which are)165 W
10800 19635 MT
(sufficient for estimation of the covariance matrix)202 W
/Symbol SF
34053 XM
(S)SH
/Times-Roman SF
35104 XM
(. If)
679 W( too few samples)
202 W( are available from the)203 W
8 /Times-Italic AF
34704 19980 MT
(o)SH
11 /Times-Roman AF
10800 21374 MT
(decision classes for a large number of speakers, the)
206 W( statistic)205 W
/Symbol SF
39339 XM
(S)SH
/Times-Roman SF
40870 XM
(will not accurately represent the)205 W
8 /Times-Italic AF
39990 21719 MT
(o)SH
11 /Times-Roman AF
10800 23113 MT
(distribution of the speakers' means.)
156 W( This)
588 W( leads to adaptation problems in the EMAP and LMS-C)157 W
10800 24852 MT
(estimates which use)118 W
/Symbol SF
20227 XM
(S)SH
/Times-Roman SF
21671 XM
(in the computation of their coefficients.  The TIMIT)
118 W( CD-ROM used in the)117 W
8 /Times-Italic AF
20878 25197 MT
(o)SH
11 /Times-Roman AF
10800 26591 MT
(feature-based studies did not provide enough data to)
69 W( estimate this statistic for the classes under con-)70 W
10800 28330 MT
(sideration. In)
465 W( the absence of)
95 W( a reliable estimate of this parameter, computer simulations of feature-)94 W
10800 30069 MT
(based adaptation were conducted.  Results with the computer-generated)
45 W( data provide an upper bound)46 W
10800 31808 MT
(on the expected results with real data.)
10 W( These)
294 W( simulations are believed to be sound predictors of actual)9 W
10800 33547 MT
(results since the real and simulation unadapted error rates \050which depend only on)17 W
/Symbol SF
46972 XM
(m)SH
/Times-Roman SF
48298 XM
(and)SH
/Symbol SF
50178 XM
(S)SH
/Times-Roman SF
51121 XM
(and not)
17 W( on)18 W
8 /Times-Italic AF
47606 33892 MT
(o)SH
11 /Symbol AF
10800 35286 MT
(S)SH
/Times-Roman SF
11851 XM
(\051 were in good agreement.)SH
8 /Times-Italic AF
11451 35631 MT
(o)SH
11 /Times-Roman AF
13300 38271 MT
(Adaptation experiments with computer-generated data)
388 W( showed the soft-decision feedback)387 W
10800 40010 MT
(method to be effective for unsupervised adaptation in feature-based systems.  With)
144 W( data generated)145 W
10800 41749 MT
(using the statistics of the front vowel features, the EMAP and LMS-C algorithms reduced the clas-)104 W
10800 43488 MT
(sification error)
162 W( rate by approximately 28 percent after presentation of 10 adaptation data samples.)163 W
10800 45227 MT
(This represented a gain of 40 percent with respect to the)
3 W( error rate using the ML-adapted mean vector.)2 W
10800 46966 MT
(In addition, the EMAP and LMS-C error rates after 10)
120 W( observations were almost at the asymptotic)121 W
10800 48705 MT
(\050many-observation\051 level of error.)
159 W( When)
592 W( five iterations of this unsupervised adaptation were per-)158 W
10800 50444 MT
(formed on the adaptation training data,)
107 W( the error rate was reduced by an additional 10 percent over)108 W
10800 52183 MT
(that of one iteration.  This reduction represented 36 percent of the difference between)
1 W( the one iteration)SH
10800 53922 MT
(and supervised adaptation error rates.)SH
12 /Times-Bold AF
10800 57606 MT
(5.2.3. Application to Hidden Markov Model-Based Systems)SH
11 /Times-Roman AF
13300 60521 MT
(Results from studies with a computer-simulated HMM showed that the maximum likelihood)161 W
10800 62260 MT
(mean estimate specified in the HMM)
161 W( reestimation procedure has different properties than the ML)160 W
10800 63999 MT
(mean obtained in a supervised mode.  One consequence of the)
43 W( unsupervised nature of this reestimate)44 W
10800 65738 MT
(is that the MSE is much higher than that of)
92 W( the supervised mean.  It was shown that this additional)91 W
10800 67477 MT
(error may be reduced to the supervised level by repeated iterations of the forward-backward algo-)143 W
10800 69216 MT
(rithm. In)
369 W( other words,)
47 W( by repeated application of the HMM reestimation procedure the unsupervised)46 W
10800 70955 MT
(estimates converge to those which would be)
76 W( obtained given full knowledge of the component mem-)77 W
ES
%%Page: 106 107
BS
0 SI
10 /Times-Roman AF
54300 4286 MT
(106)SH
11 SS 
10800 7955 MT
(bership of each observation.)
71 W( Similar)
415 W( comments apply to the soft-decision mean in the feature-based)70 W
10800 9694 MT
(system since that estimate, like)
32 W( the HMM reestimate, updates each class based on the probability that)33 W
10800 11433 MT
(the observation is a member of that class.)SH
13300 14418 MT
(The HMM mean reestimate also exhibits a dependence on the)
141 W( correlation of the data means.)140 W
10800 16157 MT
(This dependence is not present in the supervised)
103 W( ML mean.  Since each element of the reestimated)104 W
10800 17896 MT
(ML mean vector is a weighted sum of data from all classes)
134 W( \050or mixture components\051, it implicitly)133 W
10800 19635 MT
(models correlation information which the EMAP and LMS-C estimators explicitly incorporate)339 W
10800 21374 MT
(through the covariance matrix)92 W
/Symbol SF
24668 XM
(S)SH
/Times-Roman SF
25719 XM
(. The)
459 W( dependence of)
92 W( the unsupervised ML mean on correlation of)91 W
8 /Times-Italic AF
25319 21719 MT
(o)SH
11 /Times-Roman AF
10800 23113 MT
(the data means was shown to reduce ML estimation error as the correlation increased, similar to)
73 W( the)74 W
10800 24852 MT
(EMAP and LMS-C algorithms.)SH
13300 27837 MT
(The properties of the)
115 W( ML mean as obtained via the HMM reestimation procedure, along with)114 W
10800 29576 MT
(the large dogmatism \0502.0)
53 W( or greater\051 of the cepstral data combined to produce only limited gains due)54 W
10800 31315 MT
(to adaptation in the)55 W
9 SS 
19758 XM
(SPHINX-SC)SH
11 SS 
24738 XM
(system. The)
385 W( increased estimation error of the unsupervised ML)
55 W( rees-)54 W
10800 33054 MT
(timate increases EMAP and LMS-C error since)
168 W( they incorporate the ML mean in their respective)169 W
10800 34793 MT
(estimation procedures.  More importantly, with dogmatism at or above 2.0, the deviation of the)
110 W( in-)109 W
10800 36532 MT
(dividuals' means from)108 W
/Symbol SF
21297 XM
(m)SH
/Times-Roman SF
22764 XM
(is small, leaving little room for improvement by mean vector adaptation.)108 W
9 /Times-Italic AF
21931 36892 MT
(o)SH
11 /Times-Roman AF
10800 38271 MT
(Overall, the word)
84 W( error rate was reduced by 2 to 3.4 percent by adaptation using HMMs with semi-)83 W
10800 40010 MT
(continuous codebooks.)SH
13300 42995 MT
(Results from individual speakers showed a)
210 W( wider range of change in error rate.  The most)211 W
10800 44734 MT
(successful method of automatically identifying those speakers who are helped by)
3 W( adaptation, based on)2 W
10800 46473 MT
(the change in euclidean distances between codebook components, averaged a 15 percent)
8 W( reduction for)9 W
10800 48212 MT
(the selected speakers.  This represented an overall reduction)
25 W( of approximately 4 percent.  Simulations)24 W
10800 49951 MT
(showed that under more favorable conditions,)
23 W( small dogmatism and high correlation, the potential for)24 W
10800 51690 MT
(EMAP or LMS-C estimates to show any significant gains over the ML estimate is larger.)SH
13 /Times-Bold AF
10800 55441 MT
(5.3. Directions for Future Research)SH
11 /Times-Roman AF
13300 58356 MT
(There are a number of areas in which this work may be extended.)
52 W( The)
378 W( most obvious course of)51 W
10800 60095 MT
(action is to assess whether)
150 W( other recognition systems would benefit from the techniques presented)151 W
10800 61834 MT
(here. Significant)
429 W( improvements have been made with the semi-continuous)77 W
9 SS 
44715 XM
(SPHINX)SH
11 SS 
48316 XM
(system since ob-)76 W
10800 63573 MT
(taining the version which became)19 W
9 SS 
25954 XM
(SPHINX-SC)SH
11 SS 
(, including)
19 W( separate male and female models.  The statis-)20 W
10800 65312 MT
(tics of the data with)
175 W( this newer version of)174 W
9 SS 
30851 XM
(SPHINX-SC)SH
11 SS 
35950 XM
(may be better suited for adaptation.  Other)174 W
10800 67051 MT
(HMM systems, possibly those developed for smaller)
84 W( tasks such as connected digit recognition, may)85 W
10800 68790 MT
(also be more amenable to adaptation by the techniques developed here.)SH
13300 71775 MT
(Although shifting mean vectors works well)
168 W( under the right conditions, greater gains may be)167 W
ES
%%Page: 107 108
BS
0 SI
10 /Times-Roman AF
54300 4286 MT
(107)SH
11 SS 
10800 7955 MT
(obtained by simultaneously adapting other)
47 W( recognition parameters.  These additional parameters may)48 W
10800 9694 MT
(be the covariance matrices in feature-based classifiers or)
74 W( SCHMM codebooks, or transition and out-)73 W
10800 11433 MT
(put probabilities in HMMs.  Care must be taken to)
15 W( avoid adaptation of parameters which are sensitive)16 W
10800 13172 MT
(to small training sample sizes.)SH
13300 16157 MT
(Another promising area is the)
14 W( improvement of automatic methods for identifying those speakers)13 W
10800 17896 MT
(who are good candidates for adaptation.  It is unlikely that all speakers will benefit)
67 W( from adaptation.)68 W
10800 19635 MT
(It may be possible to identify)
64 W( the characteristics of those speakers who do show some improvement.)63 W
10800 21374 MT
(These characteristics)
175 W( are likely to be found in some comparative measure of the adapted and un-)176 W
10800 23113 MT
(adapted codebooks or classifier parameters.)
112 W( In)
498 W( the context of a system which is more amenable to)111 W
10800 24852 MT
(adaptation these characteristics may possibly be more easily identified.)SH
13300 27837 MT
(The techniques described)
196 W( here may also find applications in adaptation to environmental or)197 W
10800 29576 MT
(other test conditions, such as noise level)
68 W( or microphone differences.  It would be necessary to deter-)67 W
10800 31315 MT
(mine the effects that changes in these conditions have on the cepstral)
88 W( representation of speech data,)89 W
10800 33054 MT
(and whether these effects can be modeled by shifts in the codebook means.)SH
13300 36039 MT
(The algorithms themselves may also be developed further.  Currently)
10 W( trial and error is necessary)9 W
10800 37778 MT
(to choose the best settings for)36 W
/Symbol SF
24336 XM
(h)SH
/Times-Roman SF
25310 XM
(and)SH
/Symbol SF
27209 XM
(b)SH
/Times-Roman SF
28124 XM
(in the LMS-C algorithm.  In simulations, the)
36 W( best values for)37 W
/Symbol SF
55137 XM
(h)SH
/Times-Roman SF
10800 39517 MT
(were much smaller in the multivariate case than)
58 W( in one-dimensional tests.  Further study of the algo-)57 W
10800 41256 MT
(rithm and empirical results may lead to an automated procedure for selecting these parameters.)SH
13300 44241 MT
(Finally, the EMAP algorithm specifies the coefficients which allow the mean estimate)
92 W( to con-)93 W
10800 45980 MT
(verge with no bias.  This)
127 W( set of coefficients minimizes the mean-squared error for all values of)126 W
/Times-Bold SF
54731 XM
(N)SH
/Times-Roman SF
(.)SH
10800 47719 MT
(Since speaker adaptation seeks low)
63 W( initial error, modification of the minimization criterion may lead)64 W
10800 49458 MT
(to an estimator which accepts some asymptotic bias but optimally minimizes this initial error.)SH
ES
%%Page: 108 109
BS
0 SI
10 /Times-Roman AF
54300 4286 MT
(108)SH
15 /Times-Bold AF
10800 15405 MT
(References)SH
11 /Times-Roman AF
10800 19760 MT
(1.)SH
14100 XM
(Schwartz,R., Chow,Y., and Kubala,F.,)
296 W( ``Rapid Speaker Adaptation Using a Probabilistic)295 W
14100 20956 MT
(Spectral Mapping'',)321 W
/Times-Italic SF
23875 XM
(Proceedings of ICASSP87)321 W
/Times-Roman SF
(, IEEE Acous., Speech, and Signal Proc.)321 W
14100 22152 MT
(Society, 1987, pp. 15.3.1-4.)SH
10800 24103 MT
(2.)SH
14100 XM
(Feng,M.W., Kubala,F., Schwartz,R., and Makhoul,J., ``Rapid Speaker Adaptation Using a)214 W
14100 25299 MT
(Probabilistic Spectral Mapping'',)91 W
/Times-Italic SF
29343 XM
(Proceedings of ICASSP88)92 W
/Times-Roman SF
(, IEEE Acous., Speech, and Sig-)92 W
14100 26495 MT
(nal Proc. Society, 1988, pp. 131-134.)SH
10800 28446 MT
(3.)SH
14100 XM
(Feng,M.W., Schwartz,R., Kubala,F., and Makhoul,J., ``Iterative Normalization for)
146 W( Speaker-)145 W
14100 29642 MT
(Adaptive Recognition in Continuous Speech Recognition'',)74 W
/Times-Italic SF
41095 XM
(Proceedings of ICASSP89)75 W
/Times-Roman SF
(, IEEE)75 W
14100 30838 MT
(Acous., Speech, and Signal Proc. Society, 1989, pp. 612-615.)SH
10800 32789 MT
(4.)SH
14100 XM
(Nishimura,M, and Sugawara,K., ``Speaker)
368 W( Adaptation Method for HMM-Based Speech)367 W
14100 33985 MT
(Recognition'',)SH
/Times-Italic SF
20943 XM
(Proceedings of ICASSP88)183 W
/Times-Roman SF
(, IEEE Acous., Speech, and)
183 W( Signal Proc. Society,)184 W
14100 35181 MT
(1988, pp. 207-210.)SH
10800 37132 MT
(5.)SH
14100 XM
(Furui,S., ``Unsupervised Speaker Adaptation Method Based on)
45 W( Hierarchical Spectral Cluster-)44 W
14100 38328 MT
(ing'',)SH
/Times-Italic SF
16905 XM
(Proceedings of ICASSP89)117 W
/Times-Roman SF
(, IEEE Acous., Speech, and Signal Proc. Society, 1989,)
117 W( pp.)118 W
14100 39524 MT
(286-289.)SH
10800 41475 MT
(6.)SH
14100 XM
(Lee,K.F.,)SH
/Times-Italic SF
19014 XM
(Large-Vocabulary Speaker-Independent)
485 W( Continuous Speech Recognition: The)484 W
14100 42671 MT
(SPHINX System,)105 W
/Times-Roman SF
21977 XM
(PhD dissertation, Computer)
105 W( Science Department, Carnegie Mellon Univer-)106 W
14100 43867 MT
(sity, 1988.)SH
10800 45818 MT
(7.)SH
14100 XM
(Lee,K.F., Hon,H.W., and Reddy.R., ``An Overview)
48 W( of the SPHINX Speech Recognition Sys-)47 W
14100 47014 MT
(tem'',)SH
/Times-Italic SF
17839 XM
(IEEE Trans. on)
807 W( Acoustics, Speech, and Signal Processing)808 W
/Times-Roman SF
(, Vol.)
SH( 38,)
808 W( No.)SH
14100 48210 MT
(1, January 1990.)SH
10800 50161 MT
(8.)SH
14100 XM
(Rabiner,L.R., ``On Creating)
212 W( Reference Templates for Speaker-Independent Recognition of)211 W
14100 51357 MT
(Isolated Words'',)SH
/Times-Italic SF
22071 XM
(IEEE Trans. ASSP)SH
/Times-Roman SF
(, Vol. ASSP-27, No. 4, 1979, pp. 236-249.)SH
10800 53308 MT
(9.)SH
14100 XM
(Rabiner,L.R., Levinson,S.E., Rosenberg,A.E.,)
660 W( and Wilpon,J.G., ``Speaker-Independent)661 W
14100 54504 MT
(Recognition of Isolated Words Using Clustering Techniques'',)343 W
/Times-Italic SF
44422 XM
(IEEE Trans. ASSP)342 W
/Times-Roman SF
(, Vol.)SH
14100 55700 MT
(ASSP-27, No. 4, 1979, pp. 236-249.)SH
10800 57651 MT
(10.)SH
14100 XM
(Kijima,Y., Nara,Y., Kobayashi,A., and Kimura,S.,)
35 W( ``Speaker Adaptation in Large-Vocabulary)36 W
14100 58847 MT
(Voice Recognition'',)279 W
/Times-Italic SF
24219 XM
(Proceedings of ICASSP84)278 W
/Times-Roman SF
(, IEEE Acous., Speech, and Signal Proc.)278 W
14100 60043 MT
(Society, 1984, pp. 26.8.1-4.)SH
10800 61994 MT
(11.)SH
14100 XM
(Shikano,K., Lee,K.F., and Reddy,D.R., ``Speaker Adaptation Through)
50 W( Vector Quantization'',)51 W
/Times-Italic SF
14100 63190 MT
(Proc. International Conf. ASSP)SH
/Times-Roman SF
(, 1986, pp. 2643-2646.)SH
10800 65141 MT
(12.)SH
14100 XM
(Higuchi,N., and)
120 W( Yato,F., ``Speaker Adaptation Methods using Selective Linear Prediction'',)119 W
/Times-Italic SF
14100 66337 MT
(Proceedings of ICASSP86)SH
/Times-Roman SF
(, IEEE Signal Processing Society, 1986, pp. 49.6.1-4.)SH
10800 68288 MT
(13.)SH
14100 XM
(Hampshire,J.B., and Waibel,A.H., ``The Meta-Pi Network: Connectionist Rapid Adaptation)149 W
14100 69484 MT
(for High-Performance Multi-Speaker Phoneme Recognition'',)315 W
/Times-Italic SF
43349 XM
(Proceedings of ICASSP90)314 W
/Times-Roman SF
(,)SH
14100 70680 MT
(IEEE Signal Processing Society, 1990, pp. 165-168.)SH
ES
%%Page: 109 110
BS
0 SI
10 /Times-Roman AF
54300 4286 MT
(109)SH
11 SS 
10800 7955 MT
(14.)SH
14100 XM
(Hon,H.W., and Huang,X.D., ``personal communication''.)SH
10800 9906 MT
(15.)SH
14100 XM
(Kenney,P., Lennig,M., and Mermelstein,P., ``Speaker Adaptation in a Large Vocabulary)296 W
14100 11102 MT
(Gaussian HMM Recognizer'',)842 W
/Times-Italic SF
30248 XM
(IEEE Trans. on Pattern Analysis and)
842 W( Machine)841 W
14100 12298 MT
(Intelligence)SH
/Times-Roman SF
(, 1989.)SH
10800 14249 MT
(16.)SH
14100 XM
(Lee,C.H., Lin,C.H., and Juang,B.H., ``A)
38 W( Study on Speaker Adaptation of Continuous Density)39 W
14100 15445 MT
(HMM Parameters'',)165 W
/Times-Italic SF
23623 XM
(Proceedings of ICASSP90)165 W
/Times-Roman SF
(, IEEE Signal Processing Society, 1990,)
165 W( pp.)164 W
14100 16641 MT
(145-148.)SH
10800 18592 MT
(17.)SH
14100 XM
(Rtischev,D., ``Speaker Adaptation in a Large-Vocabulary Speech Recognition System'',)333 W
14100 19788 MT
(Master's thesis, Dept. of)
209 W( Electrical Engineering and Computer Science, Massachusetts In-)208 W
14100 20984 MT
(stitute of Technology, 1989.)SH
10800 22935 MT
(18.)SH
14100 XM
(Huang,X.D., Lee,K.F., Hon,H.W., and Huang,M.,)
275 W( ``Improved Acoustic Modeling for the)276 W
14100 24131 MT
(SPHINX Speech Recognition System'',)136 W
/Times-Italic SF
32517 XM
(Proceedings of ICASSP91)135 W
/Times-Roman SF
(, IEEE Signal Processing)135 W
14100 25327 MT
(Society, 1991.)SH
10800 27278 MT
(19.)SH
14100 XM
(Martin,E.A., Lippmann,R.P., and Paul,D.P., ``Dynamic)
6 W( Adaptation of Hidden Markov Models)7 W
14100 28474 MT
(for Robust Isolated-Word Speech Recognition'',)211 W
/Times-Italic SF
36843 XM
(Proceedings of ICASSP88)211 W
/Times-Roman SF
(, IEEE Acous.,)210 W
14100 29670 MT
(Speech, and Signal Proc. Society, 1988, pp. 52-54.)SH
10800 31621 MT
(20.)SH
14100 XM
(Huang,X.D., Hon,H.W., and Lee,K.F., ``On Semi-Continuous Hidden Markov)
191 W( Modeling'',)192 W
/Times-Italic SF
14100 32817 MT
(Proceedings of ICASSP89)SH
/Times-Roman SF
(, IEEE Signal Processing Society, 1989, pp. 689-692.)SH
10800 34768 MT
(21.)SH
14100 XM
(Huang,X.D., ``personal communication''.)SH
10800 36719 MT
(22.)SH
14100 XM
(Brown,P.F., Lee,C.H., and Spohr,J.C., ``Bayesian Adaptation in Speech)
420 W( Recognition'',)419 W
/Times-Italic SF
14100 37915 MT
(IEEE)SH
/Times-Roman SF
(, 1983, pp. 761-764.)SH
10800 39866 MT
(23.)SH
14100 XM
(Stern,R.M., and)
61 W( Lasry,M.J., ``Dynamic Speaker Adaptation for Feature-Based Isolated Letter)62 W
14100 41062 MT
(Recognition'',)SH
/Times-Italic SF
20864 XM
(IEEE Trans. on Acoustics, Speech,)
104 W( and Signal Processing)103 W
/Times-Roman SF
(, Vol.)
SH( 35,)
103 W( 1987,)
SH( pp.)103 W
14100 42258 MT
(751-763.)SH
10800 44209 MT
(24.)SH
14100 XM
(Lasry,M.J., and Stern,R.M., ``A Posteriori)
155 W( Estimation of Correlated Jointly Gaussian Mean)156 W
14100 45405 MT
(Vectors'',)SH
/Times-Italic SF
19074 XM
(IEEE Trans. on Pattern Analysis and)
272 W( Machine Intelligence)271 W
/Times-Roman SF
(, Vol.)
SH( PAMI-6,)
271 W( No.)SH
14100 46601 MT
(4, 1984, pp. 530-535.)SH
10800 48552 MT
(25.)SH
14100 XM
(Van Trees,H.L.,)172 W
/Times-Italic SF
21834 XM
(Detection, Estimation, and Modulation Theory, Part I,)172 W
/Times-Roman SF
47330 XM
(Wiley, New York,)173 W
14100 49748 MT
(1968.)SH
10800 51699 MT
(26.)SH
14100 XM
(Widrow,B. and Stearns,S.D.,)321 W
/Times-Italic SF
28108 XM
(Adaptive Signal Processing,)321 W
/Times-Roman SF
41781 XM
(Prentice-Hall Inc.,)
321 W( Englewood)320 W
14100 52895 MT
(Cliffs NJ, 1985.)SH
10800 54846 MT
(27.)SH
14100 XM
(Cole,R.A., Rudnicky,A.I., Zue,V.W., and Reddy,D.R.,)485 W
/Times-Italic SF
40874 XM
(Speech as)
485 W( Patterns on Paper,)486 W
/Times-Roman SF
14100 56042 MT
(Lawrence Erlbaum Associates, 1980, ch. 1.)SH
10800 57993 MT
(28.)SH
14100 XM
(Zue,V.W., ``The Use of Speech Knowledge)
44 W( in Automatic Speech Recognition'',)43 W
/Times-Italic SF
50302 XM
(Proceedings)SH
14100 59189 MT
(of the IEEE)SH
/Times-Roman SF
(, Vol. 73, No. 11, November 1985, pp. 1602-1615.)SH
10800 61140 MT
(29.)SH
14100 XM
(Chigier,B., ``Classification of)
250 W( Stop Consonants in Natural Continuous Speech'', Master's)251 W
14100 62336 MT
(thesis, Dept. of Electrical and Computer Engineering, Carnegie Mellon University, 1988.)SH
10800 64287 MT
(30.)SH
14100 XM
(Lamel,L.F.,)SH
/Times-Italic SF
19633 XM
(Formalizing Knowledge used in Spectrogram Reading:  Acoustic)
64 W( and perceptual)63 W
14100 65483 MT
(evidence from stops,)28 W
/Times-Roman SF
23470 XM
(PhD dissertation, Dept. of Electrical Engineering and Computer)
28 W( Science,)29 W
14100 66679 MT
(Massachusetts Institute of Technology, 1988.)SH
10800 68630 MT
(31.)SH
14100 XM
(Chigier,B. and Brennan,R.A., ``Broad Class Network Generation Using a)
211 W( Combination of)210 W
14100 69826 MT
(Rules and Statistics for Speaker Independent Continuous Speech'',)9 W
/Times-Italic SF
43957 XM
(Proceedings of ICASSP88)10 W
/Times-Roman SF
(,)SH
14100 71022 MT
(IEEE Acoustics, Speech, and Signal Processing Society, 1988, pp. 449-452.)SH
ES
%%Page: 110 111
BS
0 SI
10 /Times-Roman AF
54300 4286 MT
(110)SH
11 SS 
10800 7955 MT
(32.)SH
14100 XM
(Duda,R.O., and Hart,P.E.,)SH
/Times-Italic SF
25861 XM
(Pattern Classification and Scene Analysis,)SH
/Times-Roman SF
44867 XM
(Wiley, New York, 1973.)SH
10800 9906 MT
(33.)SH
14100 XM
(Stern,R.M., Ward,W.H., Hauptmann,A.G., and Leon,J., ``Sentence Parsing with Weak)
45 W( Gram-)44 W
14100 11102 MT
(matical Constraints'',)253 W
/Times-Italic SF
24413 XM
(Proceedings of ICASSP87)253 W
/Times-Roman SF
(, IEEE Acous., Speech, and Signal Proc.)254 W
14100 12298 MT
(Society, 1987, pp. 380-383.)SH
10800 14249 MT
(34.)SH
14100 XM
(``The DARPA TIMIT prototype database'', Distributed on CD-ROM by NIST.)SH
10800 16200 MT
(35.)SH
14100 XM
(Shore,J. and Burton,D., ``ESPS/waves+ User's Manual'', Entropic Speech, Inc..)SH
10800 18151 MT
(36.)SH
14100 XM
(Talkin,D., ``Speech)
38 W( Formant Trajectory Estimation using Dynamic Programming with Modu-)37 W
14100 19347 MT
(lated Transition Costs'',)SH
/Times-Italic SF
25038 XM
(JASA)SH
/Times-Roman SF
(, Vol. 82, 1987, pp. S55.)SH
10800 21298 MT
(37.)SH
14100 XM
(Secrest,B.G., and)
237 W( Doddington,G.R., ``An Integrated Pitch Tracking Algorithm for Speech)238 W
14100 22494 MT
(Systems'',)SH
/Times-Italic SF
19458 XM
(Proceedings of)
408 W( ICASSP83)407 W
/Times-Roman SF
(, IEEE Acoustics, Speech, and Signal Processing)407 W
14100 23690 MT
(Society, 1983, pp. 1352-1355.)SH
10800 25641 MT
(38.)SH
14100 XM
(Rabiner,L.R., ``A Tutorial on Hidden Markov Models and Selected Applications in Speech)139 W
14100 26837 MT
(Recognition'',)SH
/Times-Italic SF
20760 XM
(Proceedings of the IEEE)SH
/Times-Roman SF
(, Vol. 77, No. 2, 1989, pp. 257-286.)SH
10800 28788 MT
(39.)SH
14100 XM
(Baum,L.E., ``An Inequality)
48 W( and Associated Maximization Technique in Statistical Estimation)47 W
14100 29984 MT
(of Probabilistic Functions of Markov Processes'',)SH
/Times-Italic SF
36249 XM
(Inequalities)SH
/Times-Roman SF
(, Vol. 3, 1972, pp. 1-8.)SH
10800 31935 MT
(40.)SH
14100 XM
(Forney,G.D., ``The Viterbi Algorithm'',)546 W
/Times-Italic SF
34337 XM
(Proceedings IEEE)546 W
/Times-Roman SF
(, Vol.)
SH( 61,)
546 W( March 1973,)
SH( pp.)546 W
14100 33131 MT
(268-278.)SH
10800 35082 MT
(41.)SH
14100 XM
(Redner,R.A., and)
62 W( Walker,H.F., ``Mixture Densities, Maximum Likelihood and the EM Algo-)61 W
14100 36278 MT
(rithm'',)SH
/Times-Italic SF
17766 XM
(SIAM Review)SH
/Times-Roman SF
(, Vol. 26, No. 2, 1984, pp. 195-239.)SH
10800 38229 MT
(42.)SH
14100 XM
(Dempster,A.P., Laird,N.M., and Rubin,D.B., ``Maximum-likelihood from Incomplete)
218 W( Data)219 W
14100 39425 MT
(via the EM Algorithm'',)SH
/Times-Italic SF
25129 XM
(J. Royal Statist. Soc.)SH
/Times-Roman SF
(, Vol. 39, 1977, pp. 1-38.)SH
10800 41376 MT
(43.)SH
14100 XM
(Huang,X.D.,)SH
/Times-Italic SF
20135 XM
(Semi-Continuous Hidden Markov)
140 W( Models for Speech Recognition,)139 W
/Times-Roman SF
50498 XM
(PhD disser-)139 W
14100 42572 MT
(tation, University of Edinburgh, 1989.)SH
10800 44523 MT
(44.)SH
14100 XM
(Juang,B.H., Levinson,S.E., and Sondhi,M.M., ``Maximum Likelihood Estimation for Mul-)209 W
14100 45719 MT
(tivariate Mixture Observations of)
194 W( Markov Chains'',)193 W
/Times-Italic SF
38324 XM
(IEEE Trans. Information Theory)193 W
/Times-Roman SF
(, Vol.)SH
14100 46915 MT
(IT-32, No. 2, 1986, pp. 307-309.)SH
10800 48866 MT
(45.)SH
14100 XM
(Brown,P.F.,)SH
/Times-Italic SF
19818 XM
(The Acoustic-Modeling Problem in Automatic Speech)
125 W( Recognition,)126 W
/Times-Roman SF
50511 XM
(PhD disser-)126 W
14100 50062 MT
(tation, Computer Science Department, Carnegie Mellon University, 1987.)SH
10800 52013 MT
(46.)SH
14100 XM
(Price,P., Fisher,W.M., Bernstein,J., and Pallett,D.S., ``The DARPA)
279 W( 1000-Word Resource)278 W
14100 53209 MT
(Management Database for Continuous Speech Recognition'',)317 W
/Times-Italic SF
43341 XM
(Proceedings of ICASSP88)318 W
/Times-Roman SF
(,)SH
14100 54405 MT
(IEEE Acoustics, Speech, and Signal Processing Society, 1988, pp. 651-654.)SH
ES
%%Page: 111 112
BS
0 SI
10 /Times-Roman AF
54300 4286 MT
(111)SH
15 /Times-Bold AF
10800 15405 MT
(Glossary of Acronyms)SH
11 /Times-Roman AF
10800 19760 MT
(BBN)SH
16920 XM
(Bolt, Beranek, and Newman, Inc.)SH
10800 20956 MT
(CDHMM)SH
16920 XM
(continuous-density hidden Markov model)SH
10800 22152 MT
(CD-ROM)SH
16920 XM
(compact disk read-only memory)SH
10800 23348 MT
(CEMAP)SH
16920 XM
(constant-EMAP, EMAP estimate with fixed coefficients)SH
10800 24544 MT
(CMU)SH
16920 XM
(Carnegie Mellon University)SH
10800 25740 MT
(DARPA)SH
16920 XM
(Defense Advanced Research Project Administration)SH
10800 26936 MT
(DDHMM)SH
16920 XM
(discrete-density hidden Markov model)SH
10800 28132 MT
(DFT)SH
16920 XM
(discrete Fourier transform)SH
10800 29328 MT
(EM)SH
16920 XM
(estimation and maximization)SH
10800 30524 MT
(EMAP)SH
16920 XM
(extended maximum)SH
/Times-Italic SF
25902 XM
(a priori)SH
/Times-Roman SF
10800 31720 MT
(F-B)SH
16920 XM
(forward-backward)SH
10800 32916 MT
(HMM)SH
16920 XM
(hidden Markov model)SH
10800 34112 MT
(IBM)SH
16920 XM
(International Business Machines)SH
10800 35308 MT
(LMS)SH
16920 XM
(least mean-square)SH
10800 36504 MT
(LMS-C)SH
16920 XM
(LMS estimation using CEMAP estimate as the desired signal)SH
10800 37700 MT
(LPC)SH
16920 XM
(linear predictive coding)SH
10800 38896 MT
(MAP)SH
16920 XM
(maximum)SH
/Times-Italic SF
21657 XM
(a priori)SH
/Times-Roman SF
10800 40092 MT
(ML)SH
16920 XM
(maximum likelihood)SH
10800 41288 MT
(MMSE)SH
16920 XM
(minimum mean-square error)SH
10800 42484 MT
(MSE)SH
16920 XM
(mean-square error)SH
10800 43680 MT
(NIST)SH
16920 XM
(National Institute of Standards and Technology)SH
10800 44876 MT
(SCHMM)SH
16920 XM
(semi-continuous hidden Markov model)SH
10800 46072 MT
(SPHINX-SC)SH
16920 XM
(a semi-continuous version of the)SH
9 SS 
31553 XM
(SPHINX)SH
11 SS 
35078 XM
(recognition system)SH
10800 47268 MT
(TDNN)SH
16920 XM
(time-delay neural network)SH
10800 48464 MT
(TIMIT)SH
16920 XM
(Texas Instruments/Massachusetts Institute of Technology)SH
10800 49660 MT
(TIRM)SH
16920 XM
(Texas Instruments resource management)SH
10800 50856 MT
(VQ)SH
16920 XM
(vector quantization)SH
ES
%%Page: 112 113
BS
0 SI
10 /Times-Roman AF
54300 4286 MT
(112)SH
15 /Times-Bold AF
10800 15405 MT
(Nomenclature)SH
11 SS 
15480 19742 MT
(General)SH
10800 22134 MT
(a)SH
/Times-Roman SF
(,)SH
/Times-Bold SF
11900 XM
(b)SH
/Times-Roman SF
(,)SH
/Times-Bold SF
13062 XM
(x)SH
/Times-Roman SF
15480 XM
(Bold lowercase Roman symbols represent column vectors or random variables.)SH
/Times-Bold SF
10800 23330 MT
(A)SH
/Times-Roman SF
(,)SH
/Times-Bold SF
12144 XM
(M)SH
/Times-Roman SF
15480 XM
(Bold uppercase Roman symbols represent matrices.)SH
/Times-Italic SF
10800 24526 MT
(i, j, t)SH
/Times-Roman SF
15480 XM
(Italicized lowercase Roman symbols represent integer indices.)SH
/Symbol SF
10800 25722 MT
(\321)SH
/Times-Roman SF
15480 XM
(gradient operator)SH
/Symbol SF
10800 26918 MT
(||\327||)SH
/Times-Roman SF
15480 XM
(vector magnitude operator)SH
/Times-Bold SF
10800 28114 MT
(A)SH
/Symbol SF
11744 XM
(\304)SH
/Times-Bold SF
12739 XM
(B)SH
/Times-Roman SF
15480 XM
(Schur product, defined as [)SH
/Times-Bold SF
(A)SH
/Symbol SF
28305 XM
(\304)SH
/Times-Bold SF
29300 XM
(B)SH
/Times-Roman SF
(])SH
31050 XM
(=)SH
/Times-Italic SF
31820 XM
(a)SH
32870 XM
(b)SH
9 SS 
30400 28474 MT
(ij)SH
32370 XM
(ij)SH
33420 XM
(ij)SH
11 SS 
10800 29414 MT
(E)SH
/Times-Roman SF
([)SH
/Symbol SF
(\327)SH
/Times-Roman SF
(])SH
15480 XM
(expected value operator)SH
/Times-Italic SF
10800 30610 MT
(erf)SH
/Times-Roman SF
([)SH
/Symbol SF
(\327)SH
/Times-Roman SF
(])SH
15480 XM
(standard normal error function)SH
/Times-Bold SF
10800 31806 MT
(I)SH
/Times-Roman SF
15480 XM
(identity matrix)SH
/Times-Italic SF
10800 33002 MT
(log)SH
/Times-Roman SF
([)SH
/Symbol SF
(\327)SH
/Times-Roman SF
(])SH
15480 XM
(natural logarithm operator)SH
/Times-Italic SF
10800 34198 MT
(N)SH
/Times-Roman SF
(\050)SH
/Symbol SF
(m)SH
/Times-Roman SF
(,)SH
/Symbol SF
(S)SH
/Times-Roman SF
(\051)SH
15480 XM
(Normal distribution with mean vector)SH
/Symbol SF
32375 XM
(m)SH
/Times-Roman SF
33284 XM
(and covariance matrix)SH
/Symbol SF
43331 XM
(S)SH
/Times-Italic SF
10800 35394 MT
(p)SH
/Times-Roman SF
(\050)SH
/Symbol SF
(\327)SH
/Times-Roman SF
(\051,)SH
/Times-Italic SF
13387 XM
(f)SH
/Times-Roman SF
(\050)SH
/Symbol SF
(\327)SH
/Times-Roman SF
(\051)SH
15480 XM
(probability density functions)SH
/Times-Italic SF
10800 36590 MT
(Pr)SH
/Times-Roman SF
(\050)SH
/Symbol SF
(\327)SH
/Times-Roman SF
(\051)SH
15480 XM
(probability of the specified event)SH
/Times-Italic SF
10800 37786 MT
(tr)SH
/Times-Roman SF
([)SH
/Symbol SF
(\327)SH
/Times-Roman SF
(])SH
15480 XM
(matrix trace operator)SH
/Times-Italic SF
10800 38982 MT
(U)SH
/Times-Roman SF
(\050)SH
/Times-Italic SF
(a)SH
/Times-Roman SF
(,)SH
/Times-Italic SF
(b)SH
/Times-Roman SF
(\051)SH
15480 XM
(uniform distribution over the interval [)SH
/Times-Italic SF
(a,b)SH
/Times-Roman SF
(])SH
/Times-Bold SF
15480 42909 MT
(Notation from Estimation and Classification Theory \050Chapters 2 and 3\051)SH
10800 45301 MT
(a)SH
/Times-Roman SF
15480 XM
(maximum likelihood \050sample mean\051 estimate of)SH
/Symbol SF
36866 XM
(m)SH
/Times-Italic SF
10800 46497 MT
(C)SH
/Times-Roman SF
15480 XM
(number of decision classes)SH
/Times-Bold SF
10800 47693 MT
(C)SH
/Times-Roman SF
15480 XM
(CEMAP coefficient matrix)SH
/Times-Italic SF
10800 48889 MT
(CD)SH
/Times-Roman SF
15480 XM
(product of the number of classes and dimensions,)SH
/Times-Italic SF
37505 XM
(C)SH
/Symbol SF
38389 XM
(\327)SH
/Times-Italic SF
38814 XM
(D)SH
9 SS 
22781 49747 MT
(th)SH
11 SS 
10800 50110 MT
(j)SH
/Times-Roman SF
(,)SH
/Times-Italic SF
12136 XM
(c)SH
/Times-Roman SF
15480 XM
(class index and)SH
/Times-Italic SF
22475 XM
(j)SH
/Times-Roman SF
23756 XM
(class)SH
9 /Times-Italic AF
12624 50470 MT
(j)SH
11 /Times-Bold AF
10800 51410 MT
(d)SH
/Times-Roman SF
15480 XM
(LMS desired signal)SH
/Times-Italic SF
10800 52606 MT
(D)SH
/Times-Roman SF
15480 XM
(dimension of observation vector)SH
/Times-Bold SF
10800 53802 MT
(H)SH
/Times-Roman SF
15480 XM
(MMSE and LMS-C coefficient matrix)SH
8 /Symbol AF
11656 54683 MT
(*)SH
11 /Times-Bold AF
10800 55028 MT
(H)SH
/Times-Roman SF
15480 XM
(optimal value of coefficient matrix)SH
/Times-Bold SF
31089 XM
(H)SH
8 /Times-Italic AF
31061 55818 MT
(C)SH
11 SS 
10800 56380 MT
(k)SH
/Times-Roman SF
15480 XM
(the total number of observations)SH
/Times-Italic SF
32284 XM
(n)SH
/Times-Roman SF
33056 XM
(. As)
275 W( a subscript,)SH
/Times-Italic SF
40663 XM
(k)SH
/Times-Roman SF
41426 XM
(represents the value of the)SH
15 /Symbol AF
29991 56500 MT
(\345)SH
8 /Times-Italic AF
32834 56725 MT
(j)SH
31061 56742 MT
(i)SH
/Times-Roman SF
(=1)SH
/Times-Italic SF
24547 57466 MT
(th)SH
11 /Times-Roman AF
15480 57811 MT
(parameter after the)SH
/Times-Italic SF
24059 XM
(k)SH
/Times-Roman SF
25444 XM
(observation.)SH
/Times-Italic SF
10800 59007 MT
(l)SH
/Times-Roman SF
(\050)SH
/Symbol SF
(m)SH
/Times-Roman SF
(\051)SH
15480 XM
(log-likelihood function)SH
/Times-Italic SF
25930 XM
(log)SH
/Times-Roman SF
([)SH
/Times-Italic SF
(p)SH
/Times-Roman SF
(\050)SH
/Symbol SF
(m)SH
/Times-Roman SF
(\051])SH
/Times-Bold SF
10800 60203 MT
(L)SH
/Times-Roman SF
15480 XM
(expected value of LMS coefficient matrix,)SH
/Times-Italic SF
34447 XM
(E)SH
/Times-Roman SF
([)SH
/Times-Bold SF
(H)SH
/Times-Roman SF
36696 XM
(])SH
8 /Times-Italic AF
11534 60548 MT
(k)SH
36341 XM
(k)SH
11 SS 
10800 61478 MT
(MSE)SH
/Times-Roman SF
(\050)SH
/Times-Bold SF
(N)SH
/Times-Roman SF
(\051)SH
15480 XM
(mean-squared error matrix functional)SH
/Times-Italic SF
10800 62674 MT
(n)SH
/Times-Roman SF
15480 XM
(number of observations from class)SH
/Times-Italic SF
30967 XM
(j)SH
8 SS 
11350 63019 MT
(j)SH
11 /Times-Bold AF
10800 63949 MT
(N)SH
/Times-Roman SF
15480 XM
(diagonal matrix with)SH
/Times-Italic SF
24921 XM
(n)SH
/Times-Bold SF
25693 XM
(I)SH
/Times-Roman SF
26396 XM
(as the diagonal blocks)SH
8 /Times-Italic AF
25471 64294 MT
(j)SH
11 /Times-Bold AF
10800 65224 MT
(N)SH
/Times-Roman SF
15480 XM
(\050fixed\051 count matrix in CEMAP procedure,)SH
/Symbol SF
34755 XM
(h)SH
/Times-Bold SF
(I)SH
9 /Times-Italic AF
11594 65584 MT
(c)SH
8 /Symbol AF
40867 66409 MT
(*)SH
11 /Times-Bold AF
10800 66971 MT
(V)SH
/Times-Roman SF
15480 XM
(expected value of LMS coefficient matrix error,)SH
/Times-Italic SF
36858 XM
(E)SH
/Times-Roman SF
([)SH
/Times-Bold SF
(H)SH
/Symbol SF
39257 XM
(-)SH
/Times-Bold SF
40011 XM
(H)SH
/Times-Roman SF
41267 XM
(])SH
8 /Times-Italic AF
38752 67316 MT
(k)SH
9 SS 
11594 67331 MT
(k)SH
8 SS 
40867 67333 MT
(k)SH
755 50 10800 68471 UL
11 /Times-Bold AF
10800 69467 MT
(V)SH
15480 XM
(V)SH
/Times-Roman SF
16949 XM
(transformed into principal coordinates)SH
9 /Times-Italic AF
11555 69827 MT
(k)SH
16274 XM
(k)SH
11 /Times-Bold AF
10800 70767 MT
(x)SH
/Times-Roman SF
15480 XM
(random variable or observation data vector)SH
8 /Times-Italic AF
36761 71618 MT
(T)SH
37572 XM
(T)SH
11 /Symbol AF
10800 71963 MT
(a)SH
/Times-Roman SF
15480 XM
(sample mean prepended with a bias of 1.0, [1)SH
/Times-Bold SF
36211 XM
(a)SH
/Times-Roman SF
37206 XM
(])SH
ES
%%Page: 113 114
BS
0 SI
10 /Times-Roman AF
54300 4286 MT
(113)SH
11 /Symbol AF
10800 7955 MT
(b)SH
/Times-Roman SF
15480 XM
(LMS step-size parameter)SH
/Symbol SF
10800 9151 MT
(c)SH
/Times-Roman SF
15480 XM
(set of observations from a single speaker)SH
/Symbol SF
10800 10347 MT
(d)SH
/Times-Roman SF
15480 XM
(dogmatism of the data)SH
8 /Symbol AF
22452 11228 MT
(\331)SH
11 SS 
10800 11918 MT
(e)SH
/Times-Roman SF
15480 XM
(error vector)SH
/Symbol SF
20914 XM
(m)
150 MX(-)
150 MX(m)SH
8 /Times-Italic AF
28095 12769 MT
(T)SH
11 /Symbol AF
10800 13114 MT
(F)SH
/Times-Roman SF
15480 XM
(correlation matrix of)SH
/Times-Bold SF
24857 XM
(a)SH
/Times-Roman SF
(,)SH
/Times-Italic SF
25957 XM
(E)SH
/Times-Roman SF
([)SH
/Times-Bold SF
(aa)SH
/Times-Roman SF
28540 XM
(])SH
8 /Times-Bold AF
11639 13459 MT
(aa)SH
/Times-Italic SF
28527 14176 MT
(T)SH
11 /Symbol AF
10800 14521 MT
(F)SH
/Times-Roman SF
12649 XM
(,)SH
/Times-Bold SF
13074 XM
(R)SH
/Times-Roman SF
15480 XM
(correlation matrix of)SH
/Symbol SF
24857 XM
(a)SH
/Times-Roman SF
(,)SH
/Times-Italic SF
26101 XM
(E)SH
/Times-Roman SF
([)SH
/Symbol SF
(aa)SH
/Times-Roman SF
28972 XM
(].)SH
/Times-Bold SF
29888 XM
(R)SH
/Times-Roman SF
31357 XM
(explicitly indicates the dependence)SH
8 /Symbol AF
11639 14866 MT
(aa)SH
9 /Times-Italic AF
13868 14881 MT
(k)SH
30682 XM
(k)SH
11 /Times-Roman AF
15480 15821 MT
(on the number of observations.)SH
8 /Times-Italic AF
34171 16672 MT
(T)SH
11 /Symbol AF
10800 17017 MT
(F)SH
/Times-Roman SF
15480 XM
(crosscorrelation matrix of)SH
/Times-Bold SF
27117 XM
(a)SH
/Times-Roman SF
28422 XM
(and)SH
/Symbol SF
30765 XM
(m)SH
/Times-Roman SF
(,)SH
/Times-Italic SF
31949 XM
(E)SH
/Times-Roman SF
([)SH
/Times-Bold SF
(a)SH
/Symbol SF
(m)SH
/Times-Roman SF
34616 XM
(])SH
8 /Times-Bold AF
11639 17362 MT
(a)SH
/Symbol SF
(m)SH
/Times-Italic SF
34459 18079 MT
(T)SH
11 /Symbol AF
10800 18424 MT
(F)SH
/Times-Roman SF
12605 XM
(,)SH
/Times-Bold SF
13030 XM
(P)SH
/Times-Roman SF
15480 XM
(crosscorrelation matrix of)SH
/Symbol SF
27117 XM
(a)SH
/Times-Roman SF
28566 XM
(and)SH
/Symbol SF
30909 XM
(m)SH
/Times-Roman SF
(,)SH
/Times-Italic SF
32093 XM
(E)SH
/Times-Roman SF
([)SH
/Symbol SF
(am)SH
/Times-Roman SF
34904 XM
(])SH
8 /Symbol AF
11639 18769 MT
(am)SH
/Times-Italic SF
28347 19398 MT
(T)SH
11 /Symbol AF
10800 19743 MT
(F)SH
/Times-Roman SF
15480 XM
(correlation matrix of)SH
/Symbol SF
24857 XM
(m)SH
/Times-Roman SF
(,)SH
/Times-Italic SF
26041 XM
(E)SH
/Times-Roman SF
([)SH
/Symbol SF
(mm)SH
/Times-Roman SF
28792 XM
(])SH
8 /Symbol AF
11639 20088 MT
(mm)SH
11 SS 
10800 20939 MT
(g)SH
/Times-Roman SF
15480 XM
(LMS-C misadjustment scale factor)SH
/Symbol SF
10800 22135 MT
(h)SH
/Times-Roman SF
15480 XM
(CEMAP and LMS-C convergence point parameter)SH
/Symbol SF
10800 23331 MT
(l)SH
/Times-Roman SF
15480 XM
(eigenvalue)SH
/Symbol SF
10800 24527 MT
(L)SH
/Times-Roman SF
(,)SH
/Times-Bold SF
12585 XM
(Q)SH
/Times-Roman SF
15480 XM
(eigenvalue and eigenvector matrices of)SH
/Times-Bold SF
32979 XM
(R)SH
/Symbol SF
10800 25723 MT
(m)SH
/Times-Roman SF
15480 XM
(mean vector of observations, to be estimated)SH
8 /Symbol AF
10800 26604 MT
(\331)SH
11 SS 
10800 27294 MT
(m)SH
/Times-Roman SF
15480 XM
(estimate of)SH
/Symbol SF
20612 XM
(m)SH
10800 28490 MT
(m)SH
/Times-Italic SF
15480 XM
(a priori)SH
/Times-Roman SF
19148 XM
(mean vector)SH
/Times-Italic SF
24828 XM
(E)SH
/Times-Roman SF
([)SH
/Symbol SF
(m)SH
/Times-Roman SF
(])SH
8 /Times-Italic AF
11434 28835 MT
(o)SH
11 /Symbol AF
10800 29765 MT
(q)SH
/Times-Roman SF
15480 XM
(skew in class prior probabilities)SH
/Symbol SF
10800 30961 MT
(r)SH
/Times-Roman SF
15480 XM
(correlation of the data means)SH
9 SS 
11463 31819 MT
(2)SH
11 /Symbol AF
10800 32182 MT
(s)SH
/Times-Roman SF
15480 XM
(data variance)SH
/Symbol SF
10800 33378 MT
(S)SH
/Times-Roman SF
15480 XM
(covariance matrix of data from class \050or mixture component\051)SH
/Times-Italic SF
42571 XM
(j)SH
8 SS 
11451 33723 MT
(j)SH
11 /Symbol AF
10800 34653 MT
(S)SH
/Times-Roman SF
15480 XM
(covariance matrix of)SH
/Symbol SF
24855 XM
(m)SH
8 /Times-Italic AF
11451 34998 MT
(o)SH
11 /Times-Bold AF
15480 38598 MT
(Notation from Classification Theory \050Chapter 3)SH
/Times-Roman SF
(\051)SH
10800 40990 MT
(/)SH
/Times-Italic SF
(a)SH
/Times-Roman SF
(/, /)SH
/Times-Italic SF
(a)SH
/Times-Roman SF
(/)SH
15480 XM
(phoneme)SH
/Times-Italic SF
19787 XM
(a)SH
/Times-Roman SF
20612 XM
(in any context or in the context of phoneme /)SH
/Times-Italic SF
(b)SH
/Times-Roman SF
(/ \050see Appendix B for)SH
9 /Times-Italic AF
13674 41350 MT
(b)SH
11 /Times-Roman AF
15480 42290 MT
(a complete list\051)SH
/Times-Italic SF
10800 43486 MT
(P)SH
/Times-Roman SF
15480 XM
(probability of classification error \050error rate\051)SH
8 /Symbol AF
11472 43831 MT
(e)SH
11 SS 
10800 44682 MT
(D)SH
/Times-Roman SF
15480 XM
(percentage change in error rate)SH
/Times-Bold SF
15480 48627 MT
(Notation from Hidden Markov Model Theory \050Chapter 4)SH
/Times-Roman SF
(\051)SH
15480 51019 MT
(overlines indicate the reestimated parameter values)SH
15480 52215 MT
(underlines indicate vectors \050used with Greek symbols\051)SH
9 SS 
30450 53073 MT
(th)SH
11 /Times-Bold AF
10800 53436 MT
(A)SH
/Times-Roman SF
(,)SH
/Times-Italic SF
12019 XM
(a)SH
/Times-Roman SF
15480 XM
(state transition matrix and the \050)SH
/Times-Italic SF
(i,j)SH
/Times-Roman SF
(\051)SH
31425 XM
(element)SH
8 /Times-Italic AF
12569 53781 MT
(ij)SH
11 SS 
10800 54711 MT
(b)SH
/Times-Roman SF
11572 XM
([)SH
/Times-Italic SF
(k)SH
/Times-Roman SF
(],)SH
/Times-Italic SF
13217 XM
(b)SH
/Times-Roman SF
13989 XM
([)SH
/Times-Bold SF
(x)SH
/Times-Roman SF
(])SH
15480 XM
(discrete and continuous output distributions for state)SH
/Times-Italic SF
38853 XM
(j)SH
8 SS 
11350 55056 MT
(j)SH
13767 XM
(j)SH
11 /Times-Bold AF
10800 55986 MT
(B)SH
/Times-Roman SF
15480 XM
(diagonal matrix)SH
/Times-Italic SF
22690 XM
(diag)SH
/Times-Roman SF
([)SH
/Times-Italic SF
(b)SH
/Times-Roman SF
26012 XM
([)SH
/Times-Italic SF
(O)SH
/Times-Roman SF
27422 XM
(],)SH
/Times-Italic SF
28213 XM
(b)SH
/Times-Roman SF
29213 XM
([)SH
/Times-Italic SF
(O)SH
/Times-Roman SF
30623 XM
(], . . . ,)SH
/Times-Italic SF
33614 XM
(b)SH
/Times-Roman SF
34764 XM
([)SH
/Times-Italic SF
(O)SH
/Times-Roman SF
36174 XM
(]])SH
9 /Times-Italic AF
11534 56346 MT
(t)SH
25562 XM
(1)SH
27172 XM
(t)SH
28763 XM
(2)SH
30373 XM
(t)SH
34164 XM
(N)SH
35924 XM
(t)SH
/Times-Roman SF
15968 57148 MT
(th)SH
11 /Times-Italic AF
10800 57511 MT
(c)SH
15480 XM
(k)SH
/Times-Roman SF
16943 XM
(mixture component in state)SH
/Times-Italic SF
29225 XM
(j)SH
8 SS 
11288 57856 MT
(jk)SH
11 SS 
10800 58786 MT
(i)SH
/Times-Roman SF
(,)SH
/Times-Italic SF
12136 XM
(j)SH
/Times-Roman SF
15480 XM
(state indices)SH
/Times-Italic SF
10800 59982 MT
(k)SH
/Times-Roman SF
15480 XM
(mixture component index)SH
/Times-Italic SF
10800 61178 MT
(M)SH
/Times-Roman SF
15480 XM
(number of mixture components in SCHMM codebook)SH
/Times-Italic SF
10800 62374 MT
(N)SH
/Times-Roman SF
15480 XM
(number of states in HMM)SH
/Times-Italic SF
10800 63570 MT
(T)SH
/Times-Roman SF
15480 XM
(length of observation sequence)SH
/Times-Italic SF
29408 XM
(O)SH
10800 64766 MT
(O)SH
/Times-Roman SF
(,)SH
/Times-Italic SF
12624 XM
(O)SH
/Times-Roman SF
15480 XM
(observation sequence and observation at time)SH
/Times-Italic SF
35762 XM
(t)SH
9 SS 
13418 65126 MT
(t)SH
11 SS 
10800 66066 MT
(Q)SH
/Times-Roman SF
(,)SH
/Times-Italic SF
12624 XM
(q)SH
/Times-Roman SF
15480 XM
(hidden state sequence and state at time)SH
/Times-Italic SF
32799 XM
(t)SH
9 SS 
13174 66426 MT
(t)SH
8 /Symbol AF
13624 67251 MT
(*)SH
9 SS 
11594 67450 MT
(*)SH
11 /Times-Italic AF
10800 67813 MT
(Q)SH
/Times-Roman SF
12044 XM
(,)SH
/Times-Italic SF
13074 XM
(q)SH
/Times-Roman SF
15480 XM
(Viterbi decoded hidden state sequence and state at time)SH
/Times-Italic SF
40129 XM
(t)SH
8 SS 
13624 68175 MT
(t)SH
11 SS 
10800 69105 MT
(S)SH
/Times-Roman SF
15480 XM
(HMM state)SH
/Times-Italic SF
20796 XM
(j)SH
9 SS 
11350 69465 MT
(j)SH
11 SS 
10800 70405 MT
(v)SH
/Times-Roman SF
15480 XM
(discrete codebook VQ prototype vector)SH
9 /Times-Italic AF
11288 70765 MT
(k)SH
11 /Symbol AF
10800 71705 MT
(a)SH
/Times-Roman SF
11744 XM
([)SH
/Times-Italic SF
(i)SH
/Times-Roman SF
(])SH
15480 XM
(forward variable representing the probability of the partial observation sequence)SH
9 /Times-Italic AF
11494 72065 MT
(t)SH
ES
%%Page: 114 115
BS
0 SI
10 /Times-Roman AF
54300 4286 MT
(114)SH
11 /Times-Italic AF
15480 7955 MT
(O)SH
/Times-Roman SF
16674 XM
(,)SH
/Times-Italic SF
17099 XM
(O)SH
/Times-Roman SF
18293 XM
(,)SH
/Symbol SF
18843 XM
(\327 \327 \327)SH
/Times-Roman SF
20493 XM
(,)SH
/Times-Italic SF
20918 XM
(O)SH
/Times-Roman SF
22209 XM
(and being in state)SH
/Times-Italic SF
30213 XM
(j)SH
/Times-Roman SF
30794 XM
(at time)SH
/Times-Italic SF
34094 XM
(t)SH
/Times-Roman SF
(, given the model)SH
8 SS 
16274 8300 MT
(1)SH
17893 XM
(2)SH
/Times-Italic SF
21712 XM
(t)SH
11 /Symbol AF
10800 9230 MT
(b)SH
/Times-Roman SF
11654 XM
([)SH
/Times-Italic SF
(i)SH
/Times-Roman SF
(])SH
15480 XM
(backward variable representing the probability of the partial observation sequence from)SH
9 /Times-Italic AF
11404 9590 MT
(t)SH
11 SS 
15480 10530 MT
(t)SH
/Times-Roman SF
(+1 to the end, given state)SH
/Times-Italic SF
27129 XM
(i)SH
/Times-Roman SF
27710 XM
(at)SH
/Times-Italic SF
28779 XM
(t)SH
/Times-Roman SF
29360 XM
(and the model)SH
/Symbol SF
10800 11726 MT
(d)SH
/Times-Roman SF
11593 XM
([)SH
/Times-Italic SF
(i)SH
/Times-Roman SF
(])SH
15480 XM
(Viterbi variable representing the highest scoring single path, ending in state)SH
/Times-Italic SF
49022 XM
(i)SH
/Times-Roman SF
(,)SH
9 /Times-Italic AF
11343 12086 MT
(t)SH
11 /Times-Roman AF
15480 13026 MT
(which produced the observation sequence)SH
/Symbol SF
10800 14222 MT
(g)SH
/Times-Roman SF
11502 XM
([)SH
/Times-Italic SF
(i)SH
/Times-Roman SF
(])SH
15480 XM
(intermediate F-B variable representing the probability of being in state)SH
/Times-Italic SF
46822 XM
(i)SH
/Times-Roman SF
47403 XM
(at time)SH
/Times-Italic SF
50703 XM
(t)SH
9 SS 
11252 14582 MT
(t)SH
11 /Times-Roman AF
15480 15522 MT
(given the model and observations)SH
/Symbol SF
10800 16718 MT
(g)SH
/Times-Roman SF
11502 XM
([)SH
/Times-Italic SF
(j)SH
/Times-Roman SF
(,)SH
/Times-Italic SF
(k)SH
/Times-Roman SF
(])SH
15480 XM
(intermediate F-B variable representing the probability of being in state)SH
/Times-Italic SF
46822 XM
(k)SH
/Times-Roman SF
47585 XM
(at time)SH
/Times-Italic SF
50885 XM
(t)SH
/Times-Roman SF
51466 XM
(and)SH
9 /Times-Italic AF
11252 17078 MT
(t)SH
/Times-Roman SF
20856 17880 MT
(th)SH
11 SS 
15480 18243 MT
(having the)SH
/Times-Italic SF
20368 XM
(k)SH
/Times-Roman SF
21831 XM
(component produce the observation, given the model and observations)SH
/Symbol SF
10800 19439 MT
(l)SH
/Times-Roman SF
15480 XM
(the set of current HMM parameters)SH
/Symbol SF
10800 20435 MT
(-)SH
10800 20834 MT
(m)SH
/Times-Roman SF
15480 XM
(reestimated \050adapted\051 mean vector)SH
/Symbol SF
10800 22030 MT
(p)SH
/Times-Roman SF
15480 XM
(initial state probability distribution)SH
604 50 10800 22230 UL
/Symbol SF
10800 23226 MT
(x)SH
/Times-Roman SF
11592 XM
([)SH
/Times-Italic SF
(i)SH
/Times-Roman SF
(,)SH
/Times-Italic SF
(j)SH
/Times-Roman SF
(])SH
15480 XM
(probability of transition from S)SH
29755 XM
(to S)SH
32023 XM
(at time)SH
/Times-Italic SF
35323 XM
(t)SH
9 SS 
11342 23586 MT
(t)SH
29230 XM
(i)SH
31498 XM
(j)SH
11 /Symbol AF
10800 24526 MT
(y)SH
/Times-Roman SF
11805 XM
([)SH
/Times-Italic SF
(j)SH
/Times-Roman SF
(])SH
15480 XM
(Viterbi variable holding the index of the best state from the previous time instant \050)SH
/Times-Italic SF
(t-1)SH
/Times-Roman SF
(\051)SH
9 /Times-Italic AF
11555 24886 MT
(t)SH
11 /Times-Roman AF
15480 25826 MT
(which passes through the current state)SH
/Times-Italic SF
32524 XM
(j)SH
9 /Times-Roman AF
23699 26684 MT
(th)SH
11 /Symbol AF
10800 27047 MT
(z)SH
/Times-Roman SF
11593 XM
([)SH
/Times-Italic SF
(j)SH
/Times-Roman SF
(])SH
15480 XM
(probability of the)SH
/Times-Italic SF
23393 XM
(j)SH
/Times-Roman SF
24674 XM
(component producing the observation at time)SH
/Times-Italic SF
44898 XM
(t)SH
9 SS 
11343 27407 MT
(t)SH
ES
%%Page: 115 116
BS
0 SI
10 /Times-Roman AF
54300 4286 MT
(115)SH
15 /Times-Bold AF
29445 15405 MT
(Appendix A)SH
16051 18058 MT
(Derivation of Expected Values of Selected Parameters)SH
11 /Times-Roman AF
13300 22413 MT
(For notational simplicity, assume a one-class, D-dimensional case with)214 W
/Times-Bold SF
46785 XM
(N)SH
/Times-Roman SF
47729 XM
(=)SH
/Times-Italic SF
48499 XM
(n)SH
/Times-Bold SF
(I)SH
/Times-Roman SF
(. The)
703 W( results)213 W
10800 24152 MT
(below apply equally well to the)
61 W( general C-class case.  Denote the observations from a given speaker)62 W
10800 25891 MT
(as {)SH
/Times-Bold SF
(x)SH
/Times-Roman SF
13469 XM
(,)SH
/Times-Bold SF
(x)SH
/Times-Roman SF
14694 XM
(, . . . ,)SH
/Times-Bold SF
(x)SH
/Times-Roman SF
18119 XM
(}.)SH
8 SS 
13069 26236 MT
(1)SH
14294 XM
(2)SH
/Times-Italic SF
17719 XM
(n)SH
11 /Times-Bold AF
13300 28876 MT
(Sample Mean, E[a]:)SH
8 /Times-Italic AF
34549 31299 MT
(n)SH
/Symbol SF
32490 31516 MT
(-)SH
/Times-Roman SF
(1)SH
11 SS 
13300 31861 MT
(The sample mean)47 W
/Times-Bold SF
21474 XM
(a)SH
/Times-Roman SF
22346 XM
(can be written as)46 W
/Times-Bold SF
30226 XM
(a)SH
/Times-Roman SF
30926 XM
(=)SH
/Times-Bold SF
31696 XM
(N)SH
35772 XM
(x)SH
/Times-Roman SF
36544 XM
(. The)
367 W( global \050across all speakers\051 expected)46 W
15 /Symbol AF
33479 31981 MT
(\345)SH
8 /Times-Italic AF
36322 32206 MT
(i)SH
34549 32223 MT
(i)SH
/Times-Roman SF
(=1)SH
11 SS 
10800 33600 MT
(value)SH
/Times-Italic SF
13530 XM
(E)SH
/Times-Roman SF
([)SH
/Times-Bold SF
(a)SH
/Times-Roman SF
(] is the expected value of each speaker's sample mean)73 W
/Times-Italic SF
39912 XM
(E)SH
/Times-Roman SF
([)SH
/Times-Bold SF
(a)SH
/Times-Roman SF
(|)SH
/Symbol SF
(m)SH
/Times-Roman SF
(], or)74 W
/Times-Italic SF
44609 XM
(E)SH
/Times-Roman SF
([)SH
/Times-Bold SF
(a)SH
/Times-Roman SF
(])
150 MX(=)SH
/Times-Italic SF
47483 XM
(E)SH
/Times-Roman SF
({)SH
/Times-Italic SF
(E)SH
/Times-Roman SF
([)SH
/Times-Bold SF
(a)SH
/Times-Roman SF
(|)SH
/Symbol SF
(m)SH
/Times-Roman SF
(]}.)SH
/Times-Italic SF
52992 XM
(E)SH
/Times-Roman SF
([)SH
/Times-Bold SF
(a)SH
/Times-Roman SF
(|)SH
/Symbol SF
(m)SH
/Times-Roman SF
(])SH
10800 35339 MT
(can be rewritten as)SH
8 /Times-Italic AF
21969 36785 MT
(n)SH
/Symbol SF
19722 37595 MT
(-)SH
/Times-Roman SF
(1)SH
11 /Times-Italic AF
15200 37940 MT
(E)SH
/Times-Roman SF
([)SH
/Times-Bold SF
(a)SH
/Times-Roman SF
(|)SH
/Symbol SF
(m)SH
/Times-Roman SF
(])
150 MX(=)SH
/Times-Bold SF
18928 XM
(N)SH
/Times-Italic SF
20561 XM
(E)SH
/Times-Roman SF
([)SH
/Times-Bold SF
22890 XM
(x)SH
/Times-Roman SF
23812 XM
(|)SH
/Symbol SF
24182 XM
(m)SH
/Times-Roman SF
(])SH
53571 XM
(\050)SH
/Times-Italic SF
(A)SH
/Times-Roman SF
(.1\051)SH
16 /Symbol AF
21599 38240 MT
(\345)SH
8 /Times-Italic AF
23440 38285 MT
(i)SH
21633 39034 MT
(i)SH
/Times-Roman SF
(=1)SH
/Times-Italic SF
20931 39758 MT
(n)SH
/Symbol SF
19722 40568 MT
(-)SH
/Times-Roman SF
(1)SH
11 SS 
18158 40913 MT
(=)SH
/Times-Bold SF
18928 XM
(N)SH
/Times-Italic SF
21852 XM
(E)SH
/Times-Roman SF
([)SH
/Times-Bold SF
(x)SH
/Times-Roman SF
23662 XM
(|)SH
/Symbol SF
(m)SH
/Times-Roman SF
(])SH
16 /Symbol AF
20561 41213 MT
(\345)SH
8 /Times-Italic AF
23440 41258 MT
(i)SH
20595 42007 MT
(i)SH
/Times-Roman SF
(=1)SH
/Symbol SF
19722 42731 MT
(-)SH
/Times-Roman SF
(1)SH
11 SS 
18158 43076 MT
(=)SH
/Times-Bold SF
18928 XM
(N)SH
20561 XM
(N)SH
/Symbol SF
(m)SH
/Times-Roman SF
18158 44272 MT
(=)SH
/Symbol SF
18928 XM
(m)SH
/Times-Roman SF
10800 46011 MT
(Substituting back, the expected value of the sample mean is found to be)SH
/Times-Italic SF
42632 XM
(E)SH
/Times-Roman SF
([)SH
/Times-Bold SF
(a)SH
/Times-Roman SF
(])
150 MX(=)SH
/Times-Italic SF
45506 XM
(E)SH
/Times-Roman SF
([)SH
/Symbol SF
(m)SH
/Times-Roman SF
(])
150 MX(=)SH
/Symbol SF
48464 XM
(m)SH
/Times-Roman SF
49498 XM
(.)SH
8 /Times-Italic AF
49098 46356 MT
(o)SH
9 /Times-Bold AF
25014 48638 MT
(T)SH
11 SS 
13300 48996 MT
(Correlation Matrix E[)SH
/Symbol SF
(mm)SH
/Times-Bold SF
25614 XM
(]:)SH
8 /Times-Italic AF
28196 51636 MT
(T)SH
40250 XM
(T)SH
44033 XM
(T)SH
11 /Times-Roman AF
13300 51981 MT
(By definition,)1248 W
/Symbol SF
22183 XM
(S)SH
/Times-Roman SF
23384 XM
(=)SH
/Times-Italic SF
24154 XM
(E)SH
/Times-Roman SF
([\050)SH
/Symbol SF
(m-m)SH
/Times-Roman SF
27830 XM
(\051)SH
28641 XM
(\050)SH
/Symbol SF
(m-m)SH
/Times-Roman SF
31279 XM
(\051] or)1248 W
/Symbol SF
35973 XM
(S)SH
/Times-Roman SF
37174 XM
(=)SH
/Times-Italic SF
37944 XM
(E)SH
/Times-Roman SF
([)SH
/Symbol SF
(mm)SH
/Times-Roman SF
40695 XM
(])SH
/Symbol SF
41211 XM
(-)
150 MX(m)SH
42999 XM
(m)SH
/Times-Roman SF
44478 XM
(. Obviously)
2771 W( then)1248 W
8 /Times-Italic AF
22834 52326 MT
(o)SH
27430 XM
(o)SH
30879 XM
(o)SH
36624 XM
(o)SH
42599 XM
(o)SH
43633 XM
(o)SH
15787 53375 MT
(T)SH
21557 XM
(T)SH
11 /Symbol AF
10800 53720 MT
(F)SH
/Times-Roman SF
12711 XM
(=)SH
/Times-Italic SF
13481 XM
(E)SH
/Times-Roman SF
([)SH
/Symbol SF
(mm)SH
/Times-Roman SF
16232 XM
(])
150 MX(=)SH
/Symbol SF
17518 XM
(S)SH
/Times-Roman SF
18719 XM
(+)SH
/Symbol SF
19489 XM
(m)SH
20523 XM
(m)SH
/Times-Roman SF
22002 XM
(.)SH
8 /Symbol AF
11639 54065 MT
(mm)SH
/Times-Italic SF
18169 XM
(o)SH
20123 XM
(o)SH
21157 XM
(o)SH
9 /Times-Bold AF
24846 56347 MT
(T)SH
11 SS 
13300 56705 MT
(Correlation Matrix E[aa)SH
25446 XM
(]:)SH
8 /Times-Italic AF
47963 59345 MT
(T)SH
53032 XM
(T)SH
11 /Times-Roman AF
13300 59690 MT
(Again, the global average)
190 W( is the expected value over all speakers, so)191 W
/Times-Italic SF
45825 XM
(E)SH
/Times-Roman SF
([)SH
/Times-Bold SF
(aa)SH
/Times-Roman SF
48408 XM
(])
150 MX(=)SH
/Times-Italic SF
49694 XM
(E)SH
/Times-Roman SF
({)SH
/Times-Italic SF
(E)SH
/Times-Roman SF
([)SH
/Times-Bold SF
(aa)SH
/Times-Roman SF
53627 XM
(|)SH
/Symbol SF
53997 XM
(m)SH
/Times-Roman SF
(]}.)SH
10800 61429 MT
(Rewriting,)SH
8 /Times-Italic AF
23264 62875 MT
(n)SH
26082 XM
(n)SH
27553 63468 MT
(T)SH
17338 63685 MT
(T)SH
/Symbol SF
22055 XM
(-)SH
/Times-Roman SF
(1)SH
/Symbol SF
28792 XM
(-)SH
/Times-Roman SF
(1)SH
11 /Times-Italic AF
15200 64030 MT
(E)SH
/Times-Roman SF
([)SH
/Times-Bold SF
(aa)SH
/Times-Roman SF
17933 XM
(|)SH
/Symbol SF
18303 XM
(m)SH
/Times-Roman SF
(])
150 MX(=)SH
/Times-Italic SF
20223 XM
(E)SH
/Times-Roman SF
([)SH
/Times-Bold SF
(N)SH
24185 XM
(x)SH
27003 XM
(x N)170 W
/Times-Roman SF
30386 XM
(|)SH
/Symbol SF
30906 XM
(m)SH
/Times-Roman SF
(])SH
53571 XM
(\050)SH
/Times-Italic SF
(A)SH
/Times-Roman SF
(.2\051)SH
16 /Symbol AF
22894 64330 MT
(\345)SH
25712 XM
(\345)SH
8 /Times-Italic AF
24735 64375 MT
(i)SH
27553 64392 MT
(j)SH
22928 65124 MT
(i)SH
/Times-Roman SF
(=1)SH
/Times-Italic SF
25746 XM
(j)SH
/Times-Roman SF
(=1)SH
/Times-Italic SF
22376 65848 MT
(n)SH
24422 XM
(n)SH
27703 66441 MT
(T)SH
/Symbol SF
21017 66658 MT
(-)SH
/Times-Roman SF
(1)SH
/Symbol SF
30462 XM
(-)SH
/Times-Roman SF
(1)SH
11 SS 
19453 67003 MT
(=)SH
/Times-Bold SF
20223 XM
(N)SH
/Times-Italic SF
25343 XM
(E)SH
/Times-Roman SF
([)SH
/Times-Bold SF
(x)SH
27153 XM
(x)SH
/Times-Roman SF
28298 XM
(|)SH
/Symbol SF
28668 XM
(m)SH
/Times-Roman SF
(])SH
/Times-Bold SF
(N)SH
16 /Symbol AF
22006 67303 MT
(\345)SH
24052 XM
(\345)SH
8 /Times-Italic AF
26931 67348 MT
(i)SH
27703 67365 MT
(j)SH
22040 68097 MT
(i)SH
/Times-Roman SF
(=1)SH
/Times-Italic SF
24086 XM
(j)SH
/Times-Roman SF
(=1)SH
11 SS 
10800 69202 MT
(From the definition of)SH
/Times-Italic SF
20822 XM
(p)SH
/Times-Roman SF
(\050)SH
/Times-Bold SF
(x)SH
/Times-Roman SF
22660 XM
(|)SH
/Symbol SF
23030 XM
(m)SH
/Times-Roman SF
(\051, which is)SH
/Times-Italic SF
28552 XM
(N)SH
/Times-Roman SF
(\050)SH
/Symbol SF
(m)SH
/Times-Roman SF
(,)SH
/Symbol SF
(S)SH
/Times-Roman SF
(\051,)SH
8 /Times-Italic AF
22288 69547 MT
(i)SH
ES
%%Page: 116 117
BS
0 SI
10 /Times-Roman AF
54300 4286 MT
(116)SH
8 /Times-Italic AF
24436 8059 MT
(T)SH
17560 8142 MT
(T)SH
11 /Symbol AF
21597 8404 MT
(S)SH
/Times-Roman SF
22398 XM
(+)SH
/Symbol SF
23168 XM
(mm)SH
/Times-Roman SF
24881 XM
(,)SH
/Times-Italic SF
26061 XM
(i)SH
/Times-Roman SF
26517 XM
(=)SH
/Times-Italic SF
27287 XM
(j)SH
/Times-Roman SF
(,)SH
/Times-Italic SF
15200 8704 MT
(E)SH
/Times-Roman SF
([)SH
/Times-Bold SF
(x)SH
17010 XM
(x)SH
/Times-Roman SF
18155 XM
(|)SH
/Symbol SF
18525 XM
(m)SH
/Times-Roman SF
(])
150 MX(=)SH
53571 XM
(\050)SH
/Times-Italic SF
(A)SH
/Times-Roman SF
(.3\051)SH
8 /Times-Italic AF
16788 9049 MT
(i)SH
17560 9066 MT
(j)SH
24 /Symbol AF
20445 9120 MT
({)SH
8 /Times-Italic AF
22865 9194 MT
(T)SH
11 /Symbol AF
21597 9539 MT
(mm)SH
/Times-Roman SF
23310 XM
(,)SH
/Times-Italic SF
24490 XM
(otherwise)SH
/Times-Roman SF
(.)SH
8 SS 
36000 12181 MT
(2)SH
11 SS 
10800 12526 MT
(The double)
14 W( sum in \050A.2\051 contains)13 W
/Times-Italic SF
25940 XM
(n)SH
/Times-Roman SF
26778 XM
(terms with)13 W
/Times-Italic SF
31754 XM
(i)SH
/Times-Roman SF
32210 XM
(=)SH
/Times-Italic SF
32980 XM
(j)SH
/Times-Roman SF
33574 XM
(and)SH
/Times-Italic SF
35450 XM
(n)SH
/Symbol SF
36550 XM
(-)SH
/Times-Italic SF
37304 XM
(n)SH
/Times-Roman SF
38142 XM
(other terms, so using \050A.3\051 this sum can)13 W
8 /Times-Italic AF
18757 13920 MT
(T)SH
11 /Times-Roman AF
10800 14265 MT
(be written as)SH
/Times-Bold SF
16695 XM
(N)SH
/Symbol SF
(mm)SH
/Times-Bold SF
19202 XM
(N)SH
/Times-Roman SF
20146 XM
(+)SH
/Symbol SF
20916 XM
(S)SH
/Times-Bold SF
(N)SH
/Times-Roman SF
(. Continuing,)275 W
8 /Times-Italic AF
17338 15711 MT
(T)SH
/Symbol SF
21017 XM
(-)SH
/Times-Roman SF
(1)SH
/Times-Italic SF
24284 XM
(T)SH
/Symbol SF
29048 XM
(-)SH
/Times-Roman SF
(1)SH
11 /Times-Italic AF
15200 16056 MT
(E)SH
/Times-Roman SF
([)SH
/Times-Bold SF
(aa)SH
/Times-Roman SF
17933 XM
(|)SH
/Symbol SF
18303 XM
(m)SH
/Times-Roman SF
(])
150 MX(=)SH
/Times-Bold SF
20223 XM
(N)SH
/Times-Roman SF
21856 XM
([)SH
/Times-Bold SF
(N)SH
/Symbol SF
(mm)SH
/Times-Bold SF
24729 XM
(N)SH
/Times-Roman SF
25673 XM
(+)SH
/Symbol SF
26443 XM
(S)SH
/Times-Bold SF
(N)SH
/Times-Roman SF
(])SH
/Times-Bold SF
(N)SH
/Times-Roman SF
53571 XM
(\050)SH
/Times-Italic SF
(A)SH
/Times-Roman SF
(.4\051)SH
8 /Times-Italic AF
21491 16907 MT
(T)SH
/Symbol SF
23650 XM
(-)SH
/Times-Roman SF
(1)SH
11 SS 
19453 17252 MT
(=)SH
/Symbol SF
20223 XM
(mm)SH
/Times-Roman SF
22086 XM
(+)SH
/Times-Bold SF
22856 XM
(N)SH
/Symbol SF
24489 XM
(S)SH
/Times-Roman SF
10800 18991 MT
(The global expected value is then)SH
8 /Times-Italic AF
17338 20437 MT
(T)SH
21375 XM
(T)SH
/Symbol SF
23534 XM
(-)SH
/Times-Roman SF
(1)SH
11 /Times-Italic AF
15200 20782 MT
(E)SH
/Times-Roman SF
([)SH
/Times-Bold SF
(aa)SH
/Times-Roman SF
17783 XM
(])
150 MX(=)SH
/Times-Italic SF
19069 XM
(E)SH
/Times-Roman SF
([)SH
/Symbol SF
(mm)SH
/Times-Roman SF
21970 XM
(+)SH
/Times-Bold SF
22740 XM
(N)SH
/Symbol SF
24373 XM
(S)SH
/Times-Roman SF
(])SH
53571 XM
(\050)SH
/Times-Italic SF
(A)SH
/Times-Roman SF
(.5\051)SH
8 /Times-Italic AF
21375 21633 MT
(T)SH
/Symbol SF
23900 XM
(-)SH
/Times-Roman SF
(1)SH
11 SS 
18299 21978 MT
(=)SH
/Times-Italic SF
19069 XM
(E)SH
/Times-Roman SF
([)SH
/Symbol SF
(mm)SH
/Times-Roman SF
21820 XM
(])
150 MX(+)SH
/Times-Bold SF
23106 XM
(N)SH
/Symbol SF
24739 XM
(S)SH
8 SS 
21834 22829 MT
(-)SH
/Times-Roman SF
(1)SH
/Times-Italic SF
26312 XM
(T)SH
11 /Times-Roman AF
18299 23174 MT
(=)SH
/Symbol SF
19069 XM
(S)SH
/Times-Roman SF
20270 XM
(+)SH
/Times-Bold SF
21040 XM
(N)SH
/Symbol SF
22673 XM
(S)SH
/Times-Roman SF
23474 XM
(+)SH
/Symbol SF
24244 XM
(m)SH
25278 XM
(m)SH
8 /Times-Italic AF
19720 23519 MT
(o)SH
24878 XM
(o)SH
25912 XM
(o)SH
9 /Times-Bold AF
27312 25801 MT
(T)SH
11 SS 
13300 26159 MT
(Crosscorrelation Matrix E[a)SH
/Symbol SF
(m)SH
/Times-Bold SF
27912 XM
(]:)SH
8 /Times-Italic AF
24963 28799 MT
(T)SH
30116 XM
(T)SH
11 /Times-Roman AF
13300 29144 MT
(Similar to the above,)SH
/Times-Italic SF
22741 XM
(E)SH
/Times-Roman SF
([)SH
/Times-Bold SF
(a)SH
/Symbol SF
(m)SH
/Times-Roman SF
25408 XM
(])
150 MX(=)SH
/Times-Italic SF
26694 XM
(E)SH
/Times-Roman SF
({)SH
/Times-Italic SF
(E)SH
/Times-Roman SF
([)SH
/Times-Bold SF
(a)SH
/Symbol SF
(m)SH
/Times-Roman SF
30711 XM
(|)SH
/Symbol SF
31081 XM
(m)SH
/Times-Roman SF
(]}. Rewriting)
275 W( the inner expected value,)SH
8 /Times-Italic AF
23348 30590 MT
(n)SH
17422 31400 MT
(T)SH
/Symbol SF
22139 XM
(-)SH
/Times-Roman SF
(1)SH
/Times-Italic SF
25675 XM
(T)SH
11 SS 
15200 31745 MT
(E)SH
/Times-Roman SF
([)SH
/Times-Bold SF
(a)SH
/Symbol SF
(m)SH
/Times-Roman SF
18017 XM
(|)SH
/Symbol SF
18387 XM
(m)SH
/Times-Roman SF
(])
150 MX(=)SH
/Times-Italic SF
20307 XM
(E)SH
/Times-Roman SF
([)SH
/Times-Bold SF
(N)SH
24269 XM
(x)SH
/Symbol SF
25041 XM
(m)SH
/Times-Roman SF
26270 XM
(|)SH
/Symbol SF
26640 XM
(m)SH
/Times-Roman SF
(])SH
53571 XM
(\050)SH
/Times-Italic SF
(A)SH
/Times-Roman SF
(.6\051)SH
16 /Symbol AF
22978 32045 MT
(\345)SH
8 /Times-Italic AF
24819 32090 MT
(i)SH
23012 32839 MT
(i)SH
/Times-Roman SF
(=1)SH
/Times-Italic SF
22310 33563 MT
(n)SH
/Symbol SF
21101 34373 MT
(-)SH
/Times-Roman SF
(1)SH
/Times-Italic SF
25675 XM
(T)SH
11 /Times-Roman AF
19537 34718 MT
(=)SH
/Times-Bold SF
20307 XM
(N)SH
/Times-Italic SF
23231 XM
(E)SH
/Times-Roman SF
([)SH
/Times-Bold SF
(x)SH
/Symbol SF
25041 XM
(m)SH
/Times-Roman SF
26270 XM
(|)SH
/Symbol SF
26640 XM
(m)SH
/Times-Roman SF
(])SH
16 /Symbol AF
21940 35018 MT
(\345)SH
8 /Times-Italic AF
24819 35063 MT
(i)SH
21974 35812 MT
(i)SH
/Times-Roman SF
(=1)SH
/Times-Italic SF
22310 36536 MT
(n)SH
/Symbol SF
21101 37346 MT
(-)SH
/Times-Roman SF
(1)SH
/Times-Italic SF
27195 XM
(T)SH
11 /Times-Roman AF
19537 37691 MT
(=)SH
/Times-Bold SF
20307 XM
(N)SH
/Times-Italic SF
23231 XM
(E)SH
/Times-Roman SF
([)SH
/Times-Bold SF
(x)SH
/Times-Roman SF
25191 XM
(|)SH
/Symbol SF
25561 XM
(m)SH
/Times-Roman SF
(])SH
/Symbol SF
(m)SH
16 SS 
21940 37991 MT
(\345)SH
8 /Times-Italic AF
24819 38036 MT
(i)SH
21974 38785 MT
(i)SH
/Times-Roman SF
(=1)SH
/Times-Italic SF
22310 39509 MT
(n)SH
/Symbol SF
21101 40319 MT
(-)SH
/Times-Roman SF
(1)SH
/Times-Italic SF
24499 XM
(T)SH
11 /Times-Roman AF
19537 40664 MT
(=)SH
/Times-Bold SF
20307 XM
(N)SH
/Symbol SF
23231 XM
(mm)SH
16 SS 
21940 40964 MT
(\345)SH
8 /Times-Italic AF
21974 41758 MT
(i)SH
/Times-Roman SF
(=1)SH
/Times-Italic SF
21575 42482 MT
(T)SH
11 /Times-Roman AF
19537 42827 MT
(=)SH
/Symbol SF
20307 XM
(mm)SH
8 /Times-Italic AF
23920 44273 MT
(T)SH
46073 XM
(T)SH
51843 XM
(T)SH
11 /Times-Roman AF
10800 44618 MT
(From the expression for)SH
/Times-Italic SF
21614 XM
(E)SH
/Times-Roman SF
([)SH
/Symbol SF
(mm)SH
/Times-Roman SF
24365 XM
(] above, the result can directly be written as)SH
/Times-Italic SF
43851 XM
(E)SH
/Times-Roman SF
([)SH
/Times-Bold SF
(a)SH
/Symbol SF
(m)SH
/Times-Roman SF
46518 XM
(])
150 MX(=)SH
/Symbol SF
47804 XM
(S)SH
/Times-Roman SF
49005 XM
(+)SH
/Symbol SF
49775 XM
(m)SH
50809 XM
(m)SH
/Times-Roman SF
52288 XM
(.)SH
8 /Times-Italic AF
48455 44963 MT
(o)SH
50409 XM
(o)SH
51443 XM
(o)SH
ES
%%Page: 117 118
BS
0 SI
10 /Times-Roman AF
54300 4286 MT
(117)SH
15 /Times-Bold AF
29486 15405 MT
(Appendix B)SH
19338 18058 MT
(Definitions of Speech Terms and Listings of)SH
24276 19797 MT
(Phonetic Classes and Labels)SH
11 SS 
13300 24134 MT
(Definitions)SH
/Symbol SF
12769 25712 MT
(\267)SH
/Times-Roman SF
13550 XM
(Closure: A period of silence or very low amplitude energy in the speech signal.)SH
/Symbol SF
12769 27606 MT
(\267)SH
/Times-Roman SF
13550 XM
(Formants: Vocal tract resonant frequencies which appear as lines within)
17 W( voiced segments)18 W
13550 28802 MT
(on a spectrogram.  The ordinal)
40 W( numbering of formants begins with the formant lowest in)39 W
13550 29998 MT
(frequency.)SH
/Symbol SF
12769 31892 MT
(\267)SH
/Times-Roman SF
13550 XM
(Front Vowel: A)
32 W( sonorant which, in neutral contexts, has the second formant closer to the)33 W
13550 33088 MT
(third than to the first.)SH
/Symbol SF
12769 34982 MT
(\267)SH
/Times-Roman SF
13550 XM
(Obstruent: A speech sound characterized by turbulent air flow)
39 W( caused by constrictions in)38 W
13550 36178 MT
(the vocal tract.  Obstruents appear as aperiodic patterns in)
92 W( the waveform and as diffuse)93 W
13550 37374 MT
(energy in a spectrogram.)SH
/Symbol SF
12769 39268 MT
(\267)SH
/Times-Roman SF
13550 XM
(Semivowel: Sonorants characterized by extreme)
163 W( positions of the articulators and large)162 W
13550 40464 MT
(formant motion.  Semivowels have strong coarticulation)
119 W( effects on adjacent phonemes.)120 W
13550 41660 MT
(They are composed of the phonemes in Groups II, III, and IV in the table below.)SH
/Symbol SF
12769 43554 MT
(\267)SH
/Times-Roman SF
13550 XM
(Sonorant: A speech sound characterized by voicing and no)
44 W( constrictions or turbulence in)43 W
13550 44750 MT
(the vocal)
26 W( tract.  Sonorants appear as a quasi-periodic pattern in the speech waveform and)27 W
13550 45946 MT
(lines \050formants\051 in a spectrogram.)SH
/Symbol SF
12769 47840 MT
(\267)SH
/Times-Roman SF
13550 XM
(Voicing: Vibration of the vocal cords.)SH
/Times-Bold SF
13300 50825 MT
(Phonetic Classes and Labels)SH
/Times-Roman SF
13300 53810 MT
(The following is a list of phonetic labels used for phonetic transcription.  Groups I through)
73 W( VI)72 W
10800 55549 MT
(constitute the sonorant classes, Groups VII through IX are obstruents, and closures are in Group X.)SH
/Courier-Bold SF
10800 57997 MT
(I. Vowels)SH
11460 59221 MT
(iy 'beat')1320 W
11460 60445 MT
(ih 'bit')1320 W
11460 61669 MT
(ey 'bait')1320 W
11460 62893 MT
(eh 'bet')1320 W
11460 64117 MT
(ae 'bat')1320 W
11460 65341 MT
(ux high,)
1320 W( front, rounded  allophone of /uw/ as in 'beauty')SH
11460 66565 MT
(oe mid-low,)
1320 W( front, rounded allophone of /ow/ \050and perhaps /uw/\051)SH
11460 67789 MT
(ix high,)
1320 W( central vowel \050unstressed\051, as in 'roses')SH
11460 69013 MT
(ax mid,)
1320 W( central vowel \050unstressed\051, as in 'the')SH
11460 70237 MT
(ah mid,)
1320 W( central vowel \050stressed\051, as in 'butt')SH
11460 71461 MT
(uw 'boot')1320 W
ES
%%Page: 118 119
BS
0 SI
10 /Times-Roman AF
54300 4286 MT
(118)SH
11 /Courier-Bold AF
11460 7941 MT
(uh 'book')1320 W
11460 9165 MT
(ao 'bought')1320 W
11460 10389 MT
(aa 'cot')1320 W
11460 11613 MT
(ay 'bite')1320 W
11460 12837 MT
(oy 'boy')1320 W
11460 14061 MT
(aw 'bough')1320 W
11460 15285 MT
(ow 'boat')1320 W
11460 16509 MT
(e non-diphthongized)
1980 W( /ey/)SH
11460 17733 MT
(o mid-low,)
1980 W( back, non-diphthongized allophone of /ow/)SH
10800 20181 MT
(II. Liquids)SH
11460 21405 MT
(l 'led')1980 W
11460 22629 MT
(r 'red')1980 W
10800 25077 MT
(III. Glides)SH
11460 26301 MT
(y 'yet')1980 W
11460 27525 MT
(w 'wet')1980 W
10800 29973 MT
(IV. Syllabic resonants)SH
11460 31197 MT
(er 'bird')1320 W
11460 32421 MT
(axr unstressed)
660 W( allophone of /er/, as in 'diner')SH
11460 33645 MT
(el syllabic)
1320 W( allophone of /l/, as in 'bottle')SH
11460 34869 MT
(em syllabic)
1320 W( allophone of /m/, as in 'yes 'em' \050'yes ma'am'\051)SH
11460 36093 MT
(en syllabic)
1320 W( allophone of /n/, as in 'button')SH
11460 37317 MT
(eng syllabic)
660 W( allophone of /ng/, as in 'Washington' \050uncommon\051)SH
10800 39765 MT
(V. Nasals)SH
11460 40989 MT
(m 'mom')1980 W
11460 42213 MT
(n 'non')1980 W
11460 43437 MT
(ng 'sing')
1320 W( \050only occurs in syllable-final position in English\051)SH
10800 45885 MT
(VI. Flaps and trills)SH
11460 47109 MT
(dx alveolar)
1320 W( flap \050allophone of [t] & [d]\051)SH
11460 48333 MT
(nx nasal)
1320 W( flap \050allophone of [n]\051)SH
11460 49557 MT
(lx lateral)
1320 W( flap \050allophone of [l]\051)SH
10800 52005 MT
(VII. Stops)SH
11460 53229 MT
(p 'pop')1320 W
11460 54453 MT
(b 'bob')1320 W
11460 55677 MT
(t 'tot')1320 W
11460 56901 MT
(d 'dad')1320 W
11460 58125 MT
(k 'kick')1320 W
11460 59349 MT
(g 'gag')1320 W
11460 60573 MT
(q glottal)
1320 W( stop - allophone of /t/, as in 'Atlanta' where the)SH
15420 61797 MT
(first /t/ can be realized as [q].  Also may occur between)SH
15420 63021 MT
(words in continuous speech, especially at vowel-vowel)SH
15420 64245 MT
(boundaries, and at the beginning of vowel-initial utterances.)SH
10800 66693 MT
(VIII. Affricates)SH
11460 67917 MT
(ch 'church')1320 W
11460 69141 MT
(jh 'judge')1320 W
10800 71589 MT
(IX. Fricatives)SH
ES
%%Page: 119 120
BS
0 SI
10 /Times-Roman AF
54300 4286 MT
(119)SH
11 /Courier-Bold AF
11460 7941 MT
(ph voiceless,)
1320 W( bilabial fricative - allophone of /p/)SH
11460 9165 MT
(bh voiced,)
1320 W( bilabial fricative - allophone of /b/)SH
11460 10389 MT
(f 'fief')1980 W
11460 11613 MT
(v 'verv')1980 W
11460 12837 MT
(th 'thief')1320 W
11460 14061 MT
(dh 'they')1320 W
11460 15285 MT
(s 'sis')1980 W
11460 16509 MT
(z 'zoo')1980 W
11460 17733 MT
(sh 'shoe')1320 W
11460 18957 MT
(zh 'measure')1320 W
11460 20181 MT
(kh voiceless,)
1320 W( velar fricative - allophone of /k/)SH
11460 21405 MT
(gh voiced,)
1320 W( velar fricative - allophone of /g/)SH
11460 22629 MT
(hh 'hay')1320 W
11460 23853 MT
(hv voiced)
1320 W( allophone of [hh], occurs between vowels)SH
10800 26301 MT
(X. Silence)SH
11460 27525 MT
(cl at)
1320 W( this level, we identify the closure with its stop,)SH
16080 28749 MT
(e.g. [pcl] means that the closure is for a [p], whether the)SH
16080 29973 MT
([p] is released or not)SH
11460 31197 MT
(epi closure)
660 W( resulting from coarticulation of fricative and nasal)SH
16080 32421 MT
(or lateral)SH
11460 33645 MT
(bg silence)
1320 W( at the beginning and end of an utterance)SH
11460 34869 MT
(pau silence)
660 W( within an utterance that does not correspond to the)SH
16080 36093 MT
(closure for a stop or affricate; usually audible at sentence)SH
16080 37317 MT
(level)SH
11460 38541 MT
(sil same)
660 W( as [pau], but shorter, and not audible at sentence level)SH
10800 40989 MT
(XI. Other)SH
11460 42213 MT
(ns a)
1320 W( non-speech sound)SH
11460 43437 MT
(h# exhalation)
1320 W( at end of utterance)SH
11460 44661 MT
(#h inhalation)
1320 W( at beginning of utterance)SH
11460 45885 MT
(voi voicing)
660 W( not associated with a stop closure)SH
11460 47109 MT
(-h appended)
1320 W( to stops to signify aspiration; appended to any)SH
16080 48333 MT
(voiced segment to signify devoicing)SH
11460 49557 MT
(-n appended)
1320 W( to sonorant segments to signify nasalization)SH
11460 50781 MT
(-q appended)
1320 W( to sonorant segments to signify)SH
16080 52005 MT
(glottalization/laryngealization)SH
11460 53229 MT
(-b appended)
1320 W( to stops to signify the release of a stop in an)SH
16080 54453 MT
(environment where stops are often not released,)SH
16080 55677 MT
(e.g., [k-b] as in 'black board' if the [k] in 'black' is)SH
16080 56901 MT
(released or in clause-final position.)SH
ES
%%Page: 120 121
BS
0 SI
10 /Times-Roman AF
54300 4286 MT
(120)SH
15 /Times-Bold AF
29445 15405 MT
(Appendix C)SH
22110 18058 MT
(Front Vowel Distribution Statistics)SH
11 /Times-Roman AF
13300 22413 MT
(The following statistics were compiled)
339 W( from)340 W
9 SS 
35132 XM
(ANGEL)SH
11 SS 
38797 XM
(front vowel formant data from 179)340 W
10800 24152 MT
(speakers, 10 sentences per)
86 W( speaker, for a total of 6301 training tokens.  The measures were the first)85 W
10800 25891 MT
(three formants from the classes /)SH
/Times-Italic SF
(iy)SH
/Times-Roman SF
(/, /)SH
/Times-Italic SF
(ih)SH
/Times-Roman SF
(/, /)SH
/Times-Italic SF
(eh)SH
/Times-Roman SF
(/, respectively.)SH
/Symbol SF
10800 27870 MT
(m)SH
/Courier-Bold SF
12544 XM
(=)SH
9 /Times-Italic AF
11434 28230 MT
(o)SH
11 /Courier-Bold AF
12780 29156 MT
({473 1982 2529 497 1607 2362 612 1633 2382})SH
/Symbol SF
10800 31604 MT
(S)SH
/Courier-Bold SF
12561 XM
(=)SH
9 /Times-Italic AF
11451 31964 MT
(o)SH
11 /Courier-Bold AF
12780 32890 MT
({6186 3745 5012 2467)
660 W( -671  4017  2583  5801  7709 })SH
12780 34114 MT
({3745 24675)
660 W( 19974 3207 16745 19266 7240  25772 31329})SH
12780 35338 MT
({5012 19974)
660 W( 23809 3205 12751 20585 6507  21318 30026})SH
12780 36562 MT
({2467 3207 3205 4748)
660 W( -700  7884  2700  2284  4850 })SH
12780 37786 MT
({-671 16745)
660 W( 12751 -700 31480 22192 2198  23757 27150})SH
12780 39010 MT
({4017 19266)
660 W( 20585 7884 22192 58083 3678  18776 37837})SH
12780 40234 MT
({2583 7240 6507 2700)
660 W( 2198  3678  5300  7903  11153})SH
12780 41458 MT
({5801 25772)
660 W( 21318 2284 23757 18776 7903  35589 39744})SH
12780 42682 MT
({7709 31329)
660 W( 30026 4850 27150 37837 11153 39744 57808})SH
/Symbol SF
10800 45130 MT
(S)SH
/Courier-Bold SF
12111 XM
(=)SH
12780 46354 MT
({41111 840)
SH( 2372)
1980 W( 0)
1320 W( 0)
2640 W( 0 0 0)
3300 W( 0 })2640 W
12780 47578 MT
({840 130621)
1320 W( 96861  0)
SH( 0)
2640 W( 0 0 0)
3300 W( 0 })2640 W
12780 48802 MT
({2372 96861 146890)
660 W( 0)
SH( 0)
2640 W( 0 0 0)
3300 W( 0 })2640 W
12780 50026 MT
({0 0)
2640 W( 0 18766)
3300 W( 5442)
SH( 11180)
1320 W( 0)
660 W( 0)
3300 W( 0 })2640 W
12780 51250 MT
({0 0)
2640 W( 0 5442)
3300 W( 155722)
660 W( 133887 0)
SH( 0)
3300 W( 0 })2640 W
12780 52474 MT
({0 0)
2640 W( 0 11180)
3300 W( 133887 234222 0)
SH( 0)
3300 W( 0 })2640 W
12780 53698 MT
({0 0)
2640 W( 0 0)
3300 W( 0)
2640 W( 0 32138)
3300 W( -6705)
660 W( -10599})SH
12780 54922 MT
({0 0)
2640 W( 0 0)
3300 W( 0)
2640 W( 0 -6705)
3300 W( 50111)
660 W( 35278 })SH
12780 56146 MT
({0 0)
2640 W( 0 0)
3300 W( 0)
2640 W( 0 -10599)
3300 W( 35278 80401 })SH
/Times-Roman SF
13300 59131 MT
(The average dogmatism specified by)
247 W( these statistics, computed as the average ratio of the)248 W
10800 60870 MT
(square-root of the diagonal elements of)19 W
/Symbol SF
28446 XM
(S)SH
/Times-Roman SF
29391 XM
(to)SH
/Symbol SF
30541 XM
(S)SH
/Times-Roman SF
31642 XM
(, is 2.0.  The average mean crosscorrelation, computed)19 W
9 /Times-Italic AF
31192 61230 MT
(o)SH
11 /Times-Roman AF
10800 62609 MT
(as the average of)SH
/Symbol SF
18628 64261 MT
(S)SH
9 /Times-Italic AF
19279 64621 MT
(o)SH
(ij)SH
4410 50 17224 65006 UL
11 /Symbol AF
15200 65251 MT
(r)SH
/Times-Roman SF
16454 XM
(=)SH
53509 XM
(\050)SH
/Times-Italic SF
(C)SH
/Times-Roman SF
(.1\051)SH
1601 50 17828 65448 UL
1601 50 20033 65448 UL
9 /Times-Italic AF
15804 65611 MT
(ij)SH
-2 SI
11 /Symbol AF
17224 66444 MT
(\326)SH
0 SI
(S)SH
-2 SI
19429 XM
(\326)SH
0 SI
(S)SH
9 /Times-Italic AF
18479 66804 MT
(o)SH
(ii)SH
20684 XM
(o)SH
(jj)SH
11 /Times-Roman AF
10800 68183 MT
(for the off-diagonal elements of)SH
/Symbol SF
25063 XM
(S)SH
/Times-Roman SF
26439 XM
(is 0.48, and the maximum is 0.87.)SH
9 /Times-Italic AF
25714 68543 MT
(o)SH
ES
%%Page: 121 122
BS
0 SI
10 /Times-Roman AF
54300 4286 MT
(121)SH
11 SS 
13300 7955 MT
(The following statistics were generated from the TIMIT CD-ROM database, and were used in)88 W
10800 9694 MT
(the three-class simulations described in Chapter 3.  The measures are duration)
178 W( and the first three)177 W
10800 11433 MT
(formants from the front vowels /)SH
/Times-Italic SF
(iy)SH
/Times-Roman SF
(/, /)SH
/Times-Italic SF
(ih)SH
/Times-Roman SF
(/, /)SH
/Times-Italic SF
(eh)SH
/Times-Roman SF
(/, respectively.)SH
/Symbol SF
10800 13185 MT
(m)SH
/Times-Roman SF
12159 XM
(=)SH
9 /Times-Italic AF
11434 13545 MT
(o)SH
11 /Times-Roman AF
11075 14485 MT
(0.0928 352 1836 2683 0.0763 399 1490 2423 0.0898 491 1426 2433)SH
/Symbol SF
10800 16877 MT
(S)SH
/Times-Roman SF
12176 XM
(=)SH
9 /Times-Italic AF
11451 17237 MT
(o)SH
11 /Times-Roman AF
11075 18177 MT
(0.0004 0.2664 2.0849 2.7383 0.0001 0.2576 1.3178 1.8773 0.0002 0.3642 1.1194 1.9456)275 W
11075 19373 MT
(0.2664 1504 3430 5093)
825 W( 0.1126)
275 W( 849)
1100 W( 1667 2585)
825 W( 0.0999)
275 W( 789)
1100 W( 1600 2023)825 W
11075 20569 MT
(2.0849 3430)
825 W( 33778 40709)
550 W( 1.1639  4789)
275 W( 24950 33052)
550 W( 1.2497  6707)
275 W( 22868 33329)550 W
11075 21765 MT
(2.7383 5093)
825 W( 40709 85371)
550 W( 1.5213  5818)
275 W( 28928 52187)
550 W( 1.8998  7527)
275 W( 23916 55196)550 W
11075 22961 MT
(0.0001 0.1126 1.1639 1.5213 0.0003 0.9012 3.5566 5.6269 0.0003 0.9641 2.9651 4.9265)275 W
11075 24157 MT
(0.2576 849)
1100 W( 4789 5818)
825 W( 0.9012  5121)
275 W( 15797 25040)
550 W( 0.9506  5342)
275 W( 14672 24320)550 W
11075 25353 MT
(1.3178 1667)
825 W( 24950 28928)
550 W( 3.5566)
275 W( 15797 69784 98867)
550 W( 3.6917)
275 W( 19058 60943 95301)550 W
11075 26549 MT
(1.8773 2585)
825 W( 33052 52187)
550 W( 5.6269)
275 W( 25040 98867)
550 W( 189276 6.0757)
275 W( 30465 90424)
550 W( 167751)275 W
11075 27745 MT
(0.0002 0.0999 1.2497 1.8998 0.0003 0.9506 3.6917 6.0757 0.0005 1.4861 4.4971 7.7452)275 W
11075 28941 MT
(0.3642 789)
1100 W( 6707 7527)
825 W( 0.9641  5342)
275 W( 19058 30465)
550 W( 1.4861  8405)
275 W( 21256 36541)550 W
11075 30137 MT
(1.1194 1600)
825 W( 22868 23916)
550 W( 2.9651)
275 W( 14672 60943 90424)
550 W( 4.4971)
275 W( 21256 75120)
550 W( 111233)275 W
11075 31333 MT
(1.9456 2023)
825 W( 33329 55196)
550 W( 4.9265)
275 W( 24320 95301)
550 W( 167751 7.7452)
275 W( 36541)
550 W( 111233 232220)275 W
/Symbol SF
10800 33725 MT
(S)SH
/Times-Roman SF
11726 XM
(=)SH
11075 34921 MT
(0.0012 0.4865 3.8267 4.3899 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000)275 W
11075 36117 MT
(0.4865 2670)
825 W( 566)
1100 W( 1454)
825 W( 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000)275 W
11075 37313 MT
(3.8267 566)
1100 W( 38698 36534)
550 W( 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000)275 W
11075 38509 MT
(4.3899 1454)
825 W( 36534)
550 W( 160898 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000)275 W
11075 39705 MT
(0.0000 0.0000 0.0000 0.0000 0.0006 0.5323 2.0268 2.6252 0.0000 0.0000 0.0000 0.0000)275 W
11075 40901 MT
(0.0000 0.0000 0.0000 0.0000 0.5323  2721  1175  4138 0.0000 0.0000 0.0000 0.0000)275 W
11075 42097 MT
(0.0000 0.0000 0.0000 0.0000 2.0268  1175)
275 W( 37935 22806)
550 W( 0.0000 0.0000 0.0000 0.0000)275 W
11075 43293 MT
(0.0000 0.0000 0.0000 0.0000 2.6252  4138)
275 W( 22806)
550 W( 130441 0.0000 0.0000 0.0000 0.0000)275 W
11075 44489 MT
(0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0008 0.5402 1.7505 2.3834)275 W
11075 45685 MT
(0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.5402  2340 -184.9  2965)275 W
11075 46881 MT
(0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 1.7505 -184.9)
275 W( 27531 14523)550 W
11075 48077 MT
(0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 2.3834  2965)
275 W( 14523)
550 W( 138274)275 W
ES
%%Page: 122 123
BS
0 SI
10 /Times-Roman AF
54300 4286 MT
(122)SH
15 /Times-Bold AF
29445 15405 MT
(Appendix D)SH
21988 18058 MT
(Synthetic HMM Model Parameters)SH
11 /Times-Roman AF
13300 22413 MT
(The following model parameters were used in the simulations of Chapter 4.)SH
13300 25398 MT
(State Transition Matrix:)SH
/Times-Bold SF
13300 28383 MT
(A)SH
/Times-Roman SF
14244 XM
(=)
150 MX(| 0.45 0.30 0.25 |)480 W
15014 30122 MT
(| 0.33 0.34 0.33 |)480 W
15014 31861 MT
(| 0.35 0.25 0.40 |)480 W
13300 34846 MT
(Initial State Vector:)SH
/Symbol SF
13300 37831 MT
(p)SH
/Times-Roman SF
14054 XM
(=)
150 MX([ 0.4 0.25 0.35 ])480 W
13300 40816 MT
(Output Mixture Coefficients:)SH
/Times-Bold SF
13300 43801 MT
(B)SH
/Times-Roman SF
14309 XM
(= |)
SH( 0.15 0.35 0.50 |)480 W
15204 45540 MT
(| 0.30 0.50 0.20 |)480 W
15204 47279 MT
(| 0.10 0.65 0.25 |)480 W
13300 50264 MT
(Semi-continuous Codebook parameters:)SH
/Symbol SF
13300 53249 MT
(m)SH
/Times-Roman SF
14484 XM
(=)
150 MX([ 8.0 14.0 24.0 ])480 W
8 /Times-Italic AF
13934 53594 MT
(o)SH
11 /Symbol AF
13300 56234 MT
(S)SH
/Times-Roman SF
14101 XM
(=)
150 MX([ 5.0 12.0 9.0 ])480 W
/Symbol SF
13300 59219 MT
(S)SH
/Times-Roman SF
14626 XM
(was derived from the desired dogmatism)SH
/Symbol SF
32832 XM
(d)SH
/Times-Roman SF
33650 XM
(and correlation)SH
/Symbol SF
40552 XM
(r)SH
/Times-Roman SF
(, and was set to)SH
8 /Times-Italic AF
13951 59564 MT
(o)SH
9 /Times-Roman AF
21067 60957 MT
(2)SH
11 /Symbol AF
18767 61320 MT
(S)SH
/Times-Roman SF
20068 XM
(/)SH
/Symbol SF
20524 XM
(d)SH
/Times-Roman SF
21517 XM
(,)SH
/Times-Italic SF
22697 XM
(i)SH
/Times-Roman SF
23153 XM
(=)SH
/Times-Italic SF
23923 XM
(j)SH
/Times-Roman SF
(,)SH
/Symbol SF
15200 61620 MT
(S)SH
/Times-Roman SF
16845 XM
(=)SH
9 /Times-Italic AF
19418 61680 MT
(ii)SH
8 SS 
15851 61965 MT
(oij)SH
24 /Symbol AF
17615 62036 MT
({)SH
2190 50 19975 62066 UL
8 /Times-Roman AF
23314 62717 MT
(2)SH
11 /Symbol AF
18767 63062 MT
(r)SH
-2 SI
(\326)SH
0 SI
(S)SH
21070 XM
(S)SH
/Times-Roman SF
22315 XM
(/)SH
/Symbol SF
22771 XM
(d)SH
/Times-Roman SF
23714 XM
(,)SH
/Times-Italic SF
24894 XM
(otherwise)SH
/Times-Roman SF
(.)SH
8 /Times-Italic AF
20626 63407 MT
(ii)SH
21721 XM
(jj)SH
ES
%%Page: i 124
BS
0 SI
10 /Times-Roman AF
55522 4286 MT
(i)SH
15 /Times-Bold AF
27590 15405 MT
(Table of Contents)SH
13 SS 
10150 19876 MT
(Abstract)SH
55150 XM
(1)SH
10150 21467 MT
(1. Introduction)SH
55150 XM
(4)SH
12 SS 
12600 22991 MT
(1.1. Background)SH
55200 XM
(4)SH
11 SS 
14650 24159 MT
(1.1.1. Methods of Speaker Adaptation)SH
55250 XM
(5)SH
16850 25327 MT
(1.1.1.1. Selection and Mapping Techniques)SH
55250 XM
(5)SH
16850 26495 MT
(1.1.1.2. Parameter Modification Techniques)SH
55250 XM
(7)SH
12 SS 
12600 27751 MT
(1.2. Research Objectives)SH
55200 XM
(9)SH
12600 29007 MT
(1.3. Dissertation Outline)SH
54600 XM
(10)SH
13 SS 
10150 30598 MT
(2. Fast Estimation of Mean Vectors Using Adaptive Filtering)SH
54500 XM
(12)SH
12 SS 
12600 32122 MT
(2.1. Overview)SH
54600 XM
(12)SH
12600 33378 MT
(2.2. Review of Adaptive Filtering Principles)SH
54600 XM
(13)SH
12600 34634 MT
(2.3. Problem Statement and Assumptions)SH
54600 XM
(15)SH
12600 35890 MT
(2.4. Maximum Likelihood Estimation)SH
54600 XM
(18)SH
12600 37146 MT
(2.5. Extended Maximum)SH
/Times-BoldItalic SF
25501 XM
(A Posteriori)SH
/Times-Bold SF
31770 XM
(Estimation)SH
54600 XM
(19)SH
12600 38402 MT
(2.6. Minimum Mean-Square Error Estimation)SH
54600 XM
(20)SH
11 SS 
14650 39570 MT
(2.6.1. Equivalence of the EMAP and MMSE Estimates)SH
54700 XM
(21)SH
14650 40738 MT
(2.6.2. Mean-Square Error of the EMAP/MMSE estimate)SH
54700 XM
(22)SH
14650 41906 MT
(2.6.3. The MMSE Gradient Algorithm)SH
54700 XM
(23)SH
12 SS 
12600 43162 MT
(2.7. Least Mean-Square Estimation)SH
54600 XM
(23)SH
11 SS 
14650 44330 MT
(2.7.1. Expected LMS Coefficient Error)SH
54700 XM
(24)SH
14650 45498 MT
(2.7.2. Selection of LMS Parameters)SH
54700 XM
(25)SH
16850 46666 MT
(2.7.2.1. Coefficient Matrix Initialization)SH
54700 XM
(25)SH
16850 47834 MT
(2.7.2.2. Step-Size)SH
54700 XM
(25)SH
16850 49002 MT
(2.7.2.3. Desired Signal)SH
54700 XM
(26)SH
14650 50170 MT
(2.7.3. Asymptotic Mean-Square Error of the LMS-C Estimate)SH
54700 XM
(27)SH
16850 51338 MT
(2.7.3.1. Mean-Square Error of the CEMAP Estimate)SH
54700 XM
(28)SH
12 SS 
12600 52594 MT
(2.8. Analysis of the Estimates of Mean Vectors)SH
54600 XM
(30)SH
11 SS 
14650 53762 MT
(2.8.1. Theoretical Analysis)SH
54700 XM
(31)SH
16850 54930 MT
(2.8.1.1. Effect of Dogmatism, Correlation, and Skew)SH
54700 XM
(31)SH
16850 56098 MT
(2.8.1.2. CEMAP and LMS-C Misadjustment)SH
54700 XM
(36)SH
14650 57266 MT
(2.8.2. Empirical Analysis)SH
54700 XM
(36)SH
16850 58434 MT
(2.8.2.1. Dogmatism, Correlation, and Skew)SH
54700 XM
(37)SH
16850 59602 MT
(2.8.2.2. Initialization of the LMS-C Coefficient Matrix)SH
54700 XM
(42)SH
16850 60770 MT
(2.8.2.3. Convergence-point parameter)SH
/Symbol SF
34841 XM
(h)SH
/Times-Bold SF
54700 XM
(42)SH
16850 61938 MT
(2.8.2.4. Non-Gaussian Distributions)SH
54700 XM
(44)SH
12 SS 
12600 63194 MT
(2.9. Computational Complexity)SH
54600 XM
(47)SH
12600 64450 MT
(2.10. Summary)SH
54600 XM
(47)SH
13 SS 
10150 66041 MT
(3. Applications to Feature-Based Speech Recognition Systems)SH
54500 XM
(53)SH
12 SS 
12600 67565 MT
(3.1. Overview)SH
54600 XM
(53)SH
ES
%%Page: ii 125
BS
0 SI
10 /Times-Roman AF
55244 4286 MT
(ii)SH
12 /Times-Bold AF
12600 8004 MT
(3.2. Spectrogram Reading and Feature-Based Recognition)SH
54600 XM
(54)SH
12600 9260 MT
(3.3. Overview of the)SH
10 SS 
23133 XM
(ANGEL)SH
12 SS 
26989 XM
(System)SH
54600 XM
(57)SH
12600 10516 MT
(3.4. Adaptation Methodology and Empirical Predictions)SH
54600 XM
(58)SH
12600 11772 MT
(3.5. Adaptation Results from the)SH
10 SS 
29568 XM
(ANGEL)SH
12 SS 
33424 XM
(System)SH
54600 XM
(63)SH
12600 13028 MT
(3.6. The)SH
10 SS 
17000 XM
(PROPHET)SH
12 SS 
22134 XM
(Phonetic Classifier)SH
54600 XM
(66)SH
11 SS 
14650 14196 MT
(3.6.1. Overview of)SH
9 SS 
23386 XM
(PROPHET)SH
11 SS 
54700 XM
(66)SH
14650 15364 MT
(3.6.2. Experiments with)SH
9 SS 
26016 XM
(PROPHET)SH
11 SS 
54700 XM
(68)SH
16850 16532 MT
(3.6.2.1. Database and Generation of Features and Adaptation Statistics)SH
54700 XM
(68)SH
16850 17700 MT
(3.6.2.2. Experiments with TIMIT Data)SH
54700 XM
(69)SH
16850 18868 MT
(3.6.2.3. Experiments with Computer-Generated Data)SH
54700 XM
(71)SH
12 SS 
12600 20124 MT
(3.7. Summary)SH
54600 XM
(74)SH
13 SS 
10150 21715 MT
(4. Application to Hidden Markov Model Speech Recognition Systems)SH
54500 XM
(76)SH
12 SS 
12600 23239 MT
(4.1. Overview)SH
54600 XM
(76)SH
12600 24495 MT
(4.2. Review of Hidden Markov Model Theory)SH
54600 XM
(77)SH
11 SS 
16850 25663 MT
(4.2.0.1. The Forward-Backward Algorithm)SH
54700 XM
(79)SH
16850 26831 MT
(4.2.0.2. The Viterbi Algorithm)SH
54700 XM
(81)SH
12 SS 
12600 28087 MT
(4.3. Hidden Markov Models for Speech Recognition)SH
54600 XM
(82)SH
12600 29343 MT
(4.4. Adaptation in SPHINX-SC)SH
54600 XM
(88)SH
11 SS 
14650 30511 MT
(4.4.1. Identification of Adaptation Candidates)SH
54700 XM
(93)SH
12 SS 
12600 31767 MT
(4.5. HMM Experiments with Computer-Generated Data)SH
54600 XM
(94)SH
12600 33023 MT
(4.6. Summary)SH
54000 XM
(100)SH
13 SS 
10150 34614 MT
(5. Conclusions and Suggestions for Future Work)SH
53850 XM
(101)SH
12 SS 
12600 36138 MT
(5.1. Overview of the Speaker Adaptation Problem)SH
54000 XM
(101)SH
12600 37394 MT
(5.2. Conclusions)SH
54000 XM
(102)SH
11 SS 
14650 38562 MT
(5.2.1. Development of the LMS-C Mean Vector Estimation Algorithm)SH
54150 XM
(103)SH
14650 39730 MT
(5.2.2. Application to Feature-Based Speech Recognition Systems)SH
54150 XM
(104)SH
14650 40898 MT
(5.2.3. Application to Hidden Markov Model-Based Systems)SH
54150 XM
(105)SH
12 SS 
12600 42154 MT
(5.3. Directions for Future Research)SH
54000 XM
(106)SH
13 SS 
10150 43745 MT
(References)SH
53850 XM
(108)SH
10150 45336 MT
(Glossary of Acronyms)SH
53850 XM
(111)SH
10150 46927 MT
(Nomenclature)SH
53850 XM
(112)SH
10150 48518 MT
(Appendix A. Derivation of Expected Values of Selected Parameters)SH
53850 XM
(115)SH
10150 50109 MT
(Appendix B. Definitions of Speech Terms and Listings of Phonetic Classes)SH
53850 XM
(117)SH
13400 51453 MT
(and Labels)SH
10150 53044 MT
(Appendix C. Front Vowel Distribution Statistics)SH
53850 XM
(120)SH
10150 54635 MT
(Appendix D. Synthetic HMM Model Parameters)SH
53850 XM
(122)SH
ES
%%Page: iii 126
BS
0 SI
10 /Times-Roman AF
54966 4286 MT
(iii)SH
15 /Times-Bold AF
28632 15405 MT
(List of Figures)SH
12 SS 
12600 19809 MT
(Figure 2-1:)
SH( A)
600 W( joint process estimator adaptive filter.)SH
54600 XM
(14)SH
12600 21065 MT
(Figure 2-2:)
SH( Example)
600 W( performance surface and an LMS coefficient trajectory.)SH
54600 XM
(15)SH
12600 22321 MT
(Figure 2-3:)
SH( Schematic)
600 W( diagram illustrating assumed distributions of the data.)SH
54600 XM
(16)SH
12600 23577 MT
(Figure 2-4:)
SH( Distributions)
600 W( of the data exhibiting small and large dogmatism,)SH
54600 XM
(17)SH
19200 24833 MT
(in the upper and lower panels, respectively.  The distributions in)SH
19200 26089 MT
(black represent distributions of the data of individual speakers)SH
19200 27345 MT
(while the lighter curves represent the distributions of the mean)SH
19200 28601 MT
(values of the speakers' data.)SH
12600 29857 MT
(Figure 2-5:)
SH( Mean-square)
600 W( error vs. number of samples for ML, EMAP, and)SH
54600 XM
(26)SH
19200 31113 MT
(LMS \050with d = a\051 estimates for a 2-class, 1-feature case.)SH
12600 32369 MT
(Figure 2-6:)
SH( EMAP)
600 W( and CEMAP mean-square error vs. number of training)SH
54600 XM
(27)SH
19200 33625 MT
(samples with)SH
/Symbol SF
26135 XM
(h)SH
/Times-Bold SF
27159 XM
(= 10.)SH
12600 34881 MT
(Figure 2-7:)
SH( Illustration)
600 W( of a time-varying performance surface and the man-)SH
54600 XM
(28)SH
19200 36137 MT
(ner in which it is searched \050left\051, and the resulting LMS-C learn-)SH
19200 37393 MT
(ing curve \050right\051.)SH
12600 38649 MT
(Figure 2-8:)
SH( Contour)
600 W( plot of the)SH
/Times-BoldItalic SF
29334 XM
(a priori)SH
/Times-Bold SF
33336 XM
(distribution of the mean vector)SH
/Symbol SF
49505 XM
(m)SH
/Times-Bold SF
50496 XM
(=)SH
54600 XM
(30)SH
10 SS 
23300 39571 MT
(T)SH
30875 XM
(T)SH
12 SS 
19200 39947 MT
([m)SH
21400 XM
(m)SH
22900 XM
(])SH
24267 XM
(for)SH
/Symbol SF
26100 XM
(m)SH
/Times-Bold SF
27591 XM
(= [3 2])SH
31542 XM
(.)SH
10 /Times-BoldItalic AF
20600 40327 MT
(1)SH
22400 XM
(2)SH
26791 XM
(o)SH
12 /Times-Bold AF
12600 41341 MT
(Figure 2-9:)
SH( Class-conditional)
600 W( probability density functions for the example of)SH
54600 XM
(31)SH
/Symbol SF
19200 42597 MT
(m)SH
/Times-Bold SF
20191 XM
(=)SH
/Symbol SF
21175 XM
(m)SH
/Times-Bold SF
22666 XM
(and)SH
/Symbol SF
24900 XM
(d)SH
/Times-Bold SF
25793 XM
(= 1.)SH
10 /Times-BoldItalic AF
21866 42977 MT
(o)SH
12 /Times-Bold AF
12600 43991 MT
(Figure 2-10:)
SH( Mean-square)
600 W( error as specified by Equation \0502.61\051 vs. number)SH
54600 XM
(33)SH
19800 45247 MT
(of samples for dogmatism values of)SH
/Symbol SF
38070 XM
(d)SH
/Times-Bold SF
38963 XM
(= \050a\051 0.25, \050b\051 1, \050c\051 4, and)SH
19800 46503 MT
(\050d\051 16.)SH
12600 47759 MT
(Figure 2-11:)
SH( Mean-square)
600 W( error as specified by Equation \0502.61\051 vs. number)SH
54600 XM
(34)SH
19800 49015 MT
(of samples for correlation values of)SH
/Symbol SF
38069 XM
(r)SH
/Times-Bold SF
39028 XM
(= \050a\051 0.1, \050b\051 0.5, \050c\051 0.9,)SH
19800 50271 MT
(and \050d\051 0.98.)SH
12600 51527 MT
(Figure 2-12:)
SH( Mean-square)
600 W( error as specified by Equation \0502.61\051 vs. number)SH
54600 XM
(35)SH
19800 52783 MT
(of samples with skew as a parameter.  Values of)SH
/Symbol SF
44501 XM
(q)SH
/Times-Bold SF
45426 XM
(are \050a\051 0.053,)SH
19800 54039 MT
(\050b\051 0.176, \050c\051 0.43, and \050d\051 1.0.)SH
12600 55295 MT
(Figure 2-13:)
SH( Theoretical)
600 W( LMS-C and CEMAP misadjustment for a 2-class, 1-)SH
54600 XM
(36)SH
19800 56551 MT
(feature case as a function of)SH
/Symbol SF
34334 XM
(h)SH
/Times-Bold SF
(, with)SH
/Symbol SF
38225 XM
(d)SH
/Times-Bold SF
(=1,)SH
/Symbol SF
40702 XM
(q)SH
/Times-Bold SF
(=1, and)SH
/Symbol SF
45445 XM
(r)SH
/Times-Bold SF
(=0.9.)SH
12600 57807 MT
(Figure 2-14:)
SH( Empirical)
600 W( mean-square error vs. number of samples for dog-)SH
54600 XM
(39)SH
19800 59063 MT
(matism)SH
/Symbol SF
23901 XM
(d)SH
/Times-Bold SF
24794 XM
(= \050a\051 0.25, \050b\051 1.0, \050c\051 4.0, and \050d\051 16.0;)SH
/Symbol SF
44579 XM
(r)SH
/Times-Bold SF
45538 XM
(= 0.5,)SH
/Symbol SF
48622 XM
(q)SH
/Times-Bold SF
49547 XM
(= 1.0.)SH
12600 60319 MT
(Figure 2-15:)
SH( Empirical)
600 W( mean-square error vs. number of samples for cor-)SH
54600 XM
(40)SH
19800 61575 MT
(relation)SH
/Symbol SF
24101 XM
(r)SH
/Times-Bold SF
25060 XM
(= \050a\051 0.98, \050b\051 0.9, \050c\051 0.5, and \050d\051 0.1;)SH
/Symbol SF
44245 XM
(d)SH
/Times-Bold SF
45138 XM
(= 1.0,)SH
/Symbol SF
48222 XM
(q)SH
/Times-Bold SF
49147 XM
(= 1.0.)SH
12600 62831 MT
(Figure 2-16:)
SH( Empirical)
600 W( learning curves vs. number of samples with \050a\051 5%,)SH
54600 XM
(41)SH
19800 64087 MT
(\050b\051 15%, \050c\051 30%, and \050d\051 50% of the samples from Class 1, and)SH
/Symbol SF
19800 65343 MT
(d)SH
/Times-Bold SF
20693 XM
(= 1.0,)SH
/Symbol SF
23777 XM
(r)SH
/Times-Bold SF
24736 XM
(= 0.9.)SH
12600 66599 MT
(Figure 2-17:)
SH( Empirical)
600 W( learning curves showing the effect of H)SH
45970 XM
(initialization)SH
54600 XM
(43)SH
10 /Times-BoldItalic AF
45170 66979 MT
(0)SH
12 /Times-Bold AF
19800 68012 MT
(on LMS-C convergence: \050a\051 random, \050b\051 zero, \050c\051 [)SH
/Symbol SF
(m)SH
/Times-Bold SF
46722 XM
(|I], and \050d\051)SH
10 /Times-BoldItalic AF
46222 68392 MT
(o)SH
12 /Times-Bold AF
19800 69406 MT
(Eqn. \0502.47\051.)SH
ES
%%Page: iv 127
BS
0 SI
10 /Times-Roman AF
55022 4286 MT
(iv)SH
12 /Times-Bold AF
12600 8004 MT
(Figure 2-18:)
SH( Normalized)
600 W( difference of successive LMS-C coefficient matrices,)SH
54600 XM
(44)SH
19800 9260 MT
(indicating the slow rate of change in the coefficients.)SH
12600 10516 MT
(Figure 2-19:)
SH( Empirical)
600 W( learning curves showing the effect of)SH
/Symbol SF
44236 XM
(h)SH
/Times-Bold SF
45260 XM
(on LMS-C)SH
54600 XM
(45)SH
19800 11772 MT
(convergence:)SH
/Symbol SF
26832 XM
(h)SH
/Times-Bold SF
27856 XM
(= \050a\051 1, \050b\051 11, \050c\051 21, and \050d\051 31;)SH
/Symbol SF
44641 XM
(d)SH
/Times-Bold SF
45534 XM
(= 1.0,)SH
/Symbol SF
48618 XM
(r)SH
/Times-Bold SF
49577 XM
(= 0.5.)SH
12600 13028 MT
(Figure 2-20:)
SH( Empirical)
600 W( learning curves for varying)SH
/Symbol SF
39503 XM
(b)SH
/Times-Bold SF
40462 XM
(scale factors:)SH
/Symbol SF
47762 XM
(b)SH
/Times-Bold SF
48721 XM
(= \050a\051)SH
54600 XM
(46)SH
19800 14284 MT
(0.25, \050b\051 0.5, \050c\051 1.0, and \050d\051 2.0;)SH
/Symbol SF
36301 XM
(d)SH
/Times-Bold SF
37194 XM
(= 1.0,)SH
/Symbol SF
40278 XM
(r)SH
/Times-Bold SF
41237 XM
(= 0.5,)SH
/Symbol SF
44321 XM
(q)SH
/Times-Bold SF
45246 XM
(= 1.0.)SH
12600 15540 MT
(Figure 2-21:)
SH( Empirical)
600 W( learning curves for Gaussian within-class distribu-)SH
54600 XM
(48)SH
19800 16796 MT
(tions, for \050)SH
/Symbol SF
(d)SH
/Times-Bold SF
(,)SH
/Symbol SF
(r)SH
/Times-Bold SF
(\051 = \050a\051 \0504,0.1\051, \050b\051 \0504,0.9\051, \050c\051 \0501,0.1\051, and \050d\051 \0501,0.9\051;)SH
/Symbol SF
19800 18052 MT
(q)SH
/Times-Bold SF
20725 XM
(= 1.0.)SH
12600 19308 MT
(Figure 2-22:)
SH( Empirical)
600 W( learning curves for triangular within-class distribu-)SH
54600 XM
(49)SH
19800 20564 MT
(tions, for \050)SH
/Symbol SF
(d)SH
/Times-Bold SF
(,)SH
/Symbol SF
(r)SH
/Times-Bold SF
(\051 = \050a\051 \0504,0.1\051, \050b\051 \0504,0.9\051, \050c\051 \0501,0.1\051, and \050d\051 \0501,0.9\051;)SH
/Symbol SF
19800 21820 MT
(q)SH
/Times-Bold SF
20725 XM
(= 1.0.)SH
12600 23076 MT
(Figure 2-23:)
SH( Empirical)
600 W( learning curves for uniform within-class distribu-)SH
54600 XM
(50)SH
19800 24332 MT
(tions, for \050)SH
/Symbol SF
(d)SH
/Times-Bold SF
(,)SH
/Symbol SF
(r)SH
/Times-Bold SF
(\051 = \050a\051 \0504,0.1\051, \050b\051 \0504,0.9\051, \050c\051 \0501,0.1\051, and \050d\051 \0501,0.9\051;)SH
/Symbol SF
19800 25588 MT
(q)SH
/Times-Bold SF
20725 XM
(= 1.0.)SH
12600 26844 MT
(Figure 2-24:)
SH( Number)
600 W( of floating point operations \050in thousands\051 vs. matrix)SH
54600 XM
(51)SH
19800 28100 MT
(dimension for the estimation algorithms listed in Table 2-1.  The)SH
19800 29356 MT
(ML curve is nearly coincident with the horizontal axis.)SH
12600 30612 MT
(Figure 3-1:)
SH( Waveform)
600 W( envelope and 0-4kHz spectrogram of the phrase)SH
54600 XM
(54)SH
19200 31868 MT
("Steve Jobs".)SH
12600 33124 MT
(Figure 3-2:)
SH( Spectrogram)
600 W( of the word)SH
/Times-BoldItalic SF
32332 XM
(greasy)SH
/Times-Bold SF
35832 XM
(illustrating the phoneme /)SH
/Times-BoldItalic SF
(iy)SH
/Times-Bold SF
(/ in)SH
54600 XM
(55)SH
19200 34380 MT
(neutral \050right\051 and non-neutral \050/)SH
/Times-BoldItalic SF
(r)SH
/Times-Bold SF
(/, left\051 contexts.)SH
12600 35636 MT
(Figure 3-3:)
SH( Spectrogram)
600 W( and associated phoneme network.)SH
54600 XM
(57)SH
12600 36892 MT
(Figure 3-4:)
SH( Three)
600 W( classes of data from multiple speakers: \050a\051 pooled data and)SH
54600 XM
(58)SH
19200 38148 MT
(speaker-independent boundaries, and \050b\051 individual speakers')SH
19200 39404 MT
(data and a single speaker's adapted boundaries.)SH
12600 40660 MT
(Figure 3-5:)
SH( Hypothetical)
600 W( within-class data distributions with unadapted \050U\051)SH
54600 XM
(59)SH
19200 41916 MT
(and adapted \050A\051 decision boundaries.)SH
12600 43172 MT
(Figure 3-6:)
SH( Percentage)
600 W( reduction in error rate vs. correlation for three values)SH
54600 XM
(60)SH
19200 44428 MT
(of dogmatism, using the model from Equation \0502.60\051.)SH
12600 45684 MT
(Figure 3-7:)
SH( Distributions)
600 W( of the front-vowels first and second formants:  \050a\051)SH
54600 XM
(61)SH
19200 46940 MT
(mean distributions, and \050b\051 data distributions for)SH
/Symbol SF
44675 XM
(m)SH
/Times-Bold SF
45666 XM
(=)SH
/Symbol SF
46650 XM
(m)SH
/Times-Bold SF
47841 XM
(.)SH
10 /Times-BoldItalic AF
47341 47320 MT
(o)SH
12 /Times-Bold AF
12600 48334 MT
(Figure 3-8:)
SH( Learning)
600 W( curves as specified by Eqn. \0502.61\051 for the)SH
10 SS 
45236 XM
(ANGEL)SH
12 SS 
49092 XM
(front)SH
54600 XM
(62)SH
19200 49590 MT
(vowel statistics.)SH
12600 50846 MT
(Figure 3-9:)
SH( Empirical)
600 W( adaptive classification results with computer-)SH
54600 XM
(62)SH
19200 52102 MT
(generated, normally-distributed data generated from)SH
10 SS 
46669 XM
(ANGEL)SH
12 SS 
19200 53358 MT
(front vowel statistics.)SH
12600 54614 MT
(Figure 3-10:)
SH( Histograms)
600 W( illustrating the fit of the gaussian model to)SH
10 SS 
47975 XM
(ANGEL)SH
12 SS 
54600 XM
(65)SH
19800 55870 MT
(feature data for the vowel /)SH
/Times-BoldItalic SF
(iy)SH
/Times-Bold SF
(/.)SH
12600 57126 MT
(Figure 3-11:)
SH( Error)
600 W( rates for ML adapted baseline system for three forms of)SH
54600 XM
(72)SH
19800 58382 MT
(feedback: hard-decision, soft-decision, and supervised.)SH
12600 59638 MT
(Figure 3-12:)
SH( ML,)
600 W( EMAP, and LMS-C error rates after \050a\051 one and \050b\051 five)SH
54600 XM
(73)SH
19800 60894 MT
(iterations through the adaptation training data, as a function of)SH
19800 62150 MT
(the number of training tokens.)SH
12600 63406 MT
(Figure 4-1:)
SH( Example)
600 W( of a fully-connected, first-order Markov model with)SH
54600 XM
(78)SH
19200 64662 MT
(three states.)SH
12600 65918 MT
(Figure 4-2:)
SH( Example)
600 W( lattice of 4 HMM states and 6 observations upon which)SH
54600 XM
(79)SH
19200 67174 MT
(calculations in the forward-backward and Viterbi algorithms are)SH
19200 68430 MT
(based.)SH
ES
%%Page: v 128
BS
0 SI
10 /Times-Roman AF
55300 4286 MT
(v)SH
12 /Times-Bold AF
12600 8004 MT
(Figure 4-3:)
SH( A)
600 W( left-right HMM with seven states.)SH
54600 XM
(83)SH
12600 9260 MT
(Figure 4-4:)
SH( A)
600 W( finite-state grammar network for a continuous recognition)SH
54600 XM
(83)SH
19200 10516 MT
(task.)SH
12600 11772 MT
(Figure 4-5:)
SH( Vector)
600 W( quantization of a continuous-valued observations.  All ob-)SH
54600 XM
(84)SH
19200 13028 MT
(servations x)SH
25879 XM
(are replaced by the closest prototype vector)SH
/Times-Roman SF
48445 XM
(v)SH
/Times-Bold SF
49400 XM
(.)SH
8 /Times-Italic AF
49045 13373 MT
(k)SH
10 /Times-BoldItalic AF
25301 13408 MT
(i)SH
12 /Times-Bold AF
12600 14422 MT
(Figure 4-6:)
SH( Output)
600 W( probability assignment in discrete and semi-continuous)SH
54600 XM
(86)SH
19200 15678 MT
(HMMs.)SH
12600 16934 MT
(Figure 4-7:)SH
10 SS 
19200 XM
(SPHINX-SC)SH
12 SS 
24889 XM
(experimental setup.)SH
54600 XM
(89)SH
12600 18190 MT
(Figure 4-8:)
SH( Adapted)
600 W( and unadapted \050a\051 codebooks and \050b\051 state output prob-)SH
54600 XM
(90)SH
19200 19446 MT
(ability density functions for a 3-component example.)SH
12600 20702 MT
(Figure 4-9:)
SH( MSE)
600 W( as a function of number of forward-backward iterations,)SH
54600 XM
(95)SH
19200 21958 MT
(varying observation-sequence length as a parameter.)SH
12600 23214 MT
(Figure 4-10:)
SH( Family)
600 W( of curves of maximum likelihood MSE vs. forward-)SH
54600 XM
(96)SH
19800 24470 MT
(backward iteration for various observation sequence lengths)SH
19800 25726 MT
(and \050)SH
/Symbol SF
(d)SH
/Times-Bold SF
(,)SH
/Symbol SF
(r)SH
/Times-Bold SF
(\051 = \0502.0,0.9\051.  Note the increase in MSE with forward-)SH
19800 26982 MT
(backward iteration for lengths 32 and 64.)SH
12600 28238 MT
(Figure 4-11:)
SH( Asymptotic)
600 W( MSE \050after 10 forward-backward iterations\051 vs. ob-)SH
54600 XM
(96)SH
19800 29494 MT
(servation sequence length for ML, EMAP, and LMS-C es-)SH
19800 30750 MT
(timates for \050)SH
/Symbol SF
(d)SH
/Times-Bold SF
(,)SH
/Symbol SF
(r)SH
/Times-Bold SF
(\051 = \050a\051 \0501.0,0.5\051 and \050b\051 \0500.5,0.9\051.)SH
12600 32006 MT
(Figure 4-12:)
SH( ML)
600 W( and EMAP MSE vs forward-backward iteration for obser-)SH
54600 XM
(97)SH
19800 33262 MT
(vation sequence length of 256,)SH
/Symbol SF
35402 XM
(d)SH
/Times-Bold SF
36295 XM
(= 0.5,)SH
/Symbol SF
39379 XM
(r)SH
/Times-Bold SF
40338 XM
(= 0.9.)SH
12600 34518 MT
(Figure 4-13:)
SH( Maximum)
600 W( likelihood mean-square error vs forward-backward)SH
54600 XM
(97)SH
19800 35774 MT
(iteration for correlations of 0.1 and 0.9 with)SH
/Symbol SF
42469 XM
(d)SH
/Times-Bold SF
43362 XM
(= 0.5.)SH
12600 37030 MT
(Figure 4-14:)
SH( Maximum)
600 W( likelihood mean-square error for supervised feed-)SH
54600 XM
(99)SH
19800 38286 MT
(back, soft decision, and hard decision of component member-)SH
19800 39542 MT
(ship with \050)SH
/Symbol SF
(d)SH
/Times-Bold SF
(,)SH
/Symbol SF
(r)SH
/Times-Bold SF
(,)SH
/Times-BoldItalic SF
(T)SH
/Times-Bold SF
(\051 = \0500.5,0.9,256\051.)SH
ES
%%Page: vi 129
BS
0 SI
10 /Times-Roman AF
55022 4286 MT
(vi)SH
15 /Times-Bold AF
28923 15405 MT
(List of Tables)SH
12 SS 
12600 19809 MT
(Table 2-1:)
SH( Computational)
600 W( requirements of estimation algorithms as a func-)SH
54600 XM
(51)SH
18734 21065 MT
(tion of the numbers of classes \050C\051 and dimensions \050D\051.)SH
12600 22321 MT
(Table 3-1:)
SH( Classification)
600 W( error rates for the)SH
10 SS 
35568 XM
(ANGEL)SH
12 SS 
39424 XM
(system front vowels after)SH
54600 XM
(63)SH
18734 23577 MT
(10 and 20 adaptation sentences.)SH
12600 24833 MT
(Table 3-2:)
SH( Error)
600 W( rates of the unadapted and adapted)SH
10 SS 
40502 XM
(SPIRIT)SH
12 SS 
44136 XM
(and)SH
10 SS 
46370 XM
(PROPHET)SH
12 SS 
54600 XM
(69)SH
18734 26089 MT
(systems for the four-class experiment, which includes the)SH
/Times-BoldItalic SF
48171 XM
(son)SH
/Times-Bold SF
18734 27345 MT
(class.)SH
12600 28601 MT
(Table 3-3:)
SH( Error)
600 W( rates of the unadapted and adapted)SH
10 SS 
40502 XM
(SPIRIT)SH
12 SS 
44136 XM
(and)SH
10 SS 
46370 XM
(PROPHET)SH
12 SS 
54600 XM
(70)SH
18734 29857 MT
(systems for the three-class experiment \050)SH
/Times-BoldItalic SF
(son)SH
/Times-Bold SF
41002 XM
(class excluded\051.)SH
12600 31113 MT
(Table 4-1:)
SH( Summary)
600 W( of)SH
10 SS 
25401 XM
(SPHINX-SC)SH
12 SS 
31090 XM
(results with the speaker-independent \050un-)SH
54600 XM
(91)SH
18734 32369 MT
(adapted\051 semi-continuous codebook.)SH
12600 33625 MT
(Table 4-2:)
SH( Summary)
600 W( of)SH
10 SS 
25401 XM
(SPHINX-SC)SH
12 SS 
31090 XM
(results with the ML adapted semi-)SH
54600 XM
(91)SH
18734 34881 MT
(continuous codebook.)SH
12600 36137 MT
(Table 4-3:)
SH( Summary)
600 W( of)SH
10 SS 
25401 XM
(SPHINX-SC)SH
12 SS 
31090 XM
(results with the EMAP adapted semi-)SH
54600 XM
(92)SH
18734 37393 MT
(continuous codebook.)SH
12600 38649 MT
(Table 4-4:)
SH( Summary)
600 W( of)SH
10 SS 
25401 XM
(SPHINX-SC)SH
12 SS 
31090 XM
(results with the LMS-C adapted semi-)SH
54600 XM
(92)SH
18734 39905 MT
(continuous codebook \050Nc=30\051.)SH
12600 41161 MT
(Table 4-5:)
SH( Recognition)
600 W( results for automatically selected speakers.)SH
54600 XM
(93)SH
ES
%%Trailer
%%Pages: 129
%%DocumentFonts: Times-Roman Times-Bold Symbol Times-Italic Times-BoldItalic Courier-Bold
